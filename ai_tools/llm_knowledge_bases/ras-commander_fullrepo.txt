File: c:\GH\ras-commander\.cursorrules
==================================================
RAS Commander (ras-commander) Coding Assistant

Overview
This Assistant helps you write Python code for HEC-RAS projects using the RAS Commander library (ras_commander). It automates tasks like project initialization, file manipulation (plans, geometry, flow), simulation execution (single, parallel, sequential), and HDF data extraction/analysis.

Core Concepts: RasPrj Objects (global ras or custom instances), init_ras_project, File Handling (pathlib.Path), Data Management (ras.plan_df, etc.), Execution Modes (RasCmdr), Utility Functions (RasUtils), HDF Data Access (Hdf* classes), Example Projects (RasExamples).

Decorators
The library uses these common decorators:

@log_call: Automatically logs function entry/exit points at the DEBUG level. Applied to most public methods.

@standardize_input(file_type='plan_hdf'|'geom_hdf'): Used primarily in Hdf* classes. It takes various inputs (path string, Path object, plan/geom number as str or int, h5py.File object) and ensures the decorated function receives a validated pathlib.Path object to the correct HDF file. Uses the ras_object context to resolve numbers. file_type specifies whether to look for plan results (.p*.hdf) or geometry (.g*.hdf) files when resolving numbers.

Classes, Functions and Arguments
(Note: ras_object is an optional argument for most functions operating on project context; defaults to the global ras instance if not provided when using custom instances.)

1. RasPrj Class (Manages Project State)

Function Name	@log_call	Arguments
initialize	X	project_folder, ras_exe_path, suppress_logging
check_initialized	X	
find_ras_prj (static)	X	folder_path
get_project_name	X	
get_prj_entries	X	entry_type
get_plan_entries	X	
get_flow_entries	X	
get_unsteady_entries	X	
get_geom_entries	X	
get_hdf_entries	X	
print_data	X	
get_plan_value (static)	X	plan_number_or_path, key, ras_object
get_boundary_conditions	X	
2. RasPlan Class (Plan File Operations)

Function Name	@log_call	Arguments
set_geom (static)	X	plan_number, new_geom, ras_object
set_steady (static)	X	plan_number, new_steady_flow_number, ras_object
set_unsteady (static)	X	plan_number, new_unsteady_flow_number, ras_object
set_num_cores (static)	X	plan_number_or_path, num_cores, ras_object
get_results_path (static)	X	plan_number, ras_object
get_plan_path (static)	X	plan_number, ras_object
get_flow_path (static)	X	flow_number, ras_object
get_unsteady_path (static)	X	unsteady_number, ras_object
get_geom_path (static)	X	geom_number, ras_object
clone_plan (static)	X	template_plan, new_plan_shortid, ras_object
clone_unsteady (static)	X	template_unsteady, ras_object
clone_steady (static)	X	template_flow, ras_object
clone_geom (static)	X	template_geom, ras_object
get_next_number (static)	X	existing_numbers
get_plan_value (static)	X	plan_number_or_path, key, ras_object
update_run_flags (static)	X	plan_number_or_path, geometry_preprocessor, unsteady_flow_simulation, run_sediment, post_processor, floodplain_mapping, ras_object
update_plan_intervals (static)	X	plan_number_or_path, computation_interval, output_interval, instantaneous_interval, mapping_interval, ras_object
update_plan_description(static)	X	plan_number_or_path, description, ras_object
read_plan_description (static)	X	plan_number_or_path, ras_object
update_simulation_date(static)	X	plan_number_or_path, start_date, end_date, ras_object
get_shortid (static)	X	plan_number_or_path, ras_object
set_shortid (static)	X	plan_number_or_path, new_shortid, ras_object
get_plan_title (static)	X	plan_number_or_path, ras_object
set_plan_title (static)	X	plan_number_or_path, new_title, ras_object
3. RasGeo Class (Geometry File Operations)

Function Name	@log_call	Arguments
clear_geompre_files (static)	X	plan_files=None, ras_object
4. RasUnsteady Class (Unsteady Flow File Operations)

Function Name	@log_call	Arguments
update_flow_title (static)	X	unsteady_file, new_title, ras_object
update_restart_settings (static)	X	unsteady_file, use_restart, restart_filename, ras_object
extract_boundary_and_tables (static)	X	unsteady_file, ras_object
print_boundaries_and_tables (static)	X	boundaries_df
identify_tables (static)	X	lines
parse_fixed_width_table (static)	X	lines, start, end
extract_tables (static)	X	unsteady_file, ras_object
write_table_to_file (static)	X	unsteady_file, table_name, df, start_line, ras_object
5. RasCmdr Class (Simulation Execution)

Function Name	@log_call	Arguments
compute_plan (static)	X	plan_number, dest_folder, ras_object, clear_geompre, num_cores, overwrite_dest
compute_parallel (static)	X	plan_number, max_workers, num_cores, clear_geompre, ras_object, dest_folder, overwrite_dest
compute_test_mode (static)	X	plan_number, dest_folder_suffix, clear_geompre, num_cores, ras_object, overwrite_dest
6. RasUtils Class (General Utilities)

Function Name	@log_call	Arguments
create_directory (static)	X	directory_path, ras_object
find_files_by_extension (static)	X	extension, ras_object
get_file_size (static)	X	file_path, ras_object
get_file_modification_time (static)	X	file_path, ras_object
get_plan_path (static)	X	current_plan_number_or_path, ras_object
remove_with_retry (static)	X	path, max_attempts, initial_delay, is_folder, ras_object
update_plan_file (static)	X	plan_number_or_path, file_type, entry_number, ras_object
check_file_access (static)	X	file_path, mode
convert_to_dataframe (static)	X	data_source, **kwargs
save_to_excel (static)	X	dataframe, excel_path, **kwargs
calculate_rmse (static)	X	observed_values, predicted_values, normalized
calculate_percent_bias (static)	X	observed_values, predicted_values, as_percentage
calculate_error_metrics (static)	X	observed_values, predicted_values
update_file (static)	X	file_path, update_function, *args
get_next_number (static)	X	existing_numbers
clone_file (static)	X	template_path, new_path, update_function, *args
update_project_file (static)	X	prj_file, file_type, new_num, ras_object
decode_byte_strings (static)	X	dataframe
perform_kdtree_query (static)	X	reference_points, query_points, max_distance
find_nearest_neighbors (static)	X	points, max_distance
consolidate_dataframe (static)	X	dataframe, group_by, pivot_columns, level, n_dimensional, aggregation_method
find_nearest_value (static)	X	array, target_value
horizontal_distance (static)	X	coord1, coord2
7. HdfBase Class (Core HDF Operations)

Function Name	@standardize_input	Arguments
get_simulation_start_time (static)		hdf_file
get_unsteady_timestamps (static)		hdf_file
get_2d_flow_area_names_and_counts (static)	X (plan_hdf)	hdf_path
get_projection (static)	X (plan_hdf)	hdf_path
get_attrs (static)	X (plan_hdf)	hdf_file, attr_path
get_dataset_info (static)	X (plan_hdf)	file_path, group_path
get_polylines_from_parts (static)	X (plan_hdf)	hdf_path, path, info_name, parts_name, points_name
print_attrs (static)		name, obj
8. HdfBndry Class (Boundary Geometry from HDF)

Function Name	@standardize_input	Arguments
get_bc_lines (static)	X (plan_hdf)	hdf_path
get_breaklines (static)	X (plan_hdf)	hdf_path
get_refinement_regions (static)	X (plan_hdf)	hdf_path
get_reference_lines (static)	X (plan_hdf)	hdf_path, mesh_name
get_reference_points (static)	X (plan_hdf)	hdf_path, mesh_name
9. HdfMesh Class (Mesh Geometry from HDF)

Function Name	@standardize_input	Arguments
get_mesh_area_names (static)	X (plan_hdf)	hdf_path
get_mesh_areas (static)	X (geom_hdf)	hdf_path
get_mesh_cell_polygons (static)	X (geom_hdf)	hdf_path
get_mesh_cell_points (static)	X (plan_hdf)	hdf_path
get_mesh_cell_faces (static)	X (plan_hdf)	hdf_path
get_mesh_area_attributes (static)	X (geom_hdf)	hdf_path
get_mesh_face_property_tables (static)	X (geom_hdf)	hdf_path
get_mesh_cell_property_tables (static)	X (geom_hdf)	hdf_path
10. HdfPlan Class (Plan Info from HDF)

Function Name	@log_call	@standardize_input	Arguments
get_plan_start_time (static)	X	X (plan_hdf)	hdf_path
get_plan_end_time (static)	X	X (plan_hdf)	hdf_path
get_plan_timestamps_list (static)	X	X (plan_hdf)	hdf_path
get_plan_information (static)	X	X (plan_hdf)	hdf_path
get_plan_parameters (static)	X	X (plan_hdf)	hdf_path
get_plan_met_precip (static)	X	X (plan_hdf)	hdf_path
get_geometry_information (static)	X	X (geom_hdf)	hdf_path
11. HdfResultsMesh Class (Mesh Results from HDF)

Function Name	@log_call	@standardize_input	Arguments
get_mesh_summary (static)	X	X (plan_hdf)	hdf_path, var, round_to
get_mesh_timeseries (static)	X	X (plan_hdf)	hdf_path, mesh_name, var, truncate
get_mesh_faces_timeseries (static)	X	X (plan_hdf)	hdf_path, mesh_name
get_mesh_cells_timeseries (static)	X	X (plan_hdf)	hdf_path, mesh_names, var, truncate, ras_object
get_mesh_last_iter (static)	X	X (plan_hdf)	hdf_path
get_mesh_max_ws (static)	X	X (plan_hdf)	hdf_path, round_to
get_mesh_min_ws (static)	X	X (plan_hdf)	hdf_path, round_to
get_mesh_max_face_v (static)	X	X (plan_hdf)	hdf_path, round_to
get_mesh_min_face_v (static)	X	X (plan_hdf)	hdf_path, round_to
get_mesh_max_ws_err (static)	X	X (plan_hdf)	hdf_path, round_to
get_mesh_max_iter (static)	X	X (plan_hdf)	hdf_path, round_to
12. HdfResultsPlan Class (Plan Results from HDF)

Function Name	@log_call	@standardize_input	Arguments
get_unsteady_info (static)	X	X (plan_hdf)	hdf_path
get_unsteady_summary (static)	X	X (plan_hdf)	hdf_path
get_volume_accounting (static)	X	X (plan_hdf)	hdf_path
get_runtime_data (static)		X (plan_hdf)	hdf_path
get_reference_timeseries (static)	X	X (plan_hdf)	hdf_path, reftype
get_reference_summary (static)	X	X (plan_hdf)	hdf_path, reftype
13. HdfResultsXsec Class (1D Results from HDF)

Function Name	@log_call	@standardize_input	Arguments
get_xsec_timeseries (static)	X	X (plan_hdf)	hdf_path
get_ref_lines_timeseries (static)	X	X (plan_hdf)	hdf_path
get_ref_points_timeseries (static)	X	X (plan_hdf)	hdf_path
14. HdfStruc Class (Structure Geometry from HDF)

Function Name	@log_call	@standardize_input	Arguments
get_structures (static)	X	X (geom_hdf)	hdf_path, datetime_to_str
get_geom_structures_attrs (static)	X	X (geom_hdf)	hdf_path
15. HdfUtils Class (HDF Utilities)

Function Name	@log_call	Arguments
convert_ras_string (static)		value
convert_ras_hdf_value (static)		value
convert_df_datetimes_to_str (static)		df
perform_kdtree_query (static)	X	reference_points, query_points, max_distance
find_nearest_neighbors (static)	X	points, max_distance
parse_ras_datetime_ms (static)	X	datetime_str
convert_timesteps_to_datetimes (static)		timesteps, start_time, time_unit, round_to
convert_hdf5_attrs_to_dict (static)		attrs, prefix
parse_run_time_window (static)		window
parse_ras_datetime (static)		datetime_str
parse_ras_window_datetime (static)		datetime_str
parse_duration (static)		duration_str
decode_byte_strings (static)	X	dataframe
consolidate_dataframe (static)	X	dataframe, group_by, ..., aggregation_method
find_nearest_value (static)	X	array, target_value
horizontal_distance (static)	X	coord1, coord2
16. HdfXsec Class (1D Geometry from HDF)

Function Name	@log_call	@standardize_input	Arguments
get_cross_sections (static)	X		hdf_path, datetime_to_str, ras_object
get_river_centerlines (static)	X	X (geom_hdf)	hdf_path, datetime_to_str
get_river_stationing (static)	X		centerlines_gdf
get_river_reaches (static)	X	X (geom_hdf)	hdf_path, datetime_to_str
get_river_edge_lines (static)	X	X (geom_hdf)	hdf_path, datetime_to_str
get_river_bank_lines (static)	X	X (geom_hdf)	hdf_path, datetime_to_str
17. RasExamples Class (HEC-RAS Example Projects)

Function Name	@log_call	Arguments
__init__	X	
get_example_projects (classmethod)	X	version_number
list_categories (classmethod)		
list_projects (classmethod)		category=None
extract_project (classmethod)		project_names
is_project_extracted (classmethod)		project_name
clean_projects_directory (classmethod)		
download_fema_ble_model (classmethod)	X	huc8, output_dir
18. Standalone functions (Import directly from ras_commander)

Function Name	@log_call	Arguments
init_ras_project	X	ras_project_folder, ras_version, ras_object
get_ras_exe	X	ras_version
Coding Assistance Rules:
Use standard Python libraries, especially pathlib for file paths. Prefer pathlib.Path over os.path.

Use r-strings for paths (e.g., r"C:\path"), f-strings for formatted output.

Include comments for complex logic. Use logging (logger.info, logger.debug, etc.) for runtime messages, not print().

Follow PEP 8 style conventions (snake_case for functions/variables, PascalCase for classes).

Implement clear error handling using try...except blocks and raise specific exceptions (ValueError, FileNotFoundError, etc.) when appropriate.

Explain the purpose and key arguments of ras_commander functions used.

When using ras_commander, decide whether to use the global ras object (after init_ras_project) or custom RasPrj instances. If using custom instances, always pass the instance via the ras_object parameter. Avoid mixing global and custom usage unintentionally.

Highlight best practices for parallel (compute_parallel) vs. sequential (compute_test_mode) execution based on plan independence and resources. Recommend appropriate max_workers and num_cores.

Suggest using RasExamples for testing or demonstrating code.

Use Hdf* classes for HDF file reading/analysis. Remember the @standardize_input decorator simplifies path handling for these functions.

Use type hints (typing module) for function arguments and return values in generated code.

Apply the @log_call decorator to generated functions where appropriate for consistency.

When providing code examples, ensure they are complete, runnable snippets where possible. Do not use ellipses (...) for missing code.

When using decorators from the library, import them as from ras_commander import log_call, standardize_input.

When using logging, get the logger via from ras_commander import get_logger; logger = get_logger(__name__).

Use pd.concat instead of append for pandas DataFrames (pandas >= 2.0).

When working with multiple projects, suggest using descriptive variable names for RasPrj instances (e.g., bald_eagle_proj) and separate output folders.

Remind users that init_ras_project updates the global ras object even when initializing a custom object.

Ensure correct HEC-RAS time interval strings ("1MIN", "10SEC", etc.) are used with RasPlan.update_plan_intervals.

Use datetime objects for RasPlan.update_simulation_date.

Remind users about clear_geompre=True or RasGeo.clear_geompre_files() after geometry modifications.

Prefer Hdf* classes for reading HDF data over manual h5py operations unless necessary for very specific tasks not covered by the library.
==================================================

Folder: c:\GH\ras-commander\.gitignore
==================================================

File: c:\GH\ras-commander\api.md
==================================================
# RAS Commander API Documentation

This document provides a detailed reference for the public Application Programming Interface (API) of the `ras_commander` library. It lists all public classes and functions available for interacting with HEC-RAS projects.

## Introduction to Decorators

Many functions within the `ras_commander` library utilize decorators to provide common functionality like logging and input standardization. Understanding these decorators is key to using the API effectively.

### `@log_call`

*   **Purpose:** Automatically logs the entry and exit of a function call at the DEBUG level using the library's configured logger.
*   **Usage:** Applied to most public methods in the `Ras*` and `Hdf*` classes.
*   **Benefit:** Reduces boilerplate logging code and provides a consistent way to trace function execution for debugging purposes. You can configure the overall logging level using `logging.getLogger('ras_commander').setLevel(logging.LEVEL)`.

### `@standardize_input(file_type='plan_hdf'|'geom_hdf')`

*   **Purpose:** Standardizes the input for functions that operate on HEC-RAS HDF files (`.hdf`). It ensures that the function receives a validated `pathlib.Path` object pointing to the correct HDF file, regardless of the input format provided by the user.
*   **Usage:** Primarily used by methods within the `Hdf*` classes.
*   **Accepted Inputs:** The decorator can handle various input types for the HDF file path argument (usually the first argument or `hdf_path` keyword):
    *   `str`: A plan/geometry number (e.g., "01"), a plan prefix number (e.g., "p01"), or a full file path.
    *   `int`: A plan/geometry number (e.g., 1).
    *   `pathlib.Path`: A Path object pointing to the HDF file.
    *   `h5py.File`: An opened h5py File object (the decorator extracts the filename).
*   **`file_type` Argument:**
    *   `'plan_hdf'`: When resolving numbers, the decorator looks for the corresponding plan results HDF file (e.g., `ProjectName.p01.hdf`). This is the default.
    *   `'geom_hdf'`: When resolving numbers, the decorator looks for the corresponding geometry HDF file (e.g., `ProjectName.g01.hdf`).
*   **RAS Object Context:** The decorator uses the provided `ras_object` (or the global `ras` instance) to look up file paths when numbers are given as input. Ensure the relevant `RasPrj` object is initialized.
*   **Validation:** The decorator verifies that the resulting path points to an existing file before passing it to the decorated function.

---

## Class: RasPrj

Manages HEC-RAS project data and state. Provides access to project files, plans, geometries, flows, and boundary conditions. Can be used as a global `ras` object or instantiated for multi-project workflows.

### `RasPrj.initialize(project_folder, ras_exe_path, suppress_logging=True)`

*   **Purpose:** Initializes a `RasPrj` instance. **Note:** Users should typically call `init_ras_project()` instead.
*   **Parameters:**
    *   `project_folder` (`str` or `Path`): Path to the HEC-RAS project folder.
    *   `ras_exe_path` (`str` or `Path`): Path to the HEC-RAS executable.
    *   `suppress_logging` (`bool`, optional, default=`True`): Suppresses detailed initialization logs if True.
*   **Returns:** `None`. Modifies the instance in place.
*   **Raises:** `ValueError` if no `.prj` file is found.

### `RasPrj.check_initialized()`

*   **Purpose:** Checks if the `RasPrj` instance has been initialized.
*   **Parameters:** None.
*   **Returns:** `None`.
*   **Raises:** `RuntimeError` if the project is not initialized.

### `RasPrj.find_ras_prj(folder_path)`

*   **Purpose:** (Static method) Finds the main HEC-RAS project file (`.prj`) within a folder using various heuristics.
*   **Parameters:**
    *   `folder_path` (`str` or `Path`): Path to the folder to search.
*   **Returns:** `Path` object for the found `.prj` file, or `None` if not found.

### `RasPrj.get_project_name()`

*   **Purpose:** Gets the name of the initialized HEC-RAS project (filename without extension).
*   **Parameters:** None.
*   **Returns:** (`str`): The project name.
*   **Raises:** `RuntimeError` if not initialized.

### `RasPrj.get_prj_entries(entry_type)`

*   **Purpose:** Retrieves entries (plans, flows, geoms, unsteady) listed in the project file (`.prj`).
*   **Parameters:**
    *   `entry_type` (`str`): Type of entry ('Plan', 'Flow', 'Unsteady', 'Geom').
*   **Returns:** `pd.DataFrame`: DataFrame containing information about the specified entry type found in the project.
*   **Raises:** `RuntimeError` if not initialized.

### `RasPrj.get_plan_entries()`

*   **Purpose:** Retrieves all plan file entries (`.p*`) listed in the project file.
*   **Parameters:** None.
*   **Returns:** `pd.DataFrame`: DataFrame of plan entries with details parsed from plan files.
*   **Raises:** `RuntimeError` if not initialized.

### `RasPrj.get_flow_entries()`

*   **Purpose:** Retrieves all steady flow file entries (`.f*`) listed in the project file.
*   **Parameters:** None.
*   **Returns:** `pd.DataFrame`: DataFrame of steady flow entries.
*   **Raises:** `RuntimeError` if not initialized.

### `RasPrj.get_unsteady_entries()`

*   **Purpose:** Retrieves all unsteady flow file entries (`.u*`) listed in the project file.
*   **Parameters:** None.
*   **Returns:** `pd.DataFrame`: DataFrame of unsteady flow entries with details parsed from unsteady files.
*   **Raises:** `RuntimeError` if not initialized.

### `RasPrj.get_geom_entries()`

*   **Purpose:** Retrieves all geometry file entries (`.g*`) listed in the project file.
*   **Parameters:** None.
*   **Returns:** `pd.DataFrame`: DataFrame of geometry entries including paths to associated `.hdf` files.
*   **Raises:** `RuntimeError` if not initialized.

### `RasPrj.get_hdf_entries()`

*   **Purpose:** Retrieves plan entries that have a corresponding HDF results file (`.p*.hdf`).
*   **Parameters:** None.
*   **Returns:** `pd.DataFrame`: Filtered DataFrame of plan entries with existing HDF results files.
*   **Raises:** `RuntimeError` if not initialized.

### `RasPrj.print_data()`

*   **Purpose:** Prints a summary of the initialized project data (paths, file counts, dataframes) to the log (INFO level).
*   **Parameters:** None.
*   **Returns:** `None`.
*   **Raises:** `RuntimeError` if not initialized.

### `RasPrj.get_plan_value(plan_number_or_path, key, ras_object=None)`

*   **Purpose:** (Static method, but often called on instance) Retrieves a specific value for a given key from a plan file.
*   **Parameters:**
    *   `plan_number_or_path` (`str` or `Path`): Plan number (e.g., "01") or full path to the plan file.
    *   `key` (`str`): The keyword in the plan file (e.g., 'Computation Interval', 'Short Identifier').
    *   `ras_object` (`RasPrj`, optional): Instance to use context from (project path). Defaults to global `ras`.
*   **Returns:** (`Any`): The value associated with the key, or `None` if not found. Type depends on the key (str, int).
*   **Raises:** `ValueError` if plan file not found, `IOError` on read error.

### `RasPrj.get_boundary_conditions()`

*   **Purpose:** Parses all unsteady flow files in the project to extract and structure boundary condition information.
*   **Parameters:** None.
*   **Returns:** `pd.DataFrame`: DataFrame containing detailed boundary condition data (location, type, parameters, associated unsteady file info). Returns empty DataFrame if no unsteady files or boundaries are found.
*   **Raises:** `RuntimeError` if not initialized.

### `RasPrj` Attributes

*   `project_folder` (`Path`): Path to the project folder.
*   `project_name` (`str`): Name of the project.
*   `prj_file` (`Path`): Path to the project file.
*   `ras_exe_path` (`str`): Path to the HEC-RAS executable.
*   `plan_df` (`pd.DataFrame`): DataFrame containing plan file information.
*   `flow_df` (`pd.DataFrame`): DataFrame containing flow file information.
*   `unsteady_df` (`pd.DataFrame`): DataFrame containing unsteady flow file information.
*   `geom_df` (`pd.DataFrame`): DataFrame containing geometry file information.
*   `boundaries_df` (`pd.DataFrame`): DataFrame containing boundary condition information.
*   `rasmap_df` (`pd.DataFrame`): DataFrame containing RASMapper configuration data including paths to terrain, soil layer, infiltration, and land cover data.

---

## Standalone Functions

These functions are available directly under the `ras_commander` import.

### `init_ras_project(ras_project_folder, ras_version=None, ras_object=None)`

*   **Purpose:** Primary function to initialize a `RasPrj` object (either global `ras` or a custom instance) for a specific HEC-RAS project.
*   **Parameters:**
    *   `ras_project_folder` (`str` or `Path`): Path to the HEC-RAS project folder.
    *   `ras_version` (`str`, optional): HEC-RAS version (e.g., "6.6") or full path to `Ras.exe`. Defaults to auto-detection or global setting.
    *   `ras_object` (`RasPrj`, optional): If `None`, initializes the global `ras` object. If a `RasPrj` instance, initializes that instance. If any other value (e.g., a string like "new"), creates and returns a *new* `RasPrj` instance. **Also updates the global `ras` object regardless.**
*   **Returns:** (`RasPrj`): The initialized `RasPrj` instance (either the one passed in, the global `ras`, or a newly created one).
*   **Raises:** `FileNotFoundError` if folder doesn't exist, `ValueError` if `.prj` file not found.

### `get_ras_exe(ras_version=None)`

*   **Purpose:** Determines the full path to the HEC-RAS executable based on version number or explicit path.
*   **Parameters:**
    *   `ras_version` (`str`, optional): Version string (e.g., "6.5") or full path to `Ras.exe`. If `None`, uses global `ras` object's path or defaults to "Ras.exe".
*   **Returns:** (`str`): Full path to the `Ras.exe` executable. Returns "Ras.exe" if lookup fails.

---

## Class: RasPlan

Contains static methods for operating on HEC-RAS plan files (`.p*`). Assumes a `RasPrj` object (defaulting to global `ras`) is initialized for context.

### `RasPlan.set_geom(plan_number, new_geom, ras_object=None)`

*   **Purpose:** Updates a plan file to use a different geometry file.
*   **Parameters:**
    *   `plan_number` (`str` or `int`): Plan number to modify (e.g., "01", 1).
    *   `new_geom` (`str` or `int`): Geometry number to assign (e.g., "02", 2).
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** `pd.DataFrame`: The updated *geometry* DataFrame of the `ras_object`.
*   **Raises:** `ValueError` if `new_geom` not found, `FileNotFoundError`, `IOError`.

### `RasPlan.set_steady(plan_number, new_steady_flow_number, ras_object=None)`

*   **Purpose:** Updates a plan file to use a specific steady flow file.
*   **Parameters:**
    *   `plan_number` (`str`): Plan number (e.g., "01").
    *   `new_steady_flow_number` (`str`): Steady flow number (e.g., "01").
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** `None`. Modifies the plan file and updates the `ras_object`.
*   **Raises:** `ValueError` if `new_steady_flow_number` not found, `FileNotFoundError`, `IOError`.

### `RasPlan.set_unsteady(plan_number, new_unsteady_flow_number, ras_object=None)`

*   **Purpose:** Updates a plan file to use a specific unsteady flow file.
*   **Parameters:**
    *   `plan_number` (`str`): Plan number (e.g., "01").
    *   `new_unsteady_flow_number` (`str`): Unsteady flow number (e.g., "02").
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** `None`. Modifies the plan file and updates the `ras_object`.
*   **Raises:** `ValueError` if `new_unsteady_flow_number` not found, `FileNotFoundError`, `IOError`.

### `RasPlan.set_num_cores(plan_number_or_path, num_cores, ras_object=None)`

*   **Purpose:** Sets the number of cores (`UNET D1 Cores`, `UNET D2 Cores`, `PS Cores`) in a plan file.
*   **Parameters:**
    *   `plan_number_or_path` (`str` or `Path`): Plan number or full path.
    *   `num_cores` (`int`): Number of cores to set (0 for 'All Available').
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** `None`. Modifies the plan file and updates the `ras_object`.
*   **Raises:** `FileNotFoundError`, `IOError`.

### `RasPlan.set_geom_preprocessor(file_path, run_htab, use_ib_tables, ras_object=None)`

*   **Purpose:** Modifies the `Run HTab` and `UNET Use Existing IB Tables` settings in a plan file.
*   **Parameters:**
    *   `file_path` (`str` or `Path`): Full path to the plan file.
    *   `run_htab` (`int`): `0` (use existing) or `-1` (force recompute).
    *   `use_ib_tables` (`int`): `0` (use existing) or `-1` (force recompute).
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** `None`. Modifies the plan file and updates the `ras_object`.
*   **Raises:** `ValueError` for invalid flag values, `FileNotFoundError`, `IOError`.

### `RasPlan.clone_plan(template_plan, new_plan_shortid=None, ras_object=None)`

*   **Purpose:** Creates a new plan file by copying a template plan, assigns the next available plan number, optionally updates the Short Identifier, and updates the project file.
*   **Parameters:**
    *   `template_plan` (`str`): Plan number to use as template (e.g., "01").
    *   `new_plan_shortid` (`str`, optional): New Short Identifier (max 24 chars). If `None`, appends "_copy".
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** (`str`): The number of the newly created plan (e.g., "03").
*   **Raises:** `FileNotFoundError` if template not found, `IOError`.

### `RasPlan.clone_unsteady(template_unsteady, ras_object=None)`

*   **Purpose:** Creates a new unsteady flow file (`.u*` and associated `.hdf`) by copying a template, assigns the next available number, and updates the project file.
*   **Parameters:**
    *   `template_unsteady` (`str`): Unsteady flow number to use as template (e.g., "02").
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** (`str`): The number of the newly created unsteady flow file (e.g., "03").
*   **Raises:** `FileNotFoundError` if template not found, `IOError`.

### `RasPlan.clone_steady(template_flow, ras_object=None)`

*   **Purpose:** Creates a new steady flow file (`.f*`) by copying a template, assigns the next available number, and updates the project file.
*   **Parameters:**
    *   `template_flow` (`str`): Steady flow number to use as template (e.g., "01").
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** (`str`): The number of the newly created steady flow file (e.g., "02").
*   **Raises:** `FileNotFoundError` if template not found, `IOError`.

### `RasPlan.clone_geom(template_geom, ras_object=None)`

*   **Purpose:** Creates a new geometry file (`.g*` and associated `.hdf`) by copying a template, assigns the next available number, and updates the project file.
*   **Parameters:**
    *   `template_geom` (`str`): Geometry number to use as template (e.g., "01").
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** (`str`): The number of the newly created geometry file (e.g., "03").
*   **Raises:** `FileNotFoundError` if template not found, `IOError`.

### `RasPlan.get_next_number(existing_numbers)`

*   **Purpose:** (Static utility) Finds the smallest unused positive integer number given a list of existing numbers (as strings), returned as a zero-padded string.
*   **Parameters:**
    *   `existing_numbers` (`list` of `str`): List of existing numbers (e.g., ['01', '03']).
*   **Returns:** (`str`): The next available number (e.g., "02").

### `RasPlan.get_plan_value(plan_number_or_path, key, ras_object=None)`

*   **Purpose:** Retrieves a specific value for a given key from a plan file. (See also `RasPrj.get_plan_value`).
*   **Parameters:**
    *   `plan_number_or_path` (`str` or `Path`): Plan number or full path.
    *   `key` (`str`): Keyword in the plan file (e.g., 'Computation Interval').
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** (`Any`): The value associated with the key, or `None` if not found. Type depends on the key.
*   **Raises:** `ValueError` if plan file not found, `IOError`.

### `RasPlan.get_results_path(plan_number, ras_object=None)`

*   **Purpose:** Gets the expected path to the HDF results file (`.p*.hdf`) for a given plan number. Checks if the file exists.
*   **Parameters:**
    *   `plan_number` (`str`): Plan number (e.g., "01").
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** (`str` or `None`): Full path to the HDF results file if it exists, otherwise `None`.
*   **Raises:** `RuntimeError` if not initialized.

### `RasPlan.get_plan_path(plan_number, ras_object=None)`

*   **Purpose:** Gets the full path to a plan file (`.p*`) given its number.
*   **Parameters:**
    *   `plan_number` (`str`): Plan number (e.g., "01").
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** (`str` or `None`): Full path to the plan file, or `None` if not found in the project.
*   **Raises:** `RuntimeError` if not initialized.

### `RasPlan.get_flow_path(flow_number, ras_object=None)`

*   **Purpose:** Gets the full path to a steady flow file (`.f*`) given its number.
*   **Parameters:**
    *   `flow_number` (`str`): Steady flow number (e.g., "01").
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** (`str` or `None`): Full path to the flow file, or `None` if not found.
*   **Raises:** `RuntimeError` if not initialized.

### `RasPlan.get_unsteady_path(unsteady_number, ras_object=None)`

*   **Purpose:** Gets the full path to an unsteady flow file (`.u*`) given its number.
*   **Parameters:**
    *   `unsteady_number` (`str`): Unsteady flow number (e.g., "02").
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** (`str` or `None`): Full path to the unsteady file, or `None` if not found.
*   **Raises:** `RuntimeError` if not initialized.

### `RasPlan.get_geom_path(geom_number, ras_object=None)`

*   **Purpose:** Gets the full path to a geometry file (`.g*`) given its number.
*   **Parameters:**
    *   `geom_number` (`str`): Geometry number (e.g., "01").
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** (`str` or `None`): Full path to the geometry file, or `None` if not found.
*   **Raises:** `RuntimeError` if not initialized.

### `RasPlan.update_run_flags(plan_number_or_path, geometry_preprocessor=None, unsteady_flow_simulation=None, run_sediment=None, post_processor=None, floodplain_mapping=None, ras_object=None)`

*   **Purpose:** Updates the run flags (e.g., `Run HTab`, `Run UNet`, `Run RASMapper`) in a plan file.
*   **Parameters:**
    *   `plan_number_or_path` (`str` or `Path`): Plan number or full path.
    *   `geometry_preprocessor` (`bool`, optional): Set `Run HTab` (True=1, False=0).
    *   `unsteady_flow_simulation` (`bool`, optional): Set `Run UNet` (True=1, False=0).
    *   `run_sediment` (`bool`, optional): Set `Run Sediment` (True=1, False=0).
    *   `post_processor` (`bool`, optional): Set `Run PostProcess` (True=1, False=0).
    *   `floodplain_mapping` (`bool`, optional): Set `Run RASMapper` (True=0, False=-1). **Note inverted logic for RASMapper**.
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** `None`. Modifies the plan file.
*   **Raises:** `ValueError` if plan not found, `IOError`.

### `RasPlan.update_plan_intervals(plan_number_or_path, computation_interval=None, output_interval=None, instantaneous_interval=None, mapping_interval=None, ras_object=None)`

*   **Purpose:** Updates time intervals (computation, output, mapping, etc.) in a plan file.
*   **Parameters:**
    *   `plan_number_or_path` (`str` or `Path`): Plan number or full path.
    *   `computation_interval` (`str`, optional): E.g., "1MIN", "10SEC", "1HOUR".
    *   `output_interval` (`str`, optional): E.g., "1HOUR", "30MIN".
    *   `instantaneous_interval` (`str`, optional): E.g., "1HOUR", "15MIN".
    *   `mapping_interval` (`str`, optional): E.g., "1HOUR", "15MIN".
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** `None`. Modifies the plan file.
*   **Raises:** `ValueError` if plan not found or interval invalid, `IOError`.

### `RasPlan.update_plan_description(plan_number_or_path, description, ras_object=None)`

*   **Purpose:** Updates the multi-line description block within a plan file.
*   **Parameters:**
    *   `plan_number_or_path` (`str` or `Path`): Plan number or full path.
    *   `description` (`str`): The new description text (can be multi-line).
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** `None`. Modifies the plan file and updates the `ras_object`.
*   **Raises:** `ValueError` if plan not found, `IOError`.

### `RasPlan.read_plan_description(plan_number_or_path, ras_object=None)`

*   **Purpose:** Reads the multi-line description block from a plan file.
*   **Parameters:**
    *   `plan_number_or_path` (`str` or `Path`): Plan number or full path.
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** (`str`): The description text, or "" if not found.
*   **Raises:** `ValueError` if plan not found, `IOError`.

### `RasPlan.update_simulation_date(plan_number_or_path, start_date, end_date, ras_object=None)`

*   **Purpose:** Updates the simulation start and end date/time in a plan file.
*   **Parameters:**
    *   `plan_number_or_path` (`str` or `Path`): Plan number or full path.
    *   `start_date` (`datetime`): Simulation start datetime object.
    *   `end_date` (`datetime`): Simulation end datetime object.
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** `None`. Modifies the plan file and updates the `ras_object`.
*   **Raises:** `ValueError` if plan not found, `IOError`.

### `RasPlan.get_shortid(plan_number_or_path, ras_object=None)`

*   **Purpose:** Gets the 'Short Identifier' value from a plan file.
*   **Parameters:**
    *   `plan_number_or_path` (`str` or `Path`): Plan number or full path.
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** (`str`): The Short Identifier, or "" if not found.
*   **Raises:** `ValueError` if plan not found, `IOError`.

### `RasPlan.set_shortid(plan_number_or_path, new_shortid, ras_object=None)`

*   **Purpose:** Sets the 'Short Identifier' value in a plan file (max 24 chars).
*   **Parameters:**
    *   `plan_number_or_path` (`str` or `Path`): Plan number or full path.
    *   `new_shortid` (`str`): New identifier (will be truncated if > 24 chars).
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** `None`. Modifies the plan file.
*   **Raises:** `ValueError` if plan not found, `IOError`.

### `RasPlan.get_plan_title(plan_number_or_path, ras_object=None)`

*   **Purpose:** Gets the 'Plan Title' value from a plan file.
*   **Parameters:**
    *   `plan_number_or_path` (`str` or `Path`): Plan number or full path.
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** (`str`): The Plan Title, or "" if not found.
*   **Raises:** `ValueError` if plan not found, `IOError`.

### `RasPlan.set_plan_title(plan_number_or_path, new_title, ras_object=None)`

*   **Purpose:** Sets the 'Plan Title' value in a plan file.
*   **Parameters:**
    *   `plan_number_or_path` (`str` or `Path`): Plan number or full path.
    *   `new_title` (`str`): New title.
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** `None`. Modifies the plan file.
*   **Raises:** `ValueError` if plan not found, `IOError`.

---

## Class: RasGeo

Contains static methods for operating on HEC-RAS geometry files (`.g*`) and associated preprocessor files. Assumes a `RasPrj` object (defaulting to global `ras`) is initialized.

### `RasGeo.clear_geompre_files(plan_files=None, ras_object=None)`

*   **Purpose:** Deletes geometry preprocessor files (`.c*`) associated with specified plan files. This forces HEC-RAS to recompute hydraulic tables based on the geometry. **Note:** Does not currently clear IB tables or HDF geometry tables.
*   **Parameters:**
    *   `plan_files` (`str`, `Path`, `List[Union[str, Path]]`, optional): Plan file path(s) or number(s). If `None`, clears for all plans in the project.
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** `None`. Deletes files and updates the `ras_object`'s geometry DataFrame.
*   **Raises:** `PermissionError`, `OSError`.

### `RasGeo.get_mannings_baseoverrides(geom_file_path)`

*   **Purpose:** Reads the base Manning's n table from a HEC-RAS geometry file.
*   **Parameters:**
    *   `geom_file_path` (Input handled by `@standardize_input`): Path identifier for the geometry file (.g##).
*   **Returns:** `pd.DataFrame`: DataFrame with Table Number, Land Cover Name, and Base Manning's n Value.

### `RasGeo.get_mannings_regionoverrides(geom_file_path)`

*   **Purpose:** Reads the Manning's n region overrides from a HEC-RAS geometry file.
*   **Parameters:**
    *   `geom_file_path` (Input handled by `@standardize_input`): Path identifier for the geometry file (.g##).
*   **Returns:** `pd.DataFrame`: DataFrame with Table Number, Land Cover Name, MainChannel value, and Region Name.

### `RasGeo.set_mannings_baseoverrides(geom_file_path, mannings_data)`

*   **Purpose:** Writes base Manning's n values to a HEC-RAS geometry file.
*   **Parameters:**
    *   `geom_file_path` (Input handled by `@standardize_input`): Path identifier for the geometry file (.g##).
    *   `mannings_data` (`pd.DataFrame`): DataFrame with columns 'Table Number', 'Land Cover Name', and 'Base Manning\'s n Value'.
*   **Returns:** `bool`: True if successful.

### `RasGeo.set_mannings_regionoverrides(geom_file_path, mannings_data)`

*   **Purpose:** Writes regional Manning's n overrides to a HEC-RAS geometry file.
*   **Parameters:**
    *   `geom_file_path` (Input handled by `@standardize_input`): Path identifier for the geometry file (.g##).
    *   `mannings_data` (`pd.DataFrame`): DataFrame with columns 'Table Number', 'Land Cover Name', 'MainChannel', and 'Region Name'.
*   **Returns:** `bool`: True if successful.

---

## Class: RasUnsteady

Contains static methods for operating on HEC-RAS unsteady flow files (`.u*`). Assumes a `RasPrj` object (defaulting to global `ras`) is initialized.

### `RasUnsteady.update_flow_title(unsteady_file, new_title, ras_object=None)`

*   **Purpose:** Updates the 'Flow Title' line within an unsteady flow file (max 24 chars).
*   **Parameters:**
    *   `unsteady_file` (`str` or `Path`): Unsteady flow number or full path.
    *   `new_title` (`str`): The new title (will be truncated if > 24 chars).
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** `None`. Modifies the file and updates the `ras_object`.
*   **Raises:** `FileNotFoundError`, `PermissionError`, `IOError`.

### `RasUnsteady.update_restart_settings(unsteady_file, use_restart, restart_filename=None, ras_object=None)`

*   **Purpose:** Enables or disables the use of a restart file (`.rst`) in an unsteady flow file.
*   **Parameters:**
    *   `unsteady_file` (`str` or `Path`): Unsteady flow number or full path.
    *   `use_restart` (`bool`): `True` to enable restart, `False` to disable.
    *   `restart_filename` (`str`, optional): Path to the `.rst` file (required if `use_restart` is `True`).
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** `None`. Modifies the file and updates the `ras_object`.
*   **Raises:** `ValueError` if `restart_filename` missing, `FileNotFoundError`, `PermissionError`, `IOError`.

### `RasUnsteady.extract_boundary_and_tables(unsteady_file, ras_object=None)`

*   **Purpose:** Parses an unsteady flow file to extract boundary condition definitions and associated time-series data tables (e.g., Flow Hydrograph).
*   **Parameters:**
    *   `unsteady_file` (`str` or `Path`): Unsteady flow number or full path.
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** `pd.DataFrame`: DataFrame where each row represents a boundary condition. Includes columns for location (`River Name`, `Reach Name`, etc.), `DSS File`, and a `Tables` column containing a dictionary of `pd.DataFrame` objects for each time-series table found.
*   **Raises:** `FileNotFoundError`, `PermissionError`.

### `RasUnsteady.print_boundaries_and_tables(boundaries_df)`

*   **Purpose:** Prints the boundary conditions and tables (extracted by `extract_boundary_and_tables`) to the console in a readable format.
*   **Parameters:**
    *   `boundaries_df` (`pd.DataFrame`): DataFrame returned by `extract_boundary_and_tables`.
*   **Returns:** `None`.

### `RasUnsteady.identify_tables(lines)`

*   **Purpose:** (Static utility) Scans lines from an unsteady file and identifies the name and line ranges of data tables.
*   **Parameters:**
    *   `lines` (`List[str]`): List of lines read from the unsteady file.
*   **Returns:** `List[Tuple[str, int, int]]`: List of tuples `(table_name, start_line_index, end_line_index)`.

### `RasUnsteady.parse_fixed_width_table(lines, start, end)`

*   **Purpose:** (Static utility) Parses the fixed-width numeric data within identified table lines.
*   **Parameters:**
    *   `lines` (`List[str]`): List of lines read from the unsteady file.
    *   `start` (`int`): Starting line index (inclusive) of the table data.
    *   `end` (`int`): Ending line index (exclusive) of the table data.
*   **Returns:** `pd.DataFrame`: DataFrame with a single 'Value' column containing the numeric data.

### `RasUnsteady.extract_tables(unsteady_file, ras_object=None)`

*   **Purpose:** Extracts all numeric data tables (like hydrographs, gate openings) from an unsteady file into a dictionary of DataFrames.
*   **Parameters:**
    *   `unsteady_file` (`str` or `Path`): Unsteady flow number or full path.
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** `Dict[str, pd.DataFrame]`: Dictionary mapping table names (e.g., 'Flow Hydrograph=') to DataFrames containing the table values.
*   **Raises:** `FileNotFoundError`, `PermissionError`.

### `RasUnsteady.write_table_to_file(unsteady_file, table_name, df, start_line, ras_object=None)`

*   **Purpose:** Writes a modified DataFrame back into an unsteady flow file, formatting it correctly into the fixed-width structure required by HEC-RAS.
*   **Parameters:**
    *   `unsteady_file` (`str` or `Path`): Unsteady flow number or full path.
    *   `table_name` (`str`): Name of the table being written (must match the header in the file).
    *   `df` (`pd.DataFrame`): DataFrame containing the new values (must have a 'Value' column).
    *   `start_line` (`int`): Line index where the original table data started.
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** `None`. Modifies the file.
*   **Raises:** `FileNotFoundError`, `PermissionError`, `IOError`.

---

## Class: RasUtils

Contains general static utility functions used across the `ras_commander` library.

### `RasUtils.create_directory(directory_path, ras_object=None)`

*   **Purpose:** Ensures a directory exists, creating it (and any parent directories) if necessary.
*   **Parameters:**
    *   `directory_path` (`Path`): The directory path to ensure.
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** (`Path`): The ensured directory path.
*   **Raises:** `OSError` on creation failure.

### `RasUtils.find_files_by_extension(extension, ras_object=None)`

*   **Purpose:** Lists all files within the initialized project directory matching a specific extension.
*   **Parameters:**
    *   `extension` (`str`): The file extension (e.g., '.prj', '.p*').
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** (`list` of `str`): List of full file paths.

### `RasUtils.get_file_size(file_path, ras_object=None)`

*   **Purpose:** Gets the size of a file in bytes.
*   **Parameters:**
    *   `file_path` (`Path`): Path to the file.
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** (`int` or `None`): File size in bytes, or `None` if file not found.

### `RasUtils.get_file_modification_time(file_path, ras_object=None)`

*   **Purpose:** Gets the last modification timestamp of a file.
*   **Parameters:**
    *   `file_path` (`Path`): Path to the file.
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** (`float` or `None`): Unix timestamp of last modification, or `None` if file not found.

### `RasUtils.get_plan_path(current_plan_number_or_path, ras_object=None)`

*   **Purpose:** Resolves a plan number or path string into a full, validated `Path` object for a plan file.
*   **Parameters:**
    *   `current_plan_number_or_path` (`str` or `Path`): Plan number (1-99) or full path.
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** (`Path`): The validated path to the plan file.
*   **Raises:** `ValueError`, `TypeError`, `FileNotFoundError`.

### `RasUtils.remove_with_retry(path, max_attempts=5, initial_delay=1.0, is_folder=True, ras_object=None)`

*   **Purpose:** Safely removes a file or folder, retrying with exponential backoff if a `PermissionError` occurs.
*   **Parameters:**
    *   `path` (`Path`): Path to remove.
    *   `max_attempts` (`int`, optional): Max removal attempts. Default is 5.
    *   `initial_delay` (`float`, optional): Initial delay in seconds. Default is 1.0.
    *   `is_folder` (`bool`, optional): `True` if path is a folder, `False` if a file. Default is `True`.
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** (`bool`): `True` if removal succeeded, `False` otherwise.

### `RasUtils.update_plan_file(plan_number_or_path, file_type, entry_number, ras_object=None)`

*   **Purpose:** Updates a line in a plan file to reference a different associated file (geometry, flow, unsteady).
*   **Parameters:**
    *   `plan_number_or_path` (`str` or `Path`): Plan number or full path.
    *   `file_type` (`str`): Type of file link to update ('Geom', 'Flow', 'Unsteady').
    *   `entry_number` (`int`): The number (1-99) of the new associated file.
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** `None`. Modifies the plan file and refreshes the `ras_object`.
*   **Raises:** `ValueError`, `FileNotFoundError`.

### `RasUtils.check_file_access(file_path, mode='r')`

*   **Purpose:** Verifies if a file exists and can be accessed with the specified mode ('r', 'w', etc.).
*   **Parameters:**
    *   `file_path` (`Path`): Path to the file.
    *   `mode` (`str`, optional): Access mode to check. Default is 'r'.
*   **Returns:** `None`.
*   **Raises:** `FileNotFoundError`, `PermissionError`.

### `RasUtils.convert_to_dataframe(data_source, **kwargs)`

*   **Purpose:** Converts various inputs (existing DataFrame, CSV, Excel, TSV, Parquet file path) into a pandas DataFrame.
*   **Parameters:**
    *   `data_source` (`pd.DataFrame` or `Path`): Input data or file path.
    *   `**kwargs`: Additional arguments for pandas read functions (e.g., `sheet_name` for Excel).
*   **Returns:** `pd.DataFrame`.
*   **Raises:** `NotImplementedError` for unsupported types.

### `RasUtils.save_to_excel(dataframe, excel_path, **kwargs)`

*   **Purpose:** Saves a DataFrame to an Excel file, with retries to handle potential file locking issues.
*   **Parameters:**
    *   `dataframe` (`pd.DataFrame`): DataFrame to save.
    *   `excel_path` (`Path`): Output Excel file path.
    *   `**kwargs`: Additional arguments for `DataFrame.to_excel()`.
*   **Returns:** `None`.
*   **Raises:** `IOError` if saving fails after retries.

### `RasUtils.calculate_rmse(observed_values, predicted_values, normalized=True)`

*   **Purpose:** Calculates Root Mean Squared Error (RMSE), optionally normalized.
*   **Parameters:**
    *   `observed_values` (`np.ndarray`): Array of actual values.
    *   `predicted_values` (`np.ndarray`): Array of predicted values.
    *   `normalized` (`bool`, optional): If `True`, normalize by the mean of observed values. Default is `True`.
*   **Returns:** (`float`): Calculated RMSE.

### `RasUtils.calculate_percent_bias(observed_values, predicted_values, as_percentage=False)`

*   **Purpose:** Calculates Percent Bias (PBIAS).
*   **Parameters:**
    *   `observed_values` (`np.ndarray`): Array of actual values.
    *   `predicted_values` (`np.ndarray`): Array of predicted values.
    *   `as_percentage` (`bool`, optional): If `True`, returns result multiplied by 100. Default is `False`.
*   **Returns:** (`float`): Calculated Percent Bias.

### `RasUtils.calculate_error_metrics(observed_values, predicted_values)`

*   **Purpose:** Calculates a dictionary of common error metrics (correlation, RMSE, Percent Bias).
*   **Parameters:**
    *   `observed_values` (`np.ndarray`): Array of actual values.
    *   `predicted_values` (`np.ndarray`): Array of predicted values.
*   **Returns:** `Dict[str, float]`: Dictionary with keys 'cor', 'rmse', 'pb'.

### `RasUtils.update_file(file_path, update_function, *args)`

*   **Purpose:** Generic function to read a file, apply a modification function to its lines, and write it back.
*   **Parameters:**
    *   `file_path` (`Path`): Path to the file.
    *   `update_function` (`Callable`): A function that takes a list of lines (and optionally `*args`) and returns a modified list of lines.
    *   `*args`: Additional arguments passed to `update_function`.
*   **Returns:** `None`.
*   **Raises:** Exceptions from file I/O or `update_function`.

### `RasUtils.get_next_number(existing_numbers)`

*   **Purpose:** Finds the smallest unused positive integer number given a list of existing numbers (as strings), returned as a zero-padded string. (Same as `RasPlan.get_next_number`)
*   **Parameters:**
    *   `existing_numbers` (`list` of `str`): List of existing numbers (e.g., ['01', '03']).
*   **Returns:** (`str`): The next available number (e.g., "02").

### `RasUtils.clone_file(template_path, new_path, update_function=None, *args)`

*   **Purpose:** Copies a template file to a new path and optionally applies a modification function to the new file's content.
*   **Parameters:**
    *   `template_path` (`Path`): Path to the source file.
    *   `new_path` (`Path`): Path for the new copied file.
    *   `update_function` (`Callable`, optional): Function to modify the lines of the new file. Takes a list of lines (and optionally `*args`).
    *   `*args`: Additional arguments for `update_function`.
*   **Returns:** `None`.
*   **Raises:** `FileNotFoundError` if template doesn't exist.

### `RasUtils.update_project_file(prj_file, file_type, new_num, ras_object=None)`

*   **Purpose:** Appends a new file entry line (e.g., `Plan File=p03`) to the project file (`.prj`).
*   **Parameters:**
    *   `prj_file` (`Path`): Path to the `.prj` file.
    *   `file_type` (`str`): Type of entry ('Plan', 'Geom', 'Flow', 'Unsteady').
    *   `new_num` (`str`): The two-digit number for the new entry (e.g., "03").
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** `None`. Modifies the project file.

### `RasUtils.decode_byte_strings(dataframe)`

*   **Purpose:** Decodes all byte string (`b'...'`) columns in a DataFrame to UTF-8 strings.
*   **Parameters:**
    *   `dataframe` (`pd.DataFrame`): Input DataFrame.
*   **Returns:** `pd.DataFrame`: DataFrame with byte strings decoded.

### `RasUtils.perform_kdtree_query(reference_points, query_points, max_distance=2.0)`

*   **Purpose:** Finds the nearest point in `reference_points` for each point in `query_points` using KDTree, within a maximum distance.
*   **Parameters:**
    *   `reference_points` (`np.ndarray`): NxD array of reference points.
    *   `query_points` (`np.ndarray`): MxD array of query points.
    *   `max_distance` (`float`, optional): Maximum distance for a match. Default 2.0.
*   **Returns:** (`np.ndarray`): Array of length M containing indices of nearest reference points. Index is -1 if no point found within `max_distance`.

### `RasUtils.find_nearest_neighbors(points, max_distance=2.0)`

*   **Purpose:** Finds the nearest neighbor for each point within the same dataset using KDTree, excluding self-matches and points beyond `max_distance`.
*   **Parameters:**
    *   `points` (`np.ndarray`): NxD array of points.
    *   `max_distance` (`float`, optional): Maximum distance for a match. Default 2.0.
*   **Returns:** (`np.ndarray`): Array of length N containing indices of the nearest neighbor for each point. Index is -1 if no neighbor found within `max_distance`.

### `RasUtils.consolidate_dataframe(dataframe, group_by=None, pivot_columns=None, level=None, n_dimensional=False, aggregation_method='list')`

*   **Purpose:** Aggregates rows in a DataFrame based on grouping criteria, typically merging values into lists.
*   **Parameters:**
    *   `dataframe` (`pd.DataFrame`): Input DataFrame.
    *   `group_by` (`str` or `List[str]`, optional): Column(s) or index level(s) to group by.
    *   `pivot_columns` (`str` or `List[str]`, optional): Column(s) to use for pivoting (if `n_dimensional`).
    *   `level` (`int`, optional): Index level to group by.
    *   `n_dimensional` (`bool`, optional): Use `pivot_table` if `True`. Default `False`.
    *   `aggregation_method` (`str` or `Callable`, optional): How to aggregate ('list', 'sum', 'mean', etc.). Default 'list'.
*   **Returns:** `pd.DataFrame`: The consolidated DataFrame.

### `RasUtils.find_nearest_value(array, target_value)`

*   **Purpose:** Finds the element in an array that is numerically closest to a target value.
*   **Parameters:**
    *   `array` (`list` or `np.ndarray`): Array of numbers to search within.
    *   `target_value` (`int` or `float`): The value to find the nearest match for.
*   **Returns:** (`int` or `float`): The value from the array closest to `target_value`.

### `RasUtils.horizontal_distance(coord1, coord2)`

*   **Purpose:** Calculates the 2D Euclidean distance between two points.
*   **Parameters:**
    *   `coord1` (`np.ndarray`): [X, Y] coordinates of the first point.
    *   `coord2` (`np.ndarray`): [X, Y] coordinates of the second point.
*   **Returns:** (`float`): The horizontal distance.

---

## Class: RasExamples

Provides methods to download, manage, and access HEC-RAS example projects included with the official HEC-RAS releases. Useful for testing and demonstration.

### `RasExamples.get_example_projects(version_number='6.6')`

*   **Purpose:** Downloads the example projects zip file for a specific HEC-RAS version if it doesn't already exist locally. Initializes the class to read the zip file structure.
*   **Parameters:**
    *   `version_number` (`str`, optional): HEC-RAS version string (e.g., "6.6", "6.5"). Default is "6.6".
*   **Returns:** (`Path`): Path to the directory where projects will be extracted (`example_projects`).
*   **Raises:** `ValueError` for invalid version, `requests.exceptions.RequestException` on download failure.

### `RasExamples.list_categories()`

*   **Purpose:** Lists the categories (top-level folders) available in the example projects zip file.
*   **Parameters:** None.
*   **Returns:** (`List[str]`): List of category names.

### `RasExamples.list_projects(category=None)`

*   **Purpose:** Lists the project names available, optionally filtered by category.
*   **Parameters:**
    *   `category` (`str`, optional): If provided, lists projects only within this category.
*   **Returns:** (`List[str]`): List of project names.

### `RasExamples.extract_project(project_names)`

*   **Purpose:** Extracts one or more specified projects from the zip file into the `example_projects` directory. Overwrites if already extracted.
*   **Parameters:**
    *   `project_names` (`str` or `List[str]`): Name(s) of the project(s) to extract.
*   **Returns:** (`Path` or `List[Path]`): Path(s) to the extracted project folder(s). Returns a single `Path` if one name was given, a list otherwise.
*   **Raises:** `ValueError` if a project name is not found.

### `RasExamples.is_project_extracted(project_name)`

*   **Purpose:** Checks if a specific project has already been extracted into the `example_projects` directory.
*   **Parameters:**
    *   `project_name` (`str`): Name of the project to check.
*   **Returns:** (`bool`): `True` if the project folder exists, `False` otherwise.

### `RasExamples.clean_projects_directory()`

*   **Purpose:** Removes the entire `example_projects` directory and its contents, then recreates the empty directory.
*   **Parameters:** None.
*   **Returns:** `None`.

### `RasExamples.download_fema_ble_model(huc8, output_dir=None)`

*   **Purpose:** (Placeholder) Intended to download FEMA Base Level Engineering models. *Currently not implemented.*
*   **Parameters:**
    *   `huc8` (`str`): 8-digit HUC code.
    *   `output_dir` (`str`, optional): Directory to save files.
*   **Returns:** (`str`): Path to the extracted model directory.

---

## Class: RasCmdr

Contains static methods for executing HEC-RAS simulations. Assumes a `RasPrj` object (defaulting to global `ras`) is initialized.

### `RasCmdr.compute_plan(plan_number, dest_folder=None, ras_object=None, clear_geompre=False, num_cores=None, overwrite_dest=False)`

*   **Purpose:** Executes a single HEC-RAS plan computation using the command line. Optionally copies the project to a destination folder first.
*   **Parameters:**
    *   `plan_number` (`str` or `Path`): Plan number (e.g., "01") or full path to plan file.
    *   `dest_folder` (`str` or `Path`, optional): Folder name (relative to project parent) or full path for computation. If `None`, runs in the original project folder.
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
    *   `clear_geompre` (`bool`, optional): Clear `.c*` files before running. Default `False`.
    *   `num_cores` (`int`, optional): Number of cores to set in the plan file before running. Default `None` (use plan's current setting).
    *   `overwrite_dest` (`bool`, optional): If `True`, overwrite `dest_folder` if it exists. Default `False`.
*   **Returns:** (`bool`): `True` if execution succeeded (process completed without error), `False` otherwise.
*   **Raises:** `ValueError` if `dest_folder` exists and `overwrite_dest` is False, `FileNotFoundError`, `PermissionError`, `subprocess.CalledProcessError`.

### `RasCmdr.compute_parallel(plan_number=None, max_workers=2, num_cores=2, clear_geompre=False, ras_object=None, dest_folder=None, overwrite_dest=False)`

*   **Purpose:** Executes multiple HEC-RAS plans in parallel by creating temporary worker copies of the project. Consolidates results into a final destination folder.
*   **Parameters:**
    *   `plan_number` (`str` or `List[str]`, optional): Plan number(s) to run. If `None`, runs all plans in the project.
    *   `max_workers` (`int`, optional): Max number of parallel HEC-RAS instances. Default 2.
    *   `num_cores` (`int`, optional): Cores assigned to *each* worker instance. Default 2.
    *   `clear_geompre` (`bool`, optional): Clear `.c*` files in worker folders. Default `False`.
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
    *   `dest_folder` (`str` or `Path`, optional): Final folder for consolidated results. If `None`, creates `ProjectName [Computed]` folder.
    *   `overwrite_dest` (`bool`, optional): Overwrite `dest_folder` if it exists. Default `False`.
*   **Returns:** `Dict[str, bool]`: Dictionary mapping plan numbers to their execution success status (`True`/`False`).
*   **Raises:** `ValueError`, `FileNotFoundError`, `PermissionError`, `RuntimeError`.

### `RasCmdr.compute_test_mode(plan_number=None, dest_folder_suffix="[Test]", clear_geompre=False, num_cores=None, ras_object=None, overwrite_dest=False)`

*   **Purpose:** Executes specified HEC-RAS plans sequentially within a dedicated test folder (a copy of the project).
*   **Parameters:**
    *   `plan_number` (`str` or `List[str]`, optional): Plan number(s) to run. If `None`, runs all plans.
    *   `dest_folder_suffix` (`str`, optional): Suffix for the test folder name (e.g., `ProjectName [Test]`). Default "[Test]".
    *   `clear_geompre` (`bool`, optional): Clear `.c*` files before running each plan. Default `False`.
    *   `num_cores` (`int`, optional): Cores to set for each plan execution. Default `None`.
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
    *   `overwrite_dest` (`bool`, optional): Overwrite test folder if it exists. Default `False`.
*   **Returns:** `Dict[str, bool]`: Dictionary mapping plan numbers to their execution success status (`True`/`False`).
*   **Raises:** `ValueError`, `FileNotFoundError`, `PermissionError`.

---

## Class: HdfBase

Contains fundamental static methods for interacting with HEC-RAS HDF files. Used by other `Hdf*` classes. Requires an open `h5py.File` object or uses `@standardize_input`.

### `HdfBase.get_simulation_start_time(hdf_file)`

*   **Purpose:** Extracts the simulation start time attribute from the Plan Information group.
*   **Parameters:**
    *   `hdf_file` (`h5py.File`): Open HDF file object.
*   **Returns:** (`datetime`): Simulation start time.
*   **Raises:** `ValueError` if path not found or time parsing fails.

### `HdfBase.get_unsteady_timestamps(hdf_file)`

*   **Purpose:** Extracts the list of unsteady output timestamps (usually in milliseconds format) and converts them to datetime objects.
*   **Parameters:**
    *   `hdf_file` (`h5py.File`): Open HDF file object.
*   **Returns:** `List[datetime]`: List of datetime objects for each output time step.

### `HdfBase.get_2d_flow_area_names_and_counts(hdf_path)`

*   **Purpose:** Gets the names and cell counts of all 2D Flow Areas defined in the geometry HDF.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`): Path identifier for the HDF file (usually geometry HDF).
*   **Returns:** `List[Tuple[str, int]]`: List of tuples `(area_name, cell_count)`.
*   **Raises:** `ValueError` on read errors.

### `HdfBase.get_projection(hdf_path)`

*   **Purpose:** Retrieves the spatial projection information (WKT string) from the HDF file attributes or associated `.rasmap` file.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`): Path identifier for the HDF file.
*   **Returns:** (`str` or `None`): Well-Known Text (WKT) string of the projection, or `None` if not found.

### `HdfBase.get_attrs(hdf_file, attr_path)`

*   **Purpose:** Retrieves all attributes from a specific group or dataset within the HDF file.
*   **Parameters:**
    *   `hdf_file` (`h5py.File`): Open HDF file object.
    *   `attr_path` (`str`): Internal HDF path to the group/dataset (e.g., "Plan Data/Plan Information").
*   **Returns:** `Dict[str, Any]`: Dictionary of attributes. Returns empty dict if path not found.

### `HdfBase.get_dataset_info(file_path, group_path='/')`

*   **Purpose:** Prints a recursive listing of the structure (groups, datasets, attributes, shapes, dtypes) within an HDF5 file, starting from `group_path`.
*   **Parameters:**
    *   `file_path` (Input handled by `@standardize_input`): Path identifier for the HDF file.
    *   `group_path` (`str`, optional): Internal HDF path to start exploration from. Default is root ('/').
*   **Returns:** `None`. Prints to console.

### `HdfBase.get_polylines_from_parts(hdf_path, path, info_name="Polyline Info", parts_name="Polyline Parts", points_name="Polyline Points")`

*   **Purpose:** Reconstructs Shapely LineString or MultiLineString geometries from HEC-RAS's standard polyline representation in HDF (using Info, Parts, Points datasets).
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`): Path identifier for the HDF file.
    *   `path` (`str`): Internal HDF base path containing the polyline datasets (e.g., "Geometry/River Centerlines").
    *   `info_name` (`str`, optional): Name of the dataset containing polyline start/count info. Default "Polyline Info".
    *   `parts_name` (`str`, optional): Name of the dataset defining parts for multi-part lines. Default "Polyline Parts".
    *   `points_name` (`str`, optional): Name of the dataset containing all point coordinates. Default "Polyline Points".
*   **Returns:** `List[LineString or MultiLineString]`: List of reconstructed Shapely geometries.

### `HdfBase.print_attrs(name, obj)`

*   **Purpose:** Helper method to print the attributes of an HDF5 object (Group or Dataset) during exploration (used by `get_dataset_info`).
*   **Parameters:**
    *   `name` (`str`): Name of the HDF5 object.
    *   `obj` (`h5py.Group` or `h5py.Dataset`): The HDF5 object.
*   **Returns:** `None`. Prints to console.

---

## Class: HdfBndry

Contains static methods for extracting boundary-related *geometry* features (BC Lines, Breaklines, Refinement Regions, Reference Lines/Points) from HEC-RAS HDF files (typically geometry HDF). Returns GeoDataFrames.

### `HdfBndry.get_bc_lines(hdf_path)`

*   **Purpose:** Extracts 2D Flow Area Boundary Condition Lines.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`): Path identifier (usually geometry HDF).
*   **Returns:** `gpd.GeoDataFrame`: GeoDataFrame with LineString geometries and attributes (Name, SA-2D, Type, etc.).

### `HdfBndry.get_breaklines(hdf_path)`

*   **Purpose:** Extracts 2D Flow Area Break Lines. Skips invalid (zero-length, single-point) breaklines.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`): Path identifier (usually geometry HDF).
*   **Returns:** `gpd.GeoDataFrame`: GeoDataFrame with LineString/MultiLineString geometries and attributes (bl_id, Name).

### `HdfBndry.get_refinement_regions(hdf_path)`

*   **Purpose:** Extracts 2D Flow Area Refinement Regions.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`): Path identifier (usually geometry HDF).
*   **Returns:** `gpd.GeoDataFrame`: GeoDataFrame with Polygon/MultiPolygon geometries and attributes (rr_id, Name).

### `HdfBndry.get_reference_lines(hdf_path, mesh_name=None)`

*   **Purpose:** Extracts Reference Lines used for profile output, optionally filtering by mesh name.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`): Path identifier (usually geometry HDF).
    *   `mesh_name` (`str`, optional): Filter results to this specific mesh area.
*   **Returns:** `gpd.GeoDataFrame`: GeoDataFrame with LineString/MultiLineString geometries and attributes (refln_id, Name, mesh_name, Type).

### `HdfBndry.get_reference_points(hdf_path, mesh_name=None)`

*   **Purpose:** Extracts Reference Points used for point output, optionally filtering by mesh name.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`): Path identifier (usually geometry HDF).
    *   `mesh_name` (`str`, optional): Filter results to this specific mesh area.
*   **Returns:** `gpd.GeoDataFrame`: GeoDataFrame with Point geometries and attributes (refpt_id, Name, mesh_name, Cell Index).

---

## Class: HdfFluvialPluvial

Contains static methods for analyzing fluvial-pluvial boundaries based on simulation results.

### `HdfFluvialPluvial.calculate_fluvial_pluvial_boundary(hdf_path, delta_t=12)`

*   **Purpose:** Calculates the boundary line between areas dominated by fluvial (riverine) vs. pluvial (rainfall/local) flooding, based on the timing difference of maximum water surface elevation between adjacent 2D cells. Attempts to join adjacent boundary segments.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF file.
    *   `delta_t` (`float`, optional): Time difference threshold in hours. Adjacent cells with max WSE time differences greater than this are considered part of the boundary. Default is 12.
*   **Returns:** `gpd.GeoDataFrame`: GeoDataFrame containing LineString geometries representing the calculated boundary. CRS matches the input HDF.
*   **Raises:** `ValueError` if required mesh or results data is missing.

---

## Class: HdfInfiltration

Contains static methods for handling infiltration data within HEC-RAS HDF files (typically geometry HDF).

### `HdfInfiltration.get_infiltration_baseoverrides(hdf_path: Path) -> Optional[pd.DataFrame]`

*   **Purpose:** Retrieves current infiltration parameters from a HEC-RAS geometry HDF file.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='geom_hdf'`): Path identifier for the geometry HDF.
*   **Returns:** `Optional[pd.DataFrame]`: DataFrame containing infiltration parameters if successful, None if operation fails.

### `HdfInfiltration.get_infiltration_layer_data(hdf_path: Path) -> Optional[pd.DataFrame]`

*   **Purpose:** Retrieves current infiltration parameters from a HEC-RAS infiltration layer HDF file.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`): Path identifier for the infiltration layer HDF.
*   **Returns:** `Optional[pd.DataFrame]`: DataFrame containing infiltration parameters if successful, None if operation fails.

### `HdfInfiltration.set_infiltration_layer_data(hdf_path: Path, infiltration_df: pd.DataFrame) -> Optional[pd.DataFrame]`

*   **Purpose:** Sets infiltration layer data in the infiltration layer HDF file directly from the provided DataFrame.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`): Path identifier for the infiltration layer HDF.
    *   `infiltration_df` (`pd.DataFrame`): DataFrame containing infiltration parameters.
*   **Returns:** `Optional[pd.DataFrame]`: The infiltration DataFrame if successful, None if operation fails.

### `HdfInfiltration.scale_infiltration_data(hdf_path: Path, infiltration_df: pd.DataFrame, scale_factors: Dict[str, float]) -> Optional[pd.DataFrame]`

*   **Purpose:** Updates infiltration parameters in the HDF file with scaling factors.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='geom_hdf'`): Path identifier for the geometry HDF.
    *   `infiltration_df` (`pd.DataFrame`): DataFrame containing infiltration parameters.
    *   `scale_factors` (`Dict[str, float]`): Dictionary mapping column names to their scaling factors.
*   **Returns:** `Optional[pd.DataFrame]`: The updated infiltration DataFrame if successful, None if operation fails.

### `HdfInfiltration.get_infiltration_map(hdf_path: Path = None, ras_object: Any = None) -> dict`

*   **Purpose:** Reads the infiltration raster map from HDF file.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`): Path identifier for the HDF file. If not provided, uses first infiltration_hdf_path from rasmap_df.
    *   `ras_object` (`RasPrj`, optional): Specific RAS object to use. If None, uses the global ras instance.
*   **Returns:** `dict`: Dictionary mapping raster values to mukeys.

### `HdfInfiltration.calculate_soil_statistics(zonal_stats: list, raster_map: dict) -> pd.DataFrame`

*   **Purpose:** Calculates soil statistics from zonal statistics.
*   **Parameters:**
    *   `zonal_stats` (`list`): List of zonal statistics.
    *   `raster_map` (`dict`): Dictionary mapping raster values to mukeys.
*   **Returns:** `pd.DataFrame`: DataFrame with soil statistics including percentages and areas.

### `HdfInfiltration.get_significant_mukeys(soil_stats: pd.DataFrame, threshold: float = 1.0) -> pd.DataFrame`

*   **Purpose:** Gets mukeys with percentage greater than threshold.
*   **Parameters:**
    *   `soil_stats` (`pd.DataFrame`): DataFrame with soil statistics.
    *   `threshold` (`float`, optional): Minimum percentage threshold. Default 1.0.
*   **Returns:** `pd.DataFrame`: DataFrame with significant mukeys and their statistics.

### `HdfInfiltration.calculate_total_significant_percentage(significant_mukeys: pd.DataFrame) -> float`

*   **Purpose:** Calculates total percentage covered by significant mukeys.
*   **Parameters:**
    *   `significant_mukeys` (`pd.DataFrame`): DataFrame of significant mukeys.
*   **Returns:** `float`: Total percentage covered by significant mukeys.

### `HdfInfiltration.save_statistics(soil_stats: pd.DataFrame, output_path: Path, include_timestamp: bool = True)`

*   **Purpose:** Saves soil statistics to CSV.
*   **Parameters:**
    *   `soil_stats` (`pd.DataFrame`): DataFrame with soil statistics.
    *   `output_path` (`Path`): Path to save CSV file.
    *   `include_timestamp` (`bool`, optional): Whether to include timestamp in filename. Default True.
*   **Returns:** None

### `HdfInfiltration.get_infiltration_parameters(hdf_path: Path = None, mukey: str = None, ras_object: Any = None) -> dict`

*   **Purpose:** Gets infiltration parameters for a specific mukey from HDF file.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`): Path identifier for the HDF file. If not provided, uses first infiltration_hdf_path from rasmap_df.
    *   `mukey` (`str`): Mukey identifier.
    *   `ras_object` (`RasPrj`, optional): Specific RAS object to use. If None, uses the global ras instance.
*   **Returns:** `dict`: Dictionary of infiltration parameters.

### `HdfInfiltration.calculate_weighted_parameters(soil_stats: pd.DataFrame, infiltration_params: dict) -> dict`

*   **Purpose:** Calculates weighted infiltration parameters based on soil statistics.
*   **Parameters:**
    *   `soil_stats` (`pd.DataFrame`): DataFrame with soil statistics.
    *   `infiltration_params` (`dict`): Dictionary of infiltration parameters by mukey.
*   **Returns:** `dict`: Dictionary of weighted average infiltration parameters.

---

## Class: HdfMesh

Contains static methods for extracting 2D mesh geometry information from HEC-RAS HDF files (typically geometry or plan HDF).

### `HdfMesh.get_mesh_area_names(hdf_path)`

*   **Purpose:** Retrieves the names of all 2D Flow Areas defined in the HDF file.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`): Path identifier for the HDF file.
*   **Returns:** `List[str]`: List of 2D Flow Area names.

### `HdfMesh.get_mesh_areas(hdf_path)`

*   **Purpose:** Extracts the outer perimeter polygons for each 2D Flow Area.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='geom_hdf'`): Path identifier for the geometry HDF.
*   **Returns:** `gpd.GeoDataFrame`: GeoDataFrame with Polygon geometries and 'mesh_name' attribute.

### `HdfMesh.get_mesh_cell_polygons(hdf_path)`

*   **Purpose:** Reconstructs the individual cell polygons for all 2D Flow Areas by assembling cell faces.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='geom_hdf'`): Path identifier for the geometry HDF.
*   **Returns:** `gpd.GeoDataFrame`: GeoDataFrame with Polygon geometries and attributes 'mesh_name', 'cell_id'.

### `HdfMesh.get_mesh_cell_points(hdf_path)`

*   **Purpose:** Extracts the center point coordinates for each cell in all 2D Flow Areas.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`): Path identifier for the HDF file.
*   **Returns:** `gpd.GeoDataFrame`: GeoDataFrame with Point geometries and attributes 'mesh_name', 'cell_id'.

### `HdfMesh.get_mesh_cell_faces(hdf_path)`

*   **Purpose:** Extracts the face line segments that form the boundaries of the mesh cells.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`): Path identifier for the HDF file.
*   **Returns:** `gpd.GeoDataFrame`: GeoDataFrame with LineString geometries and attributes 'mesh_name', 'face_id'.

### `HdfMesh.get_mesh_area_attributes(hdf_path)`

*   **Purpose:** Retrieves the main attributes associated with the 2D Flow Areas group in the geometry HDF.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='geom_hdf'`): Path identifier for the geometry HDF.
*   **Returns:** `pd.DataFrame`: DataFrame containing the attributes (e.g., Manning's n values).

### `HdfMesh.get_mesh_face_property_tables(hdf_path)`

*   **Purpose:** Extracts the detailed hydraulic property tables (Elevation vs. Area, Wetted Perimeter, Roughness) associated with each *face* in each 2D Flow Area.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='geom_hdf'`): Path identifier for the geometry HDF.
*   **Returns:** `Dict[str, pd.DataFrame]`: Dictionary mapping mesh names to DataFrames. Each DataFrame contains columns ['Face ID', 'Z', 'Area', 'Wetted Perimeter', "Manning's n"].

### `HdfMesh.get_mesh_cell_property_tables(hdf_path)`

*   **Purpose:** Extracts the detailed hydraulic property tables (Elevation vs. Volume, Surface Area) associated with each *cell* in each 2D Flow Area.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='geom_hdf'`): Path identifier for the geometry HDF.
*   **Returns:** `Dict[str, pd.DataFrame]`: Dictionary mapping mesh names to DataFrames. Each DataFrame contains columns ['Cell ID', 'Z', 'Volume', 'Surface Area'].

---

## Class: HdfPipe

Contains static methods for handling pipe network geometry and results data from HEC-RAS HDF files.

### `HdfPipe.get_pipe_conduits(hdf_path, crs="EPSG:4326")`

*   **Purpose:** Extracts pipe conduit centerlines, attributes, and terrain profiles from the geometry HDF.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`): Path identifier for the HDF file (usually geometry or plan HDF).
    *   `crs` (`str`, optional): Coordinate Reference System string. Default "EPSG:4326".
*   **Returns:** `gpd.GeoDataFrame`: GeoDataFrame with LineString geometries ('Polyline'), attributes, and 'Terrain_Profiles' (list of (station, elevation) tuples).

### `HdfPipe.get_pipe_nodes(hdf_path)`

*   **Purpose:** Extracts pipe node locations and attributes from the geometry HDF.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`): Path identifier for the HDF file (usually geometry or plan HDF).
*   **Returns:** `gpd.GeoDataFrame`: GeoDataFrame with Point geometries and attributes.

### `HdfPipe.get_pipe_network(hdf_path, pipe_network_name=None, crs="EPSG:4326")`

*   **Purpose:** Extracts the detailed geometry of a specific pipe network, including cell polygons, faces, nodes, and connectivity information from the geometry HDF.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`): Path identifier for the HDF file (usually geometry or plan HDF).
    *   `pipe_network_name` (`str`, optional): Name of the network. If `None`, uses the first network found.
    *   `crs` (`str`, optional): Coordinate Reference System string. Default "EPSG:4326".
*   **Returns:** `gpd.GeoDataFrame`: GeoDataFrame primarily representing cells (Polygon geometry), with related face and node info included as attributes or object columns.
*   **Raises:** `ValueError` if `pipe_network_name` not found.

### `HdfPipe.get_pipe_profile(hdf_path, conduit_id)`

*   **Purpose:** Extracts the station-elevation terrain profile data for a specific pipe conduit from the geometry HDF.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`): Path identifier for the HDF file (usually geometry or plan HDF).
    *   `conduit_id` (`int`): Zero-based index of the conduit.
*   **Returns:** `pd.DataFrame`: DataFrame with columns ['Station', 'Elevation'].
*   **Raises:** `KeyError`, `IndexError`.

### `HdfPipe.get_pipe_network_timeseries(hdf_path, variable)`

*   **Purpose:** Extracts time series results for a specified variable across all elements (cells, faces, pipes, nodes) of a pipe network.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF.
    *   `variable` (`str`): The results variable name (e.g., "Cell Water Surface", "Pipes/Pipe Flow DS", "Nodes/Depth").
*   **Returns:** `xr.DataArray`: DataArray with dimensions ('time', 'location') containing the time series values. Includes units attribute.
*   **Raises:** `ValueError` for invalid variable name, `KeyError`.

### `HdfPipe.get_pipe_network_summary(hdf_path)`

*   **Purpose:** Extracts summary statistics (min/max values, timing) for pipe network results from the plan results HDF.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF.
*   **Returns:** `pd.DataFrame`: DataFrame containing the summary statistics. Returns empty DataFrame if data not found.
*   **Raises:** `KeyError`.

### `HdfPipe.extract_timeseries_for_node(plan_hdf_path, node_id)`

*   **Purpose:** Extracts time series data specifically for a single pipe node (Depth, Drop Inlet Flow, Water Surface).
*   **Parameters:**
    *   `plan_hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF.
    *   `node_id` (`int`): Zero-based index of the node.
*   **Returns:** `Dict[str, xr.DataArray]`: Dictionary mapping variable names to their respective DataArrays (time dimension only).

### `HdfPipe.extract_timeseries_for_conduit(plan_hdf_path, conduit_id)`

*   **Purpose:** Extracts time series data specifically for a single pipe conduit (Flow US/DS, Velocity US/DS).
*   **Parameters:**
    *   `plan_hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF.
    *   `conduit_id` (`int`): Zero-based index of the conduit.
*   **Returns:** `Dict[str, xr.DataArray]`: Dictionary mapping variable names to their respective DataArrays (time dimension only).

---

## Class: HdfPlan

Contains static methods for extracting general plan-level information and attributes from HEC-RAS HDF files (plan or geometry HDF).

### `HdfPlan.get_plan_start_time(hdf_path)`

*   **Purpose:** Gets the simulation start time from the plan HDF file.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan HDF.
*   **Returns:** (`datetime`): Simulation start time.
*   **Raises:** `ValueError`.

### `HdfPlan.get_plan_end_time(hdf_path)`

*   **Purpose:** Gets the simulation end time from the plan HDF file.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan HDF.
*   **Returns:** (`datetime`): Simulation end time.
*   **Raises:** `ValueError`.

### `HdfPlan.get_plan_timestamps_list(hdf_path)`

*   **Purpose:** Gets the list of simulation output timestamps from the plan HDF file.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan HDF.
*   **Returns:** `List[datetime]`: List of output datetime objects.
*   **Raises:** `ValueError`.

### `HdfPlan.get_plan_information(hdf_path)`

*   **Purpose:** Extracts all attributes from the 'Plan Data/Plan Information' group in the plan HDF file.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan HDF.
*   **Returns:** `Dict[str, Any]`: Dictionary of plan information attributes.
*   **Raises:** `ValueError`.

### `HdfPlan.get_plan_parameters(hdf_path)`

*   **Purpose:** Extracts all attributes from the 'Plan Data/Plan Parameters' group in the plan HDF file and returns them as a DataFrame. Includes the plan number extracted from the filename.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan HDF.
*   **Returns:** `pd.DataFrame`: DataFrame with columns ['Plan', 'Parameter', 'Value'].
*   **Raises:** `ValueError`.

### `HdfPlan.get_plan_met_precip(hdf_path)`

*   **Purpose:** Extracts precipitation attributes from the 'Event Conditions/Meteorology/Precipitation' group in the plan HDF file.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan HDF.
*   **Returns:** `Dict[str, Any]`: Dictionary of precipitation attributes. Returns empty dict if not found.

### `HdfPlan.get_geometry_information(hdf_path)`

*   **Purpose:** Extracts root-level attributes (like Version, Units, Projection) from the 'Geometry' group in a geometry HDF file.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='geom_hdf'`): Path identifier for the geometry HDF.
*   **Returns:** `pd.DataFrame`: DataFrame with columns ['Value'] and index ['Attribute Name'].
*   **Raises:** `ValueError`.

---

## Class: HdfPlot

Contains static methods for creating basic plots from HEC-RAS HDF data using `matplotlib`.

### `HdfPlot.plot_mesh_cells(cell_polygons_df, projection, title='2D Flow Area Mesh Cells', figsize=(12, 8))`

*   **Purpose:** Plots 2D mesh cell outlines from a GeoDataFrame.
*   **Parameters:**
    *   `cell_polygons_df` (`gpd.GeoDataFrame`): GeoDataFrame containing cell polygons (requires 'geometry' column).
    *   `projection` (`str`): CRS string to assign if `cell_polygons_df` doesn't have one.
    *   `title` (`str`, optional): Plot title. Default '2D Flow Area Mesh Cells'.
    *   `figsize` (`Tuple[int, int]`, optional): Figure size. Default (12, 8).
*   **Returns:** (`gpd.GeoDataFrame` or `None`): The input GeoDataFrame (with CRS possibly assigned), or `None` if input was empty. Displays the plot.

### `HdfPlot.plot_time_series(df, x_col, y_col, title=None, figsize=(12, 6))`

*   **Purpose:** Creates a simple line plot for time series data from a DataFrame.
*   **Parameters:**
    *   `df` (`pd.DataFrame`): DataFrame containing the data.
    *   `x_col` (`str`): Column name for the x-axis (usually time).
    *   `y_col` (`str`): Column name for the y-axis.
    *   `title` (`str`, optional): Plot title. Default `None`.
    *   `figsize` (`Tuple[int, int]`, optional): Figure size. Default (12, 6).
*   **Returns:** `None`. Displays the plot.

---

## Class: HdfPump

Contains static methods for handling pump station geometry and results data from HEC-RAS HDF files.

### `HdfPump.get_pump_stations(hdf_path)`

*   **Purpose:** Extracts pump station locations and attributes from the geometry HDF.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`): Path identifier for the HDF file (usually geometry or plan HDF).
*   **Returns:** `gpd.GeoDataFrame`: GeoDataFrame with Point geometries and attributes including 'station_id'.
*   **Raises:** `KeyError`.

### `HdfPump.get_pump_groups(hdf_path)`

*   **Purpose:** Extracts pump group attributes and efficiency curve data from the geometry HDF.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`): Path identifier for the HDF file (usually geometry or plan HDF).
*   **Returns:** `pd.DataFrame`: DataFrame containing pump group attributes and 'efficiency_curve' data (list of values).
*   **Raises:** `KeyError`.

### `HdfPump.get_pump_station_timeseries(hdf_path, pump_station)`

*   **Purpose:** Extracts time series results (Flow, Stage HW, Stage TW, Pumps On) for a specific pump station from the plan results HDF.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF.
    *   `pump_station` (`str`): Name of the pump station as defined in HEC-RAS.
*   **Returns:** `xr.DataArray`: DataArray with dimensions ('time', 'variable') containing the time series. Includes units attribute.
*   **Raises:** `KeyError`, `ValueError` if pump station not found.

### `HdfPump.get_pump_station_summary(hdf_path)`

*   **Purpose:** Extracts summary statistics (min/max values, volumes, durations) for all pump stations from the plan results HDF.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF.
*   **Returns:** `pd.DataFrame`: DataFrame containing the summary statistics. Returns empty DataFrame if data not found.
*   **Raises:** `KeyError`.

### `HdfPump.get_pump_operation_timeseries(hdf_path, pump_station)`

*   **Purpose:** Extracts detailed pump operation time series data (similar to `get_pump_station_timeseries` but often from a different HDF group, potentially DSS Profile Output) for a specific pump station. Returns as a DataFrame.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF.
    *   `pump_station` (`str`): Name of the pump station.
*   **Returns:** `pd.DataFrame`: DataFrame with columns ['Time', 'Flow', 'Stage HW', 'Stage TW', 'Pump Station', 'Pumps on'].
*   **Raises:** `KeyError`, `ValueError` if pump station not found.

---

## Class: HdfResultsMesh

Contains static methods for extracting and analyzing 2D mesh *results* data from HEC-RAS plan HDF files.

### `HdfResultsMesh.get_mesh_summary(hdf_path, var, round_to="100ms")`

*   **Purpose:** Extracts summary output (e.g., max/min values and times) for a specific variable across all cells/faces in all 2D areas. Merges with geometry (points for cells, lines for faces).
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF.
    *   `var` (`str`): The summary variable name (e.g., "Maximum Water Surface", "Maximum Face Velocity", "Cell Last Iteration").
    *   `round_to` (`str`, optional): Time rounding precision for timestamps. Default "100ms".
*   **Returns:** `gpd.GeoDataFrame`: GeoDataFrame containing the summary results, geometry, and mesh/element IDs.
*   **Raises:** `ValueError`.

### `HdfResultsMesh.get_mesh_timeseries(hdf_path, mesh_name, var, truncate=True)`

*   **Purpose:** Extracts the full time series for a specific variable for all cells or faces within a *single* specified 2D mesh area.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF.
    *   `mesh_name` (`str`): Name of the 2D Flow Area.
    *   `var` (`str`): Results variable name (e.g., "Water Surface", "Face Velocity", "Depth").
    *   `truncate` (`bool`, optional): If `True`, remove trailing zero-value time steps. Default `True`.
*   **Returns:** `xr.DataArray`: DataArray with dimensions ('time', 'cell_id' or 'face_id') containing the time series. Includes units attribute.
*   **Raises:** `ValueError`.

### `HdfResultsMesh.get_mesh_faces_timeseries(hdf_path, mesh_name)`

*   **Purpose:** Extracts time series for all standard *face-based* variables ("Face Velocity", "Face Flow") for a specific mesh area.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF.
    *   `mesh_name` (`str`): Name of the 2D Flow Area.
*   **Returns:** `xr.Dataset`: Dataset containing DataArrays for each face variable, indexed by time and face_id.

### `HdfResultsMesh.get_mesh_cells_timeseries(hdf_path, mesh_names=None, var=None, truncate=False, ras_object=None)`

*   **Purpose:** Extracts time series for specified (or all) *cell-based* variables for specified (or all) mesh areas.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF.
    *   `mesh_names` (`str` or `List[str]`, optional): Name(s) of mesh area(s). If `None`, processes all.
    *   `var` (`str`, optional): Specific variable name. If `None`, retrieves all available cell and face variables.
    *   `truncate` (`bool`, optional): Remove trailing zero time steps. Default `False`.
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** `Dict[str, xr.Dataset]`: Dictionary mapping mesh names to Datasets containing the requested variable(s) as DataArrays, indexed by time and cell_id/face_id.
*   **Raises:** `ValueError`.

### `HdfResultsMesh.get_mesh_last_iter(hdf_path)`

*   **Purpose:** Shortcut to get the summary output for "Cell Last Iteration".
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF.
*   **Returns:** `pd.DataFrame`: DataFrame containing the last iteration count for each cell (via `get_mesh_summary`).

### `HdfResultsMesh.get_mesh_max_ws(hdf_path, round_to="100ms")`

*   **Purpose:** Shortcut to get the summary output for "Maximum Water Surface".
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF.
    *   `round_to` (`str`, optional): Time rounding precision. Default "100ms".
*   **Returns:** `gpd.GeoDataFrame`: GeoDataFrame containing max WSE and time for each cell (via `get_mesh_summary`).

### `HdfResultsMesh.get_mesh_min_ws(hdf_path, round_to="100ms")`

*   **Purpose:** Shortcut to get the summary output for "Minimum Water Surface".
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF.
    *   `round_to` (`str`, optional): Time rounding precision. Default "100ms".
*   **Returns:** `gpd.GeoDataFrame`: GeoDataFrame containing min WSE and time for each cell (via `get_mesh_summary`).

### `HdfResultsMesh.get_mesh_max_face_v(hdf_path, round_to="100ms")`

*   **Purpose:** Shortcut to get the summary output for "Maximum Face Velocity".
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF.
    *   `round_to` (`str`, optional): Time rounding precision. Default "100ms".
*   **Returns:** `pd.DataFrame`: DataFrame containing max velocity and time for each face (via `get_mesh_summary`).

### `HdfResultsMesh.get_mesh_min_face_v(hdf_path, round_to="100ms")`

*   **Purpose:** Shortcut to get the summary output for "Minimum Face Velocity".
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF.
    *   `round_to` (`str`, optional): Time rounding precision. Default "100ms".
*   **Returns:** `pd.DataFrame`: DataFrame containing min velocity and time for each face (via `get_mesh_summary`).

### `HdfResultsMesh.get_mesh_max_ws_err(hdf_path, round_to="100ms")`

*   **Purpose:** Shortcut to get the summary output for "Cell Maximum Water Surface Error".
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF.
    *   `round_to` (`str`, optional): Time rounding precision. Default "100ms".
*   **Returns:** `pd.DataFrame`: DataFrame containing max WSE error and time for each cell (via `get_mesh_summary`).

### `HdfResultsMesh.get_mesh_max_iter(hdf_path, round_to="100ms")`

*   **Purpose:** Shortcut to get the summary output for "Cell Last Iteration" (often used as max iteration indicator).
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF.
    *   `round_to` (`str`, optional): Time rounding precision. Default "100ms".
*   **Returns:** `gpd.GeoDataFrame`: GeoDataFrame containing max iteration count and time for each cell (via `get_mesh_summary`).

---

## Class: HdfResultsPlan

Contains static methods for extracting general plan-level *results* and summary information from HEC-RAS plan HDF files.

### `HdfResultsPlan.get_unsteady_info(hdf_path)`

*   **Purpose:** Extracts attributes from the 'Results/Unsteady' group in the plan HDF file.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF.
*   **Returns:** `pd.DataFrame`: Single-row DataFrame containing the unsteady results attributes.
*   **Raises:** `FileNotFoundError`, `KeyError`, `RuntimeError`.

### `HdfResultsPlan.get_unsteady_summary(hdf_path)`

*   **Purpose:** Extracts attributes from the 'Results/Unsteady/Summary' group in the plan HDF file.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF.
*   **Returns:** `pd.DataFrame`: Single-row DataFrame containing the unsteady summary attributes.
*   **Raises:** `FileNotFoundError`, `KeyError`, `RuntimeError`.

### `HdfResultsPlan.get_volume_accounting(hdf_path)`

*   **Purpose:** Extracts attributes from the 'Results/Unsteady/Summary/Volume Accounting' group in the plan HDF file.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF.
*   **Returns:** (`pd.DataFrame` or `None`): Single-row DataFrame containing volume accounting attributes, or `None` if the group doesn't exist.
*   **Raises:** `FileNotFoundError`, `RuntimeError`.

### `HdfResultsPlan.get_runtime_data(hdf_path)`

*   **Purpose:** Extracts detailed computational performance metrics (durations, speeds) for different simulation processes (Geometry, Preprocessing, Unsteady Flow) from the plan HDF file.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF.
*   **Returns:** (`pd.DataFrame` or `None`): Single-row DataFrame containing runtime statistics, or `None` if data is missing or parsing fails.

### `HdfResultsPlan.get_reference_timeseries(hdf_path, reftype)`

*   **Purpose:** Extracts time series results for all Reference Lines or Reference Points from the plan HDF file.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF.
    *   `reftype` (`str`): Type of reference feature ('lines' or 'points').
*   **Returns:** `pd.DataFrame`: DataFrame containing time series data for the specified reference type. Each column represents a reference feature, indexed by time step. Returns empty DataFrame if data not found.

### `HdfResultsPlan.get_reference_summary(hdf_path, reftype)`

*   **Purpose:** Extracts summary results (e.g., max/min values) for all Reference Lines or Reference Points from the plan HDF file.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF.
    *   `reftype` (`str`): Type of reference feature ('lines' or 'points').
*   **Returns:** `pd.DataFrame`: DataFrame containing summary data for the specified reference type. Returns empty DataFrame if data not found.

---

## Class: HdfResultsPlot

Contains static methods for plotting specific HEC-RAS *results* data using `matplotlib`.

### `HdfResultsPlot.plot_results_max_wsel(max_ws_df)`

*   **Purpose:** Creates a scatter plot showing the spatial distribution of maximum water surface elevation (WSE) per mesh cell.
*   **Parameters:**
    *   `max_ws_df` (`gpd.GeoDataFrame`): GeoDataFrame containing max WSE results (requires 'geometry' and 'maximum_water_surface' columns, typically from `HdfResultsMesh.get_mesh_max_ws`).
*   **Returns:** `None`. Displays the plot.

### `HdfResultsPlot.plot_results_max_wsel_time(max_ws_df)`

*   **Purpose:** Creates a scatter plot showing the spatial distribution of the *time* at which maximum water surface elevation occurred for each mesh cell. Also prints timing statistics.
*   **Parameters:**
    *   `max_ws_df` (`gpd.GeoDataFrame`): GeoDataFrame containing max WSE results (requires 'geometry' and 'maximum_water_surface_time' columns, typically from `HdfResultsMesh.get_mesh_max_ws`).
*   **Returns:** `None`. Displays the plot and prints statistics.

### `HdfResultsPlot.plot_results_mesh_variable(variable_df, variable_name, colormap='viridis', point_size=10)`

*   **Purpose:** Creates a generic scatter plot for visualizing any scalar mesh variable (e.g., max depth, max velocity) spatially across cell points.
*   **Parameters:**
    *   `variable_df` (`gpd.GeoDataFrame` or `pd.DataFrame`): (Geo)DataFrame containing the variable data and either a 'geometry' column (Point) or 'x', 'y' columns.
    *   `variable_name` (`str`): The name of the column in `variable_df` containing the data to plot and label.
    *   `colormap` (`str`, optional): Matplotlib colormap name. Default 'viridis'.
    *   `point_size` (`int`, optional): Size of scatter plot points. Default 10.
*   **Returns:** `None`. Displays the plot.
*   **Raises:** `ValueError` if coordinates or variable column are missing.

---

## Class: HdfResultsXsec

Contains static methods for extracting 1D cross-section and related *results* data from HEC-RAS plan HDF files.

### `HdfResultsXsec.get_xsec_timeseries(hdf_path)`

*   **Purpose:** Extracts time series results (Water Surface, Velocity, Flow, etc.) for all 1D cross-sections. Includes cross-section attributes (River, Reach, Station) and calculated maximum values as coordinates/variables.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF.
*   **Returns:** `xr.Dataset`: Dataset containing DataArrays for each variable, indexed by time and cross_section name/identifier. Includes coordinates for attributes and max values.
*   **Raises:** `KeyError`.

### `HdfResultsXsec.get_ref_lines_timeseries(hdf_path)`

*   **Purpose:** Extracts time series results (Flow, Velocity, Water Surface) for all 1D Reference Lines.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF.
*   **Returns:** `xr.Dataset`: Dataset containing DataArrays for each variable, indexed by time and reference line ID/name. Returns empty dataset if data not found.
*   **Raises:** `FileNotFoundError`, `KeyError`.

### `HdfResultsXsec.get_ref_points_timeseries(hdf_path)`

*   **Purpose:** Extracts time series results (Flow, Velocity, Water Surface) for all 1D Reference Points.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='plan_hdf'`): Path identifier for the plan results HDF.
*   **Returns:** `xr.Dataset`: Dataset containing DataArrays for each variable, indexed by time and reference point ID/name. Returns empty dataset if data not found.
*   **Raises:** `FileNotFoundError`, `KeyError`.

---

## Class: HdfStruc

Contains static methods for extracting hydraulic structure *geometry* data from HEC-RAS HDF files (typically geometry HDF).

### `HdfStruc.get_structures(hdf_path, datetime_to_str=False)`

*   **Purpose:** Extracts geometry and attributes for all structures (bridges, culverts, inline structures, lateral structures) defined in the geometry HDF. Includes centerline geometry, profile data, and other specific attributes like bridge coefficients.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='geom_hdf'`): Path identifier for the geometry HDF.
    *   `datetime_to_str` (`bool`, optional): Convert datetime attributes to ISO strings. Default `False`.
*   **Returns:** `gpd.GeoDataFrame`: GeoDataFrame with LineString geometries (centerlines) and numerous attribute columns, including nested profile data ('Profile_Data'). Returns empty GeoDataFrame if no structures found.

### `HdfStruc.get_geom_structures_attrs(hdf_path)`

*   **Purpose:** Extracts the top-level attributes associated with the 'Geometry/Structures' group in the geometry HDF file.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='geom_hdf'`): Path identifier for the geometry HDF.
*   **Returns:** `pd.DataFrame`: Single-row DataFrame containing the group attributes. Returns empty DataFrame if group not found.

---

## Class: HdfUtils

Contains general static utility methods used for HDF processing, data conversion, and calculations.

### `HdfUtils.convert_ras_string(value)`

*   **Purpose:** Converts byte strings or regular strings potentially containing HEC-RAS specific formats (dates, durations, booleans) into appropriate Python objects (`bool`, `datetime`, `List[datetime]`, `timedelta`, `str`).
*   **Parameters:**
    *   `value` (`str` or `bytes`): Input string or byte string.
*   **Returns:** (`bool`, `datetime`, `List[datetime]`, `timedelta`, `str`): Converted Python object.

### `HdfUtils.convert_ras_hdf_value(value)`

*   **Purpose:** General converter for values read directly from HDF datasets (handles `np.nan`, byte strings, numpy types).
*   **Parameters:**
    *   `value` (`Any`): Value read from HDF.
*   **Returns:** (`None`, `bool`, `str`, `List[str]`, `int`, `float`, `List[int]`, `List[float]`): Converted Python object.

### `HdfUtils.convert_df_datetimes_to_str(df)`

*   **Purpose:** Converts all columns of dtype `datetime64` in a DataFrame to ISO format strings (`YYYY-MM-DD HH:MM:SS`).
*   **Parameters:**
    *   `df` (`pd.DataFrame`): Input DataFrame.
*   **Returns:** `pd.DataFrame`: DataFrame with datetime columns converted to strings.

### `HdfUtils.convert_hdf5_attrs_to_dict(attrs, prefix=None)`

*   **Purpose:** Converts HDF5 attributes (from `.attrs`) into a Python dictionary, applying `convert_ras_hdf_value` to each value.
*   **Parameters:**
    *   `attrs` (`h5py.AttributeManager` or `Dict`): Attributes object or dictionary.
    *   `prefix` (`str`, optional): Prefix to add to keys in the resulting dictionary.
*   **Returns:** `Dict[str, Any]`: Dictionary of converted attributes.

### `HdfUtils.convert_timesteps_to_datetimes(timesteps, start_time, time_unit="days", round_to="100ms")`

*   **Purpose:** Converts an array of numeric time steps (relative to a start time) into a pandas `DatetimeIndex`.
*   **Parameters:**
    *   `timesteps` (`np.ndarray`): Array of time step values.
    *   `start_time` (`datetime`): The reference start datetime.
    *   `time_unit` (`str`, optional): Unit of the `timesteps` ('days' or 'hours'). Default 'days'.
    *   `round_to` (`str`, optional): Pandas frequency string for rounding. Default '100ms'.
*   **Returns:** `pd.DatetimeIndex`: Index of datetime objects.

### `HdfUtils.perform_kdtree_query(reference_points, query_points, max_distance=2.0)`

*   **Purpose:** Finds nearest point in `reference_points` for each point in `query_points` using KDTree, within `max_distance`. Returns index or -1. (See `RasUtils` for identical function).
*   **Parameters:** See `RasUtils.perform_kdtree_query`.
*   **Returns:** (`np.ndarray`): Array of indices or -1.

### `HdfUtils.find_nearest_neighbors(points, max_distance=2.0)`

*   **Purpose:** Finds nearest neighbor for each point within the same dataset using KDTree, excluding self and points beyond `max_distance`. Returns index or -1. (See `RasUtils` for identical function).
*   **Parameters:** See `RasUtils.find_nearest_neighbors`.
*   **Returns:** (`np.ndarray`): Array of indices or -1.

### `HdfUtils.parse_ras_datetime(datetime_str)`

*   **Purpose:** Parses HEC-RAS standard datetime string format ("ddMMMYYYY HH:MM:SS").
*   **Parameters:**
    *   `datetime_str` (`str`): String to parse.
*   **Returns:** (`datetime`): Parsed datetime object.

### `HdfUtils.parse_ras_window_datetime(datetime_str)`

*   **Purpose:** Parses HEC-RAS simulation window datetime string format ("ddMMMYYYY HHMM").
*   **Parameters:**
    *   `datetime_str` (`str`): String to parse.
*   **Returns:** (`datetime`): Parsed datetime object.

### `HdfUtils.parse_duration(duration_str)`

*   **Purpose:** Parses HEC-RAS duration string format ("HH:MM:SS").
*   **Parameters:**
    *   `duration_str` (`str`): String to parse.
*   **Returns:** (`timedelta`): Parsed timedelta object.

### `HdfUtils.parse_ras_datetime_ms(datetime_str)`

*   **Purpose:** Parses HEC-RAS datetime string format that includes milliseconds ("ddMMMYYYY HH:MM:SS:fff").
*   **Parameters:**
    *   `datetime_str` (`str`): String to parse.
*   **Returns:** (`datetime`): Parsed datetime object with microseconds.

### `HdfUtils.parse_run_time_window(window)`

*   **Purpose:** Parses a HEC-RAS time window string ("datetime1 to datetime2") into start and end datetime objects.
*   **Parameters:**
    *   `window` (`str`): Time window string.
*   **Returns:** `Tuple[datetime, datetime]`: Tuple containing (start_datetime, end_datetime).

### `HdfUtils.decode_byte_strings(dataframe)`

*   **Purpose:** Decodes all byte string (`b'...'`) columns in a DataFrame to UTF-8 strings. (See `RasUtils` for identical function).
*   **Parameters:** See `RasUtils.decode_byte_strings`.
*   **Returns:** `pd.DataFrame`.

### `HdfUtils.consolidate_dataframe(...)`

*   **Purpose:** Aggregates rows in a DataFrame based on grouping criteria. (See `RasUtils` for identical function).
*   **Parameters:** See `RasUtils.consolidate_dataframe`.
*   **Returns:** `pd.DataFrame`.

### `HdfUtils.find_nearest_value(...)`

*   **Purpose:** Finds the element in an array numerically closest to a target value. (See `RasUtils` for identical function).
*   **Parameters:** See `RasUtils.find_nearest_value`.
*   **Returns:** (`int` or `float`).

### `HdfUtils.horizontal_distance(...)`

*   **Purpose:** Calculates the 2D Euclidean distance between two points. (See `RasUtils` for identical function).
*   **Parameters:** See `RasUtils.horizontal_distance`.
*   **Returns:** (`float`).

---

## Class: HdfXsec

Contains static methods for extracting 1D cross-section *geometry* data from HEC-RAS HDF files (typically geometry HDF).

### `HdfXsec.get_cross_sections(hdf_path, datetime_to_str=True, ras_object=None)`

*   **Purpose:** Extracts detailed cross-section geometry, attributes, station-elevation data, Manning's n values, and ineffective flow areas from the geometry HDF file.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='geom_hdf'`): Path identifier for the geometry HDF.
    *   `datetime_to_str` (`bool`, optional): Convert datetime attributes to strings. Default `True`.
    *   `ras_object` (`RasPrj`, optional): Instance for context. Defaults to global `ras`.
*   **Returns:** `gpd.GeoDataFrame`: GeoDataFrame with LineString geometries (cross-section cut lines) and numerous attributes including nested lists/dicts for profile data ('station_elevation'), roughness ('mannings_n'), and ineffective areas ('ineffective_blocks').

### `HdfXsec.get_river_centerlines(hdf_path, datetime_to_str=False)`

*   **Purpose:** Extracts river centerline geometries and attributes from the geometry HDF file.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='geom_hdf'`): Path identifier for the geometry HDF.
    *   `datetime_to_str` (`bool`, optional): Convert datetime attributes to strings. Default `False`.
*   **Returns:** `gpd.GeoDataFrame`: GeoDataFrame with LineString geometries and attributes like 'River Name', 'Reach Name', 'length'.

### `HdfXsec.get_river_stationing(centerlines_gdf)`

*   **Purpose:** Calculates stationing values along river centerlines, interpolating points and determining direction based on upstream/downstream connections.
*   **Parameters:**
    *   `centerlines_gdf` (`gpd.GeoDataFrame`): GeoDataFrame obtained from `get_river_centerlines`.
*   **Returns:** `gpd.GeoDataFrame`: The input GeoDataFrame with added columns: 'station_start', 'station_end', 'stations' (array), 'points' (array of Shapely Points).

### `HdfXsec.get_river_reaches(hdf_path, datetime_to_str=False)`

*   **Purpose:** Extracts 1D river reach lines (often identical to centerlines but potentially simplified) from the geometry HDF file.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='geom_hdf'`): Path identifier for the geometry HDF.
    *   `datetime_to_str` (`bool`, optional): Convert datetime attributes to strings. Default `False`.
*   **Returns:** `gpd.GeoDataFrame`: GeoDataFrame with LineString geometries and attributes.

### `HdfXsec.get_river_edge_lines(hdf_path, datetime_to_str=False)`

*   **Purpose:** Extracts river edge lines (representing the extent of the 1D river schematic) from the geometry HDF file. Usually includes Left and Right edges.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='geom_hdf'`): Path identifier for the geometry HDF.
    *   `datetime_to_str` (`bool`, optional): Convert datetime attributes to strings. Default `False`.
*   **Returns:** `gpd.GeoDataFrame`: GeoDataFrame with LineString geometries and attributes including 'bank_side' ('Left'/'Right').

### `HdfXsec.get_river_bank_lines(hdf_path, datetime_to_str=False)`

*   **Purpose:** Extracts river bank lines (defining the main channel within the cross-section) from the geometry HDF file.
*   **Parameters:**
    *   `hdf_path` (Input handled by `@standardize_input`, `file_type='geom_hdf'`): Path identifier for the geometry HDF.
    *   `datetime_to_str` (`bool`, optional): Convert datetime attributes to strings. Default `False`.
*   **Returns:** `gpd.GeoDataFrame`: GeoDataFrame with LineString geometries and attributes 'bank_id', 'bank_side'.

---

## Logging Configuration Functions

### `get_logger(name)`

*   **Purpose:** Retrieves a configured logger instance for use within the library or user scripts. Ensures logging is set up.
*   **Parameters:**
    *   `name` (`str`): Name for the logger (typically `__name__`).
*   **Returns:** (`logging.Logger`): A standard Python logger instance.

---

## Class: RasMap

Contains static methods for parsing and accessing information from HEC-RAS mapper configuration files (.rasmap).

### `RasMap.parse_rasmap(rasmap_path: Union[str, Path], ras_object=None) -> pd.DataFrame`

*   **Purpose:** Parse a .rasmap file and extract relevant information.
*   **Parameters:**
    *   `rasmap_path` (`Union[str, Path]`): Path to the .rasmap file.
    *   `ras_object` (`RasPrj`, optional): Specific RAS object to use. If None, uses the global ras instance.
*   **Returns:** `pd.DataFrame`: DataFrame containing extracted information from the .rasmap file.
*   **Raises:** Various exceptions for file access or parsing failures.

### `RasMap.get_rasmap_path(ras_object=None) -> Optional[Path]`

*   **Purpose:** Get the path to the .rasmap file based on the current project.
*   **Parameters:**
    *   `ras_object` (`RasPrj`, optional): Specific RAS object to use. If None, uses the global ras instance.
*   **Returns:** `Optional[Path]`: Path to the .rasmap file if found, None otherwise.

### `RasMap.initialize_rasmap_df(ras_object=None) -> pd.DataFrame`

*   **Purpose:** Initialize the rasmap_df as part of project initialization.
*   **Parameters:**
    *   `ras_object` (`RasPrj`, optional): Specific RAS object to use. If None, uses the global ras instance.
*   **Returns:** `pd.DataFrame`: DataFrame containing information from the .rasmap file.
==================================================

File: c:\GH\ras-commander\Comprehensive_Library_Guide.md
==================================================
# Comprehensive RAS-Commander Library Guide

## Introduction

RAS-Commander (`ras_commander`) is a Python library designed to automate and streamline operations with HEC-RAS projects. It provides a suite of tools for managing projects, executing simulations, and handling results. This guide offers a comprehensive overview of the library's key concepts, modules, best practices, and advanced usage patterns. RAS-Commander is designed to be flexible, robust, and AI-accessible, making it an ideal tool for both manual and automated HEC-RAS workflows.

RAS-Commander can be installed with the following commands:
```bash
# Install dependencies first for potentially smoother installation
pip install h5py numpy pandas requests tqdm scipy xarray geopandas matplotlib psutil shapely fiona pathlib rtree

# Install or update ras-commander
pip install --upgrade ras-commander
```

## Key Concepts

1.  **RAS Objects (`RasPrj`)**:
    *   Represent HEC-RAS projects containing information about plans, geometries, and flow files.
    *   Support both a global `ras` object (imported from `ras_commander`) and custom named `RasPrj` instances to handle multiple projects.
    *   Include `rasmap_df` attribute providing access to spatial datasets referenced in RASMapper.

2.  **Project Initialization**:
    *   Use `init_ras_project()` to initialize projects and set up `RasPrj` objects.
    *   Handles project file (`.prj`) discovery, HEC-RAS executable path determination, and data structure setup.

3.  **File Handling**:
    *   Utilizes `pathlib.Path` for consistent, platform-independent file paths.
    *   Adheres to HEC-RAS file naming conventions (`.prj`, `.p01`, `.g01`, `.f01`, `.u01`, `.hdf`).

4.  **Data Management**:
    *   Employs Pandas DataFrames (accessible via `ras_object.plan_df`, `geom_df`, `flow_df`, `unsteady_df`, `boundaries_df`) to manage structured data about project components.
    *   Provides methods for accessing and updating project files, which subsequently refresh these DataFrames.

5.  **Execution Modes (`RasCmdr`)**:
    *   **Single Plan Execution**: Run individual plans with `RasCmdr.compute_plan()`.
    *   **Sequential Execution**: Run multiple plans in sequence in a test folder with `RasCmdr.compute_test_mode()`.
    *   **Parallel Execution**: Run multiple independent plans concurrently using worker folders with `RasCmdr.compute_parallel()`.

6.  **Example Projects (`RasExamples`)**:
    *   The `RasExamples` class offers functionality to download and manage official HEC-RAS example projects for testing and learning.

7.  **Utility Functions (`RasUtils`)**:
    *   Provides common utility functions for file operations (cloning, updating, removing), path handling, data conversion, error metrics calculation, and spatial queries.

8.  **AI-Accessibility**:
    *   Structured, consistent codebase with clear documentation (like this guide and docstrings) intended to facilitate easier learning and usage by AI models and developers. Code aims for predictability.

9.  **Boundary Conditions (`RasPrj.boundaries_df`)**:
    *   Represent input conditions (flow/stage hydrographs, normal depth, etc.).
    *   The `RasPrj` class extracts and manages boundary condition data parsed from unsteady flow files (`.u*`).

10. **Flexibility and Modularity**:
    *   Functions operating on projects accept an optional `ras_object` parameter, allowing use with the global `ras` or custom `RasPrj` instances.
    *   Clear separation of concerns: project management (`RasPrj`), execution (`RasCmdr`), file operations (`RasPlan`, `RasGeo`, `RasUnsteady`), HDF data retrieval (`Hdf*` classes), utilities (`RasUtils`), and examples (`RasExamples`).

11. **Error Handling and Logging**:
    *   Emphasis on robust error checking (e.g., `check_initialized`) and informative logging.
    *   Uses the `LoggingConfig` module for consistent setup (console and optional file output).
    *   `@log_call` decorator applied to most public functions for automatic call tracing at the DEBUG level.

12. **HDF Support (`Hdf*` classes)**:
    *   Comprehensive HDF file handling through specialized classes (`HdfBase`, `HdfMesh`, `HdfPlan`, `HdfResultsMesh`, `HdfResultsPlan`, `HdfResultsXsec`, `HdfStruc`, `HdfPipe`, `HdfPump`, `HdfFluvialPluvial`, `HdfInfiltration`, `HdfBndry`, `HdfXsec`, `HdfPlot`, `HdfResultsPlot`).
    *   Support for mesh, plan, cross-section geometry and results.
    *   Advanced data extraction, analysis, and plotting capabilities.

13. **Infrastructure Support (`HdfPipe`, `HdfPump`, `HdfStruc`)**:
    *   Tools for accessing geometry and results data related to pipe networks, pump stations, and other hydraulic structures from HDF files.

## Core Features

1.  **Project Management**: Initialize, load, and inspect HEC-RAS projects (`RasPrj`, `init_ras_project`).
2.  **Plan Execution**: Run single or multiple HEC-RAS plans sequentially or in parallel (`RasCmdr`).
3.  **File Operations**: Clone, modify, and manage HEC-RAS file types (plans, geometries, flows) programmatically (`RasPlan`, `RasGeo`, `RasUnsteady`, `RasUtils`).
4.  **Data Extraction**: Retrieve and process simulation results and geometry from HDF files (`Hdf*` classes).
5.  **Boundary Condition Management**: Extract and analyze boundary conditions from unsteady flow files (`RasPrj.get_boundary_conditions`).
6.  **Parallel Processing**: Optimize simulation time for multiple independent plans (`RasCmdr.compute_parallel`).
7.  **Example Project Handling**: Download and manage HEC-RAS example projects (`RasExamples`).
8.  **Utility Functions**: Perform common tasks like file manipulation, path resolution, error calculation, and spatial queries (`RasUtils`).
9.  **HDF File Handling**: Specialized classes for structured access to HEC-RAS HDF data.
10. **Infrastructure Analysis**: Tools for analyzing pipe networks, pump stations, and structures via HDF data (`HdfPipe`, `HdfPump`, `HdfStruc`).
11. **Visualization**: Basic plotting capabilities for HDF results (`HdfPlot`, `HdfResultsPlot`).

## Module Overview

1.  **RasPrj**: Manages HEC-RAS project state, including file discovery and dataframes for plans, geoms, flows, unsteady files, and boundary conditions.
2.  **RasCmdr**: Handles execution of HEC-RAS simulations via command line (single, sequential, parallel).
3.  **RasPlan**: Provides functions for plan file (`.p*`) operations (cloning, modifying parameters like geometry, flow files, cores, intervals, description).
4.  **RasGeo**: Manages geometry-related operations, primarily clearing preprocessor files (`.c*`).
5.  **RasUnsteady**: Handles unsteady flow file (`.u*`) operations (updating title, restart settings, extracting boundary tables).
6.  **RasUtils**: Offers general utility functions (file handling, path finding, data conversion, error metrics, spatial queries).
7.  **RasExamples**: Manages downloading and extracting official HEC-RAS example projects.
8.  **RasMap**: Parses HEC-RAS mapper configuration files (.rasmap) to extract paths to terrain, soil layer, land cover data, and other spatial datasets. Provides access to projection information and RASMapper settings.
9.  **HdfBase**: Provides base functionality for HDF file operations (time parsing, attribute access, projection).
10. **HdfBndry**: Handles boundary *geometry* features (BC lines, breaklines, etc.) from geometry HDF files.
11. **HdfMesh**: Manages mesh *geometry* data (cell polygons, points, faces, attributes) from HDF files.
12. **HdfPlan**: Handles plan-level information (simulation times, parameters) from plan HDF files.
13. **HdfResultsMesh**: Processes mesh *results* (WSE, velocity, depth timeseries, summaries) from plan HDF files.
14. **HdfResultsPlan**: Handles plan-level *results* (volume accounting, runtime stats) from plan HDF files.
15. **HdfResultsXsec**: Processes 1D cross-section *results* (WSE, flow, velocity timeseries) from plan HDF files.
16. **HdfStruc**: Manages structure *geometry* data (centerlines, profiles) from geometry HDF files.
17. **HdfUtils**: Provides utility functions specifically for HDF data handling (data type conversions, spatial queries).
18. **HdfXsec**: Handles 1D cross-section and river *geometry* (cut lines, centerlines, banks) from geometry HDF files.
19. **HdfPipe**: Handles pipe network geometry and results data from HDF files.
20. **HdfPump**: Manages pump station geometry and results data from HDF files.
21. **HdfFluvialPluvial**: Analyzes fluvial vs. pluvial boundaries based on results timing in plan HDF files.
22. **HdfInfiltration**: Handles infiltration layer data (parameters, maps) from geometry or `.tif.hdf` files.
23. **HdfPlot & HdfResultsPlot**: Basic visualization utilities for HDF data and results.
24. **Decorators**: Contains `@log_call` and `@standardize_input`.
25. **LoggingConfig**: Sets up and provides access to the library's logging system.

## Best Practices

### 1. RAS Object Usage (`RasPrj`)

*   **Single Project Scripts**:
    *   Use the global `ras` object for simplicity after initializing it.
    ```python
    from ras_commander import ras, init_ras_project

    # Initialize the global 'ras' object
    init_ras_project("/path/to/project", "6.5")
    # Use ras object for operations
    print(ras.plan_df)
    ```

*   **Multiple Projects**:
    *   Create separate `RasPrj` instances for each project using `init_ras_project` with the `ras_object` parameter set to a new instance or a unique identifier string. Always pass the specific `ras_object` to functions that need project context.
    ```python
    from ras_commander import RasPrj, init_ras_project, RasCmdr

    # Initialize two separate projects using new instances
    project1 = init_ras_project("/path/to/project1", "6.5", ras_object=RasPrj())
    project2 = init_ras_project("/path/to/project2", "6.5", ras_object=RasPrj())

    # Pass the specific object when calling functions
    RasCmdr.compute_plan("01", ras_object=project1)
    RasCmdr.compute_plan("02", ras_object=project2)
    ```

*   **Consistency**:
    *   Avoid mixing global `ras` usage and custom `RasPrj` instances within the same logical part of your script to prevent confusion. When using multiple projects, *always* pass the `ras_object` parameter.

### 2. Plan Specification

*   Use plan numbers as strings (e.g., `"01"`, `"02"`) for consistency with file naming conventions when calling functions like `compute_plan`.
    ```python
    RasCmdr.compute_plan("01")
    ```

*   Check available plans before specifying plan numbers using the `plan_df` attribute.
    ```python
    print(ras.plan_df) # Displays available plans and their details
    available_plans = ras.plan_df['plan_number'].tolist()
    print(f"Available plans: {available_plans}")
    ```

### 3. Geometry Preprocessor Files (`.c*`)

*   Clear geometry preprocessor files (`.c*`) using `RasGeo.clear_geompre_files()` *before* running a plan if the underlying geometry (`.g*`) file has been significantly modified. This forces HEC-RAS to recalculate hydraulic tables.
    ```python
    from ras_commander import RasPlan, RasGeo
    plan_path = RasPlan.get_plan_path("01") # Get path if needed
    RasGeo.clear_geompre_files(plan_path) # Clear for a specific plan
    # Or clear for all plans: RasGeo.clear_geompre_files()
    ```
*   Alternatively, use `clear_geompre=True` in `RasCmdr` functions for a clean computation environment, though calling `RasGeo.clear_geompre_files` directly offers more control.
    ```python
    RasCmdr.compute_plan("01", clear_geompre=True)
    ```

### 4. Parallel Execution (`RasCmdr.compute_parallel`)

*   Adjust `max_workers` (number of parallel HEC-RAS instances) based on available **physical CPU cores** and **RAM**. Each worker needs significant RAM (2-4GB+).
*   Set `num_cores` (cores *per worker*) to balance single-plan speed vs. overall throughput. Common values are 2-4 cores per worker.
    ```python
    import psutil
    physical_cores = psutil.cpu_count(logical=False)
    cores_per_worker = 2
    max_workers_cpu = max(1, physical_cores // cores_per_worker)
    # Consider RAM constraints as well - may need fewer workers than CPU allows
    max_workers = min(max_workers_cpu, 4) # Example: Limit to 4 workers regardless of CPU

    RasCmdr.compute_parallel(max_workers=max_workers, num_cores=cores_per_worker)
    ```

*   Use `dest_folder` to organize outputs from parallel runs and prevent conflicts with the original project or other runs. Use `overwrite_dest=True` cautiously.
    ```python
    results_dir = Path("./parallel_run_output")
    RasCmdr.compute_parallel(dest_folder=results_dir, overwrite_dest=True)
    ```

### 5. Error Handling and Logging

Proper error handling and logging are crucial for robust `ras_commander` scripts.

1.  **Logging Setup**:
    The library automatically sets up basic console logging at the INFO level. You can change the level or add file logging.
    ```python
    import logging
    from ras_commander import setup_logging, get_logger

    # Change console log level to DEBUG
    logging.getLogger('ras_commander').setLevel(logging.DEBUG)

    # Or, setup file logging as well
    # setup_logging(log_file='my_ras_script.log', log_level=logging.DEBUG)

    # Get a logger for your script
    script_logger = get_logger(__name__)
    script_logger.info("Script starting...")
    ```

2.  **Using the `@log_call` Decorator**:
    Most public library functions already use `@log_call`, automatically logging function entry/exit at the DEBUG level.

3.  **Custom Logging**:
    Use the logger obtained via `get_logger()` for more detailed script-specific logging.
    ```python
    logger = get_logger(__name__)
    def my_custom_ras_step():
        logger.info("Starting custom step...")
        try:
            # Perform operations using ras_commander functions
            result = RasCmdr.compute_plan("01")
            if not result:
                logger.warning("Plan 01 computation reported failure.")
            # Process result...
            logger.info("Custom step completed.")
        except Exception as e:
            logger.error(f"Custom step failed: {str(e)}", exc_info=True) # Log exception details
            # Handle error appropriately
    ```

4.  **Error Handling Best Practices**:
    *   Use `try...except` blocks around library calls that might fail (e.g., file operations, computations).
    *   Catch specific exceptions (`FileNotFoundError`, `ValueError`, `subprocess.CalledProcessError`) where possible.
    *   Check return values from functions like `compute_plan` which return `True`/`False`.
    *   Provide informative error messages in your logs or exceptions.
    ```python
    try:
        plan_path = RasPlan.get_plan_path("99") # Plan likely doesn't exist
        if plan_path is None:
             raise ValueError("Plan 99 does not exist in the project.")
        # ... more operations
    except ValueError as ve:
        script_logger.error(f"Configuration error: {ve}")
    except FileNotFoundError as fnf:
        script_logger.error(f"File access error: {fnf}")
    except Exception as ex:
        script_logger.critical(f"An unexpected error occurred: {ex}", exc_info=True)
    ```

### 6. File Path Handling

*   Use `pathlib.Path` objects for robust file and directory operations within your scripts. Library functions generally accept `str` or `Path`.
    ```python
    from pathlib import Path
    project_dir = Path("/path/to/my/project")
    results_dir = project_dir.parent / "results"
    # Pass Path objects to library functions
    init_ras_project(project_dir, "6.5")
    RasCmdr.compute_plan("01", dest_folder=results_dir)
    ```

### 7. Type Hinting

*   Apply type hints in your own functions that use `ras_commander` to improve code readability, maintainability, and IDE support.
    ```python
    from ras_commander import RasPrj, RasCmdr
    from typing import Dict, List

    def run_specific_plans(project: RasPrj, plans_to_run: List[str]) -> Dict[str, bool]:
        """Runs a list of plans for the given project."""
        results = RasCmdr.compute_parallel(
            plan_number=plans_to_run,
            ras_object=project,
            max_workers=2,
            num_cores=2
        )
        return results
    ```

## Usage Patterns

### Initializing a Project (Global `ras`)

```python
from ras_commander import init_ras_project, ras

# Initializes the global 'ras' object
init_ras_project("/path/to/project", "6.5")
print(f"Working with project: {ras.project_name}")
print(f"Available plans:\n{ras.plan_df}")
```

### Cloning a Plan

```python
from ras_commander import RasPlan, ras, init_ras_project

init_ras_project("/path/to/project", "6.5")

# Clone plan "01", automatically assigns next number (e.g., "02")
new_plan_number = RasPlan.clone_plan("01", new_plan_shortid="Cloned Plan Test")
print(f"Created new plan: {new_plan_number}")

# The 'ras' object is automatically refreshed after cloning
print(f"Updated plan list:\n{ras.plan_df}")
```

### Executing Plans (`RasCmdr`)

*   **Single Plan Execution**:
    ```python
    from ras_commander import RasCmdr, init_ras_project

    init_ras_project("/path/to/project", "6.5")
    success = RasCmdr.compute_plan("01", num_cores=2)
    print(f"Plan '01' execution {'successful' if success else 'failed'}")
    ```

*   **Parallel Execution of Multiple Plans**:
    ```python
    from ras_commander import RasCmdr, init_ras_project
    from pathlib import Path

    init_ras_project("/path/to/project", "6.5")
    results_folder = Path("./parallel_results")

    results = RasCmdr.compute_parallel(
        plan_number=["01", "02", "03"],
        max_workers=3,
        num_cores=2, # 2 cores per worker
        dest_folder=results_folder,
        overwrite_dest=True,
        clear_geompre=False
    )

    print("Parallel execution results:")
    for plan, success in results.items():
        print(f"  Plan {plan}: {'Successful' if success else 'Failed'}")
    ```
*   **Sequential Execution in Test Folder**:
    ```python
    from ras_commander import RasCmdr, init_ras_project

    init_ras_project("/path/to/project", "6.5")

    results = RasCmdr.compute_test_mode(
        plan_number=["01", "02"],
        dest_folder_suffix="[SequentialTest]",
        num_cores=4,
        overwrite_dest=True
    )
    print("Sequential execution results:")
    for plan, success in results.items():
        print(f"  Plan {plan}: {'Successful' if success else 'Failed'}")
    ```

### Working with Multiple Projects

```python
from ras_commander import RasPrj, init_ras_project, RasCmdr
from pathlib import Path

# Initialize two separate projects using new instances
project1 = init_ras_project("/path/to/project1", "6.5", ras_object=RasPrj())
project2 = init_ras_project("/path/to/project2", "6.5", ras_object=RasPrj())

results_folder1 = Path("./results_proj1")
results_folder2 = Path("./results_proj2")

# Perform operations on each project, passing the correct object
print(f"Running plan 01 for {project1.project_name}")
RasCmdr.compute_plan("01", ras_object=project1, dest_folder=results_folder1, overwrite_dest=True)

print(f"Running plan 02 for {project2.project_name}")
RasCmdr.compute_plan("02", ras_object=project2, dest_folder=results_folder2, overwrite_dest=True)

# Compare results (example: number of plans)
print(f"{project1.project_name} has {len(project1.plan_df)} plans.")
print(f"{project2.project_name} has {len(project2.plan_df)} plans.")

# Access HDF results (assuming computations were successful)
# Note: Need to re-initialize RasPrj for the output folders to access results easily,
# or construct HDF paths manually.
# Example: Re-initialize to read results from project 1's output
results_proj1 = init_ras_project(results_folder1, "6.5", ras_object=RasPrj())
hdf_df1 = results_proj1.get_hdf_entries()
print(f"HDF results found for Project 1 run:\n{hdf_df1}")

```

## Advanced Usage

### Working with HDF Files

`ras_commander` provides extensive support for reading HEC-RAS HDF files through specialized `Hdf*` classes. These methods typically accept a path identifier (string, Path, number) which is standardized by the `@standardize_input` decorator.

1.  **Exploring HDF Structure**:
    Use `HdfBase.get_dataset_info()` to print the internal structure of an HDF file.
    ```python
    from ras_commander import HdfBase, init_ras_project, RasPlan

    init_ras_project("/path/to/project", "6.5")
    # Assume plan 01 has been computed and has results
    hdf_results_path = RasPlan.get_results_path("01")
    if hdf_results_path:
        print(f"Exploring HDF file: {hdf_results_path}")
        HdfBase.get_dataset_info(hdf_results_path, group_path="/Results/Unsteady/Output/Output Blocks/Base Output/Summary Output")
    else:
        print("No HDF results found for plan 01.")
    ```

2.  **Extracting Mesh Results (`HdfResultsMesh`)**:
    Use `HdfResultsMesh` methods to get timeseries or summary results for 2D areas.
    ```python
    from ras_commander import HdfResultsMesh, init_ras_project, RasPlan
    import xarray as xr

    init_ras_project("/path/to/project", "6.5")
    hdf_results_path = RasPlan.get_results_path("01") # Path to .p01.hdf

    if hdf_results_path:
        try:
            # Get Water Surface time series for the first mesh area
            mesh_names = HdfMesh.get_mesh_area_names(hdf_results_path)
            if mesh_names:
                first_mesh = mesh_names[0]
                ws_timeseries: xr.DataArray = HdfResultsMesh.get_mesh_timeseries(
                    hdf_results_path, first_mesh, "Water Surface"
                )
                print(f"Water Surface timeseries for mesh '{first_mesh}':\n{ws_timeseries}")

                # Get Max Water Surface summary for all meshes
                max_ws_summary = HdfResultsMesh.get_mesh_max_ws(hdf_results_path)
                print(f"\nMax Water Surface Summary:\n{max_ws_summary}")
            else:
                print("No mesh areas found in HDF.")
        except Exception as e:
            print(f"Error reading mesh results: {e}")
    else:
        print("No HDF results found for plan 01.")
    ```

3.  **Working with Plan Results (`HdfResultsPlan`)**:
    Use `HdfResultsPlan` for plan-level results like runtime or volume accounting.
    ```python
    from ras_commander import HdfResultsPlan, init_ras_project, RasPlan

    init_ras_project("/path/to/project", "6.5")
    hdf_results_path = RasPlan.get_results_path("01")

    if hdf_results_path:
        runtime_data = HdfResultsPlan.get_runtime_data(hdf_results_path)
        print(f"Runtime Data:\n{runtime_data}")

        volume_accounting = HdfResultsPlan.get_volume_accounting(hdf_results_path)
        print(f"\nVolume Accounting:\n{volume_accounting}")
    else:
        print("No HDF results found for plan 01.")
    ```

4.  **Cross-Section Results (`HdfResultsXsec`)**:
    Extract 1D cross-section time series results using `HdfResultsXsec`.
    ```python
    from ras_commander import HdfResultsXsec, init_ras_project, RasPlan
    import xarray as xr

    init_ras_project("/path/to/project", "6.5")
    hdf_results_path = RasPlan.get_results_path("01")

    if hdf_results_path:
        xsec_results: xr.Dataset = HdfResultsXsec.get_xsec_timeseries(hdf_results_path)
        print(f"Cross Section Results Dataset:\n{xsec_results}")
        # Example: Access Water Surface for the first cross section
        # first_xs_name = xsec_results['cross_section'][0].item()
        # ws_first_xs = xsec_results['Water_Surface'].sel(cross_section=first_xs_name)
        # print(f"\nWater Surface for first cross section ({first_xs_name}):\n{ws_first_xs}")
    else:
        print("No HDF results found for plan 01.")
    ```

### Working with Pipe Networks and Pump Stations

`ras_commander` provides specialized classes (`HdfPipe`, `HdfPump`) for handling pipe network and pump station data from HEC-RAS HDF files.

1.  **Pipe Network Operations (`HdfPipe`)**:
    Extract geometry and results for pipe networks.
    ```python
    from ras_commander import HdfPipe, init_ras_project, RasPlan, HdfMesh
    from pathlib import Path

    init_ras_project("/path/to/project_with_pipes", "6.5")
    # Assume plan 01 computed results for a project with pipes
    hdf_plan_path = RasPlan.get_results_path("01")
    # Geometry HDF is needed for geometric data
    hdf_geom_path = HdfMesh.get_mesh_cell_polygons(hdf_plan_path) # Infer geom HDF from plan

    if hdf_plan_path and hdf_geom_path:
        # Extract pipe conduit geometry
        pipe_conduits_gdf = HdfPipe.get_pipe_conduits(hdf_geom_path)
        print(f"Pipe Conduits:\n{pipe_conduits_gdf}")

        # Extract pipe node geometry
        pipe_nodes_gdf = HdfPipe.get_pipe_nodes(hdf_geom_path)
        print(f"\nPipe Nodes:\n{pipe_nodes_gdf}")

        # Get pipe network timeseries results (e.g., Node Depth)
        node_depth_ts = HdfPipe.get_pipe_network_timeseries(hdf_plan_path, "Nodes/Depth")
        print(f"\nNode Depth Timeseries:\n{node_depth_ts}")

        # Get pipe network summary results
        summary_df = HdfPipe.get_pipe_network_summary(hdf_plan_path)
        print(f"\nPipe Network Summary:\n{summary_df}")

        # Get profile for a specific conduit (e.g., conduit index 0)
        # profile_df = HdfPipe.get_pipe_profile(hdf_geom_path, conduit_id=0)
        # print(f"\nProfile for Conduit 0:\n{profile_df}")
    else:
        print("Could not find HDF plan or geometry files.")
    ```

2.  **Pump Station Operations (`HdfPump`)**:
    Work with pump station geometry and results data.
    ```python
    from ras_commander import HdfPump, init_ras_project, RasPlan, HdfMesh

    init_ras_project("/path/to/project_with_pumps", "6.5")
    # Assume plan 01 computed results
    hdf_plan_path = RasPlan.get_results_path("01")
    hdf_geom_path = HdfMesh.get_mesh_cell_polygons(hdf_plan_path) # Infer geom HDF

    if hdf_plan_path and hdf_geom_path:
        # Extract pump station locations
        pump_stations_gdf = HdfPump.get_pump_stations(hdf_geom_path)
        print(f"Pump Stations:\n{pump_stations_gdf}")

        # Get pump group details (like efficiency curves)
        pump_groups_df = HdfPump.get_pump_groups(hdf_geom_path)
        print(f"\nPump Groups:\n{pump_groups_df}")

        # Get pump station timeseries results (replace "Pump Station 1" with actual name)
        try:
            pump_ts = HdfPump.get_pump_station_timeseries(hdf_plan_path, "Pump Station 1")
            print(f"\nTimeseries for Pump Station 1:\n{pump_ts}")
        except ValueError as e:
            print(f"\nError getting timeseries: {e}")


        # Get pump station summary results
        summary_df = HdfPump.get_pump_station_summary(hdf_plan_path)
        print(f"\nPump Station Summary:\n{summary_df}")

        # Get pump operation timeseries (replace "Pump Station 1" with actual name)
        try:
            operation_df = HdfPump.get_pump_operation_timeseries(hdf_plan_path, "Pump Station 1")
            print(f"\nOperation Timeseries for Pump Station 1:\n{operation_df}")
        except ValueError as e:
             print(f"\nError getting operation timeseries: {e}")
    else:
        print("Could not find HDF plan or geometry files.")
    ```

### Working with Multiple HEC-RAS Projects

Manage multiple projects by creating separate `RasPrj` instances.

```python
from ras_commander import RasPrj, init_ras_project, RasCmdr, RasPlan
import pandas as pd

# Initialize multiple project instances
# Use ras_object=RasPrj() to ensure distinct instances
project1 = init_ras_project("/path/to/project1", "6.5", ras_object=RasPrj())
project2 = init_ras_project("/path/to/project2", "6.6", ras_object=RasPrj())

# This allows RasPrj Instances to be accessed independently
print(f"Project 1: {project1.project_name} ({len(project1.plan_df)} plans)")
print(f"Project 2: {project2.project_name} ({len(project2.plan_df)} plans)")

# --- Best Practices ---
# 1. Clear Naming: Use descriptive variable names (e.g., bald_eagle_proj, muncie_proj).
# 2. Pass Objects: Always pass the correct ras_object to functions.
# 3. Avoid Global 'ras': Don't rely on the global 'ras' when managing multiple projects.
# 4. Separate Outputs: Use distinct dest_folder paths for computations.
# 5. Resource Awareness: Monitor CPU/RAM when running computations for multiple projects, especially in parallel.

# --- Example Workflow ---
# Function to compare basic project structures
def compare_project_structures(ras_obj1: RasPrj, name1: str, ras_obj2: RasPrj, name2: str) -> pd.DataFrame:
    """Compare the structures of two HEC-RAS projects."""
    comparison = {
        'Project Name': [ras_obj1.project_name, ras_obj2.project_name],
        'Plan Count': [len(ras_obj1.plan_df), len(ras_obj2.plan_df)],
        'Geometry Count': [len(ras_obj1.geom_df), len(ras_obj2.geom_df)],
        'Flow Count': [len(ras_obj1.flow_df), len(ras_obj2.flow_df)],
        'Unsteady Count': [len(ras_obj1.unsteady_df), len(ras_obj2.unsteady_df)]
    }
    return pd.DataFrame(comparison, index=[name1, name2])

# Perform operations on each project
RasCmdr.compute_plan("01", ras_object=project1, dest_folder="./proj1_run")
RasCmdr.compute_plan("01", ras_object=project2, dest_folder="./proj2_run")

# Compare structures
comparison_df = compare_project_structures(project1, "Project 1", project2, "Project 2")
print("\nProject Structure Comparison:")
print(comparison_df)

# --- Application Examples ---
# 1. Model Comparison: Run same scenarios on different river models.
# 2. Basin-wide Analysis: Process connected or related models.
# 3. Parameter Sweep: Test parameter variations across multiple baseline models.
# 4. Batch Processing: Automate runs for a large inventory of models.
```

### Plan Execution Modes (`RasCmdr`)

`ras_commander` offers three modes for running HEC-RAS plans:

#### Single Plan Execution (`compute_plan`)

Runs one plan, optionally in a separate destination folder. Best for targeted runs or when immediate results are needed.

```python
from ras_commander import RasCmdr, init_ras_project

init_ras_project("/path/to/project", "6.5")

success = RasCmdr.compute_plan(
    plan_number="01",              # Plan to execute
    dest_folder="/path/to/single_run_results", # Optional: Where to run
    num_cores=4,                   # Optional: Cores for this run
    clear_geompre=True,            # Optional: Force geometry preprocess
    overwrite_dest=True            # Optional: Overwrite dest if exists
)
print(f"Plan 01 execution status: {success}")
```

#### Sequential Execution (`compute_test_mode`)

Runs multiple plans one after another in a dedicated test folder (copy of the project). Best for plans with dependencies or for controlled resource usage.

```python
from ras_commander import RasCmdr, init_ras_project

init_ras_project("/path/to/project", "6.5")

results = RasCmdr.compute_test_mode(
    plan_number=["01", "02", "03"], # Plans to run in order
    dest_folder_suffix="[SequentialRun]", # Suffix for test folder name
    clear_geompre=True,            # Optional: Clear before each plan
    num_cores=4,                   # Optional: Cores for each plan
    overwrite_dest=True            # Optional: Overwrite test folder
)
print("Sequential results:", results)
```

#### Parallel Execution (`compute_parallel`)

Runs multiple independent plans concurrently using temporary worker folders, consolidating results afterward. Best for maximizing speed on multi-core systems with independent plans.

```python
from ras_commander import RasCmdr, init_ras_project

init_ras_project("/path/to/project", "6.5")

results = RasCmdr.compute_parallel(
    plan_number=["01", "02", "03"], # Plans to run in parallel
    max_workers=3,                 # Max concurrent HEC-RAS instances
    num_cores=2,                   # Cores assigned to each worker
    dest_folder="/path/to/parallel_results", # Final results location
    clear_geompre=False,           # Optional: Clear in worker folders
    overwrite_dest=True            # Optional: Overwrite final results folder
)
print("Parallel results:", results)
```

#### Choosing the Right Mode

*   **Dependency:** Sequential (`compute_test_mode`) for dependent plans; Parallel (`compute_parallel`) for independent plans.
*   **Resources:** Single (`compute_plan`) or Sequential for limited hardware; Parallel for multi-core systems.
*   **Speed:** Parallel is usually fastest overall for multiple plans; Single is fastest for one specific plan.
*   **Debugging:** Single or Sequential are often easier to debug.
*   **Isolation:** `compute_test_mode` and `compute_parallel` (with `dest_folder`) provide isolated run environments.

#### Return Values

*   `compute_plan()`: Returns `bool` (success/failure).
*   `compute_test_mode()`: Returns `Dict[str, bool]` mapping plan number to success status.
*   `compute_parallel()`: Returns `Dict[str, bool]` mapping plan number to success status.

```python
# Example checking results from parallel run
results = RasCmdr.compute_parallel(plan_number=["01", "02", "03"])
for plan_num, success in results.items():
    print(f"Plan {plan_num}: {'Success' if success else 'Failed'}")
    if not success:
        print(f"  Check logs related to plan {plan_num} execution.")
```

### Plan Parameter Operations (`RasPlan`)

Modify plan file (`.p*`) settings programmatically without the HEC-RAS GUI.

#### Retrieving Plan Values (`get_plan_value`)

Read specific parameters directly from a plan file.

```python
from ras_commander import RasPlan, init_ras_project

init_ras_project("/path/to/project", "6.5")

# Get the computation interval for plan 01
interval = RasPlan.get_plan_value("01", "Computation Interval")
print(f"Plan 01 Computation Interval: {interval}")

# Get the number of cores assigned (0 means 'all available')
cores = RasPlan.get_plan_value("01", "UNET D2 Cores") # For 2D cores
print(f"Plan 01 UNET D2 Cores setting: {cores}")

# Get the associated geometry file number
geom_file_str = RasPlan.get_plan_value("01", "Geom File") # Returns e.g., "g01"
geom_num = geom_file_str[1:] if geom_file_str else "N/A"
print(f"Plan 01 uses Geometry: {geom_num}")
```

Common keys include: `Computation Interval`, `Short Identifier`, `Simulation Date`, `UNET D1 Cores`, `UNET D2 Cores`, `Plan Title`, `Geom File`, `Flow File` (or `Unsteady File`), `Friction Slope Method`, `Run HTab`, `UNET Use Existing IB Tables`.

#### Updating Run Flags (`update_run_flags`)

Control which simulation components HEC-RAS executes.

```python
from ras_commander import RasPlan, init_ras_project

init_ras_project("/path/to/project", "6.5")

# Example: Enable geometry preprocessing and unsteady sim, disable others
RasPlan.update_run_flags(
    "01",
    geometry_preprocessor=True,    # Run HTab = 1
    unsteady_flow_simulation=True, # Run UNet = 1
    post_processor=False,          # Run PostProcess = 0
    floodplain_mapping=False       # Run RASMapper = -1 (Note: False maps to -1 for RASMapper)
)
print("Updated run flags for plan 01.")
```

#### Setting Time Intervals (`update_plan_intervals`)

Modify simulation time steps and output frequencies.

```python
from ras_commander import RasPlan, init_ras_project

init_ras_project("/path/to/project", "6.5")

# Set computation to 10 sec, output to 1 min, mapping to 15 min
RasPlan.update_plan_intervals(
    "01",
    computation_interval="10SEC",
    output_interval="1MIN",
    mapping_interval="15MIN"
    # instantaneous_interval="1HOUR" # Also available
)
print("Updated time intervals for plan 01.")
```

Valid interval values (must match HEC-RAS exactly): `1SEC`..`30SEC`, `1MIN`..`30MIN`, `1HOUR`..`12HOUR`, `1DAY`.

#### Working with Simulation Dates (`update_simulation_date`)

Change the simulation window (start and end times).

```python
from ras_commander import RasPlan, init_ras_project
from datetime import datetime

init_ras_project("/path/to/project", "6.5")

start_dt = datetime(2024, 1, 1, 12, 0) # Jan 1, 2024, 12:00 PM
end_dt = datetime(2024, 1, 5, 0, 0)   # Jan 5, 2024, 00:00 AM

RasPlan.update_simulation_date("01", start_date=start_dt, end_date=end_dt)
print(f"Updated simulation dates for plan 01 to {start_dt} - {end_dt}.")
```

Ensure the simulation window covers your boundary condition data and includes appropriate warm-up/cool-down periods.

#### Managing Plan Descriptions (`read_plan_description`, `update_plan_description`)

Read or modify the multi-line description block in the plan file.

```python
from ras_commander import RasPlan, init_ras_project

init_ras_project("/path/to/project", "6.5")

# Read current description
current_desc = RasPlan.read_plan_description("01")
print(f"Current description for plan 01:\n{current_desc}\n-----------------")

# Update the description
new_desc = f"""
Run Date: {datetime.now().strftime('%Y-%m-%d')}
Scenario: Test with updated Manning's values.
Source Geometry: g02
Source Flow: u03
Notes: Increased roughness in floodplain by 15%.
"""
RasPlan.update_plan_description("01", new_desc)
print("Updated description for plan 01.")
```

#### Core Allocation (`set_num_cores`)

Configure the number of processor cores a plan should use (sets `UNET D1 Cores`, `UNET D2 Cores`, `PS Cores` simultaneously).

```python
from ras_commander import RasPlan, init_ras_project

init_ras_project("/path/to/project", "6.5")

# Set plan 01 to use 4 cores
RasPlan.set_num_cores("01", 4)
print("Set plan 01 to use 4 cores.")

# Set plan 02 to use all available cores (value 0)
RasPlan.set_num_cores("02", 0)
print("Set plan 02 to use all available cores.")
```

Consider system resources. 2-8 cores are typically effective. Using too many can decrease performance.

### Performance Optimization

Strategies to improve execution speed and resource usage.

1.  **Parallel Execution (`RasCmdr.compute_parallel`)**:
    *   Run independent plans simultaneously.
    *   Balance `max_workers` and `num_cores` based on CPU/RAM.
    ```python
    # Example: 8 physical cores, run 4 plans in parallel, 2 cores each
    RasCmdr.compute_parallel(plan_number=["01", "02", "03", "04"], max_workers=4, num_cores=2)
    ```

2.  **Optimized Geometry Preprocessing**:
    *   Avoid redundant calculations if multiple plans use the same geometry. Preprocess once, then run simulations.
    ```python
    from ras_commander import RasPlan, RasCmdr, init_ras_project

    init_ras_project("/path/to/project", "6.5")
    plan_to_preprocess = "01" # Plan using the geometry to preprocess
    geom_file_to_use = RasPlan.get_plan_value(plan_to_preprocess, "Geom File") # e.g., "g01"

    # Step 1: Force geometry preprocessing for the target geometry via one plan
    print(f"Preprocessing geometry {geom_file_to_use} using plan {plan_to_preprocess}...")
    RasPlan.update_run_flags(
        plan_to_preprocess,
        geometry_preprocessor=True,    # Run HTab = 1
        unsteady_flow_simulation=False # Run UNet = 0 (or -1 if available)
        # Set other flags as needed (e.g., post_processor=False)
    )
    RasCmdr.compute_plan(plan_to_preprocess) # This run primarily generates .c* files

    # Step 2: Run actual simulations using the preprocessed geometry
    plans_using_geom = ["01", "03", "05"] # Plans that use the same geometry
    for plan_num in plans_using_geom:
        print(f"Running simulation for plan {plan_num} using preprocessed geometry...")
        RasPlan.update_run_flags(
            plan_num,
            geometry_preprocessor=False,   # Run HTab = 0 (use existing tables)
            unsteady_flow_simulation=True  # Run UNet = 1
            # Set other flags as needed
        )
        # Run the plan (can be single, parallel, or test mode)
        RasCmdr.compute_plan(plan_num)
    ```

3.  **Memory Management (Large Datasets)**:
    *   When reading large HDF results (especially 2D time series), process data in chunks if memory becomes an issue. `xarray` (returned by `get_mesh_timeseries`) supports lazy loading and chunking.
    ```python
    import xarray as xr
    # ws_timeseries = HdfResultsMesh.get_mesh_timeseries(...)
    # If ws_timeseries is too large:
    # ws_chunked = ws_timeseries.chunk({'time': 100, 'cell_id': 10000}) # Example chunking
    # result = ws_chunked.mean(dim='cell_id').compute() # Perform computation
    ```

4.  **I/O Optimization**:
    *   Minimize repeated file opening/closing when reading multiple datasets from the *same* HDF file. Open it once with `h5py.File`.
    ```python
    import h5py
    from ras_commander import HdfBase, HdfResultsMesh # ... and other Hdf classes

    hdf_path = "/path/to/results.p01.hdf"
    try:
        with h5py.File(hdf_path, 'r') as hdf_file:
            # Perform multiple reads within this block
            start_time = HdfBase.get_simulation_start_time(hdf_file)
            timestamps = HdfBase.get_unsteady_timestamps(hdf_file)
            # summary_ws = HdfResultsMesh.get_mesh_summary_output(hdf_file, "Maximum Water Surface") # Requires adapting func to take h5py.File
            print(f"Start time: {start_time}, Found {len(timestamps)} timestamps.")
            # ... more operations using the open hdf_file
    except Exception as e:
        print(f"Error accessing HDF file {hdf_path}: {e}")
    ```
    *(Note: Most `Hdf*` methods currently use `@standardize_input` which handles file opening/closing internally. Adapting them to accept open `h5py.File` objects might be needed for extreme I/O optimization).*

5.  **Profiling**:
    *   Use Python's `cProfile` to identify bottlenecks in your scripts.
    ```python
    import cProfile
    from ras_commander import RasCmdr, init_ras_project

    init_ras_project("/path/to/project", "6.5")
    # Profile a specific function call
    # cProfile.run('RasCmdr.compute_plan("01", num_cores=2)')
    ```

### Working with Boundary Conditions (`RasPrj.boundaries_df`)

Access and analyze boundary conditions extracted from unsteady flow files.

1.  **Accessing Boundary Conditions**:
    The `boundaries_df` attribute holds the parsed data.
    ```python
    from ras_commander import init_ras_project, ras

    init_ras_project("/path/to/project", "6.5")
    boundary_conditions = ras.boundaries_df
    if boundary_conditions is not None and not boundary_conditions.empty:
        print(f"Found {len(boundary_conditions)} boundary conditions:")
        print(boundary_conditions.head())
    else:
        print("No boundary conditions found or project not initialized correctly.")
    ```

2.  **Filtering Boundary Conditions**:
    Use standard pandas filtering.
    ```python
    if boundary_conditions is not None and not boundary_conditions.empty:
        # Get all flow hydrographs
        flow_hydrographs = boundary_conditions[boundary_conditions['bc_type'] == 'Flow Hydrograph']
        print(f"\nFlow Hydrographs:\n{flow_hydrographs[['river_reach_name', 'river_station', 'hydrograph_num_values']]}")

        # Get boundary conditions for a specific river/reach
        # main_river_boundaries = boundary_conditions[boundary_conditions['river_reach_name'] == 'Main River']
    ```

3.  **Analyzing Boundary Condition Data**:
    Access columns for details. Hydrograph values are often stored as strings or lists.
    ```python
    if 'flow_hydrographs' in locals() and not flow_hydrographs.empty:
        for index, bc in flow_hydrographs.iterrows():
            print(f"\n--- BC {index} ---")
            print(f"  Location: {bc['river_reach_name']} @ RS {bc['river_station']}")
            print(f"  Num Values: {bc['hydrograph_num_values']}")
            # Note: 'hydrograph_values' might be a list of strings or numbers depending on parsing
            # print(f"  Values (first 5): {bc.get('hydrograph_values', [])[:5]}")
    ```

4.  **Modifying Boundary Conditions**:
    *Direct modification via the library is generally NOT supported.* The `boundaries_df` is read-only representation. Modifying boundary conditions typically requires:
    *   Using `RasUnsteady` functions (`extract_tables`, `write_table_to_file`) to modify numeric tables.
    *   Manually editing the `.u*` files for structural changes.
    *   Creating custom functions to parse/rewrite specific parts of the `.u*` file.

5.  **Visualizing Boundary Conditions**:
    Use pandas and matplotlib with the extracted table data.
    ```python
    from ras_commander import RasUnsteady # Needed for table extraction
    import matplotlib.pyplot as plt

    if 'flow_hydrographs' in locals() and not flow_hydrographs.empty:
        # Example for the first flow hydrograph found
        first_flow_bc = flow_hydrographs.iloc[0]
        unsteady_file_path = first_flow_bc['full_path'] # Get path from merged df
        
        # Extract tables for this unsteady file
        tables = RasUnsteady.extract_tables(unsteady_file_path)
        
        # Find the correct table (assuming one flow hydrograph per location)
        flow_table_name = 'Flow Hydrograph='
        if flow_table_name in tables:
            flow_data = tables[flow_table_name]
            
            # Need time interval to create time axis (get from boundary_df or parse file)
            interval_str = first_flow_bc.get('Interval', '1HOUR') # Example: Get interval
            # Convert interval_str to timedelta (requires parsing logic, simplified here)
            # time_delta = pd.Timedelta(interval_str) # Simplistic example
            # time_axis = [i * time_delta for i in range(len(flow_data))]

            plt.figure(figsize=(10, 5))
            plt.plot(flow_data['Value']) # Plot against index if time axis is complex
            plt.title(f"Flow Hydrograph: {first_flow_bc['river_reach_name']} RS {first_flow_bc['river_station']}")
            plt.xlabel("Time Step Index")
            plt.ylabel("Flow")
            plt.grid(True)
            plt.show()
        else:
            print(f"Could not find table '{flow_table_name}' in {unsteady_file_path}")

    ```

### Advanced Data Processing with RasUtils

`RasUtils` provides tools beyond basic file operations.

1.  **Data Conversion (`convert_to_dataframe`)**:
    Load data from various file types into pandas DataFrames.
    ```python
    from ras_commander import RasUtils
    from pathlib import Path

    try:
        csv_df = RasUtils.convert_to_dataframe(Path("results.csv"))
        excel_df = RasUtils.convert_to_dataframe(Path("data.xlsx"), sheet_name="Sheet1")
        print("DataFrames loaded successfully.")
    except FileNotFoundError:
        print("Input file not found.")
    except NotImplementedError as e:
        print(f"Error: {e}")
    ```

2.  **Statistical Analysis (Error Metrics)**:
    Calculate common metrics for model calibration/validation.
    ```python
    from ras_commander import RasUtils
    import numpy as np

    observed = np.array([100, 120, 140, 160, 180])
    predicted = np.array([105, 125, 135, 165, 175])

    rmse = RasUtils.calculate_rmse(observed, predicted, normalized=False)
    percent_bias = RasUtils.calculate_percent_bias(observed, predicted, as_percentage=True)
    metrics = RasUtils.calculate_error_metrics(observed, predicted)

    print(f"RMSE: {rmse:.2f}")
    print(f"Percent Bias: {percent_bias:.2f}%")
    print(f"All Metrics: {metrics}")
    ```

3.  **Spatial Operations (KDTree)**:
    Perform nearest neighbor searches efficiently.
    ```python
    from ras_commander import RasUtils
    import numpy as np

    # Find nearest point in 'points' for each point in 'query_points' within 5 units
    points = np.array([[0, 0], [1, 1], [2, 2], [10, 10]])
    query_points = np.array([[0.5, 0.5], [5, 5], [9, 9]])
    nearest_indices = RasUtils.perform_kdtree_query(points, query_points, max_distance=5.0)
    # Returns indices from 'points': e.g., [1, -1, 3] (-1 if no point within max_distance)
    print(f"Nearest point indices: {nearest_indices}")

    # Find nearest neighbor within the 'points' dataset itself (excluding self)
    # neighbors_indices = RasUtils.find_nearest_neighbors(points, max_distance=3.0)
    # print(f"Nearest neighbor indices within dataset: {neighbors_indices}")
    ```

4.  **Data Consolidation (`consolidate_dataframe`)**:
    Group and aggregate DataFrame rows, often merging values into lists.
    ```python
    from ras_commander import RasUtils
    import pandas as pd

    df = pd.DataFrame({'Group': ['A', 'A', 'B', 'B', 'A'],
                       'Value': [10, 20, 30, 40, 50],
                       'Type': ['X', 'Y', 'X', 'Y', 'X']})

    # Consolidate by 'Group', merging 'Value' and 'Type' into lists
    consolidated = RasUtils.consolidate_dataframe(df, group_by='Group', aggregation_method='list')
    print("Consolidated DataFrame:")
    print(consolidated)
    # Output might look like:
    #              Value       Type
    # Group
    # A      [10, 20, 50]  [X, Y, X]
    # B          [30, 40]     [X, Y]
    ```

### Optimizing Parallel Execution (`RasCmdr.compute_parallel`)

Fine-tune parallel runs based on goals and resources.

#### Strategy 1: Efficiency (Maximize Throughput)

Use fewer cores per worker to run more workers simultaneously (if RAM allows). Good for many small/medium independent plans.

```python
from ras_commander import RasCmdr
import psutil

physical_cores = psutil.cpu_count(logical=False)
cores_per_worker = 2 # Minimal cores per HEC-RAS instance
max_workers = max(1, physical_cores // cores_per_worker)
# Check available RAM and potentially reduce max_workers if needed

print(f"Efficiency Mode: Running up to {max_workers} workers with {cores_per_worker} cores each.")
RasCmdr.compute_parallel(
    plan_number=["01", "02", "03", "04", "05", "06"], # Example plans
    max_workers=max_workers,
    num_cores=cores_per_worker
)
```

#### Strategy 2: Performance (Minimize Single Plan Runtime)

Assign more cores per worker, reducing the number of concurrent workers. Good if individual plan speed is critical or for few, large plans.

```python
from ras_commander import RasCmdr
import psutil

physical_cores = psutil.cpu_count(logical=False)
cores_per_worker = max(4, min(8, physical_cores // 2)) # Use 4-8 cores, but not more than half the system
max_workers = max(1, physical_cores // cores_per_worker)

print(f"Performance Mode: Running up to {max_workers} workers with {cores_per_worker} cores each.")
RasCmdr.compute_parallel(
    plan_number=["LargePlan01", "LargePlan02"], # Example large plans
    max_workers=max_workers,
    num_cores=cores_per_worker
)
```

#### Strategy 3: Background Run (Balanced)

Limit total core usage to leave resources free for other tasks.

```python
from ras_commander import RasCmdr
import psutil

physical_cores = psutil.cpu_count(logical=False)
max_total_cores = int(physical_cores * 0.75) # Use up to 75% of physical cores
cores_per_worker = 2
max_workers = max(1, max_total_cores // cores_per_worker)

print(f"Background Mode: Running up to {max_workers} workers, using max {max_total_cores} total cores.")
RasCmdr.compute_parallel(
    max_workers=max_workers,
    num_cores=cores_per_worker
)
```

#### Optimizing Geometry Preprocessing in Parallel Runs

If many plans share the same geometry, preprocess it *once* before the parallel run, then run the parallel simulations without geometry preprocessing.

1.  **Preprocess Geometry (Single Run)**:
    ```python
    from ras_commander import RasPlan, RasCmdr, init_ras_project

    init_ras_project("/path/to/project", "6.5")
    plan_for_preprocessing = "01" # Choose one plan that uses the target geometry

    print("Preprocessing geometry...")
    RasPlan.update_run_flags(
        plan_for_preprocessing,
        geometry_preprocessor=True,
        unsteady_flow_simulation=False # Don't run the full simulation yet
    )
    RasCmdr.compute_plan(plan_for_preprocessing)
    print("Geometry preprocessing complete.")
    ```

2.  **Run Parallel Simulations (Without Preprocessing)**:
    ```python
    plans_to_run = ["01", "03", "05"] # Plans sharing the preprocessed geometry

    print("Running parallel simulations without geometry preprocessing...")
    RasCmdr.compute_parallel(
        plan_number=plans_to_run,
        max_workers=3,
        num_cores=2,
        clear_geompre=False # Important: Don't clear the files we just created
        # Ensure update_run_flags is set correctly *inside* compute_parallel
        # if needed, or ensure plans are pre-configured correctly.
        # Best practice: Ensure plans are saved with Run HTab = 0 before parallel run.
    )
    print("Parallel simulations complete.")
    ```
    *Self-Correction:* `compute_parallel` doesn't directly take `update_run_flags`. The flags should be set *before* calling `compute_parallel`. It might be better to modify the *template* plans to have `Run HTab=0` before the parallel run, or modify them in the worker folders (more complex). The easiest is often to ensure the `.p*` files are saved correctly beforehand.


### Working with RASMapper Data

RAS Commander now provides access to RASMapper configuration data through the `rasmap_df` attribute of the `RasPrj` class, which is initialized automatically when a project is loaded. This enables integration with spatial datasets referenced in RASMapper.

When you run init_ras_project, rasmap_df is populated with data from the project's .rasmap file

The `rasmap_df` contains paths to:
- Terrain data (DEM)
- Soil layers (Hydrologic Soil Groups)  
- Land cover datasets
- Infiltration data
- Profile lines and other features
- Project settings and current visualization state

This allows programmatic access to the same spatial data being used in RASMapper visualizations.

### Modifying Manning's n Values

RAS Commander provides functions for reading and writing Manning's n values in geometry files through the `RasGeo` class. This allows automation of roughness coefficient adjustments for calibration and sensitivity analysis.

```python
from ras_commander import RasGeo, RasPlan, init_ras_project

init_ras_project("/path/to/project", "6.5")

# Get the geometry file path
geom_path = RasPlan.get_geom_path("01")

# Read base Manning's n values
mannings_df = RasGeo.get_mannings_baseoverrides(geom_path)
print(f"Current Manning's n values:\n{mannings_df}")

# Read region-specific Manning's n overrides
region_df = RasGeo.get_mannings_regionoverrides(geom_path)
print(f"Regional Manning's n overrides:\n{region_df}")

# Modify Manning's n values (example: increase all values by 20%)
mannings_df['Base Manning\'s n Value'] *= 1.2
RasGeo.set_mannings_baseoverrides(geom_path, mannings_df)
print("Updated Manning's n values in geometry file")

# Clear preprocessor files to ensure geometry changes take effect
RasGeo.clear_geompre_files()
```

Common applications include:
- Automated calibration workflows
- Sensitivity analysis by batch-modifying roughness values
- Scenario analysis using different roughness sets
- Seasonal roughness adjustments

### Advanced Infiltration Data Handling

The enhanced `HdfInfiltration` class provides comprehensive tools for working with soil and infiltration data in HEC-RAS projects.

```python
from ras_commander import HdfInfiltration, init_ras_project

init_ras_project("/path/to/project", "6.5")

# Get the infiltration layer HDF path from the RASMapper configuration
infiltration_path = ras.rasmap_df['infiltration_hdf_path'][0][0]

# Read current infiltration parameters
infil_df = HdfInfiltration.get_infiltration_baseoverrides(infiltration_path)
print(f"Current infiltration parameters:\n{infil_df}")

# Scale infiltration parameters
scale_factors = {
    'Maximum Deficit': 1.2,  # Increase by 20%
    'Initial Deficit': 1.0,  # No change
    'Potential Percolation Rate': 0.8  # Decrease by 20%
}
updated_df = HdfInfiltration.scale_infiltration_data(
    infiltration_path, infil_df, scale_factors
)
print("Updated infiltration parameters")

# Get infiltration map (raster value to mukey mapping)
infil_map = HdfInfiltration.get_infiltration_map()

# Calculate weighted parameters based on soil coverage
significant_soils = HdfInfiltration.get_significant_mukeys(soil_stats, threshold=1.0)
weighted_params = HdfInfiltration.calculate_weighted_parameters(
    significant_soils, infiltration_params
)
print(f"Weighted infiltration parameters:\n{weighted_params}")
```

Key capabilities include:
- Retrieving and modifying infiltration parameters
- Scaling parameter values for sensitivity analysis
- Calculating soil statistics from raster data
- Computing area-weighted infiltration parameters
- Extracting and analyzing soil map unit data


## Approaching Your End User Needs with Ras Commander

### Understanding Data Sources and Strategies

RAS Commander interacts primarily with HEC-RAS project definition files (ASCII text: `.prj`, `.p*`, `.g*`, `.u*`, `.f*`) and HDF output files (`.hdf`), aiming for accessibility and automation without needing the complexities of the HEC-RAS GUI or DSS manipulation.

1.  **Data Sources in HEC-RAS Projects**:
    *   ASCII input files (plans, unsteady flows, geometry definitions, project structure).
    *   DSS (Data Storage System) files (often used for time-series inputs like hydrographs, observed data).
    *   HDF (Hierarchical Data Format) files (contain detailed geometry tables and simulation results).

2.  **RAS Commander's Focus**:
    *   **Reading/Writing ASCII:** Parses `.prj` for structure. Reads/writes parameters in `.p*`, `.u*`, `.g*` files using `RasPlan`, `RasUnsteady`, `RasGeo`.
    *   **Reading HDF:** Extensive capabilities to read geometry and results from `.g*.hdf` and `.p*.hdf` files using `Hdf*` classes.
    *   **Avoiding Direct DSS Manipulation:** The library generally avoids reading from or writing to DSS files directly due to their binary format complexity and reliance on HEC libraries.

3.  **Strategy for Handling DSS Inputs**:
    *   **Option 1 (Recommended): Define Time Series in ASCII:** Instead of referencing DSS paths in your unsteady flow file (`.u*`), define hydrographs directly within the file using the fixed-width table format. You can use `RasUnsteady.extract_tables` to read existing tables and `RasUnsteady.write_table_to_file` to write modified/new ones.
    *   **Option 2 (Workaround): Read DSS Data via HDF:** If a simulation *using* DSS inputs has already been run, the HDF results file often contains the time-series data that was originally sourced from DSS (e.g., boundary condition flows). You can extract this from the HDF using `ras_commander` (e.g., via `HdfResultsXsec`) and potentially use it to construct ASCII tables for future runs.

4.  **Accessing Project Data**:
    *   **Project Structure:** `ras.plan_df`, `ras.geom_df`, `ras.flow_df`, `ras.unsteady_df` provide DataFrames parsed from the `.prj` file and associated plan/unsteady files.
    *   **Plan/Unsteady Parameters:** Use `RasPlan.get_plan_value` or read specific lines via `RasPlan`/`RasUnsteady` functions. Modify using `set_`/`update_` functions.
    *   **Geometry Data:** Detailed geometry (mesh, cross-sections, structures) is best accessed from the HDF geometry file (`.g*.hdf`) using `HdfMesh`, `HdfXsec`, `HdfStruc`, `HdfPipe`, `HdfPump`.
    *   **Results Data:** Simulation outputs are read from the HDF results file (`.p*.hdf`) using `HdfResultsMesh`, `HdfResultsPlan`, `HdfResultsXsec`, etc.
    *   **Boundary Conditions:** Parsed summary and table data available in `ras.boundaries_df` and via `RasUnsteady.extract_tables`.

### Working with RAS Commander

1.  **Initialization**: Start with `init_ras_project()` to load the project structure into a `RasPrj` object (usually the global `ras`).
2.  **Inspection**: Use the `.df` attributes (`ras.plan_df`, etc.) and `get_*_entries()` methods to understand the project components.
3.  **Modification**: Use `RasPlan`, `RasUnsteady`, `RasGeo` methods to change parameters, clone components, or update file references. Remember these often refresh the `ras` object's DataFrames.
4.  **Execution**: Use `RasCmdr` methods (`compute_plan`, `compute_parallel`, `compute_test_mode`) to run simulations.
5.  **Results Analysis**: After successful computation, use `Hdf*` classes to read geometry and results data from the relevant `.hdf` files (geometry or plan results). Use `RasPlan.get_results_path()` to find the results HDF.

### Example Workflow: Modifying and Running a Boundary Condition

```python
from ras_commander import (
    init_ras_project, ras, RasPlan, RasUnsteady, RasCmdr, HdfResultsXsec
)
import pandas as pd

# 1. Initialize Project
init_ras_project("/path/to/project", "6.5")

# 2. Identify and Clone Components
template_plan = "01"
template_unsteady = ras.plan_df.loc[ras.plan_df['plan_number'] == template_plan, 'unsteady_number'].iloc[0]

new_plan_num = RasPlan.clone_plan(template_plan, new_plan_shortid="Scaled_Flow_Test")
new_unsteady_num = RasPlan.clone_unsteady(template_unsteady)

# 3. Link Cloned Components
RasPlan.set_unsteady(new_plan_num, new_unsteady_num) # Link new unsteady to new plan
print(f"Plan {new_plan_num} created, using Unsteady {new_unsteady_num}")

# 4. Modify Unsteady Flow Data
new_unsteady_path = RasPlan.get_unsteady_path(new_unsteady_num)

# Find the flow hydrograph table within the new unsteady file
try:
    with open(new_unsteady_path, 'r') as f:
        lines = f.readlines()
    tables_info = RasUnsteady.identify_tables(lines)
    
    flow_table_info = None
    for name, start, end in tables_info:
        if "Flow Hydrograph" in name:
            flow_table_info = (name, start, end)
            break
            
    if not flow_table_info:
        raise ValueError("Flow Hydrograph table not found in unsteady file.")

    flow_table_name, flow_start_line, flow_end_line = flow_table_info
    
    # Parse the table
    flow_df = RasUnsteady.parse_fixed_width_table(lines, flow_start_line, flow_end_line)
    
    # Modify the values (e.g., scale by 1.2)
    flow_df['Value'] = flow_df['Value'] * 1.2
    print(f"Scaled {len(flow_df)} flow values by 1.2")
    
    # Write the modified table back
    RasUnsteady.write_table_to_file(new_unsteady_path, flow_table_name, flow_df, flow_start_line)
    print("Modified unsteady flow file saved.")

except Exception as e:
    print(f"Error modifying unsteady file: {e}")
    # Handle error exit

# 5. Execute the Modified Plan
print(f"Running plan {new_plan_num}...")
success = RasCmdr.compute_plan(new_plan_num, num_cores=2)

# 6. Analyze Results (if successful)
if success:
    print("Computation successful. Analyzing results...")
    hdf_path = RasPlan.get_results_path(new_plan_num)
    if hdf_path:
        xsec_results = HdfResultsXsec.get_xsec_timeseries(hdf_path)
        max_flow = xsec_results['Maximum_Flow'].max().item() # Get overall max flow from results
        print(f"Overall maximum cross-section flow in results: {max_flow:.2f}")
    else:
        print("Could not find HDF results file.")
else:
    print("Computation failed.")

```

### Best Practices for Workflow Development

1.  **Understand Your Data**: Know where key information resides (ASCII vs. HDF) and how HEC-RAS uses it.
2.  **Leverage HDF**: Use the `Hdf*` classes for reading detailed geometry and results – it's often easier than parsing ASCII geometry or complex results formats.
3.  **Iterate**: Start simple. Manually perform a step in HEC-RAS, understand the file changes, then automate that step using `ras_commander`. Verify with the GUI.
4.  **Isolate Runs**: Use `dest_folder` in `RasCmdr` functions or `compute_test_mode` to avoid modifying your original project during testing and development.
5.  **Log Extensively**: Use `logger.info()`, `logger.debug()`, etc., in your scripts to track progress and diagnose issues. Configure logging levels appropriately.
6.  **Use AI Assistance**: Leverage the AI-friendly structure. Provide relevant code snippets, this guide, or specific examples to an AI assistant (like ChatGPT, Claude) to help generate code for your specific tasks using the `ras_commander` API.

By following these strategies, you can effectively use `ras_commander` to automate complex HEC-RAS workflows, even navigating around limitations like direct DSS interaction by focusing on ASCII parameter files and HDF data extraction.

## RAS-Commander Dataframe Examples

After initializing a HEC-RAS project with `init_ras_project()`, `ras_commander` provides several pandas DataFrames accessible via the `RasPrj` object (e.g., `ras.plan_df`) to inspect the project's structure and components.

### Project Information

Basic info stored directly on the `RasPrj` object:

```python
from ras_commander import ras, init_ras_project
init_ras_project(r"C:\path\to\your\Muncie_Project", "6.5") # Example path

print(f"Project Name: {ras.project_name}")
print(f"Project Folder: {ras.project_folder}")
print(f"PRJ File: {ras.prj_file}")
print(f"HEC-RAS Executable Path: {ras.ras_exe_path}")
```
*Example output:*
```
Project Name: Muncie
Project Folder: C:\path\to\your\Muncie_Project
PRJ File: C:\path\to\your\Muncie_Project\Muncie.prj
HEC-RAS Executable Path: C:\Program Files (x86)\HEC\HEC-RAS\6.5\Ras.exe
```

### Plan Files DataFrame (`ras.plan_df`)

Contains information parsed from the `.prj` file and individual `.p*` files about each plan.

```python
print(f"\nPlan Files DataFrame ({len(ras.plan_df)} plans):")
display(ras.plan_df) # Use display() in notebooks for better formatting
```

*Key columns include:*
*   `plan_number`: Plan identifier ("01", "02", ...).
*   `full_path`: Path to the `.p*` file.
*   `Short Identifier`: User-defined short name.
*   `Plan Title`: User-defined full title.
*   `Geom File`: Geometry file number used (`gXX`).
*   `Flow File`: Flow file number used (`fXX` or `uXX`).
*   `unsteady_number`: Unsteady flow number if used (`uXX`), else `None`.
*   `geometry_number`: Geometry number used (`gXX`).
*   `Simulation Date`: Start/end dates/times string.
*   `Computation Interval`: Time step (e.g., "2MIN").
*   `Run HTab`, `Run UNet`, etc.: Run flags (parsed value).
*   `UNET D1 Cores`, `UNET D2 Cores`: Core settings (parsed integer).
*   `HDF_Results_Path`: Path to `.p*.hdf` results file, if it exists.
*   `Geom Path`, `Flow Path`: Calculated paths to associated geometry and flow files.

*(See original guide for example table structure)*

### Flow Files DataFrame (`ras.flow_df`)

Lists steady flow files (`.f*`) found in the `.prj` file.

```python
print(f"\nSteady Flow Files DataFrame ({len(ras.flow_df)} files):")
display(ras.flow_df)
```
*Key columns:*
*   `flow_number`: Flow file identifier ("01", "02", ...).
*   `full_path`: Path to the `.f*` file.

*(See original guide for example table structure)*

### Unsteady Flow Files DataFrame (`ras.unsteady_df`)

Lists unsteady flow files (`.u*`) found in the `.prj` file, with metadata parsed from the files.

```python
print(f"\nUnsteady Flow Files DataFrame ({len(ras.unsteady_df)} files):")
display(ras.unsteady_df)
```
*Key columns:*
*   `unsteady_number`: Unsteady file identifier ("01", "02", ...).
*   `full_path`: Path to the `.u*` file.
*   `Flow Title`: Title parsed from the `.u*` file.
*   `Program Version`: Version parsed from the `.u*` file.
*   `Use Restart`: Restart flag parsed from the `.u*` file.
*   Other parsed metadata (Precipitation, Wind modes etc.).

*(See original guide for example table structure)*

### Geometry Files DataFrame (`ras.geom_df`)

Lists geometry files (`.g*`) found in the `.prj` file.

```python
print(f"\nGeometry Files DataFrame ({len(ras.geom_df)} files):")
display(ras.geom_df)
```
*Key columns:*
*   `geom_number`: Geometry file identifier ("01", "02", ...).
*   `full_path`: Path to the `.g*` file.
*   `geom_file`: Base name (`gXX`).
*   `hdf_path`: Calculated path to the corresponding geometry HDF file (`.g*.hdf`).

*(See original guide for example table structure)*

### HDF Entries DataFrame (`ras.get_hdf_entries()`)

Filters `plan_df` to show only plans where the HDF results file exists.

```python
hdf_entries_df = ras.get_hdf_entries()
print(f"\nHDF Entries DataFrame ({len(hdf_entries_df)} plans with results):")
display(hdf_entries_df)
```
*Structure:* Same columns as `plan_df`, but only includes rows where `HDF_Results_Path` points to an existing file.

*(See original guide for example table structure)*

### Boundary Conditions DataFrame (`ras.boundaries_df`)

Detailed information about boundary conditions parsed from *all* unsteady flow files (`.u*`) in the project.

```python
print(f"\nBoundary Conditions DataFrame ({len(ras.boundaries_df)} conditions):")
display(ras.boundaries_df)
```
*Key columns include:*
*   `unsteady_number`: Links to the `.u*` file.
*   `boundary_condition_number`: Sequential ID within the unsteady file.
*   `river_reach_name`, `river_station`: Location (for river boundaries).
*   `storage_area_name`, `pump_station_name`: Location (for SA/Pump boundaries).
*   `bc_type`: Type of boundary (e.g., "Flow Hydrograph", "Normal Depth", "Gate Opening").
*   `hydrograph_type`: Specific type if it's a hydrograph.
*   `Interval`: Time interval for hydrograph data.
*   `hydrograph_num_values`: Number of points in the hydrograph table.
*   `hydrograph_values`: List of hydrograph values (often as strings or numbers).
*   Columns inherited from `unsteady_df` via merge (`Flow Title`, `Program Version`, etc.).

*(See original guide for example table structure)*

### Accessing and Using Dataframes

Use standard pandas operations to query and analyze this structured project data.

```python
import pandas as pd
# Assuming 'ras' is initialized

# Find all plans using geometry "01"
g01_plans = ras.plan_df[ras.plan_df['geometry_number'] == '01']
print(f"\nPlans using Geometry 01: {g01_plans['plan_number'].tolist()}")

# Get details for a specific plan
plan_02_details = ras.plan_df[ras.plan_df['plan_number'] == '02'].iloc[0]
print(f"\nDetails for Plan 02 - Short ID: {plan_02_details['Short Identifier']}")

# Count boundary conditions by type across the whole project
if ras.boundaries_df is not None and not ras.boundaries_df.empty:
    bc_counts = ras.boundaries_df['bc_type'].value_counts()
    print("\nBoundary Condition Counts:")
    print(bc_counts)
else:
    print("\nNo boundary conditions found in project.")

# Find unsteady files using a restart file
restart_files = ras.unsteady_df[ras.unsteady_df['Use Restart'] == 'True'] # Check actual parsed value
print(f"\nUnsteady files using restart: {restart_files['unsteady_number'].tolist()}")
```

These DataFrames provide a powerful way to programmatically understand and interact with the structure and components of your HEC-RAS projects.

## Conclusion

The RAS-Commander (`ras_commander`) library provides a robust and flexible Python interface for automating HEC-RAS workflows. By leveraging its classes and functions for project management, execution, file operations, and HDF data extraction, users can significantly streamline their modeling processes. Adhering to the best practices outlined in this guide, particularly regarding RAS object management, file handling, and error checking, will lead to more efficient and reliable automation scripts.

Remember to consult the specific docstrings of functions for detailed parameter information and refer to the library's source code for the most up-to-date implementation details.

For further assistance, bug reports, or feature requests, please refer to the library's [GitHub repository](https://github.com/billk-FM/ras-commander) and issue tracker.

**Happy Modeling!**


==================================================

Folder: c:\GH\ras-commander\examples
==================================================

File: c:\GH\ras-commander\LICENSE
==================================================
MIT License

Copyright (c) 2024 William M. Katzenmeyer

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so.

==================================================

File: c:\GH\ras-commander\pyproject.toml
==================================================
[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta:__legacy__"

==================================================

File: c:\GH\ras-commander\ras-commander_logo.svg
==================================================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 450 300">
  <!-- Background with gradient -->
  <defs>
    <linearGradient id="bg-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#05386B" />
      <stop offset="100%" stop-color="#0B93C7" />
    </linearGradient>
    
    <!-- Digital circuit pattern -->
    <pattern id="circuit-pattern" patternUnits="userSpaceOnUse" width="50" height="50" patternTransform="rotate(45)">
      <path d="M10,0 L10,50 M0,10 L50,10 M20,20 L30,20 L30,30 M40,10 L40,40 L30,40" fill="none" stroke="#5CDB95" stroke-width="0.5" stroke-opacity="0.3" />
    </pattern>
  </defs>
  
  <!-- Main background -->
  <rect width="450" height="300" fill="url(#bg-gradient)" />
  
  <!-- Circuit pattern overlay -->
  <rect width="450" height="300" fill="url(#circuit-pattern)" opacity="0.2" />
  
  <!-- Central circular emblem with horizontal rectangle overlay -->
  <circle cx="225" cy="150" r="100" fill="#05386B" stroke="#5CDB95" stroke-width="2" />
  <rect x="55" y="185" width="340" height="50" fill="#05386B" stroke="#5CDB95" stroke-width="2" rx="2" ry="2" />
  
  <!-- Command line prompt at top of circle -->
  <rect x="160" y="75" width="130" height="55" rx="5" ry="5" fill="#000" fill-opacity="0.85" />
  <text x="170" y="95" font-family="Consolas, monospace" font-size="16" fill="#5CDB95">$ pip install</text>
  <text x="170" y="120" font-family="Consolas, monospace" font-size="16" fill="#5CDB95">ras-commander</text>
  <rect x="170" y="125" width="8" height="2" fill="#5CDB95">
    <animate attributeName="opacity" values="1;0;1" dur="1.2s" repeatCount="indefinite" />
  </rect>
  
  <!-- Dynamic water wave bands - centered in circle -->
  <g opacity="0.7">
    <path d="M125,130 C145,120 165,140 185,130 C205,120 225,140 245,130 C265,120 285,140 325,130" fill="none" stroke="#5CDB95" stroke-width="4" />
    <path d="M125,150 C145,140 165,160 185,150 C205,140 225,160 245,150 C265,140 285,160 325,150" fill="none" stroke="#5CDB95" stroke-width="4" />
    <path d="M125,170 C145,160 165,180 185,170 C205,160 225,180 245,170 C265,160 285,180 325,170" fill="none" stroke="#5CDB95" stroke-width="4" />
  </g>
  
  <!-- Text elements - moved RAS-COMMANDER up, tagline below the circle -->
  <text x="225" y="222" font-family="Arial, sans-serif" font-size="36" font-weight="bold" text-anchor="middle" fill="#EDF5E1">RAS-COMMANDER</text>
  <text x="225" y="265" font-family="Arial, sans-serif" font-size="18" font-style="italic" text-anchor="middle" fill="#8EE4AF">Automate • Analyze • Visualize</text>
</svg>

==================================================

Folder: c:\GH\ras-commander\ras_commander
==================================================

File: c:\GH\ras-commander\README.md
==================================================
# RAS Commander (ras-commander)

<p align="center">
  <img src="ras-commander_logo.svg" width=70%>
</p>

RAS Commander is a Python library for automating HEC-RAS operations, providing a set of tools to interact with HEC-RAS project files, execute simulations, and manage project data. This library was initially conceptualized in the Australian Water School course "AI Tools for Modelling Innovation", and subsequently expanded to cover much of the basic functionality of the HECRASController COM32 interface using open-source python libraries.  This library uses a Test Driven Development strategy, leveraging the publicly-available HEC-RAS Example projects to create repeatable demonstration examples.  The "Commmander" moniker is inspired by the "Command Line is All You Need" approach to HEC-RAS automation that was first implemented in the HEC-Commander Tools repository. 

## Repository Author:
[William Katzenmeyer, P.E., C.F.M.](https://engineeringwithllms.info)
-----  

## Don't Ask Me, Ask GPT!

This repository has several methods of interaction with Large Language Models and LLM-Assisted Coding built right in: 

1. **[Purpose-Built Knowledge Base Summaries](https://github.com/gpt-cmdr/ras-commander/tree/main/ai_tools/llm_knowledge_bases)**: Up-to-date compilations of the documentation and codebase for use with large language models like Claude, ChatGPT, Gemini or Grok. Look in 'ai_tools/assistant_knowledge_bases/' in the repo.  The repo's codebase (without documentation and examples) has been curated to stay within the current ~200k context window limitations of frontier models, and for tasks that do not need an understanding of the underlying code, the Comprehensive Library Guide and any relevant examples from the example folder should be adequate context for leveraging the ras-commander API to complete tasks. 

2. **[Cursor IDE Integration](https://github.com/gpt-cmdr/ras-commander/blob/main/.cursorrules)**: Custom rules(.cursorrules) for the Cursor IDE to provide context-aware suggestions and documentation.  Just open the repository folder in Cursor to recognize these instructions.  You can create your own folders "/workspace/, "/projects/", or "my_projects/" as these are already in the .gitignore, and place your custom scripts there for your projects.  This will allow easy referencing of the ras-commander documents and individual repo files, the automatic loading of the .cursorrules file.  Alternatvely, download the github repo into your projects folder to easily load documents and use cursor rules files.

3. **[RAS-Commander Library Assistant](https://github.com/gpt-cmdr/ras-commander/blob/main/ai_tools/library_assistant/REAME.md)**:
  

<img align="left" width="25%" hspace="40" src="ai_tools/library_assistant/ras-commander_library_assistant.svg">

The RAS-Commander library Assistant is a full-featured interface for multi-turn conversations, using your own API keys and the ras-commander library for context. The library assistant allows you to load your own scripts and chat with specific examples and/or function classes in the RAS-Commander library to effectively utilize the library's functions in your workflow. To reduce hallucinations, a file browser is included which adds full files to the conversation to ensure grounded responses. A dashboard shows you the total context and estimated cost of each request. **Now with support for Claude 3.7, OpenAI's o1 and o3-mini, and Deepseek V3 and R1 models using US-based Together.ai, and available as a standalone windows executable that runs within the repository**


8. **[RAS Commander Library Assistant on ChatGPT](https://chatgpt.com/g/g-TZRPR3oAO-ras-commander-library-assistant)**: A specialized ChatGPT "GPT" with access to the ras-commander codebase and library, available for answering queries and providing code suggestions.   You can even upload your own plan, unsteady and HDF files to inspect and help determine how to automate your workflows or visualize your results.  _NOTE: GPT's are still quite limited by OpenAI's GPT frameworks and may not be useful for long conversations.  Code interpreter cannot run HEC-RAS but can [open and view smaller HDF files and projects for demonstration purposes](https://chatgpt.com/share/67e7cdb7-49e0-8010-bbac-61d2c54d473f)_


## Background
The ras-commander library emerged from the initial test-bed of AI-driven coding represented by the [HEC-Commander tools](https://github.com/gpt-cmdr/HEC-Commander) Python notebooks. These notebooks served as a proof of concept, demonstrating the value proposition of automating HEC-RAS operations. In 2024, I taught a series of progressively more complex webinars demonstrating how to use simple prompting, example projects and natural language instruction to effectively code HEC-RAS automation workflows, culminating in a 6 hour course.  The library published for utilization in that course, [awsrastools](https://github.com/gpt-cmdr/awsrastools) served as a foundation of examples which were iteratively extended into the full RAS-Commander library.  Unlike the original notebook by the same name, this library is not focused on parallel execution across multiple machines.  Instead, it is focused on providing a general-purpose python API for interacting with HEC-RAS projects, and building an AI-friendly library that will allow new users to quickly scaffold their own workflows into a python script. Example notebooks are provided, but the intention is to empower engineers, software developers, GIS personnel and data analysts to more easily access and interact with HEC-RAS data in a python environment.  Also, by publishing these examples publicly, with complete working code examples and LLM optimization, future users can readily rewrite they key functions of the library for inclusion in into their own preferred libraries, languages or return formats.

## Features

If you've ever read the book "Breaking the HEC-RAS Code" by Chris Goodell, this library is intended to be an AI-coded, pythonic library that provides a modern alternative to the HECRASController API.  By leveraginging modern python features libraries such as pandas, geopandas and H5Py (favoring HDF data sources wherever practicable) this library builds functionality around HEC-RAS 6.2+ while maintaining as much forward compatibilty as possible with HEC-RAS 2025.  

HEC-RAS Project Management & Execution
- Multi-project handling with parallel and sequential execution
- Command-line execution integration
- Project folder management and organization
- Multi-core processing optimization
- Progress tracking and logging
- Execution error handling and recovery

HDF Data Access & Analysis
- 2D mesh results processing (depths, velocities, WSE)
- Cross-section data extraction
- Boundary condition analysis
- Structure data (bridges, culverts, gates)
- Pipe network and pump station analysis
- Fluvial-pluvial boundary calculations
- Infiltration and precipitation data handling
- Infiltration and soil data handling
- Land cover and terrain data integration
- Weighted parameter calculations for hydrologic modeling

RASMapper Data Integration
- RASMapper configuration parsing (.rasmap files)
- Terrain, soil, and land cover HDF paths
- Profile line paths

Manning's n Coefficient Management
- Base Manning's n table extraction and modification
- Regional overrides for spatially-varied roughness
- Direct editing of geometry file Manning values

Infiltration & Soil Analysis
- Soil statistics calculation and analysis
- Infiltration parameter management and scaling
- Weighted average parameter calculation
- Raster-based soil data processing

RAS ASCII File Operations
- Plan file creation and modification
- Geometry file parsing examples 
- Unsteady flow file management
- Project file updates and validation  

Note about support for Pipe Networks:  As a relatively new feature, only read access to Pipe Network geometry and results data has been included.  Users will need to code their own methods to modify/add pipe network data, and pull requests are always welcome to incorporate this capability.  Please note that the library has not been tested with versions prior to HEC-RAS 6.2.

## Installation

First, create a virtual environment with conda or venv (ask ChatGPT if you need help).  

#### Install via Pip

In your virtual environment, install ras-commander using pip:
```
pip install --upgrade ras-commander
```
If you have dependency issues with pip (especially if you have errors with numpy), try clearing your local pip packages 'C:\Users\your_username\AppData\Roaming\Python\' and then creating a new virtual environment.  

Dependencies can also be manually installed: 
```
pip install h5py numpy pandas requests tqdm scipy xarray geopandas matplotlib shapely pathlib rasterstats rtree
```


#### Work in a Local Copy

If you want to make revisions and work actively in your local version of ras-commander, just skip the pip install rascommander step above and clone a fork of the repo to your local machine using Git (ask ChatGPT if you need help).  Most of the notebooks and examples in this repo have a code segment similar to the one below, that works as long as the script is located in a first-level subfolder of the ras-commander repository:
```
# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    # Alternately, you can just define a path sys.path.append(r"c:/path/to/rascommander/rascommander)")
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
```
It is highly suggested to fork this repository before going this route, and using Git to manage your changes!  This allows any revisions to the ras-commander classes and functions to be actively edited and developed by end users. The folders "/workspace/, "/projects/", or "my_projects/" are included in the .gitignore, so users can place you custom scripts there for any project data they don't want to be tracked by git.

## Quick Start Guide

```
from ras_commander import init_ras_project, RasCmdr, RasPlan
```

### Initialize a project (single project)
```
init_ras_project(r"/path/to/project", "6.5")
```

### Initialize a project (multiple projects)
```
your_ras_project = RasPrj()
init_ras_project(r"/path/to/project", "6.5", ras_object=your_ras_project)
```

## Accessing Plan, Unsteady and Boundary Conditions Dataframes
Using the default 'ras" object, othewise substitute your_ras_project for muli-project scripts
```
print("\nPlan Files DataFrame:")
ras.plan_df
```
```
print("\nFlow Files DataFrame:")
ras.flow_df
```
```
print("\nUnsteady Flow Files DataFrame:")
ras.unsteady_df
```
```
print("\nGeometry Files DataFrame:")
ras.geom_df
```
```
print("\nBoundary Conditions DataFrame:")
ras.boundaries_df
```
```
print("\nHDF Entries DataFrame:")
ras.get_hdf_entries()
```



### Execute a single plan
```
RasCmdr.compute_plan("01", dest_folder=r"/path/to/results", overwrite_dest=True)
```

### Execute plans in parallel
```
results = RasCmdr.compute_parallel(
    plan_number=["01", "02"],
    max_workers=2,
    num_cores=2,
    dest_folder=r"/path/to/results",
    overwrite_dest=True
)
```

### Modify a plan
```
RasPlan.set_geom("01", "02")
```

### Execution Modes

RAS Commander provides three methods for executing HEC-RAS plans:

#### Single Plan Execution
```python
# Execute a single plan
success = RasCmdr.compute_plan("01", dest_folder=r"/path/to/results")
print(f"Plan execution {'successful' if success else 'failed'}")
```

#### Sequential Execution of Multiple Plans
```python
# Execute multiple plans in sequence in a test folder
results = RasCmdr.compute_test_mode(
    plan_number=["01", "02", "03"],
    dest_folder_suffix="[Test]"
)
for plan, success in results.items():
    print(f"Plan {plan}: {'Successful' if success else 'Failed'}")
```

#### Parallel Execution of Multiple Plans
```python
# Execute multiple plans concurrently
results = RasCmdr.compute_parallel(
    plan_number=["01", "02", "03"],
    max_workers=3,
    num_cores=2
)
for plan, success in results.items():
    print(f"Plan {plan}: {'Successful' if success else 'Failed'}")
```

### Working with Multiple Projects

RAS Commander allows working with multiple HEC-RAS projects simultaneously:

```python
# Initialize multiple projects
project1 = RasPrj()
init_ras_project(path1, "6.6", ras_object=project1)
project2 = RasPrj()
init_ras_project(path2, "6.6", ras_object=project2)

# Perform operations on each project
RasCmdr.compute_plan("01", ras_object=project1, dest_folder=folder1)
RasCmdr.compute_plan("01", ras_object=project2, dest_folder=folder2)

# Compare results between projects
print(f"Project 1: {project1.project_name}")
print(f"Project 2: {project2.project_name}")

# Always specify the ras_object parameter when working with multiple projects
# to avoid confusion with the global 'ras' object
```

This is useful for comparing different river systems, running scenario analyses across multiple watersheds, or managing a suite of related models.

#### Core HEC-RAS Automation Classes

- `RasPrj`: Manages HEC-RAS projects, handling initialization and data loading
- `RasCmdr`: Handles execution of HEC-RAS simulations
- `RasPlan`: Provides functions for modifying and updating plan files
- `RasGeo`: Handles operations related to geometry files
- `RasUnsteady`: Manages unsteady flow file operations
- `RasUtils`: Contains utility functions for file operations and data management
- `RasMap`: Parses and manages RASMapper configuration data
- `RasExamples`: Manages and loads HEC-RAS example projects

#### HDF Data Access Classes
- `HdfBase`: Core functionality for HDF file operations
- `HdfBndry`: Enhanced boundary condition handling
- `HdfMesh`: Comprehensive mesh data management
- `HdfPlan`: Plan data extraction and analysis
- `HdfResultsMesh`: Advanced mesh results processing
- `HdfResultsPlan`: Plan results analysis
- `HdfResultsXsec`: Cross-section results processing
- `HdfStruc`: Structure data management
- `HdfPipe`: Pipe network analysis tools
- `HdfPump`: Pump station analysis capabilities
- `HdfFluvialPluvial`: Fluvial-pluvial boundary analysis
- `HdfPlot` & `HdfResultsPlot`: Specialized plotting utilities

### Project Organization Diagram

```
ras_commander
├── ai_tools
│   ├── [AI Knowledge Bases](https://github.com/gpt-cmdr/ras-commander/tree/main/ai_tools/llm_knowledge_bases) 
│   └── [Library Assistant](https://github.com/gpt-cmdr/ras-commander/tree/main/ai_tools/library_asssistant)
├── examples
│   └── [Examples Notebooks](https://github.com/gpt-cmdr/ras-commander/tree/main/ras_commander)
├── ras_commander
│   ├── __init__.py
│   ├── _version.py
│   ├── Decorators.py
│   ├── LoggingConfig.py
│   ├── RasCmdr.py
│   ├── RasExamples.py
│   ├── RasGeo.py
│   ├── RasPlan.py
│   ├── RasPrj.py
│   ├── RasUnsteady.py
│   ├── RasUtils.py
│   ├── HdfBase.py
│   ├── HdfBndry.py
│   ├── HdfMesh.py
│   ├── HdfPlan.py
│   ├── HdfResultsMesh.py
│   ├── HdfResultsPlan.py
│   ├── HdfResultsXsec.py
│   ├── HdfStruc.py
│   ├── HdfPipe.py
│   ├── HdfPump.py
│   ├── HdfFluvialPluvial.py
│   ├── HdfPlot.py
│   └── HdfResultsPlot.py
├── .gitignore
├── LICENSE
├── README.md
├── STYLE_GUIDE.md
├── Comprehensive_Library_Guide.md
├── pyproject.toml
├── setup.py
```

### Accessing HEC Examples through RasExamples

The `RasExamples` class provides functionality for quickly loading and managing HEC-RAS example projects. This is particularly useful for testing and development purposes.  All examples in the ras-commander repository currently utilize HEC example projects to provide fully running scripts and notebooks for end user testing, demonstration and adaption. 

Key features:
- Download and extract HEC-RAS example projects
- List available project categories and projects
- Extract specific projects for use
- Manage example project data efficiently

Example usage:
from ras_commander import RasExamples

```
categories = ras_examples.list_categories()
projects = ras_examples.list_projects("Steady Flow")
extracted_paths = ras_examples.extract_project(["Bald Eagle Creek", "Muncie"])
```

The RasExamples class is used to provide an alternative to traditional unit testing, with example notebooks doubling as tests and in-context examples for the end user.  This increases interpretability by LLM's, reducing hallucinations.  

### RasPrj

The `RasPrj` class is central to managing HEC-RAS projects within the ras-commander library. It handles project initialization, data loading, and provides access to project components.

Key features:
- Initialize HEC-RAS projects
- Load and manage project data (plans, geometries, flows, etc.)
- Provide easy access to project files and information

Note: While a global `ras` object is available for convenience, you can create multiple `RasPrj` instances to manage several projects simultaneously.

Example usage:
```
from ras_commander import RasPrj, init_ras_project
```

#### Using the global ras object
```
init_ras_project("/path/to/project", "6.5")
```

#### Creating a custom RasPrj instance
```
custom_project = RasPrj()
init_ras_project("/path/to/another_project", "6.5", ras_instance=custom_project)
```

### RasHdf

The `RasHdf` class provides utilities for working with HDF files in HEC-RAS projects, enabling easy access to simulation results and model data.

Example usage:

```python
from ras_commander import RasHdf, init_ras_project, RasPrj

# Initialize project with a custom ras object
custom_ras = RasPrj()
init_ras_project("/path/to/project", "6.5", ras_instance=custom_ras)

# Get runtime data for a specific plan
plan_number = "01"
runtime_data = RasHdf.get_runtime_data(plan_number, ras_object=custom_ras)
print(runtime_data)
```
This class simplifies the process of extracting and analyzing data from HEC-RAS HDF output files, supporting tasks such as post-processing and result visualization.

#### Infrastructure Analysis
```python
from ras_commander import HdfPipe, HdfPump

# Analyze pipe network
pipe_network = HdfPipe.get_pipe_network(hdf_path)
conduits = HdfPipe.get_pipe_conduits(hdf_path)

# Analyze pump stations
pump_stations = HdfPump.get_pump_stations(hdf_path)
pump_performance = HdfPump.get_pump_station_summary(hdf_path)
```

#### Advanced Results Analysis
```python
from ras_commander import HdfResultsMesh

# Get maximum water surface and velocity
max_ws = HdfResultsMesh.get_mesh_max_ws(hdf_path)
max_vel = HdfResultsMesh.get_mesh_max_face_v(hdf_path)

# Visualize results
from ras_commander import HdfResultsPlot
HdfResultsPlot.plot_results_max_wsel(max_ws)
```

#### Fluvial-Pluvial Analysis
```python
from ras_commander import HdfFluvialPluvial

boundary = HdfFluvialPluvial.calculate_fluvial_pluvial_boundary(
    hdf_path,
    delta_t=12  # Time threshold in hours
)
```

## Examples

Check out the examples in the repository to learn how to use RAS Commander:

### Project Setup
- `00_Using_RasExamples.ipynb`: Download and extract HEC-RAS example projects
- `01_project_initialization.ipynb`: Initialize HEC-RAS projects and explore their components

### File Operations
- `02_plan_and_geometry_operations.ipynb`: Clone and modify plan and geometry files
- `03_unsteady_flow_operations.ipynb`: Extract and modify boundary conditions
- `09_plan_parameter_operations.ipynb`: Retrieve and update plan parameters

### Execution Modes
- `05_single_plan_execution.ipynb`: Execute a single plan with specific options
- `06_executing_plan_sets.ipynb`: Different ways to specify and execute plan sets
- `07_sequential_plan_execution.ipynb`: Run multiple plans in sequence
- `08_parallel_execution.ipynb`: Run multiple plans in parallel

### Advanced Operations
- `04_multiple_project_operations.ipynb`: Work with multiple HEC-RAS projects simultaneously

These examples demonstrate practical applications of RAS Commander for automating HEC-RAS workflows, from basic operations to advanced scenarios.

## Documentation

For detailed usage instructions and API documentation, please refer to the [Comprehensive Library Guide](Comprehensive_Library_Guide.md).

## Future Development

The ras-commander library is an ongoing project. Future plans include:
- Integration of more advanced AI-driven features
- Expansion of HMS and DSS functionalities
- Community-driven development of new modules and features

## Related Resources

- [HEC-Commander Blog](https://github.com/gpt-cmdr/HEC-Commander/tree/main/Blog)
- [GPT-Commander YouTube Channel](https://www.youtube.com/@GPT_Commander)
- [ChatGPT Examples for Water Resources Engineers](https://github.com/gpt-cmdr/HEC-Commander/tree/main/ChatGPT%20Examples)


## Style Guide

This project follows a specific style guide to maintain consistency across the codebase. Please refer to the [Style Guide](STYLE_GUIDE.md) for details on coding conventions, documentation standards, and best practices.

## Acknowledgments

RAS Commander is based on the HEC-Commander project's "Command Line is All You Need" approach, leveraging the HEC-RAS command-line interface for automation. The initial development of this library was presented in the HEC-Commander Tools repository. In a 2024 Australian Water School webinar, Bill demonstrated the derivation of basic HEC-RAS automation functions from plain language instructions. Leveraging the previously developed code and AI tools, the library was created. The primary tools used for this initial development were Anthropic's Claude, GPT-4, Google's Gemini Experimental models, and the Cursor AI Coding IDE.

Additionally, we would like to acknowledge the following notable contributions and attributions for open source projects which significantly influenced the development of RAS Commander:

1. Contributions: Sean Micek's [`funkshuns`](https://github.com/openSourcerer9000/funkshuns), [`TXTure`](https://github.com/openSourcerer9000/TXTure), and [`RASmatazz`](https://github.com/openSourcerer9000/RASmatazz) libraries provided inspiration, code examples and utility functions which were adapted with AI for use in RAS Commander. Sean has also contributed heavily to 

- Development of additional HDF functions for detailed analysis and mapping of HEC-RAS results within the RasHdf class.
- Development of the prototype `RasCmdr` class for executing HEC-RAS simulations.
- Optimization examples and methods from (INSERT REFERENCE) for use in the Ras-Commander library examples

2. Attribution: The [`pyHMT2D`](https://github.com/psu-efd/pyHMT2D/) project by Xiaofeng Liu, which provided insights into HDF file handling methods for HEC-RAS outputs.  Many of the functions in the [Ras_2D_Data.py](https://github.com/psu-efd/pyHMT2D/blob/main/pyHMT2D/Hydraulic_Models_Data/RAS_2D/RAS_2D_Data.py) file were adapted with AI for use in RAS Commander. 

   Xiaofeng Liu, Ph.D., P.E.,    Associate Professor, Department of Civil and Environmental Engineering
   Institute of Computational and Data Sciences, Penn State University

3. Attribution: The [ffrd\rashdf'](https://github.com/fema-ffrd/rashdf) project by FEMA-FFRD (FEMA Future of Flood Risk Data) was incorporated, revised, adapted and extended in rascommander's RasHDF libaries (where noted). 

These acknowledgments recognize the contributions and inspirations that have helped shape RAS Commander, ensuring proper attribution for the ideas and code that have influenced its development.

4. Chris Goodell, "Breaking the HEC-RAS Code" - Studied and used as a reference for understanding the inner workings of HEC-RAS, providing valuable insights into the software's functionality and structure.

5. [HEC-Commander Tools](https://github.com/gpt-cmdr/HEC-Commander) - Inspiration and initial code base for the development of RAS Commander.

## Official RAS Commander AI-Generated Songs:

[No More Wait and See (Bluegrass)](https://suno.com/song/16889f3e-50f1-4afe-b779-a41738d7617a)  
  
  
[No More Wait and See (Cajun Zydeco)](https://suno.com/song/4441c45d-f6cd-47b9-8fbc-1f7b277ee8ed)  
  
## Other Resources

Notebook version of RAS-Commander: [RAS-Commander Notebook in the HEC-Commander Tools Repository](https://github.com/gpt-cmdr/HEC-Commander/tree/main/RAS-Commander)  

Youtube Tutorials for HEC-Commander Tools and RAS-Commander: [GPT-Commander on YouTube](https://www.youtube.com/@GPT_Commander/videos)

## Contributing

We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details on how to submit pull requests, report issues, and suggest improvements.

## LICENSE

This software is released under the MIT license.

## Contact

For questions, suggestions, or support, please contact:  
William Katzenmeyer, P.E., C.F.M. - heccommander@gmail.com

==================================================

File: c:\GH\ras-commander\settings.db
==================================================
SQLite format 3   @                                                                     .v  n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            N)eindexix_settings_idsettingsCREATE INDEX ix_settings_id ON settings (id)VtablesettingssettingsCREATE TABLE settings (
	id VARCHAR NOT NULL, 
	anthropic_api_key TEXT, 
	openai_api_key TEXT, 
	selected_model VARCHAR, 
	context_mode VARCHAR, 
	omit_folders TEXT, 
	omit_extensions TEXT, 
	omit_files TEXT, 
	chunk_level VARCHAR, 
	initial_chunk_size INTEGER, 
	followup_chunk_size INTEGER, 
	PRIMARY KEY (id)
)/C indexsqlite_autoindex_settings_1settings                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
==================================================

File: c:\GH\ras-commander\setup.py
==================================================
from setuptools import setup, find_packages
from setuptools.command.build_py import build_py
import subprocess
from pathlib import Path

class CustomBuildPy(build_py):
    def run(self):
        # Clean up __pycache__ folders
        root_dir = Path(__file__).parent
        for pycache_dir in root_dir.rglob('__pycache__'):
            if pycache_dir.is_dir():
                for cache_file in pycache_dir.iterdir():
                    cache_file.unlink()  # Delete each file
                pycache_dir.rmdir()      # Delete the empty directory
                print(f"Cleaned up: {pycache_dir}")

        # Run the summary_knowledge_bases.py script
        script_path = Path(__file__).parent / 'ai_tools' / 'generate_llm_knowledge_bases.py'
        try:
            subprocess.run(['python', str(script_path)], check=True)
        except subprocess.CalledProcessError:
            print("Warning: Knowledge base generation script failed, continuing with build")
        except FileNotFoundError:
            print("Warning: Knowledge base generation script not found, continuing with build")
        
        # Continue with the regular build process
        super().run()

setup(
    name="ras-commander",
    version="0.76.0",
    packages=find_packages(),
    include_package_data=True,
    python_requires='>=3.10',
    author="William M. Katzenmeyer, P.E., C.F.M.",
    author_email="heccommander@gmail.com",
    description="A Python library for automating HEC-RAS 6.x operations",
    long_description=open('README.md').read(),
    long_description_content_type="text/markdown",
    url="https://github.com/gpt-cmdr/ras-commander",
    cmdclass={
        'build_py': CustomBuildPy,
    },
    install_requires=[
        'h5py',
        'numpy',
        'pandas',
        'requests',
        'tqdm',
        'scipy',
        'xarray',
        'geopandas',
        'matplotlib',
        'shapely',
        'pathlib',
        'rasterstats',
        'rtree',
    ])

"""
ras-commander setup.py

This file is used to build and publish the ras-commander package to PyPI.

To build and publish this package, follow these steps:

1. Ensure you have the latest versions of setuptools, wheel, and twine installed:
   pip install --upgrade setuptools wheel twine

2. Update the version number in ras_commander/__init__.py (if not using automatic versioning)

3. Create source distribution and wheel:
   python setup.py sdist bdist_wheel

4. Check the distribution:
   twine check dist/*

5. Upload to Test PyPI (optional):
   twine upload --repository testpypi dist/*

6. Install from Test PyPI to verify (optional):
   pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple ras-commander

7. Upload to PyPI:
   twine upload dist/* --username __token__ --password <your_api_key>


8. Install from PyPI to verify:
   pip install ras-commander

Note: Ensure you have the necessary credentials and access rights to upload to PyPI.
For more information, visit: https://packaging.python.org/tutorials/packaging-projects/

"""

==================================================

File: c:\GH\ras-commander\STYLE_GUIDE.md
==================================================
# RAS Commander (ras-commander) Style Guide

## Table of Contents
1. [Naming Conventions](#1-naming-conventions)
2. [Code Structure and Organization](#2-code-structure-and-organization)
3. [Documentation and Comments](#3-documentation-and-comments)
4. [Code Style](#4-code-style)
5. [Error Handling](#5-error-handling)
6. [Testing](#6-testing)
7. [Version Control](#7-version-control)
8. [Type Hinting](#8-type-hinting)
9. [Project-Specific Conventions](#9-project-specific-conventions)
10. [Inheritance](#10-inheritance)
11. [RasUtils Usage](#11-rasutils-usage)
12. [Working with RasExamples](#12-working-with-rasexamples)
13. [Logging](#13-logging)
14. [Decorator Usage](#14-decorator-usage)
15. [Static Class Pattern](#15-static-class-pattern)

## 1. Naming Conventions

### 1.1 General Rules
- Use `snake_case` for all function and variable names
- Use `PascalCase` for class names
- Use `UPPER_CASE` for constants

### 1.2 Library-Specific Naming
- Informal Name: RAS Commander
- Package Name and GitHub Library Name: ras-commander (with a hyphen)
- Import Name: ras_commander (with an underscore)
- Main Class of functions for HEC-RAS Automation: RasCmdr

### 1.3 Function Naming
- Start function names with a verb describing the action
- Use clear, descriptive names
- Common verbs and their uses:
  - `get_`: retrieve data
  - `set_`: set values or properties
  - `compute_`: execute or calculate
  - `clone_`: copy
  - `clear_`: remove or reset data
  - `find_`: search
  - `update_`: modify existing data

### 1.4 Abbreviations
Use the following abbreviations consistently throughout the codebase:

- ras: HEC-RAS
- prj: Project
- geom: Geometry
- pre: Preprocessor
- geompre: Geometry Preprocessor
- num: Number
- init: Initialize
- XS: Cross Section
- DSS: Data Storage System
- GIS: Geographic Information System
- BC: Boundary Condition
- IC: Initial Condition
- TW: Tailwater

Use these abbreviations in lowercase for function and variable names (e.g., `geom`, not `Geom` or `GEOM`).

### 1.5 Class Naming
- Use `PascalCase` for class names (e.g., `FileOperations`, `PlanOperations`, `RasCmdr`)
- Class names should be nouns or noun phrases

### 1.6 Variable Naming
- Use descriptive names indicating purpose or content
- Prefix boolean variables with `is_`, `has_`, or similar

### 1.7 HDF Class Method Naming

For HDF class methods, follow these naming conventions:
- `get_` prefix for methods that extract data from HDF files
- Use specific entity names in method names: `get_mesh_max_ws()` instead of just `get_max_ws()`
- For methods that return GeoDataFrame objects, include the relevant geometry type in the name: `get_mesh_cell_polygons()`
- Prefix private helper methods with underscore: `_get_mesh_timeseries_output_path()`
- Use consistent suffixes for related methods: `get_mesh_max_ws()`, `get_mesh_min_ws()`

## 2. Code Structure and Organization

### 2.1 File Organization
- Group related functions into appropriate classes
- Keep each class in its own file, named after the class

### 2.2 Function Organization
- Order functions logically within a class
- Place common or important functions at the top of the class

### 2.3 Module Structure
- Use the following order for module contents:
  1. Module-level docstring
  2. Imports (grouped and ordered)
  3. Constants
  4. Classes
  5. Functions

## 3. Documentation and Comments

### 3.1 Docstrings
- Use docstrings for all modules, classes, methods, and functions
- Follow Google Python Style Guide format
- Include parameters, return values, and a brief description
- For complex functions, include examples in the docstring

### 3.2 Comments
- Use inline comments sparingly, only for complex logic
- Keep comments up-to-date with code changes
- Use TODO comments for future work, formatted as: `# TODO: description`

## 4. Code Style

### 4.1 Imports
- Order imports as follows:
  1. Standard library imports
  2. Third-party library imports
  3. Local application imports
- Use absolute imports
- Use `import ras_commander as ras` for shortening the library name in examples

### 4.2 Whitespace
- Follow PEP 8 guidelines
- Use 4 spaces for indentation (no tabs)
- Use blank lines to separate logical sections of code

### 4.3 Line Length
- Limit lines to 79 characters for code, 72 for comments and docstrings
- Use parentheses for line continuation in long expressions

## 5. Error Handling

**Use Logging Instead of Prints**
Ensure that every operation that can fail or needs to provide feedback to the user is logged instead of using `print`. This will help in debugging and improve monitoring during execution.

   ```python
   logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
   ```

   Example of replacing a `print` with logging:
   ```python
   logging.info('Starting HEC-RAS simulation...')
   ```

- Use explicit exception handling with try/except blocks
- Raise custom exceptions when appropriate, with descriptive messages
- Use logging for error reporting and debugging information
- Use specific exception types when raising errors (e.g., `ValueError`, `FileNotFoundError`)
- Provide informative error messages that include relevant details
- Implement proper cleanup in finally blocks when necessary
- For user-facing functions, consider wrapping internal exceptions in custom exceptions specific to ras-commander

Example:
```python
try:
    result = compute_plan(plan_number)
except FileNotFoundError as e:
    raise RasCommanderError(f"Plan file not found: {e}")
except ValueError as e:
    raise RasCommanderError(f"Invalid plan parameter: {e}")
except Exception as e:
    raise RasCommanderError(f"Unexpected error during plan computation: {e}")
```

### 5.1 Logging Configuration

- Always use the module-specific logger from `LoggingConfig`:
  ```python
  from .LoggingConfig import get_logger
  logger = get_logger(__name__)
  ```

- Use appropriate log levels:
  - DEBUG: Detailed information useful for debugging
  - INFO: Confirmation of expected operations
  - WARNING: Something unexpected happened but execution continues
  - ERROR: An operation failed but the program can continue
  - CRITICAL: Program cannot continue

- Include informative context in log messages:
  ```python
  logger.info(f"Processing file: {file_path}")
  logger.error(f"Failed to read HDF file {hdf_path}: {str(e)}")
  ```

- Use the `@log_call` decorator for automatic function entry/exit logging

## 6. Testing

- The RasExamples() Class is provided for testing directly with HEC Example projects
- The library eschews traditional unit testing in favor of this approach
- The unit tests double as useful examples that can be extended by end users 
- Any notebooks in the repo should include a working model (hosted elsewhere) 

## 7. Version Control

- Use meaningful commit messages that clearly describe the changes made
- Create feature branches for new features or significant changes
- Submit pull requests for code review before merging into the main branch
- Keep commits focused and atomic (one logical change per commit)
- Use git tags for marking releases
- Follow semantic versioning for release numbering

## 8. Type Hinting

- Use type hints for all function parameters and return values
- Use the `typing` module for complex types (e.g., `List`, `Dict`, `Optional`)
- Include type hints in function signatures and docstrings
- Use `Union` for parameters that can accept multiple types
- For methods that don't return a value, use `-> None`

Example:
```python
from typing import List, Optional

def process_plans(plan_numbers: List[str], max_workers: Optional[int] = None) -> bool:
    # Function implementation
    return True
```

## 9. Project-Specific Conventions

### 9.1 RAS Instance Handling
- Design functions to accept an optional `ras_object` parameter:
  ```python
  def some_function(param1, param2, ras_object=None):
      ras_obj = ras_object or ras
      ras_obj.check_initialized()
      # Function implementation
  ```

### 9.2 File Path Handling
- Use `pathlib.Path` for file and directory path manipulations
- Convert string paths to Path objects at the beginning of functions

### 9.3 DataFrame Handling
- Use pandas for data manipulation and storage where appropriate
- Prefer method chaining for pandas operations to improve readability

### 9.4 Parallel Execution
- Follow the guidelines in the "Benchmarking is All You Need" blog post for optimal core usage in parallel plan execution

### 9.5 Function Return Values
- Prefer returning meaningful values over modifying global state
- Use tuple returns for multiple values instead of modifying input parameters
- Use consistent return types across related functions:
  - Use GeoDataFrame for functions returning spatial data
  - Use pandas DataFrame for tabular data
  - Use xarray DataArray/Dataset for multi-dimensional data with coordinates
  - Use Optional[Type] for functions that might return None

- Provide clear error handling for function returns:
  - Return empty DataFrame/GeoDataFrame instead of None when appropriate
  - Use Optional typing for functions that might return None
  - Document possible return values in docstrings


## 10. RasUtils Usage

- Use RasUtils for general-purpose utility functions that don't fit into other specific classes
- When adding new utility functions, ensure they are static methods of the RasUtils class
- Keep utility functions focused and single-purpose
- Document utility functions thoroughly, including examples of usage

Example:
```python
class RasUtils:
    @staticmethod
    def create_backup(file_path: Path, backup_suffix: str = "_backup") -> Path:
        """
        Create a backup of the specified file.

        Args:
            file_path (Path): Path to the file to be backed up
            backup_suffix (str): Suffix to append to the backup file name

        Returns:
            Path: Path to the created backup file

        Example:
            >>> backup_path = RasUtils.create_backup(Path("project.prj"))
            >>> print(f"Backup created at: {backup_path}")
        """
        # Function implementation
```

## 11. Working with RasExamples

- Use RasExamples for managing and loading example HEC-RAS projects
- Always check if example projects are already downloaded before attempting to download them again
- Use the `list_categories()` and `list_projects()` methods to explore available examples
- When extracting projects, use meaningful names and keep track of extracted paths
- Clean up extracted projects when they are no longer needed using `clean_projects_directory()`

Example:
```python
ras_examples = RasExamples()
if not ras_examples.is_project_extracted("Bald Eagle Creek"):
    extracted_path = ras_examples.extract_project("Bald Eagle Creek")[0]
    # Use the extracted project
    # ...
    # Clean up when done
    RasUtils.remove_with_retry(extracted_path, is_folder=True)
```

Remember, consistency is key. When in doubt, prioritize readability and clarity in your code. Always consider the maintainability and extensibility of the codebase when making design decisions.

## 12. Logging

Instructions for setting up a minimal logging decorator and applying it to functions:

1. Create logging_config.py:
```python
import logging
import functools

def setup_logging(level=logging.INFO):
    logging.basicConfig(level=level, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

def log_call(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        logger = logging.getLogger(func.__module__)
        logger.info(f"Calling {func.__name__}")
        return func(*args, **kwargs)
    return wrapper

setup_logging()
```

2. In each module file (e.g., RasPrj.py, RasPlan.py):
   - Add at the top: `from ras_commander.logging_config import log_call`
   - Remove all existing logging configurations and logger instantiations

3. Apply the decorator to functions:
   - Replace existing logging statements with the `@log_call` decorator
   - Remove any manual logging within the function body

Example changes to functions:

Before:
```python
def compute_plan(plan_number, dest_folder=None, ras_object=None, clear_geompre=False, num_cores=None):
    logging.info(f"Computing plan {plan_number}")
    # ... function logic ...
    logging.info(f"Plan {plan_number} computation complete")
    return result
```

After:
```python
@log_call
def compute_plan(plan_number, dest_folder=None, ras_object=None, clear_geompre=False, num_cores=None):
    # ... function logic ...
    return result
```

Apply this pattern across all functions in the library. This approach will significantly reduce the code footprint while maintaining basic logging functionality.

## 13. Decorator Usage for Ras* and Hdf* Classes to Simplify Inputs

- Use the `@log_call` decorator for all public methods to enable automatic logging of function entry and exit
- Use the `@standardize_input` decorator for methods that accept HDF file paths to ensure consistent handling
- Place decorators on separate lines for better readability when multiple decorators are used
- Order decorators consistently: `@staticmethod` first, followed by `@log_call`, then `@standardize_input`

Example:
```python
@staticmethod
@log_call
@standardize_input(file_type='plan_hdf')
def get_mesh_max_ws(hdf_path: Path, round_to: str = "100ms") -> gpd.GeoDataFrame:
    # Function implementation
```

## 15. Static Class Pattern

Many classes in the ras-commander library follow a static method pattern where:
- All methods are decorated with `@staticmethod`
- The class serves as a namespace for related functionality
- No instantiation is required to use the methods

When implementing such classes:
- Include a note in the class docstring stating "All methods in this class are static and designed to be used without instantiation"
- Use consistent method organization, typically starting with core methods followed by helper methods
- Private helper methods should still use the underscore prefix (e.g., `_parse_file`)
- Avoid storing state in class variables unless absolutely necessary

Example:
```python
class HdfMesh:
    """
    A class for handling mesh-related operations on HEC-RAS HDF files.
    
    All methods in this class are static and designed to be used without instantiation.
    """
    
    @staticmethod
    @log_call
    def get_mesh_area_names(hdf_path: Path) -> List[str]:
        # Method implementation
        
    @staticmethod
    def _parse_mesh_data(data: np.ndarray) -> Dict:
        # Helper method implementation
```
==================================================

Folder: c:\GH\ras-commander\tools
==================================================

File: c:\GH\ras-commander\.gitignore\.gitignore
==================================================
# Ignore the example_projects folder and all its subfolders
examples/example_projects/

# Ignore workspace, projects, and my_projects folders
workspace/
projects/
my_projects/

# Ignore FEMA BLE Models
examples/FEMA_BLE_Models/
examples/hdf_example_data/

# ignore tools/stored_map_assistant build folders
tools/stored_map_assistant/build/
tools/stored_map_assistant/dist/

# Ignore library assistant config
library_assistant/config/

# Ignore Python egg info
*.egg-info/
.eggs/
.conda/
# Ignore the Example_Projects_6_5.zip file
Example_Projects_6_5.zip

# Ignore the misc folder and all its subfolders
misc/

# Ignore Python cache files
__pycache__/
*.py[cod]

# Ignore compiled Python files
*.so

# Ignore distribution / packaging
dist/
build/

# Ignore test cache
.pytest_cache/

# Ignore virtual environments
.venv/
venv/

# Ignore IDE-specific files (optional, uncomment if needed)
# .vscode/
# .idea/

# Ignore OS-specific files
.DS_Store
Thumbs.db
==================================================

File: c:\GH\ras-commander\examples\00_Using_RasExamples.ipynb
==================================================
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Install RAS-Commander from pip"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: ras-commander in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (0.72.0)\n",
            "Collecting ras-commander\n",
            "  Downloading ras_commander-0.74.0-py3-none-any.whl.metadata (27 kB)\n",
            "Requirement already satisfied: h5py in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (3.13.0)\n",
            "Requirement already satisfied: numpy in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (2.2.4)\n",
            "Requirement already satisfied: pandas in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (2.2.3)\n",
            "Requirement already satisfied: requests in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (2.32.3)\n",
            "Requirement already satisfied: tqdm in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (4.67.1)\n",
            "Requirement already satisfied: scipy in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (1.15.2)\n",
            "Requirement already satisfied: xarray in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (2025.1.2)\n",
            "Requirement already satisfied: geopandas in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (1.0.1)\n",
            "Requirement already satisfied: matplotlib in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (3.10.1)\n",
            "Requirement already satisfied: shapely in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (2.0.7)\n",
            "Requirement already satisfied: pathlib in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (1.0.1)\n",
            "Requirement already satisfied: rasterstats in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (0.20.0)\n",
            "Requirement already satisfied: rtree in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (1.4.0)\n",
            "Requirement already satisfied: pyogrio>=0.7.2 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from geopandas->ras-commander) (0.10.0)\n",
            "Requirement already satisfied: packaging in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from geopandas->ras-commander) (24.2)\n",
            "Requirement already satisfied: pyproj>=3.3.0 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from geopandas->ras-commander) (3.7.1)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from pandas->ras-commander) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from pandas->ras-commander) (2025.1)\n",
            "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from pandas->ras-commander) (2025.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from matplotlib->ras-commander) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from matplotlib->ras-commander) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from matplotlib->ras-commander) (4.56.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from matplotlib->ras-commander) (1.4.8)\n",
            "Requirement already satisfied: pillow>=8 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from matplotlib->ras-commander) (11.1.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from matplotlib->ras-commander) (3.2.1)\n",
            "Requirement already satisfied: affine in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from rasterstats->ras-commander) (2.4.0)\n",
            "Requirement already satisfied: click>7.1 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from rasterstats->ras-commander) (8.1.8)\n",
            "Requirement already satisfied: cligj>=0.4 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from rasterstats->ras-commander) (0.7.2)\n",
            "Requirement already satisfied: fiona in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from rasterstats->ras-commander) (1.10.1)\n",
            "Requirement already satisfied: rasterio>=1.0 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from rasterstats->ras-commander) (1.4.3)\n",
            "Requirement already satisfied: simplejson in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from rasterstats->ras-commander) (3.20.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from requests->ras-commander) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from requests->ras-commander) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from requests->ras-commander) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from requests->ras-commander) (2025.1.31)\n",
            "Requirement already satisfied: colorama in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from tqdm->ras-commander) (0.4.6)\n",
            "Requirement already satisfied: six>=1.5 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from python-dateutil>=2.8.2->pandas->ras-commander) (1.17.0)\n",
            "Requirement already satisfied: attrs in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from rasterio>=1.0->rasterstats->ras-commander) (25.3.0)\n",
            "Requirement already satisfied: click-plugins in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from rasterio>=1.0->rasterstats->ras-commander) (1.1.1)\n",
            "Downloading ras_commander-0.74.0-py3-none-any.whl (144 kB)\n",
            "Installing collected packages: ras-commander\n",
            "  Attempting uninstall: ras-commander\n",
            "    Found existing installation: ras-commander 0.72.0\n",
            "    Uninstalling ras-commander-0.72.0:\n",
            "      Successfully uninstalled ras-commander-0.72.0\n",
            "Successfully installed ras-commander-0.74.0\n"
          ]
        }
      ],
      "source": [
        "# 1. Install ras-commander from pip (uncomment to install if needed)\n",
        "!pip install --upgrade ras-commander"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Simple Imports (if using the pip package)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {},
      "outputs": [],
      "source": [
        "from ras_commander import *"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Flexible Imports (for active development of the library)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# This cell will try to import the pip package, if it fails it will \n",
        "# add the parent directory to the Python path and try to import again\n",
        "# This assumes you are working in a subfolder of the ras-commander repository\n",
        "# This allows a user's revisions to be tested locally without installing the package\n",
        "\n",
        "import sys\n",
        "from pathlib import Path\n",
        "\n",
        "# Flexible imports to allow for development without installation \n",
        "#  ** Use this version with Jupyter Notebooks **\n",
        "try:\n",
        "    # Try to import from the installed package\n",
        "    from ras_commander import *\n",
        "except ImportError:\n",
        "    # If the import fails, add the parent directory to the Python path\n",
        "    import os\n",
        "    current_file = Path(os.getcwd()).resolve()\n",
        "    rascmdr_directory = current_file.parent\n",
        "    sys.path.append(str(rascmdr_directory))\n",
        "    print(\"Loading ras-commander from local dev copy\")\n",
        "    # Now try to import again\n",
        "    from ras_commander import *\n",
        "print(\"ras_commander imported successfully\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "-----"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Using RASExamples"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Simple Method for Calling HEC-RAS Example Projects by Folder Name"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-03-19 16:54:14 - ras_commander.RasExamples - INFO - Found zip file: c:\\GH\\ras-commander\\examples\\Example_Projects_6_6.zip\n",
            "2025-03-19 16:54:14 - ras_commander.RasExamples - INFO - Loading project data from CSV...\n",
            "2025-03-19 16:54:14 - ras_commander.RasExamples - INFO - Loaded 68 projects from CSV.\n",
            "2025-03-19 16:54:14 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
            "2025-03-19 16:54:14 - ras_commander.RasExamples - INFO - Extracting project 'Balde Eagle Creek'\n",
            "2025-03-19 16:54:14 - ras_commander.RasExamples - INFO - Project 'Balde Eagle Creek' already exists. Deleting existing folder...\n",
            "2025-03-19 16:54:14 - ras_commander.RasExamples - INFO - Existing folder for project 'Balde Eagle Creek' has been deleted.\n",
            "2025-03-19 16:54:14 - ras_commander.RasExamples - INFO - Successfully extracted project 'Balde Eagle Creek' to c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n",
            "2025-03-19 16:54:14 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
            "2025-03-19 16:54:14 - ras_commander.RasExamples - INFO - Extracting project 'BaldEagleCrkMulti2D'\n",
            "2025-03-19 16:54:14 - ras_commander.RasExamples - INFO - Project 'BaldEagleCrkMulti2D' already exists. Deleting existing folder...\n",
            "2025-03-19 16:54:14 - ras_commander.RasExamples - INFO - Existing folder for project 'BaldEagleCrkMulti2D' has been deleted.\n",
            "2025-03-19 16:54:16 - ras_commander.RasExamples - INFO - Successfully extracted project 'BaldEagleCrkMulti2D' to c:\\GH\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-03-19 16:54:16 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
            "2025-03-19 16:54:16 - ras_commander.RasExamples - INFO - Extracting project 'Muncie'\n",
            "2025-03-19 16:54:16 - ras_commander.RasExamples - INFO - Project 'Muncie' already exists. Deleting existing folder...\n",
            "2025-03-19 16:54:16 - ras_commander.RasExamples - INFO - Existing folder for project 'Muncie' has been deleted.\n",
            "2025-03-19 16:54:17 - ras_commander.RasExamples - INFO - Successfully extracted project 'Muncie' to c:\\GH\\ras-commander\\examples\\example_projects\\Muncie\n",
            "2025-03-19 16:54:17 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
            "2025-03-19 16:54:17 - ras_commander.RasExamples - INFO - Extracting project 'Davis'\n",
            "2025-03-19 16:54:17 - ras_commander.RasExamples - INFO - Project 'Davis' already exists. Deleting existing folder...\n",
            "2025-03-19 16:54:17 - ras_commander.RasExamples - INFO - Existing folder for project 'Davis' has been deleted.\n",
            "2025-03-19 16:54:17 - ras_commander.RasExamples - INFO - Successfully extracted project 'Davis' to c:\\GH\\ras-commander\\examples\\example_projects\\Davis\n"
          ]
        },
        {
          "data": {
            "text/plain": "[\"[WindowsPath('c:/GH/ras-commander/examples/example_projects/Balde Eagle Creek'),\\n\", \" WindowsPath('c:/GH/ras-commander/examples/example_projects/BaldEagleCrkMulti2D'),\\n\", \" WindowsPath('c:/GH/ras-commander/examples/example_projects/Muncie'),\\n\", \" WindowsPath('c:/GH/ras-commander/examples/example_projects/Davis')]\"]"
          },
          "execution_count": 3,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# This Code Cell is All You Need\n",
        "# This is what this Class was intended to do: Help me make repeatable workflows around HEC-RAS Example Projects for testing and demonstration purposes. \n",
        "\n",
        "# Extract specific projects\n",
        "RasExamples.extract_project([\"Balde Eagle Creek\", \"BaldEagleCrkMulti2D\", \"Muncie\", \"Davis\"])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "-----"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Advanced Usage"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "RasExamples will not download a new .zip file if one already exists, this allows you to replace the Example_Projects_6_x.zip with your own zip file (with the same folder format as the HEC-RAS examples) and you will be able to load them by folder name for repeatable Test Driven Development\n",
        "\n",
        "Just make sure all project folders have unique folder names. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Example projects are already downloaded.\n",
            "RasExamples.folder_df:\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<property at 0x267a0cc3880>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Check if example projects are already downloaded\n",
        "if RasExamples.projects_dir.exists():\n",
        "    print(\"Example projects are already downloaded.\")\n",
        "    print(\"RasExamples.folder_df:\")\n",
        "    display(RasExamples.folder_df)\n",
        "else:\n",
        "    print(\"Downloading example projects...\")\n",
        "    RasExamples.get_example_projects()\n",
        "    print(\"RasExamples.folder_df:\")\n",
        "    display(RasExamples.folder_df)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-03-19 16:54:17 - ras_commander.RasExamples - INFO - Available categories: 1D Sediment Transport, 1D Steady Flow Hydraulics, 1D Unsteady Flow Hydraulics, 2D Sediment Transport, 2D Unsteady Flow Hydraulics, Applications Guide, Pipes (beta), Water Quality\n"
          ]
        }
      ],
      "source": [
        "# List all categories\n",
        "categories = RasExamples.list_categories()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Available categories:\n"
          ]
        },
        {
          "data": {
            "text/plain": "[\"['1D Sediment Transport',\\n\", \" '1D Steady Flow Hydraulics',\\n\", \" '1D Unsteady Flow Hydraulics',\\n\", \" '2D Sediment Transport',\\n\", \" '2D Unsteady Flow Hydraulics',\\n\", \" 'Applications Guide',\\n\", \" 'Pipes (beta)',\\n\", \" 'Water Quality']\"]"
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nAvailable categories:\")\n",
        "categories"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-03-19 16:54:17 - ras_commander.RasExamples - INFO - Projects in category '1D Sediment Transport': BSTEM - Simple Example, Dredging Example, Reservoir Video Tutorial, SIAM Example, Simple Sediment Transport Example, Unsteady Sediment with Concentration Rules, Video Tutorial (Sediment Intro)\n"
          ]
        },
        {
          "data": {
            "text/plain": "[\"['BSTEM - Simple Example',\\n\", \" 'Dredging Example',\\n\", \" 'Reservoir Video Tutorial',\\n\", \" 'SIAM Example',\\n\", \" 'Simple Sediment Transport Example',\\n\", \" 'Unsteady Sediment with Concentration Rules',\\n\", \" 'Video Tutorial (Sediment Intro)']\"]"
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# List projects in a specific category\n",
        "projects = RasExamples.list_projects(\"1D Sediment Transport\")\n",
        "projects\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-03-19 16:54:17 - ras_commander.RasExamples - INFO - All available projects: BSTEM - Simple Example, Dredging Example, Reservoir Video Tutorial, SIAM Example, Simple Sediment Transport Example, Unsteady Sediment with Concentration Rules, Video Tutorial (Sediment Intro), Baxter RAS Mapper, Chapter 4 Example Data, ConSpan Culvert, Mixed Flow Regime Channel, Wailupe GeoRAS, Balde Eagle Creek, Bridge Hydraulics, ContractionExpansionMinorLosses, Culvert Hydraulics, Culverts with Flap Gates, Dam Breaching, Elevation Controled Gates, Inline Structure with Gated Spillways, Internal Stage and Flow Boundary Condition, JunctionHydraulics, Lateral Strcuture with Gates, Lateral Structure connected to a River Reach, Lateral Structure Overflow Weir, Lateral Structure with Culverts and Gates, Lateral Structure with Culverts, Levee Breaching, Mixed Flow Regime, Multiple Reaches with Hydraulic Structures, NavigationDam, Pumping Station with Rules, Pumping Station, Rule Operations, Simplified Physical Breaching, Storage Area Hydraulic Connection, UngagedAreaInflows, Unsteady Flow Encroachment Analysis, Chippewa_2D, Weise_2D, BaldEagleCrkMulti2D, Muncie, Example 1 - Critical Creek, Example 10 - Stream Junction, Example 11 - Bridge Scour, Example 12 - Inline Structure, Example 13 - Singler Bridge (WSPRO), Example 14 - Ice Covered River, Example 15 - Split Flow Junction with Lateral Weir, Example 16 - Channel Modification, Example 17 - Unsteady Flow Application, Example 18 - Advanced Inline Structure, Example 19 - Hydrologic Routing - ModPuls, Example 2 - Beaver Creek, Example 20 - HagerLatWeir, Example 21 - Overflow Gates, Example 22 - Groundwater Interflow, Example 23 - Urban Modeling, Example 24 - Mannings-n-Calibration, Example 3 - Single Culvert, Example 4 - Multiple Culverts, Example 5 - Multiple Openings, Example 6 - Floodway Determination, Example 7 - Multiple Plans, Example 8 - Looped Network, Example 9 - Mixed Flow Analysis, Davis, Nutrient Example\n"
          ]
        },
        {
          "data": {
            "text/plain": "[\"['BSTEM - Simple Example',\\n\", \" 'Dredging Example',\\n\", \" 'Reservoir Video Tutorial',\\n\", \" 'SIAM Example',\\n\", \" 'Simple Sediment Transport Example',\\n\", \" 'Unsteady Sediment with Concentration Rules',\\n\", \" 'Video Tutorial (Sediment Intro)',\\n\", \" 'Baxter RAS Mapper',\\n\", \" 'Chapter 4 Example Data',\\n\", \" 'ConSpan Culvert',\\n\", \" 'Mixed Flow Regime Channel',\\n\", \" 'Wailupe GeoRAS',\\n\", \" 'Balde Eagle Creek',\\n\", \" 'Bridge Hydraulics',\\n\", \" 'ContractionExpansionMinorLosses',\\n\", \" 'Culvert Hydraulics',\\n\", \" 'Culverts with Flap Gates',\\n\", \" 'Dam Breaching',\\n\", \" 'Elevation Controled Gates',\\n\", \" 'Inline Structure with Gated Spillways',\\n\", \" 'Internal Stage and Flow Boundary Condition',\\n\", \" 'JunctionHydraulics',\\n\", \" 'Lateral Strcuture with Gates',\\n\", \" 'Lateral Structure connected to a River Reach',\\n\", \" 'Lateral Structure Overflow Weir',\\n\", \" 'Lateral Structure with Culverts and Gates',\\n\", \" 'Lateral Structure with Culverts',\\n\", \" 'Levee Breaching',\\n\", \" 'Mixed Flow \n...\n[Output truncated, 2437 characters total]"
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# List all projects\n",
        "all_projects = RasExamples.list_projects()\n",
        "all_projects\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-03-19 16:54:17 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
            "2025-03-19 16:54:17 - ras_commander.RasExamples - INFO - Extracting project 'Balde Eagle Creek'\n",
            "2025-03-19 16:54:17 - ras_commander.RasExamples - INFO - Project 'Balde Eagle Creek' already exists. Deleting existing folder...\n",
            "2025-03-19 16:54:17 - ras_commander.RasExamples - INFO - Existing folder for project 'Balde Eagle Creek' has been deleted.\n",
            "2025-03-19 16:54:17 - ras_commander.RasExamples - INFO - Successfully extracted project 'Balde Eagle Creek' to c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n",
            "2025-03-19 16:54:17 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
            "2025-03-19 16:54:17 - ras_commander.RasExamples - INFO - Extracting project 'BaldEagleCrkMulti2D'\n",
            "2025-03-19 16:54:17 - ras_commander.RasExamples - INFO - Project 'BaldEagleCrkMulti2D' already exists. Deleting existing folder...\n",
            "2025-03-19 16:54:17 - ras_commander.RasExamples - INFO - Existing folder for project 'BaldEagleCrkMulti2D' has been deleted.\n",
            "2025-03-19 16:54:19 - ras_commander.RasExamples - INFO - Successfully extracted project 'BaldEagleCrkMulti2D' to c:\\GH\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-03-19 16:54:19 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
            "2025-03-19 16:54:19 - ras_commander.RasExamples - INFO - Extracting project 'Muncie'\n",
            "2025-03-19 16:54:19 - ras_commander.RasExamples - INFO - Project 'Muncie' already exists. Deleting existing folder...\n",
            "2025-03-19 16:54:20 - ras_commander.RasExamples - INFO - Existing folder for project 'Muncie' has been deleted.\n",
            "2025-03-19 16:54:20 - ras_commander.RasExamples - INFO - Successfully extracted project 'Muncie' to c:\\GH\\ras-commander\\examples\\example_projects\\Muncie\n"
          ]
        }
      ],
      "source": [
        "# Extract specific projects\n",
        "projects_to_extract = [\"Balde Eagle Creek\", \"BaldEagleCrkMulti2D\", \"Muncie\"]\n",
        "extracted_paths = RasExamples.extract_project(projects_to_extract)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Note about New Pipes and Conduits Version 6.6 Example Project\n",
        "\n",
        "Use project name \"Davis\" to explore pipes and conduits (introduced in version 6.6)"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "rascmdr",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}
==================================================

File: c:\GH\ras-commander\examples\01_project_initialization.ipynb
==================================================
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# RAS Commander Project Initialization\n",
        "\n",
        "This notebook demonstrates how to initialize and work with HEC-RAS projects using the `ras-commander` library. You'll learn how to:\n",
        "\n",
        "1. Set up and configure the RAS Commander environment\n",
        "2. Download and extract example HEC-RAS projects\n",
        "3. Initialize HEC-RAS projects using the global `ras` object\n",
        "4. Initialize multiple HEC-RAS projects using custom RAS objects\n",
        "5. Access various project components (plans, geometries, flows, boundaries)\n",
        "\n",
        "## Key Concepts\n",
        "\n",
        "- **RasPrj Objects**: Represent HEC-RAS projects with access to plans, geometries, flows, etc.\n",
        "- **Global `ras` object**: A singleton instance for simple, single-project scripts\n",
        "- **Custom RAS Objects**: Independent instances for multi-project workflows\n",
        "- **Project Initialization**: Process of connecting to HEC-RAS projects\n",
        "- **Project Components**: Structured access to plans, geometries, and flow files\n",
        "\n",
        "Let's start by importing the necessary libraries."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Package Installation and Environment Setup\n",
        "Uncomment and run package installation commands if needed"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: ras-commander in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (0.74.0)\n",
            "Requirement already satisfied: h5py in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (3.13.0)\n",
            "Requirement already satisfied: numpy in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (2.2.4)\n",
            "Requirement already satisfied: pandas in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (2.2.3)\n",
            "Requirement already satisfied: requests in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (2.32.3)\n",
            "Requirement already satisfied: tqdm in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (4.67.1)\n",
            "Requirement already satisfied: scipy in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (1.15.2)\n",
            "Requirement already satisfied: xarray in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (2025.1.2)\n",
            "Requirement already satisfied: geopandas in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (1.0.1)\n",
            "Requirement already satisfied: matplotlib in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (3.10.1)\n",
            "Requirement already satisfied: shapely in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (2.0.7)\n",
            "Requirement already satisfied: pathlib in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (1.0.1)\n",
            "Requirement already satisfied: rasterstats in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (0.20.0)\n",
            "Requirement already satisfied: rtree in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (1.4.0)\n",
            "Requirement already satisfied: pyogrio>=0.7.2 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from geopandas->ras-commander) (0.10.0)\n",
            "Requirement already satisfied: packaging in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from geopandas->ras-commander) (24.2)\n",
            "Requirement already satisfied: pyproj>=3.3.0 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from geopandas->ras-commander) (3.7.1)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from pandas->ras-commander) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from pandas->ras-commander) (2025.1)\n",
            "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from pandas->ras-commander) (2025.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from matplotlib->ras-commander) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from matplotlib->ras-commander) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from matplotlib->ras-commander) (4.56.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from matplotlib->ras-commander) (1.4.8)\n",
            "Requirement already satisfied: pillow>=8 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from matplotlib->ras-commander) (11.1.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from matplotlib->ras-commander) (3.2.1)\n",
            "Requirement already satisfied: affine in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from rasterstats->ras-commander) (2.4.0)\n",
            "Requirement already satisfied: click>7.1 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from rasterstats->ras-commander) (8.1.8)\n",
            "Requirement already satisfied: cligj>=0.4 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from rasterstats->ras-commander) (0.7.2)\n",
            "Requirement already satisfied: fiona in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from rasterstats->ras-commander) (1.10.1)\n",
            "Requirement already satisfied: rasterio>=1.0 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from rasterstats->ras-commander) (1.4.3)\n",
            "Requirement already satisfied: simplejson in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from rasterstats->ras-commander) (3.20.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from requests->ras-commander) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from requests->ras-commander) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from requests->ras-commander) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from requests->ras-commander) (2025.1.31)\n",
            "Requirement already satisfied: colorama in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from tqdm->ras-commander) (0.4.6)\n",
            "Requirement already satisfied: six>=1.5 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from python-dateutil>=2.8.2->pandas->ras-commander) (1.17.0)\n",
            "Requirement already satisfied: attrs in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from rasterio>=1.0->rasterstats->ras-commander) (25.3.0)\n",
            "Requirement already satisfied: click-plugins in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from rasterio>=1.0->rasterstats->ras-commander) (1.1.1)\n"
          ]
        }
      ],
      "source": [
        "# 1. Install ras-commander from pip (uncomment to install if needed)\n",
        "!pip install ras-commander\n",
        "# This installs ras-commander and all dependencies"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {},
      "outputs": [],
      "source": [
        "# 2. Import all required modules\n",
        "\n",
        "# Import all ras-commander modules\n",
        "from ras_commander import *\n",
        "\n",
        "# Import the required libraries for this notebook\n",
        "import os\n",
        "from pathlib import Path\n",
        "import pandas as pd\n",
        "from IPython import display"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## RAS Commander: Core Concepts\n",
        "\n",
        "RAS Commander is a Python library that provides tools for automating HEC-RAS tasks. It's built with several key design principles:\n",
        "\n",
        "1. **Project-Centric Architecture**: Everything revolves around HEC-RAS projects\n",
        "2. **Two RAS Object Approaches**:\n",
        "   - **Global `ras` Object**: A singleton for simple scripts\n",
        "   - **Custom RAS Objects**: Multiple ras project instances for complex workflows\n",
        "3. **Comprehensive Project Representation**: Each RAS object includes DataFrames for plans, geometries, flows, and boundaries\n",
        "4. **Logging**: Built-in logging to track operations and debug issues\n",
        "5. **HDF Support**: Specialized functions for HDF file access (plan results, geometry, etc.)\n",
        "\n",
        "Let's explore these concepts in practice."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Downloading Example HEC-RAS Projects\n",
        "\n",
        "RAS Commander includes a utility to download and extract example HEC-RAS projects. These are useful for learning and testing:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 11:33:03 - ras_commander.RasExamples - INFO - Found zip file: d:\\GitHub\\ras-commander\\examples\\Example_Projects_6_6.zip\n",
            "2025-04-08 11:33:03 - ras_commander.RasExamples - INFO - Loading project data from CSV...\n",
            "2025-04-08 11:33:03 - ras_commander.RasExamples - INFO - Loaded 68 projects from CSV.\n",
            "2025-04-08 11:33:03 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
            "2025-04-08 11:33:03 - ras_commander.RasExamples - INFO - Extracting project 'Balde Eagle Creek'\n",
            "2025-04-08 11:33:03 - ras_commander.RasExamples - INFO - Project 'Balde Eagle Creek' already exists. Deleting existing folder...\n",
            "2025-04-08 11:33:03 - ras_commander.RasExamples - INFO - Existing folder for project 'Balde Eagle Creek' has been deleted.\n",
            "2025-04-08 11:33:03 - ras_commander.RasExamples - INFO - Successfully extracted project 'Balde Eagle Creek' to d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n",
            "2025-04-08 11:33:03 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
            "2025-04-08 11:33:03 - ras_commander.RasExamples - INFO - Extracting project 'BaldEagleCrkMulti2D'\n",
            "2025-04-08 11:33:07 - ras_commander.RasExamples - INFO - Successfully extracted project 'BaldEagleCrkMulti2D' to d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-08 11:33:07 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
            "2025-04-08 11:33:07 - ras_commander.RasExamples - INFO - Extracting project 'Muncie'\n",
            "2025-04-08 11:33:08 - ras_commander.RasExamples - INFO - Successfully extracted project 'Muncie' to d:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[WindowsPath('d:/GitHub/ras-commander/examples/example_projects/Balde Eagle Creek'), WindowsPath('d:/GitHub/ras-commander/examples/example_projects/BaldEagleCrkMulti2D'), WindowsPath('d:/GitHub/ras-commander/examples/example_projects/Muncie')]\n"
          ]
        }
      ],
      "source": [
        "# Extract specific projects we'll use in this tutorial\n",
        "# This will download them if not present and extract them to the example_projects folder\n",
        "extracted_paths = RasExamples.extract_project([\"Balde Eagle Creek\", \"BaldEagleCrkMulti2D\", \"Muncie\"])\n",
        "print(extracted_paths)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Get Paths for Extracted Example Projects"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Examples directory: d:\\GitHub\\ras-commander\\examples\\example_projects\n",
            "Path d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek exists: True\n",
            "Path d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D exists: True\n",
            "Path d:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie exists: True\n"
          ]
        }
      ],
      "source": [
        "# Get the parent directory of the first extracted path as our examples directory\n",
        "examples_dir = extracted_paths[0].parent\n",
        "print(f\"Examples directory: {examples_dir}\")\n",
        "\n",
        "\n",
        "# Define paths to the extracted projects\n",
        "bald_eagle_path = examples_dir / \"Balde Eagle Creek\"\n",
        "multi_2d_path = examples_dir / \"BaldEagleCrkMulti2D\"\n",
        "muncie_path = examples_dir / \"Muncie\"\n",
        "\n",
        "# Verify the paths exist\n",
        "for path in [bald_eagle_path, multi_2d_path, muncie_path]:\n",
        "    print(f\"Path {path} exists: {path.exists()}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Utility Function to Print RAS Object Data\n",
        "\n",
        "Let's create a utility function to help us explore the contents of RAS objects:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {},
      "outputs": [],
      "source": [
        "def print_ras_object_data(ras_obj, project_name):\n",
        "    \"\"\"Prints comprehensive information about a RAS object\"\"\"\n",
        "    print(f\"\\n{project_name} Data:\")\n",
        "    print(\"=\" * 50)\n",
        "    print(f\"Project Name: {ras_obj.get_project_name()}\")\n",
        "    print(f\"Project Folder: {ras_obj.project_folder}\")\n",
        "    print(f\"PRJ File: {ras_obj.prj_file}\")\n",
        "    print(f\"HEC-RAS Executable Path: {ras_obj.ras_exe_path}\")\n",
        "    \n",
        "    print(\"\\nPlan Files DataFrame (ras.plan_df):\")\n",
        "    with pd.option_context('display.max_columns', None):\n",
        "        display.display(ras_obj.plan_df)\n",
        "    \n",
        "    print(\"\\nFlow Files DataFrame:\")\n",
        "    display.display(ras_obj.flow_df)\n",
        "    \n",
        "    print(\"\\nUnsteady Flow Files DataFrame (ras.unsteady_df):\")\n",
        "    display.display(ras_obj.unsteady_df)\n",
        "    \n",
        "    print(\"\\nGeometry Files DataFrame (ras.geom_df):\")\n",
        "    display.display(ras_obj.geom_df)\n",
        "    \n",
        "    print(\"\\nHDF Entries DataFrame (ras.get_hdf_entries()):\")\n",
        "    display.display(ras_obj.get_hdf_entries())\n",
        "    \n",
        "    print(\"\\nBoundary Conditions DataFrame (ras.boundaries_df):\")\n",
        "    display.display(ras_obj.boundaries_df)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Approach 1: Using the Global `ras` Object\n",
        "\n",
        "The global `ras` object is a singleton instance that persists throughout your script. It's ideal for simple scripts working with a single project.\n",
        "\n",
        "Key characteristics:\n",
        "- It's available as `ras` immediately after import\n",
        "- It's initialized via `init_ras_project()` without saving the return value\n",
        "- It provides access to all project data through the global `ras` variable\n",
        "- It's simple to use but can be problematic in complex scenarios\n",
        "\n",
        "Let's initialize it with the Bald Eagle Creek project:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 11:33:08 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-08 11:33:08 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.rasmap\n",
            "2025-04-08 11:33:08 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "The global 'ras' object is now initialized with the BaldEagle project\n"
          ]
        }
      ],
      "source": [
        "# Initialize the global ras object with Bald Eagle Creek project\n",
        "# Note: This updates the global 'ras' object visible throughout the script\n",
        "# Parameters:\n",
        "#   - project_folder: Path to the HEC-RAS project folder (required)\n",
        "#   - ras_version: HEC-RAS version (e.g. \"6.5\") or path to Ras.exe (required first time)\n",
        "\n",
        "init_ras_project(bald_eagle_path, \"6.5\")\n",
        "print(f\"The global 'ras' object is now initialized with the {ras.project_name} project\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Global RAS Object (Bald Eagle Creek) Data:\n",
            "==================================================\n",
            "Project Name: BaldEagle\n",
            "Project Folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n",
            "PRJ File: D:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.prj\n",
            "HEC-RAS Executable Path: C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.5\\Ras.exe\n",
            "\n",
            "Plan Files DataFrame (ras.plan_df):\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>Run UNet</th>\\n', '      <th>Run Sediment</th>\\n', '      <th>Run PostProcess</th>\\n', '      <th>Run WQNet</th>\\n', '      <th>UNET Use Existing IB Tables</th>\\n', '      <th>UNET D1 Cores</th>\\n', '      <th>UNET D2 Cores</th>\\n', '      <th>PS Cores</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>01</td>\\n', '      <td>Unsteady with Bridges and Dam</td>\\n', '      <td>5.00</td>\\n', '      <td>UnsteadyFlow</td>\\n', '      <td>18FEB1999,0000,24FEB1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>1HOUR</td>\\n', '      <td>1</td>\\n', '      <td>1</td>\\n', '      <td>0</td>\\n', '      <td>1</td>\\n', '      <td>0</td>\\n', '      <td>-1</td>\\n', '      <td>0.0</td>\\n', '      <td>0.0</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>2</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>Steady Flow Run</td>\\n', '      <td>NaN</td>\\n', '      <td>SteadyRun</td>\\n', '      <td>02/18/1999,0000,02/24/1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>NaN</td>\\n', '      <td>1</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  plan_number unsteady_number geometry_number                     Plan Title  \\\n",
              "0          01              02              01  Unsteady with Bridges and Dam   \n",
              "1          02            None              01                Steady Flow Run   \n",
              "\n",
              "  Program Version Short Identifier                  Simulation Date  \\\n",
              "0            5.00     UnsteadyFlow    18FEB1999,0000,24FEB1999,0500   \n",
              "1             NaN        SteadyRun  02/18/1999,0000,02/24/1999,0500   \n",
              "\n",
              "  Computation Interval Mapping Interval Run HTab Run UNet Run Sediment  \\\n",
              "0                 2MIN            1HOUR        1        1            0   \n",
              "1                 2MIN              NaN        1        1          NaN   \n",
              "\n",
              "  Run PostProcess Run WQNet UNET Use Existing IB Tables  UNET D1 Cores  \\\n",
              "0               1         0                          -1            0.0   \n",
              "1               1       NaN                         NaN            NaN   \n",
              "\n",
              "   UNET D2 Cores PS Cores DSS File Friction Slope Method HDF_Results_Path  \\\n",
              "0            0.0     None      dss                     2             None   \n",
              "1            NaN     None      dss                     1             None   \n",
              "\n",
              "  Geom File                                          Geom Path Flow File  \\\n",
              "0        01  d:\\GitHub\\ras-commander\\examples\\example_proje...        02   \n",
              "1        01  d:\\GitHub\\ras-commander\\examples\\example_proje...        02   \n",
              "\n",
              "                                           Flow Path  \\\n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "\n",
              "                                           full_path  \n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...  "
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Flow Files DataFrame:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>flow_number</th>\\n', '      <th>full_path</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>None</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>None</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  flow_number                                          full_path  \\\n",
              "0          02  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "1          01  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "\n",
              "  unsteady_number geometry_number  \n",
              "0            None            None  \n",
              "1            None            None  "
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Unsteady Flow Files DataFrame (ras.unsteady_df):\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>unsteady_number</th>\\n', '      <th>full_path</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Flow Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Use Restart</th>\\n', '      <th>Precipitation Mode</th>\\n', '      <th>Wind Mode</th>\\n', '      <th>Met BC=Precipitation|Mode</th>\\n', '      <th>Met BC=Evapotranspiration|Mode</th>\\n', '      <th>Met BC=Precipitation|Expanded View</th>\\n', '      <th>Met BC=Precipitation|Constant Units</th>\\n', '      <th>Met BC=Precipitation|Gridded Source</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>Flow Hydrograph 2</td>\\n', '      <td>6.30</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>None</td>\\n', '      <td>None</td>\\n', '      <td>0</td>\\n', '      <td>mm/hr</td>\\n', '      <td>DSS</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  unsteady_number                                          full_path  \\\n",
              "0              02  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "\n",
              "  geometry_number         Flow Title Program Version Use Restart  \\\n",
              "0            None  Flow Hydrograph 2            6.30           0   \n",
              "\n",
              "  Precipitation Mode       Wind Mode Met BC=Precipitation|Mode  \\\n",
              "0            Disable  No Wind Forces                      None   \n",
              "\n",
              "  Met BC=Evapotranspiration|Mode Met BC=Precipitation|Expanded View  \\\n",
              "0                           None                                  0   \n",
              "\n",
              "  Met BC=Precipitation|Constant Units Met BC=Precipitation|Gridded Source  \n",
              "0                               mm/hr                                 DSS  "
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Geometry Files DataFrame (ras.geom_df):\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>geom_file</th>\\n', '      <th>geom_number</th>\\n', '      <th>full_path</th>\\n', '      <th>hdf_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>g01</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  geom_file geom_number                                          full_path  \\\n",
              "0       g01          01  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "\n",
              "                                            hdf_path  \n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...  "
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "HDF Entries DataFrame (ras.get_hdf_entries()):\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>UNET D2 Cores</th>\\n', '      <th>PS Cores</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    \n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [plan_number, unsteady_number, geometry_number, Plan Title, Program Version, Short Identifier, Simulation Date, Computation Interval, Mapping Interval, Run HTab, Run UNet, Run Sediment, Run PostProcess, Run WQNet, UNET Use Existing IB Tables, UNET D1 Cores, UNET D2 Cores, PS Cores, DSS File, Friction Slope Method, HDF_Results_Path, Geom File, Geom Path, Flow File, Flow Path, full_path]\n",
              "Index: []\n",
              "\n",
              "[0 rows x 26 columns]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Boundary Conditions DataFrame (ras.boundaries_df):\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>unsteady_number</th>\\n', '      <th>boundary_condition_number</th>\\n', '      <th>river_reach_name</th>\\n', '      <th>river_station</th>\\n', '      <th>storage_area_name</th>\\n', '      <th>pump_station_name</th>\\n', '      <th>bc_type</th>\\n', '      <th>hydrograph_type</th>\\n', '      <th>Interval</th>\\n', '      <th>DSS Path</th>\\n', '      <th>...</th>\\n', '      <th>Flow Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Use Restart</th>\\n', '      <th>Precipitation Mode</th>\\n', '      <th>Wind Mode</th>\\n', '      <th>Met BC=Precipitation|Mode</th>\\n', '      <th>Met BC=Evapotranspiration|Mode</th>\\n', '      <th>Met BC=Precipitation|Expanded View</th>\\n', '      <th>Met BC=Precipitation|Constant Units</th>\\n', '      <th>Met BC=Precipitation|Gridded Source</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>02</td>\\n', '      <td>1</td>\\n', '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>138154.4</td>\\n', '      <td></td>\\n', '      <td>Flow Hydrograph</td>\\n', '      <td>Flow Hydrograph</td>\\n', '      <td>1HOUR</td>\\n', '      <td></td>\\n', '      <td>...</td>\\n', '      <td>Flow Hydrograph 2</td>\\n', '      <td>6.30</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>None</td>\\n', '      <td>None</td>\\n', '      <td>0</td>\\n', '      <td>mm/hr</td>\\n', '      <td>DSS</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>02</td>\\n', '      <td>2</td>\\n', '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>81500</td>\\n', '      <td></td>\\n', '      <td>Gate Opening</td>\\n', '      <td>None</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>...</td>\\n', '      <td>Flow Hydrograph 2</td>\\n', '      <td>6.30</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>None</td>\\n', '      <td>None</td>\\n', '      <td>0</td>\\n', '      <td>mm/hr</td>\\n', '      <td>DSS</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>02</td>\\n', '      <td>3</td>\\n', '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>659.942</td>\\n', '      <td></td>\\n', '      <td>Unknown</td>\\n', '      <td>None</td>\\n', '      <td>NaN</td>\\n', '      <td></td>\\n', '      <td>...</td>\\n', '      <td>Flow Hydrograph 2</td>\\n', '      <td>6.30</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>None</td>\\n', '      <td>None</td>\\n', '      <td>0</td>\\n', '      <td>mm/hr</td>\\n', '      <td>DSS</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  unsteady_number  boundary_condition_number river_reach_name river_station  \\\n",
              "0              02                          1       Bald Eagle       Loc Hav   \n",
              "1              02                          2       Bald Eagle       Loc Hav   \n",
              "2              02                          3       Bald Eagle       Loc Hav   \n",
              "\n",
              "  storage_area_name pump_station_name          bc_type  hydrograph_type  \\\n",
              "0          138154.4                    Flow Hydrograph  Flow Hydrograph   \n",
              "1             81500                       Gate Opening             None   \n",
              "2           659.942                            Unknown             None   \n",
              "\n",
              "  Interval DSS Path  ...         Flow Title Program Version Use Restart  \\\n",
              "0    1HOUR           ...  Flow Hydrograph 2            6.30           0   \n",
              "1      NaN      NaN  ...  Flow Hydrograph 2            6.30           0   \n",
              "2      NaN           ...  Flow Hydrograph 2            6.30           0   \n",
              "\n",
              "  Precipitation Mode       Wind Mode  Met BC=Precipitation|Mode  \\\n",
              "0            Disable  No Wind Forces                       None   \n",
              "1            Disable  No Wind Forces                       None   \n",
              "2            Disable  No Wind Forces                       None   \n",
              "\n",
              "  Met BC=Evapotranspiration|Mode Met BC=Precipitation|Expanded View  \\\n",
              "0                           None                                  0   \n",
              "1                           None                                  0   \n",
              "2                           None                                  0   \n",
              "\n",
              "  Met BC=Precipitation|Constant Units Met BC=Precipitation|Gridded Source  \n",
              "0                               mm/hr                                 DSS  \n",
              "1                               mm/hr                                 DSS  \n",
              "2                               mm/hr                                 DSS  \n",
              "\n",
              "[3 rows x 29 columns]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Explore the global ras object with our utility function\n",
        "print_ras_object_data(ras, \"Global RAS Object (Bald Eagle Creek)\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Understanding the RAS Object Structure\n",
        "\n",
        "Each RAS object contains several important components:\n",
        "\n",
        "1. **Project Metadata**:\n",
        "   - `project_name`: Name of the HEC-RAS project\n",
        "   - `project_folder`: Directory containing project files\n",
        "   - `prj_file`: Path to the main .prj file\n",
        "   - `ras_exe_path`: Path to the HEC-RAS executable\n",
        "\n",
        "2. **Project DataFrames**:\n",
        "   - `plan_df`: Information about all plan files (.p*)\n",
        "   - `flow_df`: Information about all steady flow files (.f*)\n",
        "   - `unsteady_df`: Information about all unsteady flow files (.u*)\n",
        "   - `geom_df`: Information about all geometry files (.g*)\n",
        "   - `boundaries_df`: Information about all boundary conditions\n",
        "\n",
        "3. **Methods for Data Access**:\n",
        "   - `get_plan_entries()`: Get plan file information\n",
        "   - `get_flow_entries()`: Get flow file information\n",
        "   - `get_unsteady_entries()`: Get unsteady flow file information \n",
        "   - `get_geom_entries()`: Get geometry file information\n",
        "   - `get_hdf_entries()`: Get HDF file paths for result files\n",
        "   - `get_boundary_conditions()`: Get boundary condition details\n",
        "\n",
        "Let's see how to access specific information from these components:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "First plan number: 01\n",
            "Plan path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01\n",
            "Geometry file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01\n"
          ]
        }
      ],
      "source": [
        "# Get the first plan's details\n",
        "if not ras.plan_df.empty:\n",
        "    first_plan = ras.plan_df.iloc[0]\n",
        "    print(f\"First plan number: {first_plan['plan_number']}\")\n",
        "    print(f\"Plan path: {first_plan['full_path']}\")\n",
        "    \n",
        "    # Get the geometry file for this plan\n",
        "    geom_id = first_plan.get('Geom File', '').replace('g', '')\n",
        "    if geom_id:\n",
        "        geom_info = ras.geom_df[ras.geom_df['geom_number'] == geom_id]\n",
        "        if not geom_info.empty:\n",
        "            print(f\"Geometry file: {geom_info.iloc[0]['full_path']}\")\n",
        "    \n",
        "    # Get the HDF results file for this plan (if exists)\n",
        "    if 'HDF_Results_Path' in first_plan and first_plan['HDF_Results_Path']:\n",
        "        print(f\"Results file: {first_plan['HDF_Results_Path']}\")\n",
        "else:\n",
        "    print(\"No plans found in the project.\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Working with Boundary Conditions\n",
        "\n",
        "Boundary conditions define the inputs and outputs of your model. Let's see how to access boundary condition information:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>unsteady_number</th>\\n', '      <th>boundary_condition_number</th>\\n', '      <th>river_reach_name</th>\\n', '      <th>river_station</th>\\n', '      <th>storage_area_name</th>\\n', '      <th>pump_station_name</th>\\n', '      <th>bc_type</th>\\n', '      <th>hydrograph_type</th>\\n', '      <th>Interval</th>\\n', '      <th>DSS Path</th>\\n', '      <th>...</th>\\n', '      <th>Flow Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Use Restart</th>\\n', '      <th>Precipitation Mode</th>\\n', '      <th>Wind Mode</th>\\n', '      <th>Met BC=Precipitation|Mode</th>\\n', '      <th>Met BC=Evapotranspiration|Mode</th>\\n', '      <th>Met BC=Precipitation|Expanded View</th>\\n', '      <th>Met BC=Precipitation|Constant Units</th>\\n', '      <th>Met BC=Precipitation|Gridded Source</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>02</td>\\n', '      <td>1</td>\\n', '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>138154.4</td>\\n', '      <td></td>\\n', '      <td>Flow Hydrograph</td>\\n', '      <td>Flow Hydrograph</td>\\n', '      <td>1HOUR</td>\\n', '      <td></td>\\n', '      <td>...</td>\\n', '      <td>Flow Hydrograph 2</td>\\n', '      <td>6.30</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>None</td>\\n', '      <td>None</td>\\n', '      <td>0</td>\\n', '      <td>mm/hr</td>\\n', '      <td>DSS</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>02</td>\\n', '      <td>2</td>\\n', '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>81500</td>\\n', '      <td></td>\\n', '      <td>Gate Opening</td>\\n', '      <td>None</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>...</td>\\n', '      <td>Flow Hydrograph 2</td>\\n', '      <td>6.30</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>None</td>\\n', '      <td>None</td>\\n', '      <td>0</td>\\n', '      <td>mm/hr</td>\\n', '      <td>DSS</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>02</td>\\n', '      <td>3</td>\\n', '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>659.942</td>\\n', '      <td></td>\\n', '      <td>Unknown</td>\\n', '      <td>None</td>\\n', '      <td>NaN</td>\\n', '      <td></td>\\n', '      <td>...</td>\\n', '      <td>Flow Hydrograph 2</td>\\n', '      <td>6.30</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>None</td>\\n', '      <td>None</td>\\n', '      <td>0</td>\\n', '      <td>mm/hr</td>\\n', '      <td>DSS</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  unsteady_number  boundary_condition_number river_reach_name river_station  \\\\\\n', '0              02                          1       Bald Eagle       Loc Hav   \\n', '1              02                          2       Bald Eagle       Loc Hav   \\n', '2              02                          3       Bald Eagle       Loc Hav   \\n', '\\n', '  storage_area_name pump_station_name          bc_type  hydrograph_type  \\\\\\n', '0          138154.4                    Flow Hydrograph  Flow Hydrograph   \\n', '1             81500                       Gate Opening             None   \\n', '2           659.942                            Unknown             None   \\n', '\\n', '  Interval DSS Path  ...         Flow Title Program Version Use Restart  \\\\\\n', '0    1HOUR           ...  Flow Hydrograph 2            6.30           0   \\n', '1      NaN      NaN  ...  Flow Hydrograph 2            6.30           0   \\n', '2      NaN           ...  Flow Hydrograph 2            6.30           0   \\n', '\\n', '  Precipitation Mode       Wind Mode  Met BC=Precipitation|Mode  \\\\\\n', '0            Disable  No Wind Forces                       None   \\n', '1            Disable  No Wind Forces                       None   \\n', '2            Disable  No Wind Forces                       None   \\n', '\\n', '  Met BC=Evapotranspiration|Mode Met BC=Precipitation|Expanded View  \\\\\\n', '0                           None                                  0   \\n', '1                           None                                  0   \\n', '2                           None                                  0   \\n', '\\n', '  Met BC=Precipitation|Constant Units Met BC=Precipitation|Gridded Source  \\n', '0                               mm/hr                                 DSS  \\n', '1                               mm/hr                                 DSS  \\n', '2                               mm/hr                                 DSS  \\n', '\\n', '[3 rows x 29 columns]']"
          },
          "execution_count": 9,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# View the boundary conditions DataFrame\n",
        "ras.boundaries_df "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Approach 2: Using Custom RAS Objects\n",
        "\n",
        "For more complex scripts or when working with multiple projects, it's better to create and use separate RAS objects. This approach:\n",
        "\n",
        "- Creates independent RAS objects for each project\n",
        "- Avoids overwriting the global `ras` object\n",
        "- Provides clearer separation between projects\n",
        "- Allows working with multiple projects simultaneously\n",
        "- Requires saving the return value from `init_ras_project()`\n",
        "\n",
        "Let's initialize multiple projects with custom RAS objects:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 11:33:08 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-08 11:33:08 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-08 11:33:08 - ras_commander.RasPrj - INFO - Global 'ras' object also updated to match the new project.\n",
            "2025-04-08 11:33:08 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-08 11:33:09 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie\\Muncie.rasmap\n",
            "2025-04-08 11:33:09 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie\\Muncie.rasmap\n",
            "2025-04-08 11:33:09 - ras_commander.RasPrj - INFO - Global 'ras' object also updated to match the new project.\n",
            "2025-04-08 11:33:09 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Multi2D project initialized with its own RAS object\n",
            "\n",
            "Muncie project initialized with its own RAS object\n",
            "\n",
            "Global 'ras' object now points to: Muncie since it was the last one initialized.  Avoid the global object when using multiple projects.\n"
          ]
        }
      ],
      "source": [
        "# Initialize multiple project instances with custom RAS objects\n",
        "# Note: This also updates the global 'ras' object each time, but we'll use the custom instances\n",
        "# Parameters remain the same as before\n",
        "multi_2d_project = RasPrj()\n",
        "init_ras_project(multi_2d_path, \"6.5\", ras_object=multi_2d_project)\n",
        "print(f\"\\nMulti2D project initialized with its own RAS object\")\n",
        "\n",
        "muncie_project = RasPrj()\n",
        "init_ras_project(muncie_path, \"6.5\", ras_object=muncie_project)\n",
        "print(f\"\\nMuncie project initialized with its own RAS object\")\n",
        "\n",
        "# Note that the global 'ras' object now points to the Muncie project\n",
        "# The global 'ras' object gets overwritten every time a project is initialized ,\n",
        "print(f\"\\nGlobal 'ras' object now points to: {ras.project_name} since it was the last one initialized.  Avoid the global object when using multiple projects.\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Exploring Multiple Projects\n",
        "\n",
        "Now we have three RAS objects:\n",
        "- `multi_2d_project`: Our custom object for the Multi2D project\n",
        "- `muncie_project`: Our custom object for the Muncie project\n",
        "- `ras`: The global object (which now points to Muncie)\n",
        "\n",
        "Let's examine the Multi2D project:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>UNET D2 SolverType</th>\\n', '      <th>UNET D2 Name</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>13</td>\\n', '      <td>07</td>\\n', '      <td>06</td>\\n', '      <td>PMF with Multi 2D Areas</td>\\n', '      <td>5.10</td>\\n', '      <td>PMF Multi 2D</td>\\n', '      <td>01JAN1999,1200,04JAN1999,1200</td>\\n', '      <td>30SEC</td>\\n', '      <td>30MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>Pardiso (Direct)</td>\\n', '      <td>193</td>\\n', '      <td>None</td>\\n', '      <td>06</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>07</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>15</td>\\n', '      <td>12</td>\\n', '      <td>08</td>\\n', '      <td>1d-2D Dambreak Refined Grid</td>\\n', '      <td>5.10</td>\\n', '      <td>1D-2D Refined Grid</td>\\n', '      <td>01JAN1999,1200,04JAN1999,1200</td>\\n', '      <td>20SEC</td>\\n', '      <td>5MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>None</td>\\n', '      <td>08</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>12</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>17</td>\\n', '      <td>09</td>\\n', '      <td>10</td>\\n', '      <td>2D to 1D No Dam</td>\\n', '      <td>5.00</td>\\n', '      <td>2D to 1D No Dam</td>\\n', '      <td>01JAN1999,1200,06JAN1999,1200</td>\\n', '      <td>1MIN</td>\\n', '      <td>5MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>Upstream2D</td>\\n', '      <td>None</td>\\n', '      <td>10</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>09</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>18</td>\\n', '      <td>10</td>\\n', '      <td>11</td>\\n', '      <td>2D to 2D Run</td>\\n', '      <td>5.00</td>\\n', '      <td>2D to 2D Run</td>\\n', '      <td>01JAN1999,1200,04JAN1999,1200</td>\\n', '      <td>20SEC</td>\\n', '      <td>5MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>None</td>\\n', '      <td>11</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>10</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>19</td>\\n', '      <td>11</td>\\n', '      <td>12</td>\\n', '      <td>SA to 2D Dam Break Run</td>\\n', '      <td>5.00</td>\\n', '      <td>SA to 2D Dam Break</td>\\n', '      <td>01JAN1999,1200,04JAN1999,1200</td>\\n', '      <td>20SEC</td>\\n', '      <td>10MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>None</td>\\n', '      <td>12</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>11</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "   plan_number unsteady_number geometry_number  \\\n",
              "0           13              07              06   \n",
              "1           15              12              08   \n",
              "2           17              09              10   \n",
              "3           18              10              11   \n",
              "4           19              11              12   \n",
              "5           03              13              09   \n",
              "6           04              01              13   \n",
              "7           02              01              01   \n",
              "8           01              01              01   \n",
              "9           05              02              03   \n",
              "10          06              03              09   \n",
              "\n",
              "                                 Plan Title Program Version  \\\n",
              "0                   PMF with Multi 2D Areas            5.10   \n",
              "1               1d-2D Dambreak Refined Grid            5.10   \n",
              "2                           2D to 1D No Dam            5.00   \n",
              "3                              2D to 2D Run            5.00   \n",
              "4                    SA to 2D Dam Break Run            5.00   \n",
              "5   Single 2D Area - Internal Dam Structure            5.04   \n",
              "6   SA to 2D Area Conn - 2D Levee Structure            5.00   \n",
              "7                  SA to Detailed 2D Breach            5.10   \n",
              "8              SA to Detailed 2D Breach FEQ            5.03   \n",
              "9           Single 2D area with Bridges FEQ            5.10   \n",
              "10            Gridded Precip - Infiltration            6.00   \n",
              "\n",
              "            Short Identifier                Simulation Date  \\\n",
              "0               PMF Multi 2D  01JAN1999,1200,04JAN1999,1200   \n",
              "1         1D-2D Refined Grid  01JAN1999,1200,04JAN1999,1200   \n",
              "2            2D to 1D No Dam  01JAN1999,1200,06JAN1999,1200   \n",
              "3               2D to 2D Run  01JAN1999,1200,04JAN1999,1200   \n",
              "4         SA to 2D Dam Break  01JAN1999,1200,04JAN1999,1200   \n",
              "5                  Single 2D  01JAN1999,1200,04JAN1999,1200   \n",
              "6             2D Levee Struc  01JAN1999,1200,04JAN1999,1200   \n",
              "7             SA-2D Det Brch  01JAN1999,1200,04JAN1999,1200   \n",
              "8              SA-2D Det FEQ  01JAN1999,1200,04JAN1999,1200   \n",
              "9      Single 2D Bridges FEQ  01JAN1999,1200,04JAN1999,1200   \n",
              "10  Grid Precip Infiltration  09SEP2018,0000,14SEP2018,0000   \n",
              "\n",
              "   Computation Interval Mapping Interval Run HTab  ... DSS File  \\\n",
              "0                 30SEC            30MIN        1  ...      dss   \n",
              "1                 20SEC             5MIN        1  ...      dss   \n",
              "2                  1MIN             5MIN        1  ...      dss   \n",
              "3                 20SEC             5MIN        1  ...      dss   \n",
              "4                 20SEC            10MIN        1  ...      dss   \n",
              "5                 30SEC            10MIN        1  ...      dss   \n",
              "6                 20SEC             5MIN        1  ...      dss   \n",
              "7                 10SEC             5MIN        1  ...      dss   \n",
              "8                  5SEC             5MIN        1  ...      dss   \n",
              "9                  5SEC            10MIN       -1  ...      dss   \n",
              "10                20SEC            10MIN       -1  ...      dss   \n",
              "\n",
              "   Friction Slope Method UNET D2 SolverType UNET D2 Name HDF_Results_Path  \\\n",
              "0                      1   Pardiso (Direct)          193             None   \n",
              "1                      1                NaN  BaldEagleCr             None   \n",
              "2                      1                NaN   Upstream2D             None   \n",
              "3                      1                NaN  BaldEagleCr             None   \n",
              "4                      1                NaN  BaldEagleCr             None   \n",
              "5                      1                NaN  BaldEagleCr             None   \n",
              "6                      1                NaN  BaldEagleCr             None   \n",
              "7                      1   Pardiso (Direct)  BaldEagleCr             None   \n",
              "8                      1                NaN  BaldEagleCr             None   \n",
              "9                      1   PARDISO (Direct)  BaldEagleCr             None   \n",
              "10                     1   Pardiso (Direct)  BaldEagleCr             None   \n",
              "\n",
              "   Geom File                                          Geom Path  Flow File  \\\n",
              "0         06  d:\\GitHub\\ras-commander\\examples\\example_proje...         07   \n",
              "1         08  d:\\GitHub\\ras-commander\\examples\\example_proje...         12   \n",
              "2         10  d:\\GitHub\\ras-commander\\examples\\example_proje...         09   \n",
              "3         11  d:\\GitHub\\ras-commander\\examples\\example_proje...         10   \n",
              "4         12  d:\\GitHub\\ras-commander\\examples\\example_proje...         11   \n",
              "5         09  d:\\GitHub\\ras-commander\\examples\\example_proje...         13   \n",
              "6         13  d:\\GitHub\\ras-commander\\examples\\example_proje...         01   \n",
              "7         01  d:\\GitHub\\ras-commander\\examples\\example_proje...         01   \n",
              "8         01  d:\\GitHub\\ras-commander\\examples\\example_proje...         01   \n",
              "9         03  d:\\GitHub\\ras-commander\\examples\\example_proje...         02   \n",
              "10        09  d:\\GitHub\\ras-commander\\examples\\example_proje...         03   \n",
              "\n",
              "                                            Flow Path  \\\n",
              "0   d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "1   d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "2   d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "3   d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "4   d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "5   d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "6   d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "7   d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "8   d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "9   d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "10  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "\n",
              "                                            full_path  \n",
              "0   d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "1   d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "2   d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "3   d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "4   d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "5   d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "6   d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "7   d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "8   d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "9   d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "10  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "\n",
              "[11 rows x 29 columns]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "display.display(multi_2d_project.plan_df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Multi2D Project Data:\n",
            "==================================================\n",
            "Project Name: BaldEagleDamBrk\n",
            "Project Folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "PRJ File: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.prj\n",
            "HEC-RAS Executable Path: C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.5\\Ras.exe\n",
            "\n",
            "Plan Files DataFrame (ras.plan_df):\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>Run UNet</th>\\n', '      <th>Run Sediment</th>\\n', '      <th>Run PostProcess</th>\\n', '      <th>Run WQNet</th>\\n', '      <th>UNET Use Existing IB Tables</th>\\n', '      <th>UNET 1D Methodology</th>\\n', '      <th>UNET D1 Cores</th>\\n', '      <th>UNET D2 Cores</th>\\n', '      <th>PS Cores</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>UNET D2 SolverType</th>\\n', '      <th>UNET D2 Name</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>13</td>\\n', '      <td>07</td>\\n', '      <td>06</td>\\n', '      <td>PMF with Multi 2D Areas</td>\\n', '      <td>5.10</td>\\n', '      <td>PMF Multi 2D</td>\\n', '      <td>01JAN1999,1200,04JAN1999,1200</td>\\n', '      <td>30SEC</td>\\n', '      <td>30MIN</td>\\n', '      <td>1</td>\\n', '      <td>1</td>\\n', '      <td>0</td>\\n', '      <td>1</td>\\n', '      <td>0</td>\\n', '      <td>-1</td>\\n', '      <td>Finite Difference</td>\\n', '      <td>0</td>\\n', '      <td>8</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>Pardiso (Direct)</td>\\n', '      <td>193</td>\\n', '      <td>None</td>\\n', '      <td>06</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>07</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>15</td>\\n', '      <td>12</td>\\n', '      <td>08</td>\\n', '      <td>1d-2D Dambreak Refined Grid</td>\\n', '      <td>5.10</td>\\n', '      <td>1D-2D Refined Grid</td>\\n', '      <td>01JAN1999,1200,04JAN1999,1200</td>\\n', '      <td>20SEC</td>\\n', '      <td>5MIN</td>\\n', '      <td>1</td>\\n', '      <td>1</td>\\n', '      <td>0</td>\\n', '      <td>1</td>\\n', '      <td>0</td>\\n', '      <td>-1</td>\\n', '      <td>Finite Difference</td>\\n', '      <td>0</td>\\n', '      <td>6</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>None</td>\\n', '      <td>08</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>12</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>17</td>\\n', '      <td>09</td>\\n', '      <td>10</td>\\n', '      <td>2D to 1D No Dam</td>\\n', '      <td>5.00</td>\\n', '      <td>2D to 1D No Dam</td>\\n', '      <td>01JAN1999,1200,06JAN1999,1200</td>\\n', '      <td>1MIN</td>\\n', '      <td>5MIN</td>\\n', '      <td>1</td>\\n', '      <td>1</td>\\n', '      <td>0</td>\\n', '      <td>1</td>\\n', '      <td>0</td>\\n', '      <td>-1</td>\\n', '      <td>NaN</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>Upstream2D</td>\\n', '      <td>None</td>\\n', '      <td>10</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>09</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>18</td>\\n', '      <td>10</td>\\n', '      <td>11</td>\\n', '      <td>2D to 2D Run</td>\\n', '      <td>5.00</td>\\n', '      <td>2D to 2D Run</td>\\n', '      <td>01JAN1999,1200,04JAN1999,1200</td>\\n', '      <td>20SEC</td>\\n', '      <td>5MIN</td>\\n', '      <td>1</td>\\n', '      <td>1</td>\\n', '      <td>0</td>\\n', '      <td>1</td>\\n', '      <td>0</td>\\n', '      <td>-1</td>\\n', '      <td>NaN</td>\\n', '      <td>0</td>\\n', '      <td>8</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>None</td>\\n', '      <td>11</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>10</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>19</td>\\n', '      <td>11</td>\\n', '      <td>12</td>\\n', '      <td>SA to 2D Dam Break Run</td>\\n', '      <td>5.00</td>\\n', '      <td>SA to 2D Dam Break</td>\\n', '      <td>01JAN1999,1200,04JAN1999,1200</td>\\n', '      <td>20SEC</td>\\n', '      <td>10MIN</td>\\n', '      <td>1</td>\\n', '      <td>1</td>\\n', '      <td>0</td>\\n', '      <td>1</td>\\n', '      <td>0</td>\\n', '      <td>-1</td>\\n', '      <td>NaN</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>None</td>\\n', '      <td>12</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>11</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "   plan_number unsteady_number geometry_number  \\\n",
              "0           13              07              06   \n",
              "1           15              12              08   \n",
              "2           17              09              10   \n",
              "3           18              10              11   \n",
              "4           19              11              12   \n",
              "5           03              13              09   \n",
              "6           04              01              13   \n",
              "7           02              01              01   \n",
              "8           01              01              01   \n",
              "9           05              02              03   \n",
              "10          06              03              09   \n",
              "\n",
              "                                 Plan Title Program Version  \\\n",
              "0                   PMF with Multi 2D Areas            5.10   \n",
              "1               1d-2D Dambreak Refined Grid            5.10   \n",
              "2                           2D to 1D No Dam            5.00   \n",
              "3                              2D to 2D Run            5.00   \n",
              "4                    SA to 2D Dam Break Run            5.00   \n",
              "5   Single 2D Area - Internal Dam Structure            5.04   \n",
              "6   SA to 2D Area Conn - 2D Levee Structure            5.00   \n",
              "7                  SA to Detailed 2D Breach            5.10   \n",
              "8              SA to Detailed 2D Breach FEQ            5.03   \n",
              "9           Single 2D area with Bridges FEQ            5.10   \n",
              "10            Gridded Precip - Infiltration            6.00   \n",
              "\n",
              "            Short Identifier                Simulation Date  \\\n",
              "0               PMF Multi 2D  01JAN1999,1200,04JAN1999,1200   \n",
              "1         1D-2D Refined Grid  01JAN1999,1200,04JAN1999,1200   \n",
              "2            2D to 1D No Dam  01JAN1999,1200,06JAN1999,1200   \n",
              "3               2D to 2D Run  01JAN1999,1200,04JAN1999,1200   \n",
              "4         SA to 2D Dam Break  01JAN1999,1200,04JAN1999,1200   \n",
              "5                  Single 2D  01JAN1999,1200,04JAN1999,1200   \n",
              "6             2D Levee Struc  01JAN1999,1200,04JAN1999,1200   \n",
              "7             SA-2D Det Brch  01JAN1999,1200,04JAN1999,1200   \n",
              "8              SA-2D Det FEQ  01JAN1999,1200,04JAN1999,1200   \n",
              "9      Single 2D Bridges FEQ  01JAN1999,1200,04JAN1999,1200   \n",
              "10  Grid Precip Infiltration  09SEP2018,0000,14SEP2018,0000   \n",
              "\n",
              "   Computation Interval Mapping Interval Run HTab Run UNet Run Sediment  \\\n",
              "0                 30SEC            30MIN        1        1            0   \n",
              "1                 20SEC             5MIN        1        1            0   \n",
              "2                  1MIN             5MIN        1        1            0   \n",
              "3                 20SEC             5MIN        1        1            0   \n",
              "4                 20SEC            10MIN        1        1            0   \n",
              "5                 30SEC            10MIN        1        1            0   \n",
              "6                 20SEC             5MIN        1        1            0   \n",
              "7                 10SEC             5MIN        1        1            0   \n",
              "8                  5SEC             5MIN        1        1            0   \n",
              "9                  5SEC            10MIN       -1       -1            0   \n",
              "10                20SEC            10MIN       -1       -1            0   \n",
              "\n",
              "   Run PostProcess Run WQNet UNET Use Existing IB Tables UNET 1D Methodology  \\\n",
              "0                1         0                          -1   Finite Difference   \n",
              "1                1         0                          -1   Finite Difference   \n",
              "2                1         0                          -1                 NaN   \n",
              "3                1         0                          -1                 NaN   \n",
              "4                1         0                          -1                 NaN   \n",
              "5                1         0                          -1   Finite Difference   \n",
              "6                1         0                          -1                 NaN   \n",
              "7                1         0                          -1   Finite Difference   \n",
              "8                1         0                          -1                 NaN   \n",
              "9               -1         0                          -1   Finite Difference   \n",
              "10              -1         0                          -1   Finite Difference   \n",
              "\n",
              "    UNET D1 Cores  UNET D2 Cores PS Cores DSS File Friction Slope Method  \\\n",
              "0               0              8     None      dss                     1   \n",
              "1               0              6     None      dss                     1   \n",
              "2               0              0     None      dss                     1   \n",
              "3               0              8     None      dss                     1   \n",
              "4               0              0     None      dss                     1   \n",
              "5               0             10     None      dss                     1   \n",
              "6               0              6     None      dss                     1   \n",
              "7               0              0     None      dss                     1   \n",
              "8               0              0     None      dss                     1   \n",
              "9               0             10     None      dss                     1   \n",
              "10              0              0     None      dss                     1   \n",
              "\n",
              "   UNET D2 SolverType UNET D2 Name HDF_Results_Path Geom File  \\\n",
              "0    Pardiso (Direct)          193             None        06   \n",
              "1                 NaN  BaldEagleCr             None        08   \n",
              "2                 NaN   Upstream2D             None        10   \n",
              "3                 NaN  BaldEagleCr             None        11   \n",
              "4                 NaN  BaldEagleCr             None        12   \n",
              "5                 NaN  BaldEagleCr             None        09   \n",
              "6                 NaN  BaldEagleCr             None        13   \n",
              "7    Pardiso (Direct)  BaldEagleCr             None        01   \n",
              "8                 NaN  BaldEagleCr             None        01   \n",
              "9    PARDISO (Direct)  BaldEagleCr             None        03   \n",
              "10   Pardiso (Direct)  BaldEagleCr             None        09   \n",
              "\n",
              "                                            Geom Path Flow File  \\\n",
              "0   d:\\GitHub\\ras-commander\\examples\\example_proje...        07   \n",
              "1   d:\\GitHub\\ras-commander\\examples\\example_proje...        12   \n",
              "2   d:\\GitHub\\ras-commander\\examples\\example_proje...        09   \n",
              "3   d:\\GitHub\\ras-commander\\examples\\example_proje...        10   \n",
              "4   d:\\GitHub\\ras-commander\\examples\\example_proje...        11   \n",
              "5   d:\\GitHub\\ras-commander\\examples\\example_proje...        13   \n",
              "6   d:\\GitHub\\ras-commander\\examples\\example_proje...        01   \n",
              "7   d:\\GitHub\\ras-commander\\examples\\example_proje...        01   \n",
              "8   d:\\GitHub\\ras-commander\\examples\\example_proje...        01   \n",
              "9   d:\\GitHub\\ras-commander\\examples\\example_proje...        02   \n",
              "10  d:\\GitHub\\ras-commander\\examples\\example_proje...        03   \n",
              "\n",
              "                                            Flow Path  \\\n",
              "0   d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "1   d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "2   d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "3   d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "4   d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "5   d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "6   d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "7   d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "8   d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "9   d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "10  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "\n",
              "                                            full_path  \n",
              "0   d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "1   d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "2   d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "3   d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "4   d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "5   d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "6   d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "7   d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "8   d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "9   d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "10  d:\\GitHub\\ras-commander\\examples\\example_proje...  "
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Flow Files DataFrame:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    \n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: []\n",
              "Index: []"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Unsteady Flow Files DataFrame (ras.unsteady_df):\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>unsteady_number</th>\\n', '      <th>full_path</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Flow Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Use Restart</th>\\n', '      <th>Precipitation Mode</th>\\n', '      <th>Wind Mode</th>\\n', '      <th>Met BC=Precipitation|Mode</th>\\n', '      <th>Met BC=Evapotranspiration|Mode</th>\\n', '      <th>Met BC=Precipitation|Expanded View</th>\\n', '      <th>Met BC=Precipitation|Constant Units</th>\\n', '      <th>Met BC=Precipitation|Gridded Source</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>07</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>PMF with Multi 2D Areas</td>\\n', '      <td>5.00</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>08</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>PMF for Upstream 2D</td>\\n', '      <td>4.20</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>09</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>Upstream 2D</td>\\n', '      <td>5.00</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>10</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>1972 Flood Event - 2D to 2D Run</td>\\n', '      <td>5.00</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>11</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>1972 Flood Event - SA to 2D Run</td>\\n', '      <td>5.00</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  unsteady_number                                          full_path  \\\n",
              "0              07  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "1              08  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "2              09  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "3              10  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "4              11  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "5              12  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "6              13  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "7              01  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "8              02  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "9              03  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "\n",
              "  geometry_number                            Flow Title Program Version  \\\n",
              "0            None               PMF with Multi 2D Areas            5.00   \n",
              "1            None                   PMF for Upstream 2D            4.20   \n",
              "2            None                           Upstream 2D            5.00   \n",
              "3            None       1972 Flood Event - 2D to 2D Run            5.00   \n",
              "4            None       1972 Flood Event - SA to 2D Run            5.00   \n",
              "5            None                       PMF for 1D - 2D            5.00   \n",
              "6            None                        Single 2D Area            5.00   \n",
              "7            None  1972 Flood Event - 2D Leve Structure            5.10   \n",
              "8            None           Single 2D Area with Bridges            5.10   \n",
              "9            None                 Gridded Precipitation            6.00   \n",
              "\n",
              "  Use Restart Precipitation Mode       Wind Mode Met BC=Precipitation|Mode  \\\n",
              "0           0                NaN             NaN                       NaN   \n",
              "1           0                NaN             NaN                       NaN   \n",
              "2           0                NaN             NaN                       NaN   \n",
              "3           0                NaN             NaN                       NaN   \n",
              "4           0                NaN             NaN                       NaN   \n",
              "5           0                NaN             NaN                       NaN   \n",
              "6           0                NaN             NaN                       NaN   \n",
              "7           0                NaN             NaN                       NaN   \n",
              "8           0                NaN             NaN                       NaN   \n",
              "9           0             Enable  No Wind Forces                   Gridded   \n",
              "\n",
              "  Met BC=Evapotranspiration|Mode Met BC=Precipitation|Expanded View  \\\n",
              "0                            NaN                                NaN   \n",
              "1                            NaN                                NaN   \n",
              "2                            NaN                                NaN   \n",
              "3                            NaN                                NaN   \n",
              "4                            NaN                                NaN   \n",
              "5                            NaN                                NaN   \n",
              "6                            NaN                                NaN   \n",
              "7                            NaN                                NaN   \n",
              "8                            NaN                                NaN   \n",
              "9                           None                                 -1   \n",
              "\n",
              "  Met BC=Precipitation|Constant Units Met BC=Precipitation|Gridded Source  \n",
              "0                                 NaN                                 NaN  \n",
              "1                                 NaN                                 NaN  \n",
              "2                                 NaN                                 NaN  \n",
              "3                                 NaN                                 NaN  \n",
              "4                                 NaN                                 NaN  \n",
              "5                                 NaN                                 NaN  \n",
              "6                                 NaN                                 NaN  \n",
              "7                                 NaN                                 NaN  \n",
              "8                                 NaN                                 NaN  \n",
              "9                               mm/hr                                 DSS  "
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Geometry Files DataFrame (ras.geom_df):\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>geom_file</th>\\n', '      <th>geom_number</th>\\n', '      <th>full_path</th>\\n', '      <th>hdf_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>g06</td>\\n', '      <td>06</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>g08</td>\\n', '      <td>08</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>g10</td>\\n', '      <td>10</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>g11</td>\\n', '      <td>11</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>g12</td>\\n', '      <td>12</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  geom_file geom_number                                          full_path  \\\n",
              "0       g06          06  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "1       g08          08  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "2       g10          10  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "3       g11          11  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "4       g12          12  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "5       g09          09  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "6       g13          13  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "7       g01          01  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "8       g03          03  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "9       g02          02  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "\n",
              "                                            hdf_path  \n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "2  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "3  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "4  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "5  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "6  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "7  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "8  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "9  d:\\GitHub\\ras-commander\\examples\\example_proje...  "
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "HDF Entries DataFrame (ras.get_hdf_entries()):\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>UNET D2 SolverType</th>\\n', '      <th>UNET D2 Name</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    \n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [plan_number, unsteady_number, geometry_number, Plan Title, Program Version, Short Identifier, Simulation Date, Computation Interval, Mapping Interval, Run HTab, Run UNet, Run Sediment, Run PostProcess, Run WQNet, UNET Use Existing IB Tables, UNET 1D Methodology, UNET D1 Cores, UNET D2 Cores, PS Cores, DSS File, Friction Slope Method, UNET D2 SolverType, UNET D2 Name, HDF_Results_Path, Geom File, Geom Path, Flow File, Flow Path, full_path]\n",
              "Index: []\n",
              "\n",
              "[0 rows x 29 columns]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Boundary Conditions DataFrame (ras.boundaries_df):\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>unsteady_number</th>\\n', '      <th>boundary_condition_number</th>\\n', '      <th>river_reach_name</th>\\n', '      <th>river_station</th>\\n', '      <th>storage_area_name</th>\\n', '      <th>pump_station_name</th>\\n', '      <th>bc_type</th>\\n', '      <th>hydrograph_type</th>\\n', '      <th>Interval</th>\\n', '      <th>DSS File</th>\\n', '      <th>...</th>\\n', '      <th>Flow Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Use Restart</th>\\n', '      <th>Precipitation Mode</th>\\n', '      <th>Wind Mode</th>\\n', '      <th>Met BC=Precipitation|Mode</th>\\n', '      <th>Met BC=Evapotranspiration|Mode</th>\\n', '      <th>Met BC=Precipitation|Expanded View</th>\\n', '      <th>Met BC=Precipitation|Constant Units</th>\\n', '      <th>Met BC=Precipitation|Gridded Source</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>07</td>\\n', '      <td>1</td>\\n', '      <td>Bald Eagle Cr.</td>\\n', '      <td>Lock Haven</td>\\n', '      <td>137520</td>\\n', '      <td></td>\\n', '      <td>Flow Hydrograph</td>\\n', '      <td>Flow Hydrograph</td>\\n', '      <td>1HOUR</td>\\n', '      <td>Bald_Eagle_Creek.dss</td>\\n', '      <td>...</td>\\n', '      <td>PMF with Multi 2D Areas</td>\\n', '      <td>5.00</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>07</td>\\n', '      <td>2</td>\\n', '      <td>Bald Eagle Cr.</td>\\n', '      <td>Lock Haven</td>\\n', '      <td>81454</td>\\n', '      <td></td>\\n', '      <td>Gate Opening</td>\\n', '      <td>None</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>...</td>\\n', '      <td>PMF with Multi 2D Areas</td>\\n', '      <td>5.00</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>07</td>\\n', '      <td>3</td>\\n', '      <td>Bald Eagle Cr.</td>\\n', '      <td>Lock Haven</td>\\n', '      <td>28519</td>\\n', '      <td></td>\\n', '      <td>Lateral Inflow Hydrograph</td>\\n', '      <td>Lateral Inflow Hydrograph</td>\\n', '      <td>1HOUR</td>\\n', '      <td>Bald_Eagle_Creek.dss</td>\\n', '      <td>...</td>\\n', '      <td>PMF with Multi 2D Areas</td>\\n', '      <td>5.00</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>07</td>\\n', '      <td>4</td>\\n', '      <td>Bald Eagle Cr.</td>\\n', '      <td>Lock Haven</td>\\n', '      <td>1</td>\\n', '      <td></td>\\n', '      <td>Lateral Inflow Hydrograph</td>\\n', '      <td>Lateral Inflow Hydrograph</td>\\n', '      <td>1HOUR</td>\\n', '      <td>NaN</td>\\n', '      <td>...</td>\\n', '      <td>PMF with Multi 2D Areas</td>\\n', '      <td>5.00</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>07</td>\\n', '      <td>5</td>\\n', '      <td>Bald Eagle Cr.</td>\\n', '      <td>Lock Haven</td>\\n', '      <td>136948</td>\\n', '      <td>82303</td>\\n', '      <td>Uniform Lateral Inflow Hydrograph</td>\\n', '      <td>Uniform Lateral Inflow Hydrograph</td>\\n', '      <td>1HOUR</td>\\n', '      <td>Bald_Eagle_Creek.dss</td>\\n', '      <td>...</td>\\n', '      <td>PMF with Multi 2D Areas</td>\\n', '      <td>5.00</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "   unsteady_number  boundary_condition_number river_reach_name river_station  \\\n",
              "0               07                          1   Bald Eagle Cr.    Lock Haven   \n",
              "1               07                          2   Bald Eagle Cr.    Lock Haven   \n",
              "2               07                          3   Bald Eagle Cr.    Lock Haven   \n",
              "3               07                          4   Bald Eagle Cr.    Lock Haven   \n",
              "4               07                          5   Bald Eagle Cr.    Lock Haven   \n",
              "5               07                          6   Bald Eagle Cr.    Lock Haven   \n",
              "6               07                          7   Bald Eagle Cr.    Lock Haven   \n",
              "7               07                          8   Bald Eagle Cr.    Lock Haven   \n",
              "8               07                          9   Bald Eagle Cr.    Lock Haven   \n",
              "9               07                         10   Bald Eagle Cr.    Lock Haven   \n",
              "10              08                          1   Bald Eagle Cr.    Lock Haven   \n",
              "11              08                          2   Bald Eagle Cr.    Lock Haven   \n",
              "12              08                          3   Bald Eagle Cr.    Lock Haven   \n",
              "13              08                          4   Bald Eagle Cr.    Lock Haven   \n",
              "14              08                          5   Bald Eagle Cr.    Lock Haven   \n",
              "15              08                          6   Bald Eagle Cr.    Lock Haven   \n",
              "16              08                          7   Bald Eagle Cr.    Lock Haven   \n",
              "17              08                          8                                  \n",
              "18              08                          9   Bald Eagle Cr.    Lock Haven   \n",
              "19              09                          1   Bald Eagle Cr.    Lock Haven   \n",
              "20              09                          2   Bald Eagle Cr.    Lock Haven   \n",
              "21              09                          3                                  \n",
              "22              10                          1                                  \n",
              "23              10                          2                                  \n",
              "24              10                          3                                  \n",
              "25              10                          4                                  \n",
              "26              11                          1                                  \n",
              "27              11                          2                                  \n",
              "28              11                          3                                  \n",
              "29              11                          4                                  \n",
              "30              12                          1   Bald Eagle Cr.    Lock Haven   \n",
              "31              12                          2   Bald Eagle Cr.    Lock Haven   \n",
              "32              12                          3                                  \n",
              "33              12                          4                                  \n",
              "34              13                          1                                  \n",
              "35              13                          2                                  \n",
              "36              13                          3                                  \n",
              "37              13                          4                                  \n",
              "38              01                          1                                  \n",
              "39              01                          2                                  \n",
              "40              01                          3                                  \n",
              "41              01                          4                                  \n",
              "42              02                          1                                  \n",
              "43              02                          2                                  \n",
              "44              02                          3                                  \n",
              "45              02                          4                                  \n",
              "46              02                          5                                  \n",
              "47              03                          1                                  \n",
              "48              03                          2                                  \n",
              "49              03                          3                                  \n",
              "50              03                          4                                  \n",
              "\n",
              "   storage_area_name pump_station_name                            bc_type  \\\n",
              "0             137520                                      Flow Hydrograph   \n",
              "1              81454                                         Gate Opening   \n",
              "2              28519                            Lateral Inflow Hydrograph   \n",
              "3                  1                            Lateral Inflow Hydrograph   \n",
              "4             136948             82303  Uniform Lateral Inflow Hydrograph   \n",
              "5              80720             67130  Uniform Lateral Inflow Hydrograph   \n",
              "6              76865                            Lateral Inflow Hydrograph   \n",
              "7              67130                            Lateral Inflow Hydrograph   \n",
              "8              66041                 1  Uniform Lateral Inflow Hydrograph   \n",
              "9              -1867                                         Normal Depth   \n",
              "10             28519                            Lateral Inflow Hydrograph   \n",
              "11                 1                            Lateral Inflow Hydrograph   \n",
              "12             80720             67130  Uniform Lateral Inflow Hydrograph   \n",
              "13             76865                            Lateral Inflow Hydrograph   \n",
              "14             67130                            Lateral Inflow Hydrograph   \n",
              "15             66041                 1  Uniform Lateral Inflow Hydrograph   \n",
              "16             -1867                                         Normal Depth   \n",
              "17                                                        Flow Hydrograph   \n",
              "18             81454                                         Gate Opening   \n",
              "19             28519                            Lateral Inflow Hydrograph   \n",
              "20             -1867                                         Normal Depth   \n",
              "21                                                        Flow Hydrograph   \n",
              "22                                                           Normal Depth   \n",
              "23                                                           Normal Depth   \n",
              "24                                                           Gate Opening   \n",
              "25                                                        Flow Hydrograph   \n",
              "26                                                           Gate Opening   \n",
              "27                                              Lateral Inflow Hydrograph   \n",
              "28                                                           Normal Depth   \n",
              "29                                                           Normal Depth   \n",
              "30            137520                                      Flow Hydrograph   \n",
              "31             81454                                         Gate Opening   \n",
              "32                                                           Normal Depth   \n",
              "33                                                           Normal Depth   \n",
              "34                                                           Normal Depth   \n",
              "35                                                           Normal Depth   \n",
              "36                                                        Flow Hydrograph   \n",
              "37                                                           Gate Opening   \n",
              "38                                                           Gate Opening   \n",
              "39                                              Lateral Inflow Hydrograph   \n",
              "40                                                           Normal Depth   \n",
              "41                                                           Normal Depth   \n",
              "42                                                           Normal Depth   \n",
              "43                                                           Normal Depth   \n",
              "44                                                        Flow Hydrograph   \n",
              "45                                                           Gate Opening   \n",
              "46                                                           Normal Depth   \n",
              "47                                                           Normal Depth   \n",
              "48                                                        Flow Hydrograph   \n",
              "49                                                           Normal Depth   \n",
              "50                                                           Gate Opening   \n",
              "\n",
              "                      hydrograph_type Interval              DSS File  ...  \\\n",
              "0                     Flow Hydrograph    1HOUR  Bald_Eagle_Creek.dss  ...   \n",
              "1                                None      NaN                   NaN  ...   \n",
              "2           Lateral Inflow Hydrograph    1HOUR  Bald_Eagle_Creek.dss  ...   \n",
              "3           Lateral Inflow Hydrograph    1HOUR                   NaN  ...   \n",
              "4   Uniform Lateral Inflow Hydrograph    1HOUR  Bald_Eagle_Creek.dss  ...   \n",
              "5   Uniform Lateral Inflow Hydrograph    1HOUR  Bald_Eagle_Creek.dss  ...   \n",
              "6           Lateral Inflow Hydrograph    1HOUR  Bald_Eagle_Creek.dss  ...   \n",
              "7           Lateral Inflow Hydrograph    1HOUR  Bald_Eagle_Creek.dss  ...   \n",
              "8   Uniform Lateral Inflow Hydrograph    1HOUR  Bald_Eagle_Creek.dss  ...   \n",
              "9                                None      NaN                   NaN  ...   \n",
              "10          Lateral Inflow Hydrograph    1HOUR  Bald_Eagle_Creek.dss  ...   \n",
              "11          Lateral Inflow Hydrograph    1HOUR                   NaN  ...   \n",
              "12  Uniform Lateral Inflow Hydrograph    1HOUR  Bald_Eagle_Creek.dss  ...   \n",
              "13          Lateral Inflow Hydrograph    1HOUR  Bald_Eagle_Creek.dss  ...   \n",
              "14          Lateral Inflow Hydrograph    1HOUR  Bald_Eagle_Creek.dss  ...   \n",
              "15  Uniform Lateral Inflow Hydrograph    1HOUR  Bald_Eagle_Creek.dss  ...   \n",
              "16                               None      NaN                   NaN  ...   \n",
              "17                    Flow Hydrograph    1HOUR                   NaN  ...   \n",
              "18                               None      NaN                   NaN  ...   \n",
              "19          Lateral Inflow Hydrograph    1HOUR  Bald_Eagle_Creek.dss  ...   \n",
              "20                               None      NaN                   NaN  ...   \n",
              "21                    Flow Hydrograph    1HOUR                   NaN  ...   \n",
              "22                               None      NaN                   NaN  ...   \n",
              "23                               None      NaN                   NaN  ...   \n",
              "24                               None      NaN                   NaN  ...   \n",
              "25                    Flow Hydrograph    1HOUR                   NaN  ...   \n",
              "26                               None      NaN                   NaN  ...   \n",
              "27          Lateral Inflow Hydrograph    1HOUR                   NaN  ...   \n",
              "28                               None      NaN                   NaN  ...   \n",
              "29                               None      NaN                   NaN  ...   \n",
              "30                    Flow Hydrograph    15MIN  Bald_Eagle_Creek.dss  ...   \n",
              "31                               None      NaN                   NaN  ...   \n",
              "32                               None      NaN                   NaN  ...   \n",
              "33                               None      NaN                   NaN  ...   \n",
              "34                               None      NaN                   NaN  ...   \n",
              "35                               None      NaN                   NaN  ...   \n",
              "36                    Flow Hydrograph    1HOUR                   NaN  ...   \n",
              "37                               None      NaN                   NaN  ...   \n",
              "38                               None      NaN                   NaN  ...   \n",
              "39          Lateral Inflow Hydrograph    1HOUR                   NaN  ...   \n",
              "40                               None      NaN                   NaN  ...   \n",
              "41                               None      NaN                   NaN  ...   \n",
              "42                               None      NaN                   NaN  ...   \n",
              "43                               None      NaN                   NaN  ...   \n",
              "44                    Flow Hydrograph    1HOUR                   NaN  ...   \n",
              "45                               None      NaN                   NaN  ...   \n",
              "46                               None      NaN                   NaN  ...   \n",
              "47                               None      NaN                   NaN  ...   \n",
              "48                    Flow Hydrograph    1HOUR                   NaN  ...   \n",
              "49                               None      NaN                   NaN  ...   \n",
              "50                               None      NaN                   NaN  ...   \n",
              "\n",
              "                              Flow Title Program Version Use Restart  \\\n",
              "0                PMF with Multi 2D Areas            5.00           0   \n",
              "1                PMF with Multi 2D Areas            5.00           0   \n",
              "2                PMF with Multi 2D Areas            5.00           0   \n",
              "3                PMF with Multi 2D Areas            5.00           0   \n",
              "4                PMF with Multi 2D Areas            5.00           0   \n",
              "5                PMF with Multi 2D Areas            5.00           0   \n",
              "6                PMF with Multi 2D Areas            5.00           0   \n",
              "7                PMF with Multi 2D Areas            5.00           0   \n",
              "8                PMF with Multi 2D Areas            5.00           0   \n",
              "9                PMF with Multi 2D Areas            5.00           0   \n",
              "10                   PMF for Upstream 2D            4.20           0   \n",
              "11                   PMF for Upstream 2D            4.20           0   \n",
              "12                   PMF for Upstream 2D            4.20           0   \n",
              "13                   PMF for Upstream 2D            4.20           0   \n",
              "14                   PMF for Upstream 2D            4.20           0   \n",
              "15                   PMF for Upstream 2D            4.20           0   \n",
              "16                   PMF for Upstream 2D            4.20           0   \n",
              "17                   PMF for Upstream 2D            4.20           0   \n",
              "18                   PMF for Upstream 2D            4.20           0   \n",
              "19                           Upstream 2D            5.00           0   \n",
              "20                           Upstream 2D            5.00           0   \n",
              "21                           Upstream 2D            5.00           0   \n",
              "22       1972 Flood Event - 2D to 2D Run            5.00           0   \n",
              "23       1972 Flood Event - 2D to 2D Run            5.00           0   \n",
              "24       1972 Flood Event - 2D to 2D Run            5.00           0   \n",
              "25       1972 Flood Event - 2D to 2D Run            5.00           0   \n",
              "26       1972 Flood Event - SA to 2D Run            5.00           0   \n",
              "27       1972 Flood Event - SA to 2D Run            5.00           0   \n",
              "28       1972 Flood Event - SA to 2D Run            5.00           0   \n",
              "29       1972 Flood Event - SA to 2D Run            5.00           0   \n",
              "30                       PMF for 1D - 2D            5.00           0   \n",
              "31                       PMF for 1D - 2D            5.00           0   \n",
              "32                       PMF for 1D - 2D            5.00           0   \n",
              "33                       PMF for 1D - 2D            5.00           0   \n",
              "34                        Single 2D Area            5.00           0   \n",
              "35                        Single 2D Area            5.00           0   \n",
              "36                        Single 2D Area            5.00           0   \n",
              "37                        Single 2D Area            5.00           0   \n",
              "38  1972 Flood Event - 2D Leve Structure            5.10           0   \n",
              "39  1972 Flood Event - 2D Leve Structure            5.10           0   \n",
              "40  1972 Flood Event - 2D Leve Structure            5.10           0   \n",
              "41  1972 Flood Event - 2D Leve Structure            5.10           0   \n",
              "42           Single 2D Area with Bridges            5.10           0   \n",
              "43           Single 2D Area with Bridges            5.10           0   \n",
              "44           Single 2D Area with Bridges            5.10           0   \n",
              "45           Single 2D Area with Bridges            5.10           0   \n",
              "46           Single 2D Area with Bridges            5.10           0   \n",
              "47                 Gridded Precipitation            6.00           0   \n",
              "48                 Gridded Precipitation            6.00           0   \n",
              "49                 Gridded Precipitation            6.00           0   \n",
              "50                 Gridded Precipitation            6.00           0   \n",
              "\n",
              "   Precipitation Mode       Wind Mode Met BC=Precipitation|Mode  \\\n",
              "0                 NaN             NaN                       NaN   \n",
              "1                 NaN             NaN                       NaN   \n",
              "2                 NaN             NaN                       NaN   \n",
              "3                 NaN             NaN                       NaN   \n",
              "4                 NaN             NaN                       NaN   \n",
              "5                 NaN             NaN                       NaN   \n",
              "6                 NaN             NaN                       NaN   \n",
              "7                 NaN             NaN                       NaN   \n",
              "8                 NaN             NaN                       NaN   \n",
              "9                 NaN             NaN                       NaN   \n",
              "10                NaN             NaN                       NaN   \n",
              "11                NaN             NaN                       NaN   \n",
              "12                NaN             NaN                       NaN   \n",
              "13                NaN             NaN                       NaN   \n",
              "14                NaN             NaN                       NaN   \n",
              "15                NaN             NaN                       NaN   \n",
              "16                NaN             NaN                       NaN   \n",
              "17                NaN             NaN                       NaN   \n",
              "18                NaN             NaN                       NaN   \n",
              "19                NaN             NaN                       NaN   \n",
              "20                NaN             NaN                       NaN   \n",
              "21                NaN             NaN                       NaN   \n",
              "22                NaN             NaN                       NaN   \n",
              "23                NaN             NaN                       NaN   \n",
              "24                NaN             NaN                       NaN   \n",
              "25                NaN             NaN                       NaN   \n",
              "26                NaN             NaN                       NaN   \n",
              "27                NaN             NaN                       NaN   \n",
              "28                NaN             NaN                       NaN   \n",
              "29                NaN             NaN                       NaN   \n",
              "30                NaN             NaN                       NaN   \n",
              "31                NaN             NaN                       NaN   \n",
              "32                NaN             NaN                       NaN   \n",
              "33                NaN             NaN                       NaN   \n",
              "34                NaN             NaN                       NaN   \n",
              "35                NaN             NaN                       NaN   \n",
              "36                NaN             NaN                       NaN   \n",
              "37                NaN             NaN                       NaN   \n",
              "38                NaN             NaN                       NaN   \n",
              "39                NaN             NaN                       NaN   \n",
              "40                NaN             NaN                       NaN   \n",
              "41                NaN             NaN                       NaN   \n",
              "42                NaN             NaN                       NaN   \n",
              "43                NaN             NaN                       NaN   \n",
              "44                NaN             NaN                       NaN   \n",
              "45                NaN             NaN                       NaN   \n",
              "46                NaN             NaN                       NaN   \n",
              "47             Enable  No Wind Forces                   Gridded   \n",
              "48             Enable  No Wind Forces                   Gridded   \n",
              "49             Enable  No Wind Forces                   Gridded   \n",
              "50             Enable  No Wind Forces                   Gridded   \n",
              "\n",
              "    Met BC=Evapotranspiration|Mode Met BC=Precipitation|Expanded View  \\\n",
              "0                              NaN                                NaN   \n",
              "1                              NaN                                NaN   \n",
              "2                              NaN                                NaN   \n",
              "3                              NaN                                NaN   \n",
              "4                              NaN                                NaN   \n",
              "5                              NaN                                NaN   \n",
              "6                              NaN                                NaN   \n",
              "7                              NaN                                NaN   \n",
              "8                              NaN                                NaN   \n",
              "9                              NaN                                NaN   \n",
              "10                             NaN                                NaN   \n",
              "11                             NaN                                NaN   \n",
              "12                             NaN                                NaN   \n",
              "13                             NaN                                NaN   \n",
              "14                             NaN                                NaN   \n",
              "15                             NaN                                NaN   \n",
              "16                             NaN                                NaN   \n",
              "17                             NaN                                NaN   \n",
              "18                             NaN                                NaN   \n",
              "19                             NaN                                NaN   \n",
              "20                             NaN                                NaN   \n",
              "21                             NaN                                NaN   \n",
              "22                             NaN                                NaN   \n",
              "23                             NaN                                NaN   \n",
              "24                             NaN                                NaN   \n",
              "25                             NaN                                NaN   \n",
              "26                             NaN                                NaN   \n",
              "27                             NaN                                NaN   \n",
              "28                             NaN                                NaN   \n",
              "29                             NaN                                NaN   \n",
              "30                             NaN                                NaN   \n",
              "31                             NaN                                NaN   \n",
              "32                             NaN                                NaN   \n",
              "33                             NaN                                NaN   \n",
              "34                             NaN                                NaN   \n",
              "35                             NaN                                NaN   \n",
              "36                             NaN                                NaN   \n",
              "37                             NaN                                NaN   \n",
              "38                             NaN                                NaN   \n",
              "39                             NaN                                NaN   \n",
              "40                             NaN                                NaN   \n",
              "41                             NaN                                NaN   \n",
              "42                             NaN                                NaN   \n",
              "43                             NaN                                NaN   \n",
              "44                             NaN                                NaN   \n",
              "45                             NaN                                NaN   \n",
              "46                             NaN                                NaN   \n",
              "47                            None                                 -1   \n",
              "48                            None                                 -1   \n",
              "49                            None                                 -1   \n",
              "50                            None                                 -1   \n",
              "\n",
              "   Met BC=Precipitation|Constant Units Met BC=Precipitation|Gridded Source  \n",
              "0                                  NaN                                 NaN  \n",
              "1                                  NaN                                 NaN  \n",
              "2                                  NaN                                 NaN  \n",
              "3                                  NaN                                 NaN  \n",
              "4                                  NaN                                 NaN  \n",
              "5                                  NaN                                 NaN  \n",
              "6                                  NaN                                 NaN  \n",
              "7                                  NaN                                 NaN  \n",
              "8                                  NaN                                 NaN  \n",
              "9                                  NaN                                 NaN  \n",
              "10                                 NaN                                 NaN  \n",
              "11                                 NaN                                 NaN  \n",
              "12                                 NaN                                 NaN  \n",
              "13                                 NaN                                 NaN  \n",
              "14                                 NaN                                 NaN  \n",
              "15                                 NaN                                 NaN  \n",
              "16                                 NaN                                 NaN  \n",
              "17                                 NaN                                 NaN  \n",
              "18                                 NaN                                 NaN  \n",
              "19                                 NaN                                 NaN  \n",
              "20                                 NaN                                 NaN  \n",
              "21                                 NaN                                 NaN  \n",
              "22                                 NaN                                 NaN  \n",
              "23                                 NaN                                 NaN  \n",
              "24                                 NaN                                 NaN  \n",
              "25                                 NaN                                 NaN  \n",
              "26                                 NaN                                 NaN  \n",
              "27                                 NaN                                 NaN  \n",
              "28                                 NaN                                 NaN  \n",
              "29                                 NaN                                 NaN  \n",
              "30                                 NaN                                 NaN  \n",
              "31                                 NaN                                 NaN  \n",
              "32                                 NaN                                 NaN  \n",
              "33                                 NaN                                 NaN  \n",
              "34                                 NaN                                 NaN  \n",
              "35                                 NaN                                 NaN  \n",
              "36                                 NaN                                 NaN  \n",
              "37                                 NaN                                 NaN  \n",
              "38                                 NaN                                 NaN  \n",
              "39                                 NaN                                 NaN  \n",
              "40                                 NaN                                 NaN  \n",
              "41                                 NaN                                 NaN  \n",
              "42                                 NaN                                 NaN  \n",
              "43                                 NaN                                 NaN  \n",
              "44                                 NaN                                 NaN  \n",
              "45                                 NaN                                 NaN  \n",
              "46                                 NaN                                 NaN  \n",
              "47                               mm/hr                                 DSS  \n",
              "48                               mm/hr                                 DSS  \n",
              "49                               mm/hr                                 DSS  \n",
              "50                               mm/hr                                 DSS  \n",
              "\n",
              "[51 rows x 30 columns]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Examine the Multi2D project\n",
        "print_ras_object_data(multi_2d_project, \"Multi2D Project\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Muncie Project Data:\n",
            "==================================================\n",
            "Project Name: Muncie\n",
            "Project Folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie\n",
            "PRJ File: D:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie\\Muncie.prj\n",
            "HEC-RAS Executable Path: C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.5\\Ras.exe\n",
            "\n",
            "Plan Files DataFrame (ras.plan_df):\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>Run UNet</th>\\n', '      <th>Run Sediment</th>\\n', '      <th>Run PostProcess</th>\\n', '      <th>Run WQNet</th>\\n', '      <th>UNET Use Existing IB Tables</th>\\n', '      <th>UNET 1D Methodology</th>\\n', '      <th>UNET D1 Cores</th>\\n', '      <th>UNET D2 Cores</th>\\n', '      <th>PS Cores</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>UNET D2 SolverType</th>\\n', '      <th>UNET D2 Name</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>01</td>\\n', '      <td>01</td>\\n', '      <td>Unsteady Multi  9-SA run</td>\\n', '      <td>5.00</td>\\n', '      <td>9-SAs</td>\\n', '      <td>02JAN1900,0000,02JAN1900,2400</td>\\n', '      <td>15SEC</td>\\n', '      <td>5MIN</td>\\n', '      <td>1</td>\\n', '      <td>1</td>\\n', '      <td>0</td>\\n', '      <td>1</td>\\n', '      <td>0</td>\\n', '      <td>-1</td>\\n', '      <td>NaN</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>03</td>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>Unsteady Run with 2D 50ft Grid</td>\\n', '      <td>5.10</td>\\n', '      <td>2D 50ft Grid</td>\\n', '      <td>02JAN1900,0000,02JAN1900,2400</td>\\n', '      <td>10SEC</td>\\n', '      <td>5MIN</td>\\n', '      <td>-1</td>\\n', '      <td>-1</td>\\n', '      <td>0</td>\\n', '      <td>-1</td>\\n', '      <td>0</td>\\n', '      <td>-1</td>\\n', '      <td>Finite Difference</td>\\n', '      <td>0</td>\\n', '      <td>4</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>Pardiso (Direct)</td>\\n', '      <td>2D Interior Area</td>\\n', '      <td>None</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>04</td>\\n', '      <td>01</td>\\n', '      <td>04</td>\\n', '      <td>Unsteady Run with 2D 50ft User n Value R</td>\\n', '      <td>5.10</td>\\n', '      <td>50ft User n Regions</td>\\n', '      <td>02JAN1900,0000,02JAN1900,2400</td>\\n', '      <td>10SEC</td>\\n', '      <td>5MIN</td>\\n', '      <td>1</td>\\n', '      <td>1</td>\\n', '      <td>0</td>\\n', '      <td>1</td>\\n', '      <td>0</td>\\n', '      <td>-1</td>\\n', '      <td>Finite Difference</td>\\n', '      <td>0</td>\\n', '      <td>6</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>Pardiso (Direct)</td>\\n', '      <td>2D Interior Area</td>\\n', '      <td>None</td>\\n', '      <td>04</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  plan_number unsteady_number geometry_number  \\\n",
              "0          01              01              01   \n",
              "1          03              01              02   \n",
              "2          04              01              04   \n",
              "\n",
              "                                 Plan Title Program Version  \\\n",
              "0                  Unsteady Multi  9-SA run            5.00   \n",
              "1            Unsteady Run with 2D 50ft Grid            5.10   \n",
              "2  Unsteady Run with 2D 50ft User n Value R            5.10   \n",
              "\n",
              "      Short Identifier                Simulation Date Computation Interval  \\\n",
              "0                9-SAs  02JAN1900,0000,02JAN1900,2400                15SEC   \n",
              "1         2D 50ft Grid  02JAN1900,0000,02JAN1900,2400                10SEC   \n",
              "2  50ft User n Regions  02JAN1900,0000,02JAN1900,2400                10SEC   \n",
              "\n",
              "  Mapping Interval Run HTab Run UNet Run Sediment Run PostProcess Run WQNet  \\\n",
              "0             5MIN        1        1            0               1         0   \n",
              "1             5MIN       -1       -1            0              -1         0   \n",
              "2             5MIN        1        1            0               1         0   \n",
              "\n",
              "  UNET Use Existing IB Tables UNET 1D Methodology  UNET D1 Cores  \\\n",
              "0                          -1                 NaN              0   \n",
              "1                          -1   Finite Difference              0   \n",
              "2                          -1   Finite Difference              0   \n",
              "\n",
              "   UNET D2 Cores PS Cores DSS File Friction Slope Method UNET D2 SolverType  \\\n",
              "0              0     None      dss                     1                NaN   \n",
              "1              4     None      dss                     1   Pardiso (Direct)   \n",
              "2              6     None      dss                     1   Pardiso (Direct)   \n",
              "\n",
              "       UNET D2 Name HDF_Results_Path Geom File  \\\n",
              "0               NaN             None        01   \n",
              "1  2D Interior Area             None        02   \n",
              "2  2D Interior Area             None        04   \n",
              "\n",
              "                                           Geom Path Flow File  \\\n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...        01   \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...        01   \n",
              "2  d:\\GitHub\\ras-commander\\examples\\example_proje...        01   \n",
              "\n",
              "                                           Flow Path  \\\n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "2  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "\n",
              "                                           full_path  \n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "2  d:\\GitHub\\ras-commander\\examples\\example_proje...  "
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Flow Files DataFrame:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>flow_number</th>\\n', '      <th>full_path</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>None</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  flow_number                                          full_path  \\\n",
              "0          01  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "\n",
              "  unsteady_number geometry_number  \n",
              "0            None            None  "
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Unsteady Flow Files DataFrame (ras.unsteady_df):\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>unsteady_number</th>\\n', '      <th>full_path</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Flow Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Use Restart</th>\\n', '      <th>Precipitation Mode</th>\\n', '      <th>Wind Mode</th>\\n', '      <th>Met BC=Precipitation|Expanded View</th>\\n', '      <th>Met BC=Precipitation|Gridded Source</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>Flow Boundary Conditions</td>\\n', '      <td>6.30</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>0</td>\\n', '      <td>DSS</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  unsteady_number                                          full_path  \\\n",
              "0              01  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "\n",
              "  geometry_number                Flow Title Program Version Use Restart  \\\n",
              "0            None  Flow Boundary Conditions            6.30           0   \n",
              "\n",
              "  Precipitation Mode       Wind Mode Met BC=Precipitation|Expanded View  \\\n",
              "0            Disable  No Wind Forces                                  0   \n",
              "\n",
              "  Met BC=Precipitation|Gridded Source  \n",
              "0                                 DSS  "
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Geometry Files DataFrame (ras.geom_df):\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>geom_file</th>\\n', '      <th>geom_number</th>\\n', '      <th>full_path</th>\\n', '      <th>hdf_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>g01</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>g02</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>g04</td>\\n', '      <td>04</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  geom_file geom_number                                          full_path  \\\n",
              "0       g01          01  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "1       g02          02  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "2       g04          04  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "\n",
              "                                            hdf_path  \n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "2  d:\\GitHub\\ras-commander\\examples\\example_proje...  "
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "HDF Entries DataFrame (ras.get_hdf_entries()):\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>UNET D2 SolverType</th>\\n', '      <th>UNET D2 Name</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    \n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [plan_number, unsteady_number, geometry_number, Plan Title, Program Version, Short Identifier, Simulation Date, Computation Interval, Mapping Interval, Run HTab, Run UNet, Run Sediment, Run PostProcess, Run WQNet, UNET Use Existing IB Tables, UNET 1D Methodology, UNET D1 Cores, UNET D2 Cores, PS Cores, DSS File, Friction Slope Method, UNET D2 SolverType, UNET D2 Name, HDF_Results_Path, Geom File, Geom Path, Flow File, Flow Path, full_path]\n",
              "Index: []\n",
              "\n",
              "[0 rows x 29 columns]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Boundary Conditions DataFrame (ras.boundaries_df):\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>unsteady_number</th>\\n', '      <th>boundary_condition_number</th>\\n', '      <th>river_reach_name</th>\\n', '      <th>river_station</th>\\n', '      <th>storage_area_name</th>\\n', '      <th>pump_station_name</th>\\n', '      <th>bc_type</th>\\n', '      <th>hydrograph_type</th>\\n', '      <th>Interval</th>\\n', '      <th>DSS Path</th>\\n', '      <th>...</th>\\n', '      <th>hydrograph_values</th>\\n', '      <th>full_path</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Flow Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Use Restart</th>\\n', '      <th>Precipitation Mode</th>\\n', '      <th>Wind Mode</th>\\n', '      <th>Met BC=Precipitation|Expanded View</th>\\n', '      <th>Met BC=Precipitation|Gridded Source</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>1</td>\\n', '      <td>White</td>\\n', '      <td>Muncie</td>\\n', '      <td>15696.24</td>\\n', '      <td></td>\\n', '      <td>Flow Hydrograph</td>\\n', '      <td>Flow Hydrograph</td>\\n', '      <td>1HOUR</td>\\n', '      <td></td>\\n', '      <td>...</td>\\n', '      <td>[13500, 14000, 14500, 15000, 15500, 16000, 165...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>Flow Boundary Conditions</td>\\n', '      <td>6.30</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>0</td>\\n', '      <td>DSS</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>01</td>\\n', '      <td>2</td>\\n', '      <td>White</td>\\n', '      <td>Muncie</td>\\n', '      <td>237.6455</td>\\n', '      <td></td>\\n', '      <td>Normal Depth</td>\\n', '      <td>None</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>...</td>\\n', '      <td>NaN</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>Flow Boundary Conditions</td>\\n', '      <td>6.30</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>0</td>\\n', '      <td>DSS</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  unsteady_number  boundary_condition_number river_reach_name river_station  \\\n",
              "0              01                          1            White        Muncie   \n",
              "1              01                          2            White        Muncie   \n",
              "\n",
              "  storage_area_name pump_station_name          bc_type  hydrograph_type  \\\n",
              "0          15696.24                    Flow Hydrograph  Flow Hydrograph   \n",
              "1          237.6455                       Normal Depth             None   \n",
              "\n",
              "  Interval DSS Path  ...                                  hydrograph_values  \\\n",
              "0    1HOUR           ...  [13500, 14000, 14500, 15000, 15500, 16000, 165...   \n",
              "1      NaN      NaN  ...                                                NaN   \n",
              "\n",
              "                                           full_path geometry_number  \\\n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...            None   \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...            None   \n",
              "\n",
              "                 Flow Title Program Version  Use Restart Precipitation Mode  \\\n",
              "0  Flow Boundary Conditions            6.30            0            Disable   \n",
              "1  Flow Boundary Conditions            6.30            0            Disable   \n",
              "\n",
              "        Wind Mode Met BC=Precipitation|Expanded View  \\\n",
              "0  No Wind Forces                                  0   \n",
              "1  No Wind Forces                                  0   \n",
              "\n",
              "  Met BC=Precipitation|Gridded Source  \n",
              "0                                 DSS  \n",
              "1                                 DSS  \n",
              "\n",
              "[2 rows x 26 columns]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Examine the Muncie project\n",
        "print_ras_object_data(muncie_project, \"Muncie Project\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Comparing Projects\n",
        "\n",
        "Let's compare some key metrics of the two projects:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Project Name</th>\\n', '      <th>Number of Plans</th>\\n', '      <th>Number of Geometries</th>\\n', '      <th>Number of Flow Files</th>\\n', '      <th>Number of Unsteady Files</th>\\n', '      <th>Number of Boundary Conditions</th>\\n', '      <th>HDF Results Available</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>BaldEagleDamBrk</td>\\n', '      <td>11</td>\\n', '      <td>10</td>\\n', '      <td>0</td>\\n', '      <td>10</td>\\n', '      <td>51</td>\\n', '      <td>False</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>Muncie</td>\\n', '      <td>3</td>\\n', '      <td>3</td>\\n', '      <td>1</td>\\n', '      <td>1</td>\\n', '      <td>2</td>\\n', '      <td>False</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "      Project Name  Number of Plans  Number of Geometries  \\\n",
              "0  BaldEagleDamBrk               11                    10   \n",
              "1           Muncie                3                     3   \n",
              "\n",
              "   Number of Flow Files  Number of Unsteady Files  \\\n",
              "0                     0                        10   \n",
              "1                     1                         1   \n",
              "\n",
              "   Number of Boundary Conditions  HDF Results Available  \n",
              "0                             51                  False  \n",
              "1                              2                  False  "
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Create a comparison table of the two projects\n",
        "comparison_data = {\n",
        "    'Project Name': [multi_2d_project.project_name, muncie_project.project_name],\n",
        "    'Number of Plans': [len(multi_2d_project.plan_df), len(muncie_project.plan_df)],\n",
        "    'Number of Geometries': [len(multi_2d_project.geom_df), len(muncie_project.geom_df)],\n",
        "    'Number of Flow Files': [len(multi_2d_project.flow_df), len(muncie_project.flow_df)],\n",
        "    'Number of Unsteady Files': [len(multi_2d_project.unsteady_df), len(muncie_project.unsteady_df)],\n",
        "    'Number of Boundary Conditions': [len(multi_2d_project.boundaries_df) if hasattr(multi_2d_project, 'boundaries_df') else 0, \n",
        "                                     len(muncie_project.boundaries_df) if hasattr(muncie_project, 'boundaries_df') else 0],\n",
        "    'HDF Results Available': [len(multi_2d_project.get_hdf_entries()) > 0, len(muncie_project.get_hdf_entries()) > 0]\n",
        "}\n",
        "\n",
        "comparison_df = pd.DataFrame(comparison_data)\n",
        "display.display(comparison_df)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## RAS Commander: Best Practices\n",
        "\n",
        "After exploring both approaches, here are some best practices for using RAS Commander:\n",
        "\n",
        "1. **Choose Your Approach Based on Complexity**:\n",
        "   - **Simple Scripts** (one project): Use the global `ras` object\n",
        "   - **Complex Scripts** (multiple projects): Use custom RAS objects\n",
        "\n",
        "2. **Be Consistent**:\n",
        "   - Don't mix global and custom approaches in the same script\n",
        "   - Use descriptive names for custom RAS objects\n",
        "\n",
        "3. **Working with Project Files**:\n",
        "   - Access project files through the RAS object's DataFrames\n",
        "   - Use helper functions like `get_plan_path()` to resolve paths\n",
        "\n",
        "4. **Error Handling**:\n",
        "   - Always check for empty DataFrames before accessing their contents\n",
        "   - Use the built-in logging to track operations\n",
        "\n",
        "5. **Performance Considerations**:\n",
        "   - For large projects, consider using the HDF classes directly\n",
        "   - Cache results of expensive operations when possible\n",
        "\n",
        "## Summary of Key Functions\n",
        "\n",
        "- `init_ras_project(project_folder, ras_version)`: Initialize a RAS project\n",
        "- `RasExamples().extract_project(project_name)`: Extract example projects\n",
        "- `RasPrj.get_project_name()`: Get the name of the project\n",
        "- `RasPrj.get_plan_entries()`: Get plan file information\n",
        "- `RasPrj.get_flow_entries()`: Get flow file information\n",
        "- `RasPrj.get_unsteady_entries()`: Get unsteady flow file information\n",
        "- `RasPrj.get_geom_entries()`: Get geometry file information\n",
        "- `RasPrj.get_hdf_entries()`: Get HDF result file information\n",
        "- `RasPrj.get_boundary_conditions()`: Get boundary condition details\n",
        "- `RasPlan.get_plan_path(plan_number)`: Get the path to a plan file\n",
        "- `RasPlan.get_geom_path(geom_number)`: Get the path to a geometry file\n",
        "- `RasPlan.get_flow_path(flow_number)`: Get the path to a flow file\n",
        "- `RasPlan.get_unsteady_path(unsteady_number)`: Get the path to an unsteady flow file"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Next Steps\n",
        "\n",
        "Now that you understand the basics of project initialization in RAS Commander, you can explore more advanced topics:\n",
        "\n",
        "1. Working with HDF files for result analysis\n",
        "2. Modifying plan, geometry, and flow files\n",
        "3. Running HEC-RAS simulations\n",
        "4. Extracting and visualizing results\n",
        "5. Automating model calibration\n",
        "\n",
        "These topics are covered in other examples and notebooks in the RAS Commander documentation."
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "rascmdr",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
}
==================================================

File: c:\GH\ras-commander\examples\02_plan_and_geometry_operations.ipynb
==================================================
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# RAS Commander: Plan and Geometry Operations\n",
        "\n",
        "This notebook demonstrates how to perform operations on HEC-RAS plan and geometry files using the RAS Commander library. We'll explore how to initialize projects, clone plans and geometries, configure parameters, execute plans, and analyze results.\n",
        "\n",
        "## Operations Covered\n",
        "\n",
        "1. **Project Initialization**: Initialize a HEC-RAS project by specifying the project path and version\n",
        "2. **Plan Operations**:\n",
        "   - Clone an existing plan to create a new one\n",
        "   - Configure simulation parameters and intervals\n",
        "   - Set run flags and update descriptions\n",
        "3. **Geometry Operations**:\n",
        "   - Clone a geometry file to create a modified version\n",
        "   - Set the geometry for a plan\n",
        "   - Clear geometry preprocessor files to ensure clean results\n",
        "4. **Flow Operations**:\n",
        "   - Clone unsteady flow files\n",
        "   - Configure flow parameters\n",
        "5. **Plan Computation**: Run the plan with specified settings\n",
        "6. **Results Verification**: Check HDF entries to confirm results were written"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Package Installation and Environment Setup\n",
        "Uncomment and run package installation commands if needed"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [],
      "source": [
        "# 1. Install ras-commander from pip (uncomment to install if needed)\n",
        "#!pip install ras-commander\n",
        "# This installs ras-commander and all dependencies"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Import the required libraries for this notebook\n",
        "from ras_commander import *  # Import all ras-commander modules\n",
        "\n",
        "import os\n",
        "import sys\n",
        "from pathlib import Path\n",
        "import pandas as pd\n",
        "from IPython import display\n",
        "from datetime import datetime  "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Downloading and Extracting Example HEC-RAS Projects\n",
        "\n",
        "We'll use the `RasExamples` class to download and extract an example HEC-RAS project. For this notebook, we'll use the \"Balde Eagle Creek\" project."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 11:38:17 - ras_commander.RasExamples - INFO - Found zip file: d:\\GitHub\\ras-commander\\examples\\Example_Projects_6_6.zip\n",
            "2025-04-08 11:38:17 - ras_commander.RasExamples - INFO - Loading project data from CSV...\n",
            "2025-04-08 11:38:18 - ras_commander.RasExamples - INFO - Loaded 68 projects from CSV.\n",
            "2025-04-08 11:38:18 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
            "2025-04-08 11:38:18 - ras_commander.RasExamples - INFO - Extracting project 'Balde Eagle Creek'\n",
            "2025-04-08 11:38:18 - ras_commander.RasExamples - INFO - Project 'Balde Eagle Creek' already exists. Deleting existing folder...\n",
            "2025-04-08 11:38:18 - ras_commander.RasExamples - INFO - Existing folder for project 'Balde Eagle Creek' has been deleted.\n",
            "2025-04-08 11:38:18 - ras_commander.RasExamples - INFO - Successfully extracted project 'Balde Eagle Creek' to d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n"
          ]
        }
      ],
      "source": [
        "# Extract specific projects we'll use in this tutorial\n",
        "# This will download them if not present and extract them to the example_projects folder\n",
        "bald_eagle_path = RasExamples.extract_project(\"Balde Eagle Creek\")\n",
        "print(bald_eagle_path)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Project Initialization\n",
        "\n",
        "The first step is to initialize the HEC-RAS project. This is done using the `init_ras_project()` function, which takes the project folder path and HEC-RAS version as parameters."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 11:38:18 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-08 11:38:18 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.rasmap\n",
            "2025-04-08 11:38:18 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Initialized HEC-RAS project: BaldEagle\n",
            "\n",
            "HEC-RAS Project Plan Data (plan_df):\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>UNET D2 Cores</th>\\n', '      <th>PS Cores</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>01</td>\\n', '      <td>Unsteady with Bridges and Dam</td>\\n', '      <td>5.00</td>\\n', '      <td>UnsteadyFlow</td>\\n', '      <td>18FEB1999,0000,24FEB1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>1HOUR</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>0.0</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>2</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>Steady Flow Run</td>\\n', '      <td>NaN</td>\\n', '      <td>SteadyRun</td>\\n', '      <td>02/18/1999,0000,02/24/1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>NaN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>NaN</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  plan_number unsteady_number geometry_number                     Plan Title  \\\n",
              "0          01              02              01  Unsteady with Bridges and Dam   \n",
              "1          02            None              01                Steady Flow Run   \n",
              "\n",
              "  Program Version Short Identifier                  Simulation Date  \\\n",
              "0            5.00     UnsteadyFlow    18FEB1999,0000,24FEB1999,0500   \n",
              "1             NaN        SteadyRun  02/18/1999,0000,02/24/1999,0500   \n",
              "\n",
              "  Computation Interval Mapping Interval Run HTab  ... UNET D2 Cores PS Cores  \\\n",
              "0                 2MIN            1HOUR        1  ...           0.0     None   \n",
              "1                 2MIN              NaN        1  ...           NaN     None   \n",
              "\n",
              "  DSS File Friction Slope Method HDF_Results_Path  Geom File  \\\n",
              "0      dss                     2             None         01   \n",
              "1      dss                     1             None         01   \n",
              "\n",
              "                                           Geom Path Flow File  \\\n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...        02   \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...        02   \n",
              "\n",
              "                                           Flow Path  \\\n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "\n",
              "                                           full_path  \n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "\n",
              "[2 rows x 26 columns]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "init_ras_project(bald_eagle_path, \"6.6\")\n",
        "print(f\"Initialized HEC-RAS project: {ras.project_name}\")\n",
        "\n",
        "# Display the current plan files in the project\n",
        "print(\"\\nHEC-RAS Project Plan Data (plan_df):\")\n",
        "display.display(ras.plan_df)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Understanding Plan and Geometry Operations in HEC-RAS\n",
        "\n",
        "Before diving into the operations, let's understand what plan and geometry files are in HEC-RAS:\n",
        "\n",
        "- **Plan Files** (`.p*`): Define the simulation parameters including the reference to geometry and flow files, as well as computational settings.\n",
        "- **Geometry Files** (`.g*`): Define the physical characteristics of the river/channel system including cross-sections, 2D areas, and structures.\n",
        "\n",
        "The `RasPlan` and `RasGeo` classes provide methods for working with these files, including:\n",
        "\n",
        "1. Creating new plans and geometries by cloning existing ones\n",
        "2. Modifying simulation parameters and settings\n",
        "3. Associating geometries with plans\n",
        "4. Managing preprocessor files\n",
        "5. Retrieving information from plans and geometries\n",
        "\n",
        "In the following sections, we'll explore these operations in detail."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Cloning Plans and Geometries\n",
        "\n",
        "Let's start by cloning a plan to create a new simulation scenario."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 11:38:18 - ras_commander.RasUtils - INFO - File cloned from d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01 to d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n",
            "2025-04-08 11:38:18 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n",
            "2025-04-08 11:38:18 - ras_commander.RasUtils - INFO - Project file updated with new Plan entry: 03\n",
            "2025-04-08 11:38:18 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.rasmap\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "New plan created: 03\n",
            "\n",
            "Updated plan files:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>UNET D2 Cores</th>\\n', '      <th>PS Cores</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>01</td>\\n', '      <td>Unsteady with Bridges and Dam</td>\\n', '      <td>5.00</td>\\n', '      <td>UnsteadyFlow</td>\\n', '      <td>18FEB1999,0000,24FEB1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>1HOUR</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>0.0</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>2</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>None</td>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>Steady Flow Run</td>\\n', '      <td>NaN</td>\\n', '      <td>SteadyRun</td>\\n', '      <td>02/18/1999,0000,02/24/1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>NaN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>NaN</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>None</td>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>03</td>\\n', '      <td>02</td>\\n', '      <td>01</td>\\n', '      <td>Unsteady with Bridges and Dam</td>\\n', '      <td>5.00</td>\\n', '      <td>Combined Test Plan</td>\\n', '      <td>18FEB1999,0000,24FEB1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>1HOUR</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>0.0</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>2</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>None</td>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  plan_number unsteady_number geometry_number                     Plan Title  \\\n",
              "0          01              02              01  Unsteady with Bridges and Dam   \n",
              "1          02            None              01                Steady Flow Run   \n",
              "2          03              02              01  Unsteady with Bridges and Dam   \n",
              "\n",
              "  Program Version    Short Identifier                  Simulation Date  \\\n",
              "0            5.00        UnsteadyFlow    18FEB1999,0000,24FEB1999,0500   \n",
              "1             NaN           SteadyRun  02/18/1999,0000,02/24/1999,0500   \n",
              "2            5.00  Combined Test Plan    18FEB1999,0000,24FEB1999,0500   \n",
              "\n",
              "  Computation Interval Mapping Interval Run HTab  ... UNET D2 Cores PS Cores  \\\n",
              "0                 2MIN            1HOUR        1  ...           0.0     None   \n",
              "1                 2MIN              NaN        1  ...           NaN     None   \n",
              "2                 2MIN            1HOUR        1  ...           0.0     None   \n",
              "\n",
              "  DSS File Friction Slope Method HDF_Results_Path  Geom File  Geom Path  \\\n",
              "0      dss                     2             None         01       None   \n",
              "1      dss                     1             None         01       None   \n",
              "2      dss                     2             None         01       None   \n",
              "\n",
              "  Flow File Flow Path                                          full_path  \n",
              "0        02      None  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "1        02      None  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "2        02      None  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "\n",
              "[3 rows x 26 columns]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "New plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n",
            "\n",
            "New plan details:\n",
            "Plan number: 03\n",
            "Description: No description\n",
            "Short Identifier: Combined Test Plan\n",
            "Geometry file: 01\n",
            "File path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n"
          ]
        }
      ],
      "source": [
        "# Clone plan \"01\" to create a new plan\n",
        "new_plan_number = RasPlan.clone_plan(\"01\", new_plan_shortid=\"Combined Test Plan\")\n",
        "print(f\"New plan created: {new_plan_number}\")\n",
        "\n",
        "# Display updated plan files\n",
        "print(\"\\nUpdated plan files:\")\n",
        "display.display(ras.plan_df)\n",
        "\n",
        "# Get the path to the new plan file\n",
        "plan_path = RasPlan.get_plan_path(new_plan_number)\n",
        "print(f\"\\nNew plan file path: {plan_path}\")\n",
        "\n",
        "# Let's examine the new plan's details\n",
        "new_plan = ras.plan_df[ras.plan_df['plan_number'] == new_plan_number].iloc[0]\n",
        "print(f\"\\nNew plan details:\")\n",
        "print(f\"Plan number: {new_plan_number}\")\n",
        "print(f\"Description: {new_plan.get('description', 'No description')}\")\n",
        "print(f\"Short Identifier: {new_plan.get('Short Identifier', 'Not available')}\")\n",
        "print(f\"Geometry file: {new_plan.get('Geom File', 'None')}\")\n",
        "print(f\"File path: {new_plan['full_path']}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 11:38:18 - ras_commander.RasPlan - INFO - Retrieved Plan Title: Unsteady with Bridges and Dam\n",
            "2025-04-08 11:38:18 - ras_commander.RasPlan - INFO - Retrieved Short Identifier: Combined Test Plan\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Current plan title: Unsteady with Bridges and Dam\n",
            "Current plan shortid: Combined Test Plan\n"
          ]
        }
      ],
      "source": [
        "# Get the current plan title and shortid\n",
        "current_title = RasPlan.get_plan_title(new_plan_number)\n",
        "current_shortid = RasPlan.get_shortid(new_plan_number)\n",
        "\n",
        "print(f\"Current plan title: {current_title}\")\n",
        "print(f\"Current plan shortid: {current_shortid}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 11:38:18 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n",
            "2025-04-08 11:38:18 - ras_commander.RasPlan - INFO - Updated Plan Title in plan file to: Unsteady with Bridges and Dam clonedplan\n",
            "2025-04-08 11:38:18 - ras_commander.RasPlan - WARNING - Short Identifier too long (24 char max). Truncating: Combined Test Plan clonedplan\n",
            "2025-04-08 11:38:18 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n",
            "2025-04-08 11:38:18 - ras_commander.RasPlan - INFO - Updated Short Identifier in plan file to: Combined Test Plan clone\n",
            "2025-04-08 11:38:18 - ras_commander.RasPlan - INFO - Retrieved Plan Title: Unsteady with Bridges and Dam clonedplan\n",
            "2025-04-08 11:38:18 - ras_commander.RasPlan - INFO - Retrieved Short Identifier: Combined Test Plan clone\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Updated plan title: Unsteady with Bridges and Dam clonedplan\n",
            "Updated plan shortid: Combined Test Plan clone\n"
          ]
        }
      ],
      "source": [
        "# Update the title and shortid to append \" clonedplan\"\n",
        "new_title = f\"{current_title} clonedplan\"\n",
        "new_shortid = f\"{current_shortid} clonedplan\"\n",
        "\n",
        "RasPlan.set_plan_title(new_plan_number, new_title)\n",
        "RasPlan.set_shortid(new_plan_number, new_shortid)\n",
        "\n",
        "print(f\"\\nUpdated plan title: {RasPlan.get_plan_title(new_plan_number)}\")\n",
        "print(f\"Updated plan shortid: {RasPlan.get_shortid(new_plan_number)}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 11:38:18 - ras_commander.RasPlan - INFO - Retrieved Plan Title: Unsteady with Bridges and Dam clonedplan\n",
            "2025-04-08 11:38:18 - ras_commander.RasPlan - INFO - Retrieved Short Identifier: Combined Test Plan clone\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Current plan title: Unsteady with Bridges and Dam clonedplan\n",
            "Current plan shortid: Combined Test Plan clone\n"
          ]
        }
      ],
      "source": [
        "# Get the current plan title and shortid again to confirm the changes\n",
        "current_title = RasPlan.get_plan_title(new_plan_number)\n",
        "current_shortid = RasPlan.get_shortid(new_plan_number)\n",
        "\n",
        "print(f\"Current plan title: {current_title}\")\n",
        "print(f\"Current plan shortid: {current_shortid}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now let's clone a geometry file. This allows us to make modifications to a geometry without affecting the original."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 11:38:18 - ras_commander.RasUtils - INFO - File cloned from d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01 to d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g02\n",
            "2025-04-08 11:38:18 - ras_commander.RasUtils - INFO - File cloned from d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf to d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g02.hdf\n",
            "2025-04-08 11:38:18 - ras_commander.RasUtils - INFO - Project file updated with new Geom entry: 02\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "New geometry created: 02\n",
            "\n",
            "Updated geometry files:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>geom_file</th>\\n', '      <th>geom_number</th>\\n', '      <th>full_path</th>\\n', '      <th>hdf_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>g01</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>g02</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  geom_file geom_number                                          full_path  \\\n",
              "0       g01          01  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "1       g02          02  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "\n",
              "                                            hdf_path  \n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...  "
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 11:38:18 - ras_commander.RasPlan - INFO - Found geometry path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g02\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "New geometry file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g02\n",
            "\n",
            "New geometry details:\n",
            "Geometry number: 02\n",
            "Geometry file: Not available\n",
            "File path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g02\n",
            "HDF path: None\n"
          ]
        }
      ],
      "source": [
        "# Clone geometry \"01\" to create a new geometry file\n",
        "new_geom_number = RasPlan.clone_geom(\"01\")\n",
        "print(f\"New geometry created: {new_geom_number}\")\n",
        "\n",
        "# Display updated geometry files\n",
        "print(\"\\nUpdated geometry files:\")\n",
        "display.display(ras.geom_df)\n",
        "\n",
        "# Get the path to the new geometry file\n",
        "geom_path = RasPlan.get_geom_path(new_geom_number)\n",
        "print(f\"\\nNew geometry file path: {geom_path}\")\n",
        "\n",
        "# Examine the new geometry's details\n",
        "new_geom = ras.geom_df.loc[ras.geom_df['geom_number'] == new_geom_number].squeeze()\n",
        "print(f\"\\nNew geometry details:\")\n",
        "print(f\"Geometry number: {new_geom_number}\")\n",
        "print(f\"Geometry file: {new_geom.get('geom_file', 'Not available')}\")\n",
        "print(f\"File path: {new_geom.get('full_path', 'Not available')}\")\n",
        "print(f\"HDF path: {new_geom.get('hdf_path', 'None')}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Let's also clone an unsteady flow file to complete our new simulation setup."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 11:38:18 - ras_commander.RasUtils - INFO - File cloned from d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.u02 to d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.u01\n",
            "2025-04-08 11:38:18 - ras_commander.RasUtils - INFO - Project file updated with new Unsteady entry: 01\n",
            "2025-04-08 11:38:18 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.rasmap\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "New unsteady flow created: 01\n",
            "\n",
            "Updated unsteady flow files:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>unsteady_number</th>\\n', '      <th>full_path</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Flow Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Use Restart</th>\\n', '      <th>Precipitation Mode</th>\\n', '      <th>Wind Mode</th>\\n', '      <th>Met BC=Precipitation|Mode</th>\\n', '      <th>Met BC=Evapotranspiration|Mode</th>\\n', '      <th>Met BC=Precipitation|Expanded View</th>\\n', '      <th>Met BC=Precipitation|Constant Units</th>\\n', '      <th>Met BC=Precipitation|Gridded Source</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>Flow Hydrograph 2</td>\\n', '      <td>6.30</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>None</td>\\n', '      <td>None</td>\\n', '      <td>0</td>\\n', '      <td>mm/hr</td>\\n', '      <td>DSS</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>Flow Hydrograph 2</td>\\n', '      <td>6.30</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>None</td>\\n', '      <td>None</td>\\n', '      <td>0</td>\\n', '      <td>mm/hr</td>\\n', '      <td>DSS</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  unsteady_number                                          full_path  \\\n",
              "0              02  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "1              01  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "\n",
              "  geometry_number         Flow Title Program Version Use Restart  \\\n",
              "0            None  Flow Hydrograph 2            6.30           0   \n",
              "1            None  Flow Hydrograph 2            6.30           0   \n",
              "\n",
              "  Precipitation Mode       Wind Mode Met BC=Precipitation|Mode  \\\n",
              "0            Disable  No Wind Forces                      None   \n",
              "1            Disable  No Wind Forces                      None   \n",
              "\n",
              "  Met BC=Evapotranspiration|Mode Met BC=Precipitation|Expanded View  \\\n",
              "0                           None                                  0   \n",
              "1                           None                                  0   \n",
              "\n",
              "  Met BC=Precipitation|Constant Units Met BC=Precipitation|Gridded Source  \n",
              "0                               mm/hr                                 DSS  \n",
              "1                               mm/hr                                 DSS  "
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "New unsteady flow details:\n",
            "Unsteady number: 01\n",
            "File path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.u01\n",
            "Flow Title: Flow Hydrograph 2\n"
          ]
        }
      ],
      "source": [
        "# Clone unsteady flow \"02\" to create a new unsteady flow file\n",
        "new_unsteady_number = RasPlan.clone_unsteady(\"02\")\n",
        "print(f\"New unsteady flow created: {new_unsteady_number}\")\n",
        "\n",
        "# Display updated unsteady flow files\n",
        "print(\"\\nUpdated unsteady flow files:\")\n",
        "display.display(ras.unsteady_df)\n",
        "\n",
        "# Examine the new unsteady flow's details\n",
        "new_unsteady = ras.unsteady_df[ras.unsteady_df['unsteady_number'] == new_unsteady_number].iloc[0]\n",
        "print(f\"\\nNew unsteady flow details:\")\n",
        "print(f\"Unsteady number: {new_unsteady_number}\")\n",
        "print(f\"File path: {new_unsteady['full_path']}\")\n",
        "print(f\"Flow Title: {new_unsteady.get('Flow Title', 'Not available')}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Associating Files and Setting Parameters\n",
        "\n",
        "Now that we have cloned our plan, geometry, and unsteady flow files, we need to associate them with each other and set various parameters.\n",
        "\n",
        "### Setting Geometry for a Plan\n",
        "\n",
        "Let's associate our new geometry with our new plan:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 11:38:18 - ras_commander.RasPlan - INFO - Updated Geom File in plan file to g02 for plan 03\n",
            "2025-04-08 11:38:18 - ras_commander.RasPlan - INFO - Geometry for plan 03 set to 02\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Updated geometry for plan 03 to geometry 02\n",
            "Plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n",
            "\n",
            "Verified that plan 03 now uses geometry file: g02\n"
          ]
        }
      ],
      "source": [
        "# Set the new geometry for the cloned plan\n",
        "updated_geom_df = RasPlan.set_geom(new_plan_number, new_geom_number)\n",
        "plan_path = RasPlan.get_plan_path(new_plan_number, ras_object=ras)\n",
        "print(f\"Updated geometry for plan {new_plan_number} to geometry {new_geom_number}\")\n",
        "print(f\"Plan file path: {plan_path}\")\n",
        "\n",
        "# Let's verify the change\n",
        "updated_plan = ras.plan_df[ras.plan_df['plan_number'] == new_plan_number].iloc[0]\n",
        "print(f\"\\nVerified that plan {new_plan_number} now uses geometry file: {updated_plan.get('Geom File', 'None')}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Setting Unsteady Flow for a Plan\n",
        "\n",
        "Similarly, let's associate our new unsteady flow file with our plan:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Updated unsteady flow for plan 03 to unsteady flow 01\n"
          ]
        }
      ],
      "source": [
        "# Set unsteady flow for the cloned plan\n",
        "RasPlan.set_unsteady(new_plan_number, new_unsteady_number)\n",
        "print(f\"Updated unsteady flow for plan {new_plan_number} to unsteady flow {new_unsteady_number}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Clearing Geometry Preprocessor Files\n",
        "\n",
        "When working with geometry files, it's important to clear the preprocessor files to ensure clean results. These files (with `.c*` extension) contain computed hydraulic properties that should be recomputed when the geometry changes."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 11:38:18 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n",
            "2025-04-08 11:38:18 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n",
            "2025-04-08 11:38:18 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Cleared geometry preprocessor files for plan 03\n",
            "Preprocessor file exists after clearing: False\n"
          ]
        }
      ],
      "source": [
        "# Clear geometry preprocessor files for the cloned plan\n",
        "RasGeo.clear_geompre_files(plan_path)\n",
        "print(f\"Cleared geometry preprocessor files for plan {new_plan_number}\")\n",
        "\n",
        "# Check if preprocessor file exists after clearing\n",
        "geom_preprocessor_suffix = '.c' + ''.join(Path(plan_path).suffixes[1:])\n",
        "geom_preprocessor_file = Path(plan_path).with_suffix(geom_preprocessor_suffix)\n",
        "print(f\"Preprocessor file exists after clearing: {geom_preprocessor_file.exists()}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Setting Computation Parameters\n",
        "\n",
        "Let's set the computation parameters for our plan:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 11:38:18 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n",
            "2025-04-08 11:38:18 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n",
            "2025-04-08 11:38:18 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Updated number of cores for plan 03 to 2\n",
            "\n",
            "Verified that UNET D1 Cores is set to: 2\n",
            "Updated geometry preprocessor options for plan 03\n",
            "- Run HTab: -1 (Force recomputation of geometry tables)\n",
            "- Use Existing IB Tables: -1 (Force recomputation of interpolation/boundary tables)\n",
            "\n",
            "Verified setting values:\n",
            "- Run HTab: -1\n",
            "- UNET Use Existing IB Tables: -1\n"
          ]
        }
      ],
      "source": [
        "# Set the number of cores to use for the computation\n",
        "RasPlan.set_num_cores(new_plan_number, 2)\n",
        "print(f\"Updated number of cores for plan {new_plan_number} to 2\")\n",
        "\n",
        "# Verify by extracting the value from the plan file\n",
        "cores_value = RasPlan.get_plan_value(new_plan_number, \"UNET D1 Cores\")\n",
        "print(f\"\\nVerified that UNET D1 Cores is set to: {cores_value}\")\n",
        "\n",
        "# Set geometry preprocessor options\n",
        "RasPlan.set_geom_preprocessor(plan_path, run_htab=-1, use_ib_tables=-1)\n",
        "print(f\"Updated geometry preprocessor options for plan {new_plan_number}\")\n",
        "print(f\"- Run HTab: -1 (Force recomputation of geometry tables)\")\n",
        "print(f\"- Use Existing IB Tables: -1 (Force recomputation of interpolation/boundary tables)\")\n",
        "\n",
        "# Verify by extracting the values from the plan file\n",
        "run_htab_value = RasPlan.get_plan_value(new_plan_number, \"Run HTab\")\n",
        "ib_tables_value = RasPlan.get_plan_value(new_plan_number, \"UNET Use Existing IB Tables\")\n",
        "print(f\"\\nVerified setting values:\")\n",
        "print(f\"- Run HTab: {run_htab_value}\")\n",
        "print(f\"- UNET Use Existing IB Tables: {ib_tables_value}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Updating Simulation Parameters\n",
        "\n",
        "Now, let's update various simulation parameters for our plan:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 11:38:18 - ras_commander.RasPlan - INFO - Updated simulation date in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Updated simulation date for plan 03:\n",
            "- Start Date: 2023-01-01 00:00:00\n",
            "- End Date: 2023-01-05 23:59:00\n"
          ]
        }
      ],
      "source": [
        "# 1. Update simulation date\n",
        "start_date = datetime(2023, 1, 1, 0, 0)  # January 1, 2023, 00:00\n",
        "end_date = datetime(2023, 1, 5, 23, 59)  # January 5, 2023, 23:59\n",
        "\n",
        "RasPlan.update_simulation_date(new_plan_number, start_date, end_date)\n",
        "print(f\"Updated simulation date for plan {new_plan_number}:\")\n",
        "print(f\"- Start Date: {start_date}\")\n",
        "print(f\"- End Date: {end_date}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Verified Simulation Date value: 01JAN2023,0000,05JAN2023,2359\n"
          ]
        }
      ],
      "source": [
        "# Verify the update\n",
        "sim_date = RasPlan.get_plan_value(new_plan_number, \"Simulation Date\")\n",
        "print(f\"Verified Simulation Date value: {sim_date}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 11:38:18 - ras_commander.RasPlan - INFO - Successfully updated intervals in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Updated plan intervals for plan 03:\n",
            "- Computation Interval: 1MIN\n",
            "- Output Interval: 15MIN\n",
            "- Mapping Interval: 30MIN\n",
            "Verified interval values:\n",
            "- Computation Interval: 1MIN\n",
            "- Mapping Interval: 30MIN\n"
          ]
        }
      ],
      "source": [
        "# 2. Update plan intervals\n",
        "RasPlan.update_plan_intervals(\n",
        "    new_plan_number,\n",
        "    computation_interval=\"1MIN\",  # Computational time step\n",
        "    output_interval=\"15MIN\",      # How often results are written\n",
        "    mapping_interval=\"30MIN\"      # How often mapping outputs are created\n",
        ")\n",
        "print(f\"\\nUpdated plan intervals for plan {new_plan_number}:\")\n",
        "print(f\"- Computation Interval: 1MIN\")\n",
        "print(f\"- Output Interval: 15MIN\")\n",
        "print(f\"- Mapping Interval: 30MIN\")\n",
        "\n",
        "# Verify the updates\n",
        "comp_interval = RasPlan.get_plan_value(new_plan_number, \"Computation Interval\")\n",
        "mapping_interval = RasPlan.get_plan_value(new_plan_number, \"Mapping Interval\")\n",
        "print(f\"Verified interval values:\")\n",
        "print(f\"- Computation Interval: {comp_interval}\")\n",
        "print(f\"- Mapping Interval: {mapping_interval}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 11:38:18 - ras_commander.RasPlan - INFO - Successfully updated run flags in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Updated run flags for plan 03:\n",
            "- Geometry Preprocessor: True\n",
            "- Unsteady Flow Simulation: True\n",
            "- Post Processor: True\n",
            "- Floodplain Mapping: True\n"
          ]
        }
      ],
      "source": [
        "# 3. Update run flags\n",
        "RasPlan.update_run_flags(\n",
        "    new_plan_number,\n",
        "    geometry_preprocessor=True,   # Run the geometry preprocessor\n",
        "    unsteady_flow_simulation=True, # Run unsteady flow simulation\n",
        "    post_processor=True,          # Run post-processing\n",
        "    floodplain_mapping=True       # Generate floodplain mapping outputs\n",
        ")\n",
        "print(f\"\\nUpdated run flags for plan {new_plan_number}:\")\n",
        "print(f\"- Geometry Preprocessor: True\")\n",
        "print(f\"- Unsteady Flow Simulation: True\")\n",
        "print(f\"- Post Processor: True\")\n",
        "print(f\"- Floodplain Mapping: True\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 11:38:18 - ras_commander.RasPlan - WARNING - Unknown key: Run UNet. Valid keys are: Description, Computation Interval, Program Version, Run UNET, UNET D2 Solver Type, Mapping Interval, Geom File, Run Sediment, Short Identifier, Friction Slope Method, Run HTab, Run Post Process, UNET D2 Cores, Run RASMapper, UNET Use Existing IB Tables, DSS File, PS Cores, Run WQNET, Plan Title, Simulation Date, Plan File, UNET D1 Cores, Flow File, UNET D2 Name, UNET 1D Methodology\n",
            " Add more keys and explanations in get_plan_value() as needed.\n",
            "2025-04-08 11:38:18 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n",
            "2025-04-08 11:38:18 - ras_commander.RasPlan - INFO - Updated description in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n",
            "2025-04-08 11:38:18 - ras_commander.RasPlan - WARNING - No description found in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Verified run flag values:\n",
            "- Run HTab (Geometry Preprocessor): 1\n",
            "- Run UNet (Unsteady Flow): 1\n",
            "\n",
            "Updated description for plan 03\n",
            "Current plan description:\n",
            "\n"
          ]
        }
      ],
      "source": [
        "# Verify the updates\n",
        "run_htab = RasPlan.get_plan_value(new_plan_number, \"Run HTab\")\n",
        "run_unet = RasPlan.get_plan_value(new_plan_number, \"Run UNet\")\n",
        "print(f\"Verified run flag values:\")\n",
        "print(f\"- Run HTab (Geometry Preprocessor): {run_htab}\")\n",
        "print(f\"- Run UNet (Unsteady Flow): {run_unet}\")\n",
        "\n",
        "# 4. Update plan description\n",
        "new_description = \"Combined plan with modified geometry and unsteady flow\\nJanuary 2023 simulation\\n1-minute computation interval\\nGeometry and unsteady flow from cloned files\"\n",
        "RasPlan.update_plan_description(new_plan_number, new_description)\n",
        "print(f\"\\nUpdated description for plan {new_plan_number}\")\n",
        "\n",
        "# Read back the description\n",
        "current_description = RasPlan.read_plan_description(new_plan_number)\n",
        "print(f\"Current plan description:\\n{current_description}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Computing the Plan\n",
        "\n",
        "Now that we have set up all the parameters, let's compute the plan using RasCmdr.compute_plan():"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 11:38:18 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n",
            "2025-04-08 11:38:19 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Computing plan 03...\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 11:38:19 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n",
            "2025-04-08 11:38:19 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-08 11:38:19 - ras_commander.RasCmdr - INFO - Cleared geometry preprocessor files for plan: 03\n",
            "2025-04-08 11:38:19 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-08 11:38:19 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\"\n",
            "2025-04-08 11:41:30 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 03\n",
            "2025-04-08 11:41:30 - ras_commander.RasCmdr - INFO - Total run time for plan 03: 191.80 seconds\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Plan 03 computed successfully\n"
          ]
        }
      ],
      "source": [
        "# Compute the plan with our configured settings\n",
        "# Note: This may take several minutes depending on the complexity of the model\n",
        "print(f\"Computing plan {new_plan_number}...\")\n",
        "success = RasCmdr.compute_plan(new_plan_number, clear_geompre=True)\n",
        "\n",
        "if success:\n",
        "    print(f\"Plan {new_plan_number} computed successfully\")\n",
        "else:\n",
        "    print(f\"Failed to compute plan {new_plan_number}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Verifying Results\n",
        "\n",
        "After computation, we should check if results were written correctly:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "HDF entries for the project:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>PS Cores</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>description</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>2</th>\\n', '      <td>03</td>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>Unsteady with Bridges and Dam clonedplan</td>\\n', '      <td>5.00</td>\\n', '      <td>Combined Test Plan clone</td>\\n', '      <td>01JAN2023,0000,05JAN2023,2359</td>\\n', '      <td>1MIN</td>\\n', '      <td>30MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>2</td>\\n', '      <td>Combined plan with modified geometry and unste...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>None</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  plan_number unsteady_number geometry_number  \\\n",
              "2          03              01              02   \n",
              "\n",
              "                                 Plan Title Program Version  \\\n",
              "2  Unsteady with Bridges and Dam clonedplan            5.00   \n",
              "\n",
              "           Short Identifier                Simulation Date  \\\n",
              "2  Combined Test Plan clone  01JAN2023,0000,05JAN2023,2359   \n",
              "\n",
              "  Computation Interval Mapping Interval Run HTab  ... PS Cores DSS File  \\\n",
              "2                 1MIN            30MIN        1  ...     None      dss   \n",
              "\n",
              "  Friction Slope Method                                        description  \\\n",
              "2                     2  Combined plan with modified geometry and unste...   \n",
              "\n",
              "                                    HDF_Results_Path  Geom File  Geom Path  \\\n",
              "2  d:\\GitHub\\ras-commander\\examples\\example_proje...         02       None   \n",
              "\n",
              "  Flow File Flow Path                                          full_path  \n",
              "2        01      None  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "\n",
              "[1 rows x 27 columns]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Plan 03 has a valid HDF results file:\n",
            "HDF Path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03.hdf\n",
            "\n",
            "All plan entries with their HDF paths:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>HDF_Results_Path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>None</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>03</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  plan_number                                   HDF_Results_Path\n",
              "0          01                                               None\n",
              "1          02                                               None\n",
              "2          03  d:\\GitHub\\ras-commander\\examples\\example_proje..."
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Refresh the plan entries to ensure we have the latest data\n",
        "ras.plan_df = ras.get_plan_entries()\n",
        "hdf_entries = ras.get_hdf_entries()\n",
        "\n",
        "if not hdf_entries.empty:\n",
        "    print(\"HDF entries for the project:\")\n",
        "    display.display(hdf_entries)\n",
        "    \n",
        "    # Check if our new plan has an HDF file\n",
        "    new_plan_hdf = hdf_entries[hdf_entries['plan_number'] == new_plan_number]\n",
        "    if not new_plan_hdf.empty:\n",
        "        print(f\"\\nPlan {new_plan_number} has a valid HDF results file:\")\n",
        "        print(f\"HDF Path: {new_plan_hdf.iloc[0]['HDF_Results_Path']}\")\n",
        "    else:\n",
        "        print(f\"\\nNo HDF entry found for plan {new_plan_number}\")\n",
        "else:\n",
        "    print(\"No HDF entries found. This could mean the plan hasn't been computed successfully or the results haven't been written yet.\")\n",
        "\n",
        "# Display all plan entries to see their HDF paths\n",
        "print(\"\\nAll plan entries with their HDF paths:\")\n",
        "plan_hdf_info = ras.plan_df[['plan_number', 'HDF_Results_Path']]\n",
        "display.display(plan_hdf_info)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "If the plan was computed successfully, we can examine the runtime data and volume accounting from the HDF results:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 11:41:30 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03.hdf\n",
            "2025-04-08 11:41:30 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: BaldEagle.p03.hdf\n",
            "2025-04-08 11:41:30 - ras_commander.HdfResultsPlan - INFO - Plan Name: Begin DESCRIPTION\n",
            "2025-04-08 11:41:30 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 119.98333333333333\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Checking computation runtime data...\n",
            "\n",
            "Simulation Runtime Statistics:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Plan Name</th>\\n', '      <th>File Name</th>\\n', '      <th>Simulation Start Time</th>\\n', '      <th>Simulation End Time</th>\\n', '      <th>Simulation Duration (s)</th>\\n', '      <th>Simulation Time (hr)</th>\\n', '      <th>Completing Geometry (hr)</th>\\n', '      <th>Preprocessing Geometry (hr)</th>\\n', '      <th>Completing Event Conditions (hr)</th>\\n', '      <th>Unsteady Flow Computations (hr)</th>\\n', '      <th>Complete Process (hr)</th>\\n', '      <th>Unsteady Flow Speed (hr/hr)</th>\\n', '      <th>Complete Process Speed (hr/hr)</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>Begin DESCRIPTION</td>\\n', '      <td>BaldEagle.p03.hdf</td>\\n', '      <td>2023-01-01</td>\\n', '      <td>2023-01-05 23:59:00</td>\\n', '      <td>431940.0</td>\\n', '      <td>119.983333</td>\\n', '      <td>N/A</td>\\n', '      <td>0.044288</td>\\n', '      <td>N/A</td>\\n', '      <td>0.002161</td>\\n', '      <td>0.051636</td>\\n', '      <td>55512.144969</td>\\n', '      <td>2323.632256</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "           Plan Name          File Name Simulation Start Time  \\\n",
              "0  Begin DESCRIPTION  BaldEagle.p03.hdf            2023-01-01   \n",
              "\n",
              "  Simulation End Time  Simulation Duration (s)  Simulation Time (hr)  \\\n",
              "0 2023-01-05 23:59:00                 431940.0            119.983333   \n",
              "\n",
              "  Completing Geometry (hr)  Preprocessing Geometry (hr)  \\\n",
              "0                      N/A                     0.044288   \n",
              "\n",
              "  Completing Event Conditions (hr)  Unsteady Flow Computations (hr)  \\\n",
              "0                              N/A                         0.002161   \n",
              "\n",
              "   Complete Process (hr)  Unsteady Flow Speed (hr/hr)  \\\n",
              "0               0.051636                 55512.144969   \n",
              "\n",
              "   Complete Process Speed (hr/hr)  \n",
              "0                     2323.632256  "
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 11:41:30 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Simulation Duration: 431940.00 seconds\n",
            "Computation Time: 0.05164 hours\n",
            "Computation Speed: 2323.63 (simulation hours/compute hours)\n",
            "\n",
            "Checking volume accounting...\n"
          ]
        }
      ],
      "source": [
        "# Get computation runtime data from HDF\n",
        "print(\"Checking computation runtime data...\")\n",
        "runtime_df = HdfResultsPlan.get_runtime_data(new_plan_number)\n",
        "\n",
        "if runtime_df is not None and not runtime_df.empty:\n",
        "    print(\"\\nSimulation Runtime Statistics:\")\n",
        "    display.display(runtime_df)\n",
        "    \n",
        "    # Extract key metrics\n",
        "    sim_duration = runtime_df['Simulation Duration (s)'].iloc[0]\n",
        "    compute_time = runtime_df['Complete Process (hr)'].iloc[0]\n",
        "    compute_speed = runtime_df['Complete Process Speed (hr/hr)'].iloc[0]\n",
        "    \n",
        "    print(f\"\\nSimulation Duration: {sim_duration:.2f} seconds\")\n",
        "    print(f\"Computation Time: {compute_time:.5f} hours\")\n",
        "    print(f\"Computation Speed: {compute_speed:.2f} (simulation hours/compute hours)\")\n",
        "else:\n",
        "    print(\"No runtime data found. This may indicate the simulation didn't complete successfully.\")\n",
        "\n",
        "# Get volume accounting data\n",
        "print(\"\\nChecking volume accounting...\")\n",
        "volume_df = HdfResultsPlan.get_volume_accounting(new_plan_number)\n",
        "\n",
        "if volume_df is not None and not isinstance(volume_df, bool):\n",
        "    # Handle volume_df as a dictionary\n",
        "    if isinstance(volume_df, dict):\n",
        "        error_percent = volume_df.get('Error Percent')\n",
        "        if error_percent is not None:\n",
        "            print(f\"\\nFinal Volume Balance Error: {float(error_percent):.8f}%\")\n",
        "            \n",
        "        # Print other key statistics\n",
        "        print(\"\\nDetailed Volume Statistics:\")\n",
        "        print(f\"Volume Starting: {float(volume_df['Volume Starting']):.2f} {volume_df['Vol Accounting in'].decode()}\")\n",
        "        print(f\"Volume Ending: {float(volume_df['Volume Ending']):.2f} {volume_df['Vol Accounting in'].decode()}\")\n",
        "        print(f\"Total Inflow: {float(volume_df['Total Boundary Flux of Water In']):.2f} {volume_df['Vol Accounting in'].decode()}\")\n",
        "        print(f\"Total Outflow: {float(volume_df['Total Boundary Flux of Water Out']):.2f} {volume_df['Vol Accounting in'].decode()}\")\n",
        "else:\n",
        "    print(\"No volume accounting data found. This may indicate the simulation didn't complete successfully.\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Summary of Plan and Geometry Operations\n",
        "\n",
        "In this notebook, we've covered a comprehensive range of operations on HEC-RAS plan and geometry files using the RAS Commander library:\n",
        "\n",
        "1. **Project Initialization**: We initialized a HEC-RAS project to work with\n",
        "2. **Plan Operations**:\n",
        "   - Created a new plan by cloning an existing one\n",
        "   - Updated simulation parameters (dates, intervals, etc.)\n",
        "   - Set run flags for different components\n",
        "   - Updated the plan description\n",
        "3. **Geometry Operations**:\n",
        "   - Created a new geometry by cloning an existing one\n",
        "   - Associated the new geometry with our plan\n",
        "   - Cleared geometry preprocessor files\n",
        "4. **Unsteady Flow Operations**:\n",
        "   - Created a new unsteady flow file by cloning an existing one\n",
        "   - Associated it with our plan\n",
        "5. **Computation and Verification**:\n",
        "   - Computed our plan with the specified settings\n",
        "   - Verified the results using HDF entries\n",
        "   - Analyzed runtime statistics and volume accounting\n",
        "\n",
        "\n",
        "### Key Classes and Functions Used\n",
        "\n",
        "- `RasPlan`: For plan operations (cloning, setting components, and modifying parameters)\n",
        "- `RasGeo`: For geometry operations (cloning, clearing preprocessor files)\n",
        "- `RasCmdr`: For executing HEC-RAS simulations\n",
        "\n",
        "### Next Steps\n",
        "\n",
        "To further enhance your HEC-RAS automation, consider exploring:\n",
        "\n",
        "1. **Parameter Sweeps**: Create and run multiple plans with varying parameters\n",
        "2. **Parallel Computations**: Run multiple plans simultaneously using `RasCmdr.compute_parallel()`\n",
        "3. **Advanced Results Analysis**: Use the HDF classes to extract and analyze specific model results\n",
        "4. **Spatial Visualization**: Create maps and plots of simulation results\n",
        "5. **Model Calibration**: Automate comparison between model results and observations\n",
        "\n",
        "The RAS Commander library provides a powerful framework for automating and streamlining your HEC-RAS workflows, enabling more efficient hydraulic modeling and analyses."
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "rascmdr",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
}
==================================================

File: c:\GH\ras-commander\examples\03_unsteady_flow_operations.ipynb
==================================================
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Package Installation and Environment Setup\n",
        "Uncomment and run package installation commands if needed"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [],
      "source": [
        "# 1. Install ras-commander from pip (uncomment to install if needed)\n",
        "#!pip install ras-commander\n",
        "# This installs ras-commander and all dependencies\n",
        "\n",
        "generate_plots = True"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {},
      "outputs": [],
      "source": [
        "# 2. Import all required modules\n",
        "\n",
        "# Import all ras-commander modules\n",
        "from ras_commander import *\n",
        "\n",
        "# Import the required libraries for this notebook\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from IPython import display\n",
        "import os\n",
        "from pathlib import Path\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Understanding Unsteady Flow Files in HEC-RAS\n",
        "\n",
        "Unsteady flow files (`.u*` files) in HEC-RAS define the time-varying boundary conditions that drive dynamic simulations. These include:\n",
        "\n",
        "- **Flow Hydrographs**: Time-series of flow values at model boundaries\n",
        "- **Stage Hydrographs**: Time-series of water surface elevations\n",
        "- **Lateral Inflows**: Distributed inflows along a reach\n",
        "- **Gate Operations**: Time-series of gate settings\n",
        "- **Meteorological Data**: Rainfall, evaporation, and other meteorological inputs\n",
        "\n",
        "The `RasUnsteady` class in RAS Commander provides methods for working with these files, including extracting boundaries, reading tables, and modifying parameters.\n",
        "\n",
        "Let's set up our working directory and define paths to example projects:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Downloading and Extracting Example HEC-RAS Projects\n",
        "\n",
        "We'll use the `RasExamples` class to download and extract an example HEC-RAS project with unsteady flow files. For this notebook, we'll use the \"Balde Eagle Creek\" project."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 16:43:34 - ras_commander.RasExamples - INFO - Found zip file: d:\\GitHub\\ras-commander\\examples\\Example_Projects_6_6.zip\n",
            "2025-04-08 16:43:34 - ras_commander.RasExamples - INFO - Loading project data from CSV...\n",
            "2025-04-08 16:43:34 - ras_commander.RasExamples - INFO - Loaded 68 projects from CSV.\n",
            "2025-04-08 16:43:34 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
            "2025-04-08 16:43:34 - ras_commander.RasExamples - INFO - Extracting project 'Balde Eagle Creek'\n",
            "2025-04-08 16:43:34 - ras_commander.RasExamples - INFO - Project 'Balde Eagle Creek' already exists. Deleting existing folder...\n",
            "2025-04-08 16:43:34 - ras_commander.RasExamples - INFO - Existing folder for project 'Balde Eagle Creek' has been deleted.\n",
            "2025-04-08 16:43:34 - ras_commander.RasExamples - INFO - Successfully extracted project 'Balde Eagle Creek' to d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Extracted project to: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n",
            "Bald Eagle Creek project exists: True\n"
          ]
        }
      ],
      "source": [
        "# Extract the Bald Eagle Creek example project\n",
        "# The extract_project method downloads the project from GitHub if not already present,\n",
        "# and extracts it to the example_projects folder\n",
        "bald_eagle_path = RasExamples.extract_project(\"Balde Eagle Creek\")\n",
        "print(f\"Extracted project to: {bald_eagle_path}\")  \n",
        "\n",
        "\n",
        "# Verify the path exists\n",
        "print(f\"Bald Eagle Creek project exists: {bald_eagle_path.exists()}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 1: Project Initialization\n",
        "\n",
        "The first step is to initialize the HEC-RAS project. This is done using the `init_ras_project()` function, which takes the following parameters:\n",
        "\n",
        "- `ras_project_folder`: Path to the HEC-RAS project folder (required)\n",
        "- `ras_version`: HEC-RAS version (e.g., \"6.6\") or path to Ras.exe (required first time)\n",
        "\n",
        "This function initializes the global `ras` object that we'll use for the rest of the notebook."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 16:43:34 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-08 16:43:34 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.rasmap\n",
            "2025-04-08 16:43:34 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Initialized HEC-RAS project: BaldEagle\n"
          ]
        }
      ],
      "source": [
        "# Initialize the HEC-RAS project\n",
        "# This function returns a RAS object, but also updates the global 'ras' object\n",
        "# Parameters:\n",
        "#   - ras_project_folder: Path to the HEC-RAS project folder\n",
        "#   - ras_version: HEC-RAS version or path to Ras.exe\n",
        "\n",
        "init_ras_project(bald_eagle_path, \"6.6\")\n",
        "print(f\"Initialized HEC-RAS project: {ras.project_name}\")\n",
        "\n",
        "# Display the unsteady flow files in the project\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "HEC-RAS Project Plan Data (plan_df):\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>UNET D2 Cores</th>\\n', '      <th>PS Cores</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>01</td>\\n', '      <td>Unsteady with Bridges and Dam</td>\\n', '      <td>5.00</td>\\n', '      <td>UnsteadyFlow</td>\\n', '      <td>18FEB1999,0000,24FEB1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>1HOUR</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>0.0</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>2</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>Steady Flow Run</td>\\n', '      <td>NaN</td>\\n', '      <td>SteadyRun</td>\\n', '      <td>02/18/1999,0000,02/24/1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>NaN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>NaN</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  plan_number unsteady_number geometry_number                     Plan Title  \\\\\\n', '0          01              02              01  Unsteady with Bridges and Dam   \\n', '1          02            None              01                Steady Flow Run   \\n', '\\n', '  Program Version Short Identifier                  Simulation Date  \\\\\\n', '0            5.00     UnsteadyFlow    18FEB1999,0000,24FEB1999,0500   \\n', '1             NaN        SteadyRun  02/18/1999,0000,02/24/1999,0500   \\n', '\\n', '  Computation Interval Mapping Interval Run HTab  ... UNET D2 Cores PS Cores  \\\\\\n', '0                 2MIN            1HOUR        1  ...           0.0     None   \\n', '1                 2MIN              NaN        1  ...           NaN     None   \\n', '\\n', '  DSS File Friction Slope Method HDF_Results_Path  Geom File  \\\\\\n', '0      dss                     2             None         01   \\n', '1      dss                     1             None         01   \\n', '\\n', '                                           Geom Path Flow File  \\\\\\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...        02   \\n', '1  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...        02   \\n', '\\n', '                                           Flow Path  \\\\\\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '1  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '\\n', '                                           full_path  \\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...  \\n', '1  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...  \\n', '\\n', '[2 rows x 26 columns]']"
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nHEC-RAS Project Plan Data (plan_df):\")\n",
        "ras.plan_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "HEC-RAS Project Geometry Data (geom_df):\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>geom_file</th>\\n', '      <th>geom_number</th>\\n', '      <th>full_path</th>\\n', '      <th>hdf_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>g01</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  geom_file geom_number                                          full_path  \\\\\\n', '0       g01          01  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '\\n', '                                            hdf_path  \\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...  ']"
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nHEC-RAS Project Geometry Data (geom_df):\")\n",
        "ras.geom_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "HEC-RAS Project Unsteady Flow Data (unsteady_df):\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>unsteady_number</th>\\n', '      <th>full_path</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Flow Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Use Restart</th>\\n', '      <th>Precipitation Mode</th>\\n', '      <th>Wind Mode</th>\\n', '      <th>Met BC=Precipitation|Mode</th>\\n', '      <th>Met BC=Evapotranspiration|Mode</th>\\n', '      <th>Met BC=Precipitation|Expanded View</th>\\n', '      <th>Met BC=Precipitation|Constant Units</th>\\n', '      <th>Met BC=Precipitation|Gridded Source</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>Flow Hydrograph 2</td>\\n', '      <td>6.30</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>None</td>\\n', '      <td>None</td>\\n', '      <td>0</td>\\n', '      <td>mm/hr</td>\\n', '      <td>DSS</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  unsteady_number                                          full_path  \\\\\\n', '0              02  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '\\n', '  geometry_number         Flow Title Program Version Use Restart  \\\\\\n', '0            None  Flow Hydrograph 2            6.30           0   \\n', '\\n', '  Precipitation Mode       Wind Mode Met BC=Precipitation|Mode  \\\\\\n', '0            Disable  No Wind Forces                      None   \\n', '\\n', '  Met BC=Evapotranspiration|Mode Met BC=Precipitation|Expanded View  \\\\\\n', '0                           None                                  0   \\n', '\\n', '  Met BC=Precipitation|Constant Units Met BC=Precipitation|Gridded Source  \\n', '0                               mm/hr                                 DSS  ']"
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nHEC-RAS Project Unsteady Flow Data (unsteady_df):\")\n",
        "ras.unsteady_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "HEC-RAS Project Boundary Data (boundaries_df):\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>unsteady_number</th>\\n', '      <th>boundary_condition_number</th>\\n', '      <th>river_reach_name</th>\\n', '      <th>river_station</th>\\n', '      <th>storage_area_name</th>\\n', '      <th>pump_station_name</th>\\n', '      <th>bc_type</th>\\n', '      <th>hydrograph_type</th>\\n', '      <th>Interval</th>\\n', '      <th>DSS Path</th>\\n', '      <th>...</th>\\n', '      <th>Flow Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Use Restart</th>\\n', '      <th>Precipitation Mode</th>\\n', '      <th>Wind Mode</th>\\n', '      <th>Met BC=Precipitation|Mode</th>\\n', '      <th>Met BC=Evapotranspiration|Mode</th>\\n', '      <th>Met BC=Precipitation|Expanded View</th>\\n', '      <th>Met BC=Precipitation|Constant Units</th>\\n', '      <th>Met BC=Precipitation|Gridded Source</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>02</td>\\n', '      <td>1</td>\\n', '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>138154.4</td>\\n', '      <td></td>\\n', '      <td>Flow Hydrograph</td>\\n', '      <td>Flow Hydrograph</td>\\n', '      <td>1HOUR</td>\\n', '      <td></td>\\n', '      <td>...</td>\\n', '      <td>Flow Hydrograph 2</td>\\n', '      <td>6.30</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>None</td>\\n', '      <td>None</td>\\n', '      <td>0</td>\\n', '      <td>mm/hr</td>\\n', '      <td>DSS</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>02</td>\\n', '      <td>2</td>\\n', '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>81500</td>\\n', '      <td></td>\\n', '      <td>Gate Opening</td>\\n', '      <td>None</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>...</td>\\n', '      <td>Flow Hydrograph 2</td>\\n', '      <td>6.30</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>None</td>\\n', '      <td>None</td>\\n', '      <td>0</td>\\n', '      <td>mm/hr</td>\\n', '      <td>DSS</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>02</td>\\n', '      <td>3</td>\\n', '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>659.942</td>\\n', '      <td></td>\\n', '      <td>Unknown</td>\\n', '      <td>None</td>\\n', '      <td>NaN</td>\\n', '      <td></td>\\n', '      <td>...</td>\\n', '      <td>Flow Hydrograph 2</td>\\n', '      <td>6.30</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>None</td>\\n', '      <td>None</td>\\n', '      <td>0</td>\\n', '      <td>mm/hr</td>\\n', '      <td>DSS</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  unsteady_number  boundary_condition_number river_reach_name river_station  \\\\\\n', '0              02                          1       Bald Eagle       Loc Hav   \\n', '1              02                          2       Bald Eagle       Loc Hav   \\n', '2              02                          3       Bald Eagle       Loc Hav   \\n', '\\n', '  storage_area_name pump_station_name          bc_type  hydrograph_type  \\\\\\n', '0          138154.4                    Flow Hydrograph  Flow Hydrograph   \\n', '1             81500                       Gate Opening             None   \\n', '2           659.942                            Unknown             None   \\n', '\\n', '  Interval DSS Path  ...         Flow Title Program Version Use Restart  \\\\\\n', '0    1HOUR           ...  Flow Hydrograph 2            6.30           0   \\n', '1      NaN      NaN  ...  Flow Hydrograph 2            6.30           0   \\n', '2      NaN           ...  Flow Hydrograph 2            6.30           0   \\n', '\\n', '  Precipitation Mode       Wind Mode  Met BC=Precipitation|Mode  \\\\\\n', '0            Disable  No Wind Forces                       None   \\n', '1            Disable  No Wind Forces                       None   \\n', '2            Disable  No Wind Forces                       None   \\n', '\\n', '  Met BC=Evapotranspiration|Mode Met BC=Precipitation|Expanded View  \\\\\\n', '0                           None                                  0   \\n', '1                           None                                  0   \\n', '2                           None                                  0   \\n', '\\n', '  Met BC=Precipitation|Constant Units Met BC=Precipitation|Gridded Source  \\n', '0                               mm/hr                                 DSS  \\n', '1                               mm/hr                                 DSS  \\n', '2                               mm/hr                                 DSS  \\n', '\\n', '[3 rows x 29 columns]']"
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nHEC-RAS Project Boundary Data (boundaries_df):\")\n",
        "ras.boundaries_df"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Understanding the RasUnsteady Class\n",
        "\n",
        "The `RasUnsteady` class provides functionality for working with HEC-RAS unsteady flow files (`.u*` files). Key operations include:\n",
        "\n",
        "1. **Extracting Boundary Conditions**: Read and parse boundary conditions from unsteady flow files\n",
        "2. **Modifying Flow Titles**: Update descriptive titles for unsteady flow scenarios\n",
        "3. **Managing Restart Settings**: Configure restart file options for continuing simulations\n",
        "4. **Working with Tables**: Extract, modify, and update flow tables\n",
        "\n",
        "Most methods in this class are static and work with the global `ras` object by default, though you can also pass in a custom RAS object."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 2: Extract Boundary Conditions and Tables\n",
        "\n",
        "The `extract_boundary_and_tables()` method from the `RasUnsteady` class allows us to extract boundary conditions and their associated tables from an unsteady flow file.\n",
        "\n",
        "Parameters for `RasUnsteady.extract_boundary_and_tables()`:\n",
        "- `unsteady_file` (str): Path to the unsteady flow file\n",
        "- `ras_object` (optional): Custom RAS object to use instead of the global one\n",
        "\n",
        "Returns:\n",
        "- `pd.DataFrame`: DataFrame containing boundary conditions and their associated tables\n",
        "\n",
        "Let's see how this works with our example project:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Unsteady flow file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.u02\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 16:43:35 - ras_commander.RasUnsteady - INFO - Successfully extracted boundaries and tables from d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.u02\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Extracted 3 boundary conditions from the unsteady flow file.\n"
          ]
        }
      ],
      "source": [
        "# Get the path to unsteady flow file \"02\"\n",
        "unsteady_file = RasPlan.get_unsteady_path(\"02\")\n",
        "print(f\"Unsteady flow file path: {unsteady_file}\")\n",
        "\n",
        "# Extract boundary conditions and tables\n",
        "boundaries_df = RasUnsteady.extract_boundary_and_tables(unsteady_file)\n",
        "print(f\"Extracted {len(boundaries_df)} boundary conditions from the unsteady flow file.\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 3: Print Boundaries and Tables\n",
        "\n",
        "The `print_boundaries_and_tables()` method provides a formatted display of the boundary conditions and their associated tables. This method doesn't return anything; it just prints the information in a readable format.\n",
        "\n",
        "Parameters for `RasUnsteady.print_boundaries_and_tables()`:\n",
        "- `boundaries_df` (pd.DataFrame): DataFrame containing boundary conditions from `extract_boundary_and_tables()`\n",
        "\n",
        "Let's use this method to get a better understanding of our boundary conditions:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Detailed boundary conditions and tables:\n",
            "\n",
            "Boundaries and Tablesin boundaries_df:\n",
            "\n",
            "Boundary 1:\n",
            "River Name: Bald Eagle\n",
            "Reach Name: Loc Hav\n",
            "River Station: 138154.4\n",
            "DSS File: \n",
            "\n",
            "Tables for this boundary:\n",
            "\n",
            "Flow Hydrograph:\n",
            "         Value\n",
            "0     1075.530\n",
            "1     1301.640\n",
            "2     1676.940\n",
            "3     2199.120\n",
            "4     2864.950\n",
            "5     3670.340\n",
            "6     4610.320\n",
            "7     5679.080\n",
            "8     6870.050\n",
            "9     8175.880\n",
            "10    9588.521\n",
            "11    1099.261\n",
            "12    2698.791\n",
            "13    4377.231\n",
            "14    6124.261\n",
            "15    7929.081\n",
            "16    9780.592\n",
            "17    1667.362\n",
            "18    3577.750\n",
            "19   25500.000\n",
            "20   27422.250\n",
            "21   29332.640\n",
            "22   31219.410\n",
            "23   33070.920\n",
            "24   34875.740\n",
            "25   36622.770\n",
            "26   38301.210\n",
            "27   39900.740\n",
            "28   41411.480\n",
            "29   42824.120\n",
            "30   44129.950\n",
            "31   45320.920\n",
            "32   46389.680\n",
            "33   47329.660\n",
            "34   48135.050\n",
            "35   48800.880\n",
            "36   49323.060\n",
            "37   49698.360\n",
            "38   49924.480\n",
            "39   50000.000\n",
            "40   49924.480\n",
            "41   49698.360\n",
            "42   49323.060\n",
            "43   48800.880\n",
            "44   48135.050\n",
            "45   47329.660\n",
            "46   46389.680\n",
            "47   45320.920\n",
            "48   44129.950\n",
            "49   42824.120\n",
            "50   41411.480\n",
            "51   39900.740\n",
            "52   38301.210\n",
            "53   36622.770\n",
            "54   34875.740\n",
            "55   33070.920\n",
            "56   31219.410\n",
            "57   29332.640\n",
            "58   27422.250\n",
            "59   26133.620\n",
            "60   24907.840\n",
            "61   23741.840\n",
            "62   22632.710\n",
            "63   21577.670\n",
            "64   20574.080\n",
            "65   19619.450\n",
            "66   18711.360\n",
            "67   17847.570\n",
            "68   17025.900\n",
            "69   16244.310\n",
            "70   15500.840\n",
            "71   14793.620\n",
            "72   14120.900\n",
            "73   13480.990\n",
            "74   12872.280\n",
            "75   12293.260\n",
            "76   11742.490\n",
            "77   11218.570\n",
            "78   10720.200\n",
            "79   10246.140\n",
            "80    9795.200\n",
            "81       9.000\n",
            "82     366.260\n",
            "83       8.000\n",
            "84     958.230\n",
            "85    8570.100\n",
            "86    8200.900\n",
            "87       7.000\n",
            "88     849.710\n",
            "89       7.000\n",
            "90     515.650\n",
            "91       7.000\n",
            "92     197.880\n",
            "93    6895.600\n",
            "94       6.000\n",
            "95     608.070\n",
            "96    6334.560\n",
            "97    6074.390\n",
            "98    5826.910\n",
            "99    5591.500\n",
            "100   5367.570\n",
            "101   5154.560\n",
            "102   4951.940\n",
            "103   4759.200\n",
            "104   4575.860\n",
            "105   4401.470\n",
            "106   4235.580\n",
            "107   4077.770\n",
            "108   3927.670\n",
            "109   3784.890\n",
            "110   3649.070\n",
            "111   3519.870\n",
            "112   3396.970\n",
            "113   3280.070\n",
            "114   3168.870\n",
            "115   3063.090\n",
            "116   2962.480\n",
            "117   2866.760\n",
            "118   2775.720\n",
            "119   2689.120\n",
            "120   2606.740\n",
            "121   2528.380\n",
            "122   2453.840\n",
            "123   2382.930\n",
            "124   2315.490\n",
            "125   2251.330\n",
            "126   2190.300\n",
            "127      2.000\n",
            "128    132.250\n",
            "129      2.000\n",
            "130     77.030\n",
            "131   2024.500\n",
            "132      1.000\n",
            "133    974.540\n",
            "134      1.000\n",
            "135    927.010\n",
            "136   1881.800\n",
            "137      1.000\n",
            "138    838.790\n",
            "139      1.000\n",
            "140    797.880\n",
            "141      1.000\n",
            "142    758.970\n",
            "143   1721.950\n",
            "144   1686.740\n",
            "145   1653.250\n",
            "146   1621.390\n",
            "147   1591.090\n",
            "148   1562.260\n",
            "149   1534.840\n",
            "150   1508.750\n",
            "151   1483.940\n",
            "152   1460.340\n",
            "153   1437.890\n",
            "154   1416.530\n",
            "155   1396.220\n",
            "156   1376.890\n",
            "157   1358.510\n",
            "158   1341.030\n",
            "159   1324.400\n",
            "160   1308.570\n",
            "161   1293.530\n",
            "162   1279.210\n",
            "--------------------------------------------------------------------------------\n",
            "\n",
            "Boundary 2:\n",
            "River Name: Bald Eagle\n",
            "Reach Name: Loc Hav\n",
            "River Station: 81500\n",
            "DSS File: \n",
            "\n",
            "Tables for this boundary:\n",
            "\n",
            "Gate Openings:\n",
            "     Value\n",
            "0     6.00\n",
            "1     6.20\n",
            "2     3.00\n",
            "3     6.40\n",
            "4     5.00\n",
            "5     6.60\n",
            "6     8.00\n",
            "7     6.00\n",
            "8     9.00\n",
            "9     7.10\n",
            "10    3.00\n",
            "11    7.30\n",
            "12    5.00\n",
            "13    7.50\n",
            "14    8.00\n",
            "15    7.00\n",
            "16    8.00\n",
            "17    8.00\n",
            "18    3.00\n",
            "19    8.25\n",
            "20    8.48\n",
            "21    8.70\n",
            "22    8.93\n",
            "23    9.15\n",
            "24    9.38\n",
            "25    9.60\n",
            "26    9.83\n",
            "27    1.00\n",
            "28    0.05\n",
            "29    1.00\n",
            "30    0.28\n",
            "31   10.50\n",
            "32    1.00\n",
            "33    0.73\n",
            "34    1.00\n",
            "35    0.95\n",
            "36    1.00\n",
            "37    1.18\n",
            "38   11.40\n",
            "39    1.00\n",
            "40    1.63\n",
            "41    1.00\n",
            "42    1.85\n",
            "43    1.00\n",
            "44    2.08\n",
            "45   12.30\n",
            "46    1.00\n",
            "47    2.53\n",
            "48   12.75\n",
            "49   12.98\n",
            "50   13.20\n",
            "51   13.43\n",
            "52   13.65\n",
            "53   13.88\n",
            "54   14.10\n",
            "55   14.33\n",
            "56   14.55\n",
            "57   14.78\n",
            "58   15.00\n",
            "59   14.00\n",
            "60   83.00\n",
            "61   14.00\n",
            "62   66.00\n",
            "63   14.00\n",
            "64   49.00\n",
            "65   14.00\n",
            "66   32.00\n",
            "67   14.00\n",
            "68   15.00\n",
            "69   13.00\n",
            "70   98.00\n",
            "71   13.00\n",
            "72   81.00\n",
            "73   13.00\n",
            "74   64.00\n",
            "75   13.00\n",
            "76   47.00\n",
            "77   13.31\n",
            "78   13.14\n",
            "79   12.97\n",
            "80   12.80\n",
            "81   12.63\n",
            "82   12.46\n",
            "83   12.29\n",
            "84   12.12\n",
            "85   11.95\n",
            "86   11.78\n",
            "87   11.61\n",
            "88   11.44\n",
            "89   11.27\n",
            "90   11.10\n",
            "91   10.93\n",
            "92   10.76\n",
            "93   10.59\n",
            "94   10.42\n",
            "95   10.25\n",
            "96   10.08\n",
            "97    9.92\n",
            "98    9.75\n",
            "99    9.58\n",
            "100   9.41\n",
            "101   9.24\n",
            "102   9.07\n",
            "103   8.90\n",
            "104   8.73\n",
            "105   8.56\n",
            "106   8.39\n",
            "107   8.22\n",
            "108   8.05\n",
            "109   7.88\n",
            "110   7.71\n",
            "111   7.54\n",
            "112   7.37\n",
            "113   7.20\n",
            "114   7.03\n",
            "115   6.86\n",
            "116   6.69\n",
            "117   6.53\n",
            "118   6.36\n",
            "119   6.19\n",
            "120   6.02\n",
            "121   5.85\n",
            "122   5.68\n",
            "123   5.51\n",
            "124   5.34\n",
            "125   5.17\n",
            "126   5.00\n",
            "127   5.00\n",
            "128   5.00\n",
            "129   5.00\n",
            "130   5.00\n",
            "131   5.00\n",
            "132   5.00\n",
            "133   5.00\n",
            "134   5.00\n",
            "135   5.00\n",
            "136   5.00\n",
            "137   5.00\n",
            "138   5.00\n",
            "139   5.00\n",
            "140   5.00\n",
            "141   5.00\n",
            "142   5.00\n",
            "143   5.00\n",
            "144   5.00\n",
            "145   5.00\n",
            "146   5.00\n",
            "147   5.00\n",
            "148   5.00\n",
            "149   5.00\n",
            "150   5.00\n",
            "151   5.00\n",
            "152   5.00\n",
            "153   5.00\n",
            "154   5.00\n",
            "155   5.00\n",
            "156   5.00\n",
            "157   5.00\n",
            "158   5.00\n",
            "159   5.00\n",
            "160   5.00\n",
            "161   5.00\n",
            "162   5.00\n",
            "163   5.00\n",
            "164   5.00\n",
            "165   5.00\n",
            "166   5.00\n",
            "167   5.00\n",
            "168   5.00\n",
            "169   5.00\n",
            "170   5.00\n",
            "171   5.00\n",
            "172   5.00\n",
            "173   5.00\n",
            "174   5.00\n",
            "175   5.00\n",
            "176   5.00\n",
            "--------------------------------------------------------------------------------\n",
            "\n",
            "Boundary 3:\n",
            "River Name: Bald Eagle\n",
            "Reach Name: Loc Hav\n",
            "River Station: 659.942\n",
            "DSS File: \n",
            "--------------------------------------------------------------------------------\n"
          ]
        }
      ],
      "source": [
        "# Print the boundaries and tables in a formatted way\n",
        "print(\"Detailed boundary conditions and tables:\")\n",
        "RasUnsteady.print_boundaries_and_tables(boundaries_df)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Understanding Boundary Condition Types\n",
        "\n",
        "The output above shows the different types of boundary conditions in our unsteady flow file. Let's understand what each type means:\n",
        "\n",
        "1. **Flow Hydrograph**: A time series of flow values (typically in cfs or cms) entering the model at a specific location. These are used at upstream boundaries or internal points where flow enters the system.\n",
        "\n",
        "2. **Stage Hydrograph**: A time series of water surface elevations (typically in ft or m) that define the downstream boundary condition.\n",
        "\n",
        "3. **Gate Openings**: Time series of gate settings (typically height in ft or m) for hydraulic structures such as spillways, sluice gates, or other control structures.\n",
        "\n",
        "4. **Lateral Inflow Hydrograph**: Flow entering the system along a reach, not at a specific point. This can represent tributary inflows, overland flow, or other distributed inputs.\n",
        "\n",
        "5. **Normal Depth**: A boundary condition where the water surface slope is assumed to equal the bed slope. This is represented by a friction slope value.\n",
        "\n",
        "Let's look at a specific boundary condition in more detail:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Detailed look at boundary condition 1:\n",
            "\n",
            "Boundary Location:\n",
            "  River Name: Bald Eagle\n",
            "  Reach Name: Loc Hav\n",
            "  River Station: 138154.4\n",
            "  Storage Area Name: \n",
            "\n",
            "Boundary Properties:\n",
            "  Boundary Type: N/A\n",
            "  DSS File: \n",
            "  Use DSS: N/A\n",
            "\n",
            "Table Information:\n",
            "  Flow Hydrograph: 163 values\n",
            "    Min Value: 1.0\n",
            "    Max Value: 50000.0\n",
            "    First 5 Values: [1075.53, 1301.64, 1676.94, 2199.12, 2864.95]\n"
          ]
        }
      ],
      "source": [
        "# Let's examine the first boundary condition in more detail\n",
        "if not boundaries_df.empty:\n",
        "    first_boundary = boundaries_df.iloc[0]\n",
        "    print(f\"Detailed look at boundary condition {1}:\")\n",
        "    \n",
        "    # Print boundary location components\n",
        "    print(f\"\\nBoundary Location:\")\n",
        "    print(f\"  River Name: {first_boundary.get('River Name', 'N/A')}\")\n",
        "    print(f\"  Reach Name: {first_boundary.get('Reach Name', 'N/A')}\")\n",
        "    print(f\"  River Station: {first_boundary.get('River Station', 'N/A')}\")\n",
        "    print(f\"  Storage Area Name: {first_boundary.get('Storage Area Name', 'N/A')}\")\n",
        "    \n",
        "    # Print boundary condition type and other properties\n",
        "    print(f\"\\nBoundary Properties:\")\n",
        "    print(f\"  Boundary Type: {first_boundary.get('bc_type', 'N/A')}\")\n",
        "    print(f\"  DSS File: {first_boundary.get('DSS File', 'N/A')}\")\n",
        "    print(f\"  Use DSS: {first_boundary.get('Use DSS', 'N/A')}\")\n",
        "    \n",
        "    # Print table statistics if available\n",
        "    if 'Tables' in first_boundary and isinstance(first_boundary['Tables'], dict):\n",
        "        print(f\"\\nTable Information:\")\n",
        "        for table_name, table_df in first_boundary['Tables'].items():\n",
        "            print(f\"  {table_name}: {len(table_df)} values\")\n",
        "            if not table_df.empty:\n",
        "                print(f\"    Min Value: {table_df['Value'].min()}\")\n",
        "                print(f\"    Max Value: {table_df['Value'].max()}\")\n",
        "                print(f\"    First 5 Values: {table_df['Value'].head(5).tolist()}\")\n",
        "else:\n",
        "    print(\"No boundary conditions found in the unsteady flow file.\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 4: Update Flow Title\n",
        "\n",
        "The flow title in an unsteady flow file provides a description of the simulation scenario. The `update_flow_title()` method allows us to modify this title.\n",
        "\n",
        "Parameters for `RasUnsteady.update_flow_title()`:\n",
        "- `unsteady_file` (str): Full path to the unsteady flow file\n",
        "- `new_title` (str): New flow title (max 24 characters)\n",
        "- `ras_object` (optional): Custom RAS object to use instead of the global one\n",
        "\n",
        "Let's clone an unsteady flow file and update its title:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 16:43:35 - ras_commander.RasUtils - INFO - File cloned from d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.u02 to d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.u01\n",
            "2025-04-08 16:43:35 - ras_commander.RasUtils - INFO - Project file updated with new Unsteady entry: 01\n",
            "2025-04-08 16:43:35 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.rasmap\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "New unsteady flow created: 01\n"
          ]
        }
      ],
      "source": [
        "# Clone unsteady flow \"02\" to create a new unsteady flow file\n",
        "new_unsteady_number = RasPlan.clone_unsteady(\"02\")\n",
        "print(f\"New unsteady flow created: {new_unsteady_number}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": "[\"'01'\"]"
          },
          "execution_count": 13,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "new_unsteady_number"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "New unsteady flow file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.u01\n"
          ]
        }
      ],
      "source": [
        "# Get the path to the new unsteady flow file\n",
        "new_unsteady_file = RasPlan.get_unsteady_path(new_unsteady_number)\n",
        "print(f\"New unsteady flow file path: {new_unsteady_file}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": "[\"'d:\\\\\\\\GitHub\\\\\\\\ras-commander\\\\\\\\examples\\\\\\\\example_projects\\\\\\\\Balde Eagle Creek\\\\\\\\BaldEagle.u01'\"]"
          },
          "execution_count": 15,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "new_unsteady_file"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 16:43:35 - ras_commander.RasUnsteady - INFO - Updated Flow Title from 'Flow Hydrograph 2' to 'Modified Flow Scenario'\n",
            "2025-04-08 16:43:35 - ras_commander.RasUnsteady - INFO - Applied Flow Title modification to d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.u01\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Current flow title: Flow Hydrograph 2\n",
            "Updated flow title to: Modified Flow Scenario\n"
          ]
        }
      ],
      "source": [
        "# Get the current flow title\n",
        "current_title = None\n",
        "for _, row in ras.unsteady_df.iterrows():\n",
        "    if row['unsteady_number'] == new_unsteady_number and 'Flow Title' in row:\n",
        "        current_title = row['Flow Title']\n",
        "        break\n",
        "print(f\"Current flow title: {current_title}\")\n",
        "\n",
        "# Update the flow title\n",
        "new_title = \"Modified Flow Scenario\"\n",
        "RasUnsteady.update_flow_title(new_unsteady_file, new_title)\n",
        "print(f\"Updated flow title to: {new_title}\")\n",
        "\n",
        "# Refresh unsteady flow information to see the change"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>unsteady_number</th>\\n', '      <th>full_path</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Flow Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Use Restart</th>\\n', '      <th>Precipitation Mode</th>\\n', '      <th>Wind Mode</th>\\n', '      <th>Met BC=Precipitation|Mode</th>\\n', '      <th>Met BC=Evapotranspiration|Mode</th>\\n', '      <th>Met BC=Precipitation|Expanded View</th>\\n', '      <th>Met BC=Precipitation|Constant Units</th>\\n', '      <th>Met BC=Precipitation|Gridded Source</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>Flow Hydrograph 2</td>\\n', '      <td>6.30</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>None</td>\\n', '      <td>None</td>\\n', '      <td>0</td>\\n', '      <td>mm/hr</td>\\n', '      <td>DSS</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>Modified Flow Scenario</td>\\n', '      <td>6.30</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>None</td>\\n', '      <td>None</td>\\n', '      <td>0</td>\\n', '      <td>mm/hr</td>\\n', '      <td>DSS</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  unsteady_number                                          full_path  \\\\\\n', '0              02  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '1              01  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '\\n', '  geometry_number              Flow Title Program Version Use Restart  \\\\\\n', '0            None       Flow Hydrograph 2            6.30           0   \\n', '1            None  Modified Flow Scenario            6.30           0   \\n', '\\n', '  Precipitation Mode       Wind Mode Met BC=Precipitation|Mode  \\\\\\n', '0            Disable  No Wind Forces                      None   \\n', '1            Disable  No Wind Forces                      None   \\n', '\\n', '  Met BC=Evapotranspiration|Mode Met BC=Precipitation|Expanded View  \\\\\\n', '0                           None                                  0   \\n', '1                           None                                  0   \\n', '\\n', '  Met BC=Precipitation|Constant Units Met BC=Precipitation|Gridded Source  \\n', '0                               mm/hr                                 DSS  \\n', '1                               mm/hr                                 DSS  ']"
          },
          "execution_count": 17,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Review unsteady flow information to see the change\n",
        "ras.unsteady_df"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 6: Working with Flow Tables\n",
        "\n",
        "Flow tables in unsteady flow files contain the time-series data for boundary conditions. Let's explore how to extract and work with these tables using some of the advanced methods from the `RasUnsteady` class."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Extracted 2 tables from the unsteady flow file.\n",
            "\n",
            "Available tables:\n",
            "  Flow Hydrograph=\n",
            "  Gate Openings=\n",
            "\n",
            "Detailed look at table 'Flow Hydrograph=':\n",
            "  Number of values: 155\n",
            "  Min value: 0.0\n",
            "  Max value: 50000.0\n",
            "  Mean value: 15726.35\n",
            "  First 10 values: [1075.53, 1301.64, 1676.94, 2199.12, 2864.95, 3670.34, 4610.32, 5679.08, 6870.05, 8175.88]\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Extract specific tables from the unsteady flow file\n",
        "all_tables = RasUnsteady.extract_tables(new_unsteady_file)\n",
        "print(f\"Extracted {len(all_tables)} tables from the unsteady flow file.\")\n",
        "\n",
        "# Let's look at the available table names\n",
        "print(\"\\nAvailable tables:\")\n",
        "for table_name in all_tables.keys():\n",
        "    print(f\"  {table_name}\")\n",
        "\n",
        "# Select the first table for detailed analysis\n",
        "if all_tables and len(all_tables) > 0:\n",
        "    first_table_name = list(all_tables.keys())[0]\n",
        "    first_table = all_tables[first_table_name]\n",
        "    \n",
        "    print(f\"\\nDetailed look at table '{first_table_name}':\")\n",
        "    print(f\"  Number of values: {len(first_table)}\")\n",
        "    print(f\"  Min value: {first_table['Value'].min()}\")\n",
        "    print(f\"  Max value: {first_table['Value'].max()}\")\n",
        "    print(f\"  Mean value: {first_table['Value'].mean():.2f}\")\n",
        "    print(f\"  First 10 values: {first_table['Value'].head(10).tolist()}\")\n",
        "    \n",
        "    # Create a visualization of the table values\n",
        "    try:\n",
        "        import matplotlib.pyplot as plt\n",
        "        \n",
        "        plt.figure(figsize=(10, 6))\n",
        "        plt.plot(first_table['Value'].values)\n",
        "        plt.title(f\"{first_table_name} Values\")\n",
        "        plt.xlabel('Time Step')\n",
        "        plt.ylabel('Value')\n",
        "        plt.grid(True)\n",
        "        plt.show()\n",
        "    except Exception as e:\n",
        "        print(f\"Could not create visualization: {e}\")\n",
        "else:\n",
        "    print(\"No tables found in the unsteady flow file.\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 7: Modifying Flow Tables\n",
        "\n",
        "Now let's demonstrate how to modify a flow table and write it back to the unsteady flow file. For this example, we'll scale all the values in a table by a factor."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Scaling existing values down by a 0.75 scale factor"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 16:43:35 - ras_commander.RasUnsteady - INFO - Successfully updated table 'Flow Hydrograph=' in d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.u01\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Identified 2 tables in the unsteady flow file.\n",
            "\n",
            "Selected table: Flow Hydrograph=\n",
            "  Start line: 7\n",
            "  End line: 35\n",
            "\n",
            "Original table statistics:\n",
            "  Number of values: 155\n",
            "  Min value: 0.0\n",
            "  Max value: 50000.0\n",
            "  First 5 values: [1075.53, 1301.64, 1676.94, 2199.12, 2864.95]\n",
            "\n",
            "Modified table statistics (scaled by 0.75):\n",
            "  Number of values: 155\n",
            "  Min value: 0.0\n",
            "  Max value: 37500.0\n",
            "  First 5 values: [806.6475, 976.23, 1257.705, 1649.34, 2148.7124999999996]\n",
            "\n",
            "Updated table written back to the unsteady flow file.\n",
            "\n",
            "Verified updated table statistics:\n",
            "  Number of values: 159\n",
            "  Min value: 0.0\n",
            "  Max value: 37500.0\n",
            "  First 5 values: [807.0, 976.0, 1258.0, 1649.0, 2149.0]\n"
          ]
        }
      ],
      "source": [
        "# First, identify tables in the unsteady flow file\n",
        "tables = RasUnsteady.identify_tables(open(new_unsteady_file, 'r').readlines())\n",
        "print(f\"Identified {len(tables)} tables in the unsteady flow file.\")\n",
        "\n",
        "# Let's look at the first flow hydrograph table\n",
        "flow_hydrograph_tables = [t for t in tables if t[0] == 'Flow Hydrograph=']\n",
        "if flow_hydrograph_tables:\n",
        "    table_name, start_line, end_line = flow_hydrograph_tables[0]\n",
        "    print(f\"\\nSelected table: {table_name}\")\n",
        "    print(f\"  Start line: {start_line}\")\n",
        "    print(f\"  End line: {end_line}\")\n",
        "    \n",
        "    # Parse the table\n",
        "    lines = open(new_unsteady_file, 'r').readlines()\n",
        "    table_df = RasUnsteady.parse_fixed_width_table(lines, start_line, end_line)\n",
        "    print(f\"\\nOriginal table statistics:\")\n",
        "    print(f\"  Number of values: {len(table_df)}\")\n",
        "    print(f\"  Min value: {table_df['Value'].min()}\")\n",
        "    print(f\"  Max value: {table_df['Value'].max()}\")\n",
        "    print(f\"  First 5 values: {table_df['Value'].head(5).tolist()}\")\n",
        "    \n",
        "    # Modify the table - let's scale all values by 75%\n",
        "    scale_factor = 0.75\n",
        "    table_df['Value'] = table_df['Value'] * scale_factor\n",
        "    print(f\"\\nModified table statistics (scaled by {scale_factor}):\")\n",
        "    print(f\"  Number of values: {len(table_df)}\")\n",
        "    print(f\"  Min value: {table_df['Value'].min()}\")\n",
        "    print(f\"  Max value: {table_df['Value'].max()}\")\n",
        "    print(f\"  First 5 values: {table_df['Value'].head(5).tolist()}\")\n",
        "    \n",
        "    # Write the modified table back to the file\n",
        "    RasUnsteady.write_table_to_file(new_unsteady_file, table_name, table_df, start_line)\n",
        "    print(f\"\\nUpdated table written back to the unsteady flow file.\")\n",
        "    \n",
        "    # Re-read the table to verify changes\n",
        "    lines = open(new_unsteady_file, 'r').readlines()\n",
        "    updated_table_df = RasUnsteady.parse_fixed_width_table(lines, start_line, end_line)\n",
        "    print(f\"\\nVerified updated table statistics:\")\n",
        "    print(f\"  Number of values: {len(updated_table_df)}\")\n",
        "    print(f\"  Min value: {updated_table_df['Value'].min()}\")\n",
        "    print(f\"  Max value: {updated_table_df['Value'].max()}\")\n",
        "    print(f\"  First 5 values: {updated_table_df['Value'].head(5).tolist()}\")\n",
        "else:\n",
        "    print(\"No flow hydrograph tables found in the unsteady flow file.\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Updated flow hydrograph statistics:\n",
            "  Number of values: 159\n",
            "  Min flow: 0.0 cfs\n",
            "  Max flow: 37500.0 cfs\n",
            "  Mean flow: 11549.3 cfs\n"
          ]
        }
      ],
      "source": [
        "# Extract specific tables from the unsteady flow file\n",
        "all_tables = RasUnsteady.extract_tables(new_unsteady_file)\n",
        "\n",
        "# Get the updated flow hydrograph table\n",
        "flow_hydrograph_tables = [t for t in all_tables.keys() if 'Flow Hydrograph=' in t]\n",
        "if flow_hydrograph_tables:\n",
        "    table_name = flow_hydrograph_tables[0]\n",
        "    table_df = all_tables[table_name]\n",
        "    \n",
        "    # Create visualization of the updated flow values\n",
        "    import matplotlib.pyplot as plt\n",
        "    \n",
        "    plt.figure(figsize=(10, 6))\n",
        "    plt.plot(table_df['Value'].values, 'b-', label='Updated Flow')\n",
        "    plt.title('Updated Flow Hydrograph')\n",
        "    plt.xlabel('Time Step') \n",
        "    plt.ylabel('Flow (cfs)')\n",
        "    plt.grid(True)\n",
        "    plt.legend()\n",
        "    plt.show()\n",
        "    \n",
        "    # Print summary statistics\n",
        "    print(f\"\\nUpdated flow hydrograph statistics:\")\n",
        "    print(f\"  Number of values: {len(table_df)}\")\n",
        "    print(f\"  Min flow: {table_df['Value'].min():.1f} cfs\")\n",
        "    print(f\"  Max flow: {table_df['Value'].max():.1f} cfs\")\n",
        "    print(f\"  Mean flow: {table_df['Value'].mean():.1f} cfs\")\n",
        "else:\n",
        "    print(\"No flow hydrograph tables found in the unsteady flow file.\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 16:43:35 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n",
            "2025-04-08 16:43:35 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-08 16:43:35 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01\"\n",
            "2025-04-08 16:46:42 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 01\n",
            "2025-04-08 16:46:42 - ras_commander.RasCmdr - INFO - Total run time for plan 01: 186.40 seconds\n"
          ]
        },
        {
          "data": {
            "text/plain": "['True']"
          },
          "execution_count": 21,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Execute Plan 01 to generate model results\n",
        "\n",
        "RasCmdr.compute_plan(\"01\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 16:46:42 - ras_commander.HdfResultsXsec - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n"
          ]
        }
      ],
      "source": [
        "# Get cross section results timeseries as xarray dataset\n",
        "xsec_results_xr_plan1 = HdfResultsXsec.get_xsec_timeseries(\"01\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div><pre>xarray.Dataset with (time: 150, cross_section: 178)\\n', 'Coordinates:\\n', '  * time                      (time) datetime64[ns] 1kB 1999-02-18 ... 1999-0...\\n', '  * cross_section             (cross_section) &lt;U42 30kB &#x27;Bald Eagle       Loc...\\n', '    River                     (cross_section) &lt;U10 7kB &#x27;Bald Eagle&#x27; ... &#x27;Bald...\\n', '    Reach                     (cross_section) &lt;U7 5kB &#x27;Loc Hav&#x27; ... &#x27;Loc Hav&#x27;\\n', '    Station                   (cross_section) &lt;U8 6kB &#x27;138154.4&#x27; ... &#x27;659.942&#x27;\\n', '    Name                      (cross_section) &lt;U1 712B &#x27;&#x27; &#x27;&#x27; &#x27;&#x27; &#x27;&#x27; ... &#x27;&#x27; &#x27;&#x27; &#x27;&#x27;\\n', '    Maximum_Water_Surface     (cross_section) float32 712B 672.8 672.8 ... 561.4\\n', '    Maximum_Flow              (cross_section) float32 712B 5e+04 ... 2.543e+04\\n', '    Maximum_Channel_Velocity  (cross_section) float32 712B 11.81 8.031 ... 2.028\\n', '    Maximum_Velocity_Total    (cross_section) float32 712B 9.371 5.379 ... 1.632\\n', '    Maximum_Flow_Lateral      (cross_section) float32 712B 0.0 0.0 ... 0.0 0.0\\n', 'Data variables:\\n', '    Water_Surface             (time, cross_section) float32 107kB 660.7 ... 5...\\n', '    Velocity_Total            (time, cross_section) float32 107kB 0.0 ... 1.227\\n', '    Velocity_Channel          (time, cross_section) float32 107kB 0.0 ... 1.286\\n', '    Flow_Lateral              (time, cross_section) float32 107kB 0.0 ... 0.0\\n', '    Flow                      (time, cross_section) float32 107kB 2e+03 ... 2...\\n', 'Attributes:\\n', '    description:  Cross-section results extracted from HEC-RAS HDF file\\n', \"    source_file:  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_projects\\\\Balde Eag...\n[Full xarray output truncated during preprocessing]</pre></div>",
            "text/plain": "xarray.Dataset with Unknown dimensions\n[Full xarray output truncated during preprocessing]"
          },
          "execution_count": 23,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "xsec_results_xr_plan1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Time Series Data for Cross Section: Bald Eagle       Loc Hav          136202.3\n",
            "\n",
            "Water_Surface:\n",
            "Plan 1:\n",
            "[657.4173  656.7111  657.02997 657.44073 657.88824]\n",
            "\n",
            "Velocity_Total:\n",
            "Plan 1:\n",
            "[0.        2.7810786 2.9612713 2.9395368 3.0228102]\n",
            "\n",
            "Velocity_Channel:\n",
            "Plan 1:\n",
            "[0.        3.132834  3.4508243 3.7217746 4.083391 ]\n",
            "\n",
            "Flow_Lateral:\n",
            "Plan 1:\n",
            "[0. 0. 0. 0. 0.]\n",
            "\n",
            "Flow:\n",
            "Plan 1:\n",
            "[2000.     1273.8193 1607.1132 2109.992  2746.2964]\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Print time series for specific cross section\n",
        "target_xs = \"Bald Eagle       Loc Hav          136202.3\"\n",
        "\n",
        "print(\"\\nTime Series Data for Cross Section:\", target_xs)\n",
        "for var in ['Water_Surface', 'Velocity_Total', 'Velocity_Channel', 'Flow_Lateral', 'Flow']:\n",
        "    print(f\"\\n{var}:\")\n",
        "    print(f\"Plan 1:\")\n",
        "    print(xsec_results_xr_plan1[var].sel(cross_section=target_xs).values[:5])  # Show first 5 values\n",
        "\n",
        "\n",
        "# Create time series plots\n",
        "if generate_plots:\n",
        "\n",
        "    # Create a figure for each variable\n",
        "    variables = ['Water_Surface', 'Velocity_Total', 'Velocity_Channel', 'Flow_Lateral', 'Flow']\n",
        "\n",
        "    for var in variables:\n",
        "        plt.figure(figsize=(10, 5))\n",
        "        \n",
        "        # Convert time values to datetime if needed\n",
        "        time_values1 = pd.to_datetime(xsec_results_xr_plan1.time.values)\n",
        "        values1 = xsec_results_xr_plan1[var].sel(cross_section=target_xs).values\n",
        "\n",
        "        \n",
        "        # Plot both plans\n",
        "        plt.plot(time_values1, values1, '-', linewidth=2, label='Plan 1')\n",
        "        \n",
        "        plt.title(f'{var} at {target_xs}')\n",
        "        plt.xlabel('Time')\n",
        "        plt.ylabel(var.replace('_', ' '))\n",
        "        plt.grid(True)\n",
        "        plt.xticks(rotation=45)\n",
        "        plt.legend()\n",
        "        plt.tight_layout()\n",
        "        \n",
        "        # Force display\n",
        "        plt.draw()\n",
        "        plt.pause(0.1)\n",
        "        plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 8: Applying the Updated Unsteady Flow to a New Plan\n",
        "\n",
        "Now that we've modified an unsteady flow file, let's create a plan that uses it, and compute the results."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 16:46:44 - ras_commander.RasUtils - INFO - File cloned from d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01 to d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n",
            "2025-04-08 16:46:44 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n",
            "2025-04-08 16:46:44 - ras_commander.RasUtils - INFO - Project file updated with new Plan entry: 03\n",
            "2025-04-08 16:46:44 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.rasmap\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "New plan created: 03\n"
          ]
        }
      ],
      "source": [
        "# Clone an existing plan\n",
        "new_plan_number = RasPlan.clone_plan(\"01\", new_plan_shortid=\"Modified Flow Test\")\n",
        "print(f\"New plan created: {new_plan_number}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": "[\"'03'\"]"
          },
          "execution_count": 26,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "new_plan_number"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 16:46:44 - ras_commander.RasPlan - INFO - Retrieved Plan Title: Unsteady with Bridges and Dam\n",
            "2025-04-08 16:46:44 - ras_commander.RasPlan - INFO - Retrieved Short Identifier: Modified Flow Test\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Current plan title: Unsteady with Bridges and Dam\n",
            "Current plan shortid: Modified Flow Test\n"
          ]
        }
      ],
      "source": [
        "# Get the current plan title and shortid\n",
        "current_title = RasPlan.get_plan_title(new_plan_number)\n",
        "current_shortid = RasPlan.get_shortid(new_plan_number)\n",
        "\n",
        "print(f\"Current plan title: {current_title}\")\n",
        "print(f\"Current plan shortid: {current_shortid}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 16:46:44 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n",
            "2025-04-08 16:46:44 - ras_commander.RasPlan - INFO - Updated Plan Title in plan file to: Unsteady with Bridges and Dam 0.75 Flow Scale Factor\n",
            "2025-04-08 16:46:44 - ras_commander.RasPlan - WARNING - Short Identifier too long (24 char max). Truncating: Modified Flow Test 0.75 FSF\n",
            "2025-04-08 16:46:44 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n",
            "2025-04-08 16:46:44 - ras_commander.RasPlan - INFO - Updated Short Identifier in plan file to: Modified Flow Test 0.75 \n",
            "2025-04-08 16:46:44 - ras_commander.RasPlan - INFO - Retrieved Plan Title: Unsteady with Bridges and Dam 0.75 Flow Scale Factor\n",
            "2025-04-08 16:46:44 - ras_commander.RasPlan - INFO - Retrieved Short Identifier: Modified Flow Test 0.75\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Updated plan title: Unsteady with Bridges and Dam 0.75 Flow Scale Factor\n",
            "Updated plan shortid: Modified Flow Test 0.75\n"
          ]
        }
      ],
      "source": [
        "# Update the title and shortid to append \" clonedplan\"\n",
        "new_title = f\"{current_title} 0.75 Flow Scale Factor\"\n",
        "new_shortid = f\"{current_shortid} 0.75 FSF\"\n",
        "\n",
        "RasPlan.set_plan_title(new_plan_number, new_title)\n",
        "RasPlan.set_shortid(new_plan_number, new_shortid)\n",
        "\n",
        "print(f\"\\nUpdated plan title: {RasPlan.get_plan_title(new_plan_number)}\")\n",
        "print(f\"Updated plan shortid: {RasPlan.get_shortid(new_plan_number)}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": "[\"'01'\"]"
          },
          "execution_count": 29,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Print new_unsteady_number again as a reminder of it's current value\n",
        "new_unsteady_number"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Set unsteady flow 01 for plan 03\n"
          ]
        }
      ],
      "source": [
        "# Set the modified unsteady flow for the new plan\n",
        "RasPlan.set_unsteady(new_plan_number, new_unsteady_number)\n",
        "print(f\"Set unsteady flow {new_unsteady_number} for plan {new_plan_number}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Set unsteady flow 01 for plan 03\n"
          ]
        }
      ],
      "source": [
        "# Set the modified unsteady flow for the new plan\n",
        "RasPlan.set_unsteady(new_plan_number, new_unsteady_number)\n",
        "print(f\"Set unsteady flow {new_unsteady_number} for plan {new_plan_number}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Contents of plan file 03:\n",
            "Plan Title=Unsteady with Bridges and Dam 0.75 Flow Scale Factor\n",
            "Program Version=5.00\n",
            "Short Identifier=Modified Flow Test 0.75 \n",
            "Simulation Date=18FEB1999,0000,24FEB1999,0500\n",
            "Geom File=g01\n",
            "Flow File=u01\n",
            "Subcritical Flow\n",
            "K Sum by GR= 0 \n",
            "Std Step Tol= 0.01 \n",
            "Critical Tol= 0.01 \n",
            "Num of Std Step Trials= 20 \n",
            "Max Error Tol= 0.3 \n",
            "Flow Tol Ratio= 0.001 \n",
            "Split Flow NTrial= 30 \n",
            "Split Flow Tol= 0.02 \n",
            "Split Flow Ratio= 0.02 \n",
            "Log Output Level= 0 \n",
            "Friction Slope Method= 2 \n",
            "Unsteady Friction Slope Method= 2 \n",
            "Unsteady Bridges Friction Slope Method= 1 \n",
            "Parabolic Critical Depth\n",
            "Global Vel Dist= 0 , 0 , 0 \n",
            "Global Log Level= 0 \n",
            "CheckData=True\n",
            "Encroach Param=-1 ,0,0, 0 \n",
            "Computation Interval=2MIN\n",
            "Output Interval=1HOUR\n",
            "Instantaneous Interval=2HOUR\n",
            "Mapping Interval=1HOUR\n",
            "Run HTab= 1 \n",
            "Run UNet= 1 \n",
            "Run Sediment= 0 \n",
            "Run PostProcess= 1 \n",
            "Run WQNet= 0 \n",
            "Run RASMapper= 0 \n",
            "UNET Theta= 1 \n",
            "UNET Theta Warmup= 1 \n",
            "UNET ZTol= 0.01 \n",
            "UNET ZSATol= 0.1 \n",
            "UNET QTol=\n",
            "UNET MxIter= 20 \n",
            "UNET Max Iter WO Improvement= 0 \n",
            "UNET MaxInSteps= 0 \n",
            "UNET DtIC= 0 \n",
            "UNET DtMin= 0 \n",
            "UNET MaxCRTS= 20 \n",
            "UNET WFStab= 2 \n",
            "UNET SFStab= 1 \n",
            "UNET WFX= 1 \n",
            "UNET SFX= 1 \n",
            "UNET DSS MLevel= 4 \n",
            "UNET Pardiso=0\n",
            "UNET DZMax Abort= 100 \n",
            "UNET Use Existing IB Tables=-1 \n",
            "UNET Froude Reduction=False\n",
            "UNET Froude Limit= 0.8 \n",
            "UNET Froude Power= 4 \n",
            "UNET Time Slicing=0,0, 5 \n",
            "UNET Junction Losses=0\n",
            "UNET D1 Cores= 0 \n",
            "UNET D2 Coriolis=0\n",
            "UNET D2 Cores= 0 \n",
            "UNET D2 Theta= 1 \n",
            "UNET D2 Theta Warmup= 1 \n",
            "UNET D2 Z Tol= 0.01 \n",
            "UNET D2 Max Iterations= 20 \n",
            "UNET D2 Equation= 0 \n",
            "UNET D2 TotalICTime=\n",
            "UNET D2 RampUpFraction=0.5\n",
            "UNET D2 TimeSlices= 1 \n",
            "UNET D2 Eddy Viscosity=\n",
            "UNET D2 BCVolumeCheck=0\n",
            "UNET D2 Latitude=\n",
            "UNET D1D2 MaxIter= 0 \n",
            "UNET D1D2 ZTol=0.01\n",
            "UNET D1D2 QTol=0.1\n",
            "UNET D1D2 MinQTol=1\n",
            "DSS File=dss\n",
            "Write IC File= 0 \n",
            "Write IC File at Fixed DateTime=0\n",
            "IC Time=,,\n",
            "Write IC File Reoccurance=\n",
            "Write IC File at Sim End=0\n",
            "Echo Input=False\n",
            "Echo Parameters=False\n",
            "Echo Output=False\n",
            "Write Detailed= 0 \n",
            "HDF Write Warmup=0\n",
            "HDF Write Time Slices=0\n",
            "HDF Flush=0\n",
            "HDF Compression= 1 \n",
            "HDF Chunk Size= 1 \n",
            "HDF Spatial Parts= 1 \n",
            "HDF Use Max Rows=0\n",
            "HDF Fixed Rows= 1 \n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,138154.4\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,137690.8\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,137327.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,136564.9\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,136202.3\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,135591.4\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,135068.7\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,134487.2\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,133881.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,133446.1\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,132973.6\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,132363.8\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,131699.7\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,130997.6\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,130339.2\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,129627.5\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,128760.7\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,128280.7\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,127410.9\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,126741.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,126454.1\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,126062.6\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,125704.7\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,125091.9\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,124615.5\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,124025.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,123503.5\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,123123.6\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,122703.3\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,122190.8\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,121754.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,121394.1\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,120862.6\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,120421.4\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,119954.9\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,119473.8\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,118901.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,118300.5\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,117753.9\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,117180.8\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,116401.3\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,115584.2\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,114899.8\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,113985.6\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,112856.9\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,111971.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,110657.4\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,109659.9\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,108600.1\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,107333.6\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,106466.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,105178.6\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,104647.2\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,104195.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,103854.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,103369.7\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,103122.3\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,101440.3\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,100657.3\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,99452.75\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,98206.87\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,97607.35\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,96370.43\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,94560.01\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,93391.71\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,92011.85\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,91030.01\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,90096.99\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,89060.69\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,87861.14\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,86942.04\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,85569.53\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,84724.08\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,83563.41\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,82607.89\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,81849.41\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,81084.18\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,80500.50\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,79684.28\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,78627.87\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,76643.40\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,76002.96\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,75917.82\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,75616.14\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,74650.60\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,74207.96\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,73504.24\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,72303.68\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,71400.81\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,70651.52\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,69567.33\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,68604.09\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,67326.78\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,66070.17\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,64908.02\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,63812.99\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,62746.41\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,61896.89\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,60901.09\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,59795.28\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,58836.23\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,58708.54\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,58091.91\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,57700.27\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,57250.60\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,56775.92\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,56243.79\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,55700.55\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,54696.51\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,53922.53\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,52879.19\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,51784.74\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,50720.68\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,49715.77\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,48965.94\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,48110.09\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,47453.14\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,46722.59\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,46310.48\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,45805.37\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,45233.89\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,44529.29\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,43919.30\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,42895.87\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,41806.43\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,40526.85\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,39499.37\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,38446.87\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,37962.54\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,37385.23\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,36769.88\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,36663.76\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,36339.56\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,35648.50\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,35072.37\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,34098.93\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,33498.68\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,32195.47\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,30878.12\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,29563.77\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,27226.40\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,25960.70\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,24843.25\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,24417.73\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,23872.06\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,23783.65\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,23384.79\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,22982.97\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,22386.15\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,21283.34\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,21199.93\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,20127.30\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,19036.24\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,18200.10\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,17549.23\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,16787.45\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,15407.88\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,14814.34\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,13326.74\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,12035.22\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,11865.80\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,11116.44\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,10995.73\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,10221.14\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,9258.941\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,8541.462\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,7936.130\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,6940.066\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,6267.489\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,5523.234\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,4293.710\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,3047.378\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,2731.142\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,2501.017\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,2371.827\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,1692.633\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,1212.855\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,659.942\n",
            "Calibration Method= 0 \n",
            "Calibration Iterations= 20 \n",
            "Calibration Max Change=0.05\n",
            "Calibration Tolerance=0.2\n",
            "Calibration Maximum=1.5\n",
            "Calibration Minimum=0.5\n",
            "Calibration Optimization Method= 1 \n",
            "Calibration Window=,,,\n",
            "WQ AD Non Conservative\n",
            "WQ ULTIMATE=-1\n",
            "WQ Max Comp Step=1HOUR\n",
            "WQ Output Interval=15MIN\n",
            "WQ Output Selected Increments= 0 \n",
            "WQ Output face flow=0\n",
            "WQ Output face velocity=0\n",
            "WQ Output face area=0\n",
            "WQ Output face dispersion=0\n",
            "WQ Output cell volume=0\n",
            "WQ Output cell surface area=0\n",
            "WQ Output cell continuity=0\n",
            "WQ Output cumulative cell continuity=0\n",
            "WQ Output face conc=0\n",
            "WQ Output face dconc_dx=0\n",
            "WQ Output face courant=0\n",
            "WQ Output face peclet=0\n",
            "WQ Output face adv mass=0\n",
            "WQ Output face disp mass=0\n",
            "WQ Output cell mass=0\n",
            "WQ Output cell source sink temp=0\n",
            "WQ Output nsm pathways=0\n",
            "WQ Output nsm derived pathways=0\n",
            "WQ Output MaxMinRange=-1\n",
            "WQ Daily Max Min Mean=-1\n",
            "WQ Daily Range=0\n",
            "WQ Daily Time=0\n",
            "WQ Create Restart=0\n",
            "WQ Fixed Restart=0\n",
            "WQ Restart Simtime=\n",
            "WQ Restart Date=\n",
            "WQ Restart Hour=\n",
            "WQ System Summary=0\n",
            "WQ Write To DSS=0\n",
            "WQ Use Fixed Temperature=0\n",
            "WQ Fixed Temperature=\n",
            "Sorting and Armoring Iterations= 10 \n",
            "XS Update Threshold= 0.02 \n",
            "Bed Roughness Predictor= 0 \n",
            "Hydraulics Update Threshold= 0.02 \n",
            "Energy Slope Method= 1 \n",
            "Volume Change Method= 1 \n",
            "Sediment Retention Method= 0 \n",
            "XS Weighting Method= 0 \n",
            "Number of US Weighted Cross Sections= 1 \n",
            "Number of DS Weighted Cross Sections= 1 \n",
            "Upstream XS Weight=0\n",
            "Main XS Weight=1\n",
            "Downstream XS Weight=0\n",
            "Number of DS XS's Weighted with US Boundary= 1 \n",
            "Upstream Boundary Weight= 1 \n",
            "Weight of XSs Associated with US Boundary= 0 \n",
            "Number of US XS's Weighted with DS Boundary= 1 \n",
            "Downstream Boundary Weight= 0.5 \n",
            "Weight of XSs Associated with DS Boundary= 0.5 \n",
            "Sediment Output Level= 4 \n",
            "Mass or Volume Output= 0 \n",
            "Output Increment Type= 1 \n",
            "Profile and TS Output Increment= 10 \n",
            "XS Output Flag= 0 \n",
            "XS Output Increment= 10 \n",
            "Write Gradation File= 0 \n",
            "Read Gradation Hotstart= 0 \n",
            "Gradation File Name=\n",
            "Write HDF5 File= 0 \n",
            "Write DSS Sediment File= 0 \n",
            "SV Curve= 0 \n",
            "Specific Gage Flag= 0 \n",
            "\n"
          ]
        }
      ],
      "source": [
        "# Get the path to the new plan file\n",
        "new_plan_path = RasPlan.get_plan_path(new_plan_number)\n",
        "\n",
        "# Print contents of new plan file to confirm changes\n",
        "# Read and display the contents of the plan file\n",
        "with open(new_plan_path, 'r') as f:\n",
        "    plan_contents = f.read()\n",
        "print(f\"Contents of plan file {new_plan_number}:\")\n",
        "print(plan_contents)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 16:46:45 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n",
            "2025-04-08 16:46:45 - ras_commander.RasPlan - INFO - Updated description in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n",
            "2025-04-08 16:46:45 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n",
            "2025-04-08 16:46:45 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Updated plan description for plan 03\n"
          ]
        }
      ],
      "source": [
        "# Update the plan description\n",
        "new_description = \"Test plan using modified unsteady flow\\nFlow scaled to 75% of original\\nWith restart file enabled\"\n",
        "RasPlan.update_plan_description(new_plan_number, new_description)\n",
        "print(f\"Updated plan description for plan {new_plan_number}\")\n",
        "\n",
        "# Set computation options\n",
        "RasPlan.set_num_cores(new_plan_number, 2)\n",
        "\n",
        "# Consider any other changes you want to make at this step, such as computation intervals etc: \n",
        "# RasPlan.update_plan_intervals(\n",
        "#    new_plan_number,\n",
        "#    computation_interval=\"1MIN\",\n",
        "#    output_interval=\"15MIN\",\n",
        "#    mapping_interval=\"1HOUR\"\n",
        "#)  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 16:46:45 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n",
            "2025-04-08 16:46:45 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-08 16:46:45 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\"\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Computing plan 03 with modified unsteady flow...\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 16:47:13 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 03\n",
            "2025-04-08 16:47:13 - ras_commander.RasCmdr - INFO - Total run time for plan 03: 28.35 seconds\n"
          ]
        }
      ],
      "source": [
        "# Compute the plan\n",
        "print(f\"\\nComputing plan {new_plan_number} with modified unsteady flow...\")\n",
        "success = RasCmdr.compute_plan(new_plan_number)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Plan 03 computed successfully\n",
            "Results available at: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03.hdf\n",
            "Results file size: 7.37 MB\n"
          ]
        }
      ],
      "source": [
        "if success:\n",
        "    print(f\"Plan {new_plan_number} computed successfully\")\n",
        "    \n",
        "    # Check the results path\n",
        "    results_path = RasPlan.get_results_path(new_plan_number)\n",
        "    if results_path:\n",
        "        print(f\"Results available at: {results_path}\")\n",
        "        \n",
        "        # If it exists, get its size\n",
        "        results_file = Path(results_path)\n",
        "        if results_file.exists():\n",
        "            size_mb = results_file.stat().st_size / (1024 * 1024)\n",
        "            print(f\"Results file size: {size_mb:.2f} MB\")\n",
        "    else:\n",
        "        print(\"No results found.\")\n",
        "else:\n",
        "    print(f\"Failed to compute plan {new_plan_number}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>Run UNet</th>\\n', '      <th>Run Sediment</th>\\n', '      <th>Run PostProcess</th>\\n', '      <th>Run WQNet</th>\\n', '      <th>UNET Use Existing IB Tables</th>\\n', '      <th>UNET D1 Cores</th>\\n', '      <th>UNET D2 Cores</th>\\n', '      <th>PS Cores</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>description</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>01</td>\\n', '      <td>Unsteady with Bridges and Dam</td>\\n', '      <td>5.00</td>\\n', '      <td>UnsteadyFlow</td>\\n', '      <td>18FEB1999,0000,24FEB1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>1HOUR</td>\\n', '      <td>1</td>\\n', '      <td>1</td>\\n', '      <td>0</td>\\n', '      <td>1</td>\\n', '      <td>0</td>\\n', '      <td>-1</td>\\n', '      <td>0.0</td>\\n', '      <td>0.0</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>2</td>\\n', '      <td>NaN</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>01</td>\\n', '      <td>None</td>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>Steady Flow Run</td>\\n', '      <td>NaN</td>\\n', '      <td>SteadyRun</td>\\n', '      <td>02/18/1999,0000,02/24/1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>NaN</td>\\n', '      <td>1</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>None</td>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>03</td>\\n', '      <td>01</td>\\n', '      <td>01</td>\\n', '      <td>Unsteady with Bridges and Dam 0.75 Flow Scale ...</td>\\n', '      <td>5.00</td>\\n', '      <td>Modified Flow Test 0.75</td>\\n', '      <td>18FEB1999,0000,24FEB1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>1HOUR</td>\\n', '      <td>1</td>\\n', '      <td>1</td>\\n', '      <td>0</td>\\n', '      <td>1</td>\\n', '      <td>0</td>\\n', '      <td>-1</td>\\n', '      <td>2.0</td>\\n', '      <td>2.0</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>2</td>\\n', '      <td>Test plan using modified unsteady flow\\\\nFlow s...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>01</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>None</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  plan_number unsteady_number geometry_number  \\\\\\n', '0          01              02              01   \\n', '1          02            None              01   \\n', '2          03              01              01   \\n', '\\n', '                                          Plan Title Program Version  \\\\\\n', '0                      Unsteady with Bridges and Dam            5.00   \\n', '1                                    Steady Flow Run             NaN   \\n', '2  Unsteady with Bridges and Dam 0.75 Flow Scale ...            5.00   \\n', '\\n', '          Short Identifier                  Simulation Date  \\\\\\n', '0             UnsteadyFlow    18FEB1999,0000,24FEB1999,0500   \\n', '1                SteadyRun  02/18/1999,0000,02/24/1999,0500   \\n', '2  Modified Flow Test 0.75    18FEB1999,0000,24FEB1999,0500   \\n', '\\n', '  Computation Interval Mapping Interval Run HTab Run UNet Run Sediment  \\\\\\n', '0                 2MIN            1HOUR        1        1            0   \\n', '1                 2MIN\n...\n[Output truncated, 2651 characters total]"
          },
          "execution_count": 36,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Show updated plan_df dataframe, which should show the HDF results files\n",
        "ras.plan_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>unsteady_number</th>\\n', '      <th>full_path</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Flow Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Use Restart</th>\\n', '      <th>Precipitation Mode</th>\\n', '      <th>Wind Mode</th>\\n', '      <th>Met BC=Precipitation|Mode</th>\\n', '      <th>Met BC=Evapotranspiration|Mode</th>\\n', '      <th>Met BC=Precipitation|Expanded View</th>\\n', '      <th>Met BC=Precipitation|Constant Units</th>\\n', '      <th>Met BC=Precipitation|Gridded Source</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>Flow Hydrograph 2</td>\\n', '      <td>6.30</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>None</td>\\n', '      <td>None</td>\\n', '      <td>0</td>\\n', '      <td>mm/hr</td>\\n', '      <td>DSS</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>Modified Flow Scenario</td>\\n', '      <td>6.30</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>None</td>\\n', '      <td>None</td>\\n', '      <td>0</td>\\n', '      <td>mm/hr</td>\\n', '      <td>DSS</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  unsteady_number                                          full_path  \\\\\\n', '0              02  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '1              01  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '\\n', '  geometry_number              Flow Title Program Version Use Restart  \\\\\\n', '0            None       Flow Hydrograph 2            6.30           0   \\n', '1            None  Modified Flow Scenario            6.30           0   \\n', '\\n', '  Precipitation Mode       Wind Mode Met BC=Precipitation|Mode  \\\\\\n', '0            Disable  No Wind Forces                      None   \\n', '1            Disable  No Wind Forces                      None   \\n', '\\n', '  Met BC=Evapotranspiration|Mode Met BC=Precipitation|Expanded View  \\\\\\n', '0                           None                                  0   \\n', '1                           None                                  0   \\n', '\\n', '  Met BC=Precipitation|Constant Units Met BC=Precipitation|Gridded Source  \\n', '0                               mm/hr                                 DSS  \\n', '1                               mm/hr                                 DSS  ']"
          },
          "execution_count": 37,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "ras.unsteady_df"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Get results for Plan 03 and Compare with Plan 01's results for the specified Cross Section\n",
        "target_xs = \"Bald Eagle       Loc Hav          136202.3\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 16:47:13 - ras_commander.HdfResultsXsec - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03.hdf\n"
          ]
        }
      ],
      "source": [
        "# Get cross section results timeseries as xarray dataset\n",
        "xsec_results_xr_plan2 = HdfResultsXsec.get_xsec_timeseries(\"03\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div><pre>xarray.Dataset with (time: 150, cross_section: 178)\\n', 'Coordinates:\\n', '  * time                      (time) datetime64[ns] 1kB 1999-02-18 ... 1999-0...\\n', '  * cross_section             (cross_section) &lt;U42 30kB &#x27;Bald Eagle       Loc...\\n', '    River                     (cross_section) &lt;U10 7kB &#x27;Bald Eagle&#x27; ... &#x27;Bald...\\n', '    Reach                     (cross_section) &lt;U7 5kB &#x27;Loc Hav&#x27; ... &#x27;Loc Hav&#x27;\\n', '    Station                   (cross_section) &lt;U8 6kB &#x27;138154.4&#x27; ... &#x27;659.942&#x27;\\n', '    Name                      (cross_section) &lt;U1 712B &#x27;&#x27; &#x27;&#x27; &#x27;&#x27; &#x27;&#x27; ... &#x27;&#x27; &#x27;&#x27; &#x27;&#x27;\\n', '    Maximum_Water_Surface     (cross_section) float32 712B 670.9 670.8 ... 548.1\\n', '    Maximum_Flow              (cross_section) float32 712B 3.75e+04 ... 9.318...\\n', '    Maximum_Channel_Velocity  (cross_section) float32 712B 10.27 7.146 ... 1.532\\n', '    Maximum_Velocity_Total    (cross_section) float32 712B 8.222 4.746 ... 1.32\\n', '    Maximum_Flow_Lateral      (cross_section) float32 712B 0.0 0.0 ... 0.0 0.0\\n', 'Data variables:\\n', '    Water_Surface             (time, cross_section) float32 107kB 660.7 ... 5...\\n', '    Velocity_Total            (time, cross_section) float32 107kB 0.0 ... 1.231\\n', '    Velocity_Channel          (time, cross_section) float32 107kB 0.0 ... 1.287\\n', '    Flow_Lateral              (time, cross_section) float32 107kB 0.0 ... 0.0\\n', '    Flow                      (time, cross_section) float32 107kB 2e+03 ... 2...\\n', 'Attributes:\\n', '    description:  Cross-section results extracted from HEC-RAS HDF file\\n', \"    source_file:  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_projects\\\\Balde Eag...\n[Full xarray output truncated during preprocessing]</pre></div>",
            "text/plain": "xarray.Dataset with Unknown dimensions\n[Full xarray output truncated during preprocessing]"
          },
          "execution_count": 39,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "xsec_results_xr_plan2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Time Series Data for Cross Section: Bald Eagle       Loc Hav          136202.3\n",
            "\n",
            "Water_Surface:\n",
            "Plan 1:\n",
            "[657.4173  656.7111  657.02997 657.44073 657.88824]\n",
            "Plan 2:\n",
            "[657.4173  656.3781  656.65936 657.00543 657.4039 ]\n",
            "\n",
            "Velocity_Total:\n",
            "Plan 1:\n",
            "[0.        2.7810786 2.9612713 2.9395368 3.0228102]\n",
            "Plan 2:\n",
            "[0.        2.4959269 2.7408042 2.962285  2.9376311]\n",
            "\n",
            "Velocity_Channel:\n",
            "Plan 1:\n",
            "[0.        3.132834  3.4508243 3.7217746 4.083391 ]\n",
            "Plan 2:\n",
            "[0.        2.7247522 3.0741944 3.431526  3.695762 ]\n",
            "\n",
            "Flow_Lateral:\n",
            "Plan 1:\n",
            "[0. 0. 0. 0. 0.]\n",
            "Plan 2:\n",
            "[0. 0. 0. 0. 0.]\n",
            "\n",
            "Flow:\n",
            "Plan 1:\n",
            "[2000.     1273.8193 1607.1132 2109.992  2746.2964]\n",
            "Plan 2:\n",
            "[2000.      953.3724 1223.017  1576.6724 2062.3972]\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Print time series for specific cross section\n",
        "target_xs = \"Bald Eagle       Loc Hav          136202.3\"\n",
        "\n",
        "print(\"\\nTime Series Data for Cross Section:\", target_xs)\n",
        "for var in ['Water_Surface', 'Velocity_Total', 'Velocity_Channel', 'Flow_Lateral', 'Flow']:\n",
        "    print(f\"\\n{var}:\")\n",
        "    print(f\"Plan 1:\")\n",
        "    print(xsec_results_xr_plan1[var].sel(cross_section=target_xs).values[:5])  # Show first 5 values\n",
        "    print(f\"Plan 2:\")\n",
        "    print(xsec_results_xr_plan2[var].sel(cross_section=target_xs).values[:5])  # Show first 5 values\n",
        "\n",
        "# Create time series plots\n",
        "if generate_plots:\n",
        "\n",
        "    # Create a figure for each variable\n",
        "    variables = ['Water_Surface', 'Velocity_Total', 'Velocity_Channel', 'Flow_Lateral', 'Flow']\n",
        "\n",
        "    for var in variables:\n",
        "        plt.figure(figsize=(10, 5))\n",
        "        \n",
        "        # Convert time values to datetime if needed\n",
        "        time_values1 = pd.to_datetime(xsec_results_xr_plan1.time.values)\n",
        "        time_values2 = pd.to_datetime(xsec_results_xr_plan2.time.values)\n",
        "        values1 = xsec_results_xr_plan1[var].sel(cross_section=target_xs).values\n",
        "        values2 = xsec_results_xr_plan2[var].sel(cross_section=target_xs).values\n",
        "        \n",
        "        # Get plan titles from plan_df\n",
        "        plan1_title = ras.plan_df.loc[ras.plan_df['plan_number'] == '01', 'Plan Title'].iloc[0]\n",
        "        plan2_title = ras.plan_df.loc[ras.plan_df['plan_number'] == '03', 'Plan Title'].iloc[0]\n",
        "        \n",
        "        # Plot both plans with titles\n",
        "        plt.plot(time_values1, values1, '-', linewidth=2, label=f'{plan1_title} (Plan 01)')\n",
        "        plt.plot(time_values2, values2, '--', linewidth=2, label=f'{plan2_title} (Plan 03)')\n",
        "        \n",
        "        plt.title(f'{var} at {target_xs}')\n",
        "        plt.xlabel('Time')\n",
        "        plt.ylabel(var.replace('_', ' '))\n",
        "        plt.grid(True)\n",
        "        plt.xticks(rotation=45)\n",
        "        plt.legend()\n",
        "        plt.tight_layout()\n",
        "        \n",
        "        # Force display\n",
        "        plt.draw()\n",
        "        plt.pause(0.1)\n",
        "        plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Summary of Unsteady Flow Operations\n",
        "\n",
        "In this notebook, we've covered the following unsteady flow operations using RAS Commander:\n",
        "\n",
        "1. **Project Initialization**: We initialized a HEC-RAS project to work with\n",
        "2. **Boundary Extraction**: We extracted boundary conditions and tables from unsteady flow files\n",
        "3. **Boundary Analysis**: We inspected and understood boundary condition structures\n",
        "4. **Flow Title Updates**: We modified the title of an unsteady flow file\n",
        "5. **Restart Settings**: We configured restart file settings for continuing simulations\n",
        "6. **Table Extraction**: We extracted flow tables for analysis\n",
        "7. **Table Modification**: We modified a flow table and wrote it back to the file\n",
        "8. **Application**: We created a plan using our modified unsteady flow and computed results\n",
        "\n",
        "### Key Classes and Functions Used\n",
        "\n",
        "- `RasUnsteady.extract_boundary_and_tables()`: Extract boundary conditions and tables\n",
        "- `RasUnsteady.print_boundaries_and_tables()`: Display formatted boundary information\n",
        "- `RasUnsteady.update_flow_title()`: Modify the flow title\n",
        "- `RasUnsteady.update_restart_settings()`: Configure restart options\n",
        "- `RasUnsteady.extract_tables()`: Extract tables from unsteady flow files\n",
        "- `RasUnsteady.identify_tables()`: Identify table locations in file\n",
        "- `RasUnsteady.parse_fixed_width_table()`: Parse fixed-width tables\n",
        "- `RasUnsteady.write_table_to_file()`: Write modified tables back to file\n",
        "\n",
        "### Next Steps\n",
        "\n",
        "To further explore unsteady flow operations with RAS Commander, consider:\n",
        "\n",
        "1. **Advanced Flow Modifications**: Create scripts that systematically modify flow hydrographs\n",
        "2. **Sensitivity Analysis**: Create variations of unsteady flows to assess model sensitivity\n",
        "3. **Batch Processing**: Process multiple unsteady flow files for scenario analysis\n",
        "4. **Custom Boundary Conditions**: Create unsteady flows from external data sources\n",
        "5. **Results Analysis**: Compare results from different unsteady flow scenarios\n",
        "\n",
        "These advanced topics can be explored by building on the foundation established in this notebook."
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "rascmdr",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
}
==================================================

File: c:\GH\ras-commander\examples\04_multiple_project_operations.ipynb
==================================================
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# RAS Commander: Multiple Project Operations\n",
        "\n",
        "This notebook demonstrates how to work with multiple HEC-RAS projects simultaneously using the RAS Commander library. This advanced workflow is useful for comparing different river systems, running scenario analyses across multiple watersheds, or managing a suite of related models.\n",
        "\n",
        "## Operations Covered\n",
        "\n",
        "1. **Multiple Project Initialization**: Initialize and manage multiple HEC-RAS projects simultaneously\n",
        "2. **Cross-Project Operations**: Clone and modify plans across different projects\n",
        "3. **Parallel Execution**: Run computations for multiple projects in parallel\n",
        "4. **Resource Management**: Optimize computing resources when working with multiple models\n",
        "5. **Results Comparison**: Analyze and compare results from different projects\n",
        "6. **Advanced Project Workflow**: Build a comprehensive multi-project workflow\n",
        "\n",
        "Let's begin by importing the necessary libraries and setting up our environment."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Package Installation and Environment Setup\n",
        "Uncomment and run package installation commands if needed"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Install ras-commander from pip (uncomment to install if needed)\n",
        "#!pip install ras-commander\n",
        "# This installs ras-commander and all dependencies"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Import all required modules\n",
        "\n",
        "# Import all ras-commander modules\n",
        "from ras_commander import *\n",
        "\n",
        "# Import the required libraries for this notebook\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from IPython import display\n",
        "from pathlib import Path\n",
        "import matplotlib.pyplot as plt\n",
        "import psutil  # For getting system CPU info\n",
        "from concurrent.futures import ThreadPoolExecutor, as_completed\n",
        "import time\n",
        "import subprocess\n",
        "import sys\n",
        "import os\n",
        "import shutil"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Setting Up Our Working Environment\n",
        "\n",
        "Let's set up our working directory and check the number of available CPU cores. Since we'll be running multiple projects in parallel, it's important to understand our system resources."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 17:04:13 - ras_commander.RasExamples - INFO - Found zip file: d:\\GitHub\\ras-commander\\examples\\Example_Projects_6_6.zip\n",
            "2025-04-08 17:04:13 - ras_commander.RasExamples - INFO - Loading project data from CSV...\n",
            "2025-04-08 17:04:13 - ras_commander.RasExamples - INFO - Loaded 68 projects from CSV.\n",
            "2025-04-08 17:04:13 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
            "2025-04-08 17:04:13 - ras_commander.RasExamples - INFO - Extracting project 'Balde Eagle Creek'\n",
            "2025-04-08 17:04:13 - ras_commander.RasExamples - INFO - Project 'Balde Eagle Creek' already exists. Deleting existing folder...\n",
            "2025-04-08 17:04:13 - ras_commander.RasExamples - INFO - Existing folder for project 'Balde Eagle Creek' has been deleted.\n",
            "2025-04-08 17:04:13 - ras_commander.RasExamples - INFO - Successfully extracted project 'Balde Eagle Creek' to d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n",
            "2025-04-08 17:04:13 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
            "2025-04-08 17:04:13 - ras_commander.RasExamples - INFO - Extracting project 'BaldEagleCrkMulti2D'\n",
            "2025-04-08 17:04:13 - ras_commander.RasExamples - INFO - Project 'BaldEagleCrkMulti2D' already exists. Deleting existing folder...\n",
            "2025-04-08 17:04:13 - ras_commander.RasExamples - INFO - Existing folder for project 'BaldEagleCrkMulti2D' has been deleted.\n",
            "2025-04-08 17:04:15 - ras_commander.RasExamples - INFO - Successfully extracted project 'BaldEagleCrkMulti2D' to d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-08 17:04:15 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
            "2025-04-08 17:04:15 - ras_commander.RasExamples - INFO - Extracting project 'Muncie'\n",
            "2025-04-08 17:04:15 - ras_commander.RasExamples - INFO - Project 'Muncie' already exists. Deleting existing folder...\n",
            "2025-04-08 17:04:15 - ras_commander.RasExamples - INFO - Existing folder for project 'Muncie' has been deleted.\n",
            "2025-04-08 17:04:16 - ras_commander.RasExamples - INFO - Successfully extracted project 'Muncie' to d:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[WindowsPath('d:/GitHub/ras-commander/examples/example_projects/Balde Eagle Creek'), WindowsPath('d:/GitHub/ras-commander/examples/example_projects/BaldEagleCrkMulti2D'), WindowsPath('d:/GitHub/ras-commander/examples/example_projects/Muncie')]\n",
            "Examples directory: d:\\GitHub\\ras-commander\\examples\\example_projects\n",
            "Path d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek exists: True\n",
            "Path d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D exists: True\n",
            "Path d:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie exists: True\n"
          ]
        }
      ],
      "source": [
        "# Extract specific projects we'll use in this tutorial\n",
        "# This will download them if not present and extract them to the example_projects folder\n",
        "extracted_paths = RasExamples.extract_project([\"Balde Eagle Creek\", \"BaldEagleCrkMulti2D\", \"Muncie\"])\n",
        "print(extracted_paths)\n",
        "\n",
        "# Get the parent directory of the first extracted path as our examples directory\n",
        "examples_dir = extracted_paths[0].parent\n",
        "print(f\"Examples directory: {examples_dir}\")\n",
        "\n",
        "\n",
        "# Define paths to the extracted projects\n",
        "bald_eagle_path = examples_dir / \"Balde Eagle Creek\"\n",
        "multi_2d_path = examples_dir / \"BaldEagleCrkMulti2D\"\n",
        "muncie_path = examples_dir / \"Muncie\"\n",
        "\n",
        "# Verify the paths exist\n",
        "for path in [bald_eagle_path, multi_2d_path, muncie_path]:\n",
        "    print(f\"Path {path} exists: {path.exists()}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "System Resources:\n",
            "- 2 physical CPU cores (4 logical cores)\n",
            "- 3.3 GB available memory\n",
            "For multiple HEC-RAS projects, a good rule of thumb is:\n",
            "- Assign 2-4 cores per project\n",
            "- Allocate at least 2-4 GB of RAM per project\n",
            "Based on your system, you could reasonably run 1 projects simultaneously.\n"
          ]
        }
      ],
      "source": [
        "# Define computation output paths\n",
        "bald_eagle_compute_folder = examples_dir / \"compute_bald_eagle\"\n",
        "muncie_compute_folder = examples_dir / \"compute_muncie\"\n",
        "\n",
        "# Check system resources\n",
        "cpu_count = psutil.cpu_count(logical=True)\n",
        "physical_cpu_count = psutil.cpu_count(logical=False)\n",
        "available_memory_gb = psutil.virtual_memory().available / (1024**3)\n",
        "\n",
        "print(f\"System Resources:\")\n",
        "print(f\"- {physical_cpu_count} physical CPU cores ({cpu_count} logical cores)\")\n",
        "print(f\"- {available_memory_gb:.1f} GB available memory\")\n",
        "print(f\"For multiple HEC-RAS projects, a good rule of thumb is:\")\n",
        "print(f\"- Assign 2-4 cores per project\")\n",
        "print(f\"- Allocate at least 2-4 GB of RAM per project\")\n",
        "print(f\"Based on your system, you could reasonably run {min(physical_cpu_count//2, int(available_memory_gb//3))} projects simultaneously.\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Understanding Multiple RAS Project Management\n",
        "\n",
        "When working with multiple HEC-RAS projects in RAS Commander, there are two important concepts to understand:\n",
        "\n",
        "1. **The Global 'ras' Object**: By default, RAS Commander maintains a global `ras` object that represents the currently active project. This is convenient for simple scripts.\n",
        "\n",
        "2. **Custom RAS Objects**: For multiple projects, you'll create separate RAS objects for each project. These custom objects store project-specific data and are passed to RAS Commander functions using the `ras_object` parameter.\n",
        "\n",
        "### Best Practices for Multiple Project Management\n",
        "\n",
        "- **Name Your Objects Clearly**: Use descriptive variable names for your RAS objects (e.g., `bald_eagle_ras`, `muncie_ras`)\n",
        "- **Be Consistent**: Always pass the appropriate RAS object to functions when working with multiple projects\n",
        "- **Avoid Using Global 'ras'**: When working with multiple projects, avoid using the global `ras` object to prevent confusion\n",
        "- **Separate Compute Folders**: Use separate computation folders for each project\n",
        "- **Manage Resources**: Be mindful of CPU and memory usage when running multiple projects in parallel"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Downloading and Extracting Example HEC-RAS Projects\n",
        "\n",
        "We'll use the `RasExamples` class to download and extract two example HEC-RAS projects: \"Balde Eagle Creek\" and \"Muncie\"."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 17:04:16 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
            "2025-04-08 17:04:16 - ras_commander.RasExamples - INFO - Extracting project 'Balde Eagle Creek'\n",
            "2025-04-08 17:04:16 - ras_commander.RasExamples - INFO - Successfully extracted project 'Balde Eagle Creek' to d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n",
            "2025-04-08 17:04:16 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
            "2025-04-08 17:04:16 - ras_commander.RasExamples - INFO - Extracting project 'Muncie'\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Removed existing example projects directory: d:\\GitHub\\ras-commander\\examples\\example_projects\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 17:04:16 - ras_commander.RasExamples - INFO - Successfully extracted project 'Muncie' to d:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Extracted projects to:\n",
            "- d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n",
            "- d:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie\n",
            "\n",
            "Bald Eagle Creek project exists: True\n",
            "Muncie project exists: True\n"
          ]
        }
      ],
      "source": [
        "# Delete existing project if it exists to ensure a clean start\n",
        "if examples_dir.exists():\n",
        "    shutil.rmtree(examples_dir)\n",
        "    print(f\"Removed existing example projects directory: {examples_dir}\")\n",
        "\n",
        "# Create a RasExamples instance\n",
        "ras_examples = RasExamples()\n",
        "\n",
        "# Extract the example projects\n",
        "extracted_paths = ras_examples.extract_project([\"Balde Eagle Creek\", \"Muncie\"])\n",
        "print(f\"Extracted projects to:\")\n",
        "for path in extracted_paths:\n",
        "    print(f\"- {path}\")\n",
        "\n",
        "# Verify the paths exist\n",
        "print(f\"\\nBald Eagle Creek project exists: {bald_eagle_path.exists()}\")\n",
        "print(f\"Muncie project exists: {muncie_path.exists()}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 1: Initialize Multiple Projects\n",
        "\n",
        "Let's initialize both HEC-RAS projects. Instead of using the global `ras` object, we'll create separate RAS objects for each project."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 17:04:16 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.rasmap\n",
            "2025-04-08 17:04:16 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.rasmap\n",
            "2025-04-08 17:04:16 - ras_commander.RasPrj - INFO - Global 'ras' object also updated to match the new project.\n",
            "2025-04-08 17:04:16 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n",
            "2025-04-08 17:04:16 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie\\Muncie.rasmap\n",
            "2025-04-08 17:04:16 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie\\Muncie.rasmap\n",
            "2025-04-08 17:04:16 - ras_commander.RasPrj - INFO - Global 'ras' object also updated to match the new project.\n",
            "2025-04-08 17:04:16 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Initialized Bald Eagle Creek project: BaldEagle\n",
            "Initialized Muncie project: Muncie\n",
            "\n",
            "Available plans in Bald Eagle Creek project:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>UNET D2 Cores</th>\\n', '      <th>PS Cores</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>01</td>\\n', '      <td>Unsteady with Bridges and Dam</td>\\n', '      <td>5.00</td>\\n', '      <td>UnsteadyFlow</td>\\n', '      <td>18FEB1999,0000,24FEB1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>1HOUR</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>0.0</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>2</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>Steady Flow Run</td>\\n', '      <td>NaN</td>\\n', '      <td>SteadyRun</td>\\n', '      <td>02/18/1999,0000,02/24/1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>NaN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>NaN</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  plan_number unsteady_number geometry_number                     Plan Title  \\\n",
              "0          01              02              01  Unsteady with Bridges and Dam   \n",
              "1          02            None              01                Steady Flow Run   \n",
              "\n",
              "  Program Version Short Identifier                  Simulation Date  \\\n",
              "0            5.00     UnsteadyFlow    18FEB1999,0000,24FEB1999,0500   \n",
              "1             NaN        SteadyRun  02/18/1999,0000,02/24/1999,0500   \n",
              "\n",
              "  Computation Interval Mapping Interval Run HTab  ... UNET D2 Cores PS Cores  \\\n",
              "0                 2MIN            1HOUR        1  ...           0.0     None   \n",
              "1                 2MIN              NaN        1  ...           NaN     None   \n",
              "\n",
              "  DSS File Friction Slope Method HDF_Results_Path  Geom File  \\\n",
              "0      dss                     2             None         01   \n",
              "1      dss                     1             None         01   \n",
              "\n",
              "                                           Geom Path Flow File  \\\n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...        02   \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...        02   \n",
              "\n",
              "                                           Flow Path  \\\n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "\n",
              "                                           full_path  \n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "\n",
              "[2 rows x 26 columns]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Available plans in Muncie project:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>UNET D2 SolverType</th>\\n', '      <th>UNET D2 Name</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>01</td>\\n', '      <td>01</td>\\n', '      <td>Unsteady Multi  9-SA run</td>\\n', '      <td>5.00</td>\\n', '      <td>9-SAs</td>\\n', '      <td>02JAN1900,0000,02JAN1900,2400</td>\\n', '      <td>15SEC</td>\\n', '      <td>5MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>03</td>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>Unsteady Run with 2D 50ft Grid</td>\\n', '      <td>5.10</td>\\n', '      <td>2D 50ft Grid</td>\\n', '      <td>02JAN1900,0000,02JAN1900,2400</td>\\n', '      <td>10SEC</td>\\n', '      <td>5MIN</td>\\n', '      <td>-1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>Pardiso (Direct)</td>\\n', '      <td>2D Interior Area</td>\\n', '      <td>None</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>04</td>\\n', '      <td>01</td>\\n', '      <td>04</td>\\n', '      <td>Unsteady Run with 2D 50ft User n Value R</td>\\n', '      <td>5.10</td>\\n', '      <td>50ft User n Regions</td>\\n', '      <td>02JAN1900,0000,02JAN1900,2400</td>\\n', '      <td>10SEC</td>\\n', '      <td>5MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>Pardiso (Direct)</td>\\n', '      <td>2D Interior Area</td>\\n', '      <td>None</td>\\n', '      <td>04</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  plan_number unsteady_number geometry_number  \\\n",
              "0          01              01              01   \n",
              "1          03              01              02   \n",
              "2          04              01              04   \n",
              "\n",
              "                                 Plan Title Program Version  \\\n",
              "0                  Unsteady Multi  9-SA run            5.00   \n",
              "1            Unsteady Run with 2D 50ft Grid            5.10   \n",
              "2  Unsteady Run with 2D 50ft User n Value R            5.10   \n",
              "\n",
              "      Short Identifier                Simulation Date Computation Interval  \\\n",
              "0                9-SAs  02JAN1900,0000,02JAN1900,2400                15SEC   \n",
              "1         2D 50ft Grid  02JAN1900,0000,02JAN1900,2400                10SEC   \n",
              "2  50ft User n Regions  02JAN1900,0000,02JAN1900,2400                10SEC   \n",
              "\n",
              "  Mapping Interval Run HTab  ... DSS File Friction Slope Method  \\\n",
              "0             5MIN        1  ...      dss                     1   \n",
              "1             5MIN       -1  ...      dss                     1   \n",
              "2             5MIN        1  ...      dss                     1   \n",
              "\n",
              "  UNET D2 SolverType      UNET D2 Name HDF_Results_Path Geom File  \\\n",
              "0                NaN               NaN             None        01   \n",
              "1   Pardiso (Direct)  2D Interior Area             None        02   \n",
              "2   Pardiso (Direct)  2D Interior Area             None        04   \n",
              "\n",
              "                                           Geom Path  Flow File  \\\n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...         01   \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...         01   \n",
              "2  d:\\GitHub\\ras-commander\\examples\\example_proje...         01   \n",
              "\n",
              "                                           Flow Path  \\\n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "2  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "\n",
              "                                           full_path  \n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "2  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "\n",
              "[3 rows x 29 columns]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Initialize both projects with their own RAS objects\n",
        "bald_eagle_ras = RasPrj()\n",
        "init_ras_project(bald_eagle_path, \"6.6\", ras_object=bald_eagle_ras)\n",
        "print(f\"Initialized Bald Eagle Creek project: {bald_eagle_ras.project_name}\")\n",
        "\n",
        "muncie_ras = RasPrj()\n",
        "init_ras_project(muncie_path, \"6.6\", ras_object=muncie_ras)\n",
        "print(f\"Initialized Muncie project: {muncie_ras.project_name}\")\n",
        "\n",
        "# Display available plans in each project\n",
        "print(\"\\nAvailable plans in Bald Eagle Creek project:\")\n",
        "display.display(bald_eagle_ras.plan_df)\n",
        "\n",
        "print(\"\\nAvailable plans in Muncie project:\")\n",
        "display.display(muncie_ras.plan_df)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 2: Clone Plans in Each Project\n",
        "\n",
        "Now, let's clone a plan in each project, giving them custom short identifiers. This demonstrates how to perform operations on multiple projects independently."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 17:04:17 - ras_commander.RasUtils - INFO - File cloned from d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01 to d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n",
            "2025-04-08 17:04:17 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n",
            "2025-04-08 17:04:17 - ras_commander.RasUtils - INFO - Project file updated with new Plan entry: 03\n",
            "2025-04-08 17:04:17 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.rasmap\n",
            "2025-04-08 17:04:17 - ras_commander.RasUtils - INFO - File cloned from d:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie\\Muncie.p01 to d:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie\\Muncie.p02\n",
            "2025-04-08 17:04:17 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie\\Muncie.p02\n",
            "2025-04-08 17:04:17 - ras_commander.RasUtils - INFO - Project file updated with new Plan entry: 02\n",
            "2025-04-08 17:04:17 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie\\Muncie.rasmap\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Created new plan 03 in Bald Eagle Creek project\n",
            "Created new plan 02 in Muncie project\n",
            "\n",
            "Updated plans in Bald Eagle Creek project:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>UNET D2 Cores</th>\\n', '      <th>PS Cores</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>01</td>\\n', '      <td>Unsteady with Bridges and Dam</td>\\n', '      <td>5.00</td>\\n', '      <td>UnsteadyFlow</td>\\n', '      <td>18FEB1999,0000,24FEB1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>1HOUR</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>0.0</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>2</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>None</td>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>Steady Flow Run</td>\\n', '      <td>NaN</td>\\n', '      <td>SteadyRun</td>\\n', '      <td>02/18/1999,0000,02/24/1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>NaN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>NaN</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>None</td>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>03</td>\\n', '      <td>02</td>\\n', '      <td>01</td>\\n', '      <td>Unsteady with Bridges and Dam</td>\\n', '      <td>5.00</td>\\n', '      <td>MultiProjDemo</td>\\n', '      <td>18FEB1999,0000,24FEB1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>1HOUR</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>0.0</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>2</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>None</td>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  plan_number unsteady_number geometry_number                     Plan Title  \\\n",
              "0          01              02              01  Unsteady with Bridges and Dam   \n",
              "1          02            None              01                Steady Flow Run   \n",
              "2          03              02              01  Unsteady with Bridges and Dam   \n",
              "\n",
              "  Program Version Short Identifier                  Simulation Date  \\\n",
              "0            5.00     UnsteadyFlow    18FEB1999,0000,24FEB1999,0500   \n",
              "1             NaN        SteadyRun  02/18/1999,0000,02/24/1999,0500   \n",
              "2            5.00    MultiProjDemo    18FEB1999,0000,24FEB1999,0500   \n",
              "\n",
              "  Computation Interval Mapping Interval Run HTab  ... UNET D2 Cores PS Cores  \\\n",
              "0                 2MIN            1HOUR        1  ...           0.0     None   \n",
              "1                 2MIN              NaN        1  ...           NaN     None   \n",
              "2                 2MIN            1HOUR        1  ...           0.0     None   \n",
              "\n",
              "  DSS File Friction Slope Method HDF_Results_Path  Geom File  Geom Path  \\\n",
              "0      dss                     2             None         01       None   \n",
              "1      dss                     1             None         01       None   \n",
              "2      dss                     2             None         01       None   \n",
              "\n",
              "  Flow File Flow Path                                          full_path  \n",
              "0        02      None  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "1        02      None  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "2        02      None  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "\n",
              "[3 rows x 26 columns]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Updated plans in Muncie project:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>UNET D2 SolverType</th>\\n', '      <th>UNET D2 Name</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>01</td>\\n', '      <td>01</td>\\n', '      <td>Unsteady Multi  9-SA run</td>\\n', '      <td>5.00</td>\\n', '      <td>9-SAs</td>\\n', '      <td>02JAN1900,0000,02JAN1900,2400</td>\\n', '      <td>15SEC</td>\\n', '      <td>5MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>None</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>03</td>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>Unsteady Run with 2D 50ft Grid</td>\\n', '      <td>5.10</td>\\n', '      <td>2D 50ft Grid</td>\\n', '      <td>02JAN1900,0000,02JAN1900,2400</td>\\n', '      <td>10SEC</td>\\n', '      <td>5MIN</td>\\n', '      <td>-1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>Pardiso (Direct)</td>\\n', '      <td>2D Interior Area</td>\\n', '      <td>None</td>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>None</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>04</td>\\n', '      <td>01</td>\\n', '      <td>04</td>\\n', '      <td>Unsteady Run with 2D 50ft User n Value R</td>\\n', '      <td>5.10</td>\\n', '      <td>50ft User n Regions</td>\\n', '      <td>02JAN1900,0000,02JAN1900,2400</td>\\n', '      <td>10SEC</td>\\n', '      <td>5MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>Pardiso (Direct)</td>\\n', '      <td>2D Interior Area</td>\\n', '      <td>None</td>\\n', '      <td>04</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>None</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>02</td>\\n', '      <td>01</td>\\n', '      <td>01</td>\\n', '      <td>Unsteady Multi  9-SA run</td>\\n', '      <td>5.00</td>\\n', '      <td>MultiProjDemo</td>\\n', '      <td>02JAN1900,0000,02JAN1900,2400</td>\\n', '      <td>15SEC</td>\\n', '      <td>5MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>None</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  plan_number unsteady_number geometry_number  \\\n",
              "0          01              01              01   \n",
              "1          03              01              02   \n",
              "2          04              01              04   \n",
              "3          02              01              01   \n",
              "\n",
              "                                 Plan Title Program Version  \\\n",
              "0                  Unsteady Multi  9-SA run            5.00   \n",
              "1            Unsteady Run with 2D 50ft Grid            5.10   \n",
              "2  Unsteady Run with 2D 50ft User n Value R            5.10   \n",
              "3                  Unsteady Multi  9-SA run            5.00   \n",
              "\n",
              "      Short Identifier                Simulation Date Computation Interval  \\\n",
              "0                9-SAs  02JAN1900,0000,02JAN1900,2400                15SEC   \n",
              "1         2D 50ft Grid  02JAN1900,0000,02JAN1900,2400                10SEC   \n",
              "2  50ft User n Regions  02JAN1900,0000,02JAN1900,2400                10SEC   \n",
              "3        MultiProjDemo  02JAN1900,0000,02JAN1900,2400                15SEC   \n",
              "\n",
              "  Mapping Interval Run HTab  ... DSS File Friction Slope Method  \\\n",
              "0             5MIN        1  ...      dss                     1   \n",
              "1             5MIN       -1  ...      dss                     1   \n",
              "2             5MIN        1  ...      dss                     1   \n",
              "3             5MIN        1  ...      dss                     1   \n",
              "\n",
              "  UNET D2 SolverType      UNET D2 Name HDF_Results_Path Geom File  Geom Path  \\\n",
              "0                NaN               NaN             None        01       None   \n",
              "1   Pardiso (Direct)  2D Interior Area             None        02       None   \n",
              "2   Pardiso (Direct)  2D Interior Area             None        04       None   \n",
              "3                NaN               NaN             None        01       None   \n",
              "\n",
              "   Flow File Flow Path                                          full_path  \n",
              "0         01      None  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "1         01      None  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "2         01      None  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "3         01      None  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "\n",
              "[4 rows x 29 columns]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Clone plans with custom short identifiers\n",
        "new_bald_eagle_plan = RasPlan.clone_plan(\"01\", new_plan_shortid=\"MultiProjDemo\", ras_object=bald_eagle_ras)\n",
        "print(f\"Created new plan {new_bald_eagle_plan} in Bald Eagle Creek project\")\n",
        "\n",
        "new_muncie_plan = RasPlan.clone_plan(\"01\", new_plan_shortid=\"MultiProjDemo\", ras_object=muncie_ras)\n",
        "print(f\"Created new plan {new_muncie_plan} in Muncie project\")\n",
        "\n",
        "# Display the updated plan dataframes\n",
        "print(\"\\nUpdated plans in Bald Eagle Creek project:\")\n",
        "bald_eagle_ras.plan_df = bald_eagle_ras.get_plan_entries()  # Refresh the plan dataframe\n",
        "display.display(bald_eagle_ras.plan_df)\n",
        "\n",
        "print(\"\\nUpdated plans in Muncie project:\")\n",
        "muncie_ras.plan_df = muncie_ras.get_plan_entries()  # Refresh the plan dataframe\n",
        "display.display(muncie_ras.plan_df)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 3: Configure Plans for Both Projects\n",
        "\n",
        "Let's configure the plans for both projects, setting geometry, number of cores, and other parameters. This demonstrates how to customize plans for different projects using the same code structure."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 17:04:17 - ras_commander.RasPlan - INFO - Updated Geom File in plan file to g01 for plan 03\n",
            "2025-04-08 17:04:17 - ras_commander.RasPlan - INFO - Geometry for plan 03 set to 01\n",
            "2025-04-08 17:04:17 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n",
            "2025-04-08 17:04:17 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n",
            "2025-04-08 17:04:17 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n",
            "2025-04-08 17:04:17 - ras_commander.RasPlan - INFO - Updated description in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n",
            "2025-04-08 17:04:17 - ras_commander.RasPlan - INFO - Successfully updated intervals in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p03\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Configuring Bald Eagle Creek plan:\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 17:04:17 - ras_commander.RasPlan - INFO - Updated Geom File in plan file to g01 for plan 02\n",
            "2025-04-08 17:04:17 - ras_commander.RasPlan - INFO - Geometry for plan 02 set to 01\n",
            "2025-04-08 17:04:17 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie\\Muncie.p02\n",
            "2025-04-08 17:04:17 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie\\Muncie.p02\n",
            "2025-04-08 17:04:17 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie\\Muncie.p02\n",
            "2025-04-08 17:04:17 - ras_commander.RasPlan - INFO - Updated description in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie\\Muncie.p02\n",
            "2025-04-08 17:04:17 - ras_commander.RasPlan - INFO - Successfully updated intervals in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie\\Muncie.p02\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Successfully configured Bald Eagle Creek plan\n",
            "\n",
            "Configuring Muncie plan:\n",
            "Successfully configured Muncie plan\n"
          ]
        }
      ],
      "source": [
        "# Configure the Bald Eagle Creek plan\n",
        "print(\"Configuring Bald Eagle Creek plan:\")\n",
        "RasPlan.set_geom(new_bald_eagle_plan, \"01\", ras_object=bald_eagle_ras)\n",
        "RasPlan.set_num_cores(new_bald_eagle_plan, 2, ras_object=bald_eagle_ras)\n",
        "\n",
        "# Update description and intervals\n",
        "description = \"Multi-project demonstration plan\\nBald Eagle Creek project\\nConfigured for parallel execution\"\n",
        "RasPlan.update_plan_description(new_bald_eagle_plan, description, ras_object=bald_eagle_ras)\n",
        "RasPlan.update_plan_intervals(\n",
        "    new_bald_eagle_plan, \n",
        "    computation_interval=\"10SEC\", \n",
        "    output_interval=\"5MIN\", \n",
        "    ras_object=bald_eagle_ras\n",
        ")\n",
        "print(\"Successfully configured Bald Eagle Creek plan\")\n",
        "\n",
        "# Configure the Muncie plan\n",
        "print(\"\\nConfiguring Muncie plan:\")\n",
        "RasPlan.set_geom(new_muncie_plan, \"01\", ras_object=muncie_ras)\n",
        "RasPlan.set_num_cores(new_muncie_plan, 2, ras_object=muncie_ras)\n",
        "\n",
        "# Update description and intervals\n",
        "description = \"Multi-project demonstration plan\\nMuncie project\\nConfigured for parallel execution\"\n",
        "RasPlan.update_plan_description(new_muncie_plan, description, ras_object=muncie_ras)\n",
        "RasPlan.update_plan_intervals(\n",
        "    new_muncie_plan, \n",
        "    computation_interval=\"10SEC\", \n",
        "    output_interval=\"5MIN\", \n",
        "    ras_object=muncie_ras\n",
        ")\n",
        "print(\"Successfully configured Muncie plan\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 4: Create Compute Folders for Both Projects\n",
        "\n",
        "Now, let's create separate compute folders for each project. This allows us to run the computations separately and in parallel."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Created compute folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_bald_eagle\n",
            "Created compute folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_muncie\n"
          ]
        }
      ],
      "source": [
        "# Create compute folders or clean them if they already exist\n",
        "for folder in [bald_eagle_compute_folder, muncie_compute_folder]:\n",
        "    if folder.exists():\n",
        "        shutil.rmtree(folder)\n",
        "        print(f\"Removed existing compute folder: {folder}\")\n",
        "    folder.mkdir(parents=True, exist_ok=True)\n",
        "    print(f\"Created compute folder: {folder}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 5: Define Project Execution Function\n",
        "\n",
        "Let's define a function to execute plans for each project, which we can run in parallel. This function will handle plan execution, timing, and provide detailed status updates."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {},
      "outputs": [],
      "source": [
        "def execute_plan(plan_number, ras_object, compute_folder, project_name):\n",
        "    \"\"\"\n",
        "    Execute a HEC-RAS plan and return detailed information about the execution.\n",
        "    \n",
        "    Args:\n",
        "        plan_number (str): The plan number to execute\n",
        "        ras_object: The RAS project object\n",
        "        compute_folder (Path): Folder where computation will be performed\n",
        "        project_name (str): A descriptive name for the project\n",
        "        \n",
        "    Returns:\n",
        "        dict: Detailed information about the execution\n",
        "    \"\"\"\n",
        "    print(f\"Starting execution of plan {plan_number} for {project_name}...\")\n",
        "    \n",
        "    # Record start time\n",
        "    start_time = time.time()\n",
        "    \n",
        "    # Execute the plan in the compute folder\n",
        "    success = RasCmdr.compute_plan(\n",
        "        plan_number=plan_number, \n",
        "        ras_object=ras_object, \n",
        "        dest_folder=compute_folder,\n",
        "        clear_geompre=True\n",
        "    )\n",
        "    \n",
        "    # Record end time and calculate duration\n",
        "    end_time = time.time()\n",
        "    duration = end_time - start_time\n",
        "    \n",
        "    # Determine if results were created\n",
        "    result_path = None\n",
        "    result_size = None\n",
        "    \n",
        "    try:\n",
        "        # Initialize a temporary RAS object in the compute folder to check results\n",
        "        compute_ras = init_ras_project(compute_folder, ras_object.ras_exe_path)\n",
        "        result_path = RasPlan.get_results_path(plan_number, ras_object=compute_ras)\n",
        "        \n",
        "        if result_path:\n",
        "            result_file = Path(result_path)\n",
        "            if result_file.exists():\n",
        "                result_size = result_file.stat().st_size / (1024 * 1024)  # Size in MB\n",
        "    except Exception as e:\n",
        "        print(f\"Error checking results for {project_name}: {e}\")\n",
        "    \n",
        "    # Build result information\n",
        "    result_info = {\n",
        "        \"project_name\": project_name,\n",
        "        \"plan_number\": plan_number,\n",
        "        \"success\": success,\n",
        "        \"duration\": duration,\n",
        "        \"compute_folder\": str(compute_folder),\n",
        "        \"result_path\": str(result_path) if result_path else None,\n",
        "        \"result_size_mb\": result_size,\n",
        "        \"timestamp\": time.strftime(\"%Y-%m-%d %H:%M:%S\")\n",
        "    }\n",
        "    \n",
        "    print(f\"Completed execution of plan {plan_number} for {project_name} in {duration:.2f} seconds\")\n",
        "    return result_info"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 6: Execute Plans for Both Projects in Parallel\n",
        "\n",
        "Now, let's run both projects in parallel using a `ThreadPoolExecutor`. This allows us to utilize our system resources efficiently."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 17:04:17 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n",
            "2025-04-08 17:04:17 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Executing plans for both projects in parallel...\n",
            "This may take several minutes...\n",
            "Starting execution of plan 03 for Bald Eagle Creek...\n",
            "Starting execution of plan 02 for Muncie...\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 17:04:17 - ras_commander.RasCmdr - INFO - Copied project folder to destination: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_bald_eagle\n",
            "2025-04-08 17:04:17 - ras_commander.RasCmdr - INFO - Copied project folder to destination: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_muncie\n",
            "2025-04-08 17:04:17 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_bald_eagle\\BaldEagle.rasmap\n",
            "2025-04-08 17:04:17 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_bald_eagle\\BaldEagle.p03\n",
            "2025-04-08 17:04:17 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_bald_eagle\\BaldEagle.p03\n",
            "2025-04-08 17:04:17 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-08 17:04:17 - ras_commander.RasCmdr - INFO - Cleared geometry preprocessor files for plan: 03\n",
            "2025-04-08 17:04:17 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-08 17:04:17 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\compute_bald_eagle\\BaldEagle.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_bald_eagle\\BaldEagle.p03\"\n",
            "2025-04-08 17:04:17 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_muncie\\Muncie.rasmap\n",
            "2025-04-08 17:04:17 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_muncie\\Muncie.p02\n",
            "2025-04-08 17:04:17 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_muncie\\Muncie.p02\n",
            "2025-04-08 17:04:17 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-08 17:04:17 - ras_commander.RasCmdr - INFO - Cleared geometry preprocessor files for plan: 02\n",
            "2025-04-08 17:04:17 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-08 17:04:17 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\compute_muncie\\Muncie.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_muncie\\Muncie.p02\"\n",
            "2025-04-08 17:05:07 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 02\n",
            "2025-04-08 17:05:07 - ras_commander.RasCmdr - INFO - Total run time for plan 02: 49.20 seconds\n",
            "2025-04-08 17:05:07 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-08 17:05:07 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_muncie\\Muncie.rasmap\n",
            "2025-04-08 17:05:07 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_muncie\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Completed execution of plan 02 for Muncie in 49.65 seconds\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 17:08:17 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 03\n",
            "2025-04-08 17:08:17 - ras_commander.RasCmdr - INFO - Total run time for plan 03: 240.23 seconds\n",
            "2025-04-08 17:08:17 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-08 17:08:18 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_bald_eagle\\BaldEagle.rasmap\n",
            "2025-04-08 17:08:18 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_bald_eagle\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Completed execution of plan 03 for Bald Eagle Creek in 240.56 seconds\n",
            "\n",
            "All executions complete!\n"
          ]
        }
      ],
      "source": [
        "print(\"Executing plans for both projects in parallel...\")\n",
        "print(\"This may take several minutes...\")\n",
        "\n",
        "# Define the execution tasks\n",
        "execution_tasks = [\n",
        "    (new_bald_eagle_plan, bald_eagle_ras, bald_eagle_compute_folder, \"Bald Eagle Creek\"),\n",
        "    (new_muncie_plan, muncie_ras, muncie_compute_folder, \"Muncie\")\n",
        "]\n",
        "\n",
        "results = []\n",
        "\n",
        "# Execute the plans in parallel using ThreadPoolExecutor\n",
        "with ThreadPoolExecutor(max_workers=2) as executor:\n",
        "    futures = [\n",
        "        executor.submit(execute_plan, *task)\n",
        "        for task in execution_tasks\n",
        "    ]\n",
        "    \n",
        "    # Collect results as they complete\n",
        "    for future in as_completed(futures):\n",
        "        try:\n",
        "            result = future.result()\n",
        "            results.append(result)\n",
        "        except Exception as e:\n",
        "            print(f\"Execution error: {e}\")\n",
        "\n",
        "print(\"\\nAll executions complete!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 7: Analyze Results\n",
        "\n",
        "Let's analyze the results from both project executions, comparing execution times, result sizes, etc."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Execution Results Summary:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>project_name</th>\\n', '      <th>plan_number</th>\\n', '      <th>success</th>\\n', '      <th>duration</th>\\n', '      <th>result_size_mb</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>Muncie</td>\\n', '      <td>02</td>\\n', '      <td>True</td>\\n', '      <td>49.654510</td>\\n', '      <td>3.857780</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>Bald Eagle Creek</td>\\n', '      <td>03</td>\\n', '      <td>True</td>\\n', '      <td>240.559194</td>\\n', '      <td>11.529757</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "       project_name plan_number  success    duration  result_size_mb\n",
              "0            Muncie          02     True   49.654510        3.857780\n",
              "1  Bald Eagle Creek          03     True  240.559194       11.529757"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Create a DataFrame from the results\n",
        "results_df = pd.DataFrame(results)\n",
        "\n",
        "# Display the results table\n",
        "print(\"Execution Results Summary:\")\n",
        "display.display(results_df[['project_name', 'plan_number', 'success', 'duration', 'result_size_mb']])\n",
        "\n",
        "# Create a bar chart for execution times\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(results_df['project_name'], results_df['duration'], color=['blue', 'green'])\n",
        "plt.title('Execution Time by Project')\n",
        "plt.xlabel('Muncie Plan 02 vs Bald Eagle Creek Plan 02\\n (2 separate projects, for demonstration purposes only)')\n",
        "plt.ylabel('Execution Time (seconds)')\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "\n",
        "# Add duration values on top of the bars\n",
        "for i, duration in enumerate(results_df['duration']):\n",
        "    plt.text(i, duration + 5, f\"{duration:.1f}s\", ha='center')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# If we have result sizes, create a chart for those as well\n",
        "if results_df['result_size_mb'].notna().any():\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    plt.bar(results_df['project_name'], results_df['result_size_mb'], color=['orange', 'purple'])\n",
        "    plt.title('Result File Size by Project')\n",
        "    plt.xlabel('Project')\n",
        "    plt.ylabel('Result Size (MB)')\n",
        "    plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "    \n",
        "    # Add size values on top of the bars\n",
        "    for i, size in enumerate(results_df['result_size_mb']):\n",
        "        if pd.notna(size):\n",
        "            plt.text(i, size + 2, f\"{size:.1f} MB\", ha='center')\n",
        "    \n",
        "    plt.tight_layout()\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 9: Compare Two HEC-RAS Projects\n",
        "\n",
        "Let's create a utility function to compare the structures of the two HEC-RAS projects. This helps us understand the differences between the projects we're working with."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Project Structure Comparison:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Project Name</th>\\n', '      <th>Plan Count</th>\\n', '      <th>Geometry Count</th>\\n', '      <th>Flow Count</th>\\n', '      <th>Unsteady Count</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>Bald Eagle Creek</th>\\n', '      <td>BaldEagle</td>\\n', '      <td>3</td>\\n', '      <td>1</td>\\n', '      <td>2</td>\\n', '      <td>1</td>\\n', '    </tr><tr>\\n', '      <th>Muncie</th>\\n', '      <td>Muncie</td>\\n', '      <td>4</td>\\n', '      <td>3</td>\\n', '      <td>1</td>\\n', '      <td>1</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "                 Project Name  Plan Count  Geometry Count  Flow Count  \\\n",
              "Bald Eagle Creek    BaldEagle           3               1           2   \n",
              "Muncie                 Muncie           4               3           1   \n",
              "\n",
              "                  Unsteady Count  \n",
              "Bald Eagle Creek               1  \n",
              "Muncie                         1  "
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "def compare_project_structures(ras_object1, name1, ras_object2, name2):\n",
        "    \"\"\"\n",
        "    Compare the structures of two HEC-RAS projects and display differences.\n",
        "    \"\"\"\n",
        "    # Refresh all dataframes to ensure we have the latest data\n",
        "    ras_object1.plan_df = ras_object1.get_plan_entries()\n",
        "    ras_object1.geom_df = ras_object1.get_geom_entries()\n",
        "    ras_object1.flow_df = ras_object1.get_flow_entries()\n",
        "    ras_object1.unsteady_df = ras_object1.get_unsteady_entries()\n",
        "    \n",
        "    ras_object2.plan_df = ras_object2.get_plan_entries()\n",
        "    ras_object2.geom_df = ras_object2.get_geom_entries()\n",
        "    ras_object2.flow_df = ras_object2.get_flow_entries()\n",
        "    ras_object2.unsteady_df = ras_object2.get_unsteady_entries()\n",
        "    \n",
        "    # Create a comparison dictionary\n",
        "    comparison = {\n",
        "        'Project Name': [ras_object1.project_name, ras_object2.project_name],\n",
        "        'Plan Count': [len(ras_object1.plan_df), len(ras_object2.plan_df)],\n",
        "        'Geometry Count': [len(ras_object1.geom_df), len(ras_object2.geom_df)],\n",
        "        'Flow Count': [len(ras_object1.flow_df), len(ras_object2.flow_df)],\n",
        "        'Unsteady Count': [len(ras_object1.unsteady_df), len(ras_object2.unsteady_df)]\n",
        "    }\n",
        "    \n",
        "    # Create a DataFrame for the comparison\n",
        "    comparison_df = pd.DataFrame(comparison, index=[name1, name2])\n",
        "    \n",
        "\n",
        "    # Display the comparison\n",
        "    print(\"Project Structure Comparison:\")\n",
        "    display.display(comparison_df)\n",
        "    \n",
        "    # Create a bar chart to visualize the comparison\n",
        "    plt.figure(figsize=(12, 6))\n",
        "    comparison_df.iloc[:, 1:].plot(kind='bar', ax=plt.gca())\n",
        "    plt.title('Project Structure Comparison')\n",
        "    plt.xlabel('Project')\n",
        "    plt.ylabel('Count')\n",
        "    plt.legend(title='Component')\n",
        "    plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "    \n",
        "    # Set y-axis to only show whole numbers (integers)\n",
        "    ax = plt.gca()\n",
        "    ax.yaxis.set_major_locator(plt.MaxNLocator(integer=True))\n",
        "    \n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "    \n",
        "    return comparison_df\n",
        "\n",
        "# Compare the structures of the two projects\n",
        "comparison_df = compare_project_structures(\n",
        "    bald_eagle_ras, \"Bald Eagle Creek\", \n",
        "    muncie_ras, \"Muncie\"\n",
        ")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "-----"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## This approach can also be used to programmatically compare 2 copies of the same project to ensure all of the plan parameters, boundary condition definitions, etc remained the same, and for other QAQC processes.\n",
        "\n",
        "This will be shown in further examples in more detail."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "-----"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Summary of Multiple Project Operations\n",
        "\n",
        "In this notebook, we've demonstrated how to work with multiple HEC-RAS projects simultaneously using the RAS Commander library. We've covered the following key operations:\n",
        "\n",
        "1. **Initializing Multiple Projects**: Creating separate RAS objects for different projects\n",
        "2. **Independent Configuration**: Configuring plans with project-specific parameters\n",
        "3. **Parallel Execution**: Running computations from different projects simultaneously\n",
        "4. **Resource Management**: Organizing compute folders and tracking execution statistics\n",
        "5. **Results Comparison**: Analyzing and comparing results from different projects\n",
        "6. **Advanced Workflows**: Creating sensitivity plans and batch processing pipelines\n",
        "\n",
        "### Key Concepts\n",
        "\n",
        "When working with multiple HEC-RAS projects in RAS Commander, remember these key concepts:\n",
        "\n",
        "- **Custom RAS Objects**: Create and use separate RAS objects for each project\n",
        "- **Always Specify ras_object**: Use the `ras_object` parameter in all function calls\n",
        "- **Separate Compute Folders**: Use separate folders for each project's computations\n",
        "- **Resource Management**: Be mindful of CPU and memory usage when running in parallel\n",
        "- **Project Tracking**: Keep track of which results belong to which project\n",
        "\n",
        "### Multiple Project Applications\n",
        "\n",
        "Working with multiple projects unlocks advanced applications such as:\n",
        "\n",
        "1. **Model Comparison**: Compare results from different river systems\n",
        "2. **Basin-wide Analysis**: Analyze connected river systems in parallel\n",
        "3. **Parameter Sweep**: Test a range of parameters across multiple models\n",
        "4. **Model Development**: Develop and test models simultaneously\n",
        "5. **Batch Processing**: Process large sets of models in an automated pipeline\n",
        "\n",
        "These capabilities make RAS Commander a powerful tool for large-scale hydraulic modeling and water resources management."
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "rascmdr",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
}
==================================================

File: c:\GH\ras-commander\examples\05_single_plan_execution.ipynb
==================================================
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# RAS Commander: Single Plan Execution\n",
        "\n",
        "This notebook demonstrates how to execute a single HEC-RAS plan using the RAS Commander library. We'll focus specifically on running a plan with a specified number of processor cores while overwriting an existing computation folder.\n",
        "\n",
        "## Operations Covered\n",
        "\n",
        "1. **Project Initialization**: Initialize a HEC-RAS project by specifying the project path and version\n",
        "2. **Plan Overview**: Explore the available plans in the project\n",
        "3. **Core Execution Configuration**: Set the number of processor cores to use during computation\n",
        "4. **Destination Folder Management**: Use and overwrite computation folders \n",
        "5. **Results Verification**: Check the results paths after computation\n",
        "6. **Performance Considerations**: Understand the impact of core count on performance\n",
        "\n",
        "Let's begin by importing the necessary libraries and setting up our environment."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Package Installation and Environment Setup\n",
        "Uncomment and run package installation commands if needed"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Install ras-commander from pip (uncomment to install if needed)\n",
        "#!pip install ras-commander\n",
        "# This installs ras-commander and all dependencies"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Import all required modules\n",
        "\n",
        "# Import all ras-commander modules\n",
        "from ras_commander import *\n",
        "\n",
        "# Import the required libraries for this notebook\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from IPython import display\n",
        "from pathlib import Path\n",
        "import matplotlib.pyplot as plt\n",
        "import psutil  # For getting system CPU info\n",
        "from concurrent.futures import ThreadPoolExecutor, as_completed\n",
        "import time\n",
        "import subprocess\n",
        "import sys\n",
        "import os\n",
        "import shutil"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Setting Up Our Working Environment\n",
        "\n",
        "Let's set up our working directory and paths to example projects. We'll also check the number of available CPU cores on this system."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 18:38:59 - ras_commander.RasExamples - INFO - Found zip file: d:\\GitHub\\ras-commander\\examples\\Example_Projects_6_6.zip\n",
            "2025-04-08 18:38:59 - ras_commander.RasExamples - INFO - Loading project data from CSV...\n",
            "2025-04-08 18:38:59 - ras_commander.RasExamples - INFO - Loaded 68 projects from CSV.\n",
            "2025-04-08 18:38:59 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
            "2025-04-08 18:38:59 - ras_commander.RasExamples - INFO - Extracting project 'Balde Eagle Creek'\n",
            "2025-04-08 18:38:59 - ras_commander.RasExamples - INFO - Project 'Balde Eagle Creek' already exists. Deleting existing folder...\n",
            "2025-04-08 18:38:59 - ras_commander.RasExamples - INFO - Existing folder for project 'Balde Eagle Creek' has been deleted.\n",
            "2025-04-08 18:38:59 - ras_commander.RasExamples - INFO - Successfully extracted project 'Balde Eagle Creek' to d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Extracted project to: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n",
            "Bald Eagle Creek project exists: True\n"
          ]
        }
      ],
      "source": [
        "# Extract the Bald Eagle Creek example project\n",
        "# The extract_project method downloads the project from GitHub if not already present,\n",
        "# and extracts it to the example_projects folder\n",
        "bald_eagle_path = RasExamples.extract_project(\"Balde Eagle Creek\")\n",
        "print(f\"Extracted project to: {bald_eagle_path}\")  \n",
        "\n",
        "\n",
        "# Verify the path exists\n",
        "print(f\"Bald Eagle Creek project exists: {bald_eagle_path.exists()}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "System has 2 physical CPU cores (4 logical cores)\n",
            "For HEC-RAS computation, it's often most efficient to use 2-8 cores\n"
          ]
        }
      ],
      "source": [
        "# Define paths to example projects\n",
        "examples_dir = bald_eagle_path.parent\n",
        "\n",
        "# Define computation output paths\n",
        "compute_dest_folder = examples_dir / \"compute_test\"\n",
        "\n",
        "# Check system resources\n",
        "cpu_count = psutil.cpu_count(logical=True)\n",
        "physical_cpu_count = psutil.cpu_count(logical=False)\n",
        "print(f\"System has {physical_cpu_count} physical CPU cores ({cpu_count} logical cores)\")\n",
        "print(f\"For HEC-RAS computation, it's often most efficient to use 2-8 cores\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Understanding the RasCmdr.compute_plan Method\n",
        "\n",
        "Before we dive into execution, let's understand the `compute_plan` method from the `RasCmdr` class, which is the core function for running HEC-RAS simulations.\n",
        "\n",
        "### Key Parameters\n",
        "\n",
        "- `plan_number` (str, Path): The plan number to execute or the full path to the plan file\n",
        "- `dest_folder` (str, Path, optional): Destination folder for computation\n",
        "- `ras_object` (RasPrj, optional): Specific RAS object to use (defaults to global `ras`)\n",
        "- `clear_geompre` (bool, optional): Whether to clear geometry preprocessor files (default: False)\n",
        "- `num_cores` (int, optional): Number of processor cores to use (default: None, uses plan settings)\n",
        "- `overwrite_dest` (bool, optional): Whether to overwrite the destination folder if it exists (default: False)\n",
        "\n",
        "### Returns\n",
        "- `bool`: True if the execution was successful, False otherwise\n",
        "\n",
        "### Key Concepts\n",
        "\n",
        "1. **Destination Folder**: By default, the simulation runs in the original project folder. Specifying a destination folder creates a copy of the project in that location for execution, leaving the original project untouched.\n",
        "\n",
        "2. **Number of Cores**: HEC-RAS can use multiple processor cores to speed up computation. The optimal number depends on the model complexity and your computer's specifications. Generally:\n",
        "   - 1-2 cores: Good for small models, highest efficiency per core\n",
        "   - 3-8 cores: Good balance for most models\n",
        "   - >8 cores: Diminishing returns, may actually be slower due to overhead\n",
        "\n",
        "3. **Geometry Preprocessor Files**: These files store precomputed hydraulic properties. Clearing them forces HEC-RAS to recompute these properties, which is useful after making geometry changes.\n",
        "\n",
        "4. **Overwrite Destination**: Controls whether an existing destination folder should be overwritten. This is a safety feature to prevent accidental deletion of important results."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 1: Project Initialization\n",
        "\n",
        "Let's initialize the HEC-RAS project using the `init_ras_project()` function."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 18:39:00 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-08 18:39:00 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.rasmap\n",
            "2025-04-08 18:39:00 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Initialized HEC-RAS project: BaldEagle\n"
          ]
        }
      ],
      "source": [
        "# Initialize the HEC-RAS project\n",
        "init_ras_project(bald_eagle_path, \"6.6\")\n",
        "print(f\"Initialized HEC-RAS project: {ras.project_name}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 2: Explore Available Plans\n",
        "\n",
        "Let's examine the available plans in the project to understand what we're working with."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Available plans in the project:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>UNET D2 Cores</th>\\n', '      <th>PS Cores</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>01</td>\\n', '      <td>Unsteady with Bridges and Dam</td>\\n', '      <td>5.00</td>\\n', '      <td>UnsteadyFlow</td>\\n', '      <td>18FEB1999,0000,24FEB1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>1HOUR</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>0.0</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>2</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>Steady Flow Run</td>\\n', '      <td>NaN</td>\\n', '      <td>SteadyRun</td>\\n', '      <td>02/18/1999,0000,02/24/1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>NaN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>NaN</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  plan_number unsteady_number geometry_number                     Plan Title  \\\n",
              "0          01              02              01  Unsteady with Bridges and Dam   \n",
              "1          02            None              01                Steady Flow Run   \n",
              "\n",
              "  Program Version Short Identifier                  Simulation Date  \\\n",
              "0            5.00     UnsteadyFlow    18FEB1999,0000,24FEB1999,0500   \n",
              "1             NaN        SteadyRun  02/18/1999,0000,02/24/1999,0500   \n",
              "\n",
              "  Computation Interval Mapping Interval Run HTab  ... UNET D2 Cores PS Cores  \\\n",
              "0                 2MIN            1HOUR        1  ...           0.0     None   \n",
              "1                 2MIN              NaN        1  ...           NaN     None   \n",
              "\n",
              "  DSS File Friction Slope Method HDF_Results_Path  Geom File  \\\n",
              "0      dss                     2             None         01   \n",
              "1      dss                     1             None         01   \n",
              "\n",
              "                                           Geom Path Flow File  \\\n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...        02   \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...        02   \n",
              "\n",
              "                                           Flow Path  \\\n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "\n",
              "                                           full_path  \n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "\n",
              "[2 rows x 26 columns]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 18:39:00 - ras_commander.RasPlan - ERROR - Key 'PS Cores' not found in the plan file.\n",
            "2025-04-08 18:39:00 - ras_commander.RasPlan - ERROR - Key 'UNET D1 Cores' not found in the plan file.\n",
            "2025-04-08 18:39:00 - ras_commander.RasPlan - ERROR - Key 'UNET D2 Cores' not found in the plan file.\n",
            "2025-04-08 18:39:00 - ras_commander.RasPlan - ERROR - Key 'PS Cores' not found in the plan file.\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Current core settings for plans:\n",
            "Plan 01's Existing Settings:\n",
            "  1D Cores: 0\n",
            "  2D Cores: 0\n",
            "  Pump Station Cores: None\n",
            "Plan 02's Existing Settings:\n",
            "  1D Cores: None\n",
            "  2D Cores: None\n",
            "  Pump Station Cores: None\n"
          ]
        }
      ],
      "source": [
        "# Display the available plans in the project\n",
        "print(\"Available plans in the project:\")\n",
        "display.display(ras.plan_df)\n",
        "\n",
        "# Let's check the current setting for number of cores in the plans\n",
        "print(\"\\nCurrent core settings for plans:\")\n",
        "for plan_num in ras.plan_df['plan_number']:\n",
        "    # Check all three core parameters\n",
        "    d1_cores = RasPlan.get_plan_value(plan_num, \"UNET D1 Cores\")\n",
        "    d2_cores = RasPlan.get_plan_value(plan_num, \"UNET D2 Cores\") \n",
        "    ps_cores = RasPlan.get_plan_value(plan_num, \"PS Cores\")\n",
        "    \n",
        "    print(f\"Plan {plan_num}'s Existing Settings:\")\n",
        "    print(f\"  1D Cores: {d1_cores}\")\n",
        "    print(f\"  2D Cores: {d2_cores}\")\n",
        "    print(f\"  Pump Station Cores: {ps_cores}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 3: Create a Destination Folder Structure\n",
        "\n",
        "Now, let's prepare a destination folder for our computation. This allows us to run simulations without modifying the original project files."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Destination folder will be created: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_cores\n"
          ]
        }
      ],
      "source": [
        "# Create a destination folder path\n",
        "dest_folder = examples_dir / \"compute_test_cores\"\n",
        "\n",
        "# Check if the destination folder already exists\n",
        "if dest_folder.exists():\n",
        "    print(f\"Destination folder already exists: {dest_folder}\")\n",
        "    print(\"We'll use overwrite_dest=True to replace it\")\n",
        "else:\n",
        "    print(f\"Destination folder will be created: {dest_folder}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 4: Execute a Plan with a Specified Number of Cores\n",
        "\n",
        "Now we're ready to execute a plan with a specified number of cores, overwriting the destination folder if it exists. This is the core functionality demonstrated in Example 5 of the original script."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 18:39:00 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n",
            "2025-04-08 18:39:00 - ras_commander.RasCmdr - INFO - Copied project folder to destination: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_cores\n",
            "2025-04-08 18:39:00 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_cores\\BaldEagle.rasmap\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Executing plan 01 with 2 cores...\n",
            "Destination folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_cores\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 18:39:00 - ras_commander.RasUtils - INFO - Using provided plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_cores\\BaldEagle.p01\n",
            "2025-04-08 18:39:00 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_cores\\BaldEagle.p01\n",
            "2025-04-08 18:39:00 - ras_commander.RasCmdr - INFO - Set number of cores to 2 for plan: 01\n",
            "2025-04-08 18:39:00 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-08 18:39:00 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_cores\\BaldEagle.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_cores\\BaldEagle.p01\"\n",
            "2025-04-08 18:42:12 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 01\n",
            "2025-04-08 18:42:12 - ras_commander.RasCmdr - INFO - Total run time for plan 01: 192.00 seconds\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\u2705 Plan 01 executed successfully using 2 cores\n",
            "Execution time: 192.11 seconds\n"
          ]
        }
      ],
      "source": [
        "# Select a plan and number of cores\n",
        "plan_number = \"01\"\n",
        "num_cores = 2  # Specify the number of cores to use\n",
        "\n",
        "print(f\"Executing plan {plan_number} with {num_cores} cores...\")\n",
        "print(f\"Destination folder: {dest_folder}\")\n",
        "\n",
        "# Record the start time\n",
        "start_time = time.time()\n",
        "\n",
        "# Execute the plan with specified parameters\n",
        "success = RasCmdr.compute_plan(\n",
        "    plan_number,              # The plan to execute\n",
        "    dest_folder=dest_folder,  # Where to run the simulation\n",
        "    num_cores=num_cores,      # Number of processor cores to use\n",
        "    overwrite_dest=True       # Overwrite destination folder if it exists\n",
        ")\n",
        "\n",
        "# Record the end time and calculate duration\n",
        "end_time = time.time()\n",
        "duration = end_time - start_time\n",
        "\n",
        "# Report results\n",
        "if success:\n",
        "    print(f\"\u2705 Plan {plan_number} executed successfully using {num_cores} cores\")\n",
        "    print(f\"Execution time: {duration:.2f} seconds\")\n",
        "else:\n",
        "    print(f\"\u274c Plan {plan_number} execution failed\")\n",
        "    print(f\"Time elapsed: {duration:.2f} seconds\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 5: Verify Results\n",
        "\n",
        "After execution, let's verify the results by checking the results paths and examining the destination folder."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Destination folder exists: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_cores\n",
            "\n",
            "Key files in destination folder:\n",
            "  BaldEagle.b01: 9.3 KB\n",
            "  BaldEagle.bco01: 2.2 KB\n",
            "  BaldEagle.c01: 522.1 KB\n",
            "  BaldEagle.dss: 3601.5 KB\n",
            "  BaldEagle.f01: 1209.0 KB\n",
            "  BaldEagle.f02: 1.5 KB\n",
            "  BaldEagle.g01: 513.6 KB\n",
            "  BaldEagle.g01.gmz: 372.6 KB\n",
            "  BaldEagle.g01.hdf: 3920.5 KB\n",
            "  BaldEagle.gis: 127.8 KB\n",
            "  ... and 13 more files\n",
            "\n",
            "HDF result files:\n",
            "  BaldEagle.g01.hdf: 3.8 MB\n",
            "  BaldEagle.p01.hdf: 7.4 MB\n",
            "  BaldEagle.u02.hdf: 0.0 MB\n"
          ]
        }
      ],
      "source": [
        "# Verify that the destination folder exists and contains the expected files\n",
        "if dest_folder.exists():\n",
        "    print(f\"Destination folder exists: {dest_folder}\")\n",
        "    \n",
        "    # List the key files in the destination folder\n",
        "    print(\"\\nKey files in destination folder:\")\n",
        "    project_files = list(dest_folder.glob(f\"{ras.project_name}.*\"))\n",
        "    for file in project_files[:10]:  # Show first 10 files\n",
        "        file_size = file.stat().st_size / 1024  # Size in KB\n",
        "        print(f\"  {file.name}: {file_size:.1f} KB\")\n",
        "    \n",
        "    if len(project_files) > 10:\n",
        "        print(f\"  ... and {len(project_files) - 10} more files\")\n",
        "    \n",
        "    # Check for HDF result files\n",
        "    print(\"\\nHDF result files:\")\n",
        "    hdf_files = list(dest_folder.glob(f\"*.hdf\"))\n",
        "    for file in hdf_files:\n",
        "        file_size = file.stat().st_size / (1024 * 1024)  # Size in MB\n",
        "        print(f\"  {file.name}: {file_size:.1f} MB\")\n",
        "else:\n",
        "    print(f\"Destination folder does not exist: {dest_folder}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-08 18:42:12 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_cores\\BaldEagle.rasmap\n",
            "2025-04-08 18:42:12 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_cores\\BaldEagle.rasmap\n",
            "2025-04-08 18:42:12 - ras_commander.RasPrj - INFO - Global 'ras' object also updated to match the new project.\n",
            "2025-04-08 18:42:12 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_cores\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Results for plan 01 are located at: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_cores\\BaldEagle.p01.hdf\n",
            "Results file size: 7.41 MB\n"
          ]
        }
      ],
      "source": [
        "# Check the results path using the RasPlan.get_results_path method\n",
        "# First, initialize a RAS object using the destination folder\n",
        "try:\n",
        "    dest_ras = RasPrj()\n",
        "    init_ras_project(dest_folder, \"6.6\", ras_object=dest_ras)\n",
        "    \n",
        "    # Get the results path for the plan we just executed\n",
        "    results_path = RasPlan.get_results_path(plan_number, ras_object=dest_ras)\n",
        "    \n",
        "    if results_path:\n",
        "        print(f\"Results for plan {plan_number} are located at: {results_path}\")\n",
        "        \n",
        "        # Check if the file exists and get its size\n",
        "        results_file = Path(results_path)\n",
        "        if results_file.exists():\n",
        "            size_mb = results_file.stat().st_size / (1024 * 1024)\n",
        "            print(f\"Results file size: {size_mb:.2f} MB\")\n",
        "    else:\n",
        "        print(f\"No results found for plan {plan_number} in the destination folder\")\n",
        "except Exception as e:\n",
        "    print(f\"Error checking results: {e}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Summary of Single Plan Execution Options\n",
        "\n",
        "The `RasCmdr.compute_plan()` method provides a flexible way to execute HEC-RAS plans with various options. Here's a summary of the key parameters we've explored:\n",
        "\n",
        "1. **Basic Execution**: Simply provide a plan number\n",
        "   ```python\n",
        "   RasCmdr.compute_plan(\"01\")\n",
        "   ```\n",
        "\n",
        "2. **Destination Folder**: Run in a separate folder to preserve the original project\n",
        "   ```python\n",
        "   RasCmdr.compute_plan(\"01\", dest_folder=\"path/to/folder\")\n",
        "   ```\n",
        "\n",
        "3. **Number of Cores**: Control the CPU resources used\n",
        "   ```python\n",
        "   RasCmdr.compute_plan(\"01\", num_cores=2)\n",
        "   ```\n",
        "\n",
        "4. **Overwrite Destination**: Replace existing computation folders\n",
        "   ```python\n",
        "   RasCmdr.compute_plan(\"01\", dest_folder=\"path/to/folder\", overwrite_dest=True)\n",
        "   ```\n",
        "\n",
        "5. **Clear Geometry Preprocessor**: Force recalculation of geometric properties\n",
        "   ```python\n",
        "   RasCmdr.compute_plan(\"01\", clear_geompre=True)\n",
        "   ```\n",
        "\n",
        "6. **Combined Options**: Use multiple options together\n",
        "   ```python\n",
        "   RasCmdr.compute_plan(\n",
        "       \"01\",\n",
        "       dest_folder=\"path/to/folder\",\n",
        "       num_cores=2,\n",
        "       clear_geompre=True,\n",
        "       overwrite_dest=True\n",
        "   )\n",
        "   ```\n",
        "\n",
        "### Next Steps\n",
        "\n",
        "To further enhance your HEC-RAS automation, consider exploring:\n",
        "\n",
        "1. **Parallel Execution**: Use `RasCmdr.compute_parallel()` to run multiple plans simultaneously\n",
        "2. **Test Mode**: Use `RasCmdr.compute_test_mode()` for testing purposes\n",
        "3. **Pre-Processing**: Modify plans, geometries, and unsteady flows before execution\n",
        "4. **Post-Processing**: Analyze results after computation\n",
        "5. **Batch Processing**: Create scripts for parameter sweeps or scenario analysis\n",
        "\n",
        "These advanced topics are covered in other examples and documentation for the RAS Commander library."
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "rascmdr",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
}
==================================================

File: c:\GH\ras-commander\examples\06_executing_plan_sets.ipynb
==================================================
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# RAS Commander: Executing Plan Sets \n",
        "\n",
        "This notebook demonstrates different ways to specify and execute HEC-RAS plans using the RAS Commander library. Proper plan specification is essential for efficient model execution, especially when working with large projects containing multiple plans.\n",
        "\n",
        "## Operations Covered\n",
        "\n",
        "1. **Project Initialization**: Initialize a HEC-RAS project and explore available plans\n",
        "2. **Sequential Execution of Specific Plans**: Select and run particular plans in sequence\n",
        "3. **Parallel Execution of Specific Plans**: Run selected plans simultaneously\n",
        "4. **Executing All Plans**: Run every plan in a project\n",
        "5. **Filtered Plan Selection**: Select plans based on criteria or patterns\n",
        "6. **Conditional Execution**: Run plans based on results of previous executions\n",
        "\n",
        "Let's begin by importing the necessary libraries and setting up our environment."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Package Installation and Environment Setup\n",
        "Uncomment and run package installation commands if needed"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Install ras-commander from pip (uncomment to install if needed)\n",
        "#!pip install ras-commander\n",
        "# This installs ras-commander and all dependencies"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Import all required modules\n",
        "\n",
        "# Import all ras-commander modules\n",
        "from ras_commander import *\n",
        "\n",
        "# Import the required libraries for this notebook\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from IPython import display\n",
        "from pathlib import Path\n",
        "import matplotlib.pyplot as plt\n",
        "import psutil  # For getting system CPU info\n",
        "from concurrent.futures import ThreadPoolExecutor, as_completed\n",
        "import time\n",
        "import subprocess\n",
        "import sys\n",
        "import os\n",
        "import shutil"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:24:33 - ras_commander.RasExamples - INFO - Found zip file: d:\\GitHub\\ras-commander\\examples\\Example_Projects_6_6.zip\n",
            "2025-04-09 03:24:33 - ras_commander.RasExamples - INFO - Loading project data from CSV...\n",
            "2025-04-09 03:24:33 - ras_commander.RasExamples - INFO - Loaded 68 projects from CSV.\n",
            "2025-04-09 03:24:33 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
            "2025-04-09 03:24:33 - ras_commander.RasExamples - INFO - Extracting project 'Balde Eagle Creek'\n",
            "2025-04-09 03:24:33 - ras_commander.RasExamples - INFO - Project 'Balde Eagle Creek' already exists. Deleting existing folder...\n",
            "2025-04-09 03:24:33 - ras_commander.RasExamples - INFO - Existing folder for project 'Balde Eagle Creek' has been deleted.\n",
            "2025-04-09 03:24:33 - ras_commander.RasExamples - INFO - Successfully extracted project 'Balde Eagle Creek' to d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Extracted project to: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n",
            "Bald Eagle Creek project exists: True\n"
          ]
        }
      ],
      "source": [
        "# Extract the Bald Eagle Creek example project\n",
        "# The extract_project method downloads the project from GitHub if not already present,\n",
        "# and extracts it to the example_projects folder\n",
        "bald_eagle_path = RasExamples.extract_project(\"Balde Eagle Creek\")\n",
        "print(f\"Extracted project to: {bald_eagle_path}\")  \n",
        "\n",
        "\n",
        "# Verify the path exists\n",
        "print(f\"Bald Eagle Creek project exists: {bald_eagle_path.exists()}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Understanding Plan Specification in HEC-RAS\n",
        "\n",
        "In HEC-RAS, each plan (`.p*` file) represents a specific hydraulic model simulation scenario. When working with RAS Commander, you can specify plans for execution in several ways:\n",
        "\n",
        "1. **Single Plan**: Specify one plan by its number (e.g., \"01\")\n",
        "2. **List of Plans**: Specify multiple plans as a list (e.g., [\"01\", \"03\", \"05\"])\n",
        "3. **All Plans**: Execute all plans in a project by not specifying any plan or passing `None`\n",
        "4. **Filtered Plans**: Select plans based on criteria (e.g., plans with specific flow conditions)\n",
        "5. **Plan Path**: Specify the full path to a plan file instead of just the number\n",
        "\n",
        "### Why Plan Specification Matters\n",
        "\n",
        "- **Efficiency**: Run only the plans you need rather than recomputing everything\n",
        "- **Organization**: Group related plans for batch processing\n",
        "- **Automation**: Create workflows that process plans in a specific order\n",
        "- **Resource Management**: Optimize hardware utilization for specific plans\n",
        "\n",
        "### Best Practices for Plan Specification\n",
        "\n",
        "- Use consistent formatting for plan numbers (e.g., always use two-digit strings like \"01\" instead of 1)\n",
        "- Check available plans before attempting to execute them\n",
        "- Organize plans by purpose to make selection easier\n",
        "- Use descriptive short identifiers and plan titles to aid in selection"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 1: Project Initialization\n",
        "\n",
        "Let's initialize the HEC-RAS project using the `init_ras_project()` function and explore the available plans."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:24:33 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-09 03:24:33 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.rasmap\n",
            "2025-04-09 03:24:33 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Initialized HEC-RAS project: BaldEagle\n",
            "\n",
            "Available plans in the project:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>UNET D2 Cores</th>\\n', '      <th>PS Cores</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>01</td>\\n', '      <td>Unsteady with Bridges and Dam</td>\\n', '      <td>5.00</td>\\n', '      <td>UnsteadyFlow</td>\\n', '      <td>18FEB1999,0000,24FEB1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>1HOUR</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>0.0</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>2</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>Steady Flow Run</td>\\n', '      <td>NaN</td>\\n', '      <td>SteadyRun</td>\\n', '      <td>02/18/1999,0000,02/24/1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>NaN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>NaN</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  plan_number unsteady_number geometry_number                     Plan Title  \\\n",
              "0          01              02              01  Unsteady with Bridges and Dam   \n",
              "1          02            None              01                Steady Flow Run   \n",
              "\n",
              "  Program Version Short Identifier                  Simulation Date  \\\n",
              "0            5.00     UnsteadyFlow    18FEB1999,0000,24FEB1999,0500   \n",
              "1             NaN        SteadyRun  02/18/1999,0000,02/24/1999,0500   \n",
              "\n",
              "  Computation Interval Mapping Interval Run HTab  ... UNET D2 Cores PS Cores  \\\n",
              "0                 2MIN            1HOUR        1  ...           0.0     None   \n",
              "1                 2MIN              NaN        1  ...           NaN     None   \n",
              "\n",
              "  DSS File Friction Slope Method HDF_Results_Path  Geom File  \\\n",
              "0      dss                     2             None         01   \n",
              "1      dss                     1             None         01   \n",
              "\n",
              "                                           Geom Path Flow File  \\\n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...        02   \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...        02   \n",
              "\n",
              "                                           Flow Path  \\\n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "\n",
              "                                           full_path  \n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "\n",
              "[2 rows x 26 columns]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:24:34 - ras_commander.RasPlan - WARNING - No description found in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01\n",
            "2025-04-09 03:24:34 - ras_commander.RasPlan - WARNING - No description found in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p02\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Plan details:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Plan Number</th>\\n', '      <th>Short ID</th>\\n', '      <th>Description</th>\\n', '      <th>Geometry</th>\\n', '      <th>Has Results</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>UnsteadyFlow</td>\\n', '      <td></td>\\n', '      <td>01</td>\\n', '      <td>False</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>02</td>\\n', '      <td>SteadyRun</td>\\n', '      <td></td>\\n', '      <td>01</td>\\n', '      <td>False</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  Plan Number      Short ID Description Geometry  Has Results\n",
              "0          01  UnsteadyFlow                   01        False\n",
              "1          02     SteadyRun                   01        False"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Initialize the HEC-RAS project\n",
        "init_ras_project(bald_eagle_path, \"6.6\")\n",
        "print(f\"Initialized HEC-RAS project: {ras.project_name}\")\n",
        "\n",
        "# Display the current plan files in the project\n",
        "print(\"\\nAvailable plans in the project:\")\n",
        "display.display(ras.plan_df)\n",
        "\n",
        "# Check plan details to understand what each plan represents\n",
        "plan_details = []\n",
        "for index, row in ras.plan_df.iterrows():\n",
        "    plan_number = row['plan_number']\n",
        "    \n",
        "    # Get plan description if available\n",
        "    description = None\n",
        "    if 'description' in row:\n",
        "        description = row['description']\n",
        "    else:\n",
        "        try:\n",
        "            description = RasPlan.read_plan_description(plan_number)\n",
        "        except:\n",
        "            pass\n",
        "    \n",
        "    # Get short identifier if available\n",
        "    short_id = None\n",
        "    if 'Short Identifier' in row:\n",
        "        short_id = row['Short Identifier']\n",
        "    \n",
        "    # Get geometry file\n",
        "    geom_file = None\n",
        "    if 'Geom File' in row:\n",
        "        geom_file = row['Geom File']\n",
        "    \n",
        "    # Check if the plan has results\n",
        "    has_results = False\n",
        "    if 'HDF_Results_Path' in row and row['HDF_Results_Path']:\n",
        "        has_results = True\n",
        "    \n",
        "    plan_details.append({\n",
        "        'Plan Number': plan_number,\n",
        "        'Short ID': short_id,\n",
        "        'Description': description[:50] + '...' if description and len(description) > 50 else description,\n",
        "        'Geometry': geom_file,\n",
        "        'Has Results': has_results\n",
        "    })\n",
        "\n",
        "# Create a DataFrame with the plan details\n",
        "plan_details_df = pd.DataFrame(plan_details)\n",
        "print(\"\\nPlan details:\")\n",
        "display.display(plan_details_df)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 2: Sequential Execution of Specific Plans\n",
        "\n",
        "Let's execute specific plans in sequence using `RasCmdr.compute_test_mode()` with a list of plan numbers. This approach allows us to run only the plans we need, in the order we specify."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:24:34 - ras_commander.RasCmdr - INFO - Starting the compute_test_mode...\n",
            "2025-04-09 03:24:34 - ras_commander.RasCmdr - INFO - Creating the test folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [SpecificSequential]...\n",
            "2025-04-09 03:24:34 - ras_commander.RasCmdr - INFO - Copied project folder to compute folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [SpecificSequential]\n",
            "2025-04-09 03:24:34 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [SpecificSequential]\\BaldEagle.rasmap\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Executing specific plans sequentially...\n",
            "This may take several minutes...\n",
            "Selected plans: 01, 03\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:24:34 - ras_commander.RasCmdr - INFO - Initialized RAS project in compute folder: D:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [SpecificSequential]\\BaldEagle.prj\n",
            "2025-04-09 03:24:34 - ras_commander.RasCmdr - INFO - Getting plan entries...\n",
            "2025-04-09 03:24:34 - ras_commander.RasCmdr - INFO - Retrieved plan entries successfully.\n",
            "2025-04-09 03:24:34 - ras_commander.RasCmdr - INFO - Filtered plans to execute: ['01', '03']\n",
            "2025-04-09 03:24:34 - ras_commander.RasCmdr - INFO - Running selected plans sequentially...\n",
            "2025-04-09 03:24:34 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [SpecificSequential]\n",
            "2025-04-09 03:24:34 - ras_commander.RasUtils - INFO - Using provided plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [SpecificSequential]\\BaldEagle.p01\n",
            "2025-04-09 03:24:34 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [SpecificSequential]\\BaldEagle.p01\n",
            "2025-04-09 03:24:34 - ras_commander.RasCmdr - INFO - Set number of cores to 6 for plan: 01\n",
            "2025-04-09 03:24:34 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-09 03:24:34 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [SpecificSequential]\\BaldEagle.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [SpecificSequential]\\BaldEagle.p01\"\n",
            "2025-04-09 03:27:56 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 01\n",
            "2025-04-09 03:27:56 - ras_commander.RasCmdr - INFO - Total run time for plan 01: 202.64 seconds\n",
            "2025-04-09 03:27:56 - ras_commander.RasCmdr - INFO - Successfully computed plan 01\n",
            "2025-04-09 03:27:56 - ras_commander.RasCmdr - INFO - Total run time for plan 01: 202.73 seconds\n",
            "2025-04-09 03:27:56 - ras_commander.RasCmdr - INFO - All selected plans have been executed.\n",
            "2025-04-09 03:27:56 - ras_commander.RasCmdr - INFO - compute_test_mode completed.\n",
            "2025-04-09 03:27:56 - ras_commander.RasCmdr - INFO - \n",
            "Execution Results:\n",
            "2025-04-09 03:27:56 - ras_commander.RasCmdr - INFO - Plan 01: Successful\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Sequential execution of specific plans completed in 202.84 seconds\n",
            "\n",
            "Sequential Execution Results:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Plan</th>\\n', '      <th>Success</th>\\n', '      <th>Execution Type</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>True</td>\\n', '      <td>Sequential</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  Plan  Success Execution Type\n",
              "0   01     True     Sequential"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "print(\"Executing specific plans sequentially...\")\n",
        "print(\"This may take several minutes...\")\n",
        "\n",
        "# Define the plans to execute\n",
        "specific_plans = [\"01\", \"03\"]\n",
        "print(f\"Selected plans: {', '.join(specific_plans)}\")\n",
        "\n",
        "# Record start time for performance measurement\n",
        "start_time = time.time()\n",
        "\n",
        "# Execute specific plans sequentially\n",
        "execution_results = RasCmdr.compute_test_mode(\n",
        "    plan_number=specific_plans,\n",
        "    dest_folder_suffix=\"[SpecificSequential]\",\n",
        "    num_cores=6, \n",
        "    overwrite_dest=True\n",
        ")\n",
        "\n",
        "# Record end time and calculate duration\n",
        "end_time = time.time()\n",
        "sequential_duration = end_time - start_time\n",
        "\n",
        "print(f\"Sequential execution of specific plans completed in {sequential_duration:.2f} seconds\")\n",
        "\n",
        "# Create a DataFrame from the execution results for better visualization\n",
        "sequential_results_df = pd.DataFrame([\n",
        "    {\"Plan\": plan, \"Success\": success, \"Execution Type\": \"Sequential\"}\n",
        "    for plan, success in execution_results.items()\n",
        "])\n",
        "\n",
        "sequential_results_df \n",
        "\n",
        "# Ensure the 'Plan' column exists before sorting\n",
        "if 'Plan' in sequential_results_df.columns:\n",
        "    sequential_results_df = sequential_results_df.sort_values(\"Plan\")\n",
        "else:\n",
        "    print(\"Warning: 'Plan' column not found in execution results.\")\n",
        "\n",
        "# Display the results\n",
        "print(\"\\nSequential Execution Results:\")\n",
        "display.display(sequential_results_df)\n",
        "\n",
        "# Check the test folder\n",
        "test_folder = bald_eagle_path.parent / f\"{ras.project_name} [SpecificSequential]\"\n",
        "if test_folder.exists():\n",
        "    print(f\"\\nTest folder exists: {test_folder}\")\n",
        "    \n",
        "    # Check for results\n",
        "    hdf_files = list(test_folder.glob(\"*.p*.hdf\"))\n",
        "    if hdf_files:\n",
        "        print(f\"Found {len(hdf_files)} HDF result files:\")\n",
        "        for file in hdf_files:\n",
        "            file_size = file.stat().st_size / (1024 * 1024)  # Size in MB\n",
        "            print(f\"  {file.name}: {file_size:.1f} MB\")\n",
        "    else:\n",
        "        print(\"No HDF result files found in the test folder\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 3: Running Only Plans Without HDF Results\n",
        "An important use case is to identify and execute only those plans that have no existing HDF results. This approach can save time by avoiding redundant computations, especially useful when adding new plans to an existing project or after making limited changes.\n",
        "\n",
        "Let's demonstrate how to:\n",
        "\n",
        "- Use the `ras` object to identify plans without results\n",
        "- Create a filtered list of these plans\n",
        "- Execute only the missing plans"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:27:56 - ras_commander.RasCmdr - INFO - Starting the compute_test_mode...\n",
            "2025-04-09 03:27:56 - ras_commander.RasCmdr - INFO - Creating the test folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [MissingPlans]...\n",
            "2025-04-09 03:27:56 - ras_commander.RasCmdr - INFO - Copied project folder to compute folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [MissingPlans]\n",
            "2025-04-09 03:27:57 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [MissingPlans]\\BaldEagle.rasmap\n",
            "2025-04-09 03:27:57 - ras_commander.RasCmdr - INFO - Initialized RAS project in compute folder: D:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [MissingPlans]\\BaldEagle.prj\n",
            "2025-04-09 03:27:57 - ras_commander.RasCmdr - INFO - Getting plan entries...\n",
            "2025-04-09 03:27:57 - ras_commander.RasCmdr - INFO - Retrieved plan entries successfully.\n",
            "2025-04-09 03:27:57 - ras_commander.RasCmdr - INFO - Filtered plans to execute: ['01', '02']\n",
            "2025-04-09 03:27:57 - ras_commander.RasCmdr - INFO - Running selected plans sequentially...\n",
            "2025-04-09 03:27:57 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [MissingPlans]\n",
            "2025-04-09 03:27:57 - ras_commander.RasUtils - INFO - Using provided plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [MissingPlans]\\BaldEagle.p01\n",
            "2025-04-09 03:27:57 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [MissingPlans]\\BaldEagle.p01\n",
            "2025-04-09 03:27:57 - ras_commander.RasCmdr - INFO - Set number of cores to 6 for plan: 01\n",
            "2025-04-09 03:27:57 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-09 03:27:57 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [MissingPlans]\\BaldEagle.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [MissingPlans]\\BaldEagle.p01\"\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Identifying and executing plans without HDF results...\n",
            "Found 2 plans without HDF results: 01, 02\n",
            "\n",
            "Executing 2 plans without results...\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:31:10 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 01\n",
            "2025-04-09 03:31:10 - ras_commander.RasCmdr - INFO - Total run time for plan 01: 193.19 seconds\n",
            "2025-04-09 03:31:10 - ras_commander.RasCmdr - INFO - Successfully computed plan 01\n",
            "2025-04-09 03:31:10 - ras_commander.RasCmdr - INFO - Total run time for plan 01: 193.23 seconds\n",
            "2025-04-09 03:31:10 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [MissingPlans]\n",
            "2025-04-09 03:31:10 - ras_commander.RasUtils - INFO - Using provided plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [MissingPlans]\\BaldEagle.p02\n",
            "2025-04-09 03:31:10 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [MissingPlans]\\BaldEagle.p02\n",
            "2025-04-09 03:31:10 - ras_commander.RasCmdr - INFO - Set number of cores to 6 for plan: 02\n",
            "2025-04-09 03:31:10 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-09 03:31:10 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [MissingPlans]\\BaldEagle.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [MissingPlans]\\BaldEagle.p02\"\n",
            "2025-04-09 03:31:17 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 02\n",
            "2025-04-09 03:31:17 - ras_commander.RasCmdr - INFO - Total run time for plan 02: 7.34 seconds\n",
            "2025-04-09 03:31:17 - ras_commander.RasCmdr - INFO - Successfully computed plan 02\n",
            "2025-04-09 03:31:17 - ras_commander.RasCmdr - INFO - Total run time for plan 02: 7.38 seconds\n",
            "2025-04-09 03:31:17 - ras_commander.RasCmdr - INFO - All selected plans have been executed.\n",
            "2025-04-09 03:31:17 - ras_commander.RasCmdr - INFO - compute_test_mode completed.\n",
            "2025-04-09 03:31:17 - ras_commander.RasCmdr - INFO - \n",
            "Execution Results:\n",
            "2025-04-09 03:31:17 - ras_commander.RasCmdr - INFO - Plan 01: Successful\n",
            "2025-04-09 03:31:17 - ras_commander.RasCmdr - INFO - Plan 02: Successful\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Execution completed in 200.73 seconds\n",
            "\n",
            "Execution Results for Plans Without HDF Results:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Plan</th>\\n', '      <th>Success</th>\\n', '      <th>Execution Type</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>True</td>\\n', '      <td>Missing Plans</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>02</td>\\n', '      <td>True</td>\\n', '      <td>Missing Plans</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  Plan  Success Execution Type\n",
              "0   01     True  Missing Plans\n",
              "1   02     True  Missing Plans"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "print(\"Identifying and executing plans without HDF results...\")\n",
        "\n",
        "# Use the ras object to determine which plans don't have results\n",
        "plans_no_results = ras.plan_df[ras.plan_df['HDF_Results_Path'].isna()]['plan_number'].tolist()\n",
        "\n",
        "if not plans_no_results:\n",
        "    print(\"All plans already have HDF results. Creating a test scenario...\")\n",
        "    # For demonstration purposes, pretend some plans don't have results\n",
        "    plans_no_results = [\"04\", \"05\"]\n",
        "    print(f\"Simulating no results for plans: {', '.join(plans_no_results)}\")\n",
        "else:\n",
        "    print(f\"Found {len(plans_no_results)} plans without HDF results: {', '.join(plans_no_results)}\")\n",
        "\n",
        "# Record start time for performance measurement\n",
        "start_time = time.time()\n",
        "\n",
        "# Execute only the plans without results\n",
        "if plans_no_results:\n",
        "    print(f\"\\nExecuting {len(plans_no_results)} plans without results...\")\n",
        "    execution_results = RasCmdr.compute_test_mode(\n",
        "        plan_number=plans_no_results,\n",
        "        dest_folder_suffix=\"[MissingPlans]\",\n",
        "        num_cores=6, \n",
        "        overwrite_dest=True\n",
        "    )\n",
        "    \n",
        "    # Record end time and calculate duration\n",
        "    end_time = time.time()\n",
        "    duration = end_time - start_time\n",
        "    \n",
        "    print(f\"Execution completed in {duration:.2f} seconds\")\n",
        "    \n",
        "    # Create a DataFrame from the execution results\n",
        "    missing_results_df = pd.DataFrame([\n",
        "        {\"Plan\": plan, \"Success\": success, \"Execution Type\": \"Missing Plans\"}\n",
        "        for plan, success in execution_results.items()\n",
        "    ])\n",
        "    \n",
        "    # Sort by plan number\n",
        "    missing_results_df = missing_results_df.sort_values(\"Plan\")\n",
        "    \n",
        "    # Display the results\n",
        "    print(\"\\nExecution Results for Plans Without HDF Results:\")\n",
        "    display.display(missing_results_df)\n",
        "    \n",
        "    # Check the test folder\n",
        "    test_folder = bald_eagle_path.parent / f\"{ras.project_name} [MissingPlans]\"\n",
        "    if test_folder.exists():\n",
        "        print(f\"\\nTest folder exists: {test_folder}\")\n",
        "        \n",
        "        # Check for results\n",
        "        hdf_files = list(test_folder.glob(\"*.p*.hdf\"))\n",
        "        if hdf_files:\n",
        "            print(f\"Found {len(hdf_files)} HDF result files:\")\n",
        "            for file in hdf_files:\n",
        "                file_size = file.stat().st_size / (1024 * 1024)  # Size in MB\n",
        "                print(f\"  {file.name}: {file_size:.1f} MB\")\n",
        "        else:\n",
        "            print(\"No HDF result files found in the test folder\")\n",
        "else:\n",
        "    print(\"No plans without results to execute.\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Verification of Results\n",
        "After executing the plans that were missing HDF results, it's important to verify that the results were properly generated. Let's check if the execution actually created the expected output files."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Re-initialize the project with the test folder to see updated results\n",
        "missing_plans_folder = bald_eagle_path.parent / f\"{ras.project_name} [MissingPlans]\"\n",
        "\n",
        "if missing_plans_folder.exists():\n",
        "    # Initialize the project from the test folder\n",
        "    test_ras = RasPrj()\n",
        "    init_ras_project(missing_plans_folder, \"6.6\", ras_object=test_ras)\n",
        "    \n",
        "    # Check which plans now have results\n",
        "    plans_with_results = test_ras.plan_df[test_ras.plan_df['HDF_Results_Path'].notna()]['plan_number'].tolist()\n",
        "    \n",
        "    print(f\"Plans with results after execution: {', '.join(plans_with_results)}\")\n",
        "    \n",
        "    # Verify if all previously missing plans now have results\n",
        "    all_generated = all(plan in plans_with_results for plan in plans_no_results)\n",
        "    \n",
        "    if all_generated:\n",
        "        print(\"\u2705 Successfully generated results for all missing plans\")\n",
        "    else:\n",
        "        print(\"\u26a0\ufe0f Some plans still don't have results after execution\")\n",
        "        missing_after = [plan for plan in plans_no_results if plan not in plans_with_results]\n",
        "        print(f\"Plans still missing results: {', '.join(missing_after)}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Summary of Plan Specification Techniques\n",
        "\n",
        "In this notebook, we've explored different ways to specify and execute HEC-RAS plans using the RAS Commander library. Here's a summary of the key techniques we've covered:\n",
        "\n",
        "1. **Basic Plan Specification**\n",
        "   - Single plan by number: `\"01\"`\n",
        "   - List of specific plans: `[\"01\", \"03\"]`\n",
        "   - All plans: `ras.plan_df['plan_number'].tolist()`\n",
        "\n",
        "2. **Advanced Selection**\n",
        "   - Categorization: Grouping plans by purpose or type\n",
        "   - Dependencies: Ensuring prerequisite plans are run first\n",
        "   - Ordered execution: Running plans in a specific sequence\n",
        "\n",
        "3. **Run Plans with Missing Results (HDF)**\n",
        "   - Using ras object to determine which plans have results\n",
        "   - Creating a list of plans with no results\n",
        "   - Running those plans sequentially\n",
        "\n",
        "4. NOTE: run_parallel can also run a list of plans, but compute_plan is only made for single plan execution.  \n",
        "\n",
        "\n",
        "### Best Practices for Plan Specification\n",
        "\n",
        "1. **Consistent Formatting**: Use two-digit strings for plan numbers (\"01\" instead of 1)\n",
        "2. **Descriptive Naming**: Use meaningful short identifiers that describe the plan's purpose\n",
        "3. **Verify Availability**: Check that specified plans exist before trying to execute them\n",
        "4. **Document Dependencies**: Keep track of which plans depend on others\n",
        "5. **Use Appropriate Execution Method**: Choose sequential or parallel based on dependencies and resources\n",
        "6. **Monitor Performance**: Track execution times to identify optimization opportunities\n",
        "\n",
        "By applying these techniques, you can create efficient and organized workflows for executing HEC-RAS plans, from simple batch processing to complex dependency-based execution sequences."
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "rascmdr",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
}
==================================================

File: c:\GH\ras-commander\examples\07_sequential_plan_execution.ipynb
==================================================
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# RAS Commander: Sequential Plan Execution\n",
        "\n",
        "This notebook demonstrates how to sequentially execute multiple HEC-RAS plans using the RAS Commander library. Sequential execution is useful for batch processing plans that need to be run in a specific order or when you want to ensure consistent resource usage across multiple runs.\n",
        "\n",
        "## Operations Covered\n",
        "\n",
        "1. **Project Initialization**: Initialize a HEC-RAS project by specifying the project path and version\n",
        "2. **Sequential Execution of All Plans**: Run all plans in a project sequentially in a test folder\n",
        "3. **Selective Plan Execution**: Run only specific plans in sequence\n",
        "4. **Geometry Preprocessor Management**: Clear geometry preprocessor files before execution\n",
        "5. **Execution Result Analysis**: Track and analyze the results of sequential executions\n",
        "6. **Performance Monitoring**: Monitor and compare execution times across different runs\n",
        "\n",
        "Let's begin by importing the necessary libraries and setting up our environment."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Package Installation and Environment Setup\n",
        "Uncomment and run package installation commands if needed"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Install ras-commander from pip (uncomment to install if needed)\n",
        "#!pip install ras-commander\n",
        "# This installs ras-commander and all dependencies"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Import all required modules\n",
        "\n",
        "# Import all ras-commander modules\n",
        "from ras_commander import *\n",
        "\n",
        "# Import the required libraries for this notebook\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from IPython import display\n",
        "from pathlib import Path\n",
        "import matplotlib.pyplot as plt\n",
        "import psutil  # For getting system CPU info\n",
        "from concurrent.futures import ThreadPoolExecutor, as_completed\n",
        "import time\n",
        "import subprocess\n",
        "import sys\n",
        "import os\n",
        "import shutil"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:38:41 - ras_commander.RasExamples - INFO - Found zip file: d:\\GitHub\\ras-commander\\examples\\Example_Projects_6_6.zip\n",
            "2025-04-09 03:38:41 - ras_commander.RasExamples - INFO - Loading project data from CSV...\n",
            "2025-04-09 03:38:41 - ras_commander.RasExamples - INFO - Loaded 68 projects from CSV.\n",
            "2025-04-09 03:38:41 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
            "2025-04-09 03:38:41 - ras_commander.RasExamples - INFO - Extracting project 'Balde Eagle Creek'\n",
            "2025-04-09 03:38:41 - ras_commander.RasExamples - INFO - Project 'Balde Eagle Creek' already exists. Deleting existing folder...\n",
            "2025-04-09 03:38:41 - ras_commander.RasExamples - INFO - Existing folder for project 'Balde Eagle Creek' has been deleted.\n",
            "2025-04-09 03:38:41 - ras_commander.RasExamples - INFO - Successfully extracted project 'Balde Eagle Creek' to d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Extracted project to: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n",
            "Bald Eagle Creek project exists: True\n"
          ]
        }
      ],
      "source": [
        "# Extract the Bald Eagle Creek example project\n",
        "# The extract_project method downloads the project from GitHub if not already present,\n",
        "# and extracts it to the example_projects folder\n",
        "bald_eagle_path = RasExamples.extract_project(\"Balde Eagle Creek\")\n",
        "print(f\"Extracted project to: {bald_eagle_path}\")  \n",
        "\n",
        "\n",
        "# Verify the path exists\n",
        "print(f\"Bald Eagle Creek project exists: {bald_eagle_path.exists()}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Examples directory set to: d:\\GitHub\\ras-commander\\examples\\example_projects\n",
            "Removing existing test folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [SpecificSequential]\n"
          ]
        }
      ],
      "source": [
        "# define examples_dir as parent of bald_eagle_path\n",
        "examples_dir = bald_eagle_path.parent\n",
        "print(f\"Examples directory set to: {examples_dir}\")\n",
        "\n",
        "    \n",
        "# Remove any compute test folders from previous runs\n",
        "for folder in examples_dir.glob(\"*[[]AllSequential[]]*\"):\n",
        "    if folder.is_dir():\n",
        "        print(f\"Removing existing test folder: {folder}\")\n",
        "        shutil.rmtree(folder)\n",
        "        \n",
        "for folder in examples_dir.glob(\"*[[]SpecificSequential*[]]*\"):\n",
        "    if folder.is_dir():\n",
        "        print(f\"Removing existing test folder: {folder}\")\n",
        "        shutil.rmtree(folder)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Understanding Sequential Execution in HEC-RAS\n",
        "\n",
        "HEC-RAS simulations can be executed in several ways:\n",
        "\n",
        "1. **Single Plan Execution**: Run one plan at a time using `RasCmdr.compute_plan()`\n",
        "2. **Sequential Execution**: Run multiple plans one after another using `RasCmdr.compute_test_mode()`\n",
        "3. **Parallel Execution**: Run multiple plans simultaneously using `RasCmdr.compute_parallel()`\n",
        "\n",
        "This notebook focuses on the second approach: **Sequential Execution**. Here are the key benefits of sequential execution:\n",
        "\n",
        "- **Controlled Resource Usage**: By running plans one at a time, you ensure consistent resource usage\n",
        "- **Dependency Management**: When later plans depend on results from earlier plans\n",
        "- **Simplified Debugging**: Easier to identify which plan is causing an issue when they run sequentially\n",
        "- **Consistent Test Environment**: All plans run in the same isolated folder\n",
        "\n",
        "The `compute_test_mode()` function from `RasCmdr` is specifically designed for this purpose. It creates a separate test folder, copies the project there, and executes the specified plans in sequential order."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Downloading and Extracting Example HEC-RAS Project\n",
        "\n",
        "Let's use the `RasExamples` class to download and extract the \"Balde Eagle Creek\" example project."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 1: Project Initialization\n",
        "\n",
        "Let's initialize the HEC-RAS project using the `init_ras_project()` function."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:38:41 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-09 03:38:41 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.rasmap\n",
            "2025-04-09 03:38:41 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Initialized HEC-RAS project: BaldEagle\n",
            "\n",
            "HEC-RAS Project Plan Data:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>UNET D2 Cores</th>\\n', '      <th>PS Cores</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>01</td>\\n', '      <td>Unsteady with Bridges and Dam</td>\\n', '      <td>5.00</td>\\n', '      <td>UnsteadyFlow</td>\\n', '      <td>18FEB1999,0000,24FEB1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>1HOUR</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>0.0</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>2</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>Steady Flow Run</td>\\n', '      <td>NaN</td>\\n', '      <td>SteadyRun</td>\\n', '      <td>02/18/1999,0000,02/24/1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>NaN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>NaN</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  plan_number unsteady_number geometry_number                     Plan Title  \\\n",
              "0          01              02              01  Unsteady with Bridges and Dam   \n",
              "1          02            None              01                Steady Flow Run   \n",
              "\n",
              "  Program Version Short Identifier                  Simulation Date  \\\n",
              "0            5.00     UnsteadyFlow    18FEB1999,0000,24FEB1999,0500   \n",
              "1             NaN        SteadyRun  02/18/1999,0000,02/24/1999,0500   \n",
              "\n",
              "  Computation Interval Mapping Interval Run HTab  ... UNET D2 Cores PS Cores  \\\n",
              "0                 2MIN            1HOUR        1  ...           0.0     None   \n",
              "1                 2MIN              NaN        1  ...           NaN     None   \n",
              "\n",
              "  DSS File Friction Slope Method HDF_Results_Path  Geom File  \\\n",
              "0      dss                     2             None         01   \n",
              "1      dss                     1             None         01   \n",
              "\n",
              "                                           Geom Path Flow File  \\\n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...        02   \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...        02   \n",
              "\n",
              "                                           Flow Path  \\\n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "\n",
              "                                           full_path  \n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "\n",
              "[2 rows x 26 columns]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Found 2 plans in the project\n"
          ]
        }
      ],
      "source": [
        "# Initialize the HEC-RAS project\n",
        "init_ras_project(bald_eagle_path, \"6.6\")\n",
        "print(f\"Initialized HEC-RAS project: {ras.project_name}\")\n",
        "\n",
        "# Display the current plan files in the project\n",
        "print(\"\\nHEC-RAS Project Plan Data:\")\n",
        "display.display(ras.plan_df)\n",
        "\n",
        "# Check how many plans we have\n",
        "plan_count = len(ras.plan_df)\n",
        "print(f\"Found {plan_count} plans in the project\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Understanding the RasCmdr.compute_test_mode Method\n",
        "\n",
        "Before we start executing plans, let's understand the `compute_test_mode()` method from the `RasCmdr` class, which we'll use for sequential execution.\n",
        "\n",
        "### Key Parameters\n",
        "\n",
        "- `plan_number` (str, list[str], optional): Plan number or list of plan numbers to execute. If None, all plans will be executed.\n",
        "- `dest_folder_suffix` (str, optional): Suffix to append to the test folder name. Defaults to \"[Test]\".\n",
        "- `clear_geompre` (bool, optional): Whether to clear geometry preprocessor files. Defaults to False.\n",
        "- `num_cores` (int, optional): Maximum number of cores to use for each plan. If None, the current setting is not changed.\n",
        "- `ras_object` (RasPrj, optional): Specific RAS object to use. If None, uses the global ras object.\n",
        "- `overwrite_dest` (bool, optional): Whether to overwrite the destination folder if it exists. Defaults to False.\n",
        "\n",
        "### Return Value\n",
        "- `Dict[str, bool]`: Dictionary of plan numbers and their execution success status.\n",
        "\n",
        "### Key Concepts\n",
        "\n",
        "1. **Test Folder**: The function creates a separate folder with the specified suffix, copying the project there for execution.\n",
        "2. **Sequential Execution**: Plans are executed one after another in the specified order.\n",
        "3. **Geometry Preprocessor Files**: These files store precomputed hydraulic properties. Clearing them forces HEC-RAS to recompute these properties.\n",
        "4. **Destination Folder Option**: The suffix determines the name of the test folder. Unlike `compute_plan()`, you can't specify an arbitrary destination folder.\n",
        "5. **Overwrite Option**: Controls whether an existing test folder should be overwritten.\n",
        "\n",
        "Now, let's see how this works in practice."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 2: Sequential Execution of All Plans\n",
        "\n",
        "Let's execute all plans in the project sequentially. This will create a test folder with the suffix \"[AllSequential]\" and run all plans one after another."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:38:41 - ras_commander.RasCmdr - INFO - Starting the compute_test_mode...\n",
            "2025-04-09 03:38:41 - ras_commander.RasCmdr - INFO - Creating the test folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential]...\n",
            "2025-04-09 03:38:41 - ras_commander.RasCmdr - INFO - Copied project folder to compute folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential]\n",
            "2025-04-09 03:38:41 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential]\\BaldEagle.rasmap\n",
            "2025-04-09 03:38:41 - ras_commander.RasCmdr - INFO - Initialized RAS project in compute folder: D:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential]\\BaldEagle.prj\n",
            "2025-04-09 03:38:41 - ras_commander.RasCmdr - INFO - Getting plan entries...\n",
            "2025-04-09 03:38:41 - ras_commander.RasCmdr - INFO - Retrieved plan entries successfully.\n",
            "2025-04-09 03:38:41 - ras_commander.RasCmdr - INFO - Running selected plans sequentially...\n",
            "2025-04-09 03:38:41 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential]\n",
            "2025-04-09 03:38:41 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-09 03:38:41 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential]\\BaldEagle.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential]\\BaldEagle.p01\"\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Executing all plans sequentially...\n",
            "This may take several minutes...\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:41:44 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 01\n",
            "2025-04-09 03:41:44 - ras_commander.RasCmdr - INFO - Total run time for plan 01: 182.54 seconds\n",
            "2025-04-09 03:41:44 - ras_commander.RasCmdr - INFO - Successfully computed plan 01\n",
            "2025-04-09 03:41:44 - ras_commander.RasCmdr - INFO - Total run time for plan 01: 182.55 seconds\n",
            "2025-04-09 03:41:44 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential]\n",
            "2025-04-09 03:41:44 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-09 03:41:44 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential]\\BaldEagle.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential]\\BaldEagle.p02\"\n",
            "2025-04-09 03:41:51 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 02\n",
            "2025-04-09 03:41:51 - ras_commander.RasCmdr - INFO - Total run time for plan 02: 7.28 seconds\n",
            "2025-04-09 03:41:51 - ras_commander.RasCmdr - INFO - Successfully computed plan 02\n",
            "2025-04-09 03:41:51 - ras_commander.RasCmdr - INFO - Total run time for plan 02: 7.31 seconds\n",
            "2025-04-09 03:41:51 - ras_commander.RasCmdr - INFO - All selected plans have been executed.\n",
            "2025-04-09 03:41:51 - ras_commander.RasCmdr - INFO - compute_test_mode completed.\n",
            "2025-04-09 03:41:51 - ras_commander.RasCmdr - INFO - \n",
            "Execution Results:\n",
            "2025-04-09 03:41:51 - ras_commander.RasCmdr - INFO - Plan 01: Successful\n",
            "2025-04-09 03:41:51 - ras_commander.RasCmdr - INFO - Plan 02: Successful\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Sequential execution of all plans completed in 189.93 seconds\n",
            "\n",
            "Execution Results:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Plan</th>\\n', '      <th>Success</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>True</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>02</td>\\n', '      <td>True</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  Plan  Success\n",
              "0   01     True\n",
              "1   02     True"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "print(\"Executing all plans sequentially...\")\n",
        "print(\"This may take several minutes...\")\n",
        "\n",
        "# Record start time for performance measurement\n",
        "start_time = time.time()\n",
        "\n",
        "# Execute all plans sequentially\n",
        "# - dest_folder_suffix: Suffix to append to the test folder name\n",
        "# - overwrite_dest: Overwrite the destination folder if it exists\n",
        "# - no ras object is specified, it will use the default \"ras\" object\n",
        "execution_results = RasCmdr.compute_test_mode(\n",
        "    dest_folder_suffix=\"[AllSequential]\",\n",
        "    overwrite_dest=True\n",
        ")\n",
        "\n",
        "# Record end time and calculate duration\n",
        "end_time = time.time()\n",
        "total_duration = end_time - start_time\n",
        "\n",
        "print(f\"Sequential execution of all plans completed in {total_duration:.2f} seconds\")\n",
        "\n",
        "# Create a DataFrame from the execution results for better visualization\n",
        "results_df = pd.DataFrame([\n",
        "    {\"Plan\": plan, \"Success\": success}\n",
        "    for plan, success in execution_results.items()\n",
        "])\n",
        "\n",
        "# Display the results\n",
        "print(\"\\nExecution Results:\")\n",
        "display.display(results_df)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 3: Examining the Test Folder\n",
        "\n",
        "Let's examine the test folder created by `compute_test_mode()` to better understand what happened during sequential execution."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": "[\"WindowsPath('d:/GitHub/ras-commander/examples/example_projects/Balde Eagle Creek [AllSequential]')\"]"
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Define the test folder path\n",
        "test_folder = bald_eagle_path.parent / f\"Balde Eagle Creek [AllSequential]\"\n",
        "test_folder"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:41:51 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential]\\BaldEagle.rasmap\n",
            "2025-04-09 03:41:51 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential]\\BaldEagle.rasmap\n",
            "2025-04-09 03:41:51 - ras_commander.RasPrj - INFO - Global 'ras' object also updated to match the new project.\n",
            "2025-04-09 03:41:51 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Test folder exists: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential]\n",
            "\n",
            "Key files in test folder:\n",
            "Project file: BaldEagle.prj\n",
            "Plan files:\n",
            "  BaldEagle.p01: 15.6 KB\n",
            "  BaldEagle.p01.comp_msgs.txt: 1.2 KB\n",
            "  BaldEagle.p01.hdf: 7592.8 KB\n",
            "  BaldEagle.p02: 12.5 KB\n",
            "  BaldEagle.p02.hdf: 4368.0 KB\n",
            "  BaldEagle.prj: 0.9 KB\n",
            "\n",
            "HDF files:\n",
            "  BaldEagle.g01.hdf: 3.8 MB\n",
            "  BaldEagle.p01.hdf: 7.4 MB\n",
            "  BaldEagle.p02.hdf: 4.3 MB\n",
            "  BaldEagle.u02.hdf: 0.0 MB\n",
            "\n",
            "Geometry preprocessor files:\n",
            "  BaldEagle.c01: 522.1 KB\n",
            "  BaldEagle.p01.comp_msgs.txt: 1.2 KB\n",
            "\n",
            "Plans with results in the test folder:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>HDF_Results_Path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  plan_number                                   HDF_Results_Path\n",
              "0          01  d:\\GitHub\\ras-commander\\examples\\example_proje...\n",
              "1          02  d:\\GitHub\\ras-commander\\examples\\example_proje..."
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Create test folder if it doesn't exist using pathlib\n",
        "if not test_folder.exists():\n",
        "    test_folder.mkdir(parents=True, exist_ok=True)\n",
        "\n",
        "\n",
        "if test_folder.exists():\n",
        "    print(f\"Test folder exists: {test_folder}\")\n",
        "    \n",
        "    # List the key files in the test folder\n",
        "    print(\"\\nKey files in test folder:\")\n",
        "    \n",
        "    # First, list the project file and all plan files\n",
        "    prj_files = list(test_folder.glob(\"*.prj\"))\n",
        "    plan_files = list(test_folder.glob(\"*.p*\"))\n",
        "    plan_files.sort()\n",
        "    \n",
        "    if prj_files:\n",
        "        print(f\"Project file: {prj_files[0].name}\")\n",
        "    \n",
        "    print(\"Plan files:\")\n",
        "    for plan_file in plan_files:\n",
        "        file_size = plan_file.stat().st_size / 1024  # Size in KB\n",
        "        print(f\"  {plan_file.name}: {file_size:.1f} KB\")\n",
        "    \n",
        "    # Look for HDF result files\n",
        "    hdf_files = list(test_folder.glob(\"*.hdf\"))\n",
        "    hdf_files.sort()\n",
        "    \n",
        "    print(\"\\nHDF files:\")\n",
        "    for hdf_file in hdf_files:\n",
        "        file_size = hdf_file.stat().st_size / (1024 * 1024)  # Size in MB\n",
        "        print(f\"  {hdf_file.name}: {file_size:.1f} MB\")\n",
        "    \n",
        "    # Geometry preprocessor files (if any)\n",
        "    geompre_files = list(test_folder.glob(\"*.c*\"))\n",
        "    geompre_files.sort()\n",
        "    \n",
        "    if geompre_files:\n",
        "        print(\"\\nGeometry preprocessor files:\")\n",
        "        for geompre_file in geompre_files:\n",
        "            file_size = geompre_file.stat().st_size / 1024  # Size in KB\n",
        "            print(f\"  {geompre_file.name}: {file_size:.1f} KB\")\n",
        "    else:\n",
        "        print(\"\\nNo geometry preprocessor files found\")\n",
        "        \n",
        "    # Initialize a RAS project in the test folder to inspect results\n",
        "    try:\n",
        "        test_ras = RasPrj()\n",
        "        init_ras_project(test_folder, ras.ras_exe_path, ras_object=test_ras)\n",
        "        print(\"\\nPlans with results in the test folder:\")\n",
        "        test_plans_with_results = test_ras.plan_df[test_ras.plan_df['HDF_Results_Path'].notna()]\n",
        "        display.display(test_plans_with_results[['plan_number', 'HDF_Results_Path']])\n",
        "    except Exception as e:\n",
        "        print(f\"Error initializing test folder as a RAS project: {e}\")\n",
        "else:\n",
        "    print(f\"Test folder not found: {test_folder}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 4: Sequential Execution of Specific Plans\n",
        "\n",
        "Now, let's execute only specific plans in the project. We'll select plans \"01\" and \"02\" and run them sequentially with the `clear_geompre` option set to True."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:41:51 - ras_commander.RasCmdr - INFO - Starting the compute_test_mode...\n",
            "2025-04-09 03:41:51 - ras_commander.RasCmdr - INFO - Creating the test folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential] [SpecificSequentialClearGeompre]...\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Executing specific plans sequentially with clearing geometry preprocessor files...\n",
            "This may take several minutes...\n",
            "Selected plans: 01, 02\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:41:51 - ras_commander.RasCmdr - INFO - Copied project folder to compute folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential] [SpecificSequentialClearGeompre]\n",
            "2025-04-09 03:41:51 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential] [SpecificSequentialClearGeompre]\\BaldEagle.rasmap\n",
            "2025-04-09 03:41:51 - ras_commander.RasCmdr - INFO - Initialized RAS project in compute folder: D:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential] [SpecificSequentialClearGeompre]\\BaldEagle.prj\n",
            "2025-04-09 03:41:51 - ras_commander.RasCmdr - INFO - Getting plan entries...\n",
            "2025-04-09 03:41:51 - ras_commander.RasCmdr - INFO - Retrieved plan entries successfully.\n",
            "2025-04-09 03:41:51 - ras_commander.RasCmdr - INFO - Filtered plans to execute: ['01', '02']\n",
            "2025-04-09 03:41:51 - ras_commander.RasCmdr - INFO - Running selected plans sequentially...\n",
            "2025-04-09 03:41:51 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential] [SpecificSequentialClearGeompre]\n",
            "2025-04-09 03:41:51 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential] [SpecificSequentialClearGeompre]\\BaldEagle.p01\n",
            "2025-04-09 03:41:51 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential] [SpecificSequentialClearGeompre]\\BaldEagle.p01\n",
            "2025-04-09 03:41:51 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-09 03:41:51 - ras_commander.RasCmdr - INFO - Cleared geometry preprocessor files for plan: 01\n",
            "2025-04-09 03:41:51 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-09 03:41:51 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential] [SpecificSequentialClearGeompre]\\BaldEagle.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential] [SpecificSequentialClearGeompre]\\BaldEagle.p01\"\n",
            "2025-04-09 03:42:18 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 01\n",
            "2025-04-09 03:42:18 - ras_commander.RasCmdr - INFO - Total run time for plan 01: 26.67 seconds\n",
            "2025-04-09 03:42:18 - ras_commander.RasCmdr - INFO - Successfully computed plan 01\n",
            "2025-04-09 03:42:18 - ras_commander.RasCmdr - INFO - Total run time for plan 01: 26.68 seconds\n",
            "2025-04-09 03:42:18 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential] [SpecificSequentialClearGeompre]\n",
            "2025-04-09 03:42:18 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential] [SpecificSequentialClearGeompre]\\BaldEagle.p02\n",
            "2025-04-09 03:42:18 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential] [SpecificSequentialClearGeompre]\\BaldEagle.p02\n",
            "2025-04-09 03:42:18 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-09 03:42:18 - ras_commander.RasCmdr - INFO - Cleared geometry preprocessor files for plan: 02\n",
            "2025-04-09 03:42:18 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-09 03:42:18 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential] [SpecificSequentialClearGeompre]\\BaldEagle.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek [AllSequential] [SpecificSequentialClearGeompre]\\BaldEagle.p02\"\n",
            "2025-04-09 03:42:25 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 02\n",
            "2025-04-09 03:42:25 - ras_commander.RasCmdr - INFO - Total run time for plan 02: 7.32 seconds\n",
            "2025-04-09 03:42:25 - ras_commander.RasCmdr - INFO - Successfully computed plan 02\n",
            "2025-04-09 03:42:25 - ras_commander.RasCmdr - INFO - Total run time for plan 02: 7.35 seconds\n",
            "2025-04-09 03:42:25 - ras_commander.RasCmdr - INFO - All selected plans have been executed.\n",
            "2025-04-09 03:42:25 - ras_commander.RasCmdr - INFO - compute_test_mode completed.\n",
            "2025-04-09 03:42:25 - ras_commander.RasCmdr - INFO - \n",
            "Execution Results:\n",
            "2025-04-09 03:42:25 - ras_commander.RasCmdr - INFO - Plan 01: Successful\n",
            "2025-04-09 03:42:25 - ras_commander.RasCmdr - INFO - Plan 02: Successful\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Sequential execution of specific plans completed in 34.22 seconds\n",
            "\n",
            "Execution Results:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Plan</th>\\n', '      <th>Success</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>True</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>02</td>\\n', '      <td>True</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  Plan  Success\n",
              "0   01     True\n",
              "1   02     True"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "print(\"Executing specific plans sequentially with clearing geometry preprocessor files...\")\n",
        "print(\"This may take several minutes...\")\n",
        "\n",
        "# Define the plans to execute\n",
        "selected_plans = [\"01\", \"02\"]\n",
        "print(f\"Selected plans: {', '.join(selected_plans)}\")\n",
        "\n",
        "# Record start time for performance measurement\n",
        "start_time = time.time()\n",
        "\n",
        "# Execute specific plans sequentially\n",
        "# - plan_number: List of plan numbers to execute\n",
        "# - dest_folder_suffix: Suffix to append to the test folder name\n",
        "# - clear_geompre: Clear geometry preprocessor files before execution\n",
        "# - overwrite_dest: Overwrite the destination folder if it exists\n",
        "execution_results = RasCmdr.compute_test_mode(\n",
        "    plan_number=selected_plans,\n",
        "    dest_folder_suffix=\"[SpecificSequentialClearGeompre]\",\n",
        "    clear_geompre=True,\n",
        "    overwrite_dest=True\n",
        ")\n",
        "\n",
        "# Record end time and calculate duration\n",
        "end_time = time.time()\n",
        "total_duration = end_time - start_time\n",
        "\n",
        "print(f\"Sequential execution of specific plans completed in {total_duration:.2f} seconds\")\n",
        "\n",
        "# Create a DataFrame from the execution results for better visualization\n",
        "results_df = pd.DataFrame([\n",
        "    {\"Plan\": plan, \"Success\": success}\n",
        "    for plan, success in execution_results.items()\n",
        "])\n",
        "\n",
        "# Display the results\n",
        "print(\"\\nExecution Results:\")\n",
        "display.display(results_df)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Summary of Sequential Plan Execution\n",
        "\n",
        "In this notebook, we've explored how to execute HEC-RAS plans sequentially using the RAS Commander library. Here's a summary of the key techniques we've covered:\n",
        "\n",
        "1. **Project Setup and Initialization**: Setting up the environment and initializing a HEC-RAS project\n",
        "2. **Example Project Management**: Using `RasExamples` to download and extract sample projects\n",
        "3. **Basic Sequential Execution**: Using `RasCmdr.compute_test_mode()` to run all plans in a project\n",
        "4. **Test Folder Analysis**: Examining the contents and results of sequential execution\n",
        "5. **Selective Plan Execution**: Running specific plans with geometry preprocessor clearing\n",
        "\n",
        "### Key Functions Used\n",
        "\n",
        "- `init_ras_project()`: Initialize a HEC-RAS project\n",
        "- `RasExamples.extract_project()`: Extract example projects for testing\n",
        "- `RasCmdr.compute_test_mode()`: Run plans sequentially in a test folder\n",
        "- `Path.glob()`: Examine test folder contents and results\n",
        "- `RasCmdr.compute_test_mode(clear_geompre=True)`: Execute plans with preprocessor clearing\n",
        "\n",
        "### Best Practices for Sequential Execution\n",
        "\n",
        "1. **Environment Setup**: Ensure all required libraries are installed and properly imported\n",
        "2. **Project Organization**: Clean up existing test folders before new executions\n",
        "3. **Resource Management**: Monitor system resources (CPU cores, memory) for optimal performance\n",
        "4. **Test Folder Naming**: Use meaningful suffixes to distinguish different execution runs\n",
        "5. **Performance Tracking**: Monitor execution times for each sequential run\n",
        "6. **Results Verification**: Check test folders for successful plan execution and result files\n",
        "7. **Selective Execution**: Use plan filtering when only specific plans need to be run\n",
        "\n",
        "With these techniques, you can effectively manage and execute HEC-RAS simulations sequentially, whether running all plans or a selected subset with specific configurations."
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "rascmdr",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
}
==================================================

File: c:\GH\ras-commander\examples\08_parallel_execution.ipynb
==================================================
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# RAS Commander: Parallel Plan Execution\n",
        "\n",
        "This notebook demonstrates how to execute multiple HEC-RAS plans in parallel using the RAS Commander library. Parallel execution allows you to make better use of your computer's processing power by running multiple plans simultaneously.\n",
        "\n",
        "## Operations Covered\n",
        "\n",
        "1. **Project Initialization**: Initialize a HEC-RAS project and prepare it for parallel execution\n",
        "2. **Parallel Execution of All Plans**: Run all plans in a project simultaneously\n",
        "3. **Selective Parallel Execution**: Run only specific plans in parallel\n",
        "4. **Dynamic Worker Allocation**: Automatically determine the optimal number of parallel workers\n",
        "5. **Resource Management**: Optimize CPU core utilization for parallel runs\n",
        "6. **Results Comparison**: Analyze and visualize execution performance\n",
        "\n",
        "Let's begin by importing the necessary libraries and setting up our environment."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Package Installation and Environment Setup\n",
        "Uncomment and run package installation commands if needed"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Install ras-commander from pip (uncomment to install if needed)\n",
        "#!pip install ras-commander\n",
        "# This installs ras-commander and all dependencies"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Import all required modules\n",
        "\n",
        "# Import all ras-commander modules\n",
        "from ras_commander import *\n",
        "\n",
        "# Import the required libraries for this notebook\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from IPython import display\n",
        "from pathlib import Path\n",
        "import matplotlib.pyplot as plt\n",
        "import psutil  # For getting system CPU info\n",
        "from concurrent.futures import ThreadPoolExecutor, as_completed\n",
        "import time\n",
        "import subprocess\n",
        "import sys\n",
        "import os\n",
        "import shutil\n",
        "import math  # Import math to avoid NameError in get_optimal_worker_count function"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Setting Up Our Working Environment\n",
        "\n",
        "Let's set up our working directory and check the system resources available for parallel execution. This will help us make informed decisions about how many workers to use.\n",
        "\n",
        "For this notebook we will be using the \"Muncie\" HEC Example Project"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:45:31 - ras_commander.RasExamples - INFO - Found zip file: d:\\GitHub\\ras-commander\\examples\\Example_Projects_6_6.zip\n",
            "2025-04-09 03:45:31 - ras_commander.RasExamples - INFO - Loading project data from CSV...\n",
            "2025-04-09 03:45:31 - ras_commander.RasExamples - INFO - Loaded 68 projects from CSV.\n",
            "2025-04-09 03:45:31 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
            "2025-04-09 03:45:31 - ras_commander.RasExamples - INFO - Extracting project 'Muncie'\n",
            "2025-04-09 03:45:31 - ras_commander.RasExamples - INFO - Project 'Muncie' already exists. Deleting existing folder...\n",
            "2025-04-09 03:45:31 - ras_commander.RasExamples - INFO - Existing folder for project 'Muncie' has been deleted.\n",
            "2025-04-09 03:45:32 - ras_commander.RasExamples - INFO - Successfully extracted project 'Muncie' to d:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Extracted project to: d:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie\n",
            "Bald Eagle Creek project exists: True\n",
            "System Resources:\n",
            "- 2 physical CPU cores (4 logical cores with hyper-threading)\n",
            "- 7.9 GB total memory (4.7 GB available)\n",
            "\n",
            "For parallel HEC-RAS execution:\n",
            "- With 2 cores per worker: Can use up to 1 parallel workers\n",
            "- With 4 cores per worker: Can use up to 1 parallel workers\n",
            "\n",
            "Each HEC-RAS instance typically requires 2-4 GB of RAM. Based on your available memory,\n",
            "you could reasonably run 1 instances simultaneously.\n"
          ]
        }
      ],
      "source": [
        "# Extract the Muncie example project\n",
        "# The extract_project method downloads the project from GitHub if not already present,\n",
        "# and extracts it to the example_projects folder\n",
        "muncie_path = RasExamples.extract_project(\"Muncie\")\n",
        "print(f\"Extracted project to: {muncie_path}\")  \n",
        "\n",
        "# Verify the path exists\n",
        "print(f\"Bald Eagle Creek project exists: {muncie_path.exists()}\")\n",
        "\n",
        "\n",
        "# Create compute folders\n",
        "compute_folder = muncie_path.parent / \"compute_test_parallel\"\n",
        "specific_compute_folder = muncie_path.parent / \"compute_test_parallel_specific\"\n",
        "dynamic_compute_folder = muncie_path.parent / \"compute_test_parallel_dynamic\"\n",
        "\n",
        "# Check system resources for parallel execution\n",
        "cpu_count = psutil.cpu_count(logical=True)  # Logical cores (including hyper-threading)\n",
        "physical_cores = psutil.cpu_count(logical=False)  # Physical cores only\n",
        "memory_gb = psutil.virtual_memory().total / (1024**3)  # Total RAM in GB\n",
        "available_memory_gb = psutil.virtual_memory().available / (1024**3)  # Available RAM in GB\n",
        "\n",
        "print(f\"System Resources:\")\n",
        "print(f\"- {physical_cores} physical CPU cores ({cpu_count} logical cores with hyper-threading)\")\n",
        "print(f\"- {memory_gb:.1f} GB total memory ({available_memory_gb:.1f} GB available)\")\n",
        "\n",
        "# Functions to help with resource management\n",
        "def get_optimal_worker_count(cores_per_worker=2):\n",
        "    \"\"\"Calculate the optimal number of workers based on available physical cores.\"\"\"\n",
        "    optimal_workers = math.floor(physical_cores / cores_per_worker)\n",
        "    return max(1, optimal_workers)  # Ensure at least 1 worker\n",
        "\n",
        "print(f\"\\nFor parallel HEC-RAS execution:\")\n",
        "print(f\"- With 2 cores per worker: Can use up to {get_optimal_worker_count(2)} parallel workers\")\n",
        "print(f\"- With 4 cores per worker: Can use up to {get_optimal_worker_count(4)} parallel workers\")\n",
        "print(f\"\\nEach HEC-RAS instance typically requires 2-4 GB of RAM. Based on your available memory,\")\n",
        "print(f\"you could reasonably run {math.floor(available_memory_gb / 3)} instances simultaneously.\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Understanding Parallel Execution in HEC-RAS\n",
        "\n",
        "HEC-RAS simulations can be computationally intensive, especially for large models or long simulation periods. Parallel execution allows you to run multiple plans simultaneously, making better use of your computer's processing power.\n",
        "\n",
        "### Key Concepts in Parallel Execution\n",
        "\n",
        "1. **Workers**: Each worker is a separate process that can execute a HEC-RAS plan. The `max_workers` parameter determines how many plans can be executed simultaneously.\n",
        "\n",
        "2. **Cores per Worker**: Each worker (HEC-RAS instance) can utilize multiple CPU cores. The `num_cores` parameter sets how many cores each worker uses.\n",
        "\n",
        "3. **Resource Balancing**: Effective parallel execution requires balancing the number of workers with the cores per worker. Too many workers or too many cores per worker can lead to resource contention and slower overall performance.\n",
        "\n",
        "4. **Worker Folders**: Each worker gets its own folder with a copy of the project, allowing for isolated execution.\n",
        "\n",
        "### Parallel vs. Sequential Execution\n",
        "\n",
        "- **Parallel**: Multiple plans run simultaneously (good for independent plans, faster overall completion)\n",
        "- **Sequential**: Plans run one after another (good for dependent plans, consistent resource usage)\n",
        "\n",
        "### Optimal Configuration\n",
        "\n",
        "The optimal configuration depends on your hardware and the specific plans you're running:\n",
        "\n",
        "- For most models, 2-4 cores per worker provides good performance\n",
        "- Set `max_workers` based on available physical cores: `max_workers = floor(physical_cores / cores_per_worker)`\n",
        "- Ensure you have enough memory: each worker typically needs 2-4 GB of RAM\n",
        "\n",
        "Now, let's download and extract our example project."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Downloading and Extracting Example HEC-RAS Project\n",
        "\n",
        "Let's use the `RasExamples` class to download and extract the \"Balde Eagle Creek\" example project."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 1: Project Initialization\n",
        "\n",
        "Let's initialize the HEC-RAS project using the `init_ras_project()` function. We'll store the initialized object in a variable to use later, rather than relying on the global `ras` object. This approach is more suitable for working with multiple projects or compute folders."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:45:32 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-09 03:45:32 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie\\Muncie.rasmap\n",
            "2025-04-09 03:45:32 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Muncie\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Initialized source project: Muncie\n",
            "\n",
            "Available plans in the project:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>UNET D2 SolverType</th>\\n', '      <th>UNET D2 Name</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>01</td>\\n', '      <td>01</td>\\n', '      <td>Unsteady Multi  9-SA run</td>\\n', '      <td>5.00</td>\\n', '      <td>9-SAs</td>\\n', '      <td>02JAN1900,0000,02JAN1900,2400</td>\\n', '      <td>15SEC</td>\\n', '      <td>5MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>03</td>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>Unsteady Run with 2D 50ft Grid</td>\\n', '      <td>5.10</td>\\n', '      <td>2D 50ft Grid</td>\\n', '      <td>02JAN1900,0000,02JAN1900,2400</td>\\n', '      <td>10SEC</td>\\n', '      <td>5MIN</td>\\n', '      <td>-1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>Pardiso (Direct)</td>\\n', '      <td>2D Interior Area</td>\\n', '      <td>None</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>04</td>\\n', '      <td>01</td>\\n', '      <td>04</td>\\n', '      <td>Unsteady Run with 2D 50ft User n Value R</td>\\n', '      <td>5.10</td>\\n', '      <td>50ft User n Regions</td>\\n', '      <td>02JAN1900,0000,02JAN1900,2400</td>\\n', '      <td>10SEC</td>\\n', '      <td>5MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>Pardiso (Direct)</td>\\n', '      <td>2D Interior Area</td>\\n', '      <td>None</td>\\n', '      <td>04</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  plan_number unsteady_number geometry_number  \\\n",
              "0          01              01              01   \n",
              "1          03              01              02   \n",
              "2          04              01              04   \n",
              "\n",
              "                                 Plan Title Program Version  \\\n",
              "0                  Unsteady Multi  9-SA run            5.00   \n",
              "1            Unsteady Run with 2D 50ft Grid            5.10   \n",
              "2  Unsteady Run with 2D 50ft User n Value R            5.10   \n",
              "\n",
              "      Short Identifier                Simulation Date Computation Interval  \\\n",
              "0                9-SAs  02JAN1900,0000,02JAN1900,2400                15SEC   \n",
              "1         2D 50ft Grid  02JAN1900,0000,02JAN1900,2400                10SEC   \n",
              "2  50ft User n Regions  02JAN1900,0000,02JAN1900,2400                10SEC   \n",
              "\n",
              "  Mapping Interval Run HTab  ... DSS File Friction Slope Method  \\\n",
              "0             5MIN        1  ...      dss                     1   \n",
              "1             5MIN       -1  ...      dss                     1   \n",
              "2             5MIN        1  ...      dss                     1   \n",
              "\n",
              "  UNET D2 SolverType      UNET D2 Name HDF_Results_Path Geom File  \\\n",
              "0                NaN               NaN             None        01   \n",
              "1   Pardiso (Direct)  2D Interior Area             None        02   \n",
              "2   Pardiso (Direct)  2D Interior Area             None        04   \n",
              "\n",
              "                                           Geom Path  Flow File  \\\n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...         01   \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...         01   \n",
              "2  d:\\GitHub\\ras-commander\\examples\\example_proje...         01   \n",
              "\n",
              "                                           Flow Path  \\\n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "2  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "\n",
              "                                           full_path  \n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "2  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "\n",
              "[3 rows x 29 columns]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Found 3 plans in the project\n"
          ]
        }
      ],
      "source": [
        "# Initialize the source project\n",
        "source_project = init_ras_project(muncie_path, \"6.6\")\n",
        "print(f\"Initialized source project: {source_project.project_name}\")\n",
        "\n",
        "# Display the current plan files in the project\n",
        "print(\"\\nAvailable plans in the project:\")\n",
        "display.display(source_project.plan_df)\n",
        "\n",
        "# Check how many plans we have\n",
        "plan_count = len(source_project.plan_df)\n",
        "print(f\"Found {plan_count} plans in the project\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Understanding the RasCmdr.compute_parallel Method\n",
        "\n",
        "Before we start executing plans in parallel, let's understand the `compute_parallel()` method from the `RasCmdr` class.\n",
        "\n",
        "### Key Parameters\n",
        "\n",
        "- `plan_number` (Union[str, List[str], None]): Plan number(s) to compute. If None, all plans are computed.\n",
        "- `max_workers` (int): Maximum number of parallel workers (default: 2).\n",
        "- `num_cores` (int): Number of cores to use per plan computation (default: 2).\n",
        "- `clear_geompre` (bool): Whether to clear geometry preprocessor files (default: False).\n",
        "- `ras_object` (Optional[RasPrj]): Specific RAS object to use. If None, uses global ras instance.\n",
        "- `dest_folder` (Union[str, Path, None]): Destination folder for computed results.\n",
        "- `overwrite_dest` (bool): Whether to overwrite existing destination folder (default: False).\n",
        "\n",
        "### Return Value\n",
        "- `Dict[str, bool]`: Dictionary of plan numbers and their execution success status.\n",
        "\n",
        "### Key Concepts\n",
        "\n",
        "1. **Worker Assignment**: Plans are assigned to workers in a round-robin fashion. For example, with 3 workers and 5 plans, workers would be assigned as follows: Worker 1: Plans 1 & 4, Worker 2: Plans 2 & 5, Worker 3: Plan 3.\n",
        "\n",
        "2. **Worker Folders**: Each worker gets its own folder (a subdirectory of the destination folder) for isolated execution.\n",
        "\n",
        "3. **Result Consolidation**: After all plans are executed, results are consolidated into the destination folder.\n",
        "\n",
        "4. **Resource Management**: Each worker can use multiple cores as specified by `num_cores`.\n",
        "\n",
        "Now, let's see how this works in practice."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 2: Parallel Execution of All Plans\n",
        "\n",
        "Let's execute all plans in the project in parallel. We'll use 3 workers, with 2 cores per worker. This approach is good when you have multiple plans that are independent of each other and you want to complete them as quickly as possible."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:45:32 - ras_commander.RasCmdr - INFO - Destination folder 'd:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel' exists. Overwriting as per overwrite_dest=True.\n",
            "2025-04-09 03:45:32 - ras_commander.RasCmdr - INFO - Copied project folder to destination: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel\n",
            "2025-04-09 03:45:32 - ras_commander.RasCmdr - INFO - Adjusted max_workers to 3 based on the number of plans: 3\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Executing all plans in parallel...\n",
            "This may take several minutes...\n",
            "Using 4 parallel workers, each with 1 cores\n",
            "Destination folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:45:32 - ras_commander.RasCmdr - INFO - Created worker folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel [Worker 1]\n",
            "2025-04-09 03:45:32 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel [Worker 1]\\Muncie.rasmap\n",
            "2025-04-09 03:45:32 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel [Worker 1]\\Muncie.rasmap\n",
            "2025-04-09 03:45:32 - ras_commander.RasPrj - INFO - Global 'ras' object also updated to match the new project.\n",
            "2025-04-09 03:45:32 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel [Worker 1]\n",
            "2025-04-09 03:45:32 - ras_commander.RasCmdr - INFO - Created worker folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel [Worker 2]\n",
            "2025-04-09 03:45:32 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel [Worker 2]\\Muncie.rasmap\n",
            "2025-04-09 03:45:32 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel [Worker 2]\\Muncie.rasmap\n",
            "2025-04-09 03:45:32 - ras_commander.RasPrj - INFO - Global 'ras' object also updated to match the new project.\n",
            "2025-04-09 03:45:32 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel [Worker 2]\n",
            "2025-04-09 03:45:32 - ras_commander.RasCmdr - INFO - Created worker folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel [Worker 3]\n",
            "2025-04-09 03:45:32 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel [Worker 3]\\Muncie.rasmap\n",
            "2025-04-09 03:45:32 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel [Worker 3]\\Muncie.rasmap\n",
            "2025-04-09 03:45:32 - ras_commander.RasPrj - INFO - Global 'ras' object also updated to match the new project.\n",
            "2025-04-09 03:45:32 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel [Worker 3]\n",
            "2025-04-09 03:45:32 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel [Worker 1]\n",
            "2025-04-09 03:45:32 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel [Worker 2]\n",
            "2025-04-09 03:45:32 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel [Worker 3]\n",
            "2025-04-09 03:45:32 - ras_commander.RasUtils - INFO - Using provided plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel [Worker 1]\\Muncie.p01\n",
            "2025-04-09 03:45:32 - ras_commander.RasUtils - INFO - Using provided plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel [Worker 2]\\Muncie.p03\n",
            "2025-04-09 03:45:32 - ras_commander.RasUtils - INFO - Using provided plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel [Worker 3]\\Muncie.p04\n",
            "2025-04-09 03:45:32 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel [Worker 1]\\Muncie.p01\n",
            "2025-04-09 03:45:32 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel [Worker 2]\\Muncie.p03\n",
            "2025-04-09 03:45:32 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel [Worker 3]\\Muncie.p04\n",
            "2025-04-09 03:45:33 - ras_commander.RasCmdr - INFO - Set number of cores to 1 for plan: 01\n",
            "2025-04-09 03:45:33 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-09 03:45:33 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel [Worker 1]\\Muncie.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel [Worker 1]\\Muncie.p01\"\n",
            "2025-04-09 03:45:33 - ras_commander.RasCmdr - INFO - Set number of cores to 1 for plan: 03\n",
            "2025-04-09 03:45:33 - ras_commander.RasCmdr - INFO - Set number of cores to 1 for plan: 04\n",
            "2025-04-09 03:45:33 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-09 03:45:33 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-09 03:45:33 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel [Worker 2]\\Muncie.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel [Worker 2]\\Muncie.p03\"\n",
            "2025-04-09 03:45:33 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel [Worker 3]\\Muncie.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel [Worker 3]\\Muncie.p04\"\n",
            "2025-04-09 03:46:17 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 01\n",
            "2025-04-09 03:46:17 - ras_commander.RasCmdr - INFO - Total run time for plan 01: 44.15 seconds\n",
            "2025-04-09 03:46:17 - ras_commander.RasCmdr - INFO - Plan 01 executed in worker 1: Successful\n",
            "2025-04-09 03:47:23 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 03\n",
            "2025-04-09 03:47:23 - ras_commander.RasCmdr - INFO - Total run time for plan 03: 110.22 seconds\n",
            "2025-04-09 03:47:23 - ras_commander.RasCmdr - INFO - Plan 03 executed in worker 2: Successful\n",
            "2025-04-09 03:47:25 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 04\n",
            "2025-04-09 03:47:25 - ras_commander.RasCmdr - INFO - Total run time for plan 04: 112.44 seconds\n",
            "2025-04-09 03:47:25 - ras_commander.RasCmdr - INFO - Plan 04 executed in worker 3: Successful\n",
            "2025-04-09 03:47:25 - ras_commander.RasCmdr - INFO - Final destination for computed results: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel\n",
            "2025-04-09 03:47:32 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel\\Muncie.rasmap\n",
            "2025-04-09 03:47:32 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel\\Muncie.rasmap\n",
            "2025-04-09 03:47:32 - ras_commander.RasPrj - INFO - Global 'ras' object also updated to match the new project.\n",
            "2025-04-09 03:47:32 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel\n",
            "2025-04-09 03:47:32 - ras_commander.RasCmdr - INFO - \n",
            "Execution Results:\n",
            "2025-04-09 03:47:32 - ras_commander.RasCmdr - INFO - Plan 01: Successful\n",
            "2025-04-09 03:47:32 - ras_commander.RasCmdr - INFO - Plan 03: Successful\n",
            "2025-04-09 03:47:32 - ras_commander.RasCmdr - INFO - Plan 04: Successful\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Parallel execution of all plans completed in 120.32 seconds\n",
            "\n",
            "Execution Results:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Plan</th>\\n', '      <th>Success</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>True</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>03</td>\\n', '      <td>True</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>04</td>\\n', '      <td>True</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  Plan  Success\n",
              "0   01     True\n",
              "1   03     True\n",
              "2   04     True"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "print(\"Executing all plans in parallel...\")\n",
        "print(\"This may take several minutes...\")\n",
        "\n",
        "# Create compute folder if it doesn't exist\n",
        "compute_folder.mkdir(parents=True, exist_ok=True)\n",
        "\n",
        "# Define the parameters for parallel execution\n",
        "max_workers = 4\n",
        "cores_per_worker = 1\n",
        "\n",
        "print(f\"Using {max_workers} parallel workers, each with {cores_per_worker} cores\")\n",
        "print(f\"Destination folder: {compute_folder}\")\n",
        "\n",
        "# Record start time for performance measurement\n",
        "start_time = time.time()\n",
        "\n",
        "# Execute all plans in parallel\n",
        "results_all = RasCmdr.compute_parallel(\n",
        "    max_workers=max_workers,\n",
        "    num_cores=cores_per_worker,\n",
        "    dest_folder=compute_folder,\n",
        "    overwrite_dest=True,\n",
        "    ras_object=source_project\n",
        ")\n",
        "\n",
        "# Record end time and calculate duration\n",
        "end_time = time.time()\n",
        "total_duration = end_time - start_time\n",
        "\n",
        "print(f\"Parallel execution of all plans completed in {total_duration:.2f} seconds\")\n",
        "\n",
        "# Create a DataFrame from the execution results for better visualization\n",
        "results_df = pd.DataFrame([\n",
        "    {\"Plan\": plan, \"Success\": success}\n",
        "    for plan, success in results_all.items()\n",
        "])\n",
        "\n",
        "# Sort by plan number\n",
        "results_df = results_df.sort_values(\"Plan\")\n",
        "\n",
        "# Display the results\n",
        "print(\"\\nExecution Results:\")\n",
        "display.display(results_df)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 3: Examining the Parallel Execution Results\n",
        "\n",
        "Let's initialize a RAS project in the compute folder and examine the results of the parallel execution. This will help us understand what happened during the process."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:47:32 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel\\Muncie.rasmap\n",
            "2025-04-09 03:47:32 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel\\Muncie.rasmap\n",
            "2025-04-09 03:47:32 - ras_commander.RasPrj - INFO - Global 'ras' object also updated to match the new project.\n",
            "2025-04-09 03:47:32 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Initialized compute project: Muncie\n",
            "\n",
            "Plans in the compute folder:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>UNET D2 SolverType</th>\\n', '      <th>UNET D2 Name</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>01</td>\\n', '      <td>01</td>\\n', '      <td>Unsteady Multi  9-SA run</td>\\n', '      <td>5.00</td>\\n', '      <td>9-SAs</td>\\n', '      <td>02JAN1900,0000,02JAN1900,2400</td>\\n', '      <td>15SEC</td>\\n', '      <td>5MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>03</td>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>Unsteady Run with 2D 50ft Grid</td>\\n', '      <td>5.10</td>\\n', '      <td>2D 50ft Grid</td>\\n', '      <td>02JAN1900,0000,02JAN1900,2400</td>\\n', '      <td>10SEC</td>\\n', '      <td>5MIN</td>\\n', '      <td>-1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>Pardiso (Direct)</td>\\n', '      <td>2D Interior Area</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>04</td>\\n', '      <td>01</td>\\n', '      <td>04</td>\\n', '      <td>Unsteady Run with 2D 50ft User n Value R</td>\\n', '      <td>5.10</td>\\n', '      <td>50ft User n Regions</td>\\n', '      <td>02JAN1900,0000,02JAN1900,2400</td>\\n', '      <td>10SEC</td>\\n', '      <td>5MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>Pardiso (Direct)</td>\\n', '      <td>2D Interior Area</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>04</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  plan_number unsteady_number geometry_number  \\\n",
              "0          01              01              01   \n",
              "1          03              01              02   \n",
              "2          04              01              04   \n",
              "\n",
              "                                 Plan Title Program Version  \\\n",
              "0                  Unsteady Multi  9-SA run            5.00   \n",
              "1            Unsteady Run with 2D 50ft Grid            5.10   \n",
              "2  Unsteady Run with 2D 50ft User n Value R            5.10   \n",
              "\n",
              "      Short Identifier                Simulation Date Computation Interval  \\\n",
              "0                9-SAs  02JAN1900,0000,02JAN1900,2400                15SEC   \n",
              "1         2D 50ft Grid  02JAN1900,0000,02JAN1900,2400                10SEC   \n",
              "2  50ft User n Regions  02JAN1900,0000,02JAN1900,2400                10SEC   \n",
              "\n",
              "  Mapping Interval Run HTab  ... DSS File Friction Slope Method  \\\n",
              "0             5MIN        1  ...      dss                     1   \n",
              "1             5MIN       -1  ...      dss                     1   \n",
              "2             5MIN        1  ...      dss                     1   \n",
              "\n",
              "  UNET D2 SolverType      UNET D2 Name  \\\n",
              "0                NaN               NaN   \n",
              "1   Pardiso (Direct)  2D Interior Area   \n",
              "2   Pardiso (Direct)  2D Interior Area   \n",
              "\n",
              "                                    HDF_Results_Path Geom File  \\\n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...        01   \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...        02   \n",
              "2  d:\\GitHub\\ras-commander\\examples\\example_proje...        04   \n",
              "\n",
              "                                           Geom Path  Flow File  \\\n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...         01   \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...         01   \n",
              "2  d:\\GitHub\\ras-commander\\examples\\example_proje...         01   \n",
              "\n",
              "                                           Flow Path  \\\n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "2  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "\n",
              "                                           full_path  \n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "2  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "\n",
              "[3 rows x 29 columns]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Found 3 plans with results:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>HDF_Results_Path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>03</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>04</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  plan_number                                   HDF_Results_Path\n",
              "0          01  d:\\GitHub\\ras-commander\\examples\\example_proje...\n",
              "1          03  d:\\GitHub\\ras-commander\\examples\\example_proje...\n",
              "2          04  d:\\GitHub\\ras-commander\\examples\\example_proje..."
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "No worker folders remain in the compute folder (they were removed during results consolidation)\n",
            "\n",
            "Found 7 HDF files in the compute folder:\n",
            "  Muncie.g01.hdf: 0.2 MB\n",
            "  Muncie.g02.hdf: 0.5 MB\n",
            "  Muncie.g04.hdf: 3.0 MB\n",
            "  Muncie.p01.hdf: 3.8 MB\n",
            "  Muncie.p03.hdf: 15.3 MB\n",
            "  Muncie.p04.hdf: 17.9 MB\n",
            "  Muncie.u01.hdf: 0.0 MB\n"
          ]
        }
      ],
      "source": [
        "# Initialize a RAS project in the compute folder\n",
        "compute_project = RasPrj()\n",
        "init_ras_project(compute_folder, \"6.6\", ras_object=compute_project)\n",
        "print(f\"Initialized compute project: {compute_project.project_name}\")\n",
        "\n",
        "# Display the plan files in the compute folder\n",
        "print(\"\\nPlans in the compute folder:\")\n",
        "display.display(compute_project.plan_df)\n",
        "\n",
        "# Check which plans have results\n",
        "plans_with_results = compute_project.plan_df[compute_project.plan_df['HDF_Results_Path'].notna()]\n",
        "print(f\"\\nFound {len(plans_with_results)} plans with results:\")\n",
        "display.display(plans_with_results[['plan_number', 'HDF_Results_Path']])\n",
        "\n",
        "# List the worker folders (they should have been removed during results consolidation)\n",
        "worker_folders = list(compute_folder.glob(\"*Worker*\"))\n",
        "if worker_folders:\n",
        "    print(f\"\\nFound {len(worker_folders)} worker folders:\")\n",
        "    for folder in worker_folders:\n",
        "        print(f\"  {folder.name}\")\n",
        "else:\n",
        "    print(\"\\nNo worker folders remain in the compute folder (they were removed during results consolidation)\")\n",
        "\n",
        "# Check for HDF result files\n",
        "hdf_files = list(compute_folder.glob(\"*.hdf\"))\n",
        "hdf_files.sort()\n",
        "\n",
        "print(f\"\\nFound {len(hdf_files)} HDF files in the compute folder:\")\n",
        "for file in hdf_files:\n",
        "    file_size = file.stat().st_size / (1024 * 1024)  # Size in MB\n",
        "    print(f\"  {file.name}: {file_size:.1f} MB\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Additional Examples: "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Parallel Execution of Specific Plans\n",
        "\n",
        "Now, let's execute only specific plans in the project in parallel. This approach is useful when you only want to run a subset of the available plans, perhaps for testing or comparison purposes."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:47:32 - ras_commander.RasCmdr - INFO - Destination folder 'd:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific' exists. Overwriting as per overwrite_dest=True.\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Executing specific plans in parallel...\n",
            "This may take several minutes...\n",
            "Selected plans: 01, 03\n",
            "Using 2 parallel workers, each with 2 cores\n",
            "Destination folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:47:32 - ras_commander.RasCmdr - INFO - Copied project folder to destination: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific\n",
            "2025-04-09 03:47:32 - ras_commander.RasCmdr - INFO - Filtered plans to execute: ['01', '03']\n",
            "2025-04-09 03:47:32 - ras_commander.RasCmdr - INFO - Adjusted max_workers to 2 based on the number of plans: 2\n",
            "2025-04-09 03:47:33 - ras_commander.RasCmdr - INFO - Created worker folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific [Worker 1]\n",
            "2025-04-09 03:47:33 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific [Worker 1]\\Muncie.rasmap\n",
            "2025-04-09 03:47:33 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific [Worker 1]\\Muncie.rasmap\n",
            "2025-04-09 03:47:33 - ras_commander.RasPrj - INFO - Global 'ras' object also updated to match the new project.\n",
            "2025-04-09 03:47:33 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific [Worker 1]\n",
            "2025-04-09 03:47:33 - ras_commander.RasCmdr - INFO - Created worker folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific [Worker 2]\n",
            "2025-04-09 03:47:33 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific [Worker 2]\\Muncie.rasmap\n",
            "2025-04-09 03:47:33 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific [Worker 2]\\Muncie.rasmap\n",
            "2025-04-09 03:47:33 - ras_commander.RasPrj - INFO - Global 'ras' object also updated to match the new project.\n",
            "2025-04-09 03:47:33 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific [Worker 2]\n",
            "2025-04-09 03:47:33 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific [Worker 1]\n",
            "2025-04-09 03:47:33 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific [Worker 2]\n",
            "2025-04-09 03:47:33 - ras_commander.RasUtils - INFO - Using provided plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific [Worker 2]\\Muncie.p03\n",
            "2025-04-09 03:47:33 - ras_commander.RasUtils - INFO - Using provided plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific [Worker 1]\\Muncie.p01\n",
            "2025-04-09 03:47:33 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific [Worker 1]\\Muncie.p01\n",
            "2025-04-09 03:47:33 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific [Worker 2]\\Muncie.p03\n",
            "2025-04-09 03:47:33 - ras_commander.RasCmdr - INFO - Set number of cores to 2 for plan: 01\n",
            "2025-04-09 03:47:33 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-09 03:47:33 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific [Worker 1]\\Muncie.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific [Worker 1]\\Muncie.p01\"\n",
            "2025-04-09 03:47:33 - ras_commander.RasCmdr - INFO - Set number of cores to 2 for plan: 03\n",
            "2025-04-09 03:47:33 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-09 03:47:33 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific [Worker 2]\\Muncie.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific [Worker 2]\\Muncie.p03\"\n",
            "2025-04-09 03:48:12 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 01\n",
            "2025-04-09 03:48:12 - ras_commander.RasCmdr - INFO - Total run time for plan 01: 38.72 seconds\n",
            "2025-04-09 03:48:12 - ras_commander.RasCmdr - INFO - Plan 01 executed in worker 1: Successful\n",
            "2025-04-09 03:48:45 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 03\n",
            "2025-04-09 03:48:45 - ras_commander.RasCmdr - INFO - Total run time for plan 03: 71.34 seconds\n",
            "2025-04-09 03:48:45 - ras_commander.RasCmdr - INFO - Plan 03 executed in worker 2: Successful\n",
            "2025-04-09 03:48:45 - ras_commander.RasCmdr - INFO - Final destination for computed results: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific\n",
            "2025-04-09 03:48:49 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific\\Muncie.rasmap\n",
            "2025-04-09 03:48:50 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific\\Muncie.rasmap\n",
            "2025-04-09 03:48:50 - ras_commander.RasPrj - INFO - Global 'ras' object also updated to match the new project.\n",
            "2025-04-09 03:48:50 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific\n",
            "2025-04-09 03:48:50 - ras_commander.RasCmdr - INFO - \n",
            "Execution Results:\n",
            "2025-04-09 03:48:50 - ras_commander.RasCmdr - INFO - Plan 01: Successful\n",
            "2025-04-09 03:48:50 - ras_commander.RasCmdr - INFO - Plan 03: Successful\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Parallel execution of specific plans completed in 77.17 seconds\n",
            "\n",
            "Execution Results:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Plan</th>\\n', '      <th>Success</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>True</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>03</td>\\n', '      <td>True</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  Plan  Success\n",
              "0   01     True\n",
              "1   03     True"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:48:50 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific\\Muncie.rasmap\n",
            "2025-04-09 03:48:50 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific\\Muncie.rasmap\n",
            "2025-04-09 03:48:50 - ras_commander.RasPrj - INFO - Global 'ras' object also updated to match the new project.\n",
            "2025-04-09 03:48:50 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_specific\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Initialized specific compute project: Muncie\n",
            "Found 3 plans with results:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>HDF_Results_Path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>03</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>04</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  plan_number                                   HDF_Results_Path\n",
              "0          01  d:\\GitHub\\ras-commander\\examples\\example_proje...\n",
              "1          03  d:\\GitHub\\ras-commander\\examples\\example_proje...\n",
              "2          04  d:\\GitHub\\ras-commander\\examples\\example_proje..."
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "print(\"Executing specific plans in parallel...\")\n",
        "print(\"This may take several minutes...\")\n",
        "\n",
        "# Create specific compute folder if it doesn't exist\n",
        "specific_compute_folder.mkdir(parents=True, exist_ok=True)\n",
        "\n",
        "# Define the plans to execute\n",
        "specific_plans = [\"01\", \"03\"]\n",
        "print(f\"Selected plans: {', '.join(specific_plans)}\")\n",
        "\n",
        "# Define the parameters for parallel execution\n",
        "max_workers = 2  # One for each plan\n",
        "cores_per_worker = 2\n",
        "\n",
        "print(f\"Using {max_workers} parallel workers, each with {cores_per_worker} cores\")\n",
        "print(f\"Destination folder: {specific_compute_folder}\")\n",
        "\n",
        "# Record start time for performance measurement\n",
        "start_time = time.time()\n",
        "\n",
        "# Execute specific plans in parallel\n",
        "results_specific = RasCmdr.compute_parallel(\n",
        "    plan_number=specific_plans,\n",
        "    max_workers=max_workers,\n",
        "    num_cores=cores_per_worker,\n",
        "    dest_folder=specific_compute_folder,\n",
        "    overwrite_dest=True,\n",
        "    ras_object=source_project\n",
        ")\n",
        "\n",
        "# Record end time and calculate duration\n",
        "end_time = time.time()\n",
        "specific_duration = end_time - start_time\n",
        "\n",
        "print(f\"Parallel execution of specific plans completed in {specific_duration:.2f} seconds\")\n",
        "\n",
        "# Create a DataFrame from the execution results for better visualization\n",
        "specific_results_df = pd.DataFrame([\n",
        "    {\"Plan\": plan, \"Success\": success}\n",
        "    for plan, success in results_specific.items()\n",
        "])\n",
        "\n",
        "# Sort by plan number\n",
        "specific_results_df = specific_results_df.sort_values(\"Plan\")\n",
        "\n",
        "# Display the results\n",
        "print(\"\\nExecution Results:\")\n",
        "display.display(specific_results_df)\n",
        "\n",
        "# Initialize a RAS project in the specific compute folder\n",
        "specific_compute_project = RasPrj()\n",
        "init_ras_project(specific_compute_folder, \"6.6\", ras_object=specific_compute_project)\n",
        "print(f\"\\nInitialized specific compute project: {specific_compute_project.project_name}\")\n",
        "\n",
        "# Check which plans have results\n",
        "specific_plans_with_results = specific_compute_project.plan_df[specific_compute_project.plan_df['HDF_Results_Path'].notna()]\n",
        "print(f\"Found {len(specific_plans_with_results)} plans with results:\")\n",
        "display.display(specific_plans_with_results[['plan_number', 'HDF_Results_Path']])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Parallel Execution with Max Workers Defined by Physical Cores (\"Dynamic Worker Allocation\") \n",
        "\n",
        "In this step, we'll determine the optimal number of workers based on the physical cores available on the system. This approach ensures that we make efficient use of the available hardware without overcommitting resources."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:48:50 - ras_commander.RasCmdr - INFO - Destination folder 'd:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_dynamic' exists. Overwriting as per overwrite_dest=True.\n",
            "2025-04-09 03:48:50 - ras_commander.RasCmdr - INFO - Copied project folder to destination: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_dynamic\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Executing plans with dynamic worker allocation...\n",
            "This may take several minutes...\n",
            "System has 2 physical cores\n",
            "With 4 cores per worker, optimal worker count is 1\n",
            "Destination folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_dynamic\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:48:50 - ras_commander.RasCmdr - INFO - Filtered plans to execute: ['01', '03']\n",
            "2025-04-09 03:48:50 - ras_commander.RasCmdr - INFO - Adjusted max_workers to 1 based on the number of plans: 2\n",
            "2025-04-09 03:48:50 - ras_commander.RasCmdr - INFO - Created worker folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_dynamic [Worker 1]\n",
            "2025-04-09 03:48:50 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_dynamic [Worker 1]\\Muncie.rasmap\n",
            "2025-04-09 03:48:50 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_dynamic [Worker 1]\\Muncie.rasmap\n",
            "2025-04-09 03:48:50 - ras_commander.RasPrj - INFO - Global 'ras' object also updated to match the new project.\n",
            "2025-04-09 03:48:50 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_dynamic [Worker 1]\n",
            "2025-04-09 03:48:50 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_dynamic [Worker 1]\n",
            "2025-04-09 03:48:50 - ras_commander.RasUtils - INFO - Using provided plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_dynamic [Worker 1]\\Muncie.p01\n",
            "2025-04-09 03:48:50 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_dynamic [Worker 1]\\Muncie.p01\n",
            "2025-04-09 03:48:50 - ras_commander.RasCmdr - INFO - Set number of cores to 4 for plan: 01\n",
            "2025-04-09 03:48:50 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-09 03:48:50 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_dynamic [Worker 1]\\Muncie.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_dynamic [Worker 1]\\Muncie.p01\"\n",
            "2025-04-09 03:49:16 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 01\n",
            "2025-04-09 03:49:16 - ras_commander.RasCmdr - INFO - Total run time for plan 01: 25.54 seconds\n",
            "2025-04-09 03:49:16 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_dynamic [Worker 1]\n",
            "2025-04-09 03:49:16 - ras_commander.RasCmdr - INFO - Plan 01 executed in worker 1: Successful\n",
            "2025-04-09 03:49:16 - ras_commander.RasUtils - INFO - Using provided plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_dynamic [Worker 1]\\Muncie.p03\n",
            "2025-04-09 03:49:16 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_dynamic [Worker 1]\\Muncie.p03\n",
            "2025-04-09 03:49:16 - ras_commander.RasCmdr - INFO - Set number of cores to 4 for plan: 03\n",
            "2025-04-09 03:49:16 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-09 03:49:16 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_dynamic [Worker 1]\\Muncie.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_dynamic [Worker 1]\\Muncie.p03\"\n",
            "2025-04-09 03:50:20 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 03\n",
            "2025-04-09 03:50:20 - ras_commander.RasCmdr - INFO - Total run time for plan 03: 64.24 seconds\n",
            "2025-04-09 03:50:20 - ras_commander.RasCmdr - INFO - Plan 03 executed in worker 1: Successful\n",
            "2025-04-09 03:50:20 - ras_commander.RasCmdr - INFO - Final destination for computed results: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_dynamic\n",
            "2025-04-09 03:50:22 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_dynamic\\Muncie.rasmap\n",
            "2025-04-09 03:50:22 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_dynamic\\Muncie.rasmap\n",
            "2025-04-09 03:50:22 - ras_commander.RasPrj - INFO - Global 'ras' object also updated to match the new project.\n",
            "2025-04-09 03:50:22 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_dynamic\n",
            "2025-04-09 03:50:22 - ras_commander.RasCmdr - INFO - \n",
            "Execution Results:\n",
            "2025-04-09 03:50:22 - ras_commander.RasCmdr - INFO - Plan 01: Successful\n",
            "2025-04-09 03:50:22 - ras_commander.RasCmdr - INFO - Plan 03: Successful\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Parallel execution with dynamic worker allocation completed in 92.64 seconds\n",
            "\n",
            "Execution Results:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Plan</th>\\n', '      <th>Success</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>True</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>03</td>\\n', '      <td>True</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  Plan  Success\n",
              "0   01     True\n",
              "1   03     True"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:50:22 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_dynamic\\Muncie.rasmap\n",
            "2025-04-09 03:50:22 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_dynamic\\Muncie.rasmap\n",
            "2025-04-09 03:50:22 - ras_commander.RasPrj - INFO - Global 'ras' object also updated to match the new project.\n",
            "2025-04-09 03:50:22 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\compute_test_parallel_dynamic\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Initialized dynamic compute project: Muncie\n",
            "Found 3 plans with results:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>HDF_Results_Path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>03</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>04</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  plan_number                                   HDF_Results_Path\n",
              "0          01  d:\\GitHub\\ras-commander\\examples\\example_proje...\n",
              "1          03  d:\\GitHub\\ras-commander\\examples\\example_proje...\n",
              "2          04  d:\\GitHub\\ras-commander\\examples\\example_proje..."
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "print(\"Executing plans with dynamic worker allocation...\")\n",
        "print(\"This may take several minutes...\")\n",
        "\n",
        "# Create dynamic compute folder if it doesn't exist\n",
        "dynamic_compute_folder.mkdir(parents=True, exist_ok=True)\n",
        "\n",
        "# Define the cores per worker\n",
        "cores_per_worker = 4\n",
        "# 2 cores per worker is the efficiency point for most CPU's, due to L2/L3 cache being shared by 2 cores in most x86 CPU's\n",
        "# 4-8 cores per worker is the maximum performance point for most CPU's, using more compute power to marginally lower runtime \n",
        "# when using parallel compute, 2 cores per worker is typically optimal as it is assumed you are maximizing throughput (efficency) over single-plan runtime (performance)\n",
        "\n",
        "# Calculate the optimal number of workers based on physical cores\n",
        "max_workers = get_optimal_worker_count(cores_per_worker)\n",
        "print(f\"System has {physical_cores} physical cores\")\n",
        "print(f\"With {cores_per_worker} cores per worker, optimal worker count is {max_workers}\")\n",
        "print(f\"Destination folder: {dynamic_compute_folder}\")\n",
        "\n",
        "# Record start time for performance measurement\n",
        "start_time = time.time()\n",
        "\n",
        "# Execute all plans with dynamic worker allocation\n",
        "results_dynamic = RasCmdr.compute_parallel(\n",
        "    plan_number=specific_plans,\n",
        "    max_workers=max_workers,\n",
        "    num_cores=cores_per_worker,\n",
        "    dest_folder=dynamic_compute_folder,\n",
        "    overwrite_dest=True,\n",
        "    ras_object=source_project\n",
        ")\n",
        "\n",
        "# Record end time and calculate duration\n",
        "end_time = time.time()\n",
        "dynamic_duration = end_time - start_time\n",
        "\n",
        "print(f\"Parallel execution with dynamic worker allocation completed in {dynamic_duration:.2f} seconds\")\n",
        "\n",
        "# Create a DataFrame from the execution results for better visualization\n",
        "dynamic_results_df = pd.DataFrame([\n",
        "    {\"Plan\": plan, \"Success\": success}\n",
        "    for plan, success in results_dynamic.items()\n",
        "])\n",
        "\n",
        "# Sort by plan number\n",
        "dynamic_results_df = dynamic_results_df.sort_values(\"Plan\")\n",
        "\n",
        "# Display the results\n",
        "print(\"\\nExecution Results:\")\n",
        "display.display(dynamic_results_df)\n",
        "\n",
        "# Initialize a RAS project in the dynamic compute folder\n",
        "dynamic_compute_project = RasPrj()\n",
        "init_ras_project(dynamic_compute_folder, \"6.6\", ras_object=dynamic_compute_project)\n",
        "print(f\"\\nInitialized dynamic compute project: {dynamic_compute_project.project_name}\")\n",
        "\n",
        "# Check which plans have results\n",
        "dynamic_plans_with_results = dynamic_compute_project.plan_df[dynamic_compute_project.plan_df['HDF_Results_Path'].notna()]\n",
        "print(f\"Found {len(dynamic_plans_with_results)} plans with results:\")\n",
        "display.display(dynamic_plans_with_results[['plan_number', 'HDF_Results_Path']])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Performance Comparison\n",
        "\n",
        "Let's compare the performance of the different parallel execution approaches we've tried. This will help us understand the impact of worker count and plan selection on execution time."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Figure size 1400x800 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Create a DataFrame for individual plan runtimes\n",
        "plan_data = []\n",
        "\n",
        "# Define the approaches with more descriptive labels including worker and core counts\n",
        "approach_labels = {\n",
        "    \"all_plans\": \"All Plans (2 workers \u00d7 2 cores = 4 cores total)\",\n",
        "    \"specific_plans\": \"Specific Plans (1 worker \u00d7 2 cores = 2 cores total)\",\n",
        "    \"dynamic_workers\": f\"Dynamic Workers (1 worker \u00d7 4 cores = 4 cores total)\"\n",
        "}\n",
        "\n",
        "# Extract runtimes from the log messages\n",
        "# For all plans approach\n",
        "plan_data.append({\"Approach\": approach_labels[\"all_plans\"], \"Plan\": \"01\", \"Runtime\": 35.72})\n",
        "plan_data.append({\"Approach\": approach_labels[\"all_plans\"], \"Plan\": \"03\", \"Runtime\": 82.70})\n",
        "# Omitting plan 04 as it's a 1D model\n",
        "\n",
        "# For specific plans approach (plans 01 and 03 were run)\n",
        "plan_data.append({\"Approach\": approach_labels[\"specific_plans\"], \"Plan\": \"01\", \"Runtime\": 29.10})\n",
        "plan_data.append({\"Approach\": approach_labels[\"specific_plans\"], \"Plan\": \"03\", \"Runtime\": 36.09})\n",
        "\n",
        "# For dynamic worker approach (plans 01 and 03 were run)\n",
        "plan_data.append({\"Approach\": approach_labels[\"dynamic_workers\"], \"Plan\": \"01\", \"Runtime\": 28.48})\n",
        "plan_data.append({\"Approach\": approach_labels[\"dynamic_workers\"], \"Plan\": \"03\", \"Runtime\": 49.43})\n",
        "\n",
        "# Create a DataFrame\n",
        "plan_runtime_df = pd.DataFrame(plan_data)\n",
        "\n",
        "# Create a grouped bar chart for plan runtimes\n",
        "plt.figure(figsize=(14, 8))\n",
        "\n",
        "# Get all unique plan numbers and ensure they're sorted\n",
        "plans = sorted(plan_runtime_df[\"Plan\"].unique())\n",
        "\n",
        "# Create x positions for the bars\n",
        "x = np.arange(len(plans))\n",
        "width = 0.25  # Width of the bars\n",
        "\n",
        "# Plot bars for each approach\n",
        "approaches = plan_runtime_df[\"Approach\"].unique()\n",
        "for i, approach in enumerate(approaches):\n",
        "    # Filter data for this approach\n",
        "    approach_data = plan_runtime_df[plan_runtime_df[\"Approach\"] == approach]\n",
        "    \n",
        "    # Initialize runtimes array with NaN values\n",
        "    runtimes = [np.nan] * len(plans)\n",
        "    \n",
        "    # Fill in runtimes where data exists\n",
        "    for j, plan in enumerate(plans):\n",
        "        plan_runtime = approach_data[approach_data[\"Plan\"] == plan][\"Runtime\"]\n",
        "        if not plan_runtime.empty:\n",
        "            runtimes[j] = plan_runtime.values[0]\n",
        "    \n",
        "    # Create bars for this approach (only where we have data)\n",
        "    valid_indices = [idx for idx, val in enumerate(runtimes) if not np.isnan(val)]\n",
        "    valid_plans = [plans[idx] for idx in valid_indices]\n",
        "    valid_runtimes = [runtimes[idx] for idx in valid_indices]\n",
        "    valid_positions = [x[idx] + (i - len(approaches)/2 + 0.5) * width for idx in valid_indices]\n",
        "    \n",
        "    # Plot the bars\n",
        "    bars = plt.bar(valid_positions, valid_runtimes, width, label=approach)\n",
        "    \n",
        "    # Add runtime labels on top of bars\n",
        "    for pos, runtime in zip(valid_positions, valid_runtimes):\n",
        "        plt.text(pos, runtime + 2, f\"{runtime:.1f}s\", ha='center', va='bottom')\n",
        "\n",
        "# Add labels, title, and custom x-axis tick labels\n",
        "plt.xlabel('Plan Number', fontsize=12)\n",
        "plt.ylabel('Runtime (seconds)', fontsize=12)\n",
        "plt.title('Runtime Comparison by Plan Number and Parallelization Approach', fontsize=14)\n",
        "plt.xticks(x, plans, fontsize=11)\n",
        "plt.legend(fontsize=10)\n",
        "plt.grid(axis='y', alpha=0.3)\n",
        "\n",
        "# Add note about omitting Plan 04\n",
        "plt.figtext(0.5, 0.01, \"\\nNote: Plan 04 (1D model) is omitted from this comparison\", \n",
        "            ha='center', fontsize=10, style='italic')\n",
        "\n",
        "# Ensure all plan numbers show on x-axis regardless of data availability\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Summary of Parallel Plan Execution\n",
        "\n",
        "In this notebook, we've explored how to execute HEC-RAS plans in parallel using the RAS Commander library. Here's a summary of the key techniques we've covered:\n",
        "\n",
        "1. **Basic Parallel Execution**: Using `RasCmdr.compute_parallel()` to run all plans in a project simultaneously\n",
        "2. **Selective Parallel Execution**: Running only specific plans in parallel\n",
        "3. **Dynamic Worker Allocation**: Determining the optimal number of workers based on available system resources\n",
        "4. **Performance Analysis**: Comparing execution times for different parallel configurations\n",
        "5. **Advanced Parallel Workflows**: Building complex workflows with parallel execution for sensitivity analysis\n",
        "\n",
        "### Key Functions Used\n",
        "\n",
        "- `RasCmdr.compute_parallel()`: Execute multiple plans in parallel\n",
        "- `RasPlan.clone_plan()`: Create a new plan based on an existing one\n",
        "- `RasPlan.update_plan_description()`: Update the description of a plan\n",
        "- `RasPlan.set_num_cores()`: Set the number of cores for a plan to use\n",
        "- `RasPlan.get_results_path()`: Get the path to the results file for a plan\n",
        "\n",
        "### Best Practices for Parallel Execution\n",
        "\n",
        "1. **Use Separate RAS Objects**: Create and use separate RAS objects for different projects or folders\n",
        "2. **Balance Workers and Cores**: Find the right balance between the number of workers and cores per worker\n",
        "3. **Consider Hardware Limits**: Be mindful of your system's physical cores and memory\n",
        "4. **Use Clean Compute Folders**: Use the `dest_folder` parameter to keep your project organized\n",
        "5. **Handle Overwrite Carefully**: Use `overwrite_dest=True` for repeatable workflows, but be cautious about losing results\n",
        "6. **Monitor Performance**: Track execution times and adjust your configuration for optimal performance\n",
        "7. **Match Workers to Plans**: For best results, use one worker per plan when running a small number of plans\n",
        "\n"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "rascmdr",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
}
==================================================

File: c:\GH\ras-commander\examples\09_plan_parameter_operations.ipynb
==================================================
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# RAS Commander: Plan Key Operations\n",
        "\n",
        "This notebook demonstrates how to perform key operations on HEC-RAS plan files using the RAS Commander library. Plan files in HEC-RAS (`.p*` files) control the simulation settings and parameters, making them essential for hydraulic modeling workflows.\n",
        "\n",
        "## Operations Covered\n",
        "\n",
        "1. **Project Initialization**: Set up a HEC-RAS project for automation\n",
        "2. **Plan Values**: Retrieve specific values from plan files\n",
        "3. **Run Flags**: Configure which components (geometry preprocessor, unsteady flow, etc.) will run\n",
        "4. **Plan Intervals**: Set computation and output time intervals\n",
        "5. **Plan Descriptions**: Read and update plan descriptions\n",
        "6. **Simulation Dates**: Modify simulation start and end dates\n",
        "\n",
        "These operations allow you to programmatically control and customize HEC-RAS simulations without opening the GUI, which is especially useful for batch processing, sensitivity analysis, and model calibration.\n",
        "\n",
        "Let's begin by importing the necessary libraries and setting up our environment."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Package Installation and Environment Setup\n",
        "Uncomment and run package installation commands if needed"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Install ras-commander from pip (uncomment to install if needed)\n",
        "#!pip install --upgrade ras-commander\n",
        "# This installs latest version of ras-commander and all dependencies"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Import all required modules\n",
        "\n",
        "# Import all ras-commander modules\n",
        "from ras_commander import *\n",
        "\n",
        "# Import the required libraries for this notebook\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from IPython import display\n",
        "from pathlib import Path\n",
        "import matplotlib.pyplot as plt\n",
        "import psutil  # For getting system CPU info\n",
        "from concurrent.futures import ThreadPoolExecutor, as_completed\n",
        "import time\n",
        "import subprocess\n",
        "import sys\n",
        "import os\n",
        "import shutil\n",
        "from datetime import datetime, timedelta"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:58:09 - ras_commander.RasExamples - INFO - Found zip file: d:\\GitHub\\ras-commander\\examples\\Example_Projects_6_6.zip\n",
            "2025-04-09 03:58:09 - ras_commander.RasExamples - INFO - Loading project data from CSV...\n",
            "2025-04-09 03:58:09 - ras_commander.RasExamples - INFO - Loaded 68 projects from CSV.\n",
            "2025-04-09 03:58:09 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
            "2025-04-09 03:58:09 - ras_commander.RasExamples - INFO - Extracting project 'Balde Eagle Creek'\n",
            "2025-04-09 03:58:09 - ras_commander.RasExamples - INFO - Project 'Balde Eagle Creek' already exists. Deleting existing folder...\n",
            "2025-04-09 03:58:09 - ras_commander.RasExamples - INFO - Existing folder for project 'Balde Eagle Creek' has been deleted.\n",
            "2025-04-09 03:58:09 - ras_commander.RasExamples - INFO - Successfully extracted project 'Balde Eagle Creek' to d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Extracted project to: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n",
            "Bald Eagle Creek project exists: True\n"
          ]
        }
      ],
      "source": [
        "# Extract the Bald Eagle Creek example project\n",
        "# The extract_project method downloads the project from GitHub if not already present,\n",
        "# and extracts it to the example_projects folder\n",
        "bald_eagle_path = RasExamples.extract_project(\"Balde Eagle Creek\")\n",
        "print(f\"Extracted project to: {bald_eagle_path}\")  \n",
        "\n",
        "\n",
        "# Verify the path exists\n",
        "print(f\"Bald Eagle Creek project exists: {bald_eagle_path.exists()}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Understanding Plan Files in HEC-RAS\n",
        "\n",
        "Before we dive into the operations, let's understand what HEC-RAS plan files are and why they're important:\n",
        "\n",
        "### What is a Plan File?\n",
        "\n",
        "A HEC-RAS plan file (`.p*`) is a configuration file that defines how a hydraulic simulation will run. It links together:\n",
        "\n",
        "1. **Geometry**: River channel and floodplain physical characteristics (`.g*` files)\n",
        "2. **Flow Data**: Inflow conditions, either steady (`.f*`) or unsteady (`.u*`)\n",
        "3. **Simulation Parameters**: Time steps, computational methods, and output settings\n",
        "\n",
        "### Key Components of Plan Files\n",
        "\n",
        "Plan files contain many parameters that control simulation behavior:\n",
        "\n",
        "- **Simulation Type**: Steady, unsteady, sediment transport, water quality\n",
        "- **Computation Intervals**: Time steps for calculations\n",
        "- **Output Intervals**: How frequently results are saved\n",
        "- **Run Flags**: Which modules to execute (preprocessor, postprocessor, etc.)\n",
        "- **Simulation Period**: Start and end dates for unsteady simulations\n",
        "- **Computation Methods**: Numerical schemes and solver settings\n",
        "- **Resource Allocation**: Number of CPU cores to use\n",
        "\n",
        "### Why Automate Plan Operations?\n",
        "\n",
        "Automating plan operations with RAS Commander allows you to:\n",
        "\n",
        "1. **Batch Processing**: Run multiple scenarios with different parameters\n",
        "2. **Sensitivity Analysis**: Systematically vary parameters to assess their impact\n",
        "3. **Calibration**: Adjust parameters to match observed data\n",
        "4. **Consistency**: Ensure standardized settings across multiple models\n",
        "5. **Documentation**: Programmatically track simulation configurations\n",
        "\n",
        "Now, let's download and extract an example project to work with."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:58:09 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
            "2025-04-09 03:58:09 - ras_commander.RasExamples - INFO - Extracting project 'Balde Eagle Creek'\n",
            "2025-04-09 03:58:09 - ras_commander.RasExamples - INFO - Project 'Balde Eagle Creek' already exists. Deleting existing folder...\n",
            "2025-04-09 03:58:09 - ras_commander.RasExamples - INFO - Existing folder for project 'Balde Eagle Creek' has been deleted.\n",
            "2025-04-09 03:58:09 - ras_commander.RasExamples - INFO - Successfully extracted project 'Balde Eagle Creek' to d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Extracted project to: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n",
            "Bald Eagle Creek project exists: True\n"
          ]
        }
      ],
      "source": [
        "# Create a RasExamples instance\n",
        "ras_examples = RasExamples()\n",
        "\n",
        "# Extract the Bald Eagle Creek example project\n",
        "extracted_paths = ras_examples.extract_project([\"Balde Eagle Creek\"])\n",
        "print(f\"Extracted project to: {extracted_paths}\")\n",
        "\n",
        "# Verify the path exists\n",
        "print(f\"Bald Eagle Creek project exists: {bald_eagle_path.exists()}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 1: Project Initialization\n",
        "\n",
        "The first step in any RAS Commander workflow is initializing the HEC-RAS project. This connects the Python environment to the HEC-RAS project files.\n",
        "\n",
        "The `init_ras_project()` function does the following:\n",
        "\n",
        "1. Locates the main project file (`.prj`)\n",
        "2. Reads all associated files (plans, geometries, flows)\n",
        "3. Creates dataframes containing project components\n",
        "4. Sets up the connection to the HEC-RAS executable\n",
        "\n",
        "Let's initialize our project:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:58:09 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-09 03:58:09 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.rasmap\n",
            "2025-04-09 03:58:09 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Initialized project: BaldEagle\n",
            "\n",
            "Project Overview:\n",
            "Project Folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n",
            "Project File: D:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.prj\n",
            "Number of Plan Files: 2\n",
            "Number of Geometry Files: 1\n",
            "Number of Flow Files: 2\n",
            "Number of Unsteady Files: 1\n"
          ]
        }
      ],
      "source": [
        "# Initialize the project (using the default global ras object)\n",
        "init_ras_project(bald_eagle_path, \"6.6\")\n",
        "print(f\"Initialized project: {ras.project_name}\")\n",
        "\n",
        "# Display basic project information\n",
        "print(\"\\nProject Overview:\")\n",
        "print(f\"Project Folder: {ras.project_folder}\")\n",
        "print(f\"Project File: {ras.prj_file}\")\n",
        "print(f\"Number of Plan Files: {len(ras.plan_df)}\")\n",
        "print(f\"Number of Geometry Files: {len(ras.geom_df)}\")\n",
        "print(f\"Number of Flow Files: {len(ras.flow_df)}\")\n",
        "print(f\"Number of Unsteady Files: {len(ras.unsteady_df)}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Let's also take a look at the plan files in this project:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Plan Files in Project:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>Run UNet</th>\\n', '      <th>Run Sediment</th>\\n', '      <th>Run PostProcess</th>\\n', '      <th>Run WQNet</th>\\n', '      <th>UNET Use Existing IB Tables</th>\\n', '      <th>UNET D1 Cores</th>\\n', '      <th>UNET D2 Cores</th>\\n', '      <th>PS Cores</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>01</td>\\n', '      <td>Unsteady with Bridges and Dam</td>\\n', '      <td>5.00</td>\\n', '      <td>UnsteadyFlow</td>\\n', '      <td>18FEB1999,0000,24FEB1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>1HOUR</td>\\n', '      <td>1</td>\\n', '      <td>1</td>\\n', '      <td>0</td>\\n', '      <td>1</td>\\n', '      <td>0</td>\\n', '      <td>-1</td>\\n', '      <td>0.0</td>\\n', '      <td>0.0</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>2</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>Steady Flow Run</td>\\n', '      <td>NaN</td>\\n', '      <td>SteadyRun</td>\\n', '      <td>02/18/1999,0000,02/24/1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>NaN</td>\\n', '      <td>1</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  plan_number unsteady_number geometry_number                     Plan Title  \\\\\\n', '0          01              02              01  Unsteady with Bridges and Dam   \\n', '1          02            None              01                Steady Flow Run   \\n', '\\n', '  Program Version Short Identifier                  Simulation Date  \\\\\\n', '0            5.00     UnsteadyFlow    18FEB1999,0000,24FEB1999,0500   \\n', '1             NaN        SteadyRun  02/18/1999,0000,02/24/1999,0500   \\n', '\\n', '  Computation Interval Mapping Interval Run HTab Run UNet Run Sediment  \\\\\\n', '0                 2MIN            1HOUR        1        1            0   \\n', '1                 2MIN              NaN        1        1          NaN   \\n', '\\n', '  Run PostProcess Run WQNet UNET Use Existing IB Tables  UNET D1 Cores  \\\\\\n', '0               1         0                          -1            0.0   \\n', '1               1       NaN                         NaN            NaN   \\n', '\\n', '   UNET D2 Cores PS Cores DSS File Friction Slope Method HDF_Results_Path  \\\\\\n', '0            0.0     None      dss                     2             None   \\n', '1            NaN     None      dss                     1             None   \\n', '\\n', '  Geom File                                          Geom Path Flow File  \\\\\\n', '0        01  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...        02   \\n', '1        01  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...        02   \\n', '\\n', '                                           Flow Path  \\\\\\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '1  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '\\n', '                                           full_path  \\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...  \\n', '1  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...  ']"
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Display the plan files\n",
        "print(\"Plan Files in Project:\")\n",
        "pd.set_option('display.max_columns', None)\n",
        "ras.plan_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "We'll work with Plan: 01\n"
          ]
        }
      ],
      "source": [
        "# Get the first plan number for our examples\n",
        "plan_number = ras.plan_df['plan_number'].iloc[0]\n",
        "print(f\"\\nWe'll work with Plan: {plan_number}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 3: Updating Run Flags\n",
        "\n",
        "Run flags in HEC-RAS control which components of the simulation are executed. The `RasPlan.update_run_flags()` method allows you to modify these flags programmatically.\n",
        "\n",
        "### Key Parameters\n",
        "\n",
        "- `plan_number_or_path` (str or Path): The plan number or full path to the plan file\n",
        "- `geometry_preprocessor` (bool, optional): Whether to run the geometry preprocessor\n",
        "- `unsteady_flow_simulation` (bool, optional): Whether to run the unsteady flow simulation\n",
        "- `run_sediment` (bool, optional): Whether to run sediment transport calculations\n",
        "- `post_processor` (bool, optional): Whether to run the post-processor\n",
        "- `floodplain_mapping` (bool, optional): Whether to run floodplain mapping\n",
        "- `rasect` (RasPrj, optional): The RAS project object\n",
        "\n",
        "### Common Run Flags\n",
        "\n",
        "1. **Geometry Preprocessor**: Computes hydraulic tables from geometry data\n",
        "   - `True`: Recompute tables (useful after geometry changes)\n",
        "   - `False`: Use existing tables (faster but may be outdated)\n",
        "\n",
        "2. **Unsteady Flow Simulation**: The main hydraulic calculations\n",
        "   - `True`: Run unsteady flow calculations\n",
        "   - `False`: Skip unsteady flow calculations\n",
        "\n",
        "3. **Sediment Transport**: Simulates erosion and deposition\n",
        "   - `True`: Calculate sediment transport\n",
        "   - `False`: Skip sediment transport\n",
        "\n",
        "4. **Post-Processor**: Calculates additional variables from results\n",
        "   - `True`: Run post-processing (recommended)\n",
        "   - `False`: Skip post-processing (faster but fewer outputs)\n",
        "\n",
        "5. **Floodplain Mapping**: Generates inundation maps\n",
        "   - `True`: Generate maps (requires terrain data)\n",
        "   - `False`: Skip mapping (faster)\n",
        "\n",
        "Let's update the run flags for our plan:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:58:09 - ras_commander.RasPlan - INFO - Successfully updated run flags in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Updating run flags for plan 01...\n",
            "Run flags updated successfully\n"
          ]
        }
      ],
      "source": [
        "# Update run flags for the plan\n",
        "print(f\"Updating run flags for plan {plan_number}...\")\n",
        "RasPlan.update_run_flags(\n",
        "    \"01\",\n",
        "    geometry_preprocessor=False,     # This may result in a popup if preprocessor files are not present\n",
        "    unsteady_flow_simulation=False,   # Run the main hydraulic calculations\n",
        "    run_sediment=False,              # Skip sediment transport calculations\n",
        "    post_processor=False,             # Run post-processing for additional outputs\n",
        "    floodplain_mapping=True,        # Skip floodplain mapping\n",
        ")\n",
        "print(\"Run flags updated successfully\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:58:09 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-09 03:58:10 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.rasmap\n",
            "2025-04-09 03:58:10 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Plan Files in Project:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>Run UNet</th>\\n', '      <th>Run Sediment</th>\\n', '      <th>Run PostProcess</th>\\n', '      <th>Run WQNet</th>\\n', '      <th>UNET Use Existing IB Tables</th>\\n', '      <th>UNET D1 Cores</th>\\n', '      <th>UNET D2 Cores</th>\\n', '      <th>PS Cores</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>01</td>\\n', '      <td>Unsteady with Bridges and Dam</td>\\n', '      <td>5.00</td>\\n', '      <td>UnsteadyFlow</td>\\n', '      <td>18FEB1999,0000,24FEB1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>1HOUR</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>-1</td>\\n', '      <td>0.0</td>\\n', '      <td>0.0</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>2</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>Steady Flow Run</td>\\n', '      <td>NaN</td>\\n', '      <td>SteadyRun</td>\\n', '      <td>02/18/1999,0000,02/24/1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>NaN</td>\\n', '      <td>1</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  plan_number unsteady_number geometry_number                     Plan Title  \\\\\\n', '0          01              02              01  Unsteady with Bridges and Dam   \\n', '1          02            None              01                Steady Flow Run   \\n', '\\n', '  Program Version Short Identifier                  Simulation Date  \\\\\\n', '0            5.00     UnsteadyFlow    18FEB1999,0000,24FEB1999,0500   \\n', '1             NaN        SteadyRun  02/18/1999,0000,02/24/1999,0500   \\n', '\\n', '  Computation Interval Mapping Interval Run HTab Run UNet Run Sediment  \\\\\\n', '0                 2MIN            1HOUR        0        0            0   \\n', '1                 2MIN              NaN        1        1          NaN   \\n', '\\n', '  Run PostProcess Run WQNet UNET Use Existing IB Tables  UNET D1 Cores  \\\\\\n', '0               0         0                          -1            0.0   \\n', '1               1       NaN                         NaN            NaN   \\n', '\\n', '   UNET D2 Cores PS Cores DSS File Friction Slope Method HDF_Results_Path  \\\\\\n', '0            0.0     None      dss                     2             None   \\n', '1            NaN     None      dss                     1             None   \\n', '\\n', '  Geom File                                          Geom Path Flow File  \\\\\\n', '0        01  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...        02   \\n', '1        01  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...        02   \\n', '\\n', '                                           Flow Path  \\\\\\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '1  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '\\n', '                                           full_path  \\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...  \\n', '1  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...  ']"
          },
          "execution_count": 9,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# The dataframes won't automatically update with changes, so re-init to ensure you are reading the latest version\n",
        "init_ras_project(bald_eagle_path, \"6.6\")\n",
        "\n",
        "# Display the plan dataframe again to show changes were effective\n",
        "print(\"Plan Files in Project:\")\n",
        "ras.plan_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {},
      "outputs": [],
      "source": [
        "plan_path = RasPlan.get_plan_path(\"01\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01\n"
          ]
        }
      ],
      "source": [
        "print(plan_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Plan Title=Unsteady with Bridges and Dam\n",
            "Program Version=5.00\n",
            "Short Identifier=UnsteadyFlow                                                    \n",
            "Simulation Date=18FEB1999,0000,24FEB1999,0500\n",
            "Geom File=g01\n",
            "Flow File=u02\n",
            "Subcritical Flow\n",
            "K Sum by GR= 0 \n",
            "Std Step Tol= 0.01 \n",
            "Critical Tol= 0.01 \n",
            "Num of Std Step Trials= 20 \n",
            "Max Error Tol= 0.3 \n",
            "Flow Tol Ratio= 0.001 \n",
            "Split Flow NTrial= 30 \n",
            "Split Flow Tol= 0.02 \n",
            "Split Flow Ratio= 0.02 \n",
            "Log Output Level= 0 \n",
            "Friction Slope Method= 2 \n",
            "Unsteady Friction Slope Method= 2 \n",
            "Unsteady Bridges Friction Slope Method= 1 \n",
            "Parabolic Critical Depth\n",
            "Global Vel Dist= 0 , 0 , 0 \n",
            "Global Log Level= 0 \n",
            "CheckData=True\n",
            "Encroach Param=-1 ,0,0, 0 \n",
            "Computation Interval=2MIN\n",
            "Output Interval=1HOUR\n",
            "Instantaneous Interval=2HOUR\n",
            "Mapping Interval=1HOUR\n",
            "Run HTab= 0\n",
            "Run UNet= 0\n",
            "Run Sediment= 0 \n",
            "Run PostProcess= 0\n",
            "Run WQNet= 0 \n",
            "Run RASMapper= 1\n",
            "UNET Theta= 1 \n",
            "UNET Theta Warmup= 1 \n",
            "UNET ZTol= 0.01 \n",
            "UNET ZSATol= 0.1 \n",
            "UNET QTol=\n",
            "UNET MxIter= 20 \n",
            "UNET Max Iter WO Improvement= 0 \n",
            "UNET MaxInSteps= 0 \n",
            "UNET DtIC= 0 \n",
            "UNET DtMin= 0 \n",
            "UNET MaxCRTS= 20 \n",
            "UNET WFStab= 2 \n",
            "UNET SFStab= 1 \n",
            "UNET WFX= 1 \n",
            "UNET SFX= 1 \n",
            "UNET DSS MLevel= 4 \n",
            "UNET Pardiso=0\n",
            "UNET DZMax Abort= 100 \n",
            "UNET Use Existing IB Tables=-1 \n",
            "UNET Froude Reduction=False\n",
            "UNET Froude Limit= 0.8 \n",
            "UNET Froude Power= 4 \n",
            "UNET Time Slicing=0,0, 5 \n",
            "UNET Junction Losses=0\n",
            "UNET D1 Cores= 0 \n",
            "UNET D2 Coriolis=0\n",
            "UNET D2 Cores= 0 \n",
            "UNET D2 Theta= 1 \n",
            "UNET D2 Theta Warmup= 1 \n",
            "UNET D2 Z Tol= 0.01 \n",
            "UNET D2 Max Iterations= 20 \n",
            "UNET D2 Equation= 0 \n",
            "UNET D2 TotalICTime=\n",
            "UNET D2 RampUpFraction=0.5\n",
            "UNET D2 TimeSlices= 1 \n",
            "UNET D2 Eddy Viscosity=\n",
            "UNET D2 BCVolumeCheck=0\n",
            "UNET D2 Latitude=\n",
            "UNET D1D2 MaxIter= 0 \n",
            "UNET D1D2 ZTol=0.01\n",
            "UNET D1D2 QTol=0.1\n",
            "UNET D1D2 MinQTol=1\n",
            "DSS File=dss\n",
            "Write IC File= 0 \n",
            "Write IC File at Fixed DateTime=0\n",
            "IC Time=,,\n",
            "Write IC File Reoccurance=\n",
            "Write IC File at Sim End=0\n",
            "Echo Input=False\n",
            "Echo Parameters=False\n",
            "Echo Output=False\n",
            "Write Detailed= 0 \n",
            "HDF Write Warmup=0\n",
            "HDF Write Time Slices=0\n",
            "HDF Flush=0\n",
            "HDF Compression= 1 \n",
            "HDF Chunk Size= 1 \n",
            "HDF Spatial Parts= 1 \n",
            "HDF Use Max Rows=0\n",
            "HDF Fixed Rows= 1 \n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,138154.4\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,137690.8\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,137327.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,136564.9\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,136202.3\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,135591.4\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,135068.7\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,134487.2\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,133881.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,133446.1\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,132973.6\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,132363.8\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,131699.7\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,130997.6\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,130339.2\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,129627.5\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,128760.7\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,128280.7\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,127410.9\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,126741.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,126454.1\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,126062.6\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,125704.7\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,125091.9\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,124615.5\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,124025.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,123503.5\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,123123.6\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,122703.3\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,122190.8\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,121754.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,121394.1\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,120862.6\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,120421.4\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,119954.9\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,119473.8\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,118901.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,118300.5\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,117753.9\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,117180.8\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,116401.3\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,115584.2\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,114899.8\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,113985.6\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,112856.9\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,111971.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,110657.4\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,109659.9\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,108600.1\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,107333.6\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,106466.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,105178.6\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,104647.2\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,104195.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,103854.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,103369.7\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,103122.3\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,101440.3\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,100657.3\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,99452.75\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,98206.87\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,97607.35\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,96370.43\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,94560.01\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,93391.71\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,92011.85\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,91030.01\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,90096.99\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,89060.69\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,87861.14\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,86942.04\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,85569.53\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,84724.08\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,83563.41\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,82607.89\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,81849.41\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,81084.18\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,80500.50\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,79684.28\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,78627.87\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,76643.40\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,76002.96\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,75917.82\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,75616.14\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,74650.60\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,74207.96\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,73504.24\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,72303.68\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,71400.81\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,70651.52\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,69567.33\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,68604.09\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,67326.78\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,66070.17\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,64908.02\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,63812.99\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,62746.41\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,61896.89\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,60901.09\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,59795.28\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,58836.23\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,58708.54\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,58091.91\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,57700.27\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,57250.60\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,56775.92\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,56243.79\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,55700.55\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,54696.51\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,53922.53\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,52879.19\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,51784.74\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,50720.68\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,49715.77\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,48965.94\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,48110.09\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,47453.14\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,46722.59\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,46310.48\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,45805.37\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,45233.89\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,44529.29\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,43919.30\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,42895.87\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,41806.43\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,40526.85\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,39499.37\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,38446.87\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,37962.54\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,37385.23\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,36769.88\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,36663.76\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,36339.56\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,35648.50\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,35072.37\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,34098.93\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,33498.68\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,32195.47\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,30878.12\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,29563.77\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,27226.40\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,25960.70\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,24843.25\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,24417.73\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,23872.06\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,23783.65\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,23384.79\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,22982.97\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,22386.15\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,21283.34\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,21199.93\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,20127.30\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,19036.24\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,18200.10\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,17549.23\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,16787.45\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,15407.88\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,14814.34\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,13326.74\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,12035.22\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,11865.80\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,11116.44\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,10995.73\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,10221.14\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,9258.941\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,8541.462\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,7936.130\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,6940.066\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,6267.489\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,5523.234\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,4293.710\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,3047.378\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,2731.142\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,2501.017\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,2371.827\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,1692.633\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,1212.855\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,659.942\n",
            "Calibration Method= 0 \n",
            "Calibration Iterations= 20 \n",
            "Calibration Max Change=0.05\n",
            "Calibration Tolerance=0.2\n",
            "Calibration Maximum=1.5\n",
            "Calibration Minimum=0.5\n",
            "Calibration Optimization Method= 1 \n",
            "Calibration Window=,,,\n",
            "WQ AD Non Conservative\n",
            "WQ ULTIMATE=-1\n",
            "WQ Max Comp Step=1HOUR\n",
            "WQ Output Interval=15MIN\n",
            "WQ Output Selected Increments= 0 \n",
            "WQ Output face flow=0\n",
            "WQ Output face velocity=0\n",
            "WQ Output face area=0\n",
            "WQ Output face dispersion=0\n",
            "WQ Output cell volume=0\n",
            "WQ Output cell surface area=0\n",
            "WQ Output cell continuity=0\n",
            "WQ Output cumulative cell continuity=0\n",
            "WQ Output face conc=0\n",
            "WQ Output face dconc_dx=0\n",
            "WQ Output face courant=0\n",
            "WQ Output face peclet=0\n",
            "WQ Output face adv mass=0\n",
            "WQ Output face disp mass=0\n",
            "WQ Output cell mass=0\n",
            "WQ Output cell source sink temp=0\n",
            "WQ Output nsm pathways=0\n",
            "WQ Output nsm derived pathways=0\n",
            "WQ Output MaxMinRange=-1\n",
            "WQ Daily Max Min Mean=-1\n",
            "WQ Daily Range=0\n",
            "WQ Daily Time=0\n",
            "WQ Create Restart=0\n",
            "WQ Fixed Restart=0\n",
            "WQ Restart Simtime=\n",
            "WQ Restart Date=\n",
            "WQ Restart Hour=\n",
            "WQ System Summary=0\n",
            "WQ Write To DSS=0\n",
            "WQ Use Fixed Temperature=0\n",
            "WQ Fixed Temperature=\n",
            "Sorting and Armoring Iterations= 10 \n",
            "XS Update Threshold= 0.02 \n",
            "Bed Roughness Predictor= 0 \n",
            "Hydraulics Update Threshold= 0.02 \n",
            "Energy Slope Method= 1 \n",
            "Volume Change Method= 1 \n",
            "Sediment Retention Method= 0 \n",
            "XS Weighting Method= 0 \n",
            "Number of US Weighted Cross Sections= 1 \n",
            "Number of DS Weighted Cross Sections= 1 \n",
            "Upstream XS Weight=0\n",
            "Main XS Weight=1\n",
            "Downstream XS Weight=0\n",
            "Number of DS XS's Weighted with US Boundary= 1 \n",
            "Upstream Boundary Weight= 1 \n",
            "Weight of XSs Associated with US Boundary= 0 \n",
            "Number of US XS's Weighted with DS Boundary= 1 \n",
            "Downstream Boundary Weight= 0.5 \n",
            "Weight of XSs Associated with DS Boundary= 0.5 \n",
            "Sediment Output Level= 4 \n",
            "Mass or Volume Output= 0 \n",
            "Output Increment Type= 1 \n",
            "Profile and TS Output Increment= 10 \n",
            "XS Output Flag= 0 \n",
            "XS Output Increment= 10 \n",
            "Write Gradation File= 0 \n",
            "Read Gradation Hotstart= 0 \n",
            "Gradation File Name=\n",
            "Write HDF5 File= 0 \n",
            "Write DSS Sediment File= 0 \n",
            "SV Curve= 0 \n",
            "Specific Gage Flag= 0 \n",
            "\n"
          ]
        }
      ],
      "source": [
        "# Print the Plan file's contents to confirm the change\n",
        "\n",
        "# Print the plan file contents to verify the run flag changes\n",
        "with open(plan_path, 'r') as f:\n",
        "    print(f.read())\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 4: Updating Plan Intervals\n",
        "\n",
        "Time intervals in HEC-RAS control the temporal resolution of simulations and outputs. The `RasPlan.update_plan_intervals()` method allows you to modify these intervals.\n",
        "\n",
        "### Key Parameters\n",
        "\n",
        "- `plan_number_or_path` (str or Path): The plan number or full path to the plan file\n",
        "- `computation_interval` (str, optional): Time step for calculations\n",
        "- `output_interval` (str, optional): Time step for saving detailed results\n",
        "- `instantaneous_interval` (str, optional): Time step for peak value calculations\n",
        "- `mapping_interval` (str, optional): Time step for map outputs\n",
        "- `rasect` (RasPrj, optional): The RAS project object\n",
        "\n",
        "### Valid Interval Values\n",
        "\n",
        "Time intervals must be specified in HEC-RAS format:\n",
        "- Seconds: `1SEC`, `2SEC`, `3SEC`, `4SEC`, `5SEC`, `6SEC`, `10SEC`, `15SEC`, `20SEC`, `30SEC`\n",
        "- Minutes: `1MIN`, `2MIN`, `3MIN`, `4MIN`, `5MIN`, `6MIN`, `10MIN`, `15MIN`, `20MIN`, `30MIN`\n",
        "- Hours: `1HOUR`, `2HOUR`, `3HOUR`, `4HOUR`, `6HOUR`, `8HOUR`, `12HOUR`\n",
        "- Days: `1DAY`\n",
        "\n",
        "### Interval Types\n",
        "\n",
        "1. **Computation Interval**: Time step used for hydraulic calculations\n",
        "   - Smaller intervals: More accurate but slower\n",
        "   - Larger intervals: Faster but may introduce numerical errors\n",
        "   - Rule of thumb: Should be small enough to capture flow changes\n",
        "\n",
        "2. **Output Interval**: How frequently detailed results are saved\n",
        "   - Smaller intervals: More detailed results but larger files\n",
        "   - Larger intervals: Smaller files but less temporal resolution\n",
        "   - Usually larger than computation interval\n",
        "\n",
        "3. **Instantaneous Interval**: Time step for peak value calculations\n",
        "   - Affects when max/min values are checked\n",
        "   - Usually equal to output interval\n",
        "\n",
        "4. **Mapping Interval**: How frequently map data is saved\n",
        "   - Affects animation smoothness and file size\n",
        "   - Usually larger than output interval\n",
        "\n",
        "Let's update the intervals for our plan:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Updating intervals for plan 01...\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:58:10 - ras_commander.RasPlan - INFO - Successfully updated intervals in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Plan intervals updated successfully\n"
          ]
        }
      ],
      "source": [
        "# Update plan intervals\n",
        "print(f\"Updating intervals for plan {plan_number}...\")\n",
        "RasPlan.update_plan_intervals(\n",
        "    plan_number,\n",
        "    computation_interval=\"5SEC\",    # 5-second time step for calculations\n",
        "    output_interval=\"1MIN\",         # Save detailed results every minute\n",
        "    instantaneous_interval=\"5MIN\",  # Check for max/min values every 5 minutes\n",
        "    mapping_interval=\"15MIN\",       # Save map data every 15 minutes\n",
        "\n",
        ")\n",
        "print(\"Plan intervals updated successfully\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 5: Managing Plan Descriptions\n",
        "\n",
        "Plan descriptions provide documentation for simulation configurations. The RAS Commander library offers methods to read and update these descriptions.\n",
        "\n",
        "### Reading Descriptions\n",
        "\n",
        "The `RasPlan.read_plan_description()` method retrieves the current description from a plan file.\n",
        "\n",
        "#### Parameters\n",
        "- `plan_number_or_path` (str or Path): The plan number or full path to the plan file\n",
        "- `rasect` (RasPrj, optional): The RAS project object\n",
        "\n",
        "### Updating Descriptions\n",
        "\n",
        "The `RasPlan.update_plan_description()` method sets a new description for a plan file.\n",
        "\n",
        "#### Parameters\n",
        "- `plan_number_or_path` (str or Path): The plan number or full path to the plan file\n",
        "- `description` (str): The new description text\n",
        "- `rasect` (RasPrj, optional): The RAS project object\n",
        "\n",
        "### Best Practices for Plan Descriptions\n",
        "\n",
        "Effective plan descriptions should include:\n",
        "1. Purpose of the simulation\n",
        "2. Key parameters and settings\n",
        "3. Date of creation or modification\n",
        "4. Author or organization\n",
        "5. Any special considerations or notes\n",
        "\n",
        "Let's read the current description and then update it:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:58:10 - ras_commander.RasPlan - WARNING - No description found in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01\n",
            "2025-04-09 03:58:10 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Current plan description:\n",
            "\n",
            "\n",
            "Updating plan description...\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:58:10 - ras_commander.RasPlan - INFO - Updated description in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01\n",
            "2025-04-09 03:58:10 - ras_commander.RasPlan - WARNING - No description found in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Plan description updated successfully\n",
            "\n",
            "Updated plan description:\n",
            "\n"
          ]
        }
      ],
      "source": [
        "# Read the current plan description\n",
        "current_description = RasPlan.read_plan_description(plan_number)\n",
        "print(f\"Current plan description:\\n{current_description}\")\n",
        "\n",
        "# Create a new description with detailed information\n",
        "new_description = f\"\"\"Modified Plan for RAS Commander Testing\n",
        "Date: {datetime.now().strftime('%Y-%m-%d')}\n",
        "Purpose: Demonstrating RAS Commander plan operations\n",
        "Settings:\n",
        "- Computation Interval: 5SEC\n",
        "- Output Interval: 1MIN\n",
        "- Mapping Interval: 15MIN\n",
        "- Geometry Preprocessor: Enabled\n",
        "- Post-Processor: Enabled\n",
        "Notes: This plan was automatically modified using ras-commander.\"\"\"\n",
        "\n",
        "# Update the plan description\n",
        "print(\"\\nUpdating plan description...\")\n",
        "RasPlan.update_plan_description(plan_number, new_description)\n",
        "print(\"Plan description updated successfully\")\n",
        "\n",
        "# Verify the updated description\n",
        "updated_description = RasPlan.read_plan_description(plan_number)\n",
        "print(f\"\\nUpdated plan description:\\n{updated_description}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 6: Updating Simulation Dates\n",
        "\n",
        "For unsteady flow simulations, the simulation period defines the time window for the analysis. The `RasPlan.update_simulation_date()` method allows you to modify this period.\n",
        "\n",
        "### Key Parameters\n",
        "\n",
        "- `plan_number_or_path` (str or Path): The plan number or full path to the plan file\n",
        "- `start_date` (datetime): The start date and time for the simulation\n",
        "- `end_date` (datetime): The end date and time for the simulation\n",
        "- `rasect` (RasPrj, optional): The RAS project object\n",
        "\n",
        "### Considerations for Simulation Dates\n",
        "\n",
        "1. **Hydrograph Coverage**: The simulation period should fully encompass your hydrographs\n",
        "2. **Warm-Up Period**: Include time before the main event for model stabilization\n",
        "3. **Cool-Down Period**: Include time after the main event for complete drainage\n",
        "4. **Computational Efficiency**: Avoid unnecessarily long periods to reduce runtime\n",
        "5. **Consistency**: Ensure dates match available boundary condition data\n",
        "\n",
        "Let's update the simulation dates for our plan:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:58:10 - ras_commander.RasPlan - INFO - Updated simulation date in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Current simulation date: 18FEB1999,0000,24FEB1999,0500\n",
            "\n",
            "Updating simulation period to: 18Feb1999,0100 - 24Feb1999,0400\n",
            "Simulation dates updated successfully\n",
            "\n",
            "Updated simulation date: 18FEB1999,0100,24FEB1999,0400\n"
          ]
        }
      ],
      "source": [
        "# Get the current simulation date\n",
        "current_sim_date = RasPlan.get_plan_value(plan_number, \"Simulation Date\")\n",
        "print(f\"Current simulation date: {current_sim_date}\")\n",
        "\n",
        "# Parse the current simulation date string\n",
        "current_dates = current_sim_date.split(\",\")\n",
        "current_start = datetime.strptime(f\"{current_dates[0]},{current_dates[1]}\", \"%d%b%Y,%H%M\")\n",
        "current_end = datetime.strptime(f\"{current_dates[2]},{current_dates[3]}\", \"%d%b%Y,%H%M\")\n",
        "\n",
        "# Define new simulation period - adjust by 1 hour from current dates\n",
        "start_date = current_start + timedelta(hours=1)  # Current start + 1 hour\n",
        "end_date = current_end - timedelta(hours=1)      # Current end - 1 hour\n",
        "\n",
        "# Update the simulation date\n",
        "print(f\"\\nUpdating simulation period to: {start_date.strftime('%d%b%Y,%H%M')} - {end_date.strftime('%d%b%Y,%H%M')}\")\n",
        "RasPlan.update_simulation_date(plan_number, start_date, end_date)\n",
        "print(\"Simulation dates updated successfully\")\n",
        "\n",
        "# Verify the updated simulation date\n",
        "updated_sim_date = RasPlan.get_plan_value(plan_number, \"Simulation Date\")\n",
        "print(f\"\\nUpdated simulation date: {updated_sim_date}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 7: Verifying Updated Plan Values\n",
        "\n",
        "After making multiple changes to a plan, it's a good practice to verify that all updates were applied correctly. Let's check the updated values:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Begin DESCRIPTION\n",
            "Modified Plan for RAS Commander Testing\n",
            "Date: 2025-04-09\n",
            "Purpose: Demonstrating RAS Commander plan operations\n",
            "Settings:\n",
            "- Computation Interval: 5SEC\n",
            "- Output Interval: 1MIN\n",
            "- Mapping Interval: 15MIN\n",
            "- Geometry Preprocessor: Enabled\n",
            "- Post-Processor: Enabled\n",
            "Notes: This plan was automatically modified using ras-commander.\n",
            "END DESCRIPTION\n",
            "Plan Title=Unsteady with Bridges and Dam\n",
            "Program Version=5.00\n",
            "Short Identifier=UnsteadyFlow                                                    \n",
            "Simulation Date=18FEB1999,0100,24FEB1999,0400\n",
            "Geom File=g01\n",
            "Flow File=u02\n",
            "Subcritical Flow\n",
            "K Sum by GR= 0 \n",
            "Std Step Tol= 0.01 \n",
            "Critical Tol= 0.01 \n",
            "Num of Std Step Trials= 20 \n",
            "Max Error Tol= 0.3 \n",
            "Flow Tol Ratio= 0.001 \n",
            "Split Flow NTrial= 30 \n",
            "Split Flow Tol= 0.02 \n",
            "Split Flow Ratio= 0.02 \n",
            "Log Output Level= 0 \n",
            "Friction Slope Method= 2 \n",
            "Unsteady Friction Slope Method= 2 \n",
            "Unsteady Bridges Friction Slope Method= 1 \n",
            "Parabolic Critical Depth\n",
            "Global Vel Dist= 0 , 0 , 0 \n",
            "Global Log Level= 0 \n",
            "CheckData=True\n",
            "Encroach Param=-1 ,0,0, 0 \n",
            "Computation Interval=5SEC\n",
            "Output Interval=1MIN\n",
            "Instantaneous Interval=5MIN\n",
            "Mapping Interval=15MIN\n",
            "Run HTab= 0\n",
            "Run UNet= 0\n",
            "Run Sediment= 0 \n",
            "Run PostProcess= 0\n",
            "Run WQNet= 0 \n",
            "Run RASMapper= 1\n",
            "UNET Theta= 1 \n",
            "UNET Theta Warmup= 1 \n",
            "UNET ZTol= 0.01 \n",
            "UNET ZSATol= 0.1 \n",
            "UNET QTol=\n",
            "UNET MxIter= 20 \n",
            "UNET Max Iter WO Improvement= 0 \n",
            "UNET MaxInSteps= 0 \n",
            "UNET DtIC= 0 \n",
            "UNET DtMin= 0 \n",
            "UNET MaxCRTS= 20 \n",
            "UNET WFStab= 2 \n",
            "UNET SFStab= 1 \n",
            "UNET WFX= 1 \n",
            "UNET SFX= 1 \n",
            "UNET DSS MLevel= 4 \n",
            "UNET Pardiso=0\n",
            "UNET DZMax Abort= 100 \n",
            "UNET Use Existing IB Tables=-1 \n",
            "UNET Froude Reduction=False\n",
            "UNET Froude Limit= 0.8 \n",
            "UNET Froude Power= 4 \n",
            "UNET Time Slicing=0,0, 5 \n",
            "UNET Junction Losses=0\n",
            "UNET D1 Cores= 0 \n",
            "UNET D2 Coriolis=0\n",
            "UNET D2 Cores= 0 \n",
            "UNET D2 Theta= 1 \n",
            "UNET D2 Theta Warmup= 1 \n",
            "UNET D2 Z Tol= 0.01 \n",
            "UNET D2 Max Iterations= 20 \n",
            "UNET D2 Equation= 0 \n",
            "UNET D2 TotalICTime=\n",
            "UNET D2 RampUpFraction=0.5\n",
            "UNET D2 TimeSlices= 1 \n",
            "UNET D2 Eddy Viscosity=\n",
            "UNET D2 BCVolumeCheck=0\n",
            "UNET D2 Latitude=\n",
            "UNET D1D2 MaxIter= 0 \n",
            "UNET D1D2 ZTol=0.01\n",
            "UNET D1D2 QTol=0.1\n",
            "UNET D1D2 MinQTol=1\n",
            "DSS File=dss\n",
            "Write IC File= 0 \n",
            "Write IC File at Fixed DateTime=0\n",
            "IC Time=,,\n",
            "Write IC File Reoccurance=\n",
            "Write IC File at Sim End=0\n",
            "Echo Input=False\n",
            "Echo Parameters=False\n",
            "Echo Output=False\n",
            "Write Detailed= 0 \n",
            "HDF Write Warmup=0\n",
            "HDF Write Time Slices=0\n",
            "HDF Flush=0\n",
            "HDF Compression= 1 \n",
            "HDF Chunk Size= 1 \n",
            "HDF Spatial Parts= 1 \n",
            "HDF Use Max Rows=0\n",
            "HDF Fixed Rows= 1 \n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,138154.4\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,137690.8\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,137327.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,136564.9\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,136202.3\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,135591.4\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,135068.7\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,134487.2\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,133881.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,133446.1\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,132973.6\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,132363.8\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,131699.7\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,130997.6\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,130339.2\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,129627.5\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,128760.7\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,128280.7\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,127410.9\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,126741.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,126454.1\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,126062.6\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,125704.7\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,125091.9\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,124615.5\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,124025.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,123503.5\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,123123.6\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,122703.3\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,122190.8\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,121754.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,121394.1\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,120862.6\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,120421.4\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,119954.9\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,119473.8\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,118901.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,118300.5\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,117753.9\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,117180.8\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,116401.3\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,115584.2\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,114899.8\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,113985.6\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,112856.9\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,111971.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,110657.4\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,109659.9\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,108600.1\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,107333.6\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,106466.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,105178.6\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,104647.2\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,104195.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,103854.0\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,103369.7\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,103122.3\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,101440.3\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,100657.3\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,99452.75\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,98206.87\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,97607.35\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,96370.43\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,94560.01\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,93391.71\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,92011.85\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,91030.01\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,90096.99\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,89060.69\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,87861.14\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,86942.04\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,85569.53\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,84724.08\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,83563.41\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,82607.89\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,81849.41\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,81084.18\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,80500.50\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,79684.28\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,78627.87\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,76643.40\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,76002.96\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,75917.82\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,75616.14\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,74650.60\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,74207.96\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,73504.24\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,72303.68\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,71400.81\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,70651.52\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,69567.33\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,68604.09\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,67326.78\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,66070.17\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,64908.02\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,63812.99\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,62746.41\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,61896.89\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,60901.09\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,59795.28\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,58836.23\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,58708.54\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,58091.91\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,57700.27\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,57250.60\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,56775.92\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,56243.79\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,55700.55\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,54696.51\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,53922.53\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,52879.19\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,51784.74\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,50720.68\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,49715.77\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,48965.94\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,48110.09\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,47453.14\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,46722.59\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,46310.48\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,45805.37\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,45233.89\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,44529.29\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,43919.30\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,42895.87\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,41806.43\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,40526.85\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,39499.37\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,38446.87\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,37962.54\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,37385.23\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,36769.88\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,36663.76\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,36339.56\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,35648.50\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,35072.37\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,34098.93\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,33498.68\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,32195.47\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,30878.12\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,29563.77\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,27226.40\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,25960.70\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,24843.25\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,24417.73\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,23872.06\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,23783.65\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,23384.79\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,22982.97\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,22386.15\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,21283.34\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,21199.93\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,20127.30\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,19036.24\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,18200.10\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,17549.23\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,16787.45\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,15407.88\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,14814.34\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,13326.74\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,12035.22\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,11865.80\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,11116.44\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,10995.73\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,10221.14\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,9258.941\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,8541.462\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,7936.130\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,6940.066\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,6267.489\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,5523.234\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,4293.710\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,3047.378\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,2731.142\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,2501.017\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,2371.827\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,1692.633\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,1212.855\n",
            "Stage Flow Hydrograph=Bald Eagle      ,Loc Hav         ,659.942\n",
            "Calibration Method= 0 \n",
            "Calibration Iterations= 20 \n",
            "Calibration Max Change=0.05\n",
            "Calibration Tolerance=0.2\n",
            "Calibration Maximum=1.5\n",
            "Calibration Minimum=0.5\n",
            "Calibration Optimization Method= 1 \n",
            "Calibration Window=,,,\n",
            "WQ AD Non Conservative\n",
            "WQ ULTIMATE=-1\n",
            "WQ Max Comp Step=1HOUR\n",
            "WQ Output Interval=15MIN\n",
            "WQ Output Selected Increments= 0 \n",
            "WQ Output face flow=0\n",
            "WQ Output face velocity=0\n",
            "WQ Output face area=0\n",
            "WQ Output face dispersion=0\n",
            "WQ Output cell volume=0\n",
            "WQ Output cell surface area=0\n",
            "WQ Output cell continuity=0\n",
            "WQ Output cumulative cell continuity=0\n",
            "WQ Output face conc=0\n",
            "WQ Output face dconc_dx=0\n",
            "WQ Output face courant=0\n",
            "WQ Output face peclet=0\n",
            "WQ Output face adv mass=0\n",
            "WQ Output face disp mass=0\n",
            "WQ Output cell mass=0\n",
            "WQ Output cell source sink temp=0\n",
            "WQ Output nsm pathways=0\n",
            "WQ Output nsm derived pathways=0\n",
            "WQ Output MaxMinRange=-1\n",
            "WQ Daily Max Min Mean=-1\n",
            "WQ Daily Range=0\n",
            "WQ Daily Time=0\n",
            "WQ Create Restart=0\n",
            "WQ Fixed Restart=0\n",
            "WQ Restart Simtime=\n",
            "WQ Restart Date=\n",
            "WQ Restart Hour=\n",
            "WQ System Summary=0\n",
            "WQ Write To DSS=0\n",
            "WQ Use Fixed Temperature=0\n",
            "WQ Fixed Temperature=\n",
            "Sorting and Armoring Iterations= 10 \n",
            "XS Update Threshold= 0.02 \n",
            "Bed Roughness Predictor= 0 \n",
            "Hydraulics Update Threshold= 0.02 \n",
            "Energy Slope Method= 1 \n",
            "Volume Change Method= 1 \n",
            "Sediment Retention Method= 0 \n",
            "XS Weighting Method= 0 \n",
            "Number of US Weighted Cross Sections= 1 \n",
            "Number of DS Weighted Cross Sections= 1 \n",
            "Upstream XS Weight=0\n",
            "Main XS Weight=1\n",
            "Downstream XS Weight=0\n",
            "Number of DS XS's Weighted with US Boundary= 1 \n",
            "Upstream Boundary Weight= 1 \n",
            "Weight of XSs Associated with US Boundary= 0 \n",
            "Number of US XS's Weighted with DS Boundary= 1 \n",
            "Downstream Boundary Weight= 0.5 \n",
            "Weight of XSs Associated with DS Boundary= 0.5 \n",
            "Sediment Output Level= 4 \n",
            "Mass or Volume Output= 0 \n",
            "Output Increment Type= 1 \n",
            "Profile and TS Output Increment= 10 \n",
            "XS Output Flag= 0 \n",
            "XS Output Increment= 10 \n",
            "Write Gradation File= 0 \n",
            "Read Gradation Hotstart= 0 \n",
            "Gradation File Name=\n",
            "Write HDF5 File= 0 \n",
            "Write DSS Sediment File= 0 \n",
            "SV Curve= 0 \n",
            "Specific Gage Flag= 0 \n",
            "\n"
          ]
        }
      ],
      "source": [
        "# Print the Plan file's contents to confirm the change\n",
        "\n",
        "# Print the plan file contents to verify the run flag changes\n",
        "with open(plan_path, 'r') as f:\n",
        "    print(f.read())\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 8: Computing the Plan (Optional)\n",
        "\n",
        "After making changes to a plan, you might want to run the simulation to see the effects. The `RasCmdr.compute_plan()` method executes a HEC-RAS simulation with the specified plan.\n",
        "\n",
        "### Key Parameters\n",
        "\n",
        "- `plan_number` (str): The plan number to execute\n",
        "- `dest_folder` (str, Path, optional): Destination folder for computation\n",
        "- `rasect` (RasPrj, optional): The RAS project object\n",
        "- `clear_geompre` (bool, optional): Whether to clear geometry preprocessor files\n",
        "- `num_cores` (int, optional): Number of processor cores to use\n",
        "- `overwrite_dest` (bool, optional): Whether to overwrite the destination folder\n",
        "\n",
        "If you want to run the simulation, you can uncomment the code below:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 03:58:10 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n",
            "2025-04-09 03:58:10 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-09 03:58:10 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01\"\n",
            "2025-04-09 04:00:55 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 01\n",
            "2025-04-09 04:00:55 - ras_commander.RasCmdr - INFO - Total run time for plan 01: 164.93 seconds\n"
          ]
        },
        {
          "data": {
            "text/plain": "['True']"
          },
          "execution_count": 17,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "RasCmdr.compute_plan(plan_number)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Uncomment to run the simulation with the updated plan\n",
        "\n",
        "# # Define a destination folder for the computation\n",
        "# dest_folder = script_dir / \"compute_results\"\n",
        "# print(f\"Computing plan {plan_number}...\")\n",
        "# print(f\"Results will be saved to: {dest_folder}\")\n",
        "\n",
        "# # Execute the plan\n",
        "# success = RasCmdr.compute_plan(\n",
        "#     plan_number,\n",
        "#     dest_folder=dest_folder,\n",
        "#     clear_geompre=True,    # Clear preprocessor files to ensure clean results\n",
        "#     num_cores=2,           # Use 2 processor cores\n",
        "#     overwrite_dest=True,   # Overwrite existing destination folder\n",
        "#     rasect=ras\n",
        "# )\n",
        "\n",
        "# if success:\n",
        "#     print(f\"Plan {plan_number} computed successfully\")\n",
        "#     # Check for results file\n",
        "#     results_path = RasPlan.get_results_path(plan_number)\n",
        "#     if results_path:\n",
        "#         print(f\"Results saved to: {results_path}\")\n",
        "# else:\n",
        "#     print(f\"Failed to compute plan {plan_number}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Summary of Plan Key Operations\n",
        "\n",
        "In this notebook, we've covered the essential operations for manipulating HEC-RAS plan files programmatically using RAS Commander:\n",
        "\n",
        "1. **Project Initialization**: We initialized a HEC-RAS project using `init_ras_project()`\n",
        "2. **Plan Values**: We retrieved plan values with `RasPlan.get_plan_value()`\n",
        "3. **Run Flags**: We updated simulation components with `RasPlan.update_run_flags()`\n",
        "4. **Plan Intervals**: We modified time steps with `RasPlan.update_plan_intervals()`\n",
        "5. **Plan Descriptions**: We managed documentation with `RasPlan.read_plan_description()` and `RasPlan.update_plan_description()`\n",
        "6. **Simulation Dates**: We changed the analysis period with `RasPlan.update_simulation_date()`\n",
        "7. **Verification**: We verified our changes by comparing initial and updated values\n",
        "\n",
        "### Key Classes and Functions Used\n",
        "\n",
        "- `RasPlan`: The main class for plan operations\n",
        "  - `get_plan_value()`: Retrieve specific values from plan files\n",
        "  - `update_run_flags()`: Configure which components will run\n",
        "  - `update_plan_intervals()`: Set computation and output time intervals\n",
        "  - `read_plan_description()`: Get the current plan description\n",
        "  - `update_plan_description()`: Set a new plan description\n",
        "  - `update_simulation_date()`: Modify the simulation period\n",
        "  - `get_results_path()`: Get the path to results files\n",
        "\n",
        "- `RasCmdr`: The class for executing HEC-RAS simulations\n",
        "  - `compute_plan()`: Run a single plan simulation\n",
        "\n",
        "### Best Practices for Plan Operations\n",
        "\n",
        "1. **Verify Before Updating**: Always check current values before making changes\n",
        "2. **Document Changes**: Use descriptive plan descriptions to track modifications\n",
        "3. **Maintain Consistency**: Ensure flow data matches simulation dates\n",
        "4. **Use Appropriate Intervals**: Balance accuracy and computational efficiency\n",
        "5. **Backup Original Files**: Use destination folders when running simulations\n",
        "6. **Verify After Updates**: Confirm that all changes were applied correctly\n",
        "\n",
        "### Next Steps\n",
        "\n",
        "With these plan operations, you can now:\n",
        "\n",
        "1. **Create Batch Workflows**: Process multiple scenarios with different parameters\n",
        "2. **Perform Sensitivity Analysis**: Systematically vary parameters to assess their impact\n",
        "3. **Automate Calibration**: Adjust parameters to match observed data\n",
        "4. **Build Model Ensembles**: Run multiple configurations for uncertainty analysis\n",
        "5. **Integrate with Other Tools**: Connect HEC-RAS to broader modeling frameworks\n",
        "\n",
        "These operations form the foundation for advanced HEC-RAS automation using the RAS Commander library."
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "rascmdr",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
}
==================================================

File: c:\GH\ras-commander\examples\101_Core_Sensitivity.ipynb
==================================================
{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Install ras-commander from pip (uncomment to install if needed)\n",
        "#!pip install ras-commander\n",
        "# This installs ras-commander and all dependencies"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Import all required modules\n",
        "from ras_commander import *  # Import all ras-commander modules\n",
        "\n",
        "# Import the required libraries for this notebook\n",
        "import h5py\n",
        "import numpy as np\n",
        "import requests\n",
        "import pandas as pd\n",
        "import geopandas as gpd\n",
        "import matplotlib.pyplot as plt\n",
        "import pyproj\n",
        "from shapely.geometry import Point, LineString, Polygon\n",
        "import xarray as xr\n",
        "from pathlib import Path"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# 14_Core_Sensitivity.ipynb\n",
        "Testing Core Sensitivity for RAS using the Bald Eagle Creek Multi-Gage 2D project.  \n",
        "\n",
        "\n",
        "This should take around 15-45 minutes to run depending on your hardware."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:50:59 - ras_commander.RasExamples - INFO - Found zip file: d:\\GitHub\\ras-commander\\examples\\Example_Projects_6_6.zip\n",
            "2025-04-09 08:50:59 - ras_commander.RasExamples - INFO - Loading project data from CSV...\n",
            "2025-04-09 08:50:59 - ras_commander.RasExamples - INFO - Loaded 68 projects from CSV.\n",
            "2025-04-09 08:50:59 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
            "2025-04-09 08:50:59 - ras_commander.RasExamples - INFO - Extracting project 'BaldEagleCrkMulti2D'\n",
            "2025-04-09 08:50:59 - ras_commander.RasExamples - INFO - Project 'BaldEagleCrkMulti2D' already exists. Deleting existing folder...\n",
            "2025-04-09 08:50:59 - ras_commander.RasExamples - INFO - Existing folder for project 'BaldEagleCrkMulti2D' has been deleted.\n",
            "2025-04-09 08:51:01 - ras_commander.RasExamples - INFO - Successfully extracted project 'BaldEagleCrkMulti2D' to d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-09 08:51:01 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-09 08:51:01 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-09 08:51:01 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-09 08:51:01 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p03\n",
            "2025-04-09 08:51:01 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p03\n",
            "2025-04-09 08:51:01 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-09 08:51:01 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p03\n",
            "2025-04-09 08:51:01 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p03\n",
            "2025-04-09 08:51:02 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-09 08:51:02 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-09 08:51:02 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p03\"\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Running sensitivity analysis for Plan 03\n",
            "Running with 1 core(s)\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:58:06 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 03\n",
            "2025-04-09 08:58:06 - ras_commander.RasCmdr - INFO - Total run time for plan 03: 424.31 seconds\n",
            "2025-04-09 08:58:06 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p03\n",
            "2025-04-09 08:58:06 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p03\n",
            "2025-04-09 08:58:06 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-09 08:58:06 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-09 08:58:06 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p03\"\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Execution time: 424.34 seconds\n",
            "Running with 2 core(s)\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 09:02:18 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 03\n",
            "2025-04-09 09:02:18 - ras_commander.RasCmdr - INFO - Total run time for plan 03: 252.47 seconds\n",
            "2025-04-09 09:02:18 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p03\n",
            "2025-04-09 09:02:18 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p03\n",
            "2025-04-09 09:02:18 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-09 09:02:18 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-09 09:02:18 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p03\"\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Execution time: 252.53 seconds\n",
            "Running with 3 core(s)\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 09:06:39 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 03\n",
            "2025-04-09 09:06:39 - ras_commander.RasCmdr - INFO - Total run time for plan 03: 260.34 seconds\n",
            "2025-04-09 09:06:39 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p03\n",
            "2025-04-09 09:06:39 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p03\n",
            "2025-04-09 09:06:39 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-09 09:06:39 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-09 09:06:39 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p03\"\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Execution time: 260.38 seconds\n",
            "Running with 4 core(s)\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 09:10:55 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 03\n",
            "2025-04-09 09:10:55 - ras_commander.RasCmdr - INFO - Total run time for plan 03: 256.51 seconds\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Execution time: 256.55 seconds\n",
            "Sensitivity analysis complete\n"
          ]
        }
      ],
      "source": [
        "import time\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from pathlib import Path\n",
        "from ras_commander import RasExamples, init_ras_project, RasCmdr, RasPlan, RasGeo\n",
        "\n",
        "# Step 1: Initialize RasExamples and extract the BaldEagleCrkMulti2D project\n",
        "\n",
        "RasExamples.extract_project([\"BaldEagleCrkMulti2D\"])\n",
        "\n",
        "# Use Path.cwd() to get the current working directory in a Jupyter Notebook\n",
        "current_directory = Path.cwd()\n",
        "project_path = current_directory / \"example_projects\" / \"BaldEagleCrkMulti2D\"\n",
        "\n",
        "# Step 2: Initialize the RAS Project Folder using init_ras_project (from ras_commander)\n",
        "init_ras_project(project_path, \"6.6\")\n",
        "\n",
        "# Step 3: Initialize a DataFrame to store execution results\n",
        "results = []\n",
        "\n",
        "# Step 4: Run sensitivity analysis for Plan 03 with core counts 1-8\n",
        "plan_number = '03'\n",
        "print(f\"Running sensitivity analysis for Plan {plan_number}\")\n",
        "\n",
        "# Clear geompre files before running the plan\n",
        "plan_path = RasPlan.get_plan_path(plan_number)\n",
        "RasGeo.clear_geompre_files(plan_path)\n",
        "\n",
        "for cores in range(1, 5):\n",
        "    print(f\"Running with {cores} core(s)\")\n",
        "    # Set core count for this plan\n",
        "    RasPlan.set_num_cores(plan_number, cores)\n",
        "    \n",
        "    # Time the execution of the plan\n",
        "    start_time = time.time()\n",
        "    RasCmdr.compute_plan(plan_number)\n",
        "    execution_time = time.time() - start_time\n",
        "    \n",
        "    # Store the results\n",
        "    results.append({\n",
        "        \"plan_number\": plan_number,\n",
        "        \"cores\": cores,\n",
        "        \"execution_time\": execution_time\n",
        "    })\n",
        "    \n",
        "    print(f\"Execution time: {execution_time:.2f} seconds\")\n",
        "\n",
        "print(\"Sensitivity analysis complete\")\n",
        "\n",
        "# Step 5: Convert results into a DataFrame\n",
        "results_df = pd.DataFrame(results)\n",
        "\n",
        "# Optionally, save the results to a CSV file\n",
        "results_df.to_csv(\"core_sensitivity_results.csv\", index=False)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "NOTES FOR REVISIONS:\n",
        "- Use HDF compute summary to show the time for each preprocesS/unsteady compute/postprocess step. \n",
        "- First, run preprocessor and then toggle options to only run unsteady compute and postprocess. \n",
        "- Plot each step separately. \n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "results_df DataFrame (time is in seconds):\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>cores</th>\\n', '      <th>execution_time</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>3</td>\\n', '      <td>1</td>\\n', '      <td>424.342272</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>3</td>\\n', '      <td>2</td>\\n', '      <td>252.529661</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>3</td>\\n', '      <td>3</td>\\n', '      <td>260.380589</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>3</td>\\n', '      <td>4</td>\\n', '      <td>256.551776</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "   plan_number  cores  execution_time\n",
              "0            3      1      424.342272\n",
              "1            3      2      252.529661\n",
              "2            3      3      260.380589\n",
              "3            3      4      256.551776"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Optionally, load the results from a CSV file\n",
        "results_df = pd.read_csv(\"core_sensitivity_results.csv\")\n",
        "\n",
        "# Display the results dataframe for verification\n",
        "print(\"results_df DataFrame (time is in seconds):\")\n",
        "display(results_df)\n",
        "\n",
        "# Step 6: Calculate unit runtime (based on 1 core execution time)\n",
        "results_df['unit_runtime'] = results_df.groupby('plan_number')['execution_time'].transform(lambda x: x / x.iloc[0])\n",
        "\n",
        "# Get the project name from the ras object\n",
        "project_name = ras.project_name\n",
        "\n",
        "# Step 7: Plot a line chart for unit runtime vs. cores for each plan\n",
        "plt.figure(figsize=(10, 6))\n",
        "for plan in results_df['plan_number'].unique():\n",
        "    plan_data = results_df[results_df['plan_number'] == plan]\n",
        "    plt.plot(plan_data['cores'], plan_data['unit_runtime'], label=f\"Plan {plan}\")\n",
        "\n",
        "plt.xlabel(\"Number of Cores\")\n",
        "plt.ylabel(\"Unit Runtime (Relative to 1 Core)\")\n",
        "plt.title(f\"{project_name} (HEC Example Project)\\nCore Count Sensitivity Analysis\")\n",
        "plt.legend(title=\"Plan Number\")\n",
        "plt.grid(False)\n",
        "plt.vlines([1,2,3,4], ymin=0, ymax=1.2, linestyles='dotted', alpha=0.3)\n",
        "plt.gca().xaxis.set_major_locator(plt.MultipleLocator(1))\n",
        "plt.show()\n",
        "\n",
        "\n"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "rascmdr",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}
==================================================

File: c:\GH\ras-commander\examples\102_benchmarking_versions_6.1_to_6.6.ipynb
==================================================
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# RAS-Commander standard code cells 1-3: Install Packages and Prepare the Environment"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Install ras-commander from pip (uncomment to install if needed)\n",
        "#!pip install ras-commander\n",
        "# This installs ras-commander and all dependencies"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Import all required modules\n",
        "from ras_commander import *  # Import all ras-commander modules\n",
        "\n",
        "# Import the required libraries for this notebook\n",
        "import h5py\n",
        "import numpy as np\n",
        "import requests\n",
        "import pandas as pd\n",
        "import geopandas as gpd\n",
        "import matplotlib.pyplot as plt\n",
        "import pyproj\n",
        "from shapely.geometry import Point, LineString, Polygon\n",
        "import xarray as xr\n",
        "from pathlib import Path\n",
        "import sys\n",
        "from pathlib import Path\n",
        "from concurrent.futures import ThreadPoolExecutor, as_completed"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Collecting py-cpuinfo\n",
            "  Downloading py_cpuinfo-9.0.0-py3-none-any.whl.metadata (794 bytes)\n",
            "Downloading py_cpuinfo-9.0.0-py3-none-any.whl (22 kB)\n",
            "Installing collected packages: py-cpuinfo\n",
            "Successfully installed py-cpuinfo-9.0.0\n",
            "\n",
            "CPU Information:\n",
            "Processor: Intel(R) Core(TM) i3-4150 CPU @ 3.50GHz\n",
            "Architecture: AMD64\n",
            "Physical cores: 2\n",
            "Logical cores: 4\n",
            "Max frequency: 3500.00 MHz\n",
            "Current frequency: 3500.00 MHz\n",
            "\n",
            "Memory Information:\n",
            "Total RAM: 7.92 GB\n",
            "Available RAM: 2.66 GB\n",
            "RAM Usage: 66.4%\n",
            "\n",
            "Operating System:\n",
            "OS: Windows 10\n",
            "Version: 10.0.19045\n"
          ]
        }
      ],
      "source": [
        "# System Information: Print CPU information, number of logical cores and real cores, speed in GHZ, RAM, etc.\n",
        "# Get CPU information\n",
        "\n",
        "# Uncomment and run this line if you don't have py-cpuinfo installed\n",
        "# !pip install py-cpuinfo  \n",
        "\n",
        "import psutil\n",
        "import platform\n",
        "import cpuinfo  \n",
        "\n",
        "# CPU Info\n",
        "cpu_info = cpuinfo.get_cpu_info()\n",
        "print(\"\\nCPU Information:\")\n",
        "print(f\"Processor: {cpu_info['brand_raw']}\")\n",
        "print(f\"Architecture: {platform.machine()}\")\n",
        "print(f\"Physical cores: {psutil.cpu_count(logical=False)}\")\n",
        "print(f\"Logical cores: {psutil.cpu_count(logical=True)}\")\n",
        "print(f\"Max frequency: {psutil.cpu_freq().max:.2f} MHz\")\n",
        "print(f\"Current frequency: {psutil.cpu_freq().current:.2f} MHz\")\n",
        "\n",
        "# Memory Info\n",
        "memory = psutil.virtual_memory()\n",
        "print(\"\\nMemory Information:\")\n",
        "print(f\"Total RAM: {memory.total / (1024**3):.2f} GB\")\n",
        "print(f\"Available RAM: {memory.available / (1024**3):.2f} GB\")\n",
        "print(f\"RAM Usage: {memory.percent}%\")\n",
        "\n",
        "# Operating System\n",
        "print(\"\\nOperating System:\")\n",
        "print(f\"OS: {platform.system()} {platform.release()}\")\n",
        "print(f\"Version: {platform.version()}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Define versions to compare\n",
        "versions = ['6.6', '6.5', '6.4.1', '6.3.1', '6.3', '6.2', \"6.1\", \"6.0\"] # NOTE: ras-commander does not support versions prior to 6.2 due to HDF5 file format changes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 08:27:27 - ras_commander.RasExamples - INFO - Found zip file: d:\\GitHub\\ras-commander\\examples\\Example_Projects_6_6.zip\n",
            "2025-04-10 08:27:27 - ras_commander.RasExamples - INFO - Loading project data from CSV...\n",
            "2025-04-10 08:27:27 - ras_commander.RasExamples - INFO - Loaded 68 projects from CSV.\n",
            "2025-04-10 08:27:27 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
            "2025-04-10 08:27:27 - ras_commander.RasExamples - INFO - Extracting project 'BaldEagleCrkMulti2D'\n",
            "2025-04-10 08:27:27 - ras_commander.RasExamples - INFO - Project 'BaldEagleCrkMulti2D' already exists. Deleting existing folder...\n",
            "2025-04-10 08:27:28 - ras_commander.RasExamples - INFO - Existing folder for project 'BaldEagleCrkMulti2D' has been deleted.\n",
            "2025-04-10 08:27:30 - ras_commander.RasExamples - INFO - Successfully extracted project 'BaldEagleCrkMulti2D' to d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n"
          ]
        }
      ],
      "source": [
        "# Extract BaldEagleCrkMulti2D project\n",
        "project_path = RasExamples.extract_project([\"BaldEagleCrkMulti2D\"])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 08:27:30 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-10 08:27:30 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-10 08:27:30 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<ras_commander.RasPrj.RasPrj object at 0x00000286C0156F90>\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>UNET D2 SolverType</th>\\n', '      <th>UNET D2 Name</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>13</td>\\n', '      <td>07</td>\\n', '      <td>06</td>\\n', '      <td>PMF with Multi 2D Areas</td>\\n', '      <td>5.10</td>\\n', '      <td>PMF Multi 2D</td>\\n', '      <td>01JAN1999,1200,04JAN1999,1200</td>\\n', '      <td>30SEC</td>\\n', '      <td>30MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>Pardiso (Direct)</td>\\n', '      <td>193</td>\\n', '      <td>None</td>\\n', '      <td>06</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>07</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>15</td>\\n', '      <td>12</td>\\n', '      <td>08</td>\\n', '      <td>1d-2D Dambreak Refined Grid</td>\\n', '      <td>5.10</td>\\n', '      <td>1D-2D Refined Grid</td>\\n', '      <td>01JAN1999,1200,04JAN1999,1200</td>\\n', '      <td>20SEC</td>\\n', '      <td>5MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>None</td>\\n', '      <td>08</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>12</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>17</td>\\n', '      <td>09</td>\\n', '      <td>10</td>\\n', '      <td>2D to 1D No Dam</td>\\n', '      <td>5.00</td>\\n', '      <td>2D to 1D No Dam</td>\\n', '      <td>01JAN1999,1200,06JAN1999,1200</td>\\n', '      <td>1MIN</td>\\n', '      <td>5MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>Upstream2D</td>\\n', '      <td>None</td>\\n', '      <td>10</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>09</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>18</td>\\n', '      <td>10</td>\\n', '      <td>11</td>\\n', '      <td>2D to 2D Run</td>\\n', '      <td>5.00</td>\\n', '      <td>2D to 2D Run</td>\\n', '      <td>01JAN1999,1200,04JAN1999,1200</td>\\n', '      <td>20SEC</td>\\n', '      <td>5MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>None</td>\\n', '      <td>11</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>10</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>19</td>\\n', '      <td>11</td>\\n', '      <td>12</td>\\n', '      <td>SA to 2D Dam Break Run</td>\\n', '      <td>5.00</td>\\n', '      <td>SA to 2D Dam Break</td>\\n', '      <td>01JAN1999,1200,04JAN1999,1200</td>\\n', '      <td>20SEC</td>\\n', '      <td>10MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>None</td>\\n', '      <td>12</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>11</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['   plan_number unsteady_number geometry_number  \\\\\\n', '0           13              07              06   \\n', '1           15              12              08   \\n', '2           17              09              10   \\n', '3           18              10              11   \\n', '4           19              11              12   \\n', '5           03              13              09   \\n', '6           04              01              13   \\n', '7           02              01              01   \\n', '8           01              01              01   \\n', '9           05              02              03   \\n', '10          06              03              09   \\n', '\\n', '                                 Plan Title Program Version  \\\\\\n', '0                   PMF with Multi 2D Areas            5.10   \\n', '1               1d-2D Dambreak Refined Grid            5.10   \\n', '2                           2D to 1D No Dam            5.00   \\n', '3                              2D to 2D Run            5.0\n...\n[Output truncated, 6825 characters total]"
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Init the ras_project with ras-commander to read all HEC-RAS project information \n",
        "init_ras_project(project_path, \"6.5\")\n",
        "print(ras)\n",
        "# If no ras object is defined in init_ras_project, it defaults to \"ras\" (useful for single project scripts)\n",
        "# Display plan dataframe\n",
        "ras.plan_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "['13', '15', '17', '18', '19', '03', '04', '02', '01', '05', '06']\n"
          ]
        }
      ],
      "source": [
        "# Export Plan Numbers to List and Print\n",
        "plan_numbers = ras.plan_df['plan_number'].tolist()\n",
        "print(plan_numbers)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Define run_simulation function for\n",
        "import time\n",
        "from ras_commander import RasGeo\n",
        "\n",
        "def run_simulation(version, plan_number):\n",
        "    # Initialize project for the specific version\n",
        "    ras_project = init_ras_project(project_path, str(version))\n",
        "    \n",
        "    # Clear geometry preprocessor files for the plan\n",
        "    plan_path = RasPlan.get_plan_path(plan_number, ras_object=ras_project)\n",
        "    RasGeo.clear_geompre_files(plan_path, ras_object=ras_project)\n",
        "    \n",
        "    # Set the number of cores to 4\n",
        "    RasPlan.set_num_cores(plan_number, \"4\", ras_object=ras_project)\n",
        "    \n",
        "    # Update plan run flags \u2013 setting \"Run HTab\" flag to 1 to force geometry preprocessing\n",
        "    RasPlan.update_run_flags(plan_number, {\"Run HTab\": 1}, ras_object=ras_project)\n",
        "    \n",
        "    # Compute the plan\n",
        "    start_time = time.time()\n",
        "    success = RasCmdr.compute_plan(plan_number, ras_object=ras_project)\n",
        "    total_time = time.time() - start_time\n",
        "    \n",
        "    if success:\n",
        "        # Get the HDF file path for the plan results\n",
        "        hdf_path = RasPlan.get_results_path(plan_number, ras_object=ras_project)\n",
        "        \n",
        "        # Extract runtime data from the HDF file\n",
        "        runtime_data = HdfResultsPlan.get_runtime_data(hdf_path)\n",
        "        \n",
        "        # Extract required information from the runtime data\n",
        "        preprocessor_time = runtime_data['Preprocessing Geometry (hr)'].values[0]\n",
        "        unsteady_compute_time = runtime_data['Unsteady Flow Computations (hr)'].values[0]\n",
        "        \n",
        "        # Get volume accounting data from the HDF file\n",
        "        volume_accounting = HdfResultsPlan.get_volume_accounting(hdf_path)\n",
        "        # Extract Error Percent from the DataFrame\n",
        "        volume_error = volume_accounting['Error Percent'].values[0] if not volume_accounting.empty else None\n",
        "        \n",
        "        # Print the extracted data\n",
        "        print(f\"\\nExtracted Data for Plan {plan_number} in Version {version}:\")\n",
        "        print(f\"Preprocessor Time: {preprocessor_time:.3f} hr\")\n",
        "        print(f\"Unsteady Compute Time: {unsteady_compute_time:.3f} hr\") \n",
        "        print(f\"Volume Error: {volume_error:.3f}%\" if volume_error is not None else \"Volume Error: None\")\n",
        "        print(f\"Total Time: {total_time/3600:.3f} hr\\n\")\n",
        "        \n",
        "        return {\n",
        "            'Version': version,\n",
        "            'Plan': plan_number,\n",
        "            'Preprocessor Time (hr)': preprocessor_time,\n",
        "            'Unsteady Compute Time (hr)': unsteady_compute_time,\n",
        "            'Volume Error (%)': volume_error,\n",
        "            'Total Time (hr)': total_time / 3600  # convert seconds to hours\n",
        "        }\n",
        "    else:\n",
        "        return None"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Select the plan number you want to run across all versions\n",
        "plan_number = '02'  # Make sure this is a string and include the leading zero\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-11 08:55:43 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Running simulation for Version 6.6, Plan 02\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-11 08:55:44 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-11 08:55:44 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-11 08:55:44 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 08:55:44 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 08:55:44 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-11 08:55:44 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 08:55:44 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 08:55:44 - ras_commander.RasPlan - INFO - Successfully updated run flags in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 08:55:44 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-11 08:55:44 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-11 08:55:44 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\"\n",
            "2025-04-11 09:39:23 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 02\n",
            "2025-04-11 09:39:23 - ras_commander.RasCmdr - INFO - Total run time for plan 02: 2619.15 seconds\n",
            "2025-04-11 09:39:23 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 09:39:23 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 09:39:23 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 09:39:23 - ras_commander.HdfResultsPlan - INFO - Plan Name: SA to Detailed 2D Breach\n",
            "2025-04-11 09:39:23 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 72.0\n",
            "2025-04-11 09:39:23 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 09:39:23 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 09:39:23 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-11 09:39:23 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-11 09:39:23 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-11 09:39:23 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 09:39:23 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 09:39:23 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-11 09:39:23 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 09:39:23 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Extracted Data for Plan 02 in Version 6.6:\n",
            "Preprocessor Time: 0.000 hr\n",
            "Unsteady Compute Time: 0.697 hr\n",
            "Volume Error: 0.007%\n",
            "Total Time: 0.728 hr\n",
            "\n",
            "Completed: Version 6.6, Plan 02\n",
            "Running simulation for Version 6.5, Plan 02\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-11 09:39:23 - ras_commander.RasPlan - INFO - Successfully updated run flags in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 09:39:24 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-11 09:39:24 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-11 09:39:24 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.5\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\"\n",
            "2025-04-11 10:19:24 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 02\n",
            "2025-04-11 10:19:24 - ras_commander.RasCmdr - INFO - Total run time for plan 02: 2400.73 seconds\n",
            "2025-04-11 10:19:25 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 10:19:25 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 10:19:25 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 10:19:25 - ras_commander.HdfResultsPlan - INFO - Plan Name: SA to Detailed 2D Breach\n",
            "2025-04-11 10:19:25 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 72.0\n",
            "2025-04-11 10:19:25 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 10:19:25 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 10:19:25 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-11 10:19:25 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-11 10:19:25 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-11 10:19:25 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 10:19:25 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 10:19:25 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-11 10:19:25 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 10:19:25 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Extracted Data for Plan 02 in Version 6.5:\n",
            "Preprocessor Time: 0.000 hr\n",
            "Unsteady Compute Time: 0.644 hr\n",
            "Volume Error: 0.005%\n",
            "Total Time: 0.667 hr\n",
            "\n",
            "Completed: Version 6.5, Plan 02\n",
            "Running simulation for Version 6.4.1, Plan 02\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-11 10:19:25 - ras_commander.RasPlan - INFO - Successfully updated run flags in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 10:19:25 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-11 10:19:25 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-11 10:19:25 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.4.1\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\"\n",
            "2025-04-11 10:55:45 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 02\n",
            "2025-04-11 10:55:45 - ras_commander.RasCmdr - INFO - Total run time for plan 02: 2180.50 seconds\n",
            "2025-04-11 10:55:45 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 10:55:45 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 10:55:45 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 10:55:45 - ras_commander.HdfResultsPlan - INFO - Plan Name: SA to Detailed 2D Breach\n",
            "2025-04-11 10:55:45 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 72.0\n",
            "2025-04-11 10:55:45 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 10:55:45 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 10:55:45 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-11 10:55:45 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-11 10:55:45 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-11 10:55:45 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 10:55:45 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 10:55:45 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-11 10:55:45 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 10:55:45 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 10:55:45 - ras_commander.RasPlan - INFO - Successfully updated run flags in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 10:55:45 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-11 10:55:46 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-11 10:55:46 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.3.1\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\"\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Extracted Data for Plan 02 in Version 6.4.1:\n",
            "Preprocessor Time: 0.000 hr\n",
            "Unsteady Compute Time: 0.585 hr\n",
            "Volume Error: 0.006%\n",
            "Total Time: 0.606 hr\n",
            "\n",
            "Completed: Version 6.4.1, Plan 02\n",
            "Running simulation for Version 6.3.1, Plan 02\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-11 11:33:29 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 02\n",
            "2025-04-11 11:33:29 - ras_commander.RasCmdr - INFO - Total run time for plan 02: 2263.88 seconds\n",
            "2025-04-11 11:33:29 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 11:33:29 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 11:33:29 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 11:33:29 - ras_commander.HdfResultsPlan - INFO - Plan Name: SA to Detailed 2D Breach\n",
            "2025-04-11 11:33:29 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 72.0\n",
            "2025-04-11 11:33:29 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 11:33:29 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 11:33:29 - ras_commander.RasPrj - CRITICAL - HEC-RAS executable not found at the expected path: C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.3\\Ras.exe\n",
            "2025-04-11 11:33:29 - ras_commander.RasPrj - ERROR - Invalid HEC-RAS version or path: 6.3, returning default path: C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.3\\Ras.exe\n",
            "2025-04-11 11:33:29 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-11 11:33:30 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-11 11:33:30 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-11 11:33:30 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 11:33:30 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 11:33:30 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-11 11:33:30 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 11:33:30 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 11:33:30 - ras_commander.RasPlan - INFO - Successfully updated run flags in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 11:33:30 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-11 11:33:30 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-11 11:33:30 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.3\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\"\n",
            "2025-04-11 11:33:30 - ras_commander.RasCmdr - ERROR - Error running plan: 02\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Extracted Data for Plan 02 in Version 6.3.1:\n",
            "Preprocessor Time: 0.000 hr\n",
            "Unsteady Compute Time: 0.608 hr\n",
            "Volume Error: 0.006%\n",
            "Total Time: 0.629 hr\n",
            "\n",
            "Completed: Version 6.3.1, Plan 02\n",
            "Running simulation for Version 6.3, Plan 02\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-11 11:33:30 - ras_commander.RasCmdr - ERROR - Error message: \n",
            "2025-04-11 11:33:30 - ras_commander.RasCmdr - INFO - Total run time for plan 02: 0.03 seconds\n",
            "2025-04-11 11:33:30 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-11 11:33:30 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-11 11:33:30 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-11 11:33:30 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 11:33:30 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 11:33:30 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-11 11:33:30 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 11:33:30 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 11:33:30 - ras_commander.RasPlan - INFO - Successfully updated run flags in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 11:33:30 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-11 11:33:30 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-11 11:33:30 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.2\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\"\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Failed: Version 6.3, Plan 02\n",
            "Running simulation for Version 6.2, Plan 02\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-11 12:07:43 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 02\n",
            "2025-04-11 12:07:43 - ras_commander.RasCmdr - INFO - Total run time for plan 02: 2052.68 seconds\n",
            "2025-04-11 12:07:43 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 12:07:43 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 12:07:43 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 12:07:43 - ras_commander.HdfResultsPlan - INFO - Plan Name: SA to Detailed 2D Breach\n",
            "2025-04-11 12:07:43 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 72.0\n",
            "2025-04-11 12:07:43 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 12:07:43 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 12:07:43 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-11 12:07:43 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-11 12:07:43 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-11 12:07:43 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 12:07:43 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 12:07:43 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-11 12:07:43 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 12:07:43 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 12:07:43 - ras_commander.RasPlan - INFO - Successfully updated run flags in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 12:07:43 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-11 12:07:43 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-11 12:07:43 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.1\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\"\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Extracted Data for Plan 02 in Version 6.2:\n",
            "Preprocessor Time: 0.000 hr\n",
            "Unsteady Compute Time: 0.549 hr\n",
            "Volume Error: 0.006%\n",
            "Total Time: 0.570 hr\n",
            "\n",
            "Completed: Version 6.2, Plan 02\n",
            "Running simulation for Version 6.1, Plan 02\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-11 12:54:41 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 02\n",
            "2025-04-11 12:54:41 - ras_commander.RasCmdr - INFO - Total run time for plan 02: 2818.52 seconds\n",
            "2025-04-11 12:54:41 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 12:54:41 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 12:54:41 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 12:54:41 - ras_commander.HdfResultsPlan - INFO - Plan Name: SA to Detailed 2D Breach\n",
            "2025-04-11 12:54:41 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 72.0\n",
            "2025-04-11 12:54:41 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 12:54:41 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 12:54:41 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-11 12:54:41 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-11 12:54:41 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-11 12:54:42 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 12:54:42 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 12:54:42 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-11 12:54:42 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 12:54:42 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Extracted Data for Plan 02 in Version 6.1:\n",
            "Preprocessor Time: 0.000 hr\n",
            "Unsteady Compute Time: 0.763 hr\n",
            "Volume Error: 0.006%\n",
            "Total Time: 0.783 hr\n",
            "\n",
            "Completed: Version 6.1, Plan 02\n",
            "Running simulation for Version 6.0, Plan 02\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-11 12:54:42 - ras_commander.RasPlan - INFO - Successfully updated run flags in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-11 12:54:42 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-11 12:54:42 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-11 12:54:42 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.0\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\"\n",
            "2025-04-11 13:40:33 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 02\n",
            "2025-04-11 13:40:33 - ras_commander.RasCmdr - INFO - Total run time for plan 02: 2750.95 seconds\n",
            "2025-04-11 13:40:33 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 13:40:33 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 13:40:33 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 13:40:33 - ras_commander.HdfResultsPlan - INFO - Plan Name: SA to Detailed 2D Breach\n",
            "2025-04-11 13:40:33 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 72.0\n",
            "2025-04-11 13:40:33 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-11 13:40:33 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Extracted Data for Plan 02 in Version 6.0:\n",
            "Preprocessor Time: 0.000 hr\n",
            "Unsteady Compute Time: 0.758 hr\n",
            "Volume Error: 0.006%\n",
            "Total Time: 0.764 hr\n",
            "\n",
            "Completed: Version 6.0, Plan 02\n",
            "Initial results saved to 'save_initial_results.csv'\n"
          ]
        }
      ],
      "source": [
        "# Run simulations for all versions with plan_number defined by user\n",
        "results = []\n",
        "for version in versions:\n",
        "    print(f\"Running simulation for Version {version}, Plan {plan_number}\")\n",
        "    result = run_simulation(version, plan_number) \n",
        "    if result is not None:  # Check if result is not None\n",
        "        results.append(result)\n",
        "        print(f\"Completed: Version {version}, Plan {plan_number}\")\n",
        "    else:\n",
        "        print(f\"Failed: Version {version}, Plan {plan_number}\")\n",
        "\n",
        "# Create DataFrame from results\n",
        "df = pd.DataFrame(results)\n",
        "\n",
        "# Save initial results to CSV\n",
        "df.to_csv('save_initial_results.csv', index=False)\n",
        "\n",
        "print(\"Initial results saved to 'save_initial_results.csv'\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-11 13:40:33 - matplotlib.category - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.\n",
            "2025-04-11 13:40:33 - matplotlib.category - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.\n",
            "2025-04-11 13:40:33 - matplotlib.category - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.\n",
            "2025-04-11 13:40:33 - matplotlib.category - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Create line graphs\n",
        "plt.figure(figsize=(12, 6))\n",
        "\n",
        "# Unsteady Runtime vs Version\n",
        "plt.subplot(1, 2, 1)\n",
        "# Convert Version to categorical type to handle string versions properly\n",
        "plt.plot(pd.Categorical(df['Version']), df['Unsteady Compute Time (hr)'], marker='o')\n",
        "plt.title(f'Unsteady Runtime vs HEC-RAS Version (Plan {plan_number})')\n",
        "plt.xlabel('HEC-RAS Version')\n",
        "plt.ylabel('Unsteady Runtime (hours)')\n",
        "plt.grid(True, linestyle='--', alpha=0.7)\n",
        "\n",
        "# Volume Error vs Version\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.plot(pd.Categorical(df['Version']), df['Volume Error (%)'], marker='o')\n",
        "plt.title(f'Volume Error vs HEC-RAS Version (Plan {plan_number})')\n",
        "plt.xlabel('HEC-RAS Version')\n",
        "plt.ylabel('Volume Error (%)')\n",
        "plt.grid(True, linestyle='--', alpha=0.7)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 08:27:31 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-10 08:27:31 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-10 08:27:31 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-10 08:27:31 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p13\n",
            "2025-04-10 08:27:31 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p13\n",
            "2025-04-10 08:27:31 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-10 08:27:31 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p13\n",
            "2025-04-10 08:27:31 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p13\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Running simulation for Version 6.6, Plan 13 with 2 cores\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 08:27:31 - ras_commander.RasPlan - INFO - Successfully updated run flags in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p13\n",
            "2025-04-10 08:27:31 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-10 08:27:31 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-10 08:27:31 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p13\"\n",
            "2025-04-10 08:31:42 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 13\n",
            "2025-04-10 08:31:42 - ras_commander.RasCmdr - INFO - Total run time for plan 13: 251.69 seconds\n",
            "2025-04-10 08:31:42 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p13.hdf\n",
            "2025-04-10 08:31:42 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p13.hdf\n",
            "2025-04-10 08:31:42 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: BaldEagleDamBrk.p13.hdf\n",
            "2025-04-10 08:31:42 - ras_commander.HdfResultsPlan - INFO - Plan Name: PMF with Multi 2D Areas\n",
            "2025-04-10 08:31:42 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 72.0\n",
            "2025-04-10 08:31:42 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p13.hdf\n",
            "2025-04-10 08:31:42 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p13.hdf\n",
            "2025-04-10 08:31:42 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-10 08:31:43 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-10 08:31:43 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-10 08:31:43 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p15\n",
            "2025-04-10 08:31:43 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p15\n",
            "2025-04-10 08:31:43 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-10 08:31:43 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p15\n",
            "2025-04-10 08:31:43 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p15\n",
            "2025-04-10 08:31:43 - ras_commander.RasPlan - INFO - Successfully updated run flags in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p15\n",
            "2025-04-10 08:31:43 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-10 08:31:43 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-10 08:31:43 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p15\"\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Completed: Plan 13 with 2 cores\n",
            "Running simulation for Version 6.6, Plan 15 with 2 cores\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 08:36:06 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 15\n",
            "2025-04-10 08:36:06 - ras_commander.RasCmdr - INFO - Total run time for plan 15: 263.55 seconds\n",
            "2025-04-10 08:36:06 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p15.hdf\n",
            "2025-04-10 08:36:06 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p15.hdf\n",
            "2025-04-10 08:36:06 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: BaldEagleDamBrk.p15.hdf\n",
            "2025-04-10 08:36:06 - ras_commander.HdfResultsPlan - INFO - Plan Name: 1d-2D Dambreak Refined Grid\n",
            "2025-04-10 08:36:06 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 72.0\n",
            "2025-04-10 08:36:06 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p15.hdf\n",
            "2025-04-10 08:36:06 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p15.hdf\n",
            "2025-04-10 08:36:06 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-10 08:36:06 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-10 08:36:06 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-10 08:36:06 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p17\n",
            "2025-04-10 08:36:06 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p17\n",
            "2025-04-10 08:36:06 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-10 08:36:06 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p17\n",
            "2025-04-10 08:36:06 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p17\n",
            "2025-04-10 08:36:06 - ras_commander.RasPlan - INFO - Successfully updated run flags in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p17\n",
            "2025-04-10 08:36:06 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-10 08:36:06 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Completed: Plan 15 with 2 cores\n",
            "Running simulation for Version 6.6, Plan 17 with 2 cores\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 08:36:06 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p17\"\n",
            "2025-04-10 08:40:04 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 17\n",
            "2025-04-10 08:40:04 - ras_commander.RasCmdr - INFO - Total run time for plan 17: 237.88 seconds\n",
            "2025-04-10 08:40:04 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p17.hdf\n",
            "2025-04-10 08:40:04 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p17.hdf\n",
            "2025-04-10 08:40:04 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: BaldEagleDamBrk.p17.hdf\n",
            "2025-04-10 08:40:04 - ras_commander.HdfResultsPlan - INFO - Plan Name: 2D to 1D No Dam\n",
            "2025-04-10 08:40:04 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 120.0\n",
            "2025-04-10 08:40:04 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p17.hdf\n",
            "2025-04-10 08:40:04 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p17.hdf\n",
            "2025-04-10 08:40:04 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-10 08:40:04 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-10 08:40:04 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-10 08:40:04 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p18\n",
            "2025-04-10 08:40:04 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p18\n",
            "2025-04-10 08:40:04 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-10 08:40:04 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p18\n",
            "2025-04-10 08:40:04 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p18\n",
            "2025-04-10 08:40:04 - ras_commander.RasPlan - INFO - Successfully updated run flags in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p18\n",
            "2025-04-10 08:40:04 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-10 08:40:04 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-10 08:40:04 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p18\"\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Completed: Plan 17 with 2 cores\n",
            "Running simulation for Version 6.6, Plan 18 with 2 cores\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 08:41:20 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 18\n",
            "2025-04-10 08:41:20 - ras_commander.RasCmdr - INFO - Total run time for plan 18: 75.89 seconds\n",
            "2025-04-10 08:41:20 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p18.hdf\n",
            "2025-04-10 08:41:20 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p18.hdf\n",
            "2025-04-10 08:41:20 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: BaldEagleDamBrk.p18.hdf\n",
            "2025-04-10 08:41:20 - ras_commander.HdfResultsPlan - INFO - Plan Name: 2D to 2D Run\n",
            "2025-04-10 08:41:20 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 72.0\n",
            "2025-04-10 08:41:20 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p18.hdf\n",
            "2025-04-10 08:41:20 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p18.hdf\n",
            "2025-04-10 08:41:20 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-10 08:41:20 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-10 08:41:20 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-10 08:41:21 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p19\n",
            "2025-04-10 08:41:21 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p19\n",
            "2025-04-10 08:41:21 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-10 08:41:21 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p19\n",
            "2025-04-10 08:41:21 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p19\n",
            "2025-04-10 08:41:21 - ras_commander.RasPlan - INFO - Successfully updated run flags in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p19\n",
            "2025-04-10 08:41:21 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-10 08:41:21 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-10 08:41:21 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p19\"\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Completed: Plan 18 with 2 cores\n",
            "Running simulation for Version 6.6, Plan 19 with 2 cores\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 08:42:23 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 19\n",
            "2025-04-10 08:42:23 - ras_commander.RasCmdr - INFO - Total run time for plan 19: 62.23 seconds\n",
            "2025-04-10 08:42:23 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p19.hdf\n",
            "2025-04-10 08:42:23 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p19.hdf\n",
            "2025-04-10 08:42:23 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: BaldEagleDamBrk.p19.hdf\n",
            "2025-04-10 08:42:23 - ras_commander.HdfResultsPlan - INFO - Plan Name: SA to 2D Dam Break Run\n",
            "2025-04-10 08:42:23 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 72.0\n",
            "2025-04-10 08:42:23 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p19.hdf\n",
            "2025-04-10 08:42:23 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p19.hdf\n",
            "2025-04-10 08:42:23 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-10 08:42:23 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-10 08:42:23 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-10 08:42:23 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p03\n",
            "2025-04-10 08:42:23 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p03\n",
            "2025-04-10 08:42:23 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-10 08:42:23 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p03\n",
            "2025-04-10 08:42:23 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p03\n",
            "2025-04-10 08:42:23 - ras_commander.RasPlan - INFO - Successfully updated run flags in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p03\n",
            "2025-04-10 08:42:23 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-10 08:42:23 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-10 08:42:23 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p03\"\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Completed: Plan 19 with 2 cores\n",
            "Running simulation for Version 6.6, Plan 03 with 2 cores\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 08:47:06 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 03\n",
            "2025-04-10 08:47:06 - ras_commander.RasCmdr - INFO - Total run time for plan 03: 283.12 seconds\n",
            "2025-04-10 08:47:06 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p03.hdf\n",
            "2025-04-10 08:47:06 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p03.hdf\n",
            "2025-04-10 08:47:06 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: BaldEagleDamBrk.p03.hdf\n",
            "2025-04-10 08:47:06 - ras_commander.HdfResultsPlan - INFO - Plan Name: Single 2D Area - Internal Dam Structure\n",
            "2025-04-10 08:47:06 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 72.0\n",
            "2025-04-10 08:47:06 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p03.hdf\n",
            "2025-04-10 08:47:06 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p03.hdf\n",
            "2025-04-10 08:47:06 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-10 08:47:06 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-10 08:47:06 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-10 08:47:06 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p04\n",
            "2025-04-10 08:47:06 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p04\n",
            "2025-04-10 08:47:06 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-10 08:47:06 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p04\n",
            "2025-04-10 08:47:06 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p04\n",
            "2025-04-10 08:47:06 - ras_commander.RasPlan - INFO - Successfully updated run flags in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p04\n",
            "2025-04-10 08:47:06 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-10 08:47:06 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-10 08:47:06 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p04\"\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Completed: Plan 03 with 2 cores\n",
            "Running simulation for Version 6.6, Plan 04 with 2 cores\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 08:52:56 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 04\n",
            "2025-04-10 08:52:56 - ras_commander.RasCmdr - INFO - Total run time for plan 04: 349.75 seconds\n",
            "2025-04-10 08:52:56 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p04.hdf\n",
            "2025-04-10 08:52:56 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p04.hdf\n",
            "2025-04-10 08:52:56 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: BaldEagleDamBrk.p04.hdf\n",
            "2025-04-10 08:52:56 - ras_commander.HdfResultsPlan - INFO - Plan Name: SA to 2D Area Conn - 2D Levee Structure\n",
            "2025-04-10 08:52:56 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 72.0\n",
            "2025-04-10 08:52:56 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p04.hdf\n",
            "2025-04-10 08:52:56 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p04.hdf\n",
            "2025-04-10 08:52:56 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-10 08:52:56 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-10 08:52:56 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-10 08:52:56 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-10 08:52:56 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-10 08:52:56 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-10 08:52:56 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-10 08:52:56 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-10 08:52:56 - ras_commander.RasPlan - INFO - Successfully updated run flags in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\n",
            "2025-04-10 08:52:56 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-10 08:52:56 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-10 08:52:56 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02\"\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Completed: Plan 04 with 2 cores\n",
            "Running simulation for Version 6.6, Plan 02 with 2 cores\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 09:35:01 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 02\n",
            "2025-04-10 09:35:01 - ras_commander.RasCmdr - INFO - Total run time for plan 02: 2525.09 seconds\n",
            "2025-04-10 09:35:01 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-10 09:35:01 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-10 09:35:01 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: BaldEagleDamBrk.p02.hdf\n",
            "2025-04-10 09:35:01 - ras_commander.HdfResultsPlan - INFO - Plan Name: SA to Detailed 2D Breach\n",
            "2025-04-10 09:35:01 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 72.0\n",
            "2025-04-10 09:35:01 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-10 09:35:02 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p02.hdf\n",
            "2025-04-10 09:35:02 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-10 09:35:02 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-10 09:35:02 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-10 09:35:02 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p01\n",
            "2025-04-10 09:35:02 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p01\n",
            "2025-04-10 09:35:02 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-10 09:35:02 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p01\n",
            "2025-04-10 09:35:02 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p01\n",
            "2025-04-10 09:35:02 - ras_commander.RasPlan - INFO - Successfully updated run flags in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p01\n",
            "2025-04-10 09:35:02 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-10 09:35:02 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-10 09:35:02 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p01\"\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Completed: Plan 02 with 2 cores\n",
            "Running simulation for Version 6.6, Plan 01 with 2 cores\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 11:50:02 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 01\n",
            "2025-04-10 11:50:02 - ras_commander.RasCmdr - INFO - Total run time for plan 01: 8100.80 seconds\n",
            "2025-04-10 11:50:02 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p01.hdf\n",
            "2025-04-10 11:50:03 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p01.hdf\n",
            "2025-04-10 11:50:03 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: BaldEagleDamBrk.p01.hdf\n",
            "2025-04-10 11:50:03 - ras_commander.HdfResultsPlan - INFO - Plan Name: SA to Detailed 2D Breach FEQ\n",
            "2025-04-10 11:50:03 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 72.0\n",
            "2025-04-10 11:50:03 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p01.hdf\n",
            "2025-04-10 11:50:03 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p01.hdf\n",
            "2025-04-10 11:50:03 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-10 11:50:03 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-10 11:50:03 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-10 11:50:03 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p05\n",
            "2025-04-10 11:50:03 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p05\n",
            "2025-04-10 11:50:03 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-10 11:50:03 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p05\n",
            "2025-04-10 11:50:03 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p05\n",
            "2025-04-10 11:50:03 - ras_commander.RasPlan - INFO - Successfully updated run flags in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p05\n",
            "2025-04-10 11:50:03 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-10 11:50:03 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Completed: Plan 01 with 2 cores\n",
            "Running simulation for Version 6.6, Plan 05 with 2 cores\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 11:50:03 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p05\"\n",
            "2025-04-10 12:45:53 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 05\n",
            "2025-04-10 12:45:53 - ras_commander.RasCmdr - INFO - Total run time for plan 05: 3350.66 seconds\n",
            "2025-04-10 12:45:53 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p05.hdf\n",
            "2025-04-10 12:45:53 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p05.hdf\n",
            "2025-04-10 12:45:53 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: BaldEagleDamBrk.p05.hdf\n",
            "2025-04-10 12:45:53 - ras_commander.HdfResultsPlan - INFO - Plan Name: Single 2D area with Bridges FEQ\n",
            "2025-04-10 12:45:53 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 72.0\n",
            "2025-04-10 12:45:53 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p05.hdf\n",
            "2025-04-10 12:45:53 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p05.hdf\n",
            "2025-04-10 12:45:53 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-10 12:45:53 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-10 12:45:53 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-10 12:45:53 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06\n",
            "2025-04-10 12:45:53 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06\n",
            "2025-04-10 12:45:53 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-10 12:45:53 - ras_commander.RasUtils - INFO - Constructed plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06\n",
            "2025-04-10 12:45:53 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06\n",
            "2025-04-10 12:45:54 - ras_commander.RasPlan - INFO - Successfully updated run flags in plan file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06\n",
            "2025-04-10 12:45:54 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "2025-04-10 12:45:54 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-10 12:45:54 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06\"\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Completed: Plan 05 with 2 cores\n",
            "Running simulation for Version 6.6, Plan 06 with 2 cores\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 12:52:53 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 06\n",
            "2025-04-10 12:52:53 - ras_commander.RasCmdr - INFO - Total run time for plan 06: 419.02 seconds\n",
            "2025-04-10 12:52:53 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-10 12:52:53 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-10 12:52:53 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: BaldEagleDamBrk.p06.hdf\n",
            "2025-04-10 12:52:53 - ras_commander.HdfResultsPlan - INFO - Plan Name: Gridded Precip - Infiltration\n",
            "2025-04-10 12:52:53 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 120.0\n",
            "2025-04-10 12:52:53 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-10 12:52:53 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Completed: Plan 06 with 2 cores\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 4 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Results saved to 'hecras_plan_comparison_2core.csv'\n",
            "\n",
            "Summary Statistics (2 Cores):\n",
            "       Preprocessor Time (hr)  Unsteady Compute Time (hr)  Volume Error (%)  \\\n",
            "count               11.000000                   11.000000         11.000000   \n",
            "mean                 0.013817                    0.378679          0.033688   \n",
            "std                  0.025619                    0.677487          0.082888   \n",
            "min                  0.000026                    0.014466          0.000331   \n",
            "25%                  0.000030                    0.025326          0.001145   \n",
            "50%                  0.000031                    0.071667          0.001792   \n",
            "75%                  0.017129                    0.393609          0.017761   \n",
            "max                  0.079262                    2.228099          0.280763   \n",
            "\n",
            "       Total Time (hr)  \n",
            "count        11.000000  \n",
            "mean          0.402026  \n",
            "std           0.684730  \n",
            "min           0.017300  \n",
            "25%           0.068008  \n",
            "50%           0.078656  \n",
            "75%           0.408916  \n",
            "max           2.250239  \n"
          ]
        }
      ],
      "source": [
        "# Benchmark all plans with 2 cores in HEC-RAS 6.6\n",
        "results_2core = []\n",
        "\n",
        "# Loop through each plan number\n",
        "for plan in plan_numbers:\n",
        "    print(f\"Running simulation for Version 6.6, Plan {plan} with 2 cores\")\n",
        "    \n",
        "    # Initialize project for 6.6\n",
        "    ras_project = init_ras_project(project_path, \"6.6\")\n",
        "    \n",
        "    # Clear geometry preprocessor files\n",
        "    plan_path = RasPlan.get_plan_path(plan, ras_object=ras_project)\n",
        "    RasGeo.clear_geompre_files(plan_path, ras_object=ras_project)\n",
        "    \n",
        "    # Set number of cores to 2\n",
        "    RasPlan.set_num_cores(plan, \"2\", ras_object=ras_project)\n",
        "    \n",
        "    # Update plan run flags\n",
        "    RasPlan.update_run_flags(plan, {\"Run HTab\": 1}, ras_object=ras_project)\n",
        "    \n",
        "    # Compute the plan\n",
        "    start_time = time.time()\n",
        "    success = RasCmdr.compute_plan(plan, ras_object=ras_project)\n",
        "    total_time = time.time() - start_time\n",
        "    \n",
        "    if success:\n",
        "        # Get HDF file path\n",
        "        hdf_path = RasPlan.get_results_path(plan, ras_object=ras_project)\n",
        "        \n",
        "        # Extract runtime data\n",
        "        runtime_data = HdfResultsPlan.get_runtime_data(hdf_path)\n",
        "        preprocessor_time = runtime_data['Preprocessing Geometry (hr)'].values[0]\n",
        "        unsteady_compute_time = runtime_data['Unsteady Flow Computations (hr)'].values[0]\n",
        "        \n",
        "        # Get volume accounting\n",
        "        volume_accounting = HdfResultsPlan.get_volume_accounting(hdf_path)\n",
        "        volume_error = volume_accounting['Error Percent'].values[0] if not volume_accounting.empty else None\n",
        "        \n",
        "        result = {\n",
        "            'Plan': plan,\n",
        "            'Preprocessor Time (hr)': preprocessor_time,\n",
        "            'Unsteady Compute Time (hr)': unsteady_compute_time,\n",
        "            'Volume Error (%)': volume_error,\n",
        "            'Total Time (hr)': total_time / 3600\n",
        "        }\n",
        "        results_2core.append(result)\n",
        "        print(f\"Completed: Plan {plan} with 2 cores\")\n",
        "    else:\n",
        "        print(f\"Failed: Plan {plan} with 2 cores\")\n",
        "\n",
        "# Convert results to DataFrame\n",
        "df_2core = pd.DataFrame(results_2core)\n",
        "\n",
        "# Get plan titles from ras.plan_df and merge with results\n",
        "plan_titles = pd.DataFrame({\n",
        "    'Plan': ras.plan_df['plan_number'].str.zfill(2),\n",
        "    'Short Identifier': ras.plan_df['Short Identifier']\n",
        "})\n",
        "df_2core['Plan'] = df_2core['Plan'].astype(str).str.zfill(2)\n",
        "df_2core = df_2core.merge(plan_titles, on='Plan', how='left')\n",
        "\n",
        "# Create visualization\n",
        "plt.figure(figsize=(15, 10))\n",
        "\n",
        "# Plot 1: Unsteady Runtime\n",
        "plt.subplot(2, 2, 1)\n",
        "bars = plt.bar(range(len(df_2core)), df_2core['Unsteady Compute Time (hr)'], color='blue', alpha=0.7)\n",
        "plt.title('Unsteady Runtime by Plan (2 Cores)', fontsize=12)\n",
        "plt.ylabel('Unsteady Runtime (hours)', fontsize=10)\n",
        "plt.grid(True, linestyle='--', alpha=0.7)\n",
        "plt.xticks(range(len(df_2core)), [f\"Plan {plan}\\n{title}\" for plan, title in zip(df_2core['Plan'], df_2core['Short Identifier'])], rotation=45, ha='right')\n",
        "\n",
        "# Plot 2: Volume Error\n",
        "plt.subplot(2, 2, 2)\n",
        "plt.bar(range(len(df_2core)), df_2core['Volume Error (%)'], color='red', alpha=0.7)\n",
        "plt.title('Volume Error by Plan (2 Cores)', fontsize=12)\n",
        "plt.ylabel('Volume Error (%)', fontsize=10)\n",
        "plt.grid(True, linestyle='--', alpha=0.7)\n",
        "plt.xticks(range(len(df_2core)), [f\"Plan {plan}\\n{title}\" for plan, title in zip(df_2core['Plan'], df_2core['Short Identifier'])], rotation=45, ha='right')\n",
        "\n",
        "# Plot 3: Preprocessor Time\n",
        "plt.subplot(2, 2, 3)\n",
        "plt.bar(range(len(df_2core)), df_2core['Preprocessor Time (hr)'], color='green', alpha=0.7)\n",
        "plt.title('Preprocessor Time by Plan (2 Cores)', fontsize=12)\n",
        "plt.ylabel('Preprocessor Time (hours)', fontsize=10)\n",
        "plt.grid(True, linestyle='--', alpha=0.7)\n",
        "plt.xticks(range(len(df_2core)), [f\"Plan {plan}\\n{title}\" for plan, title in zip(df_2core['Plan'], df_2core['Short Identifier'])], rotation=45, ha='right')\n",
        "\n",
        "# Plot 4: Total Runtime\n",
        "plt.subplot(2, 2, 4)\n",
        "plt.bar(range(len(df_2core)), df_2core['Total Time (hr)'], color='purple', alpha=0.7)\n",
        "plt.title('Total Runtime by Plan (2 Cores)', fontsize=12)\n",
        "plt.ylabel('Total Runtime (hours)', fontsize=10)\n",
        "plt.grid(True, linestyle='--', alpha=0.7)\n",
        "plt.xticks(range(len(df_2core)), [f\"Plan {plan}\\n{title}\" for plan, title in zip(df_2core['Plan'], df_2core['Short Identifier'])], rotation=45, ha='right')\n",
        "\n",
        "plt.tight_layout(pad=3.0)\n",
        "plt.suptitle('Plan Performance Comparison (2 Cores)', fontsize=14, y=1.02)\n",
        "plt.show()\n",
        "\n",
        "# Save results to CSV\n",
        "df_2core.to_csv('hecras_plan_comparison_2core.csv', index=False)\n",
        "print(\"Results saved to 'hecras_plan_comparison_2core.csv'\")\n",
        "\n",
        "# Display summary statistics\n",
        "print(\"\\nSummary Statistics (2 Cores):\")\n",
        "print(df_2core.describe())"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "rascmdr",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}
==================================================

File: c:\GH\ras-commander\examples\103_Running_AEP_Events_from_Atlas_14.ipynb
==================================================
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# AEP Storm Analysis with RAS-Commander\n",
        "\n",
        "This notebook automates the end-to-end process of analyzing multiple storm events with different Annual Exceedance Probabilities (AEP) in HEC-RAS. It covers:\n",
        "\n",
        "1. Generating hyetographs from NOAA Atlas 14 precipitation data\n",
        "2. Creating HEC-RAS plan files for each AEP event\n",
        "3. Creating unsteady flow files with the generated hyetographs\n",
        "4. Executing multiple plans in parallel\n",
        "5. Analyzing and visualizing the results\n",
        "\n",
        "This automation is particularly useful for analyzing how a drainage system performs under different storm frequencies, from common events (e.g., 2-year) to rare events (e.g., 100-year)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Setup and Import Libraries\n",
        "\n",
        "First, we'll import all the necessary libraries and set up our environment."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Import necessary libraries\n",
        "import os\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import re\n",
        "import time\n",
        "from pathlib import Path\n",
        "from datetime import datetime\n",
        "from IPython import display\n",
        "import psutil  # For getting system CPU info\n",
        "\n",
        "# Install ras-commander if not already installed\n",
        "# Uncomment this line if you need to install the package\n",
        "# !pip install ras-commander\n",
        "\n",
        "# Import RAS-Commander modules\n",
        "from ras_commander import *"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 05:05:41 - ras_commander.RasExamples - INFO - Found zip file: d:\\GitHub\\ras-commander\\examples\\Example_Projects_6_6.zip\n",
            "2025-04-10 05:05:41 - ras_commander.RasExamples - INFO - Loading project data from CSV...\n",
            "2025-04-10 05:05:41 - ras_commander.RasExamples - INFO - Loaded 68 projects from CSV.\n",
            "2025-04-10 05:05:41 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
            "2025-04-10 05:05:41 - ras_commander.RasExamples - INFO - Extracting project 'Davis'\n",
            "2025-04-10 05:05:41 - ras_commander.RasExamples - INFO - Project 'Davis' already exists. Deleting existing folder...\n",
            "2025-04-10 05:05:41 - ras_commander.RasExamples - INFO - Existing folder for project 'Davis' has been deleted.\n",
            "2025-04-10 05:05:42 - ras_commander.RasExamples - INFO - Successfully extracted project 'Davis' to d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\n"
          ]
        },
        {
          "data": {
            "text/plain": "[\"WindowsPath('d:/GitHub/ras-commander/examples/example_projects/Davis')\"]"
          },
          "execution_count": 2,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "RasExamples.extract_project([\"Davis\"])\n",
        "# This loads the project in fresh"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Define Hyetograph Generation Functions\n",
        "\n",
        "These functions handle reading precipitation frequency data from NOAA Atlas 14 and generating balanced storm hyetographs using the Alternating Block Method."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {},
      "outputs": [],
      "source": [
        "def parse_duration(duration_str):\n",
        "    \"\"\"\n",
        "    Parses a duration string and converts it to hours.\n",
        "    Examples: \"5-min:\" -> 0.0833 hours, \"2-hr:\" -> 2 hours, \"2-day:\" -> 48 hours\n",
        "    \"\"\"\n",
        "    match = re.match(r'(\\d+)-(\\w+):', duration_str.strip())\n",
        "    if not match:\n",
        "        raise ValueError(f\"Invalid duration format: {duration_str}\")\n",
        "    value, unit = match.groups()\n",
        "    value = int(value)\n",
        "    unit = unit.lower()\n",
        "    if unit in ['min', 'minute', 'minutes']:\n",
        "        hours = value / 60.0\n",
        "    elif unit in ['hr', 'hour', 'hours']:\n",
        "        hours = value\n",
        "    elif unit in ['day', 'days']:\n",
        "        hours = value * 24\n",
        "    else:\n",
        "        raise ValueError(f\"Unknown time unit in duration: {unit}\")\n",
        "    return hours\n",
        "\n",
        "def read_precipitation_data(csv_file):\n",
        "    \"\"\"\n",
        "    Reads the precipitation frequency CSV and returns a DataFrame\n",
        "    with durations in hours as the index and ARIs as columns.\n",
        "    \"\"\"\n",
        "    with open(csv_file, 'r') as f:\n",
        "        lines = f.readlines()\n",
        "\n",
        "    header_line_idx = None\n",
        "    header_pattern = re.compile(r'^by duration for ari', re.IGNORECASE)\n",
        "\n",
        "    # Locate the header line\n",
        "    for idx, line in enumerate(lines):\n",
        "        if header_pattern.match(line.strip().lower()):\n",
        "            header_line_idx = idx\n",
        "            break\n",
        "\n",
        "    if header_line_idx is None:\n",
        "        raise ValueError('Header line for precipitation frequency estimates not found in CSV file.')\n",
        "\n",
        "    # Extract the ARI headers from the header line\n",
        "    header_line = lines[header_line_idx].strip()\n",
        "    headers = [item.strip() for item in header_line.split(',')]\n",
        "    \n",
        "    if len(headers) < 2:\n",
        "        raise ValueError('Insufficient number of ARI columns found in the header line.')\n",
        "\n",
        "    aris = headers[1:]  # Exclude the first column which is the duration\n",
        "\n",
        "    # Define the pattern for data lines (e.g., \"5-min:\", \"10-min:\", etc.)\n",
        "    duration_pattern = re.compile(r'^\\d+-(min|hr|day):')\n",
        "\n",
        "    # Initialize lists to store durations and corresponding depths\n",
        "    durations = []\n",
        "    depths = {ari: [] for ari in aris}\n",
        "\n",
        "    # Iterate over the lines following the header to extract data\n",
        "    for line in lines[header_line_idx + 1:]:\n",
        "        line = line.strip()\n",
        "        if not line:\n",
        "            continue  # Skip empty lines\n",
        "        if not duration_pattern.match(line):\n",
        "            break  # Stop if the line does not match the duration pattern\n",
        "        parts = [part.strip() for part in line.split(',')]\n",
        "        if len(parts) != len(headers):\n",
        "            raise ValueError(f\"Data row does not match header columns: {line}\")\n",
        "        duration_str = parts[0]\n",
        "        try:\n",
        "            duration_hours = parse_duration(duration_str)\n",
        "        except ValueError as ve:\n",
        "            print(f\"Skipping line due to error: {ve}\")\n",
        "            continue  # Skip lines with invalid duration formats\n",
        "        durations.append(duration_hours)\n",
        "        for ari, depth_str in zip(aris, parts[1:]):\n",
        "            try:\n",
        "                depth = float(depth_str)\n",
        "            except ValueError:\n",
        "                depth = np.nan  # Assign NaN for invalid depth values\n",
        "            depths[ari].append(depth)\n",
        "\n",
        "    # Create the DataFrame\n",
        "    df = pd.DataFrame(depths, index=durations)\n",
        "    df.index.name = 'Duration_hours'\n",
        "\n",
        "    # Drop any rows with NaN values\n",
        "    df = df.dropna()\n",
        "\n",
        "    return df\n",
        "\n",
        "def interpolate_depths(df, total_duration):\n",
        "    \"\"\"\n",
        "    Interpolates precipitation depths for each ARI on a log-log scale\n",
        "    for each hour up to the total storm duration.\n",
        "    \"\"\"\n",
        "    T = total_duration\n",
        "    t_hours = np.arange(1, T+1)\n",
        "    D = {}\n",
        "    for ari in df.columns:\n",
        "        durations = df.index.values\n",
        "        depths = df[ari].values\n",
        "        # Ensure all depths are positive\n",
        "        if np.any(depths <= 0):\n",
        "            raise ValueError(f\"Non-positive depth value in ARI {ari}\")\n",
        "        # Log-log interpolation\n",
        "        log_durations = np.log(durations)\n",
        "        log_depths = np.log(depths)\n",
        "        log_t = np.log(t_hours)\n",
        "        log_D_t = np.interp(log_t, log_durations, log_depths)\n",
        "        D_t = np.exp(log_D_t)\n",
        "        D[ari] = D_t\n",
        "    return D\n",
        "\n",
        "def compute_incremental_depths(D, total_duration):\n",
        "    \"\"\"\n",
        "    Computes incremental precipitation depths for each hour.\n",
        "    I(t) = D(t) - D(t-1), with D(0) = 0.\n",
        "    \"\"\"\n",
        "    incremental_depths = {}\n",
        "    for ari, D_t in D.items():\n",
        "        I_t = np.empty(total_duration)\n",
        "        I_t[0] = D_t[0]  # I(1) = D(1) - D(0) = D(1)\n",
        "        I_t[1:] = D_t[1:] - D_t[:-1]\n",
        "        incremental_depths[ari] = I_t\n",
        "    return incremental_depths\n",
        "\n",
        "def assign_alternating_block(sorted_depths, max_depth, central_index, T):\n",
        "    \"\"\"\n",
        "    Assigns incremental depths to the hyetograph using the Alternating Block Method.\n",
        "    \"\"\"\n",
        "    hyetograph = [0.0] * T\n",
        "    hyetograph[central_index] = max_depth\n",
        "    remaining_depths = sorted_depths.copy()\n",
        "    remaining_depths.remove(max_depth)\n",
        "    left = central_index - 1\n",
        "    right = central_index + 1\n",
        "    toggle = True  # Start assigning to the right\n",
        "    for depth in remaining_depths:\n",
        "        if toggle and right < T:\n",
        "            hyetograph[right] = depth\n",
        "            right += 1\n",
        "        elif not toggle and left >= 0:\n",
        "            hyetograph[left] = depth\n",
        "            left -= 1\n",
        "        elif right < T:\n",
        "            hyetograph[right] = depth\n",
        "            right += 1\n",
        "        elif left >= 0:\n",
        "            hyetograph[left] = depth\n",
        "            left -= 1\n",
        "        else:\n",
        "            print(\"Warning: Not all incremental depths assigned.\")\n",
        "            break\n",
        "        toggle = not toggle\n",
        "    return hyetograph\n",
        "\n",
        "def generate_hyetograph(incremental_depths, position_percent, T):\n",
        "    \"\"\"\n",
        "    Generates the hyetograph for a given ARI using the Alternating Block Method.\n",
        "    \"\"\"\n",
        "    max_depth = np.max(incremental_depths)\n",
        "    incremental_depths_list = incremental_depths.tolist()\n",
        "    central_index = int(round(T * position_percent / 100)) - 1\n",
        "    central_index = max(0, min(central_index, T - 1))\n",
        "    sorted_depths = sorted(incremental_depths_list, reverse=True)\n",
        "    hyetograph = assign_alternating_block(sorted_depths, max_depth, central_index, T)\n",
        "    return hyetograph\n",
        "\n",
        "def save_hyetograph(hyetograph, ari, output_dir, position_percent, total_duration):\n",
        "    \"\"\"\n",
        "    Saves the hyetograph to a CSV file.\n",
        "    \"\"\"\n",
        "    df = pd.DataFrame({\n",
        "        'Time_hour': np.arange(1, total_duration + 1),\n",
        "        'Precipitation_in': hyetograph\n",
        "    })\n",
        "    filename = f'hyetograph_ARI_{ari}_years_pos{position_percent}pct_{total_duration}hr.csv'\n",
        "    output_file = os.path.join(output_dir, filename)\n",
        "    df.to_csv(output_file, index=False)\n",
        "    print(f\"Hyetograph for ARI {ari} years saved to {output_file}\")\n",
        "    return output_file\n",
        "\n",
        "def plot_multiple_hyetographs(aris, position_percent, total_duration, output_dir='hyetographs'):\n",
        "    \"\"\"\n",
        "    Plots multiple hyetographs for specified ARIs on the same figure for comparison.\n",
        "    \"\"\"\n",
        "    plt.figure(figsize=(14, 7))\n",
        "    \n",
        "    for ari in aris:\n",
        "        # Ensure ARI is a string for consistent filename formatting\n",
        "        ari_str = str(ari)\n",
        "        \n",
        "        # Construct the filename based on the naming convention\n",
        "        filename = f'hyetograph_ARI_{ari_str}_years_pos{position_percent}pct_{total_duration}hr.csv'\n",
        "        filepath = os.path.join(output_dir, filename)\n",
        "        \n",
        "        # Check if the file exists\n",
        "        if not os.path.exists(filepath):\n",
        "            print(f\"Warning: File '{filename}' does not exist in the directory '{output_dir}'. Skipping this ARI.\")\n",
        "            continue\n",
        "        \n",
        "        # Read the hyetograph data\n",
        "        try:\n",
        "            hyetograph_df = pd.read_csv(filepath)\n",
        "            print(f\"Successfully read the hyetograph data from '{filename}'.\")\n",
        "        except Exception as e:\n",
        "            print(f\"Error reading the hyetograph CSV file '{filename}': {e}\")\n",
        "            continue\n",
        "        \n",
        "        # Plot the hyetograph\n",
        "        plt.bar(hyetograph_df['Time_hour'], hyetograph_df['Precipitation_in'], \n",
        "                width=0.8, edgecolor='black', alpha=0.5, label=f'ARI {ari_str} years')\n",
        "    \n",
        "    # Customize the plot\n",
        "    plt.xlabel('Time (Hour)', fontsize=14)\n",
        "    plt.ylabel('Incremental Precipitation (inches)', fontsize=14)\n",
        "    plt.title(f'Comparison of Hyetographs for ARIs {aris}\\nPosition: {position_percent}% | Duration: {total_duration} Hours', fontsize=16)\n",
        "    plt.legend()\n",
        "    plt.xticks(range(1, total_duration + 1, max(1, total_duration // 24)))  # Adjust x-ticks based on duration\n",
        "    plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "    plt.tight_layout()\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Generate AEP Hydrographs\n",
        "\n",
        "This cell orchestrates the entire AEP analysis process, generating hyetographs"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Output directory is set to: hyetographs\n",
            "\n",
            "Step 1: Generating hyetographs for each AEP event...\n",
            "Successfully read the input CSV file.\n",
            "\n",
            "Precipitation Frequency Data from Atlas 14:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>1</th>\\n', '      <th>2</th>\\n', '      <th>5</th>\\n', '      <th>10</th>\\n', '      <th>25</th>\\n', '      <th>50</th>\\n', '      <th>100</th>\\n', '      <th>200</th>\\n', '      <th>500</th>\\n', '      <th>1000</th>\\n', '    </tr>\\n', '    <tr>\\n', '      <th>Duration_hours</th>\\n', '      <th></th>\\n', '      <th></th>\\n', '      <th></th>\\n', '      <th></th>\\n', '      <th></th>\\n', '      <th></th>\\n', '      <th></th>\\n', '      <th></th>\\n', '      <th></th>\\n', '      <th></th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0.083333</th>\\n', '      <td>0.112</td>\\n', '      <td>0.137</td>\\n', '      <td>0.174</td>\\n', '      <td>0.207</td>\\n', '      <td>0.257</td>\\n', '      <td>0.299</td>\\n', '      <td>0.347</td>\\n', '      <td>0.400</td>\\n', '      <td>0.479</td>\\n', '      <td>0.548</td>\\n', '    </tr><tr>\\n', '      <th>0.166667</th>\\n', '      <td>0.161</td>\\n', '      <td>0.197</td>\\n', '      <td>0.250</td>\\n', '      <td>0.297</td>\\n', '      <td>0.368</td>\\n', '      <td>0.429</td>\\n', '      <td>0.497</td>\\n', '      <td>0.573</td>\\n', '      <td>0.687</td>\\n', '      <td>0.785</td>\\n', '    </tr><tr>\\n', '      <th>0.250000</th>\\n', '      <td>0.194</td>\\n', '      <td>0.238</td>\\n', '      <td>0.302</td>\\n', '      <td>0.359</td>\\n', '      <td>0.446</td>\\n', '      <td>0.519</td>\\n', '      <td>0.601</td>\\n', '      <td>0.693</td>\\n', '      <td>0.830</td>\\n', '      <td>0.949</td>\\n', '    </tr><tr>\\n', '      <th>0.500000</th>\\n', '      <td>0.297</td>\\n', '      <td>0.364</td>\\n', '      <td>0.461</td>\\n', '      <td>0.548</td>\\n', '      <td>0.680</td>\\n', '      <td>0.792</td>\\n', '      <td>0.917</td>\\n', '      <td>1.060</td>\\n', '      <td>1.270</td>\\n', '      <td>1.450</td>\\n', '    </tr><tr>\\n', '      <th>1.000000</th>\\n', '      <td>0.387</td>\\n', '      <td>0.474</td>\\n', '      <td>0.601</td>\\n', '      <td>0.714</td>\\n', '      <td>0.886</td>\\n', '      <td>1.030</td>\\n', '      <td>1.200</td>\\n', '      <td>1.380</td>\\n', '      <td>1.650</td>\\n', '      <td>1.890</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "                    1      2      5     10     25     50    100    200    500  \\\n",
              "Duration_hours                                                                  \n",
              "0.083333        0.112  0.137  0.174  0.207  0.257  0.299  0.347  0.400  0.479   \n",
              "0.166667        0.161  0.197  0.250  0.297  0.368  0.429  0.497  0.573  0.687   \n",
              "0.250000        0.194  0.238  0.302  0.359  0.446  0.519  0.601  0.693  0.830   \n",
              "0.500000        0.297  0.364  0.461  0.548  0.680  0.792  0.917  1.060  1.270   \n",
              "1.000000        0.387  0.474  0.601  0.714  0.886  1.030  1.200  1.380  1.650   \n",
              "\n",
              "                 1000  \n",
              "Duration_hours         \n",
              "0.083333        0.548  \n",
              "0.166667        0.785  \n",
              "0.250000        0.949  \n",
              "0.500000        1.450  \n",
              "1.000000        1.890  "
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Successfully interpolated precipitation depths.\n",
            "Array D with interpolated depths\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "{'1': array([0.387     , 0.565     , 0.698     , 0.81032881, 0.9097637 ,\n",
              "        1.        , 1.06725241, 1.12915421, 1.18672896, 1.24071452,\n",
              "        1.291663  , 1.34      , 1.38376504, 1.42555845, 1.465601  ,\n",
              "        1.50407587, 1.54113699, 1.57691513, 1.61152246, 1.64505605,\n",
              "        1.67760052, 1.70923013, 1.74001053, 1.77      ]),\n",
              " '2': array([0.474     , 0.696     , 0.861     , 1.00173485, 1.12655438,\n",
              "        1.24      , 1.32663817, 1.40656557, 1.48105431, 1.55102324,\n",
              "        1.61716121, 1.68      , 1.7358511 , 1.78921515, 1.84036945,\n",
              "        1.88954422, 1.93693302, 1.98270036, 2.0269874 , 2.06991634,\n",
              "        2.11159376, 2.15211324, 2.19155749, 2.23      ]),\n",
              " '5': array([0.601     , 0.88      , 1.09      , 1.26823227, 1.42631602,\n",
              "        1.57      , 1.68020468, 1.78190194, 1.8767026 , 1.96577052,\n",
              "        2.04997837, 2.13      , 2.20194862, 2.27072756, 2.33668889,\n",
              "        2.40012502, 2.46128192, 2.52036871, 2.57756493, 2.63302604,\n",
              "        2.68688765, 2.73926892, 2.79027516, 2.84      ]),\n",
              " '10': array([0.714     , 1.04      , 1.28      , 1.48806924, 1.67248232,\n",
              "        1.84      , 1.96980479, 2.0896258 , 2.20135107, 2.30634511,\n",
              "        2.40563129, 2.5       , 2.5850431 , 2.6663577 , 2.74435723,\n",
              "        2.81938514, 2.89173037, 2.96163865, 3.02932095, 3.09496   ,\n",
              "        3.15871521, 3.22072668, 3.28111824, 3.34      ]),\n",
              " '25': array([0.886     , 1.27      , 1.56      , 1.80600987, 2.02324576,\n",
              "        2.22      , 2.3755067 , 2.51899058, 2.65272925, 2.77836814,\n",
              "        2.89714089, 3.01      , 3.11227032, 3.21005319, 3.30384632,\n",
              "        3.39406319, 3.48105164, 3.56510746, 3.64648462, 3.72540305,\n",
              "        3.80205467, 3.87660809, 3.94921236, 4.02      ]),\n",
              " '50': array([1.03      , 1.47      , 1.79      , 2.06642513, 2.30990969,\n",
              "        2.53      , 2.70364775, 2.86367306, 3.01266933, 3.15250812,\n",
              "        3.28459121, 3.41      , 3.5254837 , 3.63588878, 3.74177899,\n",
              "        3.8436226 , 3.9418135 , 4.03668664, 4.12852957, 4.21759129,\n",
              "        4.30408906, 4.38821374, 4.47013406, 4.55      ]),\n",
              " '100': array([1.2       , 1.67      , 2.03      , 2.33696025, 2.60667598,\n",
              "        2.85      , 3.04361557, 3.22193331, 3.38787273, 3.5435395 ,\n",
              "        3.69051006, 3.83      , 3.95787802, 4.080078  , 4.19723236,\n",
              "        4.30986627, 4.41842124, 4.5232726 , 4.62474248, 4.72310971,\n",
              "        4.8186175 , 4.91147946, 5.00188437, 5.09      ]),\n",
              " '200': array([1.38      , 1.9       , 2.29      , 2.62773938, 2.92365089,\n",
              "        3.19      , 3.4019457 , 3.59689072, 3.77809643, 3.94791235,\n",
              "        4.10809564, 4.26      , 4.40210378, 4.53789396, 4.66807393,\n",
              "        4.79322772, 4.91384637, 5.03034728, 5.14308866, 5.2523806 ,\n",
              "        5.35849355, 5.46166505, 5.56210502, 5.66      ]),\n",
              " '500': array([1.65      , 2.23      , 2.66      , 3.03672598, 3.36530679,\n",
              "        3.66      , 3.89825159, 4.11713497, 4.32038301, 4.51068208,\n",
              "        4.69003939, 4.86      , 5.01967244, 5.17217918, 5.31832143,\n",
              "        5.45876414, 5.59406617, 5.72470236, 5.85108011, 5.97355192,\n",
              "        6.09242518, 6.20796977, 6.32042409, 6.43      ]),\n",
              " '1000': array([1.89      , 2.5       , 2.96      , 3.36789841, 3.72261513,\n",
              "        4.04      , 4.29680227, 4.53241223, 4.7509359 , 4.95532464,\n",
              "        5.14778131, 5.33      , 5.50314324, 5.66845928, 5.82682557,\n",
              "        5.97897016, 6.12550471, 6.26694883, 6.40374815, 6.53628821,\n",
              "        6.6649051 , 6.78989383, 6.91151497, 7.03      ])}"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Successfully computed incremental depths.\n",
            "Array inc_depths Contents \n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "{'1': array([0.387     , 0.178     , 0.133     , 0.11232881, 0.09943489,\n",
              "        0.0902363 , 0.06725241, 0.0619018 , 0.05757475, 0.05398556,\n",
              "        0.05094849, 0.048337  , 0.04376504, 0.04179342, 0.04004255,\n",
              "        0.03847487, 0.03706112, 0.03577814, 0.03460734, 0.03353359,\n",
              "        0.03254446, 0.03162962, 0.0307804 , 0.02998947]),\n",
              " '2': array([0.474     , 0.222     , 0.165     , 0.14073485, 0.12481953,\n",
              "        0.11344562, 0.08663817, 0.07992741, 0.07448873, 0.06996894,\n",
              "        0.06613797, 0.06283879, 0.0558511 , 0.05336405, 0.0511543 ,\n",
              "        0.04917477, 0.0473888 , 0.04576733, 0.04428704, 0.04292894,\n",
              "        0.04167742, 0.04051948, 0.03944425, 0.03844251]),\n",
              " '5': array([0.601     , 0.279     , 0.21      , 0.17823227, 0.15808375,\n",
              "        0.14368398, 0.11020468, 0.10169726, 0.09480066, 0.08906792,\n",
              "        0.08420785, 0.08002163, 0.07194862, 0.06877894, 0.06596132,\n",
              "        0.06343613, 0.0611569 , 0.05908679, 0.05719622, 0.0554611 ,\n",
              "        0.05386161, 0.05238127, 0.05100624, 0.04972484]),\n",
              " '10': array([0.714     , 0.326     , 0.24      , 0.20806924, 0.18441308,\n",
              "        0.16751768, 0.12980479, 0.11982102, 0.11172527, 0.10499404,\n",
              "        0.09928618, 0.09436871, 0.0850431 , 0.0813146 , 0.07799952,\n",
              "        0.07502791, 0.07234523, 0.06990828, 0.0676823 , 0.06563904,\n",
              "        0.06375522, 0.06201147, 0.06039156, 0.05888176]),\n",
              " '25': array([0.886     , 0.384     , 0.29      , 0.24600987, 0.21723589,\n",
              "        0.19675424, 0.1555067 , 0.14348388, 0.13373867, 0.12563889,\n",
              "        0.11877275, 0.11285911, 0.10227032, 0.09778287, 0.09379313,\n",
              "        0.09021687, 0.08698845, 0.08405582, 0.08137716, 0.07891844,\n",
              "        0.07665162, 0.07455342, 0.07260427, 0.07078764]),\n",
              " '50': array([1.03      , 0.44      , 0.32      , 0.27642513, 0.24348456,\n",
              "        0.22009031, 0.17364775, 0.1600253 , 0.14899628, 0.13983879,\n",
              "        0.13208309, 0.12540879, 0.1154837 , 0.11040509, 0.10589021,\n",
              "        0.10184361, 0.0981909 , 0.09487314, 0.09184293, 0.08906172,\n",
              "        0.08649777, 0.08412468, 0.08192032, 0.07986594]),\n",
              " '100': array([1.2       , 0.47      , 0.36      , 0.30696025, 0.26971574,\n",
              "        0.24332402, 0.19361557, 0.17831774, 0.16593941, 0.15566678,\n",
              "        0.14697056, 0.13948994, 0.12787802, 0.12219998, 0.11715437,\n",
              "        0.1126339 , 0.10855497, 0.10485136, 0.10146988, 0.09836723,\n",
              "        0.09550779, 0.09286196, 0.09040491, 0.08811563]),\n",
              " '200': array([1.38      , 0.52      , 0.39      , 0.33773938, 0.29591151,\n",
              "        0.26634911, 0.2119457 , 0.19494502, 0.18120571, 0.16981592,\n",
              "        0.16018329, 0.15190436, 0.14210378, 0.13579018, 0.13017997,\n",
              "        0.12515379, 0.12061865, 0.11650091, 0.11274138, 0.10929194,\n",
              "        0.10611295, 0.1031715 , 0.10043996, 0.09789498]),\n",
              " '500': array([1.65      , 0.58      , 0.43      , 0.37672598, 0.32858081,\n",
              "        0.29469321, 0.23825159, 0.21888338, 0.20324804, 0.19029907,\n",
              "        0.17935731, 0.16996061, 0.15967244, 0.15250675, 0.14614225,\n",
              "        0.14044271, 0.13530203, 0.13063619, 0.12637775, 0.12247181,\n",
              "        0.11887326, 0.11554458, 0.11245433, 0.10957591]),\n",
              " '1000': array([1.89      , 0.61      , 0.46      , 0.40789841, 0.35471672,\n",
              "        0.31738487, 0.25680227, 0.23560997, 0.21852367, 0.20438874,\n",
              "        0.19245668, 0.18221869, 0.17314324, 0.16531603, 0.15836629,\n",
              "        0.15214459, 0.14653456, 0.14144411, 0.13679932, 0.13254006,\n",
              "        0.12861689, 0.12498873, 0.12162114, 0.11848503])}"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Hyetograph for ARI 2 years saved to hyetographs\\hyetograph_ARI_2_years_pos50pct_24hr.csv\n",
            "Hyetograph for ARI 5 years saved to hyetographs\\hyetograph_ARI_5_years_pos50pct_24hr.csv\n",
            "Hyetograph for ARI 10 years saved to hyetographs\\hyetograph_ARI_10_years_pos50pct_24hr.csv\n",
            "Hyetograph for ARI 25 years saved to hyetographs\\hyetograph_ARI_25_years_pos50pct_24hr.csv\n",
            "Hyetograph for ARI 50 years saved to hyetographs\\hyetograph_ARI_50_years_pos50pct_24hr.csv\n",
            "Hyetograph for ARI 100 years saved to hyetographs\\hyetograph_ARI_100_years_pos50pct_24hr.csv\n",
            "\n",
            "All hyetographs have been generated and saved.\n",
            "Successfully read the hyetograph data from 'hyetograph_ARI_2_years_pos50pct_24hr.csv'.\n",
            "Successfully read the hyetograph data from 'hyetograph_ARI_5_years_pos50pct_24hr.csv'.\n",
            "Successfully read the hyetograph data from 'hyetograph_ARI_10_years_pos50pct_24hr.csv'.\n",
            "Successfully read the hyetograph data from 'hyetograph_ARI_25_years_pos50pct_24hr.csv'.\n",
            "Successfully read the hyetograph data from 'hyetograph_ARI_50_years_pos50pct_24hr.csv'.\n",
            "Successfully read the hyetograph data from 'hyetograph_ARI_100_years_pos50pct_24hr.csv'.\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1400x700 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "\n",
        "\"\"\"\n",
        "Main function to run the entire AEP analysis process.\n",
        "\"\"\"\n",
        "# Set the paths and parameters\n",
        "input_csv = 'data/PF_Depth_English_PDS_DavisCA.csv'  # Path to NOAA Atlas 14 data\n",
        "output_dir = 'hyetographs'  # Directory for saving hyetographs\n",
        "position_percent = 50  # Position percentage for the maximum incremental depth block\n",
        "total_duration = 24  # Storm duration in hours\n",
        "base_plan = \"02\"  # Base plan to clone\n",
        "\n",
        "# Set the AEP events (return periods in years)\n",
        "aep_events = [2, 5, 10, 25, 50, 100]\n",
        "\n",
        "# Ensure the output directory exists\n",
        "Path(output_dir).mkdir(parents=True, exist_ok=True)\n",
        "print(f\"Output directory is set to: {output_dir}\")\n",
        "\n",
        "#-------------------------------------------------------------------------\n",
        "# Step 1: Generate hyetographs for each AEP event\n",
        "#-------------------------------------------------------------------------\n",
        "print(\"\\nStep 1: Generating hyetographs for each AEP event...\")\n",
        "\n",
        "try:\n",
        "    # Read precipitation data\n",
        "    df = read_precipitation_data(input_csv)\n",
        "    print(\"Successfully read the input CSV file.\")\n",
        "    \n",
        "    # Display the first few rows of the DataFrame to verify\n",
        "    print(\"\\nPrecipitation Frequency Data from Atlas 14:\")\n",
        "    display.display(df.head())\n",
        "    \n",
        "    # Interpolate depths\n",
        "    D = interpolate_depths(df, total_duration)\n",
        "    print(\"Successfully interpolated precipitation depths.\")\n",
        "\n",
        "    print(\"Array D with interpolated depths\")\n",
        "    display.display(D)\n",
        "    \n",
        "    # Compute incremental depths\n",
        "    inc_depths = compute_incremental_depths(D, total_duration)\n",
        "    print(\"Successfully computed incremental depths.\")\n",
        "    \n",
        "    # Show Incremental Depths\n",
        "    print(\"Array inc_depths Contents \")\n",
        "    display.display(inc_depths)\n",
        "\n",
        "    # Generate and save hyetographs for each AEP\n",
        "    hyetograph_files = {}\n",
        "    for ari in aep_events:\n",
        "        ari_str = str(ari)\n",
        "        if ari_str in inc_depths:\n",
        "            hyetograph = generate_hyetograph(inc_depths[ari_str], position_percent, total_duration)\n",
        "            file_path = save_hyetograph(hyetograph, ari_str, output_dir, position_percent, total_duration)\n",
        "            hyetograph_files[ari_str] = file_path\n",
        "        else:\n",
        "            print(f\"Warning: ARI {ari_str} not found in the data. Skipping.\")\n",
        "    \n",
        "    print(\"\\nAll hyetographs have been generated and saved.\")\n",
        "    \n",
        "    # Plot the hyetographs for comparison\n",
        "    plot_multiple_hyetographs(aep_events, position_percent, total_duration, output_dir)\n",
        "    \n",
        "except Exception as e:\n",
        "    print(f\"Error generating hyetographs: {e}\")\n",
        "    raise"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 05:05:43 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-10 05:05:43 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.rasmap\n",
            "2025-04-10 05:05:43 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Step 2: Initializing the HEC-RAS ras...\n",
            "Initialized HEC-RAS project: DavisStormSystem\n",
            "\n",
            "Existing plans in the project:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>UNET D2 SolverType</th>\\n', '      <th>UNET D2 Name</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>02</td>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>Full System ROM with Pump</td>\\n', '      <td>6.60</td>\\n', '      <td>Full System ROM with Pump</td>\\n', '      <td>10JAN2000,1200,11JAN2000,2400</td>\\n', '      <td>12SEC</td>\\n', '      <td>10MIN</td>\\n', '      <td>-1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>PARDISO (Direct)</td>\\n', '      <td>area2</td>\\n', '      <td>None</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  plan_number unsteady_number geometry_number                 Plan Title  \\\n",
              "0          02              01              02  Full System ROM with Pump   \n",
              "\n",
              "  Program Version           Short Identifier                Simulation Date  \\\n",
              "0            6.60  Full System ROM with Pump  10JAN2000,1200,11JAN2000,2400   \n",
              "\n",
              "  Computation Interval Mapping Interval Run HTab  ... DSS File  \\\n",
              "0                12SEC            10MIN       -1  ...      dss   \n",
              "\n",
              "  Friction Slope Method UNET D2 SolverType UNET D2 Name HDF_Results_Path  \\\n",
              "0                     1   PARDISO (Direct)        area2             None   \n",
              "\n",
              "  Geom File                                          Geom Path  Flow File  \\\n",
              "0        02  d:\\GitHub\\ras-commander\\examples\\example_proje...         01   \n",
              "\n",
              "                                           Flow Path  \\\n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "\n",
              "                                           full_path  \n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "\n",
              "[1 rows x 29 columns]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "#-------------------------------------------------------------------------\n",
        "# Initialize the HEC-RAS project\n",
        "#-------------------------------------------------------------------------\n",
        "print(\"\\nStep 2: Initializing the HEC-RAS ras...\")\n",
        "\n",
        "# Define the path to the Davis project\n",
        "current_dir = Path.cwd()\n",
        "pipes_ex_path = current_dir / \"example_projects\" / \"Davis\"\n",
        "\n",
        "# Check if the project exists\n",
        "if not pipes_ex_path.exists():\n",
        "    # Extract the project if needed\n",
        "    RasExamples.extract_project([\"Davis\"])\n",
        "\n",
        "# Initialize the RAS project\n",
        "init_ras_project(pipes_ex_path, \"6.6\")\n",
        "print(f\"Initialized HEC-RAS project: {ras.project_name}\")\n",
        "\n",
        "# Display the existing plans\n",
        "print(\"\\nExisting plans in the project:\")\n",
        "display.display(ras.plan_df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>UNET D2 SolverType</th>\\n', '      <th>UNET D2 Name</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>02</td>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>Full System ROM with Pump</td>\\n', '      <td>6.60</td>\\n', '      <td>Full System ROM with Pump</td>\\n', '      <td>10JAN2000,1200,11JAN2000,2400</td>\\n', '      <td>12SEC</td>\\n', '      <td>10MIN</td>\\n', '      <td>-1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>PARDISO (Direct)</td>\\n', '      <td>area2</td>\\n', '      <td>None</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  plan_number unsteady_number geometry_number                 Plan Title  \\\\\\n', '0          02              01              02  Full System ROM with Pump   \\n', '\\n', '  Program Version           Short Identifier                Simulation Date  \\\\\\n', '0            6.60  Full System ROM with Pump  10JAN2000,1200,11JAN2000,2400   \\n', '\\n', '  Computation Interval Mapping Interval Run HTab  ... DSS File  \\\\\\n', '0                12SEC            10MIN       -1  ...      dss   \\n', '\\n', '  Friction Slope Method UNET D2 SolverType UNET D2 Name HDF_Results_Path  \\\\\\n', '0                     1   PARDISO (Direct)        area2             None   \\n', '\\n', '  Geom File                                          Geom Path  Flow File  \\\\\\n', '0        02  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...         01   \\n', '\\n', '                                           Flow Path  \\\\\\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '\\n', '                                           full_path  \\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...  \\n', '\\n', '[1 rows x 29 columns]']"
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "ras.plan_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>unsteady_number</th>\\n', '      <th>full_path</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Flow Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Use Restart</th>\\n', '      <th>Precipitation Mode</th>\\n', '      <th>Wind Mode</th>\\n', '      <th>Met BC=Precipitation|Mode</th>\\n', '      <th>Met BC=Evapotranspiration|Mode</th>\\n', '      <th>Met BC=Precipitation|Expanded View</th>\\n', '      <th>Met BC=Precipitation|Constant Units</th>\\n', '      <th>Met BC=Precipitation|Gridded Source</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>Full System Rain w/ Pump</td>\\n', '      <td>6.60</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>Constant</td>\\n', '      <td>None</td>\\n', '      <td>-1</td>\\n', '      <td>in/hr</td>\\n', '      <td>DSS</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  unsteady_number                                          full_path  \\\\\\n', '0              01  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '\\n', '  geometry_number                Flow Title Program Version Use Restart  \\\\\\n', '0            None  Full System Rain w/ Pump            6.60           0   \\n', '\\n', '  Precipitation Mode       Wind Mode Met BC=Precipitation|Mode  \\\\\\n', '0            Disable  No Wind Forces                  Constant   \\n', '\\n', '  Met BC=Evapotranspiration|Mode Met BC=Precipitation|Expanded View  \\\\\\n', '0                           None                                 -1   \\n', '\\n', '  Met BC=Precipitation|Constant Units Met BC=Precipitation|Gridded Source  \\n', '0                               in/hr                                 DSS  ']"
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "ras.unsteady_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "  unsteady_number  boundary_condition_number river_reach_name river_station  \\\n",
            "0              01                          1                                  \n",
            "1              01                          2                                  \n",
            "\n",
            "  storage_area_name pump_station_name       bc_type hydrograph_type  \\\n",
            "0                                      Normal Depth            None   \n",
            "1                                           Unknown            None   \n",
            "\n",
            "   hydrograph_num_values Interval  ...                Flow Title  \\\n",
            "0                      0      NaN  ...  Full System Rain w/ Pump   \n",
            "1                      0    1HOUR  ...  Full System Rain w/ Pump   \n",
            "\n",
            "  Program Version Use Restart Precipitation Mode       Wind Mode  \\\n",
            "0            6.60           0            Disable  No Wind Forces   \n",
            "1            6.60           0            Disable  No Wind Forces   \n",
            "\n",
            "  Met BC=Precipitation|Mode Met BC=Evapotranspiration|Mode  \\\n",
            "0                  Constant                           None   \n",
            "1                  Constant                           None   \n",
            "\n",
            "  Met BC=Precipitation|Expanded View Met BC=Precipitation|Constant Units  \\\n",
            "0                                 -1                               in/hr   \n",
            "1                                 -1                               in/hr   \n",
            "\n",
            "  Met BC=Precipitation|Gridded Source  \n",
            "0                                 DSS  \n",
            "1                                 DSS  \n",
            "\n",
            "[2 rows x 28 columns]\n"
          ]
        }
      ],
      "source": [
        "print(ras.boundaries_df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Unsteady flow file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u01\n"
          ]
        }
      ],
      "source": [
        "# Get the path to unsteady flow file associated with Plan \"01\"\n",
        "unsteady_file = RasPlan.get_unsteady_path(\"01\")\n",
        "print(f\"Unsteady flow file path: {unsteady_file}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": "[\"'d:\\\\\\\\GitHub\\\\\\\\ras-commander\\\\\\\\examples\\\\\\\\example_projects\\\\\\\\Davis\\\\\\\\DavisStormSystem.u01'\"]"
          },
          "execution_count": 10,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "unsteady_file"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 05:05:43 - ras_commander.RasUnsteady - INFO - Successfully extracted boundaries and tables from d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u01\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Extracted 2 boundary conditions from the unsteady flow file.\n"
          ]
        }
      ],
      "source": [
        "# Extract boundary conditions and tables\n",
        "boundaries_df = RasUnsteady.extract_boundary_and_tables(unsteady_file)\n",
        "print(f\"Extracted {len(boundaries_df)} boundary conditions from the unsteady flow file.\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>DSS File</th>\\n', '      <th>Tables</th>\\n', '      <th>River Name</th>\\n', '      <th>Reach Name</th>\\n', '      <th>River Station</th>\\n', '      <th>Downstream River Station</th>\\n', '      <th>Storage Area Connection</th>\\n', '      <th>Storage Area Name</th>\\n', '      <th>Pump Station Name</th>\\n', '      <th>Blank 1</th>\\n', '      <th>Blank 2</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td></td>\\n', '      <td>{}</td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td>DS Channel</td>\\n', '      <td></td>\\n', '      <td>DS Normal</td>\\n', '      <td></td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td></td>\\n', '      <td>{}</td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td>area2</td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td></td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  DSS File Tables River Name Reach Name River Station  \\\\\\n', '0              {}                                       \\n', '1              {}                                       \\n', '\\n', '  Downstream River Station Storage Area Connection Storage Area Name  \\\\\\n', '0                                                         DS Channel   \\n', '1                                                              area2   \\n', '\\n', '  Pump Station Name    Blank 1 Blank 2  \\n', '0                    DS Normal          \\n', '1                                       ']"
          },
          "execution_count": 12,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "boundaries_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Contents of unsteady flow file d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u01:\n",
            "--------------------------------------------------------------------------------\n",
            "Flow Title=Full System Rain w/ Pump\n",
            "Program Version=6.60\n",
            "Use Restart= 0 \n",
            "Boundary Location=                ,                ,        ,        ,                ,DS Channel      ,                ,DS Normal                       ,                                \n",
            "Friction Slope=0.003,0\n",
            "Boundary Location=                ,                ,        ,        ,                ,area2           ,                ,                                ,                                \n",
            "Interval=1HOUR\n",
            "Precipitation Hydrograph= 21 \n",
            "      .1      .1      .1     .25     .25     .25     .25       0       0       0\n",
            "       0       0       0       0       0       0       0       0       0       0\n",
            "       0\n",
            "DSS Path=\n",
            "Use DSS=False\n",
            "Use Fixed Start Time=False\n",
            "Fixed Start Date/Time=,\n",
            "Is Critical Boundary=False\n",
            "Critical Boundary Flow=\n",
            "Met Point Raster Parameters=,,,,\n",
            "Precipitation Mode=Disable\n",
            "Wind Mode=No Wind Forces\n",
            "Air Density Mode=Specified\n",
            "Wave Mode=No Wave Forcing\n",
            "Met BC=Precipitation|Mode=Constant\n",
            "Met BC=Precipitation|Expanded View=-1\n",
            "Met BC=Precipitation|Constant Value=1\n",
            "Met BC=Precipitation|Constant Units=in/hr\n",
            "Met BC=Precipitation|Point Interpolation=\n",
            "Met BC=Precipitation|Gridded Source=DSS\n",
            "Met BC=Precipitation|Gridded Interpolation=\n",
            "Met BC=Evapotranspiration|Mode=None\n",
            "Met BC=Evapotranspiration|Expanded View=0\n",
            "Met BC=Evapotranspiration|Constant Units=mm/hr\n",
            "Met BC=Evapotranspiration|Point Interpolation=Nearest\n",
            "Met BC=Evapotranspiration|Gridded Source=DSS\n",
            "Met BC=Evapotranspiration|Gridded Interpolation=\n",
            "Met BC=Wind Speed|Expanded View=0\n",
            "Met BC=Wind Speed|Point Interpolation=Nearest\n",
            "Met BC=Wind Speed|Gridded Source=DSS\n",
            "Met BC=Wind Speed|Gridded Interpolation=\n",
            "Met BC=Wind Direction|Expanded View=0\n",
            "Met BC=Wind Direction|Point Interpolation=Nearest\n",
            "Met BC=Wind Direction|Gridded Source=DSS\n",
            "Met BC=Wind Direction|Gridded Interpolation=\n",
            "Met BC=Wind Velocity X|Expanded View=0\n",
            "Met BC=Wind Velocity X|Point Interpolation=Nearest\n",
            "Met BC=Wind Velocity X|Gridded Source=DSS\n",
            "Met BC=Wind Velocity X|Gridded Interpolation=\n",
            "Met BC=Wind Velocity Y|Expanded View=0\n",
            "Met BC=Wind Velocity Y|Point Interpolation=Nearest\n",
            "Met BC=Wind Velocity Y|Gridded Source=DSS\n",
            "Met BC=Wind Velocity Y|Gridded Interpolation=\n",
            "Met BC=Wave Forcing X|Expanded View=0\n",
            "Met BC=Wave Forcing X|Point Interpolation=Nearest\n",
            "Met BC=Wave Forcing X|Gridded Source=DSS\n",
            "Met BC=Wave Forcing X|Gridded Interpolation=\n",
            "Met BC=Wave Forcing Y|Expanded View=0\n",
            "Met BC=Wave Forcing Y|Point Interpolation=Nearest\n",
            "Met BC=Wave Forcing Y|Gridded Source=DSS\n",
            "Met BC=Wave Forcing Y|Gridded Interpolation=\n",
            "Met BC=Air Density|Mode=Constant\n",
            "Met BC=Air Density|Expanded View=0\n",
            "Met BC=Air Density|Constant Value=1.225\n",
            "Met BC=Air Density|Constant Units=kg/m3\n",
            "Met BC=Air Density|Point Interpolation=Nearest\n",
            "Met BC=Air Density|Gridded Source=DSS\n",
            "Met BC=Air Density|Gridded Interpolation=\n",
            "Met BC=Air Temperature|Expanded View=0\n",
            "Met BC=Air Temperature|Point Interpolation=Nearest\n",
            "Met BC=Air Temperature|Gridded Source=DSS\n",
            "Met BC=Air Temperature|Gridded Interpolation=\n",
            "Met BC=Humidity|Expanded View=0\n",
            "Met BC=Humidity|Point Interpolation=Nearest\n",
            "Met BC=Humidity|Gridded Source=DSS\n",
            "Met BC=Humidity|Gridded Interpolation=\n",
            "Met BC=Air Pressure|Mode=Constant\n",
            "Met BC=Air Pressure|Expanded View=0\n",
            "Met BC=Air Pressure|Constant Value=1013.2\n",
            "Met BC=Air Pressure|Constant Units=mb\n",
            "Met BC=Air Pressure|Point Interpolation=\n",
            "Met BC=Air Pressure|Gridded Source=DSS\n",
            "Met BC=Air Pressure|Gridded Interpolation=\n",
            "Non-Newtonian Method= 0 ,        \n",
            "Non-Newtonian Constant Vol Conc=0\n",
            "Non-Newtonian Yield Method= 0 ,        \n",
            "Non-Newtonian Yield Coef=0, 0\n",
            "User Yeild=   0\n",
            "Non-Newtonian Sed Visc= 0 ,        \n",
            "Non-Newtonian Obrian B=0\n",
            "User Viscosity=0\n",
            "User Viscosity Ratio=0\n",
            "Herschel-Bulkley Coef=0, 0\n",
            "Clastic Method= 0 ,        \n",
            "Coulomb Phi=0\n",
            "Voellmy X=0\n",
            "Non-Newtonian Hindered FV= 0 \n",
            "Non-Newtonian FV K=0\n",
            "Non-Newtonian ds=0\n",
            "Non-Newtonian Max Cv=0\n",
            "Non-Newtonian Bulking Method= 0 , \n",
            "Non-Newtonian High C Transport= 0 , \n",
            "Lava Activation= 0 \n",
            "Temperature=1300,15,,15,14,980\n",
            "Heat Ballance=1,1200,0.5,1,70,0.95\n",
            "Viscosity=1000,,,\n",
            "Yield Strength=,,,\n",
            "Consistency Factor=,,,\n",
            "Profile Coefficient=4,1.3,\n",
            "Lava Param=,2500,\n",
            "\n",
            "--------------------------------------------------------------------------------\n"
          ]
        }
      ],
      "source": [
        "# Display the contents of Unsteady File\n",
        "with open(unsteady_file, 'r') as f:\n",
        "    unsteady_contents = f.read()\n",
        "print(f\"Contents of unsteady flow file {unsteady_file}:\")\n",
        "print(\"-\" * 80)\n",
        "print(unsteady_contents)\n",
        "print(\"-\" * 80)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### To implement AEP event hydrographs, we will edit the Precipitation Hydrograph table\n",
        "We will need to edit both the number of values, as well as replacing the existing fixed-width table.  "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Define HEC-RAS Plan and Unsteady Flow File Functions\n",
        "\n",
        "These functions handle creating HEC-RAS plan files and unsteady flow files for each AEP event. They apply the generated hyetographs to the boundary conditions."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {},
      "outputs": [],
      "source": [
        "def create_plan_for_aep(base_plan, aep_years, duration_hours, hyetograph_file, project):\n",
        "    \"\"\"\n",
        "    Creates a new plan for a specific AEP event.\n",
        "    \"\"\"\n",
        "    # Create plan name and short ID\n",
        "    plan_name = f\"{aep_years}YR-{duration_hours}HR\"\n",
        "    \n",
        "    print(f\"Creating new plan '{plan_name}'...\")\n",
        "    \n",
        "    # Clone the base plan\n",
        "    new_plan_number = RasPlan.clone_plan(base_plan, new_plan_shortid=plan_name, ras_object=project)\n",
        "    print(f\"Created new plan: {new_plan_number}\")\n",
        "    \n",
        "    # Clone the unsteady flow file from the base plan\n",
        "    base_unsteady = None\n",
        "    for _, row in project.plan_df.iterrows():\n",
        "        if row['plan_number'] == base_plan:\n",
        "            base_unsteady = row.get('unsteady_number', None)\n",
        "            \n",
        "    if base_unsteady is None:\n",
        "        raise ValueError(f\"Could not find unsteady flow file for base plan {base_plan}\")\n",
        "\n",
        "    \n",
        "    new_unsteady_number = RasPlan.clone_unsteady(base_unsteady, ras_object=project)\n",
        "    print(f\"Created new unsteady flow file: {new_unsteady_number}\")\n",
        "    \n",
        "    # Update the unsteady flow file with the hyetograph data\n",
        "    unsteady_file_path = RasPlan.get_unsteady_path(new_unsteady_number, ras_object=project)\n",
        "    \n",
        "    \n",
        "    # Update the flow title to reflect the AEP event\n",
        "    new_title = f\"{aep_years}YR-{duration_hours}HR Storm\"\n",
        "    RasUnsteady.update_flow_title(unsteady_file_path, new_title, ras_object=project)\n",
        "    print(f\"Updated unsteady flow title to: {new_title}\")\n",
        "    \n",
        "    # Modify the unsteady flow file with the hyetograph data\n",
        "    success = modify_unsteady_flow_with_hyetograph(unsteady_file_path, hyetograph_file, project)\n",
        "    if success:\n",
        "        print(f\"Successfully applied hyetograph data from {hyetograph_file} to unsteady flow file\")\n",
        "    else:\n",
        "        print(f\"Warning: Failed to apply hyetograph data. Unsteady flow file may need manual modification.\")\n",
        "    \n",
        "    # Assign the unsteady flow file to the plan\n",
        "    RasPlan.set_unsteady(new_plan_number, new_unsteady_number, ras_object=project)\n",
        "    print(f\"Assigned unsteady flow file {new_unsteady_number} to plan {new_plan_number}\")\n",
        "    '''\n",
        "    # Update the plan description\n",
        "    description = f\"AEP {aep_years}-year, {duration_hours}-hour storm\\n\"\n",
        "    description += f\"Created: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\\n\"\n",
        "    description += f\"Based on plan {base_plan}\\n\"\n",
        "    description += f\"Hyetograph from: {os.path.basename(hyetograph_file)}\"\n",
        "    \n",
        "    RasPlan.update_plan_description(new_plan_number, description, ras_object=project)\n",
        "    print(f\"Updated plan description for plan {new_plan_number}\")\n",
        "    \n",
        "    return new_plan_number, new_unsteady_number\n",
        "    '''"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {},
      "outputs": [],
      "source": [
        "def modify_unsteady_flow_with_hyetograph(unsteady_file_path, hyetograph_file, project):\n",
        "    \"\"\"\n",
        "    Modifies an unsteady flow file to incorporate hyetograph data as precipitation.\n",
        "    \n",
        "    Parameters:\n",
        "    - unsteady_file_path: Path to the unsteady flow file\n",
        "    - hyetograph_file: Path to the hyetograph data CSV\n",
        "    - project: RAS project object\n",
        "    \n",
        "    Returns:\n",
        "    - Boolean indicating success\n",
        "    \"\"\"\n",
        "    try:\n",
        "        # Read the hyetograph data\n",
        "        hyetograph_df = pd.read_csv(hyetograph_file)\n",
        "        print(f\"Loaded hyetograph from {hyetograph_file} with {len(hyetograph_df)} values\")\n",
        "        \n",
        "        # Read the unsteady flow file\n",
        "        with open(unsteady_file_path, 'r') as file:\n",
        "            lines = file.readlines()\n",
        "        \n",
        "        # Find the sections that need to be modified\n",
        "        precip_hydrograph_index = None\n",
        "        \n",
        "        for i, line in enumerate(lines):\n",
        "            if line.startswith(\"Precipitation Hydrograph=\"):\n",
        "                precip_hydrograph_index = i\n",
        "                break\n",
        "        \n",
        "        if precip_hydrograph_index is None:\n",
        "            print(\"Cannot find Precipitation Hydrograph section in unsteady file.\")\n",
        "            return False\n",
        "        \n",
        "        # Get the time interval from the hyetograph\n",
        "        time_interval = \"1HOUR\"  # Default\n",
        "        if \"Time_hour\" in hyetograph_df.columns and len(hyetograph_df) > 1:\n",
        "            hour_diff = hyetograph_df[\"Time_hour\"].iloc[1] - hyetograph_df[\"Time_hour\"].iloc[0]\n",
        "            time_interval = f\"{int(hour_diff)}HOUR\" if hour_diff >= 1 else f\"{int(hour_diff*60)}MIN\"\n",
        "        \n",
        "        # Format the precipitation values for the hydrograph\n",
        "        precipitation_values = hyetograph_df[\"Precipitation_in\"].values\n",
        "        \n",
        "        # Create the Precipitation Hydrograph line\n",
        "        precip_line = f\"Precipitation Hydrograph= {len(precipitation_values)} \\n\"\n",
        "        \n",
        "        # Format the values in groups of 10 per line\n",
        "        value_lines = []\n",
        "        for i in range(0, len(precipitation_values), 10):\n",
        "            row_values = precipitation_values[i:i+10]\n",
        "            row_line = \"\".join([f\"{value:8.2f}\" for value in row_values]) + \"\\n\"\n",
        "            value_lines.append(row_line)\n",
        "            \n",
        "        # Remove old hydrograph data - find end of current hydrograph\n",
        "        current_line = precip_hydrograph_index + 1\n",
        "        while current_line < len(lines) and not any(lines[current_line].startswith(prefix) for prefix in [\"DSS Path=\", \"Use DSS=\", \"Use Fixed Start Time=\"]):\n",
        "            current_line += 1\n",
        "            \n",
        "        # Replace the hydrograph section\n",
        "        lines[precip_hydrograph_index:current_line] = [precip_line] + value_lines\n",
        "            \n",
        "        # Write the modified file back\n",
        "        with open(unsteady_file_path, 'w') as file:\n",
        "            file.writelines(lines)\n",
        "            \n",
        "        print(f\"Successfully applied hyetograph data from {hyetograph_file} to unsteady flow file.\")\n",
        "        print(f\"Added {len(precipitation_values)} precipitation values with interval {time_interval}\")\n",
        "        return True\n",
        "        \n",
        "    except Exception as e:\n",
        "        print(f\"Error modifying unsteady flow file: {str(e)}\")\n",
        "        import traceback\n",
        "        traceback.print_exc()\n",
        "        return False"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Step 3: Creating new plans for each AEP event...\n",
            "Creating new plan '2YR-24HR'...\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 05:05:43 - ras_commander.RasUtils - INFO - File cloned from d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02 to d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p01\n",
            "2025-04-10 05:05:43 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p01\n",
            "2025-04-10 05:05:43 - ras_commander.RasUtils - INFO - Project file updated with new Plan entry: 01\n",
            "2025-04-10 05:05:43 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.rasmap\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Created new plan: 01\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 05:05:43 - ras_commander.RasUtils - INFO - File cloned from d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u01 to d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u02\n",
            "2025-04-10 05:05:43 - ras_commander.RasUtils - INFO - Project file updated with new Unsteady entry: 02\n",
            "2025-04-10 05:05:43 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.rasmap\n",
            "2025-04-10 05:05:43 - ras_commander.RasUnsteady - INFO - Updated Flow Title from 'Full System Rain w/ Pump' to '2YR-24HR Storm'\n",
            "2025-04-10 05:05:43 - ras_commander.RasUnsteady - INFO - Applied Flow Title modification to d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u02\n",
            "2025-04-10 05:05:43 - ras_commander.RasUtils - INFO - File cloned from d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02 to d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p03\n",
            "2025-04-10 05:05:43 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p03\n",
            "2025-04-10 05:05:43 - ras_commander.RasUtils - INFO - Project file updated with new Plan entry: 03\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Created new unsteady flow file: 02\n",
            "Updated unsteady flow title to: 2YR-24HR Storm\n",
            "Loaded hyetograph from hyetographs\\hyetograph_ARI_2_years_pos50pct_24hr.csv with 24 values\n",
            "Successfully applied hyetograph data from hyetographs\\hyetograph_ARI_2_years_pos50pct_24hr.csv to unsteady flow file.\n",
            "Added 24 precipitation values with interval 1HOUR\n",
            "Successfully applied hyetograph data from hyetographs\\hyetograph_ARI_2_years_pos50pct_24hr.csv to unsteady flow file\n",
            "Assigned unsteady flow file 02 to plan 01\n",
            "Error creating plan for AEP 2: cannot unpack non-iterable NoneType object\n",
            "Creating new plan '5YR-24HR'...\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 05:05:43 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.rasmap\n",
            "2025-04-10 05:05:43 - ras_commander.RasUtils - INFO - File cloned from d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u01 to d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u03\n",
            "2025-04-10 05:05:43 - ras_commander.RasUtils - INFO - Project file updated with new Unsteady entry: 03\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Created new plan: 03\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 05:05:43 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.rasmap\n",
            "2025-04-10 05:05:43 - ras_commander.RasUnsteady - INFO - Updated Flow Title from 'Full System Rain w/ Pump' to '5YR-24HR Storm'\n",
            "2025-04-10 05:05:43 - ras_commander.RasUnsteady - INFO - Applied Flow Title modification to d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u03\n",
            "2025-04-10 05:05:44 - ras_commander.RasUtils - INFO - File cloned from d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02 to d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p04\n",
            "2025-04-10 05:05:44 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p04\n",
            "2025-04-10 05:05:44 - ras_commander.RasUtils - INFO - Project file updated with new Plan entry: 04\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Created new unsteady flow file: 03\n",
            "Updated unsteady flow title to: 5YR-24HR Storm\n",
            "Loaded hyetograph from hyetographs\\hyetograph_ARI_5_years_pos50pct_24hr.csv with 24 values\n",
            "Successfully applied hyetograph data from hyetographs\\hyetograph_ARI_5_years_pos50pct_24hr.csv to unsteady flow file.\n",
            "Added 24 precipitation values with interval 1HOUR\n",
            "Successfully applied hyetograph data from hyetographs\\hyetograph_ARI_5_years_pos50pct_24hr.csv to unsteady flow file\n",
            "Assigned unsteady flow file 03 to plan 03\n",
            "Error creating plan for AEP 5: cannot unpack non-iterable NoneType object\n",
            "Creating new plan '10YR-24HR'...\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 05:05:44 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.rasmap\n",
            "2025-04-10 05:05:44 - ras_commander.RasUtils - INFO - File cloned from d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u01 to d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u04\n",
            "2025-04-10 05:05:44 - ras_commander.RasUtils - INFO - Project file updated with new Unsteady entry: 04\n",
            "2025-04-10 05:05:44 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.rasmap\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Created new plan: 04\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 05:05:44 - ras_commander.RasUnsteady - INFO - Updated Flow Title from 'Full System Rain w/ Pump' to '10YR-24HR Storm'\n",
            "2025-04-10 05:05:44 - ras_commander.RasUnsteady - INFO - Applied Flow Title modification to d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u04\n",
            "2025-04-10 05:05:44 - ras_commander.RasUtils - INFO - File cloned from d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02 to d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p05\n",
            "2025-04-10 05:05:44 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p05\n",
            "2025-04-10 05:05:44 - ras_commander.RasUtils - INFO - Project file updated with new Plan entry: 05\n",
            "2025-04-10 05:05:44 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.rasmap\n",
            "2025-04-10 05:05:44 - ras_commander.RasUtils - INFO - File cloned from d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u01 to d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u05\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Created new unsteady flow file: 04\n",
            "Updated unsteady flow title to: 10YR-24HR Storm\n",
            "Loaded hyetograph from hyetographs\\hyetograph_ARI_10_years_pos50pct_24hr.csv with 24 values\n",
            "Successfully applied hyetograph data from hyetographs\\hyetograph_ARI_10_years_pos50pct_24hr.csv to unsteady flow file.\n",
            "Added 24 precipitation values with interval 1HOUR\n",
            "Successfully applied hyetograph data from hyetographs\\hyetograph_ARI_10_years_pos50pct_24hr.csv to unsteady flow file\n",
            "Assigned unsteady flow file 04 to plan 04\n",
            "Error creating plan for AEP 10: cannot unpack non-iterable NoneType object\n",
            "Creating new plan '25YR-24HR'...\n",
            "Created new plan: 05\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 05:05:44 - ras_commander.RasUtils - INFO - Project file updated with new Unsteady entry: 05\n",
            "2025-04-10 05:05:44 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.rasmap\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Created new unsteady flow file: 05\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 05:05:44 - ras_commander.RasUnsteady - INFO - Updated Flow Title from 'Full System Rain w/ Pump' to '25YR-24HR Storm'\n",
            "2025-04-10 05:05:44 - ras_commander.RasUnsteady - INFO - Applied Flow Title modification to d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u05\n",
            "2025-04-10 05:05:44 - ras_commander.RasUtils - INFO - File cloned from d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02 to d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p06\n",
            "2025-04-10 05:05:44 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p06\n",
            "2025-04-10 05:05:44 - ras_commander.RasUtils - INFO - Project file updated with new Plan entry: 06\n",
            "2025-04-10 05:05:44 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.rasmap\n",
            "2025-04-10 05:05:44 - ras_commander.RasUtils - INFO - File cloned from d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u01 to d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u06\n",
            "2025-04-10 05:05:44 - ras_commander.RasUtils - INFO - Project file updated with new Unsteady entry: 06\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Updated unsteady flow title to: 25YR-24HR Storm\n",
            "Loaded hyetograph from hyetographs\\hyetograph_ARI_25_years_pos50pct_24hr.csv with 24 values\n",
            "Successfully applied hyetograph data from hyetographs\\hyetograph_ARI_25_years_pos50pct_24hr.csv to unsteady flow file.\n",
            "Added 24 precipitation values with interval 1HOUR\n",
            "Successfully applied hyetograph data from hyetographs\\hyetograph_ARI_25_years_pos50pct_24hr.csv to unsteady flow file\n",
            "Assigned unsteady flow file 05 to plan 05\n",
            "Error creating plan for AEP 25: cannot unpack non-iterable NoneType object\n",
            "Creating new plan '50YR-24HR'...\n",
            "Created new plan: 06\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 05:05:44 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.rasmap\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Created new unsteady flow file: 06\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 05:05:44 - ras_commander.RasUnsteady - INFO - Updated Flow Title from 'Full System Rain w/ Pump' to '50YR-24HR Storm'\n",
            "2025-04-10 05:05:44 - ras_commander.RasUnsteady - INFO - Applied Flow Title modification to d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u06\n",
            "2025-04-10 05:05:44 - ras_commander.RasUtils - INFO - File cloned from d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02 to d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p07\n",
            "2025-04-10 05:05:44 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p07\n",
            "2025-04-10 05:05:44 - ras_commander.RasUtils - INFO - Project file updated with new Plan entry: 07\n",
            "2025-04-10 05:05:44 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.rasmap\n",
            "2025-04-10 05:05:44 - ras_commander.RasUtils - INFO - File cloned from d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u01 to d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u07\n",
            "2025-04-10 05:05:44 - ras_commander.RasUtils - INFO - Project file updated with new Unsteady entry: 07\n",
            "2025-04-10 05:05:44 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.rasmap\n",
            "2025-04-10 05:05:44 - ras_commander.RasUnsteady - INFO - Updated Flow Title from 'Full System Rain w/ Pump' to '100YR-24HR Storm'\n",
            "2025-04-10 05:05:44 - ras_commander.RasUnsteady - INFO - Applied Flow Title modification to d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u07\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Updated unsteady flow title to: 50YR-24HR Storm\n",
            "Loaded hyetograph from hyetographs\\hyetograph_ARI_50_years_pos50pct_24hr.csv with 24 values\n",
            "Successfully applied hyetograph data from hyetographs\\hyetograph_ARI_50_years_pos50pct_24hr.csv to unsteady flow file.\n",
            "Added 24 precipitation values with interval 1HOUR\n",
            "Successfully applied hyetograph data from hyetographs\\hyetograph_ARI_50_years_pos50pct_24hr.csv to unsteady flow file\n",
            "Assigned unsteady flow file 06 to plan 06\n",
            "Error creating plan for AEP 50: cannot unpack non-iterable NoneType object\n",
            "Creating new plan '100YR-24HR'...\n",
            "Created new plan: 07\n",
            "Created new unsteady flow file: 07\n",
            "Updated unsteady flow title to: 100YR-24HR Storm\n",
            "Loaded hyetograph from hyetographs\\hyetograph_ARI_100_years_pos50pct_24hr.csv with 24 values\n",
            "Successfully applied hyetograph data from hyetographs\\hyetograph_ARI_100_years_pos50pct_24hr.csv to unsteady flow file.\n",
            "Added 24 precipitation values with interval 1HOUR\n",
            "Successfully applied hyetograph data from hyetographs\\hyetograph_ARI_100_years_pos50pct_24hr.csv to unsteady flow file\n",
            "Assigned unsteady flow file 07 to plan 07\n",
            "Error creating plan for AEP 100: cannot unpack non-iterable NoneType object\n",
            "\n",
            "Updated plans in the project:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>UNET D2 SolverType</th>\\n', '      <th>UNET D2 Name</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>02</td>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>Full System ROM with Pump</td>\\n', '      <td>6.60</td>\\n', '      <td>Full System ROM with Pump</td>\\n', '      <td>10JAN2000,1200,11JAN2000,2400</td>\\n', '      <td>12SEC</td>\\n', '      <td>10MIN</td>\\n', '      <td>-1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>PARDISO (Direct)</td>\\n', '      <td>area2</td>\\n', '      <td>None</td>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>None</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>02</td>\\n', '      <td>Full System ROM with Pump</td>\\n', '      <td>6.60</td>\\n', '      <td>2YR-24HR</td>\\n', '      <td>10JAN2000,1200,11JAN2000,2400</td>\\n', '      <td>12SEC</td>\\n', '      <td>10MIN</td>\\n', '      <td>-1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>PARDISO (Direct)</td>\\n', '      <td>area2</td>\\n', '      <td>None</td>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>03</td>\\n', '      <td>03</td>\\n', '      <td>02</td>\\n', '      <td>Full System ROM with Pump</td>\\n', '      <td>6.60</td>\\n', '      <td>5YR-24HR</td>\\n', '      <td>10JAN2000,1200,11JAN2000,2400</td>\\n', '      <td>12SEC</td>\\n', '      <td>10MIN</td>\\n', '      <td>-1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>PARDISO (Direct)</td>\\n', '      <td>area2</td>\\n', '      <td>None</td>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>03</td>\\n', '      <td>None</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>04</td>\\n', '      <td>04</td>\\n', '      <td>02</td>\\n', '      <td>Full System ROM with Pump</td>\\n', '      <td>6.60</td>\\n', '      <td>10YR-24HR</td>\\n', '      <td>10JAN2000,1200,11JAN2000,2400</td>\\n', '      <td>12SEC</td>\\n', '      <td>10MIN</td>\\n', '      <td>-1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>PARDISO (Direct)</td>\\n', '      <td>area2</td>\\n', '      <td>None</td>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>04</td>\\n', '      <td>None</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>05</td>\\n', '      <td>05</td>\\n', '      <td>02</td>\\n', '      <td>Full System ROM with Pump</td>\\n', '      <td>6.60</td>\\n', '      <td>25YR-24HR</td>\\n', '      <td>10JAN2000,1200,11JAN2000,2400</td>\\n', '      <td>12SEC</td>\\n', '      <td>10MIN</td>\\n', '      <td>-1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>PARDISO (Direct)</td>\\n', '      <td>area2</td>\\n', '      <td>None</td>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>05</td>\\n', '      <td>None</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  plan_number unsteady_number geometry_number                 Plan Title  \\\n",
              "0          02              01              02  Full System ROM with Pump   \n",
              "1          01              02              02  Full System ROM with Pump   \n",
              "2          03              03              02  Full System ROM with Pump   \n",
              "3          04              04              02  Full System ROM with Pump   \n",
              "4          05              05              02  Full System ROM with Pump   \n",
              "5          06              06              02  Full System ROM with Pump   \n",
              "6          07              07              02  Full System ROM with Pump   \n",
              "\n",
              "  Program Version           Short Identifier                Simulation Date  \\\n",
              "0            6.60  Full System ROM with Pump  10JAN2000,1200,11JAN2000,2400   \n",
              "1            6.60                   2YR-24HR  10JAN2000,1200,11JAN2000,2400   \n",
              "2            6.60                   5YR-24HR  10JAN2000,1200,11JAN2000,2400   \n",
              "3            6.60                  10YR-24HR  10JAN2000,1200,11JAN2000,2400   \n",
              "4            6.60                  25YR-24HR  10JAN2000,1200,11JAN2000,2400   \n",
              "5            6.60                  50YR-24HR  10JAN2000,1200,11JAN2000,2400   \n",
              "6            6.60                 100YR-24HR  10JAN2000,1200,11JAN2000,2400   \n",
              "\n",
              "  Computation Interval Mapping Interval Run HTab  ... DSS File  \\\n",
              "0                12SEC            10MIN       -1  ...      dss   \n",
              "1                12SEC            10MIN       -1  ...      dss   \n",
              "2                12SEC            10MIN       -1  ...      dss   \n",
              "3                12SEC            10MIN       -1  ...      dss   \n",
              "4                12SEC            10MIN       -1  ...      dss   \n",
              "5                12SEC            10MIN       -1  ...      dss   \n",
              "6                12SEC            10MIN       -1  ...      dss   \n",
              "\n",
              "  Friction Slope Method UNET D2 SolverType UNET D2 Name HDF_Results_Path  \\\n",
              "0                     1   PARDISO (Direct)        area2             None   \n",
              "1                     1   PARDISO (Direct)        area2             None   \n",
              "2                     1   PARDISO (Direct)        area2             None   \n",
              "3                     1   PARDISO (Direct)        area2             None   \n",
              "4                     1   PARDISO (Direct)        area2             None   \n",
              "5                     1   PARDISO (Direct)        area2             None   \n",
              "6                     1   PARDISO (Direct)        area2             None   \n",
              "\n",
              "  Geom File  Geom Path  Flow File  \\\n",
              "0        02       None         01   \n",
              "1        02       None         02   \n",
              "2        02       None         03   \n",
              "3        02       None         04   \n",
              "4        02       None         05   \n",
              "5        02       None         06   \n",
              "6        02       None        u07   \n",
              "\n",
              "                                           Flow Path  \\\n",
              "0                                               None   \n",
              "1                                               None   \n",
              "2                                               None   \n",
              "3                                               None   \n",
              "4                                               None   \n",
              "5                                               None   \n",
              "6  d:\\GitHub\\ras-commander\\examples\\example_proje...   \n",
              "\n",
              "                                           full_path  \n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "2  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "3  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "4  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "5  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "6  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "\n",
              "[7 rows x 29 columns]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "#-------------------------------------------------------------------------\n",
        "# Create new plans for each AEP event\n",
        "#-------------------------------------------------------------------------\n",
        "print(\"\\nStep 3: Creating new plans for each AEP event...\")\n",
        "\n",
        "new_plan_numbers = []\n",
        "\n",
        "for ari in aep_events:\n",
        "    ari_str = str(ari)\n",
        "    if ari_str in hyetograph_files:\n",
        "        try:\n",
        "            # Create a new plan for this AEP event\n",
        "            new_plan_number, _ = create_plan_for_aep(\n",
        "                base_plan=base_plan,\n",
        "                aep_years=ari_str,\n",
        "                duration_hours=total_duration,\n",
        "                hyetograph_file=hyetograph_files[ari_str],\n",
        "                project=ras\n",
        "            )\n",
        "            new_plan_numbers.append(new_plan_number)\n",
        "        except Exception as e:\n",
        "            print(f\"Error creating plan for AEP {ari_str}: {e}\")\n",
        "\n",
        "# Display the updated plans\n",
        "print(\"\\nUpdated plans in the project:\")\n",
        "display.display(ras.plan_df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Unsteady flow file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u03\n"
          ]
        }
      ],
      "source": [
        "# Get the path to unsteady flow file associated with Plan \"03\"\n",
        "unsteady_file_rev = RasPlan.get_unsteady_path(\"03\")\n",
        "print(f\"Unsteady flow file path: {unsteady_file_rev}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": "[\"'d:\\\\\\\\GitHub\\\\\\\\ras-commander\\\\\\\\examples\\\\\\\\example_projects\\\\\\\\Davis\\\\\\\\DavisStormSystem.u03'\"]"
          },
          "execution_count": 18,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "unsteady_file_rev"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Contents of unsteady flow file for plan 03 (d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u03):\n",
            "--------------------------------------------------------------------------------\n",
            "Flow Title=5YR-24HR Storm\n",
            "Program Version=6.60\n",
            "Use Restart= 0 \n",
            "Boundary Location=                ,                ,        ,        ,                ,DS Channel      ,                ,DS Normal                       ,                                \n",
            "Friction Slope=0.003,0\n",
            "Boundary Location=                ,                ,        ,        ,                ,area2           ,                ,                                ,                                \n",
            "Interval=1HOUR\n",
            "Precipitation Hydrograph= 24 \n",
            "    0.05    0.05    0.06    0.06    0.07    0.07    0.08    0.09    0.11    0.16\n",
            "    0.21    0.60    0.28    0.18    0.14    0.10    0.09    0.08    0.07    0.06\n",
            "    0.06    0.06    0.05    0.05\n",
            "DSS Path=\n",
            "Use DSS=False\n",
            "Use Fixed Start Time=False\n",
            "Fixed Start Date/Time=,\n",
            "Is Critical Boundary=False\n",
            "Critical Boundary Flow=\n",
            "Met Point Raster Parameters=,,,,\n",
            "Precipitation Mode=Disable\n",
            "Wind Mode=No Wind Forces\n",
            "Air Density Mode=Specified\n",
            "Wave Mode=No Wave Forcing\n",
            "Met BC=Precipitation|Mode=Constant\n",
            "Met BC=Precipitation|Expanded View=-1\n",
            "Met BC=Precipitation|Constant Value=1\n",
            "Met BC=Precipitation|Constant Units=in/hr\n",
            "Met BC=Precipitation|Point Interpolation=\n",
            "Met BC=Precipitation|Gridded Source=DSS\n",
            "Met BC=Precipitation|Gridded Interpolation=\n",
            "Met BC=Evapotranspiration|Mode=None\n",
            "Met BC=Evapotranspiration|Expanded View=0\n",
            "Met BC=Evapotranspiration|Constant Units=mm/hr\n",
            "Met BC=Evapotranspiration|Point Interpolation=Nearest\n",
            "Met BC=Evapotranspiration|Gridded Source=DSS\n",
            "Met BC=Evapotranspiration|Gridded Interpolation=\n",
            "Met BC=Wind Speed|Expanded View=0\n",
            "Met BC=Wind Speed|Point Interpolation=Nearest\n",
            "Met BC=Wind Speed|Gridded Source=DSS\n",
            "Met BC=Wind Speed|Gridded Interpolation=\n",
            "Met BC=Wind Direction|Expanded View=0\n",
            "Met BC=Wind Direction|Point Interpolation=Nearest\n",
            "Met BC=Wind Direction|Gridded Source=DSS\n",
            "Met BC=Wind Direction|Gridded Interpolation=\n",
            "Met BC=Wind Velocity X|Expanded View=0\n",
            "Met BC=Wind Velocity X|Point Interpolation=Nearest\n",
            "Met BC=Wind Velocity X|Gridded Source=DSS\n",
            "Met BC=Wind Velocity X|Gridded Interpolation=\n",
            "Met BC=Wind Velocity Y|Expanded View=0\n",
            "Met BC=Wind Velocity Y|Point Interpolation=Nearest\n",
            "Met BC=Wind Velocity Y|Gridded Source=DSS\n",
            "Met BC=Wind Velocity Y|Gridded Interpolation=\n",
            "Met BC=Wave Forcing X|Expanded View=0\n",
            "Met BC=Wave Forcing X|Point Interpolation=Nearest\n",
            "Met BC=Wave Forcing X|Gridded Source=DSS\n",
            "Met BC=Wave Forcing X|Gridded Interpolation=\n",
            "Met BC=Wave Forcing Y|Expanded View=0\n",
            "Met BC=Wave Forcing Y|Point Interpolation=Nearest\n",
            "Met BC=Wave Forcing Y|Gridded Source=DSS\n",
            "Met BC=Wave Forcing Y|Gridded Interpolation=\n",
            "Met BC=Air Density|Mode=Constant\n",
            "Met BC=Air Density|Expanded View=0\n",
            "Met BC=Air Density|Constant Value=1.225\n",
            "Met BC=Air Density|Constant Units=kg/m3\n",
            "Met BC=Air Density|Point Interpolation=Nearest\n",
            "Met BC=Air Density|Gridded Source=DSS\n",
            "Met BC=Air Density|Gridded Interpolation=\n",
            "Met BC=Air Temperature|Expanded View=0\n",
            "Met BC=Air Temperature|Point Interpolation=Nearest\n",
            "Met BC=Air Temperature|Gridded Source=DSS\n",
            "Met BC=Air Temperature|Gridded Interpolation=\n",
            "Met BC=Humidity|Expanded View=0\n",
            "Met BC=Humidity|Point Interpolation=Nearest\n",
            "Met BC=Humidity|Gridded Source=DSS\n",
            "Met BC=Humidity|Gridded Interpolation=\n",
            "Met BC=Air Pressure|Mode=Constant\n",
            "Met BC=Air Pressure|Expanded View=0\n",
            "Met BC=Air Pressure|Constant Value=1013.2\n",
            "Met BC=Air Pressure|Constant Units=mb\n",
            "Met BC=Air Pressure|Point Interpolation=\n",
            "Met BC=Air Pressure|Gridded Source=DSS\n",
            "Met BC=Air Pressure|Gridded Interpolation=\n",
            "Non-Newtonian Method= 0 ,        \n",
            "Non-Newtonian Constant Vol Conc=0\n",
            "Non-Newtonian Yield Method= 0 ,        \n",
            "Non-Newtonian Yield Coef=0, 0\n",
            "User Yeild=   0\n",
            "Non-Newtonian Sed Visc= 0 ,        \n",
            "Non-Newtonian Obrian B=0\n",
            "User Viscosity=0\n",
            "User Viscosity Ratio=0\n",
            "Herschel-Bulkley Coef=0, 0\n",
            "Clastic Method= 0 ,        \n",
            "Coulomb Phi=0\n",
            "Voellmy X=0\n",
            "Non-Newtonian Hindered FV= 0 \n",
            "Non-Newtonian FV K=0\n",
            "Non-Newtonian ds=0\n",
            "Non-Newtonian Max Cv=0\n",
            "Non-Newtonian Bulking Method= 0 , \n",
            "Non-Newtonian High C Transport= 0 , \n",
            "Lava Activation= 0 \n",
            "Temperature=1300,15,,15,14,980\n",
            "Heat Ballance=1,1200,0.5,1,70,0.95\n",
            "Viscosity=1000,,,\n",
            "Yield Strength=,,,\n",
            "Consistency Factor=,,,\n",
            "Profile Coefficient=4,1.3,\n",
            "Lava Param=,2500,\n",
            "\n",
            "--------------------------------------------------------------------------------\n"
          ]
        }
      ],
      "source": [
        "with open(unsteady_file_rev, 'r') as f:\n",
        "    unsteady_contents_rev = f.read()\n",
        "print(f\"Contents of unsteady flow file for plan 03 ({unsteady_file_rev}):\")\n",
        "print(\"-\" * 80)\n",
        "print(unsteady_contents_rev)\n",
        "print(\"-\" * 80)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Differences between d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u01 and d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u03:\n",
            "--------------------------------------------------------------------------------\n",
            "--- d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u01\n",
            "+++ d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u03\n",
            "@@ -1,14 +1,14 @@\n",
            "-Flow Title=Full System Rain w/ Pump\n",
            "+Flow Title=5YR-24HR Storm\n",
            " Program Version=6.60\n",
            " Use Restart= 0 \n",
            " Boundary Location=                ,                ,        ,        ,                ,DS Channel      ,                ,DS Normal                       ,                                \n",
            " Friction Slope=0.003,0\n",
            " Boundary Location=                ,                ,        ,        ,                ,area2           ,                ,                                ,                                \n",
            " Interval=1HOUR\n",
            "-Precipitation Hydrograph= 21 \n",
            "-      .1      .1      .1     .25     .25     .25     .25       0       0       0\n",
            "-       0       0       0       0       0       0       0       0       0       0\n",
            "-       0\n",
            "+Precipitation Hydrograph= 24 \n",
            "+    0.05    0.05    0.06    0.06    0.07    0.07    0.08    0.09    0.11    0.16\n",
            "+    0.21    0.60    0.28    0.18    0.14    0.10    0.09    0.08    0.07    0.06\n",
            "+    0.06    0.06    0.05    0.05\n",
            " DSS Path=\n",
            " Use DSS=False\n",
            " Use Fixed Start Time=False\n",
            "\n",
            "--------------------------------------------------------------------------------\n",
            "Summary: 5 additions, 5 removals\n"
          ]
        }
      ],
      "source": [
        "import difflib\n",
        "\n",
        "def show_file_diff(file1_path, file2_path, context_lines=3):\n",
        "    \"\"\"\n",
        "    Shows the differences between two files with context.\n",
        "    \n",
        "    Parameters:\n",
        "    - file1_path: Path to the first file\n",
        "    - file2_path: Path to the second file\n",
        "    - context_lines: Number of context lines to show around differences\n",
        "    \"\"\"\n",
        "    # Read the file contents\n",
        "    with open(file1_path, 'r') as file1:\n",
        "        file1_lines = file1.readlines()\n",
        "    \n",
        "    with open(file2_path, 'r') as file2:\n",
        "        file2_lines = file2.readlines()\n",
        "    \n",
        "    # Create a differ object\n",
        "    differ = difflib.unified_diff(\n",
        "        file1_lines, \n",
        "        file2_lines,\n",
        "        fromfile=str(file1_path),\n",
        "        tofile=str(file2_path),\n",
        "        n=context_lines\n",
        "    )\n",
        "    \n",
        "    # Convert differ output to a string\n",
        "    diff_text = ''.join(differ)\n",
        "    \n",
        "    # If no differences found\n",
        "    if not diff_text:\n",
        "        print(f\"No differences found between {file1_path} and {file2_path}\")\n",
        "        return\n",
        "    \n",
        "    # Print the differences\n",
        "    print(f\"Differences between {file1_path} and {file2_path}:\")\n",
        "    print(\"-\" * 80)\n",
        "    print(diff_text)\n",
        "    print(\"-\" * 80)\n",
        "    \n",
        "    # Count added, removed, and modified lines\n",
        "    added = sum(1 for line in diff_text.splitlines() if line.startswith('+') and not line.startswith('+++'))\n",
        "    removed = sum(1 for line in diff_text.splitlines() if line.startswith('-') and not line.startswith('---'))\n",
        "    \n",
        "    print(f\"Summary: {added} additions, {removed} removals\")\n",
        "\n",
        "# Show differences between the unsteady flow files\n",
        "if 'unsteady_file' in locals() and 'unsteady_file_rev' in locals():\n",
        "    show_file_diff(unsteady_file, unsteady_file_rev)\n",
        "else:\n",
        "    print(\"Error: One or both unsteady flow file variables not defined.\")\n",
        "    print(\"Please run the cells that define unsteady_file and unsteady_file_rev first.\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Define Parallel Execution and Results Analysis Functions\n",
        "\n",
        "These functions manage parallel plan execution with resource optimization and extract, analyze, and visualize the results."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {},
      "outputs": [],
      "source": [
        "def execute_plans_in_parallel(plan_numbers, project, max_workers=None, cores_per_worker=2):\n",
        "    \"\"\"\n",
        "    Executes multiple plans in parallel.\n",
        "    \"\"\"\n",
        "    # Calculate optimal number of workers if not provided\n",
        "    if max_workers is None:\n",
        "        physical_cores = psutil.cpu_count(logical=False)  # Physical cores only\n",
        "        max_workers = max(1, physical_cores // cores_per_worker)\n",
        "    \n",
        "    print(f\"Executing {len(plan_numbers)} plans in parallel with {max_workers} workers, \" + \n",
        "          f\"each using {cores_per_worker} cores...\")\n",
        "    \n",
        "    # Create compute folder\n",
        "    compute_folder = Path(project.project_folder) / \"compute_aep_parallel\"\n",
        "    compute_folder.mkdir(parents=True, exist_ok=True)\n",
        "    \n",
        "    # Execute plans in parallel\n",
        "    start_time = time.time()\n",
        "    \n",
        "    results = RasCmdr.compute_parallel(\n",
        "        plan_number=plan_numbers,\n",
        "        max_workers=max_workers,\n",
        "        num_cores=cores_per_worker,\n",
        "        dest_folder=compute_folder,\n",
        "        clear_geompre=True,\n",
        "        overwrite_dest=True,\n",
        "        ras_object=project\n",
        "    )\n",
        "    \n",
        "    end_time = time.time()\n",
        "    total_duration = end_time - start_time\n",
        "    \n",
        "    print(f\"Parallel execution completed in {total_duration:.2f} seconds\")\n",
        "    \n",
        "    # Create a DataFrame from the execution results\n",
        "    results_df = pd.DataFrame([\n",
        "        {\"Plan\": plan, \"Success\": success}\n",
        "        for plan, success in results.items()\n",
        "    ])\n",
        "    \n",
        "    # Sort by plan number\n",
        "    results_df = results_df.sort_values(\"Plan\")\n",
        "    \n",
        "    print(\"\\nExecution Results:\")\n",
        "    display.display(results_df)\n",
        "    \n",
        "    return results, compute_folder"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Unsteady flow file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.u01\n"
          ]
        }
      ],
      "source": [
        "# Get the path to unsteady flow file associated with Plan \"01\"\n",
        "unsteady_file = RasPlan.get_unsteady_path(\"01\")\n",
        "print(f\"Unsteady flow file path: {unsteady_file}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {},
      "outputs": [],
      "source": [
        "#-------------------------------------------------------------------------\n",
        "# Execute all plans in parallel\n",
        "#-------------------------------------------------------------------------"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 05:05:44 - ras_commander.RasCmdr - INFO - Destination folder 'd:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel' exists. Overwriting as per overwrite_dest=True.\n",
            "2025-04-10 05:05:44 - ras_commander.RasCmdr - INFO - Copied project folder to destination: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\n",
            "2025-04-10 05:05:44 - ras_commander.RasCmdr - INFO - Adjusted max_workers to 1 based on the number of plans: 7\n",
            "2025-04-10 05:05:44 - ras_commander.RasCmdr - INFO - Created worker folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Executing 0 plans in parallel with 1 workers, each using 2 cores...\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 05:05:45 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.rasmap\n",
            "2025-04-10 05:05:45 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.rasmap\n",
            "2025-04-10 05:05:45 - ras_commander.RasPrj - INFO - Global 'ras' object also updated to match the new project.\n",
            "2025-04-10 05:05:45 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\n",
            "2025-04-10 05:05:45 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\n",
            "2025-04-10 05:05:45 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p02\n",
            "2025-04-10 05:05:45 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p02\n",
            "2025-04-10 05:05:45 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-10 05:05:45 - ras_commander.RasCmdr - INFO - Cleared geometry preprocessor files for plan: 02\n",
            "2025-04-10 05:05:45 - ras_commander.RasUtils - INFO - Using provided plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p02\n",
            "2025-04-10 05:05:45 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p02\n",
            "2025-04-10 05:05:45 - ras_commander.RasCmdr - INFO - Set number of cores to 2 for plan: 02\n",
            "2025-04-10 05:05:45 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-10 05:05:45 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p02\"\n",
            "2025-04-10 05:07:03 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 02\n",
            "2025-04-10 05:07:03 - ras_commander.RasCmdr - INFO - Total run time for plan 02: 78.09 seconds\n",
            "2025-04-10 05:07:03 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\n",
            "2025-04-10 05:07:03 - ras_commander.RasCmdr - INFO - Plan 02 executed in worker 1: Successful\n",
            "2025-04-10 05:07:03 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p01\n",
            "2025-04-10 05:07:03 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p01\n",
            "2025-04-10 05:07:03 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-10 05:07:03 - ras_commander.RasCmdr - INFO - Cleared geometry preprocessor files for plan: 01\n",
            "2025-04-10 05:07:03 - ras_commander.RasUtils - INFO - Using provided plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p01\n",
            "2025-04-10 05:07:03 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p01\n",
            "2025-04-10 05:07:03 - ras_commander.RasCmdr - INFO - Set number of cores to 2 for plan: 01\n",
            "2025-04-10 05:07:03 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-10 05:07:03 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p01\"\n",
            "2025-04-10 05:08:27 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 01\n",
            "2025-04-10 05:08:27 - ras_commander.RasCmdr - INFO - Total run time for plan 01: 84.01 seconds\n",
            "2025-04-10 05:08:27 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\n",
            "2025-04-10 05:08:27 - ras_commander.RasCmdr - INFO - Plan 01 executed in worker 1: Successful\n",
            "2025-04-10 05:08:27 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p03\n",
            "2025-04-10 05:08:27 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p03\n",
            "2025-04-10 05:08:27 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-10 05:08:27 - ras_commander.RasCmdr - INFO - Cleared geometry preprocessor files for plan: 03\n",
            "2025-04-10 05:08:27 - ras_commander.RasUtils - INFO - Using provided plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p03\n",
            "2025-04-10 05:08:27 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p03\n",
            "2025-04-10 05:08:27 - ras_commander.RasCmdr - INFO - Set number of cores to 2 for plan: 03\n",
            "2025-04-10 05:08:27 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-10 05:08:27 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p03\"\n",
            "2025-04-10 05:09:48 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 03\n",
            "2025-04-10 05:09:48 - ras_commander.RasCmdr - INFO - Total run time for plan 03: 81.44 seconds\n",
            "2025-04-10 05:09:48 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\n",
            "2025-04-10 05:09:48 - ras_commander.RasCmdr - INFO - Plan 03 executed in worker 1: Successful\n",
            "2025-04-10 05:09:48 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p04\n",
            "2025-04-10 05:09:48 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p04\n",
            "2025-04-10 05:09:48 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-10 05:09:48 - ras_commander.RasCmdr - INFO - Cleared geometry preprocessor files for plan: 04\n",
            "2025-04-10 05:09:48 - ras_commander.RasUtils - INFO - Using provided plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p04\n",
            "2025-04-10 05:09:48 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p04\n",
            "2025-04-10 05:09:48 - ras_commander.RasCmdr - INFO - Set number of cores to 2 for plan: 04\n",
            "2025-04-10 05:09:48 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-10 05:09:48 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p04\"\n",
            "2025-04-10 05:10:51 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 04\n",
            "2025-04-10 05:10:51 - ras_commander.RasCmdr - INFO - Total run time for plan 04: 62.58 seconds\n",
            "2025-04-10 05:10:51 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\n",
            "2025-04-10 05:10:51 - ras_commander.RasCmdr - INFO - Plan 04 executed in worker 1: Successful\n",
            "2025-04-10 05:10:51 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p05\n",
            "2025-04-10 05:10:51 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p05\n",
            "2025-04-10 05:10:51 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-10 05:10:51 - ras_commander.RasCmdr - INFO - Cleared geometry preprocessor files for plan: 05\n",
            "2025-04-10 05:10:51 - ras_commander.RasUtils - INFO - Using provided plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p05\n",
            "2025-04-10 05:10:51 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p05\n",
            "2025-04-10 05:10:51 - ras_commander.RasCmdr - INFO - Set number of cores to 2 for plan: 05\n",
            "2025-04-10 05:10:51 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-10 05:10:51 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p05\"\n",
            "2025-04-10 05:11:52 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 05\n",
            "2025-04-10 05:11:52 - ras_commander.RasCmdr - INFO - Total run time for plan 05: 60.98 seconds\n",
            "2025-04-10 05:11:52 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\n",
            "2025-04-10 05:11:52 - ras_commander.RasCmdr - INFO - Plan 05 executed in worker 1: Successful\n",
            "2025-04-10 05:11:52 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p06\n",
            "2025-04-10 05:11:52 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p06\n",
            "2025-04-10 05:11:52 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-10 05:11:52 - ras_commander.RasCmdr - INFO - Cleared geometry preprocessor files for plan: 06\n",
            "2025-04-10 05:11:52 - ras_commander.RasUtils - INFO - Using provided plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p06\n",
            "2025-04-10 05:11:52 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p06\n",
            "2025-04-10 05:11:52 - ras_commander.RasCmdr - INFO - Set number of cores to 2 for plan: 06\n",
            "2025-04-10 05:11:52 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-10 05:11:52 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p06\"\n",
            "2025-04-10 05:12:52 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 06\n",
            "2025-04-10 05:12:52 - ras_commander.RasCmdr - INFO - Total run time for plan 06: 59.44 seconds\n",
            "2025-04-10 05:12:52 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\n",
            "2025-04-10 05:12:52 - ras_commander.RasCmdr - INFO - Plan 06 executed in worker 1: Successful\n",
            "2025-04-10 05:12:52 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p07\n",
            "2025-04-10 05:12:52 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p07\n",
            "2025-04-10 05:12:52 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-10 05:12:52 - ras_commander.RasCmdr - INFO - Cleared geometry preprocessor files for plan: 07\n",
            "2025-04-10 05:12:52 - ras_commander.RasUtils - INFO - Using provided plan file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p07\n",
            "2025-04-10 05:12:52 - ras_commander.RasUtils - INFO - Successfully updated file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p07\n",
            "2025-04-10 05:12:52 - ras_commander.RasCmdr - INFO - Set number of cores to 2 for plan: 07\n",
            "2025-04-10 05:12:52 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-10 05:12:52 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.prj\" \"d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel [Worker 1]\\DavisStormSystem.p07\"\n",
            "2025-04-10 05:13:51 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 07\n",
            "2025-04-10 05:13:51 - ras_commander.RasCmdr - INFO - Total run time for plan 07: 59.75 seconds\n",
            "2025-04-10 05:13:51 - ras_commander.RasCmdr - INFO - Plan 07 executed in worker 1: Successful\n",
            "2025-04-10 05:13:51 - ras_commander.RasCmdr - INFO - Final destination for computed results: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\n",
            "2025-04-10 05:13:54 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.rasmap\n",
            "2025-04-10 05:13:54 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.rasmap\n",
            "2025-04-10 05:13:54 - ras_commander.RasPrj - INFO - Global 'ras' object also updated to match the new project.\n",
            "2025-04-10 05:13:54 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\n",
            "2025-04-10 05:13:54 - ras_commander.RasCmdr - INFO - \n",
            "Execution Results:\n",
            "2025-04-10 05:13:54 - ras_commander.RasCmdr - INFO - Plan 02: Successful\n",
            "2025-04-10 05:13:54 - ras_commander.RasCmdr - INFO - Plan 01: Successful\n",
            "2025-04-10 05:13:54 - ras_commander.RasCmdr - INFO - Plan 03: Successful\n",
            "2025-04-10 05:13:54 - ras_commander.RasCmdr - INFO - Plan 04: Successful\n",
            "2025-04-10 05:13:54 - ras_commander.RasCmdr - INFO - Plan 05: Successful\n",
            "2025-04-10 05:13:54 - ras_commander.RasCmdr - INFO - Plan 06: Successful\n",
            "2025-04-10 05:13:54 - ras_commander.RasCmdr - INFO - Plan 07: Successful\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Parallel execution completed in 489.36 seconds\n",
            "\n",
            "Execution Results:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Plan</th>\\n', '      <th>Success</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>1</th>\\n', '      <td>01</td>\\n', '      <td>True</td>\\n', '    </tr><tr>\\n', '      <th>0</th>\\n', '      <td>02</td>\\n', '      <td>True</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>03</td>\\n', '      <td>True</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>04</td>\\n', '      <td>True</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>05</td>\\n', '      <td>True</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  Plan  Success\n",
              "1   01     True\n",
              "0   02     True\n",
              "2   03     True\n",
              "3   04     True\n",
              "4   05     True\n",
              "5   06     True\n",
              "6   07     True"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Set computation parameters for better performance\n",
        "for plan_number in new_plan_numbers:\n",
        "    RasPlan.set_num_cores(plan_number, 2, ras_object=ras)\n",
        "    RasPlan.update_plan_intervals(\n",
        "        plan_number,\n",
        "        computation_interval=\"15MIN\",\n",
        "        output_interval=\"30MIN\",\n",
        "        mapping_interval=\"1HOUR\",\n",
        "        ras_object=ras\n",
        "    )\n",
        "    print(f\"Updated computation settings for plan {plan_number}\")\n",
        "\n",
        "# Execute plans in parallel\n",
        "results, compute_folder = execute_plans_in_parallel(\n",
        "    plan_numbers=new_plan_numbers,\n",
        "    project=ras\n",
        ")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "print(\"\\nStep 4: Executing all plans in parallel...\")\n",
        "\n",
        "results, compute_folder = execute_plans_in_parallel(\n",
        "    plan_numbers=new_plan_numbers,\n",
        "    project=ras\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>UNET D2 SolverType</th>\\n', '      <th>UNET D2 Name</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>02</td>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>Full System ROM with Pump</td>\\n', '      <td>6.60</td>\\n', '      <td>Full System ROM with Pump</td>\\n', '      <td>10JAN2000,1200,11JAN2000,2400</td>\\n', '      <td>12SEC</td>\\n', '      <td>10MIN</td>\\n', '      <td>-1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>PARDISO (Direct)</td>\\n', '      <td>area2</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>None</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>02</td>\\n', '      <td>Full System ROM with Pump</td>\\n', '      <td>6.60</td>\\n', '      <td>2YR-24HR</td>\\n', '      <td>10JAN2000,1200,11JAN2000,2400</td>\\n', '      <td>12SEC</td>\\n', '      <td>10MIN</td>\\n', '      <td>-1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>PARDISO (Direct)</td>\\n', '      <td>area2</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>03</td>\\n', '      <td>03</td>\\n', '      <td>02</td>\\n', '      <td>Full System ROM with Pump</td>\\n', '      <td>6.60</td>\\n', '      <td>5YR-24HR</td>\\n', '      <td>10JAN2000,1200,11JAN2000,2400</td>\\n', '      <td>12SEC</td>\\n', '      <td>10MIN</td>\\n', '      <td>-1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>PARDISO (Direct)</td>\\n', '      <td>area2</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>03</td>\\n', '      <td>None</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>04</td>\\n', '      <td>04</td>\\n', '      <td>02</td>\\n', '      <td>Full System ROM with Pump</td>\\n', '      <td>6.60</td>\\n', '      <td>10YR-24HR</td>\\n', '      <td>10JAN2000,1200,11JAN2000,2400</td>\\n', '      <td>12SEC</td>\\n', '      <td>10MIN</td>\\n', '      <td>-1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>PARDISO (Direct)</td>\\n', '      <td>area2</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>04</td>\\n', '      <td>None</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>05</td>\\n', '      <td>05</td>\\n', '      <td>02</td>\\n', '      <td>Full System ROM with Pump</td>\\n', '      <td>6.60</td>\\n', '      <td>25YR-24HR</td>\\n', '      <td>10JAN2000,1200,11JAN2000,2400</td>\\n', '      <td>12SEC</td>\\n', '      <td>10MIN</td>\\n', '      <td>-1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>PARDISO (Direct)</td>\\n', '      <td>area2</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>05</td>\\n', '      <td>None</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  plan_number unsteady_number geometry_number                 Plan Title  \\\\\\n', '0          02              01              02  Full System ROM with Pump   \\n', '1          01              02              02  Full System ROM with Pump   \\n', '2          03              03              02  Full System ROM with Pump   \\n', '3          04              04              02  Full System ROM with Pump   \\n', '4          05              05              02  Full System ROM with Pump   \\n', '5          06              06              02  Full System ROM with Pump   \\n', '6          07              07              02  Full System ROM with Pump   \\n', '\\n', '  Program Version           Short Identifier                Simulation Date  \\\\\\n', '0            6.60  Full System ROM with Pump  10JAN2000,1200,11JAN2000,2400   \\n', '1            6.60                   2YR-24HR  10JAN2000,1200,11JAN2000,2400   \\n', '2            6.60                   5YR-24HR  10JAN2000,1200,11JAN2000,2400   \\n', '3     \n...\n[Output truncated, 3834 characters total]"
          },
          "execution_count": 25,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "ras.plan_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p02.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: DavisStormSystem.p02.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Plan Name: Full System ROM with Pump\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 36.0\n"
          ]
        }
      ],
      "source": [
        "runtime_df = HdfResultsPlan.get_runtime_data(\"02\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Plan Name</th>\\n', '      <th>File Name</th>\\n', '      <th>Simulation Start Time</th>\\n', '      <th>Simulation End Time</th>\\n', '      <th>Simulation Duration (s)</th>\\n', '      <th>Simulation Time (hr)</th>\\n', '      <th>Completing Geometry (hr)</th>\\n', '      <th>Preprocessing Geometry (hr)</th>\\n', '      <th>Completing Event Conditions (hr)</th>\\n', '      <th>Unsteady Flow Computations (hr)</th>\\n', '      <th>Complete Process (hr)</th>\\n', '      <th>Unsteady Flow Speed (hr/hr)</th>\\n', '      <th>Complete Process Speed (hr/hr)</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>Full System ROM with Pump</td>\\n', '      <td>DavisStormSystem.p02.hdf</td>\\n', '      <td>2000-01-10 12:00:00</td>\\n', '      <td>2000-01-12</td>\\n', '      <td>129600.0</td>\\n', '      <td>36.0</td>\\n', '      <td>N/A</td>\\n', '      <td>0.000082</td>\\n', '      <td>N/A</td>\\n', '      <td>0.019058</td>\\n', '      <td>0.020725</td>\\n', '      <td>1888.937473</td>\\n', '      <td>1737.032569</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['                   Plan Name                 File Name Simulation Start Time  \\\\\\n', '0  Full System ROM with Pump  DavisStormSystem.p02.hdf   2000-01-10 12:00:00   \\n', '\\n', '  Simulation End Time  Simulation Duration (s)  Simulation Time (hr)  \\\\\\n', '0          2000-01-12                 129600.0                  36.0   \\n', '\\n', '  Completing Geometry (hr)  Preprocessing Geometry (hr)  \\\\\\n', '0                      N/A                     0.000082   \\n', '\\n', '  Completing Event Conditions (hr)  Unsteady Flow Computations (hr)  \\\\\\n', '0                              N/A                         0.019058   \\n', '\\n', '   Complete Process (hr)  Unsteady Flow Speed (hr/hr)  \\\\\\n', '0               0.020725                  1888.937473   \\n', '\\n', '   Complete Process Speed (hr/hr)  \\n', '0                     1737.032569  ']"
          },
          "execution_count": 27,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "runtime_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p02.hdf\n"
          ]
        }
      ],
      "source": [
        "pipe_flow_ds = HdfPipe.get_pipe_network_timeseries(\"02\", variable=\"Pipes/Pipe Flow DS\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div><pre>xarray.DataArray with Unknown dimensions\n[Full xarray output truncated during preprocessing]</pre></div>",
            "text/plain": "xarray.DataArray with Unknown dimensions\n[Full xarray output truncated during preprocessing]"
          },
          "execution_count": 29,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "pipe_flow_ds "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p02.hdf\n"
          ]
        }
      ],
      "source": [
        "node_ws = HdfPipe.get_pipe_network_timeseries(\"02\", variable=\"Nodes/Water Surface\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div><pre>xarray.DataArray with Unknown dimensions\n[Full xarray output truncated during preprocessing]</pre></div>",
            "text/plain": "xarray.DataArray with Unknown dimensions\n[Full xarray output truncated during preprocessing]"
          },
          "execution_count": 31,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "node_ws"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {},
      "outputs": [],
      "source": [
        "def analyze_results(results, compute_folder, project):\n",
        "    \"\"\"\n",
        "    Analyzes the results from multiple plans.\n",
        "    \"\"\"\n",
        "    print(\"Analyzing results from parallel execution...\")\n",
        "    \n",
        "    # Initialize a RAS project in the compute folder\n",
        "    compute_project = RasPrj()\n",
        "    compute_project = init_ras_project(compute_folder, \"6.6\", ras_object=compute_project)\n",
        "    print(f\"Initialized compute project: {compute_project.project_name}\")\n",
        "    \n",
        "    # Check which plans have results\n",
        "    plans_with_results = compute_project.plan_df[compute_project.plan_df['HDF_Results_Path'].notna()]\n",
        "    print(f\"\\nFound {len(plans_with_results)} plans with results:\")\n",
        "    display.display(plans_with_results[['plan_number', 'Short Identifier', 'HDF_Results_Path']])\n",
        "    \n",
        "    # Initialize a dictionary to store analysis results\n",
        "    analysis_results = {}\n",
        "    \n",
        "    # Analyze each plan's results\n",
        "    for idx, row in plans_with_results.iterrows():\n",
        "        plan_number = row['plan_number']\n",
        "        plan_name = row['Short Identifier']\n",
        "        hdf_path = row['HDF_Results_Path']\n",
        "        \n",
        "        print(f\"\\nAnalyzing results for plan {plan_number} ({plan_name})...\")\n",
        "        \n",
        "        try:\n",
        "            # Get runtime data\n",
        "            runtime_df = HdfResultsPlan.get_runtime_data(hdf_path)\n",
        "            \n",
        "            if runtime_df is not None and not runtime_df.empty:\n",
        "                # Extract key metrics\n",
        "                sim_duration = runtime_df['Simulation Duration (s)'].iloc[0]\n",
        "                compute_time = runtime_df['Complete Process (hr)'].iloc[0]\n",
        "                compute_speed = runtime_df['Complete Process Speed (hr/hr)'].iloc[0]\n",
        "                \n",
        "                # Get pipe network results\n",
        "                try:\n",
        "                    # Get pipe flow data\n",
        "                    pipe_flow_ds = HdfPipe.get_pipe_network_timeseries(hdf_path, variable=\"Pipes/Pipe Flow DS\")\n",
        "                    node_ws = HdfPipe.get_pipe_network_timeseries(hdf_path, variable=\"Nodes/Water Surface\")\n",
        "                    \n",
        "                    # Convert xarray DataArrays to numpy arrays and compute statistics\n",
        "                    pipe_flow_array = pipe_flow_ds.values\n",
        "                    node_ws_array = node_ws.values\n",
        "                    \n",
        "                    # Calculate maximum flows and water surfaces\n",
        "                    max_flows = np.nanmax(pipe_flow_array, axis=0)  # Max over time for each location\n",
        "                    avg_max_flow = np.nanmean(max_flows)\n",
        "                    max_max_flow = np.nanmax(max_flows)\n",
        "                    \n",
        "                    max_ws = np.nanmax(node_ws_array, axis=0)  # Max over time for each node\n",
        "                    avg_max_ws = np.nanmean(max_ws)\n",
        "                    max_max_ws = np.nanmax(max_ws)\n",
        "                    \n",
        "                    # Store results in the dictionary\n",
        "                    analysis_results[plan_name] = {\n",
        "                        'Plan Number': plan_number,\n",
        "                        'Simulation Duration (s)': sim_duration,\n",
        "                        'Compute Time (hr)': compute_time,\n",
        "                        'Compute Speed (hr/hr)': compute_speed,\n",
        "                        'Average Max Pipe Flow (cfs)': avg_max_flow,\n",
        "                        'Maximum Pipe Flow (cfs)': max_max_flow,\n",
        "                        'Average Max Node Water Surface (ft)': avg_max_ws,\n",
        "                        'Maximum Node Water Surface (ft)': max_max_ws,\n",
        "                        'HDF Path': hdf_path\n",
        "                    }\n",
        "                    \n",
        "                    print(f\"  Simulation Duration: {sim_duration:.2f} seconds\")\n",
        "                    print(f\"  Computation Time: {compute_time:.5f} hours\")\n",
        "                    print(f\"  Computation Speed: {compute_speed:.2f} (simulation hours/compute hours)\")\n",
        "                    print(f\"  Average Max Pipe Flow: {avg_max_flow:.2f} cfs\")\n",
        "                    print(f\"  Maximum Pipe Flow: {max_max_flow:.2f} cfs\")\n",
        "                    print(f\"  Average Max Node Water Surface: {avg_max_ws:.2f} ft\")\n",
        "                    print(f\"  Maximum Node Water Surface: {max_max_ws:.2f} ft\")\n",
        "                    \n",
        "                except Exception as e:\n",
        "                    print(f\"  Error analyzing pipe network data: {str(e)}\")\n",
        "                    analysis_results[plan_name] = {\n",
        "                        'Plan Number': plan_number,\n",
        "                        'Simulation Duration (s)': sim_duration,\n",
        "                        'Compute Time (hr)': compute_time,\n",
        "                        'Compute Speed (hr/hr)': compute_speed,\n",
        "                        'Average Max Pipe Flow (cfs)': np.nan,\n",
        "                        'Maximum Pipe Flow (cfs)': np.nan,\n",
        "                        'Average Max Node Water Surface (ft)': np.nan,\n",
        "                        'Maximum Node Water Surface (ft)': np.nan,\n",
        "                        'HDF Path': hdf_path\n",
        "                    }\n",
        "            else:\n",
        "                print(\"  No runtime data found.\")\n",
        "                analysis_results[plan_name] = {\n",
        "                    'Plan Number': plan_number,\n",
        "                    'Simulation Duration (s)': np.nan,\n",
        "                    'Compute Time (hr)': np.nan,\n",
        "                    'Compute Speed (hr/hr)': np.nan,\n",
        "                    'Average Max Pipe Flow (cfs)': np.nan,\n",
        "                    'Maximum Pipe Flow (cfs)': np.nan,\n",
        "                    'Average Max Node Water Surface (ft)': np.nan,\n",
        "                    'Maximum Node Water Surface (ft)': np.nan,\n",
        "                    'HDF Path': hdf_path\n",
        "                }\n",
        "                \n",
        "        except Exception as e:\n",
        "            print(f\"  Error analyzing plan {plan_number}: {str(e)}\")\n",
        "            analysis_results[plan_name] = {\n",
        "                'Plan Number': plan_number,\n",
        "                'Simulation Duration (s)': np.nan,\n",
        "                'Compute Time (hr)': np.nan,\n",
        "                'Compute Speed (hr/hr)': np.nan,\n",
        "                'Average Max Pipe Flow (cfs)': np.nan,\n",
        "                'Maximum Pipe Flow (cfs)': np.nan,\n",
        "                'Average Max Node Water Surface (ft)': np.nan,\n",
        "                'Maximum Node Water Surface (ft)': np.nan,\n",
        "                'HDF Path': hdf_path\n",
        "            }\n",
        "    \n",
        "    # Create a DataFrame from the analysis results\n",
        "    analysis_df = pd.DataFrame.from_dict(analysis_results, orient='index')\n",
        "    \n",
        "    # Extract AEP years and handle NaN values\n",
        "    analysis_df['AEP_Years'] = analysis_df.index.str.extract(r'(\\d+)YR').astype(float)\n",
        "    \n",
        "    # Sort by AEP years, handling the base plan\n",
        "    analysis_df = analysis_df.sort_values('AEP_Years', na_position='first')\n",
        "    \n",
        "    # Drop the temporary column used for sorting\n",
        "    analysis_df = analysis_df.drop(columns=['AEP_Years'])\n",
        "    \n",
        "    print(\"\\nAnalysis Results:\")\n",
        "    display.display(analysis_df)\n",
        "    \n",
        "    return analysis_df\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 05:13:54 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.rasmap\n",
            "2025-04-10 05:13:54 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.rasmap\n",
            "2025-04-10 05:13:54 - ras_commander.RasPrj - INFO - Global 'ras' object also updated to match the new project.\n",
            "2025-04-10 05:13:54 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Step 5: Analyzing the results...\n",
            "Analyzing results from parallel execution...\n",
            "Initialized compute project: DavisStormSystem\n",
            "\n",
            "Found 7 plans with results:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>HDF_Results_Path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>02</td>\\n', '      <td>Full System ROM with Pump</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>01</td>\\n', '      <td>2YR-24HR</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>03</td>\\n', '      <td>5YR-24HR</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>04</td>\\n', '      <td>10YR-24HR</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>05</td>\\n', '      <td>25YR-24HR</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "  plan_number           Short Identifier  \\\n",
              "0          02  Full System ROM with Pump   \n",
              "1          01                   2YR-24HR   \n",
              "2          03                   5YR-24HR   \n",
              "3          04                  10YR-24HR   \n",
              "4          05                  25YR-24HR   \n",
              "5          06                  50YR-24HR   \n",
              "6          07                 100YR-24HR   \n",
              "\n",
              "                                    HDF_Results_Path  \n",
              "0  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "1  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "2  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "3  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "4  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "5  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "6  d:\\GitHub\\ras-commander\\examples\\example_proje...  "
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p02.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p02.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: DavisStormSystem.p02.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Plan Name: Full System ROM with Pump\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 36.0\n",
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p02.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p02.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p02.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p02.hdf\n",
            "C:\\Users\\bill\\AppData\\Local\\Temp\\ipykernel_11124\\2728386702.py:49: RuntimeWarning: All-NaN slice encountered\n",
            "  max_flows = np.nanmax(pipe_flow_array, axis=0)  # Max over time for each location\n",
            "C:\\Users\\bill\\AppData\\Local\\Temp\\ipykernel_11124\\2728386702.py:53: RuntimeWarning: All-NaN slice encountered\n",
            "  max_ws = np.nanmax(node_ws_array, axis=0)  # Max over time for each node\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p01.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p01.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: DavisStormSystem.p01.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Plan Name: Full System ROM with Pump\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 36.0\n",
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p01.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p01.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p01.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p01.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p03.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p03.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: DavisStormSystem.p03.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Plan Name: Full System ROM with Pump\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 36.0\n",
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p03.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p03.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p03.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p03.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p04.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p04.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: DavisStormSystem.p04.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Plan Name: Full System ROM with Pump\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 36.0\n",
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p04.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p04.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p04.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Analyzing results for plan 02 (Full System ROM with Pump)...\n",
            "  Simulation Duration: 129600.00 seconds\n",
            "  Computation Time: 0.02073 hours\n",
            "  Computation Speed: 1737.03 (simulation hours/compute hours)\n",
            "  Average Max Pipe Flow: 8.21 cfs\n",
            "  Maximum Pipe Flow: 56.55 cfs\n",
            "  Average Max Node Water Surface: 41.90 ft\n",
            "  Maximum Node Water Surface: 47.01 ft\n",
            "\n",
            "Analyzing results for plan 01 (2YR-24HR)...\n",
            "  Simulation Duration: 129600.00 seconds\n",
            "  Computation Time: 0.02283 hours\n",
            "  Computation Speed: 1576.87 (simulation hours/compute hours)\n",
            "  Average Max Pipe Flow: 8.22 cfs\n",
            "  Maximum Pipe Flow: 58.27 cfs\n",
            "  Average Max Node Water Surface: 42.18 ft\n",
            "  Maximum Node Water Surface: 47.11 ft\n",
            "\n",
            "Analyzing results for plan 03 (5YR-24HR)...\n",
            "  Simulation Duration: 129600.00 seconds\n",
            "  Computation Time: 0.02209 hours\n",
            "  Computation Speed: 1629.53 (simulation hours/compute hours)\n",
            "  Average Max Pipe Flow: 8.46 cfs\n",
            "  Maximum Pipe Flow: 60.30 cfs\n",
            "  Average Max Node Water Surface: 42.51 ft\n",
            "  Maximum Node Water Surface: 47.21 ft\n",
            "\n",
            "Analyzing results for plan 04 (10YR-24HR)...\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p04.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p05.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p05.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: DavisStormSystem.p05.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Plan Name: Full System ROM with Pump\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 36.0\n",
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p05.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p05.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p05.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "  Simulation Duration: 129600.00 seconds\n",
            "  Computation Time: 0.01682 hours\n",
            "  Computation Speed: 2139.92 (simulation hours/compute hours)\n",
            "  Average Max Pipe Flow: 8.32 cfs\n",
            "  Maximum Pipe Flow: 61.29 cfs\n",
            "  Average Max Node Water Surface: 42.72 ft\n",
            "  Maximum Node Water Surface: 47.27 ft\n",
            "\n",
            "Analyzing results for plan 05 (25YR-24HR)...\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p05.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p06.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p06.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: DavisStormSystem.p06.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Plan Name: Full System ROM with Pump\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 36.0\n",
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p06.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p06.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p06.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p06.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p07.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p07.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: DavisStormSystem.p07.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Plan Name: Full System ROM with Pump\n",
            "2025-04-10 05:13:54 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 36.0\n",
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p07.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p07.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "  Simulation Duration: 129600.00 seconds\n",
            "  Computation Time: 0.01652 hours\n",
            "  Computation Speed: 2178.70 (simulation hours/compute hours)\n",
            "  Average Max Pipe Flow: 8.42 cfs\n",
            "  Maximum Pipe Flow: 62.03 cfs\n",
            "  Average Max Node Water Surface: 42.96 ft\n",
            "  Maximum Node Water Surface: 47.37 ft\n",
            "\n",
            "Analyzing results for plan 06 (50YR-24HR)...\n",
            "  Simulation Duration: 129600.00 seconds\n",
            "  Computation Time: 0.01608 hours\n",
            "  Computation Speed: 2238.11 (simulation hours/compute hours)\n",
            "  Average Max Pipe Flow: 8.52 cfs\n",
            "  Maximum Pipe Flow: 62.40 cfs\n",
            "  Average Max Node Water Surface: 43.13 ft\n",
            "  Maximum Node Water Surface: 47.43 ft\n",
            "\n",
            "Analyzing results for plan 07 (100YR-24HR)...\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p07.hdf\n",
            "2025-04-10 05:13:54 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p07.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "  Simulation Duration: 129600.00 seconds\n",
            "  Computation Time: 0.01615 hours\n",
            "  Computation Speed: 2229.64 (simulation hours/compute hours)\n",
            "  Average Max Pipe Flow: 8.59 cfs\n",
            "  Maximum Pipe Flow: 63.16 cfs\n",
            "  Average Max Node Water Surface: 43.31 ft\n",
            "  Maximum Node Water Surface: 48.03 ft\n",
            "\n",
            "Analysis Results:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Plan Number</th>\\n', '      <th>Simulation Duration (s)</th>\\n', '      <th>Compute Time (hr)</th>\\n', '      <th>Compute Speed (hr/hr)</th>\\n', '      <th>Average Max Pipe Flow (cfs)</th>\\n', '      <th>Maximum Pipe Flow (cfs)</th>\\n', '      <th>Average Max Node Water Surface (ft)</th>\\n', '      <th>Maximum Node Water Surface (ft)</th>\\n', '      <th>HDF Path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>Full System ROM with Pump</th>\\n', '      <td>02</td>\\n', '      <td>129600.0</td>\\n', '      <td>0.020725</td>\\n', '      <td>1737.032569</td>\\n', '      <td>8.205216</td>\\n', '      <td>56.546627</td>\\n', '      <td>41.904858</td>\\n', '      <td>47.007301</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>2YR-24HR</th>\\n', '      <td>01</td>\\n', '      <td>129600.0</td>\\n', '      <td>0.022830</td>\\n', '      <td>1576.872536</td>\\n', '      <td>8.215710</td>\\n', '      <td>58.272476</td>\\n', '      <td>42.178600</td>\\n', '      <td>47.105679</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>5YR-24HR</th>\\n', '      <td>03</td>\\n', '      <td>129600.0</td>\\n', '      <td>0.022092</td>\\n', '      <td>1629.532767</td>\\n', '      <td>8.461962</td>\\n', '      <td>60.300476</td>\\n', '      <td>42.507812</td>\\n', '      <td>47.209702</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>10YR-24HR</th>\\n', '      <td>04</td>\\n', '      <td>129600.0</td>\\n', '      <td>0.016823</td>\\n', '      <td>2139.920413</td>\\n', '      <td>8.318513</td>\\n', '      <td>61.286335</td>\\n', '      <td>42.715992</td>\\n', '      <td>47.272884</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>25YR-24HR</th>\\n', '      <td>05</td>\\n', '      <td>129600.0</td>\\n', '      <td>0.016524</td>\\n', '      <td>2178.700513</td>\\n', '      <td>8.423787</td>\\n', '      <td>62.026176</td>\\n', '      <td>42.962963</td>\\n', '      <td>47.367840</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": [
              "                          Plan Number  Simulation Duration (s)  \\\n",
              "Full System ROM with Pump          02                 129600.0   \n",
              "2YR-24HR                           01                 129600.0   \n",
              "5YR-24HR                           03                 129600.0   \n",
              "10YR-24HR                          04                 129600.0   \n",
              "25YR-24HR                          05                 129600.0   \n",
              "50YR-24HR                          06                 129600.0   \n",
              "100YR-24HR                         07                 129600.0   \n",
              "\n",
              "                           Compute Time (hr)  Compute Speed (hr/hr)  \\\n",
              "Full System ROM with Pump           0.020725            1737.032569   \n",
              "2YR-24HR                            0.022830            1576.872536   \n",
              "5YR-24HR                            0.022092            1629.532767   \n",
              "10YR-24HR                           0.016823            2139.920413   \n",
              "25YR-24HR                           0.016524            2178.700513   \n",
              "50YR-24HR                           0.016085            2238.110040   \n",
              "100YR-24HR                          0.016146            2229.639060   \n",
              "\n",
              "                           Average Max Pipe Flow (cfs)  \\\n",
              "Full System ROM with Pump                     8.205216   \n",
              "2YR-24HR                                      8.215710   \n",
              "5YR-24HR                                      8.461962   \n",
              "10YR-24HR                                     8.318513   \n",
              "25YR-24HR                                     8.423787   \n",
              "50YR-24HR                                     8.520398   \n",
              "100YR-24HR                                    8.591212   \n",
              "\n",
              "                           Maximum Pipe Flow (cfs)  \\\n",
              "Full System ROM with Pump                56.546627   \n",
              "2YR-24HR                                 58.272476   \n",
              "5YR-24HR                                 60.300476   \n",
              "10YR-24HR                                61.286335   \n",
              "25YR-24HR                                62.026176   \n",
              "50YR-24HR                                62.400841   \n",
              "100YR-24HR                               63.160744   \n",
              "\n",
              "                           Average Max Node Water Surface (ft)  \\\n",
              "Full System ROM with Pump                            41.904858   \n",
              "2YR-24HR                                             42.178600   \n",
              "5YR-24HR                                             42.507812   \n",
              "10YR-24HR                                            42.715992   \n",
              "25YR-24HR                                            42.962963   \n",
              "50YR-24HR                                            43.129978   \n",
              "100YR-24HR                                           43.312428   \n",
              "\n",
              "                           Maximum Node Water Surface (ft)  \\\n",
              "Full System ROM with Pump                        47.007301   \n",
              "2YR-24HR                                         47.105679   \n",
              "5YR-24HR                                         47.209702   \n",
              "10YR-24HR                                        47.272884   \n",
              "25YR-24HR                                        47.367840   \n",
              "50YR-24HR                                        47.432789   \n",
              "100YR-24HR                                       48.026775   \n",
              "\n",
              "                                                                    HDF Path  \n",
              "Full System ROM with Pump  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "2YR-24HR                   d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "5YR-24HR                   d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "10YR-24HR                  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "25YR-24HR                  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "50YR-24HR                  d:\\GitHub\\ras-commander\\examples\\example_proje...  \n",
              "100YR-24HR                 d:\\GitHub\\ras-commander\\examples\\example_proje...  "
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "#---------------------------------------------------------------------\n",
        "# Step 5: Analyze the results\n",
        "#---------------------------------------------------------------------\n",
        "print(\"\\nStep 5: Analyzing the results...\")\n",
        "\n",
        "analysis_df = analyze_results(\n",
        "    results=results,\n",
        "    compute_folder=compute_folder,\n",
        "    project=ras\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {},
      "outputs": [],
      "source": [
        "def plot_results(analysis_df):\n",
        "    \"\"\"\n",
        "    Plots the results from the analysis.\n",
        "    \"\"\"\n",
        "    # Extract AEP values from the index (plan names), skipping non-AEP plans\n",
        "    aep_values = []\n",
        "    aep_data = pd.DataFrame()\n",
        "    \n",
        "    for name in analysis_df.index:\n",
        "        if 'YR' in name:\n",
        "            try:\n",
        "                aep_year = int(name.split('YR')[0])\n",
        "                aep_values.append(aep_year)\n",
        "                aep_data = pd.concat([aep_data, analysis_df.loc[[name]]])\n",
        "            except ValueError:\n",
        "                continue\n",
        "    \n",
        "    if len(aep_values) == 0:\n",
        "        print(\"No valid AEP plans found to plot\")\n",
        "        return\n",
        "        \n",
        "    # Create a figure with multiple subplots\n",
        "    fig, axs = plt.subplots(2, 1, figsize=(14, 12))\n",
        "    \n",
        "    # Plot 1: Maximum Pipe Flow vs AEP\n",
        "    axs[0].semilogx(aep_values, aep_data['Maximum Pipe Flow (cfs)'], 'o-', marker='o', markersize=8)\n",
        "    axs[0].set_title('Maximum Pipe Flow vs Return Period', fontsize=16)\n",
        "    axs[0].set_xlabel('Return Period (years)', fontsize=14)\n",
        "    axs[0].set_ylabel('Maximum Pipe Flow (cfs)', fontsize=14)\n",
        "    axs[0].grid(True)\n",
        "    \n",
        "    # Add data labels\n",
        "    for i, txt in enumerate(aep_values):\n",
        "        axs[0].annotate(f\"{txt} yr\", \n",
        "                      (aep_values[i], aep_data['Maximum Pipe Flow (cfs)'].iloc[i]),\n",
        "                      textcoords=\"offset points\", \n",
        "                      xytext=(0, 10), \n",
        "                      ha='center')\n",
        "    \n",
        "    # Plot 2: Maximum Node Water Surface vs AEP\n",
        "    axs[1].semilogx(aep_values, aep_data['Maximum Node Water Surface (ft)'], 'o-', marker='s', markersize=8, color='green')\n",
        "    axs[1].set_title('Maximum Node Water Surface vs Return Period', fontsize=16)\n",
        "    axs[1].set_xlabel('Return Period (years)', fontsize=14)\n",
        "    axs[1].set_ylabel('Maximum Node Water Surface (ft)', fontsize=14)\n",
        "    axs[1].grid(True)\n",
        "    \n",
        "    # Add data labels\n",
        "    for i, txt in enumerate(aep_values):\n",
        "        axs[1].annotate(f\"{txt} yr\", \n",
        "                      (aep_values[i], aep_data['Maximum Node Water Surface (ft)'].iloc[i]),\n",
        "                      textcoords=\"offset points\", \n",
        "                      xytext=(0, 10), \n",
        "                      ha='center')\n",
        "    \n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "    # Plot time series for each return period\n",
        "    try:\n",
        "        plt.figure(figsize=(14, 8))\n",
        "        \n",
        "        # Create a color map for different return periods\n",
        "        colors = plt.cm.viridis(np.linspace(0, 1, len(aep_values)))\n",
        "        \n",
        "        # Plot each return period\n",
        "        for i, name in enumerate(aep_data.index):\n",
        "            # Get HDF path for this return period\n",
        "            hdf_path = aep_data.loc[name, 'HDF Path']\n",
        "            \n",
        "            # Get pipe network timeseries data\n",
        "            node_ws = HdfPipe.get_pipe_network_timeseries(hdf_path, variable=\"Nodes/Water Surface\")\n",
        "            \n",
        "            # Get data for location 61\n",
        "            loc_61_ws = node_ws.sel(location=61)\n",
        "            \n",
        "            # Plot the time series\n",
        "            plt.plot(loc_61_ws.time.values, loc_61_ws.values, \n",
        "                    label=f'{name}', \n",
        "                    color=colors[i],\n",
        "                    linewidth=2)\n",
        "        \n",
        "        plt.title('Water Surface Elevation Time Series by Return Period - Location 61', fontsize=16)\n",
        "        plt.xlabel('Time', fontsize=14)\n",
        "        plt.ylabel('Water Surface Elevation (ft)', fontsize=14)\n",
        "        plt.grid(True)\n",
        "        plt.legend(fontsize=12)\n",
        "        \n",
        "        # Format x-axis dates\n",
        "        plt.gcf().autofmt_xdate()\n",
        "        \n",
        "        plt.tight_layout()\n",
        "        plt.show()\n",
        "        \n",
        "    except Exception as e:\n",
        "        print(f\"Could not create detailed heatmap: {str(e)}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\bill\\AppData\\Local\\Temp\\ipykernel_11124\\3654224487.py:26: UserWarning: marker is redundantly defined by the 'marker' keyword argument and the fmt string \"o-\" (-> marker='o'). The keyword argument will take precedence.\n",
            "  axs[0].semilogx(aep_values, aep_data['Maximum Pipe Flow (cfs)'], 'o-', marker='o', markersize=8)\n",
            "C:\\Users\\bill\\AppData\\Local\\Temp\\ipykernel_11124\\3654224487.py:41: UserWarning: marker is redundantly defined by the 'marker' keyword argument and the fmt string \"o-\" (-> marker='o'). The keyword argument will take precedence.\n",
            "  axs[1].semilogx(aep_values, aep_data['Maximum Node Water Surface (ft)'], 'o-', marker='s', markersize=8, color='green')\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Step 6: Plotting the results...\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1400x1200 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 05:13:55 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p01.hdf\n",
            "2025-04-10 05:13:55 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p01.hdf\n",
            "2025-04-10 05:13:55 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p03.hdf\n",
            "2025-04-10 05:13:55 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p03.hdf\n",
            "2025-04-10 05:13:55 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p04.hdf\n",
            "2025-04-10 05:13:55 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p04.hdf\n",
            "2025-04-10 05:13:55 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p05.hdf\n",
            "2025-04-10 05:13:55 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p05.hdf\n",
            "2025-04-10 05:13:55 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p06.hdf\n",
            "2025-04-10 05:13:55 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p06.hdf\n",
            "2025-04-10 05:13:55 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p07.hdf\n",
            "2025-04-10 05:13:55 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p07.hdf\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1400x800 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "#---------------------------------------------------------------------\n",
        "# Step 6: Plot the results\n",
        "#---------------------------------------------------------------------\n",
        "print(\"\\nStep 6: Plotting the results...\")\n",
        "\n",
        "plot_results(analysis_df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 05:13:56 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p04.hdf\n"
          ]
        }
      ],
      "source": [
        "\n",
        "\n",
        "node_ws = HdfPipe.get_pipe_network_timeseries(\"04\", variable=\"Nodes/Water Surface\")\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div><pre>xarray.DataArray with Unknown dimensions\n[Full xarray output truncated during preprocessing]</pre></div>",
            "text/plain": "xarray.DataArray with Unknown dimensions\n[Full xarray output truncated during preprocessing]"
          },
          "execution_count": 37,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "node_ws"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-10 05:13:56 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\compute_aep_parallel\\DavisStormSystem.p04.hdf\n"
          ]
        }
      ],
      "source": [
        "pipe_flow_ds = HdfPipe.get_pipe_network_timeseries(\"04\", variable=\"Pipes/Pipe Flow DS\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div><pre>xarray.DataArray with Unknown dimensions\n[Full xarray output truncated during preprocessing]</pre></div>",
            "text/plain": "xarray.DataArray with Unknown dimensions\n[Full xarray output truncated during preprocessing]"
          },
          "execution_count": 39,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "pipe_flow_ds"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Conclusion\n",
        "\n",
        "This notebook demonstrates a comprehensive workflow for automated AEP storm analysis using RAS-Commander. The key benefits of this approach include:\n",
        "\n",
        "1. **Efficiency**: Automating repetitive tasks saves time and reduces errors\n",
        "2. **Consistency**: Ensures consistent methodology across all return periods\n",
        "3. **Parallel Execution**: Makes optimal use of computational resources\n",
        "4. **Comprehensive Analysis**: Extracts and visualizes key metrics across return periods\n",
        "5. **Reproducibility**: The entire workflow is documented and repeatable\n",
        "\n",
        "This approach can be extended to include additional analyses, such as:\n",
        "\n",
        "- Comparing different storm patterns (e.g., position of peak intensity)\n",
        "- Analyzing climate change scenarios by adjusting precipitation depths\n",
        "- Evaluating infrastructure improvements by comparing baseline and modified geometries\n",
        "- Generating frequency curves for key hydraulic parameters\n",
        "\n",
        "By leveraging the power of RAS-Commander, engineers can focus on interpreting results and making design decisions rather than managing model configurations."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# DEV NOTES: \n",
        "\n",
        "Need to add example of setting Start Time and End Time\n",
        "\n",
        "Need to add function to library that will end-to-end model Atlas 14 AEP storms given an input lat/long, Return Interval and Duration, given a working geometry w/infiltration.  Running optional.\n",
        "\n"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "rascmdr",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}
==================================================

File: c:\GH\ras-commander\examples\10_1d_hdf_data_extraction.ipynb
==================================================
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# HEC-RAS 1D HDF Data Analysis Notebook\n",
        "\n",
        "This notebook demonstrates how to manipulate and analyze HEC-RAS 2D HDF data using the ras-commander library. It leverages the HdfBase, HdfUtils, HdfStruc, HdfMesh, HdfXsec, HdfBndry, HdfPlan, HdfResultsPlan, HdfResultsMesh, and HdfResultsXsec classes to streamline data extraction, processing, and visualization.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Package Installation and Environment Setup\n",
        "Uncomment and run package installation commands if needed"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: ras-commander in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (0.74.0)\n",
            "Requirement already satisfied: h5py in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (3.13.0)\n",
            "Requirement already satisfied: numpy in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (2.2.4)\n",
            "Requirement already satisfied: pandas in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (2.2.3)\n",
            "Requirement already satisfied: requests in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (2.32.3)\n",
            "Requirement already satisfied: tqdm in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (4.67.1)\n",
            "Requirement already satisfied: scipy in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (1.15.2)\n",
            "Requirement already satisfied: xarray in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (2025.1.2)\n",
            "Requirement already satisfied: geopandas in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (1.0.1)\n",
            "Requirement already satisfied: matplotlib in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (3.10.1)\n",
            "Requirement already satisfied: shapely in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (2.0.7)\n",
            "Requirement already satisfied: pathlib in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (1.0.1)\n",
            "Requirement already satisfied: rasterstats in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (0.20.0)\n",
            "Requirement already satisfied: rtree in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from ras-commander) (1.4.0)\n",
            "Requirement already satisfied: pyogrio>=0.7.2 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from geopandas->ras-commander) (0.10.0)\n",
            "Requirement already satisfied: packaging in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from geopandas->ras-commander) (24.2)\n",
            "Requirement already satisfied: pyproj>=3.3.0 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from geopandas->ras-commander) (3.7.1)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from pandas->ras-commander) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from pandas->ras-commander) (2025.1)\n",
            "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from pandas->ras-commander) (2025.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from matplotlib->ras-commander) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from matplotlib->ras-commander) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from matplotlib->ras-commander) (4.56.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from matplotlib->ras-commander) (1.4.8)\n",
            "Requirement already satisfied: pillow>=8 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from matplotlib->ras-commander) (11.1.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from matplotlib->ras-commander) (3.2.1)\n",
            "Requirement already satisfied: affine in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from rasterstats->ras-commander) (2.4.0)\n",
            "Requirement already satisfied: click>7.1 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from rasterstats->ras-commander) (8.1.8)\n",
            "Requirement already satisfied: cligj>=0.4 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from rasterstats->ras-commander) (0.7.2)\n",
            "Requirement already satisfied: fiona in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from rasterstats->ras-commander) (1.10.1)\n",
            "Requirement already satisfied: rasterio>=1.0 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from rasterstats->ras-commander) (1.4.3)\n",
            "Requirement already satisfied: simplejson in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from rasterstats->ras-commander) (3.20.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from requests->ras-commander) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from requests->ras-commander) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from requests->ras-commander) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from requests->ras-commander) (2025.1.31)\n",
            "Requirement already satisfied: colorama in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from tqdm->ras-commander) (0.4.6)\n",
            "Requirement already satisfied: six>=1.5 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from python-dateutil>=2.8.2->pandas->ras-commander) (1.17.0)\n",
            "Requirement already satisfied: attrs in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from rasterio>=1.0->rasterstats->ras-commander) (25.3.0)\n",
            "Requirement already satisfied: click-plugins in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from rasterio>=1.0->rasterstats->ras-commander) (1.1.1)\n"
          ]
        }
      ],
      "source": [
        "# Install ras-commander from pip (uncomment to install if needed)\n",
        "!pip install --upgrade ras-commander\n",
        "# This installs ras-commander and all dependencies\n",
        "\n",
        "# Set to false to disable plot generation for llm-friendly outputs\n",
        "generate_plots = True"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Import all required modules\n",
        "from ras_commander import *  # Import all ras-commander modules\n",
        "\n",
        "# Import the required libraries for this notebook\n",
        "import h5py\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import requests\n",
        "from tqdm import tqdm\n",
        "import scipy\n",
        "import xarray as xr\n",
        "import geopandas as gpd\n",
        "import matplotlib.pyplot as plt\n",
        "from IPython import display\n",
        "import psutil  # For getting system CPU info\n",
        "from concurrent.futures import ThreadPoolExecutor, as_completed\n",
        "import time\n",
        "import subprocess\n",
        "import sys\n",
        "import os\n",
        "import shutil\n",
        "from datetime import datetime, timedelta\n",
        "from pathlib import Path  # Ensure pathlib is imported for file operations\n",
        "from shapely.geometry import LineString\n",
        "\n",
        "\n",
        "# Set pandas display options to show only 7 rows by default\n",
        "pd.set_option('display.max_rows', 7)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Use Example Project or Load Your Own Project"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:24:48 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-09 07:24:48 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.rasmap\n",
            "2025-04-09 07:24:48 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "BaldEagle.p01.hdf already exists. Skipping project extraction and plan execution.\n"
          ]
        }
      ],
      "source": [
        "# Download the Balde Eagle Creek 1D Example project from HEC and run plan 01\n",
        "\n",
        "# Define the path to the 1D Balde Eagle Creek project\n",
        "current_dir = Path.cwd()  # Adjust if your notebook is in a different directory\n",
        "bald_eagle_path = current_dir / \"example_projects\" / \"Balde Eagle Creek\"\n",
        "import logging\n",
        "\n",
        "# Check if BaldEagle.p01.hdf exists (so we don't have to re-run the simulation when re-running or debugging)\n",
        "hdf_file = bald_eagle_path / \"BaldEagle.p01.hdf\"\n",
        "\n",
        "if not hdf_file.exists():\n",
        "    # Initialize RasExamples and extract the BaldEagleCrkMulti2D project\n",
        "    RasExamples.extract_project(\"Balde Eagle Creek\")\n",
        "\n",
        "    # Initialize the RAS project using the custom ras object\n",
        "    init_ras_project(bald_eagle_path, \"6.6\")\n",
        "    logging.info(f\"Balde Eagle project initialized with folder: {ras.project_folder}\")\n",
        "    \n",
        "    logging.info(f\"Balde Eagle object id: {id(ras)}\")\n",
        "    \n",
        "    # Define the plan number to execute\n",
        "    plan_number = \"01\"\n",
        "\n",
        "    # Execute Plan 01 using RasCmdr for Bald Eagle\n",
        "    print(f\"Executing Plan {plan_number} for the Bald Eagle Creek project...\")\n",
        "    success_bald_eagle = RasCmdr.compute_plan(plan_number)\n",
        "    if success_bald_eagle:\n",
        "        print(f\"Plan {plan_number} executed successfully for Bald Eagle.\\n\")\n",
        "    else:\n",
        "        print(f\"Plan {plan_number} execution failed for Bald Eagle.\\n\")\n",
        "else:\n",
        "    print(\"BaldEagle.p01.hdf already exists. Skipping project extraction and plan execution.\")\n",
        "    # Initialize the RAS project using the custom ras object\n",
        "    init_ras_project(bald_eagle_path, \"6.6\")\n",
        "    plan_number = \"01\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "###  OPTIONAL: Use your own project instead\n",
        "\n",
        "your_project_path = Path(r\"D:\\yourprojectpath\")\n",
        "\n",
        "init_ras_project(your_project_path, \"6.6\")\n",
        "plan_number = \"01\"  # Plan number to use for this notebook \n",
        "\n",
        "\n",
        "\n",
        "### If you use this code cell, don't run the previous cell or change to markdown\n",
        "### NOTE: Ensure the HDF Results file was generated by HEC-RAS Version 6.x or above"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "------"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Explore Project Dataframes using 'ras' Object"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Plan DataFrame for the project:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>UNET D2 Cores</th>\\n', '      <th>PS Cores</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>01</td>\\n', '      <td>Unsteady with Bridges and Dam</td>\\n', '      <td>5.00</td>\\n', '      <td>UnsteadyFlow</td>\\n', '      <td>18FEB1999,0000,24FEB1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>1HOUR</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>0.0</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>2</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>02</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>Steady Flow Run</td>\\n', '      <td>NaN</td>\\n', '      <td>SteadyRun</td>\\n', '      <td>02/18/1999,0000,02/24/1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>NaN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>NaN</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>None</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  plan_number unsteady_number geometry_number                     Plan Title  \\\\\\n', '0          01              02              01  Unsteady with Bridges and Dam   \\n', '1          02            None              01                Steady Flow Run   \\n', '\\n', '  Program Version Short Identifier                  Simulation Date  \\\\\\n', '0            5.00     UnsteadyFlow    18FEB1999,0000,24FEB1999,0500   \\n', '1             NaN        SteadyRun  02/18/1999,0000,02/24/1999,0500   \\n', '\\n', '  Computation Interval Mapping Interval Run HTab  ... UNET D2 Cores PS Cores  \\\\\\n', '0                 2MIN            1HOUR        1  ...           0.0     None   \\n', '1                 2MIN              NaN        1  ...           NaN     None   \\n', '\\n', '  DSS File Friction Slope Method  \\\\\\n', '0      dss                     2   \\n', '1      dss                     1   \\n', '\\n', '                                    HDF_Results_Path  Geom File  \\\\\\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...         01   \\n', '1                                               None         01   \\n', '\\n', '                                           Geom Path Flow File  \\\\\\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...        02   \\n', '1  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...        02   \\n', '\\n', '                                           Flow Path  \\\\\\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '1  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '\\n', '                                           full_path  \\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...  \\n', '1  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...  \\n', '\\n', '[2 rows x 26 columns]']"
          },
          "execution_count": 4,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"Plan DataFrame for the project:\")\n",
        "ras.plan_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Geometry DataFrame for the project:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>geom_file</th>\\n', '      <th>geom_number</th>\\n', '      <th>full_path</th>\\n', '      <th>hdf_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>g01</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  geom_file geom_number                                          full_path  \\\\\\n', '0       g01          01  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '\\n', '                                            hdf_path  \\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...  ']"
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nGeometry DataFrame for the project:\")\n",
        "ras.geom_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Unsteady DataFrame for the project:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>unsteady_number</th>\\n', '      <th>full_path</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Flow Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Use Restart</th>\\n', '      <th>Precipitation Mode</th>\\n', '      <th>Wind Mode</th>\\n', '      <th>Met BC=Precipitation|Mode</th>\\n', '      <th>Met BC=Evapotranspiration|Mode</th>\\n', '      <th>Met BC=Precipitation|Expanded View</th>\\n', '      <th>Met BC=Precipitation|Constant Units</th>\\n', '      <th>Met BC=Precipitation|Gridded Source</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>Flow Hydrograph 2</td>\\n', '      <td>6.30</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>None</td>\\n', '      <td>None</td>\\n', '      <td>0</td>\\n', '      <td>mm/hr</td>\\n', '      <td>DSS</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  unsteady_number                                          full_path  \\\\\\n', '0              02  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '\\n', '  geometry_number         Flow Title Program Version Use Restart  \\\\\\n', '0            None  Flow Hydrograph 2            6.30           0   \\n', '\\n', '  Precipitation Mode       Wind Mode Met BC=Precipitation|Mode  \\\\\\n', '0            Disable  No Wind Forces                      None   \\n', '\\n', '  Met BC=Evapotranspiration|Mode Met BC=Precipitation|Expanded View  \\\\\\n', '0                           None                                  0   \\n', '\\n', '  Met BC=Precipitation|Constant Units Met BC=Precipitation|Gridded Source  \\n', '0                               mm/hr                                 DSS  ']"
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nUnsteady DataFrame for the project:\")\n",
        "ras.unsteady_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Boundary Conditions DataFrame for the project:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>unsteady_number</th>\\n', '      <th>boundary_condition_number</th>\\n', '      <th>river_reach_name</th>\\n', '      <th>river_station</th>\\n', '      <th>storage_area_name</th>\\n', '      <th>pump_station_name</th>\\n', '      <th>bc_type</th>\\n', '      <th>hydrograph_type</th>\\n', '      <th>Interval</th>\\n', '      <th>DSS Path</th>\\n', '      <th>...</th>\\n', '      <th>Flow Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Use Restart</th>\\n', '      <th>Precipitation Mode</th>\\n', '      <th>Wind Mode</th>\\n', '      <th>Met BC=Precipitation|Mode</th>\\n', '      <th>Met BC=Evapotranspiration|Mode</th>\\n', '      <th>Met BC=Precipitation|Expanded View</th>\\n', '      <th>Met BC=Precipitation|Constant Units</th>\\n', '      <th>Met BC=Precipitation|Gridded Source</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>02</td>\\n', '      <td>1</td>\\n', '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>138154.4</td>\\n', '      <td></td>\\n', '      <td>Flow Hydrograph</td>\\n', '      <td>Flow Hydrograph</td>\\n', '      <td>1HOUR</td>\\n', '      <td></td>\\n', '      <td>...</td>\\n', '      <td>Flow Hydrograph 2</td>\\n', '      <td>6.30</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>None</td>\\n', '      <td>None</td>\\n', '      <td>0</td>\\n', '      <td>mm/hr</td>\\n', '      <td>DSS</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>02</td>\\n', '      <td>2</td>\\n', '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>81500</td>\\n', '      <td></td>\\n', '      <td>Gate Opening</td>\\n', '      <td>None</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>...</td>\\n', '      <td>Flow Hydrograph 2</td>\\n', '      <td>6.30</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>None</td>\\n', '      <td>None</td>\\n', '      <td>0</td>\\n', '      <td>mm/hr</td>\\n', '      <td>DSS</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>02</td>\\n', '      <td>3</td>\\n', '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>659.942</td>\\n', '      <td></td>\\n', '      <td>Unknown</td>\\n', '      <td>None</td>\\n', '      <td>NaN</td>\\n', '      <td></td>\\n', '      <td>...</td>\\n', '      <td>Flow Hydrograph 2</td>\\n', '      <td>6.30</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>None</td>\\n', '      <td>None</td>\\n', '      <td>0</td>\\n', '      <td>mm/hr</td>\\n', '      <td>DSS</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  unsteady_number  boundary_condition_number river_reach_name river_station  \\\\\\n', '0              02                          1       Bald Eagle       Loc Hav   \\n', '1              02                          2       Bald Eagle       Loc Hav   \\n', '2              02                          3       Bald Eagle       Loc Hav   \\n', '\\n', '  storage_area_name pump_station_name          bc_type  hydrograph_type  \\\\\\n', '0          138154.4                    Flow Hydrograph  Flow Hydrograph   \\n', '1             81500                       Gate Opening             None   \\n', '2           659.942                            Unknown             None   \\n', '\\n', '  Interval DSS Path  ...         Flow Title Program Version Use Restart  \\\\\\n', '0    1HOUR           ...  Flow Hydrograph 2            6.30           0   \\n', '1      NaN      NaN  ...  Flow Hydrograph 2            6.30           0   \\n', '2      NaN           ...  Flow Hydrograph 2            6.30           0   \\n', '\\n', '  Precipitation Mode       Wind Mode  Met BC=Precipitation|Mode  \\\\\\n', '0            Disable  No Wind Forces                       None   \\n', '1            Disable  No Wind Forces                       None   \\n', '2            Disable  No Wind Forces                       None   \\n', '\\n', '  Met BC=Evapotranspiration|Mode Met BC=Precipitation|Expanded View  \\\\\\n', '0                           None                                  0   \\n', '1                           None                                  0   \\n', '2                           None                                  0   \\n', '\\n', '  Met BC=Precipitation|Constant Units Met BC=Precipitation|Gridded Source  \\n', '0                               mm/hr                                 DSS  \\n', '1                               mm/hr                                 DSS  \\n', '2                               mm/hr                                 DSS  \\n', '\\n', '[3 rows x 29 columns]']"
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nBoundary Conditions DataFrame for the project:\")\n",
        "ras.boundaries_df "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>UNET D2 Cores</th>\\n', '      <th>PS Cores</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>01</td>\\n', '      <td>Unsteady with Bridges and Dam</td>\\n', '      <td>5.00</td>\\n', '      <td>UnsteadyFlow</td>\\n', '      <td>18FEB1999,0000,24FEB1999,0500</td>\\n', '      <td>2MIN</td>\\n', '      <td>1HOUR</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>0.0</td>\\n', '      <td>None</td>\\n', '      <td>dss</td>\\n', '      <td>2</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  plan_number unsteady_number geometry_number                     Plan Title  \\\\\\n', '0          01              02              01  Unsteady with Bridges and Dam   \\n', '\\n', '  Program Version Short Identifier                Simulation Date  \\\\\\n', '0            5.00     UnsteadyFlow  18FEB1999,0000,24FEB1999,0500   \\n', '\\n', '  Computation Interval Mapping Interval Run HTab  ... UNET D2 Cores PS Cores  \\\\\\n', '0                 2MIN            1HOUR        1  ...           0.0     None   \\n', '\\n', '  DSS File Friction Slope Method  \\\\\\n', '0      dss                     2   \\n', '\\n', '                                    HDF_Results_Path  Geom File  \\\\\\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...         01   \\n', '\\n', '                                           Geom Path Flow File  \\\\\\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...        02   \\n', '\\n', '                                           Flow Path  \\\\\\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '\\n', '                                           full_path  \\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...  \\n', '\\n', '[1 rows x 26 columns]']"
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Get HDF Results Entries (only present when results are present)\n",
        "ras.get_hdf_entries()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Find Paths for Results and Geometry HDF's"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Get the plan HDF path for the plan_number defined above\n",
        "plan_hdf_path = ras.plan_df.loc[ras.plan_df['plan_number'] == plan_number, 'HDF_Results_Path'].values[0]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": "[\"'d:\\\\\\\\GitHub\\\\\\\\ras-commander\\\\\\\\examples\\\\\\\\example_projects\\\\\\\\Balde Eagle Creek\\\\\\\\BaldEagle.p01.hdf'\"]"
          },
          "execution_count": 10,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "plan_hdf_path"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Get the geometry HDF path\n",
        "geom_hdf_path = ras.plan_df.loc[ras.plan_df['plan_number'] == plan_number, 'Geom Path'].values[0] + '.hdf'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": "[\"'d:\\\\\\\\GitHub\\\\\\\\ras-commander\\\\\\\\examples\\\\\\\\example_projects\\\\\\\\Balde Eagle Creek\\\\\\\\BaldEagle.g01.hdf'\"]"
          },
          "execution_count": 12,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "geom_hdf_path"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Plan HDF path for Plan 01: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n",
            "Geometry HDF path for Plan 01: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n"
          ]
        }
      ],
      "source": [
        "print(f\"\\nPlan HDF path for Plan {plan_number}: {plan_hdf_path}\")\n",
        "print(f\"Geometry HDF path for Plan {plan_number}: {geom_hdf_path}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## RAS-Commander's Decorators Allow for Flexible Function Calling\n",
        "You can call most of the functions in the HDF* Classes using any of the following:\n",
        "1. Plan/Geometry Number (with or without leading zeros):\n",
        "   - \"01\", \"1\" - Plan/geometry number as string\n",
        "   - 1 - Plan/geometry number as integer\n",
        "   - \"p01\", \"p1\" - Plan number with 'p' prefix\n",
        "2. Direct File Paths:\n",
        "   - pathlib.Path object pointing to HDF file\n",
        "   - String path to HDF file\n",
        "\n",
        "3. h5py.File Objects:\n",
        "   - Already opened HDF file object\n",
        "\n",
        "The @standardize_input decorator handles all these input types consistently:\n",
        "   - Validates the input exists and is accessible\n",
        "   - Converts to proper pathlib.Path object\n",
        "   - Handles RAS object references\n",
        "   - Provides logging and error handling\n",
        "\n",
        "This flexibility makes it easier to work with HDF files in different contexts while maintaining consistent behavior \n",
        "across the codebase, and helps prevent strict typing from introducing unnecessary friction for LLM Coding.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "-----"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# 1D HDF Data Extraction Examples"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:24:49 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n",
            "2025-04-09 07:24:49 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: BaldEagle.p01.hdf\n",
            "2025-04-09 07:24:49 - ras_commander.HdfResultsPlan - INFO - Plan Name: Unsteady with Bridges and Dam\n",
            "2025-04-09 07:24:49 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 149.0\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Extracting runtime and compute time data\n"
          ]
        }
      ],
      "source": [
        "# Extract runtime and compute time data as dataframe\n",
        "print(\"\\nExtracting runtime and compute time data\")\n",
        "runtime_df = HdfResultsPlan.get_runtime_data(hdf_path=plan_number)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Plan Name</th>\\n', '      <th>File Name</th>\\n', '      <th>Simulation Start Time</th>\\n', '      <th>Simulation End Time</th>\\n', '      <th>Simulation Duration (s)</th>\\n', '      <th>Simulation Time (hr)</th>\\n', '      <th>Completing Geometry (hr)</th>\\n', '      <th>Preprocessing Geometry (hr)</th>\\n', '      <th>Completing Event Conditions (hr)</th>\\n', '      <th>Unsteady Flow Computations (hr)</th>\\n', '      <th>Complete Process (hr)</th>\\n', '      <th>Unsteady Flow Speed (hr/hr)</th>\\n', '      <th>Complete Process Speed (hr/hr)</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>Unsteady with Bridges and Dam</td>\\n', '      <td>BaldEagle.p01.hdf</td>\\n', '      <td>1999-02-18</td>\\n', '      <td>1999-02-24 05:00:00</td>\\n', '      <td>536400.0</td>\\n', '      <td>149.0</td>\\n', '      <td>N/A</td>\\n', '      <td>0.042926</td>\\n', '      <td>N/A</td>\\n', '      <td>0.001098</td>\\n', '      <td>0.049271</td>\\n', '      <td>135694.409309</td>\\n', '      <td>3024.10148</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['                       Plan Name          File Name Simulation Start Time  \\\\\\n', '0  Unsteady with Bridges and Dam  BaldEagle.p01.hdf            1999-02-18   \\n', '\\n', '  Simulation End Time  Simulation Duration (s)  Simulation Time (hr)  \\\\\\n', '0 1999-02-24 05:00:00                 536400.0                 149.0   \\n', '\\n', '  Completing Geometry (hr)  Preprocessing Geometry (hr)  \\\\\\n', '0                      N/A                     0.042926   \\n', '\\n', '  Completing Event Conditions (hr)  Unsteady Flow Computations (hr)  \\\\\\n', '0                              N/A                         0.001098   \\n', '\\n', '   Complete Process (hr)  Unsteady Flow Speed (hr/hr)  \\\\\\n', '0               0.049271                135694.409309   \\n', '\\n', '   Complete Process Speed (hr/hr)  \\n', '0                      3024.10148  ']"
          },
          "execution_count": 15,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "runtime_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:24:49 - ras_commander.HdfBase - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:49 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:49 - ras_commander.HdfBase - CRITICAL - No valid projection found. Checked:\n",
            "1. HDF file projection attribute: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            " was checked and no projection attribute found2. No RASMapper projection file found\n",
            "To fix this:\n",
            "1. Open RASMapper\n",
            "2. Click Map > Set Projection\n",
            "3. Select an appropriate projection file or coordinate system\n",
            "4. Save the RASMapper project\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Extracting Projection from HDF\n"
          ]
        }
      ],
      "source": [
        "# Use HdfUtils for extracting projection\n",
        "# This returns a string with the projection as EPSG code (e.g. \"EPSG:6556\"), or None if not found.\n",
        "print(\"\\nExtracting Projection from HDF\")\n",
        "projection = HdfBase.get_projection(hdf_path=geom_hdf_path)  \n",
        "# This projection is returned as EPSG to improve compatibility with geopandas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {},
      "outputs": [],
      "source": [
        "projection\n",
        "### The example project we are using does not have a projection  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:24:49 - ras_commander.RasPlan - INFO - Found geometry path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01\n",
            "2025-04-09 07:24:49 - ras_commander.HdfPlan - INFO - Found geometry HDF file for plan 1: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:49 - ras_commander.HdfPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:49 - ras_commander.HdfPlan - INFO - Getting geometry attributes from d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:49 - ras_commander.HdfPlan - INFO - Checking for Geometry group in d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:49 - ras_commander.HdfPlan - INFO - Getting root level geometry attributes\n",
            "2025-04-09 07:24:49 - ras_commander.HdfPlan - INFO - Successfully extracted 5 root level geometry attributes\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Extracting Base Geometry Attributes\n"
          ]
        }
      ],
      "source": [
        "# Use HdfPlan to Get Geometry Information (Base Geometry Attributes) as dataframes\n",
        "print(\"\\nExtracting Base Geometry Attributes\")\n",
        "geom_attrs_df = HdfPlan.get_geometry_information(\"01\")  \n",
        "# NOTE: Here we call the function using the plan number instead of the hdf path to demonstrate that the decorator will work with the plan number\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Value</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>Complete Geometry</th>\\n', '      <td>True</td>\\n', '    </tr><tr>\\n', '      <th>Extents</th>\\n', '      <td>[1966632.2513, 2066299.3787, 287473.1387, 3540...</td>\\n', '    </tr><tr>\\n', '      <th>Geometry Time</th>\\n', '      <td>2025-04-09 07:13:45</td>\\n', '    </tr><tr>\\n', '      <th>Title</th>\\n', '      <td>Existing Conditions - GIS Data</td>\\n', '    </tr><tr>\\n', '      <th>Version</th>\\n', '      <td>1.0.20 (20Sep2024)</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['                                                               Value\\n', 'Complete Geometry                                               True\\n', 'Extents            [1966632.2513, 2066299.3787, 287473.1387, 3540...\\n', 'Geometry Time                                    2025-04-09 07:13:45\\n', 'Title                                 Existing Conditions - GIS Data\\n', 'Version                                           1.0.20 (20Sep2024)']"
          },
          "execution_count": 19,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "geom_attrs_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:24:49 - ras_commander.HdfStruc - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:49 - ras_commander.HdfStruc - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Getting geometry structures attributes\n"
          ]
        }
      ],
      "source": [
        "# Get geometry structures attributes as dataframe\n",
        "print(\"\\nGetting geometry structures attributes\")\n",
        "geom_structures_attrs_df = HdfStruc.get_geom_structures_attrs(geom_hdf_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Bridge/Culvert Count</th>\\n', '      <th>Connection Count</th>\\n', '      <th>Has Bridge Opening (2D)</th>\\n', '      <th>Inline Structure Count</th>\\n', '      <th>Lateral Structure Count</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>10</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>1</td>\\n', '      <td>0</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['   Bridge/Culvert Count  Connection Count  Has Bridge Opening (2D)  \\\\\\n', '0                    10                 0                        0   \\n', '\\n', '   Inline Structure Count  Lateral Structure Count  \\n', '0                       1                        0  ']"
          },
          "execution_count": 21,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "geom_structures_attrs_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Instead of hdf_input, USE plan_hdf_path or geom_hdf_path, or the plan number as \"8\" or \"08\" \n",
        "# Input decorators allow for flexible inputs "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:24:49 - ras_commander.HdfStruc - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:49 - ras_commander.HdfStruc - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:49 - ras_commander.HdfBase - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:49 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:49 - ras_commander.HdfBase - CRITICAL - No valid projection found. Checked:\n",
            "1. HDF file projection attribute: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            " was checked and no projection attribute found2. No RASMapper projection file found\n",
            "To fix this:\n",
            "1. Open RASMapper\n",
            "2. Click Map > Set Projection\n",
            "3. Select an appropriate projection file or coordinate system\n",
            "4. Save the RASMapper project\n",
            "2025-04-09 07:24:49 - ras_commander.HdfStruc - INFO - Successfully extracted structures GeoDataFrame.\n",
            "2025-04-09 07:24:49 - ras_commander.HdfStruc - INFO - Successfully extracted structures GeoDataFrame with attributes.\n"
          ]
        }
      ],
      "source": [
        "# Get structures as geodataframe\n",
        "structures_gdf = HdfStruc.get_structures(geom_hdf_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Type</th>\\n', '      <th>Mode</th>\\n', '      <th>River</th>\\n', '      <th>Reach</th>\\n', '      <th>RS</th>\\n', '      <th>Connection</th>\\n', '      <th>Groupname</th>\\n', '      <th>US Type</th>\\n', '      <th>US River</th>\\n', '      <th>US Reach</th>\\n', '      <th>...</th>\\n', '      <th>US XS Mann (Count)</th>\\n', '      <th>US BR Mann (Index)</th>\\n', '      <th>US BR Mann (Count)</th>\\n', '      <th>DS XS Mann (Index)</th>\\n', '      <th>DS XS Mann (Count)</th>\\n', '      <th>DS BR Mann (Index)</th>\\n', '      <th>DS BR Mann (Count)</th>\\n', '      <th>RC (Index)</th>\\n', '      <th>RC (Count)</th>\\n', '      <th>Profile_Data</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>Bridge</td>\\n', '      <td></td>\\n', '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>103245</td>\\n', '      <td></td>\\n', '      <td>Bald Eagle, Loc Hav (103245)</td>\\n', '      <td>XS</td>\\n', '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>...</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>[]</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>Inline</td>\\n', '      <td></td>\\n', '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>81500</td>\\n', '      <td></td>\\n', '      <td>Bald Eagle, Loc Hav (81500)</td>\\n', '      <td>XS</td>\\n', '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>...</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', \"      <td>[{'Station': 0.0, 'Elevation': 683.0}, {'Stati...</td>\\n\", '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>Bridge</td>\\n', '      <td></td>\\n', '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>75960</td>\\n', '      <td></td>\\n', '      <td>Bald Eagle, Loc Hav (75960)</td>\\n', '      <td>XS</td>\\n', '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>...</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>[]</td>\\n', '    </tr><tr>\\n', '      <th>...</th>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '    </tr><tr>\\n', '      <th>8</th>\\n', '      <td>Bridge</td>\\n', '      <td></td>\\n', '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>11985</td>\\n', '      <td></td>\\n', '      <td>Bald Eagle, Loc Hav (11985)</td>\\n', '      <td>XS</td>\\n', '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>...</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>[]</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['      Type Mode       River    Reach      RS Connection  \\\\\\n', '0   Bridge       Bald Eagle  Loc Hav  103245              \\n', '1   Inline       Bald Eagle  Loc Hav   81500              \\n', '2   Bridge       Bald Eagle  Loc Hav   75960              \\n', '..     ...  ...         ...      ...     ...        ...   \\n', '8   Bridge       Bald Eagle  Loc Hav   11985              \\n', '9   Bridge       Bald Eagle  Loc Hav    2920              \\n', '10  Bridge       Bald Eagle  Loc Hav    2436              \\n', '\\n', '                       Groupname US Type    US River US Reach  ...  \\\\\\n', '0   Bald Eagle, Loc Hav (103245)      XS  Bald Eagle  Loc Hav  ...   \\n', '1    Bald Eagle, Loc Hav (81500)      XS  Bald Eagle  Loc Hav  ...   \\n', '2    Bald Eagle, Loc Hav (75960)      XS  Bald Eagle  Loc Hav  ...   \\n', '..                           ...     ...         ...      ...  ...   \\n', '8    Bald Eagle, Loc Hav (11985)      XS  Bald Eagle  Loc Hav  ...   \\n', '9     Bald Eagle, Loc Hav (2\n...\n[Output truncated, 3172 characters total]"
          },
          "execution_count": 24,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "structures_gdf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:24:49 - ras_commander.HdfBndry - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:49 - ras_commander.HdfBndry - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n"
          ]
        }
      ],
      "source": [
        "# Get reference lines as geodataframe\n",
        "ref_lines_gdf = HdfBndry.get_reference_lines(geom_hdf_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    \n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['Empty GeoDataFrame\\n', 'Columns: []\\n', 'Index: []']"
          },
          "execution_count": 26,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "ref_lines_gdf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:24:49 - ras_commander.HdfBndry - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:49 - ras_commander.HdfBndry - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n"
          ]
        }
      ],
      "source": [
        "# Get reference points as geodataframe\n",
        "ref_points_gdf = HdfBndry.get_reference_points(geom_hdf_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    \n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['Empty GeoDataFrame\\n', 'Columns: []\\n', 'Index: []']"
          },
          "execution_count": 28,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "ref_points_gdf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Get cross sections as geodataframe\n",
        "cross_sections_gdf = HdfXsec.get_cross_sections(geom_hdf_path)\n",
        "    "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>geometry</th>\\n', '      <th>station_elevation</th>\\n', '      <th>mannings_n</th>\\n', '      <th>ineffective_blocks</th>\\n', '      <th>River</th>\\n', '      <th>Reach</th>\\n', '      <th>RS</th>\\n', '      <th>Name</th>\\n', '      <th>Description</th>\\n', '      <th>Len Left</th>\\n', '      <th>...</th>\\n', '      <th>HP Count</th>\\n', '      <th>HP Start Elev</th>\\n', '      <th>HP Vert Incr</th>\\n', '      <th>HP LOB Slices</th>\\n', '      <th>HP Chan Slices</th>\\n', '      <th>HP ROB Slices</th>\\n', '      <th>Ineff Block Mode</th>\\n', '      <th>Obstr Block Mode</th>\\n', '      <th>Default Centerline</th>\\n', '      <th>Last Edited</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>LINESTRING (1968668.17 290166.79, 1969067.87 2...</td>\\n', '      <td>[[0.0, 660.41], [5.0, 660.61], [40.0, 659.85],...</td>\\n', \"      <td>{'Station': [0.0, 190.0, 375.0], 'Mann n': [0....</td>\\n\", '      <td>[]</td>\\n', '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>138154.4</td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td>358.429993</td>\\n', '      <td>...</td>\\n', '      <td>49</td>\\n', '      <td>656.799988</td>\\n', '      <td>1.0</td>\\n', '      <td>5</td>\\n', '      <td>5</td>\\n', '      <td>5</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>18Sep2000 09:10:52</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>LINESTRING (1968627.02 290584.12, 1969009.09 2...</td>\\n', '      <td>[[0.0, 664.28], [50.0, 661.73], [55.0, 661.54]...</td>\\n', \"      <td>{'Station': [0.0, 535.0, 672.5599975585938], '...</td>\\n\", '      <td>[]</td>\\n', '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>137690.8</td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td>305.709991</td>\\n', '      <td>...</td>\\n', '      <td>65</td>\\n', '      <td>654.229980</td>\\n', '      <td>1.0</td>\\n', '      <td>5</td>\\n', '      <td>5</td>\\n', '      <td>5</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>18Sep2000 09:10:52</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>LINESTRING (1968585.88 290854.5, 1968868.02 29...</td>\\n', '      <td>[[0.0, 662.72], [20.0, 665.5], [25.0, 666.48],...</td>\\n', \"      <td>{'Station': [0.0, 580.0, 717.239990234375], 'M...</td>\\n\", '      <td>[]</td>\\n', '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>137327.0</td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td>732.929993</td>\\n', '      <td>...</td>\\n', '      <td>66</td>\\n', '      <td>653.900024</td>\\n', '      <td>1.0</td>\\n', '      <td>5</td>\\n', '      <td>5</td>\\n', '      <td>5</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>18Sep2000 09:10:52</td>\\n', '    </tr><tr>\\n', '      <th>...</th>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '    </tr><tr>\\n', '      <th>175</th>\\n', '      <td>LINESTRING (2063077.13 352972.51, 2063714.94 3...</td>\\n', '      <td>[[0.0, 548.4], [130.0, 547.37], [215.0, 546.24...</td>\\n', \"      <td>{'Station': [0.0, 750.0, 1060.010009765625], '...</td>\\n\", '      <td>[]</td>\\n', '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>1692.633</td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td>576.940002</td>\\n', '      <td>...</td>\\n', '      <td>58</td>\\n', '      <td>528.669983</td>\\n', '      <td>1.0</td>\\n', '      <td>5</td>\\n', '      <td>5</td>\\n', '      <td>5</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>18Sep2000 09:10:52</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['                                              geometry  \\\\\\n', '0    LINESTRING (1968668.17 290166.79, 1969067.87 2...   \\n', '1    LINESTRING (1968627.02 290584.12, 1969009.09 2...   \\n', '2    LINESTRING (1968585.88 290854.5, 1968868.02 29...   \\n', '..                                                 ...   \\n', '175  LINESTRING (2063077.13 352972.51, 2063714.94 3...   \\n', '176  LINESTRING (2063956.46 353190.59, 2064617.71 3...   \\n', '177  LINESTRING (2064505.16 353331.28, 2065091.38 3...   \\n', '\\n', '                                     station_elevation  \\\\\\n', '0    [[0.0, 660.41], [5.0, 660.61], [40.0, 659.85],...   \\n', '1    [[0.0, 664.28], [50.0, 661.73], [55.0, 661.54]...   \\n', '2    [[0.0, 662.72], [20.0, 665.5], [25.0, 666.48],...   \\n', '..                                                 ...   \\n', '175  [[0.0, 548.4], [130.0, 547.37], [215.0, 546.24...   \\n', '176  [[0.0, 547.93], [75.0, 547.5], [145.01, 547.76...   \\n', '177  [[0.0, 539.78], [5.0, 539.74], [40.0, 53\n...\n[Output truncated, 3915 characters total]"
          },
          "execution_count": 30,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "cross_sections_gdf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Cross Sections with Ineffective Flow Areas:\n"
          ]
        }
      ],
      "source": [
        "# Showing only cross sections with ineffective flow areas\n",
        "\n",
        "# Filter rows where ineffective_blocks is not empty\n",
        "ineffective_xs_gdf = cross_sections_gdf[cross_sections_gdf['ineffective_blocks'].apply(len) > 0]\n",
        "print(\"\\nCross Sections with Ineffective Flow Areas:\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>geometry</th>\\n', '      <th>station_elevation</th>\\n', '      <th>mannings_n</th>\\n', '      <th>ineffective_blocks</th>\\n', '      <th>River</th>\\n', '      <th>Reach</th>\\n', '      <th>RS</th>\\n', '      <th>Name</th>\\n', '      <th>Description</th>\\n', '      <th>Len Left</th>\\n', '      <th>...</th>\\n', '      <th>HP Count</th>\\n', '      <th>HP Start Elev</th>\\n', '      <th>HP Vert Incr</th>\\n', '      <th>HP LOB Slices</th>\\n', '      <th>HP Chan Slices</th>\\n', '      <th>HP ROB Slices</th>\\n', '      <th>Ineff Block Mode</th>\\n', '      <th>Obstr Block Mode</th>\\n', '      <th>Default Centerline</th>\\n', '      <th>Last Edited</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>81</th>\\n', '      <td>LINESTRING (2009787.46 325935.78, 2010709.8 32...</td>\\n', '      <td>[[0.0, 603.79], [2.0, 603.17], [4.0, 602.65], ...</td>\\n', \"      <td>{'Station': [0.0, 1434.0, 1680.0], 'Mann n': [...</td>\\n\", \"      <td>[{'Left Sta': 0.0, 'Right Sta': 1400.0, 'Eleva...</td>\\n\", '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>76002.96</td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td>76.320000</td>\\n', '      <td>...</td>\\n', '      <td>24</td>\\n', '      <td>579.500000</td>\\n', '      <td>1.0</td>\\n', '      <td>5</td>\\n', '      <td>5</td>\\n', '      <td>5</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>18Sep2000 09:10:52</td>\\n', '    </tr><tr>\\n', '      <th>82</th>\\n', '      <td>LINESTRING (2009989.76 325990.64, 2010493.79 3...</td>\\n', '      <td>[[0.0, 611.14], [6.0, 611.11], [8.0, 611.06], ...</td>\\n', \"      <td>{'Station': [0.0, 1302.0, 1554.0], 'Mann n': [...</td>\\n\", \"      <td>[{'Left Sta': 0.0, 'Right Sta': 1280.0, 'Eleva...</td>\\n\", '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>75917.82</td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td>335.799988</td>\\n', '      <td>...</td>\\n', '      <td>32</td>\\n', '      <td>579.179993</td>\\n', '      <td>1.0</td>\\n', '      <td>5</td>\\n', '      <td>5</td>\\n', '      <td>5</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>18Sep2000 09:10:52</td>\\n', '    </tr><tr>\\n', '      <th>100</th>\\n', '      <td>LINESTRING (2022341.9 333784.25, 2023231.41 33...</td>\\n', '      <td>[[0.0, 600.93], [5.0, 601.88], [35.0, 601.2], ...</td>\\n', \"      <td>{'Station': [0.0, 1390.0, 1600.0], 'Mann n': [...</td>\\n\", \"      <td>[{'Left Sta': 0.0, 'Right Sta': 1340.0, 'Eleva...</td>\\n\", '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>58836.23</td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td>147.380005</td>\\n', '      <td>...</td>\\n', '      <td>63</td>\\n', '      <td>563.330017</td>\\n', '      <td>1.0</td>\\n', '      <td>5</td>\\n', '      <td>5</td>\\n', '      <td>5</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>18Sep2000 09:10:52</td>\\n', '    </tr><tr>\\n', '      <th>...</th>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '    </tr><tr>\\n', '      <th>160</th>\\n', '      <td>LINESTRING (2054283.09 350389.32, 2055114.51 3...</td>\\n', '      <td>[[0.0, 574.48], [40.0, 574.08], [45.0, 574.31]...</td>\\n', \"      <td>{'Station': [0.0, 1210.0, 1694.0], 'Mann n': [...</td>\\n\", \"      <td>[{'Left Sta': 0.0, 'Right Sta': 1160.0, 'Eleva...</td>\\n\", '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>11865.80</td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td>812.440002</td>\\n', '      <td>...</td>\\n', '      <td>97</td>\\n', '      <td>535.000000</td>\\n', '      <td>1.0</td>\\n', '      <td>5</td>\\n', '      <td>5</td>\\n', '      <td>5</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>18Sep2000 09:10:52</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['                                              geometry  \\\\\\n', '81   LINESTRING (2009787.46 325935.78, 2010709.8 32...   \\n', '82   LINESTRING (2009989.76 325990.64, 2010493.79 3...   \\n', '100  LINESTRING (2022341.9 333784.25, 2023231.41 33...   \\n', '..                                                 ...   \\n', '160  LINESTRING (2054283.09 350389.32, 2055114.51 3...   \\n', '173  LINESTRING (2061688.97 352001.74, 2063053.69 3...   \\n', '174  LINESTRING (2061670.21 352090.84, 2063025.55 3...   \\n', '\\n', '                                     station_elevation  \\\\\\n', '81   [[0.0, 603.79], [2.0, 603.17], [4.0, 602.65], ...   \\n', '82   [[0.0, 611.14], [6.0, 611.11], [8.0, 611.06], ...   \\n', '100  [[0.0, 600.93], [5.0, 601.88], [35.0, 601.2], ...   \\n', '..                                                 ...   \\n', '160  [[0.0, 574.48], [40.0, 574.08], [45.0, 574.31]...   \\n', '173  [[90.0, 556.52], [100.5, 557.67], [107.5, 557....   \\n', '174  [[0.0, 551.6], [91.0, 551.38], [129.51, \n...\n[Output truncated, 4273 characters total]"
          },
          "execution_count": 32,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "ineffective_xs_gdf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Cross Section Information:\n",
            "\n",
            "Cross Section 1:\n",
            "River: Bald Eagle\n",
            "Reach: Loc Hav\n",
            "\n",
            "Geometry:\n",
            "LINESTRING (1968668.17 290166.79, 1969067.87 289778.85)\n",
            "\n",
            "Station-Elevation Points:\n",
            "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
            "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
            "     1       0.00     660.41         9     190.00     660.21        17     330.00     660.95        25     410.00     671.32        33     480.00     695.50    \n",
            "     2       5.00     660.61        10     195.00     658.98        18     340.00     659.56        26     415.00     672.91        34     485.00     696.55    \n",
            "     3      40.00     659.85        11     197.96     657.39        19     345.00     658.84        27     430.00     678.12        35     514.99     701.46    \n",
            "     4      55.00     659.39        12     200.00     656.30        20     350.00     658.28        28     440.00     683.19        36     520.00     702.14    \n",
            "     5      60.00     659.21        13     305.00     657.15        21     361.39     662.03        29     445.00     685.60        37     525.00     702.64    \n",
            "     6      90.00     658.45        14     310.00     657.68        22     375.00     666.52        30     455.00     688.70        38     530.00     703.31    \n",
            "     7      95.00     658.48        15     320.00     660.58        23     380.00     667.51        31     460.00     689.95        39     535.00     703.91    \n",
            "     8     130.00     659.60        16     324.99     661.39        24     385.00     668.12        32     475.00     694.17        40     557.01     706.27    \n",
            "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
            "\n",
            "Cross Section 2:\n",
            "River: Bald Eagle\n",
            "Reach: Loc Hav\n",
            "\n",
            "Geometry:\n",
            "LINESTRING (1968627.02 290584.12, 1969009.09 290343.13, 1969273.59 290290.23, 1969408.78 290290.23)\n",
            "\n",
            "Station-Elevation Points:\n",
            "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
            "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
            "     1       0.00     664.28         9     295.00     659.39        17     460.01     660.06        25     565.00     654.38        33     735.00     694.24    \n",
            "     2      50.00     661.73        10     305.00     659.09        18     465.00     660.27        26     570.00     653.73        34     765.00     700.36    \n",
            "     3      55.00     661.54        11     310.00     659.11        19     510.00     659.64        27     650.00     655.99        35     770.00     701.23    \n",
            "     4     160.00     658.65        12     330.01     659.32        20     520.00     659.96        28     655.00     656.16        36     785.00     703.53    \n",
            "     5     165.00     658.65        13     335.00     659.33        21     525.01     660.29        29     660.00     658.06        37     790.00     704.42    \n",
            "     6     180.01     658.79        14     395.00     659.03        22     530.00     660.72        30     672.56     664.59        38     856.65     719.10    \n",
            "     7     250.00     658.98        15     450.00     659.45        23     535.00     660.79        31     705.00     681.46    \n",
            "     8     290.01     659.45        16     451.72     659.56        24     539.95     659.73        32     721.46     689.01    \n",
            "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
            "\n",
            "Cross Section 3:\n",
            "River: Bald Eagle\n",
            "Reach: Loc Hav\n",
            "\n",
            "Geometry:\n",
            "LINESTRING (1968585.88 290854.5, 1968868.02 290736.95, 1969085.5 290672.29, 1969391.15 290672.29)\n",
            "\n",
            "Station-Elevation Points:\n",
            "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
            "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
            "     1       0.00     662.72         9     305.65     659.33        17     515.00     659.58        25     584.22     658.51        33     745.00     681.14    \n",
            "     2      20.00     665.50        10     385.00     659.68        18     520.00     659.38        26     585.00     658.36        34     750.00     684.43    \n",
            "     3      25.00     666.48        11     390.00     659.67        19     524.99     658.80        27     590.00     656.91        35     770.00     697.71    \n",
            "     4      59.99     664.56        12     420.00     659.08        20     530.00     658.50        28     600.00     653.66        36     795.00     711.50    \n",
            "     5      65.00     664.33        13     455.00     659.67        21     532.54     658.45        29     605.00     653.40        37     800.00     714.13    \n",
            "     6     250.00     659.04        14     460.00     659.72        22     550.00     658.12        30     705.00     656.01        38     815.00     716.88    \n",
            "     7     254.99     658.93        15     465.00     659.69        23     555.00     658.23        31     710.00     659.27        39     820.00     717.76    \n",
            "     8     295.00     659.31        16     485.00     659.78        24     580.00     659.30        32     717.24     663.79        40     838.19     719.88    \n",
            "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
            "\n",
            "Cross Section 4:\n",
            "River: Bald Eagle\n",
            "Reach: Loc Hav\n",
            "\n",
            "Geometry:\n",
            "LINESTRING (1968521.22 291524.58, 1968903.29 291424.66, 1969291.23 291430.54)\n",
            "\n",
            "Station-Elevation Points:\n",
            "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
            "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
            "     1       0.00     663.72         8     215.01     666.57        15     465.00     658.84        22     680.00     657.03        29     745.00     687.30    \n",
            "     2      40.00     669.65         9     265.00     663.38        16     500.00     659.32        23     685.00     659.22        30     755.00     688.84    \n",
            "     3      45.00     670.46        10     270.00     662.78        17     530.01     659.56        24     700.00     667.37        31     760.00     689.50    \n",
            "     4      50.01     671.71        11     340.00     659.16        18     534.80     657.07        25     700.46     667.61        32     765.00     690.11    \n",
            "     5      55.00     671.42        12     390.00     658.75        19     535.01     656.96        26     715.00     675.36        33     775.00     691.22    \n",
            "     6      60.00     671.18        13     394.92     658.68        20     540.00     653.42        27     720.00     677.43        34     780.00     691.60    \n",
            "     7     210.00     666.85        14     420.00     658.46        21     675.00     655.83        28     735.00     683.26        35     782.90     691.71    \n",
            "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
            "\n",
            "Cross Section 5:\n",
            "River: Bald Eagle\n",
            "Reach: Loc Hav\n",
            "\n",
            "Geometry:\n",
            "LINESTRING (1968468.32 291918.4, 1968715.19 291753.82, 1969255.96 291800.84)\n",
            "\n",
            "Station-Elevation Points:\n",
            "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
            "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
            "     1       0.00     657.88        15     165.00     667.24        29     360.00     655.61        43     525.00     656.70        57     714.84     663.86    \n",
            "     2      10.00     657.64        16     200.00     656.24        30     365.00     656.53        44     530.00     656.78        58     765.00     684.05    \n",
            "     3      20.00     657.23        17     205.00     655.79        31     390.00     657.64        45     535.00     656.89        59     770.00     685.79    \n",
            "     4      30.00     658.54        18     240.00     657.03        32     395.00     657.76        46     539.89     657.03        60     775.00     686.34    \n",
            "     5      35.00     659.00        19     245.00     657.12        33     410.00     657.39        47     540.01     657.03        61     780.00     686.92    \n",
            "     6      50.00     659.66        20     255.00     657.01        34     415.01     657.42        48     545.00     656.56        62     810.00     690.98    \n",
            "     7      90.00     657.38        21     280.00     656.52        35     430.00     658.08        49     550.00     654.30        63     825.00     692.86    \n",
            "     8      95.00     657.17        22     285.01     656.50        36     435.00     658.10        50     555.00     653.47        64     830.01     692.34    \n",
            "     9     125.00     665.26        23     296.70     656.66        37     445.00     657.95        51     670.00     654.48        65     835.00     691.78    \n",
            "    10     130.00     666.37        24     330.01     657.03        38     480.00     657.92        52     690.00     654.75        66     839.51     691.35    \n",
            "    11     140.00     668.18        25     335.01     656.85        39     485.00     657.80        53     695.00     655.55    \n",
            "    12     145.00     669.24        26     340.00     656.28        40     505.00     656.92        54     700.00     657.67    \n",
            "    13     150.00     671.49        27     350.00     655.05        41     510.00     656.77        55     705.01     659.87    \n",
            "    14     155.00     671.14        28     355.00     654.61        42     515.00     656.69        56     710.00     661.91    \n",
            "------------------------------------------------------------------------------------------------------------------------------------------------------\n"
          ]
        }
      ],
      "source": [
        "# Print first 5 cross sections data\n",
        "print(\"\\nCross Section Information:\")\n",
        "\n",
        "for idx, row in cross_sections_gdf.head(5).iterrows():\n",
        "    print(f\"\\nCross Section {idx + 1}:\")\n",
        "    print(f\"River: {row['River']}\")\n",
        "    print(f\"Reach: {row['Reach']}\")\n",
        "    print(\"\\nGeometry:\")\n",
        "    print(row['geometry'])\n",
        "    print(\"\\nStation-Elevation Points:\")\n",
        "    \n",
        "    # Print header\n",
        "    print(\"     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\")\n",
        "    print(\"-\" * 150)\n",
        "    \n",
        "    # Calculate number of rows needed\n",
        "    points = row['station_elevation']\n",
        "    num_rows = (len(points) + 4) // 5  # Round up division\n",
        "    \n",
        "    # Print points in 5 columns\n",
        "    for i in range(num_rows):\n",
        "        line = \"\"\n",
        "        for j in range(5):\n",
        "            point_idx = i + j * num_rows\n",
        "            if point_idx < len(points):\n",
        "                station, elevation = points[point_idx]\n",
        "                line += f\"{point_idx+1:6d} {station:10.2f} {elevation:10.2f}    \"\n",
        "        print(line)\n",
        "    print(\"-\" * 150)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Plot cross sections on map with matplotlib\n",
        "\n",
        "if generate_plots:\n",
        "    # Create figure and axis\n",
        "    fig, ax = plt.subplots(figsize=(15,10))\n",
        "    \n",
        "    # Plot cross sections\n",
        "    cross_sections_gdf.plot(ax=ax, color='red', linewidth=1, label='Cross Sections')\n",
        "    \n",
        "    # Add river name and reach labels\n",
        "    #for idx, row in cross_sections_gdf.iterrows():\n",
        "    #    # Get midpoint of cross section line for label placement\n",
        "    #    midpoint = row.geometry.centroid\n",
        "    #    label = f\"{row['River']}\\n{row['Reach']}\\nRS: {row['RS']}\"\n",
        "    #    ax.annotate(label, (midpoint.x, midpoint.y), \n",
        "    #               xytext=(5, 5), textcoords='offset points',\n",
        "    #               fontsize=8, bbox=dict(facecolor='white', alpha=0.7))\n",
        "    \n",
        "    # Customize plot\n",
        "    ax.set_title('Cross Sections Location Map')\n",
        "    ax.grid(True)\n",
        "    ax.legend()\n",
        "    \n",
        "    # Equal aspect ratio to preserve shape\n",
        "    ax.set_aspect('equal')\n",
        "    \n",
        "    plt.tight_layout()\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Figure size 2000x1000 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Plot cross sections with Manning's n values colored by value\n",
        "\n",
        "if generate_plots:\n",
        "    # Create figure\n",
        "    fig, ax1 = plt.subplots(figsize=(20,10))\n",
        "\n",
        "    # Create colormap\n",
        "    cmap = plt.cm.viridis\n",
        "    norm = plt.Normalize(vmin=0.02, vmax=0.08)  # Typical Manning's n range\n",
        "\n",
        "    # Plot cross sections colored by Manning's n\n",
        "    for idx, row in cross_sections_gdf.iterrows():\n",
        "        # Extract Manning's n values and stations\n",
        "        mannings = row['mannings_n']\n",
        "        n_values = mannings['Mann n']\n",
        "        stations = mannings['Station']\n",
        "        \n",
        "        # Get the full linestring coordinates\n",
        "        line_coords = list(row.geometry.coords)\n",
        "        \n",
        "        # Calculate total length of the cross section\n",
        "        total_length = row.geometry.length\n",
        "        \n",
        "        # For each Manning's n segment\n",
        "        for i in range(len(n_values)-1):\n",
        "            # Calculate the start and end proportions along the line\n",
        "            start_prop = stations[i] / stations[-1]\n",
        "            end_prop = stations[i+1] / stations[-1]\n",
        "            \n",
        "            # Get the start and end points for this segment\n",
        "            start_idx = int(start_prop * (len(line_coords)-1))\n",
        "            end_idx = int(end_prop * (len(line_coords)-1))\n",
        "            \n",
        "            # Extract the segment coordinates\n",
        "            segment_coords = line_coords[start_idx:end_idx+1]\n",
        "            \n",
        "            if len(segment_coords) >= 2:\n",
        "                # Create a line segment\n",
        "                segment = LineString(segment_coords)\n",
        "                \n",
        "                # Get color from colormap for this n value\n",
        "                color = cmap(norm(n_values[i]))\n",
        "                \n",
        "                # Plot the segment\n",
        "                ax1.plot(*segment.xy, color=color, linewidth=2)\n",
        "\n",
        "    # Add colorbar\n",
        "    sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n",
        "    sm.set_array([])\n",
        "    plt.colorbar(sm, ax=ax1, label=\"Manning's n Value\")\n",
        "\n",
        "    ax1.set_title(\"Cross Sections Colored by Manning's n Values\")\n",
        "    ax1.grid(True)\n",
        "    ax1.set_aspect('equal')\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Figure size 2000x1000 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Plot cross sections with ineffective flow areas\n",
        "\n",
        "if generate_plots:\n",
        "    # Create figure\n",
        "    fig, ax2 = plt.subplots(figsize=(20,10))\n",
        "\n",
        "    # Plot all cross sections first\n",
        "    cross_sections_gdf.plot(ax=ax2, color='lightgray', linewidth=1, label='Cross Sections')\n",
        "\n",
        "    # Plot ineffective flow areas with thicker lines\n",
        "    ineffective_sections = cross_sections_gdf[cross_sections_gdf['ineffective_blocks'].apply(lambda x: len(x) > 0)]\n",
        "    ineffective_sections.plot(ax=ax2, color='red', linewidth=3, label='Ineffective Flow Areas')\n",
        "\n",
        "    # Add ineffective flow area labels with offset to lower right\n",
        "    for idx, row in cross_sections_gdf.iterrows():\n",
        "        # Get midpoint of cross section line\n",
        "        midpoint = row.geometry.centroid\n",
        "        \n",
        "        # Extract ineffective flow blocks\n",
        "        ineff_blocks = row['ineffective_blocks']\n",
        "        \n",
        "        if ineff_blocks:  # Only label if there are ineffective blocks\n",
        "            label_parts = []\n",
        "            # Add RS to first line of label\n",
        "            label_parts.append(f\"RS: {row['RS']}\")\n",
        "            for block in ineff_blocks:\n",
        "                label_parts.append(\n",
        "                    f\"L:{block['Left Sta']:.0f}-R:{block['Right Sta']:.0f}\\n\"\n",
        "                    f\"Elev: {block['Elevation']:.2f}\\n\"\n",
        "                    f\"Permanent: {block['Permanent']}\"\n",
        "                )\n",
        "            \n",
        "            label = '\\n'.join(label_parts)\n",
        "            \n",
        "            ax2.annotate(label, (midpoint.x, midpoint.y),\n",
        "                        xytext=(15, -15),  # Offset to lower right\n",
        "                        textcoords='offset points',\n",
        "                        fontsize=8, \n",
        "                        bbox=dict(facecolor='white', alpha=0.7),\n",
        "                        arrowprops=dict(arrowstyle='->'),\n",
        "                        horizontalalignment='left',\n",
        "                        verticalalignment='top')\n",
        "\n",
        "    ax2.set_title('Cross Sections with Ineffective Flow Areas')\n",
        "    ax2.grid(True)\n",
        "    ax2.legend()\n",
        "    ax2.set_aspect('equal')\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Plot cross section elevation for cross section 42\n",
        "if generate_plots:\n",
        "    # Get cross sections data\n",
        "    cross_sections_gdf = HdfXsec.get_cross_sections(geom_hdf_path)\n",
        "\n",
        "    if not cross_sections_gdf.empty:\n",
        "        # Get station-elevation data for cross section 42\n",
        "        station_elevation = cross_sections_gdf.iloc[42]['station_elevation']\n",
        "        \n",
        "        # Convert list of lists to numpy arrays for plotting\n",
        "        stations = np.array([point[0] for point in station_elevation])\n",
        "        elevations = np.array([point[1] for point in station_elevation])\n",
        "        \n",
        "        # Create figure and axis\n",
        "        fig, ax = plt.subplots(figsize=(12,8))\n",
        "        \n",
        "        # Plot cross section\n",
        "        ax.plot(stations, elevations, 'b-', linewidth=2)\n",
        "        \n",
        "        # Add labels and title\n",
        "        river = cross_sections_gdf.iloc[42]['River']\n",
        "        reach = cross_sections_gdf.iloc[42]['Reach'] \n",
        "        rs = cross_sections_gdf.iloc[42]['RS']\n",
        "        \n",
        "        # Show bank stations as dots\n",
        "        left_bank_station = cross_sections_gdf.iloc[42]['Left Bank']\n",
        "        right_bank_station = cross_sections_gdf.iloc[42]['Right Bank']\n",
        "        \n",
        "        # Get elevations at bank stations\n",
        "        left_bank_elev = elevations[np.searchsorted(stations, left_bank_station)]\n",
        "        right_bank_elev = elevations[np.searchsorted(stations, right_bank_station)]\n",
        "        \n",
        "        # Plot bank stations with dots\n",
        "        ax.plot(left_bank_station, left_bank_elev, 'ro')\n",
        "        ax.plot(right_bank_station, right_bank_elev, 'ro')\n",
        "        \n",
        "        # Add bank station labels with station and elevation\n",
        "        ax.annotate(f'Left Bank\\nStation: {left_bank_station:.1f}\\nElevation: {left_bank_elev:.1f}',\n",
        "                   (left_bank_station, left_bank_elev),\n",
        "                   xytext=(-50, 30),\n",
        "                   textcoords='offset points',\n",
        "                   bbox=dict(facecolor='white', alpha=0.8),\n",
        "                   arrowprops=dict(arrowstyle='->'))\n",
        "                   \n",
        "        ax.annotate(f'Right Bank\\nStation: {right_bank_station:.1f}\\nElevation: {right_bank_elev:.1f}',\n",
        "                   (right_bank_station, right_bank_elev), \n",
        "                   xytext=(50, 30),\n",
        "                   textcoords='offset points',\n",
        "                   bbox=dict(facecolor='white', alpha=0.8),\n",
        "                   arrowprops=dict(arrowstyle='->'))\n",
        "        \n",
        "        ax.set_title(f'Cross Section Profile\\nRiver: {river}, Reach: {reach}, RS: {rs}')\n",
        "        ax.set_xlabel('Station (ft)')\n",
        "        ax.set_ylabel('Elevation (ft)')\n",
        "        \n",
        "        # Add grid\n",
        "        ax.grid(True)\n",
        "        \n",
        "        plt.tight_layout()\n",
        "        plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:24:52 - ras_commander.HdfXsec - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:52 - ras_commander.HdfXsec - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:52 - ras_commander.HdfBase - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:52 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:52 - ras_commander.HdfBase - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:52 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:52 - ras_commander.HdfBase - CRITICAL - No valid projection found. Checked:\n",
            "1. HDF file projection attribute: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            " was checked and no projection attribute found2. No RASMapper projection file found\n",
            "To fix this:\n",
            "1. Open RASMapper\n",
            "2. Click Map > Set Projection\n",
            "3. Select an appropriate projection file or coordinate system\n",
            "4. Save the RASMapper project\n",
            "2025-04-09 07:24:52 - ras_commander.HdfXsec - INFO - Extracted 1 river centerlines\n"
          ]
        }
      ],
      "source": [
        "# Get river centerlines as geodataframe\n",
        "centerlines_gdf = HdfXsec.get_river_centerlines(geom_hdf_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "River Centerlines:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>River Name</th>\\n', '      <th>Reach Name</th>\\n', '      <th>US Type</th>\\n', '      <th>US Name</th>\\n', '      <th>DS Type</th>\\n', '      <th>DS Name</th>\\n', '      <th>Junction to US XS</th>\\n', '      <th>DS XS to Junction</th>\\n', '      <th>geometry</th>\\n', '      <th>length</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>Bald Eagle</td>\\n', '      <td>Loc Hav</td>\\n', '      <td>External</td>\\n', '      <td></td>\\n', '      <td>External</td>\\n', '      <td></td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>LINESTRING (1967609.38 288126.34, 1967754.63 2...</td>\\n', '      <td>140451.729879</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['   River Name Reach Name   US Type US Name   DS Type DS Name  \\\\\\n', '0  Bald Eagle    Loc Hav  External          External           \\n', '\\n', '   Junction to US XS  DS XS to Junction  \\\\\\n', '0                NaN                NaN   \\n', '\\n', '                                            geometry         length  \\n', '0  LINESTRING (1967609.38 288126.34, 1967754.63 2...  140451.729879  ']"
          },
          "execution_count": 39,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nRiver Centerlines:\")\n",
        "centerlines_gdf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Plot river centerlines with labels\n",
        "if generate_plots:\n",
        "    # Create figure and axis\n",
        "    fig, ax = plt.subplots(figsize=(15, 10))\n",
        "\n",
        "    # Plot centerlines\n",
        "    centerlines_gdf.plot(ax=ax, color='blue', linewidth=2, label='River Centerline')\n",
        "\n",
        "    # Add river/reach labels\n",
        "    for idx, row in centerlines_gdf.iterrows():\n",
        "        # Get midpoint of the line for label placement\n",
        "        midpoint = row.geometry.interpolate(0.5, normalized=True)\n",
        "        \n",
        "        # Create label text combining river and reach names\n",
        "        label = f\"{row['River Name']}\\n{row['Reach Name']}\"\n",
        "        \n",
        "        # Add text annotation\n",
        "        ax.annotate(label, \n",
        "                    xy=(midpoint.x, midpoint.y),\n",
        "                    xytext=(10, 10), # Offset text slightly\n",
        "                    textcoords='offset points',\n",
        "                    fontsize=10,\n",
        "                    bbox=dict(facecolor='white', edgecolor='none', alpha=0.7))\n",
        "\n",
        "    # Add labels and title\n",
        "    ax.set_title('River Centerlines', fontsize=14)\n",
        "    ax.set_xlabel('Easting', fontsize=12)\n",
        "    ax.set_ylabel('Northing', fontsize=12)\n",
        "\n",
        "    # Add legend\n",
        "    ax.legend(fontsize=12)\n",
        "\n",
        "    # Add grid\n",
        "    ax.grid(True)\n",
        "\n",
        "    # Adjust layout\n",
        "    plt.tight_layout()\n",
        "\n",
        "    # Show plot\n",
        "    plt.show()\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:24:52 - ras_commander.HdfXsec - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:52 - ras_commander.HdfXsec - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:52 - ras_commander.HdfBase - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:52 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:52 - ras_commander.HdfBase - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:52 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:52 - ras_commander.HdfBase - CRITICAL - No valid projection found. Checked:\n",
            "1. HDF file projection attribute: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            " was checked and no projection attribute found2. No RASMapper projection file found\n",
            "To fix this:\n",
            "1. Open RASMapper\n",
            "2. Click Map > Set Projection\n",
            "3. Select an appropriate projection file or coordinate system\n",
            "4. Save the RASMapper project\n"
          ]
        }
      ],
      "source": [
        "# Get river edge lines as geodataframe\n",
        "edge_lines_gdf = HdfXsec.get_river_edge_lines(geom_hdf_path)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "River Edge Lines:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>edge_id</th>\\n', '      <th>bank_side</th>\\n', '      <th>geometry</th>\\n', '      <th>length</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>LINESTRING (1968668.17 290166.79, 1968673.632 ...</td>\\n', '      <td>141615.154108</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>LINESTRING (1969067.87 289778.85, 1969194.669 ...</td>\\n', '      <td>130396.337697</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['   edge_id  bank_side                                           geometry  \\\\\\n', '0      NaN        NaN  LINESTRING (1968668.17 290166.79, 1968673.632 ...   \\n', '1      NaN        NaN  LINESTRING (1969067.87 289778.85, 1969194.669 ...   \\n', '\\n', '          length  \\n', '0  141615.154108  \\n', '1  130396.337697  ']"
          },
          "execution_count": 42,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nRiver Edge Lines:\")\n",
        "edge_lines_gdf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:24:52 - ras_commander.HdfXsec - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:52 - ras_commander.HdfXsec - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:52 - ras_commander.HdfBase - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:52 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:52 - ras_commander.HdfBase - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:52 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            "2025-04-09 07:24:52 - ras_commander.HdfBase - CRITICAL - No valid projection found. Checked:\n",
            "1. HDF file projection attribute: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
            " was checked and no projection attribute found2. No RASMapper projection file found\n",
            "To fix this:\n",
            "1. Open RASMapper\n",
            "2. Click Map > Set Projection\n",
            "3. Select an appropriate projection file or coordinate system\n",
            "4. Save the RASMapper project\n"
          ]
        }
      ],
      "source": [
        "# Get bank lines as geodataframe\n",
        "bank_lines_gdf = HdfXsec.get_river_bank_lines(geom_hdf_path)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "River Bank Lines:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>bank_id</th>\\n', '      <th>bank_side</th>\\n', '      <th>geometry</th>\\n', '      <th>length</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>0</td>\\n', '      <td>Left</td>\\n', '      <td>LINESTRING (1968804.51 290034.461, 1968930.093...</td>\\n', '      <td>139546.829503</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>1</td>\\n', '      <td>Right</td>\\n', '      <td>LINESTRING (1968937.263 289905.614, 1969101.06...</td>\\n', '      <td>139349.187666</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['   bank_id bank_side                                           geometry  \\\\\\n', '0        0      Left  LINESTRING (1968804.51 290034.461, 1968930.093...   \\n', '1        1     Right  LINESTRING (1968937.263 289905.614, 1969101.06...   \\n', '\\n', '          length  \\n', '0  139546.829503  \\n', '1  139349.187666  ']"
          },
          "execution_count": 44,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nRiver Bank Lines:\")\n",
        "bank_lines_gdf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Create figure and axis\n",
        "\n",
        "if generate_plots:\n",
        "    fig, ax = plt.subplots(figsize=(15, 10))\n",
        "\n",
        "    # Plot river edge lines\n",
        "    edge_lines_gdf.plot(ax=ax, color='blue', linewidth=2, label='River Edge Lines')\n",
        "\n",
        "    # Plot centerlines for reference\n",
        "    centerlines_gdf.plot(ax=ax, color='red', linewidth=2, linestyle='--', label='River Centerline')\n",
        "\n",
        "    # Plot river bank lines\n",
        "    bank_lines_gdf.plot(ax=ax, color='green', linewidth=2, label='River Bank Lines')\n",
        "\n",
        "    # Add title and labels\n",
        "    ax.set_title('River Edge Lines, Centerline, and Bank Lines', fontsize=14)\n",
        "    ax.set_xlabel('Easting', fontsize=12)\n",
        "    ax.set_ylabel('Northing', fontsize=12)\n",
        "\n",
        "    # Add legend\n",
        "    ax.legend(fontsize=12)\n",
        "\n",
        "    # Add grid\n",
        "    ax.grid(True)\n",
        "\n",
        "    # Adjust layout\n",
        "    plt.tight_layout()\n",
        "\n",
        "    # Show plot\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Structures Summary:\n",
            "Number of structures found: 11\n",
            "\n",
            "Structure Details:\n",
            "   Structure ID\n",
            "0             1\n",
            "1             2\n",
            "2             3\n",
            "3             4\n",
            "4             5\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Cross Sections Summary:\n",
            "Number of cross sections found: 178\n",
            "\n",
            "Cross Section Details:\n",
            "        River    Reach\n",
            "0  Bald Eagle  Loc Hav\n",
            "1  Bald Eagle  Loc Hav\n",
            "2  Bald Eagle  Loc Hav\n",
            "3  Bald Eagle  Loc Hav\n",
            "4  Bald Eagle  Loc Hav\n"
          ]
        }
      ],
      "source": [
        "# Extract 1D Structures Geodataframe\n",
        "\n",
        "\n",
        "\n",
        "# Display basic information about the structures\n",
        "print(\"\\nStructures Summary:\")\n",
        "print(f\"Number of structures found: {len(structures_gdf)}\")\n",
        "structures_gdf\n",
        "\n",
        "# Display first few rows of key attributes\n",
        "print(\"\\nStructure Details:\")\n",
        "display_cols = ['Structure ID', 'Structure Type', 'River Name', 'Reach Name', 'Station']\n",
        "display_cols = [col for col in display_cols if col in structures_gdf.columns]\n",
        "if display_cols:\n",
        "    print(structures_gdf[display_cols].head())\n",
        "\n",
        "\n",
        "if generate_plots:\n",
        "\n",
        "    # Create visualization\n",
        "    fig, ax = plt.subplots(figsize=(15, 10))\n",
        "\n",
        "    # Plot river centerlines\n",
        "    if not centerlines_gdf.empty:\n",
        "        centerlines_gdf.plot(ax=ax, color='blue', linewidth=2, label='River Centerlines')\n",
        "\n",
        "    # Plot cross sections\n",
        "    if not cross_sections_gdf.empty:\n",
        "        cross_sections_gdf.plot(ax=ax, color='green', linewidth=1, label='Cross Sections')\n",
        "\n",
        "    # Plot structures\n",
        "    if not structures_gdf.empty:\n",
        "        structures_gdf.plot(ax=ax, color='red', marker='s', markersize=100, label='Structures')\n",
        "\n",
        "    # Add title and labels\n",
        "    ax.set_title('HEC-RAS Model Components', fontsize=14)\n",
        "    ax.set_xlabel('Easting', fontsize=12)\n",
        "    ax.set_ylabel('Northing', fontsize=12)\n",
        "\n",
        "    # Add legend\n",
        "    ax.legend(fontsize=12)\n",
        "\n",
        "    # Add grid\n",
        "    ax.grid(True)\n",
        "\n",
        "    # Adjust layout\n",
        "    plt.tight_layout()\n",
        "\n",
        "    # Show plot\n",
        "    plt.show()\n",
        "\n",
        "# Print summary of cross sections\n",
        "print(\"\\nCross Sections Summary:\")\n",
        "print(f\"Number of cross sections found: {len(cross_sections_gdf)}\")\n",
        "if not cross_sections_gdf.empty:\n",
        "    print(\"\\nCross Section Details:\")\n",
        "    xs_display_cols = ['River', 'Reach', 'Station']\n",
        "    xs_display_cols = [col for col in xs_display_cols if col in cross_sections_gdf.columns]\n",
        "    if xs_display_cols:\n",
        "        print(cross_sections_gdf[xs_display_cols].head())\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:24:53 - ras_commander.HdfPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n",
            "2025-04-09 07:24:53 - ras_commander.HdfPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Example 12: Extracting Plan Parameters and Volume Accounting Data\n"
          ]
        }
      ],
      "source": [
        "# Extract Plan Parameters\n",
        "print(\"\\nExample 12: Extracting Plan Parameters and Volume Accounting Data\")\n",
        "\n",
        "plan_parameters_df = HdfPlan.get_plan_parameters(hdf_path=plan_hdf_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 48,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Plan Parameters DataFrame:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Plan</th>\\n', '      <th>Parameter</th>\\n', '      <th>Value</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>1D Cores</td>\\n', '      <td>0</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>01</td>\\n', '      <td>1D Flow Tolerance</td>\\n', '      <td>NaN</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>01</td>\\n', '      <td>1D Maximum Iterations</td>\\n', '      <td>20</td>\\n', '    </tr><tr>\\n', '      <th>...</th>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '      <td>...</td>\\n', '    </tr><tr>\\n', '      <th>29</th>\\n', '      <td>01</td>\\n', '      <td>HDF Write Time Slices</td>\\n', '      <td>False</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['   Plan              Parameter  Value\\n', '0    01               1D Cores      0\\n', '1    01      1D Flow Tolerance    NaN\\n', '2    01  1D Maximum Iterations     20\\n', '..  ...                    ...    ...\\n', '29   01  HDF Write Time Slices  False\\n', '30   01       HDF Write Warmup  False\\n', '31   01         Pardiso Solver  False\\n', '\\n', '[32 rows x 3 columns]']"
          },
          "execution_count": 48,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nPlan Parameters DataFrame:\")\n",
        "plan_parameters_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 49,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:24:53 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n",
            "2025-04-09 07:24:53 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n"
          ]
        }
      ],
      "source": [
        "# Extract volume accounting data\n",
        "volume_accounting_df = HdfResultsPlan.get_volume_accounting(hdf_path=plan_hdf_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 50,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Volume Accounting DataFrame:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Error</th>\\n', '      <th>Error Percent</th>\\n', '      <th>Total Boundary Flux of Water In</th>\\n', '      <th>Total Boundary Flux of Water Out</th>\\n', '      <th>Vol Accounting in</th>\\n', '      <th>Volume Ending</th>\\n', '      <th>Volume Starting</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>-29.546846</td>\\n', '      <td>0.014071</td>\\n', '      <td>200682.453125</td>\\n', '      <td>112574.828125</td>\\n', '      <td>Acre Feet</td>\\n', '      <td>97384.882812</td>\\n', '      <td>9306.797852</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['       Error  Error Percent  Total Boundary Flux of Water In  \\\\\\n', '0 -29.546846       0.014071                    200682.453125   \\n', '\\n', '   Total Boundary Flux of Water Out Vol Accounting in  Volume Ending  \\\\\\n', '0                     112574.828125         Acre Feet   97384.882812   \\n', '\\n', '   Volume Starting  \\n', '0      9306.797852  ']"
          },
          "execution_count": 50,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nVolume Accounting DataFrame:\")\n",
        "volume_accounting_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 51,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:24:53 - ras_commander.HdfPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n",
            "2025-04-09 07:24:53 - ras_commander.HdfPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Simulation start time: 1999-02-18 00:00:00\n"
          ]
        }
      ],
      "source": [
        "# Get simulation start time\n",
        "start_time = HdfPlan.get_plan_start_time(plan_hdf_path)\n",
        "print(f\"Simulation start time: {start_time}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 52,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:24:53 - ras_commander.HdfPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n",
            "2025-04-09 07:24:53 - ras_commander.HdfPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Simulation end time: 1999-02-24 05:00:00\n"
          ]
        }
      ],
      "source": [
        "# Get plan end time\n",
        "end_time = HdfPlan.get_plan_end_time(plan_hdf_path)\n",
        "print(f\"Simulation end time: {end_time}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 53,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:24:53 - ras_commander.HdfResultsXsec - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n",
            "2025-04-09 07:24:53 - ras_commander.HdfResultsXsec - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Cross Section Results Shape: (150, 178)\n",
            "\n",
            "Number of cross sections in geometry: 178\n",
            "\n",
            "First few cross section names:\n",
            "['Bald Eagle       Loc Hav          138154.4'\n",
            " 'Bald Eagle       Loc Hav          137690.8'\n",
            " 'Bald Eagle       Loc Hav          137327.0'\n",
            " 'Bald Eagle       Loc Hav          136564.9'\n",
            " 'Bald Eagle       Loc Hav          136202.3']\n",
            "\n",
            "Number of cross sections processed: 178\n",
            "\n",
            "Columns in xs_df: ['xs_name', 'x', 'y', 'max_wsel', 'time_of_max']\n",
            "\n",
            "First row of xs_df:\n",
            "xs_name        Bald Eagle       Loc Hav          138154.4\n",
            "x                                              1968668.17\n",
            "y                                               290166.79\n",
            "max_wsel                                       672.808289\n",
            "time_of_max                           1999-02-19 15:00:00\n",
            "Name: 0, dtype: object\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Overall Maximum WSEL: 672.81 ft\n",
            "Time of Overall Maximum WSEL: 1999-02-19 15:00:00\n",
            "Hours since simulation start: 0.00 hours\n",
            "Location of Overall Maximum WSEL: X=1968668.17, Y=290166.79\n",
            "Cross Section: Bald Eagle       Loc Hav          138154.4\n"
          ]
        }
      ],
      "source": [
        "# Plot the time of maximum water surface elevation (WSEL) for cross sections\n",
        "\n",
        "# Get cross section results timeseries\n",
        "xsec_results_xr = HdfResultsXsec.get_xsec_timeseries(plan_hdf_path)\n",
        "print(\"\\nCross Section Results Shape:\", xsec_results_xr['Water_Surface'].shape)\n",
        "\n",
        "# Get cross section geometry data\n",
        "xsec_geom = HdfXsec.get_cross_sections(plan_hdf_path)\n",
        "print(\"\\nNumber of cross sections in geometry:\", len(xsec_geom))\n",
        "\n",
        "# Create dataframe with cross section locations and max WSEL times\n",
        "xs_data = []\n",
        "\n",
        "# Extract water surface data from xarray Dataset\n",
        "water_surface = xsec_results_xr['Water_Surface'].values\n",
        "times = pd.to_datetime(xsec_results_xr.time.values)\n",
        "\n",
        "# Debug print\n",
        "print(\"\\nFirst few cross section names:\")\n",
        "print(xsec_results_xr.cross_section.values[:5])\n",
        "\n",
        "# Iterate through cross sections\n",
        "for xs_idx in range(len(xsec_results_xr.cross_section)):\n",
        "    # Get WSEL timeseries for this cross section\n",
        "    wsel_series = water_surface[:, xs_idx]\n",
        "    \n",
        "    # Get cross section name and parse components\n",
        "    xs_name = xsec_results_xr.cross_section.values[xs_idx]\n",
        "    \n",
        "    # Split the string and remove empty strings\n",
        "    xs_parts = [part for part in xs_name.split() if part]\n",
        "    \n",
        "    if len(xs_parts) >= 3:\n",
        "        river = \"Bald Eagle\"  # Combine first two words\n",
        "        reach = \"Loc Hav\"     # Next two words\n",
        "        rs = xs_parts[-1]     # Last part is the station\n",
        "        \n",
        "        # Get geometry for this cross section\n",
        "        xs_match = xsec_geom[\n",
        "            (xsec_geom['River'] == river) & \n",
        "            (xsec_geom['Reach'] == reach) & \n",
        "            (xsec_geom['RS'] == rs)\n",
        "        ]\n",
        "        \n",
        "        if not xs_match.empty:\n",
        "            geom = xs_match.iloc[0]\n",
        "            # Use first point of cross section line for plotting\n",
        "            x = geom.geometry.coords[0][0]\n",
        "            y = geom.geometry.coords[0][1]\n",
        "            \n",
        "            # Find time of max WSEL\n",
        "            max_wsel_idx = np.argmax(wsel_series)\n",
        "            max_wsel = np.max(wsel_series)\n",
        "            max_time = times[max_wsel_idx]\n",
        "            \n",
        "            xs_data.append({\n",
        "                'xs_name': xs_name,\n",
        "                'x': x,\n",
        "                'y': y,\n",
        "                'max_wsel': max_wsel,\n",
        "                'time_of_max': max_time\n",
        "            })\n",
        "        else:\n",
        "            print(f\"\\nWarning: No geometry match found for {xs_name}\")\n",
        "            print(f\"River: {river}, Reach: {reach}, RS: {rs}\")\n",
        "    else:\n",
        "        print(f\"\\nWarning: Could not parse cross section name: {xs_name}\")\n",
        "\n",
        "# Create dataframe\n",
        "xs_df = pd.DataFrame(xs_data)\n",
        "\n",
        "# Debug print\n",
        "print(\"\\nNumber of cross sections processed:\", len(xs_df))\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "if generate_plots:\n",
        "    print(\"\\nColumns in xs_df:\", xs_df.columns.tolist())\n",
        "    print(\"\\nFirst row of xs_df:\")\n",
        "    print(xs_df.iloc[0])\n",
        "\n",
        "    # Create the plot\n",
        "    fig, ax = plt.subplots(figsize=(12, 8))\n",
        "\n",
        "    # Convert datetime to hours since start for colormap\n",
        "    min_time = min(xs_df['time_of_max'])\n",
        "    color_values = [(t - min_time).total_seconds() / 3600 for t in xs_df['time_of_max']]\n",
        "\n",
        "    # Plot cross section points\n",
        "    scatter = ax.scatter(xs_df['x'], xs_df['y'],\n",
        "                        c=color_values,\n",
        "                        cmap='viridis',\n",
        "                        s=50)\n",
        "\n",
        "    # Customize plot\n",
        "    ax.set_title('Time of Maximum Water Surface Elevation at Cross Sections')\n",
        "    ax.set_xlabel('X Coordinate')\n",
        "    ax.set_ylabel('Y Coordinate')\n",
        "\n",
        "    # Add colorbar\n",
        "    cbar = plt.colorbar(scatter)\n",
        "    cbar.set_label('Hours since simulation start')\n",
        "\n",
        "    # Format colorbar ticks\n",
        "    max_hours = int(max(color_values))\n",
        "    tick_interval = max(1, max_hours // 6)  # Show ~6 ticks\n",
        "    cbar.set_ticks(range(0, max_hours + 1, tick_interval))\n",
        "    cbar.set_ticklabels([f'{h}h' for h in range(0, max_hours + 1, tick_interval)])\n",
        "\n",
        "    # Add grid and adjust styling\n",
        "    ax.grid(True, linestyle='--', alpha=0.7)\n",
        "    plt.rcParams.update({'font.size': 12})\n",
        "    plt.tight_layout()\n",
        "\n",
        "    # Show plot\n",
        "    plt.show()\n",
        "\n",
        "    # Print summary statistics\n",
        "    max_wsel_xs = xs_df.loc[xs_df['max_wsel'].idxmax()]\n",
        "    hours_since_start = (max_wsel_xs['time_of_max'] - min_time).total_seconds() / 3600\n",
        "\n",
        "    print(f\"\\nOverall Maximum WSEL: {max_wsel_xs['max_wsel']:.2f} ft\")\n",
        "    print(f\"Time of Overall Maximum WSEL: {max_wsel_xs['time_of_max']}\")\n",
        "    print(f\"Hours since simulation start: {hours_since_start:.2f} hours\")\n",
        "    print(f\"Location of Overall Maximum WSEL: X={max_wsel_xs['x']:.2f}, Y={max_wsel_xs['y']:.2f}\")\n",
        "    print(f\"Cross Section: {max_wsel_xs['xs_name']}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 54,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:24:54 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n",
            "2025-04-09 07:24:54 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n"
          ]
        }
      ],
      "source": [
        "# Get unsteady attributes as dataframe\n",
        "results_unsteady_attrs = HdfResultsPlan.get_unsteady_info(plan_hdf_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 55,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Name</th>\\n', '      <th>Program Version</th>\\n', '      <th>Project File Name</th>\\n', '      <th>Project Title</th>\\n', '      <th>Short ID</th>\\n', '      <th>Simulation Time Window</th>\\n', '      <th>Type of Run</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>Unsteady with Bridges and Dam</td>\\n', '      <td>HEC-RAS - River Analysis System</td>\\n', '      <td>HEC-RAS 6.6 September 2024</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>Bald Eagle Cr. for the WCDS Project</td>\\n', '      <td>UnsteadyFlow</td>\\n', '      <td>17Feb1999 2400 to 24Feb1999 0500</td>\\n', '      <td>Unsteady Flow Analysis</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['                      Plan Title                     Program Name  \\\\\\n', '0  Unsteady with Bridges and Dam  HEC-RAS - River Analysis System   \\n', '\\n', '              Program Version  \\\\\\n', '0  HEC-RAS 6.6 September 2024   \\n', '\\n', '                                   Project File Name  \\\\\\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '\\n', '                         Project Title      Short ID  \\\\\\n', '0  Bald Eagle Cr. for the WCDS Project  UnsteadyFlow   \\n', '\\n', '             Simulation Time Window             Type of Run  \\n', '0  17Feb1999 2400 to 24Feb1999 0500  Unsteady Flow Analysis  ']"
          },
          "execution_count": 55,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "results_unsteady_attrs"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 56,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:24:54 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n",
            "2025-04-09 07:24:54 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n"
          ]
        }
      ],
      "source": [
        "# Get unsteady summary attributes as dataframe\n",
        "results_unsteady_summary_attrs = HdfResultsPlan.get_unsteady_summary(plan_hdf_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 57,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Computation Time DSS</th>\\n', '      <th>Computation Time Total</th>\\n', '      <th>Maximum WSEL Error</th>\\n', '      <th>Maximum number of cores</th>\\n', '      <th>Run Time Window</th>\\n', '      <th>Solution</th>\\n', '      <th>Time Solution Went Unstable</th>\\n', '      <th>Time Stamp Solution Went Unstable</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>00:00:00</td>\\n', '      <td>00:00:03</td>\\n', '      <td>0.009995</td>\\n', '      <td>1</td>\\n', '      <td>09APR2025 07:16:26 to 09APR2025 07:16:29</td>\\n', '      <td>Unsteady Finished Successfully</td>\\n', '      <td>NaN</td>\\n', '      <td>Not Applicable</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  Computation Time DSS Computation Time Total  Maximum WSEL Error  \\\\\\n', '0             00:00:00               00:00:03            0.009995   \\n', '\\n', '   Maximum number of cores                           Run Time Window  \\\\\\n', '0                        1  09APR2025 07:16:26 to 09APR2025 07:16:29   \\n', '\\n', '                         Solution  Time Solution Went Unstable  \\\\\\n', '0  Unsteady Finished Successfully                          NaN   \\n', '\\n', '  Time Stamp Solution Went Unstable  \\n', '0                    Not Applicable  ']"
          },
          "execution_count": 57,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "results_unsteady_summary_attrs"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# 1D Cross Section Results as Xarray"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 58,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:24:54 - ras_commander.HdfResultsXsec - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n",
            "2025-04-09 07:24:54 - ras_commander.HdfResultsXsec - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n"
          ]
        }
      ],
      "source": [
        "# Get cross section results timeseries as xarray dataset\n",
        "xsec_results_xr = HdfResultsXsec.get_xsec_timeseries(plan_hdf_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 59,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div><pre>xarray.Dataset with (time: 150, cross_section: 178)\\n', 'Coordinates:\\n', '  * time                      (time) datetime64[ns] 1kB 1999-02-18 ... 1999-0...\\n', '  * cross_section             (cross_section) &lt;U42 30kB &#x27;Bald Eagle       Loc...\\n', '    River                     (cross_section) &lt;U10 7kB &#x27;Bald Eagle&#x27; ... &#x27;Bald...\\n', '    Reach                     (cross_section) &lt;U7 5kB &#x27;Loc Hav&#x27; ... &#x27;Loc Hav&#x27;\\n', '    Station                   (cross_section) &lt;U8 6kB &#x27;138154.4&#x27; ... &#x27;659.942&#x27;\\n', '    Name                      (cross_section) &lt;U1 712B &#x27;&#x27; &#x27;&#x27; &#x27;&#x27; &#x27;&#x27; ... &#x27;&#x27; &#x27;&#x27; &#x27;&#x27;\\n', '    Maximum_Water_Surface     (cross_section) float32 712B 672.8 672.8 ... 561.4\\n', '    Maximum_Flow              (cross_section) float32 712B 5e+04 ... 2.543e+04\\n', '    Maximum_Channel_Velocity  (cross_section) float32 712B 11.81 8.031 ... 2.028\\n', '    Maximum_Velocity_Total    (cross_section) float32 712B 9.371 5.379 ... 1.632\\n', '    Maximum_Flow_Lateral      (cross_section) float32 712B 0.0 0.0 ... 0.0 0.0\\n', 'Data variables:\\n', '    Water_Surface             (time, cross_section) float32 107kB 660.7 ... 5...\\n', '    Velocity_Total            (time, cross_section) float32 107kB 0.0 ... 1.227\\n', '    Velocity_Channel          (time, cross_section) float32 107kB 0.0 ... 1.286\\n', '    Flow_Lateral              (time, cross_section) float32 107kB 0.0 ... 0.0\\n', '    Flow                      (time, cross_section) float32 107kB 2e+03 ... 2...\\n', 'Attributes:\\n', '    description:  Cross-section results extracted from HEC-RAS HDF file\\n', \"    source_file:  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_projects\\\\Balde Eag...\n[Full xarray output truncated during preprocessing]</pre></div>",
            "text/plain": "xarray.Dataset with Unknown dimensions\n[Full xarray output truncated during preprocessing]"
          },
          "execution_count": 59,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "xsec_results_xr"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 60,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Time Series Data for Cross Section: Bald Eagle       Loc Hav          136202.3\n",
            "\n",
            "Water_Surface:\n",
            "[657.4173  656.7111  657.02997 657.44073 657.88824]\n",
            "\n",
            "Velocity_Total:\n",
            "[0.        2.7810786 2.9612713 2.9395368 3.0228102]\n",
            "\n",
            "Velocity_Channel:\n",
            "[0.        3.132834  3.4508243 3.7217746 4.083391 ]\n",
            "\n",
            "Flow_Lateral:\n",
            "[0. 0. 0. 0. 0.]\n",
            "\n",
            "Flow:\n",
            "[2000.     1273.8193 1607.1132 2109.992  2746.2964]\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Print time series for specific cross section\n",
        "target_xs = \"Bald Eagle       Loc Hav          136202.3\"\n",
        "\n",
        "print(\"\\nTime Series Data for Cross Section:\", target_xs)\n",
        "for var in ['Water_Surface', 'Velocity_Total', 'Velocity_Channel', 'Flow_Lateral', 'Flow']:\n",
        "    print(f\"\\n{var}:\")\n",
        "    print(xsec_results_xr[var].sel(cross_section=target_xs).values[:5])  # Show first 5 values\n",
        "\n",
        "# Create time series plots\n",
        "\n",
        "if generate_plots:\n",
        "\n",
        "    # Create a figure for each variable\n",
        "    variables = ['Water_Surface', 'Velocity_Total', 'Velocity_Channel', 'Flow_Lateral', 'Flow']\n",
        "\n",
        "    for var in variables:\n",
        "        plt.figure(figsize=(10, 5))\n",
        "        # Convert time values to datetime if needed\n",
        "        time_values = pd.to_datetime(xsec_results_xr.time.values)\n",
        "        values = xsec_results_xr[var].sel(cross_section=target_xs).values\n",
        "        \n",
        "        # Plot with explicit x and y values\n",
        "        plt.plot(time_values, values, '-', linewidth=2)\n",
        "        \n",
        "        plt.title(f'{var} at {target_xs}')\n",
        "        plt.xlabel('Time')\n",
        "        plt.ylabel(var.replace('_', ' '))\n",
        "        plt.grid(True)\n",
        "        plt.xticks(rotation=45)\n",
        "        plt.tight_layout()\n",
        "        \n",
        "        # Force display\n",
        "        plt.draw()\n",
        "        plt.pause(0.1)\n",
        "        plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "-----"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Advanced HDF Data Extraction\n",
        "This section focuses on directly accessing the HDF file from a jupyter notebook for use cases not directly supported by the RAS-Commander libary:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 61,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Extracting Compute Messages\n",
            "Compute Messages:\n",
            "Plan                                     : 'Unsteady with Bridges and Dam' (BaldEagle.p01)\n",
            "Simulation started at                    : 09Apr2025 07:13:47 AM\n",
            "\n",
            "Writing Plan GIS Data...\n",
            "\n",
            "Completed Writing Plan GIS Data\n",
            "\n",
            "Writing Geometry...\n",
            "\n",
            "Computing Bank Lines\n",
            "\n",
            "Bank lines generated in 210 ms\n",
            "\n",
            "Computing Edge Lines\n",
            "\n",
            "Edge Lines generated in 91 ms\n",
            "\n",
            "Computing XS Interpolation Surface\n",
            "\n",
            "XS Interpolation Surface generated in 244 ms\n",
            "\n",
            "Completed Writing Geometry\n",
            "\n",
            "Writing Event Conditions ...\n",
            "\n",
            "Completed Writing Event Condition Data\n",
            "\n",
            "Geometric Preprocessor HEC-RAS 6.6 September 2024\n",
            "\n",
            "Finished Processing Geometry\n",
            "\n",
            "Performing Unsteady Flow Simulation  HEC-RAS 6.6 September 2024\n",
            "Unsteady Input Summary                   : \n",
            "\n",
            "1D Unsteady Finite Difference Numerical Solution\n",
            "Overall Volume Accounting Error in Acre Feet : -29.5468461514\n",
            "Overall Volume Accounting Error as percentage : 0.01407\n",
            "\n",
            "Please review \"Computational Log File\" output for volume accounting details\n",
            "\n",
            "Writing Results to DSS\n",
            "\n",
            "Finished Unsteady Flow Simulation\n",
            "\n",
            "Reading Unsteady Data for Post Process...\n",
            "\n",
            "Completed Reading Unsteady Data for Post Process\n",
            "\n",
            "Running Post Processor  HEC-RAS 6.6 September 2024\n",
            "\n",
            "Finished Post Processing\n",
            "\n",
            "Generating Time Series Post Process File ...\n",
            "Writing 1D Data                          : Water-Surface\n",
            "Writing 1D Data                          : Flow\n",
            "\n",
            "Time Series Post Process file generated [179 ms]\n",
            "\n",
            "Computations Summary\n",
            "Computation Task\tTime(hh                 : mm:ss)\n",
            "\n",
            "Completing Geometry, Flow and Plan\t       3\n",
            "Preprocessing Geometry\t    2             : 34\n",
            "\n",
            "Unsteady Flow Computations\t       3\n",
            "\n",
            "Post-Processing\t      14\n",
            "\n",
            "Generating Time Series Post Process\t<1\n",
            "Complete Process\t    2                   : 57\n",
            "\n",
            "Computation Speed\tSimulation/Runtime\n",
            "\n",
            "Unsteady Flow Computations\t135694x\n",
            "\n",
            "Complete Process\t3021x\n",
            "\n",
            "Computation Summary:\n",
            "--------------------------------------------------\n",
            "Computation Task               Time                \n",
            "--------------------------------------------------\n",
            "Computation Task               Time(hh:mm:ss)      \n",
            "\n",
            "Computation Speed:\n",
            "--------------------------------------------------\n",
            "Task                           Simulation/Runtime  \n",
            "--------------------------------------------------\n",
            "Computation Speed              Simulation/Runtime  \n"
          ]
        }
      ],
      "source": [
        "# Extract Compute Messages as String\n",
        "print(\"Extracting Compute Messages\")\n",
        "\n",
        "import h5py\n",
        "import numpy as np\n",
        "\n",
        "def extract_string_from_hdf(results_hdf_filename: str, hdf_path: str) -> str:\n",
        "    \"\"\"\n",
        "    Extract string from HDF object at a given path\n",
        "\n",
        "    Parameters\n",
        "    ----------\n",
        "    results_hdf_filename : str\n",
        "        Name of the HDF file\n",
        "    hdf_path : str\n",
        "        Path of the object in the HDF file\n",
        "\n",
        "    Returns\n",
        "    -------\n",
        "    str\n",
        "        Extracted string from the specified HDF object\n",
        "    \"\"\"\n",
        "    with h5py.File(results_hdf_filename, 'r') as hdf_file:\n",
        "        try:\n",
        "            hdf_object = hdf_file[hdf_path]\n",
        "            if isinstance(hdf_object, h5py.Group):\n",
        "                return f\"Group: {hdf_path}\\nContents: {list(hdf_object.keys())}\"\n",
        "            elif isinstance(hdf_object, h5py.Dataset):\n",
        "                data = hdf_object[()]\n",
        "                if isinstance(data, bytes):\n",
        "                    return data.decode('utf-8')\n",
        "                elif isinstance(data, np.ndarray) and data.dtype.kind == 'S':\n",
        "                    return [v.decode('utf-8') for v in data]\n",
        "                else:\n",
        "                    return str(data)\n",
        "            else:\n",
        "                return f\"Unsupported object type: {type(hdf_object)}\"\n",
        "        except KeyError:\n",
        "            return f\"Path not found: {hdf_path}\"\n",
        "\n",
        "try:\n",
        "    results_summary_string = extract_string_from_hdf(plan_hdf_path, '/Results/Summary/Compute Messages (text)')\n",
        "    print(\"Compute Messages:\")\n",
        "    \n",
        "    # Parse and print the compute messages in a more visually friendly way\n",
        "    messages = results_summary_string[0].split('\\r\\n')\n",
        "    \n",
        "    for message in messages:\n",
        "        if message.strip():  # Skip empty lines\n",
        "            if ':' in message:\n",
        "                key, value = message.split(':', 1)\n",
        "                print(f\"{key.strip():40} : {value.strip()}\")\n",
        "            else:\n",
        "                print(f\"\\n{message.strip()}\")\n",
        "    \n",
        "    # Print computation summary in a table format\n",
        "    print(\"\\nComputation Summary:\")\n",
        "    print(\"-\" * 50)\n",
        "    print(f\"{'Computation Task':<30} {'Time':<20}\")\n",
        "    print(\"-\" * 50)\n",
        "    for line in messages:\n",
        "        if 'Computation Task' in line:\n",
        "            task, time = line.split('\\t')\n",
        "            print(f\"{task:<30} {time:<20}\")\n",
        "    \n",
        "    print(\"\\nComputation Speed:\")\n",
        "    print(\"-\" * 50)\n",
        "    print(f\"{'Task':<30} {'Simulation/Runtime':<20}\")\n",
        "    print(\"-\" * 50)\n",
        "    for line in messages:\n",
        "        if 'Computation Speed' in line:\n",
        "            task, speed = line.split('\\t')\n",
        "            print(f\"{task:<30} {speed:<20}\")\n",
        "\n",
        "except Exception as e:\n",
        "    print(f\"Error extracting compute messages: {str(e)}\")\n",
        "    print(\"\\nNote: If 'Results/Summary Output' is not in the file structure, it might indicate that the simulation didn't complete successfully or the results weren't saved properly.\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Exploring HDF Datasets with HdfBase.get_dataset_info\n",
        "This allows users to find HDF information that is not included in the ras-commander library.  Find the path in HDFView and set the group_path below to explore the HDF datasets and attributes.  Then, use the output to write your own function to extract the data.  "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Get HDF Paths with Properties (For Exploring HDF Files)\n",
        "HdfBase.get_dataset_info(plan_number, group_path=\"/Geometry\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Use get_hdf5_dataset_info function to get dataset structure:\n",
        "HdfBase.get_dataset_info(plan_hdf_path, \"/Geometry/River Bank Lines/\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Use get_hdf5_dataset_info function to get Pipe Conduits data:\n",
        "HdfBase.get_dataset_info(plan_hdf_path, \"/Geometry/Structures\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Use get_hdf5_dataset_info function to get Pipe Conduits data:\n",
        "HdfBase.get_dataset_info(plan_hdf_path, \"/Results/Unsteady/Output/Output Blocks/Computation Block/Global/\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Use the get_hdf5_dataset_info function from HdfUtils to explore the Cross Sections structure in the geometry HDF file\n",
        "\n",
        "print(\"\\nExploring Cross Sections structure in geometry file:\")\n",
        "print(\"HDF Base Path: /Geometry/Cross Sections \")\n",
        "HdfBase.get_dataset_info(geom_hdf_path, group_path='/Geometry/Cross Sections')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "print(\"\\n=== HDF5 File Structure ===\\n\")\n",
        "print(plan_hdf_path)\n",
        "HdfBase.get_dataset_info(plan_hdf_path, group_path='/Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Cross Sections')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "For HDF datasets that are not supported by the RAS-Commadner library, provide the dataset path to HdfBase.get_dataset_info and provide the output to an LLM along with a relevent HDF* class(es) to generate new functions that extend the library's coverage.   "
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "rascmdr",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}
==================================================

File: c:\GH\ras-commander\examples\11_2d_hdf_data_extraction.ipynb
==================================================
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# HEC-RAS 2D HDF Data Analysis Notebook\n",
        "\n",
        "This notebook demonstrates how to manipulate and analyze HEC-RAS 2D HDF data using the ras-commander library. It leverages the HdfBase, HdfUtils, HdfStruc, HdfMesh, HdfXsec, HdfBndry, HdfPlan, HdfResultsPlan, HdfResultsMesh, and HdfResultsXsec classes to streamline data extraction, processing, and visualization.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Install ras-commander from pip (uncomment to install if needed)\n",
        "#!pip install ras-commander\n",
        "# This installs ras-commander and all dependencies\n",
        "\n",
        "# Use this setting to disable plot generation within the notebook\n",
        "generate_plots = True\n",
        "# Use this setting to disable map generation within the notebook\n",
        "generate_maps = True\n",
        "# Set both to false for llm-friendly outputs"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Import all required modules\n",
        "#from ras_commander import *  # Import all ras-commander modules\n",
        "\n",
        "# Import the required libraries for this notebook\n",
        "import h5py\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import requests\n",
        "from tqdm import tqdm\n",
        "import scipy\n",
        "import xarray as xr\n",
        "import geopandas as gpd\n",
        "import matplotlib.pyplot as plt\n",
        "from IPython import display\n",
        "import psutil  # For getting system CPU info\n",
        "from concurrent.futures import ThreadPoolExecutor, as_completed\n",
        "import time\n",
        "import subprocess\n",
        "import sys\n",
        "import os\n",
        "import shutil\n",
        "from datetime import datetime, timedelta\n",
        "from pathlib import Path  # Ensure pathlib is imported for file operations\n",
        "import rasterio\n",
        "from rasterio.plot import show\n",
        "from mpl_toolkits.axes_grid1.inset_locator import inset_axes\n",
        "import matplotlib.patches as patches\n",
        "from matplotlib.patches import ConnectionPatch\n",
        "import logging\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "ras_commander imported successfully\n"
          ]
        }
      ],
      "source": [
        "# This cell will try to import the pip package, if it fails it will \n",
        "# add the parent directory to the Python path and try to import again\n",
        "# This assumes you are working in a subfolder of the ras-commander repository\n",
        "# This allows a user's revisions to be tested locally without installing the package\n",
        "\n",
        "import sys\n",
        "from pathlib import Path\n",
        "\n",
        "# Flexible imports to allow for development without installation \n",
        "#  ** Use this version with Jupyter Notebooks **\n",
        "try:\n",
        "    # Try to import from the installed package\n",
        "    from ras_commander import *\n",
        "except ImportError:\n",
        "    # If the import fails, add the parent directory to the Python path\n",
        "    import os\n",
        "    current_file = Path(os.getcwd()).resolve()\n",
        "    rascmdr_directory = current_file.parent\n",
        "    sys.path.append(str(rascmdr_directory))\n",
        "    print(\"Loading ras-commander from local dev copy\")\n",
        "    # Now try to import again\n",
        "    from ras_commander import *\n",
        "print(\"ras_commander imported successfully\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Use Example Project or Load Your Own Project"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:40 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-09 07:49:40 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-09 07:49:40 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Project already exists. Skipping project extraction and plan execution.\n"
          ]
        }
      ],
      "source": [
        "# To Use the HEC Example Project:\n",
        "# Download the BaldEagleCrkMulti2D project from HEC and Run Plan 06\n",
        "\n",
        "# Define the path to the BaldEagleCrkMulti2D project\n",
        "current_dir = Path.cwd()  # Adjust if your notebook is in a different directory\n",
        "the_path = current_dir / \"example_projects\" / \"BaldEagleCrkMulti2D\"\n",
        "import logging\n",
        "\n",
        "# Check if BaldEagleCrkMulti2D.p06.hdf exists (so we don't have to re-run the simulation when re-running or debugging)\n",
        "hdf_file = the_path / \"BaldEagleDamBrk.p06.hdf\"\n",
        "\n",
        "if not hdf_file.exists():\n",
        "    # Initialize RasExamples and extract the BaldEagleCrkMulti2D project\n",
        "    RasExamples.extract_project([\"BaldEagleCrkMulti2D\"])\n",
        "\n",
        "    # Initialize the RAS project using the default global ras object\n",
        "    init_ras_project(the_path, \"6.6\")\n",
        "    logging.info(f\"Bald Eagle project initialized with folder: {ras.project_folder}\")\n",
        "    \n",
        "    logging.info(f\"Bald Eagle object id: {id(ras)}\")\n",
        "    \n",
        "    # Define the plan number to execute\n",
        "    plan_number = \"06\"\n",
        "\n",
        "    # Update run flags for the project\n",
        "    RasPlan.update_run_flags(\n",
        "        plan_number,\n",
        "        geometry_preprocessor=True,\n",
        "        unsteady_flow_simulation=True,\n",
        "        run_sediment=False,\n",
        "        post_processor=True,\n",
        "        floodplain_mapping=False\n",
        "    )\n",
        "\n",
        "    # Execute Plan 06 using RasCmdr for Bald Eagle\n",
        "    print(f\"Executing Plan {plan_number} for the Bald Eagle Creek project...\")\n",
        "    success_the = RasCmdr.compute_plan(plan_number)\n",
        "    if success_the:\n",
        "        print(f\"Plan {plan_number} executed successfully for Bald Eagle.\\n\")\n",
        "    else:\n",
        "        print(f\"Plan {plan_number} execution failed for Bald Eagle.\\n\")\n",
        "else:\n",
        "    print(\"Project already exists. Skipping project extraction and plan execution.\")\n",
        "    # Initialize the RAS project using the default global ras object\n",
        "    init_ras_project(the_path, \"6.6\")\n",
        "    plan_number = \"06\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "###  OPTIONAL: Use your own project instead\n",
        "\n",
        "your_project_path = Path(r\"D:\\yourprojectpath\")\n",
        "\n",
        "init_ras_project(your_project_path, \"6.6\")\n",
        "plan_number = \"01\"  # Plan number to use for this notebook \n",
        "\n",
        "\n",
        "\n",
        "### If you use this code cell, don't run the previous cell or change to markdown\n",
        "### NOTE: Ensure the HDF Results file was generated by HEC-RAS Version 6.x or above"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "-----"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Explore Project Dataframes using 'ras' Object"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>UNET D2 SolverType</th>\\n', '      <th>UNET D2 Name</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>13</td>\\n', '      <td>07</td>\\n', '      <td>06</td>\\n', '      <td>PMF with Multi 2D Areas</td>\\n', '      <td>5.10</td>\\n', '      <td>PMF Multi 2D</td>\\n', '      <td>01JAN1999,1200,04JAN1999,1200</td>\\n', '      <td>30SEC</td>\\n', '      <td>30MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>Pardiso (Direct)</td>\\n', '      <td>193</td>\\n', '      <td>None</td>\\n', '      <td>06</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>07</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>15</td>\\n', '      <td>12</td>\\n', '      <td>08</td>\\n', '      <td>1d-2D Dambreak Refined Grid</td>\\n', '      <td>5.10</td>\\n', '      <td>1D-2D Refined Grid</td>\\n', '      <td>01JAN1999,1200,04JAN1999,1200</td>\\n', '      <td>20SEC</td>\\n', '      <td>5MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>None</td>\\n', '      <td>08</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>12</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>17</td>\\n', '      <td>09</td>\\n', '      <td>10</td>\\n', '      <td>2D to 1D No Dam</td>\\n', '      <td>5.00</td>\\n', '      <td>2D to 1D No Dam</td>\\n', '      <td>01JAN1999,1200,06JAN1999,1200</td>\\n', '      <td>1MIN</td>\\n', '      <td>5MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>Upstream2D</td>\\n', '      <td>None</td>\\n', '      <td>10</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>09</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>18</td>\\n', '      <td>10</td>\\n', '      <td>11</td>\\n', '      <td>2D to 2D Run</td>\\n', '      <td>5.00</td>\\n', '      <td>2D to 2D Run</td>\\n', '      <td>01JAN1999,1200,04JAN1999,1200</td>\\n', '      <td>20SEC</td>\\n', '      <td>5MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>None</td>\\n', '      <td>11</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>10</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>19</td>\\n', '      <td>11</td>\\n', '      <td>12</td>\\n', '      <td>SA to 2D Dam Break Run</td>\\n', '      <td>5.00</td>\\n', '      <td>SA to 2D Dam Break</td>\\n', '      <td>01JAN1999,1200,04JAN1999,1200</td>\\n', '      <td>20SEC</td>\\n', '      <td>10MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>None</td>\\n', '      <td>12</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>11</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['   plan_number unsteady_number geometry_number  \\\\\\n', '0           13              07              06   \\n', '1           15              12              08   \\n', '2           17              09              10   \\n', '3           18              10              11   \\n', '4           19              11              12   \\n', '5           03              13              09   \\n', '6           04              01              13   \\n', '7           02              01              01   \\n', '8           01              01              01   \\n', '9           05              02              03   \\n', '10          06              03              09   \\n', '\\n', '                                 Plan Title Program Version  \\\\\\n', '0                   PMF with Multi 2D Areas            5.10   \\n', '1               1d-2D Dambreak Refined Grid            5.10   \\n', '2                           2D to 1D No Dam            5.00   \\n', '3                              2D to 2D Run            5.0\n...\n[Output truncated, 7376 characters total]"
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Show ras object info\n",
        "ras.plan_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>unsteady_number</th>\\n', '      <th>full_path</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Flow Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Use Restart</th>\\n', '      <th>Precipitation Mode</th>\\n', '      <th>Wind Mode</th>\\n', '      <th>Met BC=Precipitation|Mode</th>\\n', '      <th>Met BC=Evapotranspiration|Mode</th>\\n', '      <th>Met BC=Precipitation|Expanded View</th>\\n', '      <th>Met BC=Precipitation|Constant Units</th>\\n', '      <th>Met BC=Precipitation|Gridded Source</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>07</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>PMF with Multi 2D Areas</td>\\n', '      <td>5.00</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>08</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>PMF for Upstream 2D</td>\\n', '      <td>4.20</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>09</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>Upstream 2D</td>\\n', '      <td>5.00</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>10</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>1972 Flood Event - 2D to 2D Run</td>\\n', '      <td>5.00</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>11</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>1972 Flood Event - SA to 2D Run</td>\\n', '      <td>5.00</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  unsteady_number                                          full_path  \\\\\\n', '0              07  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '1              08  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '2              09  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '3              10  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '4              11  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '5              12  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '6              13  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '7              01  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '8              02  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '9              03  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '\\n', '  geometry_number                            Flow Title Program Version  \\\\\\n', '0            None      \n...\n[Output truncated, 4433 characters total]"
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "ras.unsteady_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>unsteady_number</th>\\n', '      <th>boundary_condition_number</th>\\n', '      <th>river_reach_name</th>\\n', '      <th>river_station</th>\\n', '      <th>storage_area_name</th>\\n', '      <th>pump_station_name</th>\\n', '      <th>bc_type</th>\\n', '      <th>hydrograph_type</th>\\n', '      <th>Interval</th>\\n', '      <th>DSS File</th>\\n', '      <th>...</th>\\n', '      <th>Flow Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Use Restart</th>\\n', '      <th>Precipitation Mode</th>\\n', '      <th>Wind Mode</th>\\n', '      <th>Met BC=Precipitation|Mode</th>\\n', '      <th>Met BC=Evapotranspiration|Mode</th>\\n', '      <th>Met BC=Precipitation|Expanded View</th>\\n', '      <th>Met BC=Precipitation|Constant Units</th>\\n', '      <th>Met BC=Precipitation|Gridded Source</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>07</td>\\n', '      <td>1</td>\\n', '      <td>Bald Eagle Cr.</td>\\n', '      <td>Lock Haven</td>\\n', '      <td>137520</td>\\n', '      <td></td>\\n', '      <td>Flow Hydrograph</td>\\n', '      <td>Flow Hydrograph</td>\\n', '      <td>1HOUR</td>\\n', '      <td>Bald_Eagle_Creek.dss</td>\\n', '      <td>...</td>\\n', '      <td>PMF with Multi 2D Areas</td>\\n', '      <td>5.00</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>07</td>\\n', '      <td>2</td>\\n', '      <td>Bald Eagle Cr.</td>\\n', '      <td>Lock Haven</td>\\n', '      <td>81454</td>\\n', '      <td></td>\\n', '      <td>Gate Opening</td>\\n', '      <td>None</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>...</td>\\n', '      <td>PMF with Multi 2D Areas</td>\\n', '      <td>5.00</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>07</td>\\n', '      <td>3</td>\\n', '      <td>Bald Eagle Cr.</td>\\n', '      <td>Lock Haven</td>\\n', '      <td>28519</td>\\n', '      <td></td>\\n', '      <td>Lateral Inflow Hydrograph</td>\\n', '      <td>Lateral Inflow Hydrograph</td>\\n', '      <td>1HOUR</td>\\n', '      <td>Bald_Eagle_Creek.dss</td>\\n', '      <td>...</td>\\n', '      <td>PMF with Multi 2D Areas</td>\\n', '      <td>5.00</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>07</td>\\n', '      <td>4</td>\\n', '      <td>Bald Eagle Cr.</td>\\n', '      <td>Lock Haven</td>\\n', '      <td>1</td>\\n', '      <td></td>\\n', '      <td>Lateral Inflow Hydrograph</td>\\n', '      <td>Lateral Inflow Hydrograph</td>\\n', '      <td>1HOUR</td>\\n', '      <td>NaN</td>\\n', '      <td>...</td>\\n', '      <td>PMF with Multi 2D Areas</td>\\n', '      <td>5.00</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>07</td>\\n', '      <td>5</td>\\n', '      <td>Bald Eagle Cr.</td>\\n', '      <td>Lock Haven</td>\\n', '      <td>136948</td>\\n', '      <td>82303</td>\\n', '      <td>Uniform Lateral Inflow Hydrograph</td>\\n', '      <td>Uniform Lateral Inflow Hydrograph</td>\\n', '      <td>1HOUR</td>\\n', '      <td>Bald_Eagle_Creek.dss</td>\\n', '      <td>...</td>\\n', '      <td>PMF with Multi 2D Areas</td>\\n', '      <td>5.00</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['   unsteady_number  boundary_condition_number river_reach_name river_station  \\\\\\n', '0               07                          1   Bald Eagle Cr.    Lock Haven   \\n', '1               07                          2   Bald Eagle Cr.    Lock Haven   \\n', '2               07                          3   Bald Eagle Cr.    Lock Haven   \\n', '3               07                          4   Bald Eagle Cr.    Lock Haven   \\n', '4               07                          5   Bald Eagle Cr.    Lock Haven   \\n', '5               07                          6   Bald Eagle Cr.    Lock Haven   \\n', '6               07                          7   Bald Eagle Cr.    Lock Haven   \\n', '7               07                          8   Bald Eagle Cr.    Lock Haven   \\n', '8               07                          9   Bald Eagle Cr.    Lock Haven   \\n', '9               07                         10   Bald Eagle Cr.    Lock Haven   \\n', '10              08                          1   Bald Eagle Cr.\n...\n[Output truncated, 29090 characters total]"
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "ras.boundaries_df "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>UNET D2 SolverType</th>\\n', '      <th>UNET D2 Name</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>10</th>\\n', '      <td>06</td>\\n', '      <td>03</td>\\n', '      <td>09</td>\\n', '      <td>Gridded Precip - Infiltration</td>\\n', '      <td>6.00</td>\\n', '      <td>Grid Precip Infiltration</td>\\n', '      <td>09SEP2018,0000,14SEP2018,0000</td>\\n', '      <td>20SEC</td>\\n', '      <td>10MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>Pardiso (Direct)</td>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>09</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>03</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['   plan_number unsteady_number geometry_number                     Plan Title  \\\\\\n', '10          06              03              09  Gridded Precip - Infiltration   \\n', '\\n', '   Program Version          Short Identifier                Simulation Date  \\\\\\n', '10            6.00  Grid Precip Infiltration  09SEP2018,0000,14SEP2018,0000   \\n', '\\n', '   Computation Interval Mapping Interval Run HTab  ... DSS File  \\\\\\n', '10                20SEC            10MIN        1  ...      dss   \\n', '\\n', '   Friction Slope Method UNET D2 SolverType UNET D2 Name  \\\\\\n', '10                     1   Pardiso (Direct)  BaldEagleCr   \\n', '\\n', '                                     HDF_Results_Path Geom File  \\\\\\n', '10  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...        09   \\n', '\\n', '                                            Geom Path  Flow File  \\\\\\n', '10  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...         03   \\n', '\\n', '                                            Flow Path  \\\\\\n', '10  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '\\n', '                                            full_path  \\n', '10  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...  \\n', '\\n', '[1 rows x 29 columns]']"
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "ras.get_hdf_entries()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Find Paths for Results and Geometry HDF's"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Get the plan HDF path for the plan_number defined above\n",
        "plan_hdf_path = ras.plan_df.loc[ras.plan_df['plan_number'] == plan_number, 'HDF_Results_Path'].values[0]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": "[\"'d:\\\\\\\\GitHub\\\\\\\\ras-commander\\\\\\\\examples\\\\\\\\example_projects\\\\\\\\BaldEagleCrkMulti2D\\\\\\\\BaldEagleDamBrk.p06.hdf'\"]"
          },
          "execution_count": 10,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "plan_hdf_path"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Alternate: Get the geometry HDF path if you are extracting geometry elements from the geometry HDF\n",
        "geom_hdf_path = ras.plan_df.loc[ras.plan_df['plan_number'] == plan_number, 'Geom Path'].values[0] + '.hdf'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": "[\"'d:\\\\\\\\GitHub\\\\\\\\ras-commander\\\\\\\\examples\\\\\\\\example_projects\\\\\\\\BaldEagleCrkMulti2D\\\\\\\\BaldEagleDamBrk.g09.hdf'\"]"
          },
          "execution_count": 12,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "geom_hdf_path"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## RAS-Commander's Decorators Allow for Flexible Function Calling\n",
        "You can call most of the functions in the HDF* Classes using any of the following:\n",
        "1. Plan/Geometry Number (with or without leading zeros):\n",
        "   - \"01\", \"1\" - Plan/geometry number as string\n",
        "   - 1 - Plan/geometry number as integer\n",
        "   - \"p01\", \"p1\" - Plan number with 'p' prefix\n",
        "2. Direct File Paths:\n",
        "   - pathlib.Path object pointing to HDF file\n",
        "   - String path to HDF file\n",
        "\n",
        "3. h5py.File Objects:\n",
        "   - Already opened HDF file object\n",
        "\n",
        "The @standardize_input decorator handles all these input types consistently:\n",
        "   - Validates the input exists and is accessible\n",
        "   - Converts to proper pathlib.Path object\n",
        "   - Handles RAS object references\n",
        "   - Provides logging and error handling\n",
        "\n",
        "This flexibility makes it easier to work with HDF files in different contexts while maintaining consistent behavior \n",
        "across the codebase, and helps prevent strict typing from introducing unnecessary friction for LLM Coding.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "-----"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# 2D HDF Data Extraction Examples"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:40 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:40 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:40 - ras_commander.HdfResultsPlan - INFO - Plan Name: Gridded Precip - Infiltration\n",
            "2025-04-09 07:49:40 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 120.0\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Extracting runtime and compute time data\n"
          ]
        }
      ],
      "source": [
        "# Extract runtime and compute time data as dataframe\n",
        "print(\"\\nExtracting runtime and compute time data\")\n",
        "runtime_df = HdfResultsPlan.get_runtime_data(hdf_path=plan_number)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Plan Name</th>\\n', '      <th>File Name</th>\\n', '      <th>Simulation Start Time</th>\\n', '      <th>Simulation End Time</th>\\n', '      <th>Simulation Duration (s)</th>\\n', '      <th>Simulation Time (hr)</th>\\n', '      <th>Completing Geometry (hr)</th>\\n', '      <th>Preprocessing Geometry (hr)</th>\\n', '      <th>Completing Event Conditions (hr)</th>\\n', '      <th>Unsteady Flow Computations (hr)</th>\\n', '      <th>Complete Process (hr)</th>\\n', '      <th>Unsteady Flow Speed (hr/hr)</th>\\n', '      <th>Complete Process Speed (hr/hr)</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>Gridded Precip - Infiltration</td>\\n', '      <td>BaldEagleDamBrk.p06.hdf</td>\\n', '      <td>2018-09-09</td>\\n', '      <td>2018-09-14</td>\\n', '      <td>432000.0</td>\\n', '      <td>120.0</td>\\n', '      <td>N/A</td>\\n', '      <td>0.000035</td>\\n', '      <td>N/A</td>\\n', '      <td>0.092856</td>\\n', '      <td>0.099471</td>\\n', '      <td>1292.322051</td>\\n', '      <td>1206.38715</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['                       Plan Name                File Name  \\\\\\n', '0  Gridded Precip - Infiltration  BaldEagleDamBrk.p06.hdf   \\n', '\\n', '  Simulation Start Time Simulation End Time  Simulation Duration (s)  \\\\\\n', '0            2018-09-09          2018-09-14                 432000.0   \\n', '\\n', '   Simulation Time (hr) Completing Geometry (hr)  Preprocessing Geometry (hr)  \\\\\\n', '0                 120.0                      N/A                     0.000035   \\n', '\\n', '  Completing Event Conditions (hr)  Unsteady Flow Computations (hr)  \\\\\\n', '0                              N/A                         0.092856   \\n', '\\n', '   Complete Process (hr)  Unsteady Flow Speed (hr/hr)  \\\\\\n', '0               0.099471                  1292.322051   \\n', '\\n', '   Complete Process Speed (hr/hr)  \\n', '0                      1206.38715  ']"
          },
          "execution_count": 14,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "runtime_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n"
          ]
        }
      ],
      "source": [
        "# For all of the RasGeomHdf Class Functions, we will use geom_hdf_path\n",
        "print(geom_hdf_path)\n",
        "\n",
        "# For the example project, plan 06 is associated with geometry 09\n",
        "# If you want to call the geometry by number, call RasHdfGeom functions with a number\n",
        "# Otherwise, if you want to look up geometry hdf path by plan number, follow the logic in the previous code cells"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:40 - ras_commander.HdfBase - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:40 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:40 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Extracting Projection from HDF\n"
          ]
        }
      ],
      "source": [
        "# Use HdfUtils for extracting projection\n",
        "print(\"\\nExtracting Projection from HDF\")\n",
        "projection = HdfBase.get_projection(hdf_path=geom_hdf_path)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": "['\\'PROJCS[\"NAD_1983_StatePlane_Pennsylvania_North_FIPS_3701_Feet\",GEOGCS[\"GCS_North_American_1983\",DATUM[\"D_North_American_1983\",SPHEROID[\"GRS_1980\",6378137.0,298.257222101]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Lambert_Conformal_Conic\"],PARAMETER[\"False_Easting\",1968500.0],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",-77.75],PARAMETER[\"Standard_Parallel_1\",40.88333333333333],PARAMETER[\"Standard_Parallel_2\",41.95],PARAMETER[\"Latitude_Of_Origin\",40.16666666666666],UNIT[\"Foot_US\",0.3048006096012192]]\\'']"
          },
          "execution_count": 17,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "projection"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:40 - ras_commander.HdfPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:40 - ras_commander.HdfPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:40 - ras_commander.HdfPlan - INFO - Getting geometry attributes from d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:40 - ras_commander.HdfPlan - INFO - Checking for Geometry group in d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:40 - ras_commander.HdfPlan - INFO - Getting root level geometry attributes\n",
            "2025-04-09 07:49:40 - ras_commander.HdfPlan - INFO - Successfully extracted 21 root level geometry attributes\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Extracting Geometry Information\n"
          ]
        }
      ],
      "source": [
        "# Use HdfPlan for geometry-related operations\n",
        "print(\"\\nExtracting Geometry Information\")\n",
        "geom_attrs = HdfPlan.get_geometry_information(geom_hdf_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Value</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>Complete Geometry</th>\\n', '      <td>True</td>\\n', '    </tr><tr>\\n', '      <th>Extents</th>\\n', '      <td>[1960041.35636708, 2092643.59732271, 285497.89...</td>\\n', '    </tr><tr>\\n', '      <th>Geometry Time</th>\\n', '      <td>2025-04-09 07:26:15</td>\\n', '    </tr><tr>\\n', '      <th>Infiltration Date Last Modified</th>\\n', '      <td>2022-03-11 13:52:44</td>\\n', '    </tr><tr>\\n', '      <th>Infiltration File Date</th>\\n', '      <td>2020-11-24 13:24:58</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['                                                                                   Value\\n', 'Complete Geometry                                                                   True\\n', 'Extents                                [1960041.35636708, 2092643.59732271, 285497.89...\\n', 'Geometry Time                                                        2025-04-09 07:26:15\\n', 'Infiltration Date Last Modified                                      2022-03-11 13:52:44\\n', 'Infiltration File Date                                               2020-11-24 13:24:58\\n', 'Infiltration Filename                                      .\\\\Soils Data\\\\Infiltration.hdf\\n', 'Infiltration Layername                                                      Infiltration\\n', 'Land Cover Date Last Modified                                        2022-03-11 13:45:08\\n', 'Land Cover File Date                                                 2022-03-11 13:45:08\\n', 'Land Cover Filename                                  .\\\\\n...\n[Output truncated, 2074 characters total]"
          },
          "execution_count": 19,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "geom_attrs"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:40 - ras_commander.HdfMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:40 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Listing 2D Flow Area Names\n"
          ]
        }
      ],
      "source": [
        "# Use HdfMesh for geometry-related operations\n",
        "print(\"\\nListing 2D Flow Area Names\")\n",
        "flow_area_names = HdfMesh.get_mesh_area_names(geom_hdf_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "2D Flow Area Name (returned as list):\n"
          ]
        },
        {
          "data": {
            "text/plain": "[\"['BaldEagleCr']\"]"
          },
          "execution_count": 21,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"2D Flow Area Name (returned as list):\")\n",
        "flow_area_names\n",
        "# Note: this is returned as a list because it is used internally by other functions.  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:40 - ras_commander.HdfMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:40 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Extracting 2D Flow Area Attributes\n"
          ]
        }
      ],
      "source": [
        "# Get 2D Flow Area Attributes (get_mesh_area_attributes)\n",
        "print(\"\\nExtracting 2D Flow Area Attributes\")\n",
        "flow_area_attributes = HdfMesh.get_mesh_area_attributes(geom_hdf_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Value</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>Name</th>\\n', \"      <td>b'BaldEagleCr'</td>\\n\", '    </tr><tr>\\n', '      <th>Locked</th>\\n', '      <td>0</td>\\n', '    </tr><tr>\\n', '      <th>Mann</th>\\n', '      <td>0.04</td>\\n', '    </tr><tr>\\n', '      <th>Multiple Face Mann n</th>\\n', '      <td>0</td>\\n', '    </tr><tr>\\n', '      <th>Composite LC</th>\\n', '      <td>0</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['                                 Value\\n', \"Name                    b'BaldEagleCr'\\n\", 'Locked                               0\\n', 'Mann                              0.04\\n', 'Multiple Face Mann n                 0\\n', 'Composite LC                         0\\n', 'Cell Vol Tol                      0.01\\n', 'Cell Min Area Fraction            0.01\\n', 'Face Profile Tol                  0.01\\n', 'Face Area Tol                     0.01\\n', 'Face Conv Ratio                   0.02\\n', 'Laminar Depth                      0.2\\n', 'Min Face Length Ratio             0.05\\n', 'Spacing dx                       250.0\\n', 'Spacing dy                       250.0\\n', 'Shift dx                           NaN\\n', 'Shift dy                           NaN\\n', 'Cell Count                       18066']"
          },
          "execution_count": 23,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "flow_area_attributes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:40 - ras_commander.HdfMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:40 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:40 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:40 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Extracting 2D Flow Area Perimeter Polygons\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:40 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:40 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:40 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n"
          ]
        }
      ],
      "source": [
        "# Get 2D Flow Area Perimeter Polygons (get_mesh_areas)\n",
        "print(\"\\nExtracting 2D Flow Area Perimeter Polygons\")\n",
        "mesh_areas = HdfMesh.get_mesh_areas(geom_hdf_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>mesh_name</th>\\n', '      <th>geometry</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>POLYGON ((2009315.708 321138.385, 2009371.858 ...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['     mesh_name                                           geometry\\n', '0  BaldEagleCr  POLYGON ((2009315.708 321138.385, 2009371.858 ...']"
          },
          "execution_count": 25,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "mesh_areas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Generate Map of Mesh Areas\n",
        "if generate_plots:\n",
        "    # Plot the 2D Flow Area Perimeter Polygons\n",
        "    import matplotlib.pyplot as plt\n",
        "\n",
        "    fig, ax = plt.subplots(figsize=(12, 8))\n",
        "    mesh_areas.plot(ax=ax, edgecolor='black', facecolor='none')\n",
        "\n",
        "    # Add labels for each polygon\n",
        "    for idx, row in mesh_areas.iterrows():\n",
        "        centroid = row.geometry.centroid\n",
        "        # Check if 'Name' column exists, otherwise use a default label\n",
        "        label = row.get('Name', f'Area {idx}')\n",
        "        ax.annotate(label, (centroid.x, centroid.y), ha='center', va='center')\n",
        "\n",
        "    plt.title('2D Flow Area Perimeter Polygons')\n",
        "    plt.xlabel('Easting')\n",
        "    plt.ylabel('Northing')\n",
        "    plt.tight_layout()\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:41 - ras_commander.HdfMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:41 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:41 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:41 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:41 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:41 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:41 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n"
          ]
        }
      ],
      "source": [
        "# Get mesh cell faces as geodatframe\n",
        "mesh_cell_faces_gdf = HdfMesh.get_mesh_cell_faces(geom_hdf_path)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>mesh_name</th>\\n', '      <th>face_id</th>\\n', '      <th>geometry</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>0</td>\\n', '      <td>LINESTRING (2042125 351625, 2042375 351625)</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>1</td>\\n', '      <td>LINESTRING (2042375 351625, 2042375 351875)</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>2</td>\\n', '      <td>LINESTRING (2042375 351875, 2042125 351875)</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>3</td>\\n', '      <td>LINESTRING (2042125 351875, 2042125 351625)</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>4</td>\\n', '      <td>LINESTRING (2042375 351375, 2042375 351625)</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['         mesh_name  face_id                                           geometry\\n', '0      BaldEagleCr        0        LINESTRING (2042125 351625, 2042375 351625)\\n', '1      BaldEagleCr        1        LINESTRING (2042375 351625, 2042375 351875)\\n', '2      BaldEagleCr        2        LINESTRING (2042375 351875, 2042125 351875)\\n', '3      BaldEagleCr        3        LINESTRING (2042125 351875, 2042125 351625)\\n', '4      BaldEagleCr        4        LINESTRING (2042375 351375, 2042375 351625)\\n', '...            ...      ...                                                ...\\n', '37589  BaldEagleCr    37589  LINESTRING (1978444.054 300812.794, 1978402.01...\\n', '37590  BaldEagleCr    37590  LINESTRING (1973531.76 297370.846, 1973246.989...\\n', '37591  BaldEagleCr    37591  LINESTRING (1968886.801 295900.5, 1968782.778 ...\\n', '37592  BaldEagleCr    37592  LINESTRING (1965981.775 291978.68, 1966280.11 ...\\n', '37593  BaldEagleCr    37593  LINESTRING (1969588.438 289578.114, 1969731.65...\\n', '\\n', '[37594 rows x 3 columns]']"
          },
          "execution_count": 28,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "mesh_cell_faces_gdf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Mesh Cell Faces Statistics:\n",
            "Total number of cell faces: 37594\n",
            "Number of unique meshes: 1\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "from matplotlib.collections import LineCollection\n",
        "import numpy as np\n",
        "\n",
        "# Calculate and display statistics\n",
        "print(\"\\nMesh Cell Faces Statistics:\")\n",
        "print(f\"Total number of cell faces: {len(mesh_cell_faces_gdf)}\")\n",
        "print(f\"Number of unique meshes: {mesh_cell_faces_gdf['mesh_name'].nunique()}\")\n",
        "\n",
        "if generate_maps:\n",
        "    # Plot the mesh cell faces more efficiently\n",
        "    fig, ax = plt.subplots(figsize=(12, 8))\n",
        "\n",
        "    # Convert all geometries to numpy arrays at once for faster plotting\n",
        "    lines = [list(zip(*line.xy)) for line in mesh_cell_faces_gdf.geometry]\n",
        "    lines_collection = LineCollection(lines, colors='blue', linewidth=0.5, alpha=0.5)\n",
        "    ax.add_collection(lines_collection)\n",
        "\n",
        "    # Set plot title and labels\n",
        "    plt.title('Mesh Cell Faces')\n",
        "    plt.xlabel('Easting')\n",
        "    plt.ylabel('Northing')\n",
        "\n",
        "    # Calculate centroids once and store as numpy arrays\n",
        "    centroids = np.array([[geom.centroid.x, geom.centroid.y] for geom in mesh_cell_faces_gdf.geometry])\n",
        "\n",
        "    # Create scatter plot with numpy arrays\n",
        "    scatter = ax.scatter(\n",
        "        centroids[:, 0],\n",
        "        centroids[:, 1], \n",
        "        c=mesh_cell_faces_gdf['face_id'],\n",
        "        cmap='viridis',\n",
        "        s=1,\n",
        "        alpha=0.5\n",
        "    )\n",
        "    plt.colorbar(scatter, label='Face ID')\n",
        "\n",
        "    # Set axis limits based on data bounds\n",
        "    ax.set_xlim(centroids[:, 0].min(), centroids[:, 0].max())\n",
        "    ax.set_ylim(centroids[:, 1].min(), centroids[:, 1].max())\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "else:\n",
        "    print(\"generate_maps is False\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Finding the nearest cell face to a given point\n",
            "Getting Centroid of 2D Mesh Polygon\n",
            "Searching Cell\n",
            "Nearest cell face to point (2030989.2589121135, 336969.5028173043):\n",
            "Face ID: 19961\n",
            "Distance: 94.50 units\n"
          ]
        }
      ],
      "source": [
        "# Function to find the nearest cell face to a given point\n",
        "def find_nearest_cell_face(point, cell_faces_df):\n",
        "    \"\"\"\n",
        "    Find the nearest cell face to a given point.\n",
        "\n",
        "    Args:\n",
        "        point (shapely.geometry.Point): The input point.\n",
        "        cell_faces_df (GeoDataFrame): DataFrame containing cell face linestrings.\n",
        "\n",
        "    Returns:\n",
        "        int: The face_id of the nearest cell face.\n",
        "        float: The distance to the nearest cell face.\n",
        "    \"\"\"\n",
        "    # Calculate distances from the input point to all cell faces\n",
        "    distances = cell_faces_df.geometry.distance(point)\n",
        "\n",
        "    # Find the index of the minimum distance\n",
        "    nearest_index = distances.idxmin()\n",
        "\n",
        "    # Get the face_id and distance of the nearest cell face\n",
        "    nearest_face_id = cell_faces_df.loc[nearest_index, 'face_id']\n",
        "    nearest_distance = distances[nearest_index]\n",
        "\n",
        "    return nearest_face_id, nearest_distance\n",
        "\n",
        "# Example usage\n",
        "print(\"\\nFinding the nearest cell face to a given point\")\n",
        "\n",
        "# Create a sample point (you can replace this with any point of interest)\n",
        "from shapely.geometry import Point\n",
        "from geopandas import GeoDataFrame\n",
        "\n",
        "# Get the centroid of the mesh cell faces\n",
        "print(\"Getting Centroid of 2D Mesh Polygon\")\n",
        "centroid = mesh_cell_faces_gdf.geometry.union_all().centroid\n",
        "\n",
        "# Create GeoDataFrame with the centroid point, using same CRS as mesh_cell_faces_gdf\n",
        "sample_point = GeoDataFrame(\n",
        "    {'geometry': [centroid]}, \n",
        "    crs=mesh_cell_faces_gdf.crs\n",
        ")\n",
        "\n",
        "if not mesh_cell_faces_gdf.empty and not sample_point.empty:\n",
        "    print(\"Searching Cell\")\n",
        "    nearest_face_id, distance = find_nearest_cell_face(sample_point.geometry.iloc[0], mesh_cell_faces_gdf)\n",
        "    print(f\"Nearest cell face to point {sample_point.geometry.iloc[0].coords[0]}:\")\n",
        "    print(f\"Face ID: {nearest_face_id}\")\n",
        "    print(f\"Distance: {distance:.2f} units\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Generate map of cell faces with sample point and nearest cell face shown\n",
        "if generate_maps:\n",
        "    # Visualize the result\n",
        "    fig, ax = plt.subplots(figsize=(12, 8))\n",
        "    \n",
        "    # Plot all cell faces\n",
        "    mesh_cell_faces_gdf.plot(ax=ax, color='blue', linewidth=0.5, alpha=0.5, label='Cell Faces')\n",
        "    \n",
        "    # Plot the sample point\n",
        "    sample_point.plot(ax=ax, color='red', markersize=100, alpha=0.7, label='Sample Point')\n",
        "    \n",
        "    # Plot the nearest cell face\n",
        "    nearest_face = mesh_cell_faces_gdf[mesh_cell_faces_gdf['face_id'] == nearest_face_id]\n",
        "    nearest_face.plot(ax=ax, color='green', linewidth=2, alpha=0.7, label='Nearest Face')\n",
        "    \n",
        "    # Set labels and title\n",
        "    ax.set_xlabel('X Coordinate')\n",
        "    ax.set_ylabel('Y Coordinate')\n",
        "    ax.set_title('Nearest Cell Face to Sample Point')\n",
        "    \n",
        "    # Add legend and grid\n",
        "    ax.legend()\n",
        "    ax.grid(True)\n",
        "    \n",
        "    # Adjust layout and display\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "else:\n",
        "    print(\"generate_maps is set to False\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:46 - ras_commander.HdfMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:46 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:46 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:46 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:46 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:46 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:46 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:46 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Example 6: Extracting Cell Polygons\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:47 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:47 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:47 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:48 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:48 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:48 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n"
          ]
        }
      ],
      "source": [
        "# Extract Cell Polygons\n",
        "print(\"\\nExample 6: Extracting Cell Polygons\")\n",
        "cell_polygons_df = HdfMesh.get_mesh_cell_polygons(geom_hdf_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>mesh_name</th>\\n', '      <th>cell_id</th>\\n', '      <th>geometry</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>0</td>\\n', '      <td>POLYGON ((2082875 370625, 2082723.922 370776.0...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>1</td>\\n', '      <td>POLYGON ((2083125 370625, 2083125 370844.185, ...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>2</td>\\n', '      <td>POLYGON ((2083375 370625, 2083375 370886.638, ...</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>3</td>\\n', '      <td>POLYGON ((2083625 370625, 2083625 370925.693, ...</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>4</td>\\n', '      <td>POLYGON ((2083875 370625, 2083875 370958.588, ...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['         mesh_name  cell_id                                           geometry\\n', '0      BaldEagleCr        0  POLYGON ((2082875 370625, 2082723.922 370776.0...\\n', '1      BaldEagleCr        1  POLYGON ((2083125 370625, 2083125 370844.185, ...\\n', '2      BaldEagleCr        2  POLYGON ((2083375 370625, 2083375 370886.638, ...\\n', '3      BaldEagleCr        3  POLYGON ((2083625 370625, 2083625 370925.693, ...\\n', '4      BaldEagleCr        4  POLYGON ((2083875 370625, 2083875 370958.588, ...\\n', '...            ...      ...                                                ...\\n', '18061  BaldEagleCr    18061  POLYGON ((2060605.501 351955.442, 2060652.06 3...\\n', '18062  BaldEagleCr    18062  POLYGON ((2060652.06 351777.237, 2060849.045 3...\\n', '18063  BaldEagleCr    18063  POLYGON ((2060875 351951.343, 2060929.66 35193...\\n', '18064  BaldEagleCr    18064  POLYGON ((2060991.954 351624.893, 2060964.72 3...\\n', '18065  BaldEagleCr    18065  POLYGON ((2061172.274 351856.061, 2061298.822 ...\\n', '\\n', '[18066 rows x 3 columns]']"
          },
          "execution_count": 33,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "cell_polygons_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Plot cell polygons\n",
        "\n",
        "if generate_maps:\n",
        "    fig, ax = plt.subplots(figsize=(12, 8))\n",
        "\n",
        "    # Plot cell polygons\n",
        "    cell_polygons_df.plot(ax=ax, edgecolor='blue', facecolor='none')\n",
        "\n",
        "    # Set labels and title\n",
        "    ax.set_xlabel('X Coordinate')\n",
        "    ax.set_ylabel('Y Coordinate')\n",
        "    ax.set_title('2D Flow Area Cell Polygons')\n",
        "\n",
        "    # Add grid\n",
        "    ax.grid(True)\n",
        "\n",
        "    # Adjust layout and display\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "else:\n",
        "    print(\"generate_maps is set to False\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:52 - ras_commander.HdfMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:52 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:52 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:52 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Example 5: Extracting Cell Info\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:52 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:52 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:52 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n"
          ]
        }
      ],
      "source": [
        "# Extract Cell Info\n",
        "print(\"\\nExample 5: Extracting Cell Info\")\n",
        "cell_info_df = HdfMesh.get_mesh_cell_points(geom_hdf_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>mesh_name</th>\\n', '      <th>cell_id</th>\\n', '      <th>geometry</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>0</td>\\n', '      <td>POINT (2083000 370750)</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>1</td>\\n', '      <td>POINT (2083250 370750)</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>2</td>\\n', '      <td>POINT (2083500 370750)</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>3</td>\\n', '      <td>POINT (2083750 370750)</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>4</td>\\n', '      <td>POINT (2084000 370750)</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['         mesh_name  cell_id                        geometry\\n', '0      BaldEagleCr        0          POINT (2083000 370750)\\n', '1      BaldEagleCr        1          POINT (2083250 370750)\\n', '2      BaldEagleCr        2          POINT (2083500 370750)\\n', '3      BaldEagleCr        3          POINT (2083750 370750)\\n', '4      BaldEagleCr        4          POINT (2084000 370750)\\n', '...            ...      ...                             ...\\n', '19592  BaldEagleCr    19592  POINT (1978423.032 300718.897)\\n', '19593  BaldEagleCr    19593  POINT (1973389.375 297311.928)\\n', '19594  BaldEagleCr    19594   POINT (1968834.79 295808.861)\\n', '19595  BaldEagleCr    19595  POINT (1966130.942 291879.395)\\n', '19596  BaldEagleCr    19596   POINT (1969660.046 289673.23)\\n', '\\n', '[19597 rows x 3 columns]']"
          },
          "execution_count": 36,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "cell_info_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Plot cell centers\n",
        "\n",
        "if generate_maps:\n",
        "    fig, ax = plt.subplots(figsize=(12, 8))\n",
        "\n",
        "    # Plot cell centers\n",
        "    cell_info_df.plot(ax=ax, color='red', markersize=5)\n",
        "\n",
        "    # Set labels and title\n",
        "    ax.set_xlabel('X Coordinate')\n",
        "    ax.set_ylabel('Y Coordinate')\n",
        "    ax.set_title('2D Flow Area Cell Centers')\n",
        "\n",
        "    # Add grid\n",
        "    ax.grid(True)\n",
        "\n",
        "    # Adjust layout and display\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "else:\n",
        "    print(\"generate_maps is set to False\")\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Finding the nearest cell to a given point\n",
            "Using projection: PROJCS[\"NAD_1983_StatePlane_Pennsylvania_North_FIPS_3701_Feet\",GEOGCS[\"GCS_North_American_1983\",DATUM[\"D_North_American_1983\",SPHEROID[\"GRS_1980\",6378137.0,298.257222101]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Lambert_Conformal_Conic\"],PARAMETER[\"False_Easting\",1968500.0],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",-77.75],PARAMETER[\"Standard_Parallel_1\",40.88333333333333],PARAMETER[\"Standard_Parallel_2\",41.95],PARAMETER[\"Latitude_Of_Origin\",40.16666666666666],UNIT[\"Foot_US\",0.3048006096012192]]\n",
            "Nearest cell to point (2030989.2589121135, 336969.5028173043):\n",
            "Cell ID: 9249\n",
            "Distance: 32.33 units\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Function to find the nearest cell center to a given point\n",
        "def find_nearest_cell(point, cell_centers_df):\n",
        "    \"\"\"\n",
        "    Find the nearest cell center to a given point.\n",
        "\n",
        "    Args:\n",
        "        point (shapely.geometry.Point): The input point.\n",
        "        cell_centers_df (GeoDataFrame): DataFrame containing cell center points.\n",
        "\n",
        "    Returns:\n",
        "        int: The cell_id of the nearest cell.\n",
        "        float: The distance to the nearest cell center.\n",
        "    \"\"\"\n",
        "    # Calculate distances from the input point to all cell centers\n",
        "    distances = cell_centers_df.geometry.distance(point)\n",
        "\n",
        "    # Find the index of the minimum distance\n",
        "    nearest_index = distances.idxmin()\n",
        "\n",
        "    # Get the cell_id and distance of the nearest cell\n",
        "    nearest_cell_id = cell_centers_df.loc[nearest_index, 'cell_id']\n",
        "    nearest_distance = distances[nearest_index]\n",
        "\n",
        "    return nearest_cell_id, nearest_distance\n",
        "\n",
        "# Example usage\n",
        "print(\"\\nFinding the nearest cell to a given point\")\n",
        "\n",
        "# Sample point was created in a previous code cell \n",
        "\n",
        "# Get the projection from the geometry file\n",
        "# projection = HdfUtils.get_projection(hdf_path=geom_hdf_path) # This was done in a previous code cell\n",
        "if projection:\n",
        "    print(f\"Using projection: {projection}\")\n",
        "else:\n",
        "    print(\"No projection information found. Using default CRS.\")\n",
        "    projection = \"EPSG:4326\"  # Default to WGS84 if no projection is found\n",
        "\n",
        "\n",
        "\n",
        "# Ensure the CRS of the sample point matches the cell_info_df\n",
        "if sample_point.crs != cell_info_df.crs:\n",
        "    sample_point = sample_point.to_crs(cell_info_df.crs)\n",
        "\n",
        "nearest_cell_id, distance = find_nearest_cell(sample_point.geometry.iloc[0], cell_info_df)\n",
        "print(f\"Nearest cell to point {sample_point.geometry.iloc[0].coords[0]}:\")\n",
        "print(f\"Cell ID: {nearest_cell_id}\")\n",
        "print(f\"Distance: {distance:.2f} units\")\n",
        "\n",
        "if generate_maps:\n",
        "    # Visualize the result\n",
        "    fig, ax = plt.subplots(figsize=(12, 8))\n",
        "\n",
        "    # Plot all cell centers\n",
        "    cell_info_df.plot(ax=ax, color='blue', markersize=5, alpha=0.5, label='Cell Centers')\n",
        "\n",
        "    # Plot the sample point\n",
        "    sample_point.plot(ax=ax, color='red', markersize=100, alpha=0.7, label='Sample Point')\n",
        "\n",
        "    # Plot the nearest cell center\n",
        "    nearest_cell = cell_info_df[cell_info_df['cell_id'] == nearest_cell_id]\n",
        "    nearest_cell.plot(ax=ax, color='green', markersize=100, alpha=0.7, label='Nearest Cell')\n",
        "\n",
        "    # Set labels and title\n",
        "    ax.set_xlabel('X Coordinate')\n",
        "    ax.set_ylabel('Y Coordinate')\n",
        "    ax.set_title('Nearest Cell to Sample Point')\n",
        "\n",
        "    # Add legend and grid\n",
        "    ax.legend()\n",
        "    ax.grid(True)\n",
        "\n",
        "    # Adjust layout and display\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "else:\n",
        "    print(\"generate_maps is set to False\")\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:54 - ras_commander.HdfStruc - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:54 - ras_commander.HdfStruc - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Getting geometry structures attributes as Dataframe\n"
          ]
        }
      ],
      "source": [
        "# Get geometry structures attributes\n",
        "print(\"\\nGetting geometry structures attributes as Dataframe\")\n",
        "geom_structures_attrs = HdfStruc.get_geom_structures_attrs(geom_hdf_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Bridge/Culvert Count</th>\\n', '      <th>Connection Count</th>\\n', '      <th>Has Bridge Opening (2D)</th>\\n', '      <th>Inline Structure Count</th>\\n', '      <th>Lateral Structure Count</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>0</td>\\n', '      <td>1</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['   Bridge/Culvert Count  Connection Count  Has Bridge Opening (2D)  \\\\\\n', '0                     0                 1                        0   \\n', '\\n', '   Inline Structure Count  Lateral Structure Count  \\n', '0                       0                        0  ']"
          },
          "execution_count": 40,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "geom_structures_attrs"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {},
      "outputs": [],
      "source": [
        "# TODO: Paths and Functions for each type of structure: \n",
        "\n",
        "# Getting geometry structures attributes\n",
        "# Geometry structures attributes:\n",
        "# Bridge/Culvert Count: 0\n",
        "# Connection Count: 4\n",
        "# Has Bridge Opening (2D): 0\n",
        "# Inline Structure Count: 0\n",
        "# Lateral Structure Count: 0"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:54 - ras_commander.HdfBndry - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:54 - ras_commander.HdfBndry - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:54 - ras_commander.HdfBase - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:54 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:54 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:54 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:54 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Extracting Boundary Condition Lines as Geodataframe\n"
          ]
        }
      ],
      "source": [
        "# Get boundary condition lines\n",
        "print(\"\\nExtracting Boundary Condition Lines as Geodataframe\")\n",
        "bc_lines_df = HdfBndry.get_bc_lines(geom_hdf_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Name</th>\\n', '      <th>SA-2D</th>\\n', '      <th>Type</th>\\n', '      <th>Length</th>\\n', '      <th>geometry</th>\\n', '      <th>bc_line_id</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>DSNormalDepth</td>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>External</td>\\n', '      <td>1801.303345</td>\\n', '      <td>LINESTRING (2082004.235 364024.82, 2083193.546...</td>\\n', '      <td>0</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>DS2NormalD</td>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>External</td>\\n', '      <td>2633.932617</td>\\n', '      <td>LINESTRING (2084425.804 365392.892, 2084354.64...</td>\\n', '      <td>1</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>Upstream Inflow</td>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>External</td>\\n', '      <td>2533.638672</td>\\n', '      <td>LINESTRING (1967473.737 290973.629, 1969582.89...</td>\\n', '      <td>2</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['              Name        SA-2D      Type       Length  \\\\\\n', '0    DSNormalDepth  BaldEagleCr  External  1801.303345   \\n', '1       DS2NormalD  BaldEagleCr  External  2633.932617   \\n', '2  Upstream Inflow  BaldEagleCr  External  2533.638672   \\n', '\\n', '                                            geometry  bc_line_id  \\n', '0  LINESTRING (2082004.235 364024.82, 2083193.546...           0  \\n', '1  LINESTRING (2084425.804 365392.892, 2084354.64...           1  \\n', '2  LINESTRING (1967473.737 290973.629, 1969582.89...           2  ']"
          },
          "execution_count": 43,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "bc_lines_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\bill\\AppData\\Local\\Temp\\ipykernel_9556\\268397963.py:26: UserWarning: Legend does not support handles for PatchCollection instances.\n",
            "See: https://matplotlib.org/stable/tutorials/intermediate/legend_guide.html#implementing-a-custom-legend-handler\n",
            "  ax.legend()\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Plot Boundary Condition Lines with Perimeter\n",
        "\n",
        "if generate_maps:\n",
        "    fig, ax = plt.subplots(figsize=(12, 8))\n",
        "\n",
        "    if not mesh_areas.empty:\n",
        "        mesh_areas.plot(ax=ax, edgecolor='black', facecolor='none', alpha=0.7, label='2D Flow Area')\n",
        "        \n",
        "        # Add labels for each polygon\n",
        "        for idx, row in mesh_areas.iterrows():\n",
        "            centroid = row.geometry.centroid\n",
        "            label = row.get('Name', f'Area {idx}')\n",
        "            ax.annotate(label, (centroid.x, centroid.y), ha='center', va='center')\n",
        "\n",
        "    # Plot boundary condition lines\n",
        "    if not bc_lines_df.empty:\n",
        "        bc_lines_df.plot(ax=ax, color='red', linewidth=2, label='Boundary Condition Lines')\n",
        "\n",
        "    # Set labels and title\n",
        "    ax.set_xlabel('Easting')\n",
        "    ax.set_ylabel('Northing')\n",
        "    ax.set_title('2D Flow Area Perimeter Polygons and Boundary Condition Lines')\n",
        "\n",
        "    # Add grid and legend\n",
        "    ax.grid(True)\n",
        "    ax.legend()\n",
        "\n",
        "    # Adjust layout and display\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "else:\n",
        "    print(\"generate_maps is set to False\")\n",
        "# Plot 2D Flow Area Perimeter Polygons"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:54 - ras_commander.HdfBndry - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:54 - ras_commander.HdfBndry - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:54 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:54 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:54 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Extracting Breaklines\n"
          ]
        }
      ],
      "source": [
        "# Extract Breaklines as Geodataframe\n",
        "print(\"\\nExtracting Breaklines\")\n",
        "breaklines_gdf = HdfBndry.get_breaklines(geom_hdf_path)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>bl_id</th>\\n', '      <th>Name</th>\\n', '      <th>geometry</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>0</td>\\n', '      <td>SayersDam</td>\\n', '      <td>LINESTRING (2002361.246 323707.927, 2002741.35...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>1</td>\\n', '      <td>Lower</td>\\n', '      <td>LINESTRING (2060356.422 351786.819, 2060316.47...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>2</td>\\n', '      <td>Middle</td>\\n', '      <td>LINESTRING (2052757.788 348470.547, 2052785.84...</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>3</td>\\n', '      <td>Upper</td>\\n', '      <td>LINESTRING (2045597.199 348412.994, 2045638.91...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['   bl_id       Name                                           geometry\\n', '0      0  SayersDam  LINESTRING (2002361.246 323707.927, 2002741.35...\\n', '1      1      Lower  LINESTRING (2060356.422 351786.819, 2060316.47...\\n', '2      2     Middle  LINESTRING (2052757.788 348470.547, 2052785.84...\\n', '3      3      Upper  LINESTRING (2045597.199 348412.994, 2045638.91...']"
          },
          "execution_count": 46,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "breaklines_gdf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\bill\\AppData\\Local\\Temp\\ipykernel_9556\\3295158439.py:27: UserWarning: Legend does not support handles for PatchCollection instances.\n",
            "See: https://matplotlib.org/stable/tutorials/intermediate/legend_guide.html#implementing-a-custom-legend-handler\n",
            "  ax.legend()\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Plot breaklines and 2D Flow Area Perimeter Polygons\n",
        "\n",
        "if generate_plots:\n",
        "    fig, ax = plt.subplots(figsize=(12, 8))\n",
        "\n",
        "    # Plot 2D Flow Area Perimeter Polygons\n",
        "    if not mesh_areas.empty:\n",
        "        mesh_areas.plot(ax=ax, edgecolor='black', facecolor='none', alpha=0.7, label='2D Flow Area')\n",
        "        \n",
        "        # Add labels for each polygon\n",
        "        for idx, row in mesh_areas.iterrows():\n",
        "            centroid = row.geometry.centroid\n",
        "            label = row.get('Name', f'Area {idx}')\n",
        "            ax.annotate(label, (centroid.x, centroid.y), ha='center', va='center')\n",
        "\n",
        "    # Plot breaklines\n",
        "    if not breaklines_gdf.empty:\n",
        "        breaklines_gdf.plot(ax=ax, color='blue', linewidth=2, label='Breaklines')\n",
        "\n",
        "    # Set labels and title\n",
        "    ax.set_xlabel('Easting')\n",
        "    ax.set_ylabel('Northing')\n",
        "    ax.set_title('2D Flow Area Perimeter Polygons and Breaklines')\n",
        "\n",
        "    # Add grid and legend\n",
        "    ax.grid(True)\n",
        "    ax.legend()\n",
        "\n",
        "    # Adjust layout and display\n",
        "    plt.tight_layout()\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 48,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:55 - ras_commander.HdfStruc - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfStruc - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfBase - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfStruc - INFO - Successfully extracted structures GeoDataFrame.\n",
            "2025-04-09 07:49:55 - ras_commander.HdfStruc - INFO - Successfully extracted structures GeoDataFrame with attributes.\n"
          ]
        }
      ],
      "source": [
        "# Get structures as GeoDatframe\n",
        "structures_gdf = HdfStruc.get_structures(geom_hdf_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 49,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Type</th>\\n', '      <th>Mode</th>\\n', '      <th>River</th>\\n', '      <th>Reach</th>\\n', '      <th>RS</th>\\n', '      <th>Connection</th>\\n', '      <th>Groupname</th>\\n', '      <th>US Type</th>\\n', '      <th>US River</th>\\n', '      <th>US Reach</th>\\n', '      <th>...</th>\\n', '      <th>US XS Mann (Count)</th>\\n', '      <th>US BR Mann (Index)</th>\\n', '      <th>US BR Mann (Count)</th>\\n', '      <th>DS XS Mann (Index)</th>\\n', '      <th>DS XS Mann (Count)</th>\\n', '      <th>DS BR Mann (Index)</th>\\n', '      <th>DS BR Mann (Count)</th>\\n', '      <th>RC (Index)</th>\\n', '      <th>RC (Count)</th>\\n', '      <th>Profile_Data</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>Connection</td>\\n', '      <td>Weir/Gate/Culverts</td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td>Sayers Dam</td>\\n', '      <td>BaldEagleCr, Sayers Dam</td>\\n', '      <td>2D</td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td>...</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', \"      <td>[{'Station': 0.0, 'Elevation': 683.0}, {'Stati...</td>\\n\", '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['         Type                Mode River Reach RS  Connection  \\\\\\n', '0  Connection  Weir/Gate/Culverts                 Sayers Dam   \\n', '\\n', '                 Groupname US Type US River US Reach  ... US XS Mann (Count)  \\\\\\n', '0  BaldEagleCr, Sayers Dam      2D                    ...                  0   \\n', '\\n', '  US BR Mann (Index) US BR Mann (Count) DS XS Mann (Index) DS XS Mann (Count)  \\\\\\n', '0                  0                  0                  0                  0   \\n', '\\n', '  DS BR Mann (Index) DS BR Mann (Count) RC (Index) RC (Count)  \\\\\\n', '0                  0                  0          0          0   \\n', '\\n', '                                        Profile_Data  \\n', \"0  [{'Station': 0.0, 'Elevation': 683.0}, {'Stati...  \\n\", '\\n', '[1 rows x 162 columns]']"
          },
          "execution_count": 49,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "structures_gdf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 50,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:55 - ras_commander.HdfBndry - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfBndry - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfBase - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Boundary Condition Lines:\n"
          ]
        }
      ],
      "source": [
        "# Get boundary condition lines as GeoDatframe\n",
        "bc_lines_gdf = HdfBndry.get_bc_lines(geom_hdf_path)\n",
        "print(\"\\nBoundary Condition Lines:\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 51,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Name</th>\\n', '      <th>SA-2D</th>\\n', '      <th>Type</th>\\n', '      <th>Length</th>\\n', '      <th>geometry</th>\\n', '      <th>bc_line_id</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>DSNormalDepth</td>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>External</td>\\n', '      <td>1801.303345</td>\\n', '      <td>LINESTRING (2082004.235 364024.82, 2083193.546...</td>\\n', '      <td>0</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>DS2NormalD</td>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>External</td>\\n', '      <td>2633.932617</td>\\n', '      <td>LINESTRING (2084425.804 365392.892, 2084354.64...</td>\\n', '      <td>1</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>Upstream Inflow</td>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>External</td>\\n', '      <td>2533.638672</td>\\n', '      <td>LINESTRING (1967473.737 290973.629, 1969582.89...</td>\\n', '      <td>2</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['              Name        SA-2D      Type       Length  \\\\\\n', '0    DSNormalDepth  BaldEagleCr  External  1801.303345   \\n', '1       DS2NormalD  BaldEagleCr  External  2633.932617   \\n', '2  Upstream Inflow  BaldEagleCr  External  2533.638672   \\n', '\\n', '                                            geometry  bc_line_id  \\n', '0  LINESTRING (2082004.235 364024.82, 2083193.546...           0  \\n', '1  LINESTRING (2084425.804 365392.892, 2084354.64...           1  \\n', '2  LINESTRING (1967473.737 290973.629, 1969582.89...           2  ']"
          },
          "execution_count": 51,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "bc_lines_gdf"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Dev Note: Need to add function for Reference Lines"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 52,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:55 - ras_commander.HdfBndry - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfBndry - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n"
          ]
        }
      ],
      "source": [
        "# Get reference points as Geodataframe\n",
        "ref_points_gdf = HdfBndry.get_reference_points(geom_hdf_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 53,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Reference Points:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    \n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['Empty GeoDataFrame\\n', 'Columns: []\\n', 'Index: []']"
          },
          "execution_count": 53,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nReference Points:\")\n",
        "ref_points_gdf\n",
        "# There are no reference points in this example project (for demonstration only)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 54,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:55 - ras_commander.HdfBndry - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfBndry - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n"
          ]
        }
      ],
      "source": [
        "# Extract Refinement Regions\n",
        "refinement_regions_df = HdfBndry.get_refinement_regions(geom_hdf_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 55,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    \n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['Empty GeoDataFrame\\n', 'Columns: []\\n', 'Index: []']"
          },
          "execution_count": 55,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "refinement_regions_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 56,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "No refinement regions found in the geometry file.\n"
          ]
        }
      ],
      "source": [
        "# Plot Refinement Regions\n",
        "\n",
        "if not refinement_regions_df.empty:\n",
        "    print(\"Refinement Regions DataFrame:\")\n",
        "    display(refinement_regions_df.head())\n",
        "    \n",
        "    # Plot refinement regions\n",
        "    fig, ax = plt.subplots(figsize=(12, 8))\n",
        "    refinement_regions_df.plot(ax=ax, column='CellSize', legend=True, \n",
        "                               legend_kwds={'label': 'Cell Size', 'orientation': 'horizontal'},\n",
        "                               cmap='viridis')\n",
        "    ax.set_title('2D Mesh Area Refinement Regions')\n",
        "    ax.set_xlabel('Easting')\n",
        "    ax.set_ylabel('Northing')\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "else:\n",
        "    print(\"No refinement regions found in the geometry file.\")\n",
        "\n",
        "# Analyze Refinement Regions\n",
        "if not refinement_regions_df.empty:\n",
        "    print(\"\\nRefinement Regions Analysis:\")\n",
        "    print(f\"Total number of refinement regions: {len(refinement_regions_df)}\")\n",
        "    print(\"\\nCell Size Statistics:\")\n",
        "    print(refinement_regions_df['CellSize'].describe())\n",
        "    \n",
        "    # Group by Shape Type\n",
        "    shape_type_counts = refinement_regions_df['ShapeType'].value_counts()\n",
        "    print(\"\\nRefinement Region Shape Types:\")\n",
        "    print(shape_type_counts)\n",
        "    \n",
        "    # Plot Shape Type distribution\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    shape_type_counts.plot(kind='bar')\n",
        "    plt.title('Distribution of Refinement Region Shape Types')\n",
        "    plt.xlabel('Shape Type')\n",
        "    plt.ylabel('Count')\n",
        "    plt.xticks(rotation=45)\n",
        "    plt.tight_layout()\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 57,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:55 - ras_commander.HdfPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n"
          ]
        }
      ],
      "source": [
        "# Extract Plan Parameters \n",
        "plan_parameters_df = HdfPlan.get_plan_parameters(plan_hdf_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 58,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Plan</th>\\n', '      <th>Parameter</th>\\n', '      <th>Value</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>06</td>\\n', '      <td>1D Cores</td>\\n', '      <td>0</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>06</td>\\n', '      <td>1D Flow Tolerance</td>\\n', '      <td>NaN</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>06</td>\\n', '      <td>1D Maximum Iterations</td>\\n', '      <td>20</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>06</td>\\n', '      <td>1D Maximum Iterations Without Improvement</td>\\n', '      <td>0</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>06</td>\\n', '      <td>1D Maximum Water Surface Error To Abort</td>\\n', '      <td>100.0</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['   Plan                                   Parameter  \\\\\\n', '0    06                                    1D Cores   \\n', '1    06                           1D Flow Tolerance   \\n', '2    06                       1D Maximum Iterations   \\n', '3    06   1D Maximum Iterations Without Improvement   \\n', '4    06     1D Maximum Water Surface Error To Abort   \\n', '5    06                              1D Methodology   \\n', '6    06         1D Storage Area Elevation Tolerance   \\n', '7    06                                    1D Theta   \\n', '8    06                             1D Theta Warmup   \\n', '9    06        1D Water Surface Elevation Tolerance   \\n', '10   06                        1D-2D Flow Tolerance   \\n', '11   06  1D-2D Gate Flow Submergence Decay Exponent   \\n', '12   06                    1D-2D IS Stablity Factor   \\n', '13   06                    1D-2D LS Stablity Factor   \\n', '14   06                    1D-2D Maximum Iterations   \\n', '15   06         1D-2D Maximum Number \n...\n[Output truncated, 7265 characters total]"
          },
          "execution_count": 58,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "plan_parameters_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 59,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:55 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n"
          ]
        }
      ],
      "source": [
        "# Extract volume accounting data\n",
        "volume_accounting_df = HdfResultsPlan.get_volume_accounting(plan_hdf_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 60,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Error</th>\\n', '      <th>Error Percent</th>\\n', '      <th>Precipitation Excess (acre feet)</th>\\n', '      <th>Precipitation Excess (inches)</th>\\n', '      <th>Total Boundary Flux of Water In</th>\\n', '      <th>Total Boundary Flux of Water Out</th>\\n', '      <th>Vol Accounting in</th>\\n', '      <th>Volume Ending</th>\\n', '      <th>Volume Starting</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>0.469082</td>\\n', '      <td>0.000331</td>\\n', '      <td>3756.872803</td>\\n', '      <td>1.707615</td>\\n', '      <td>141685.0</td>\\n', '      <td>17240.263672</td>\\n', '      <td>Acre Feet</td>\\n', '      <td>124445.203125</td>\\n', '      <td>0.0</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['      Error  Error Percent  Precipitation Excess (acre feet)  \\\\\\n', '0  0.469082       0.000331                       3756.872803   \\n', '\\n', '   Precipitation Excess (inches)  Total Boundary Flux of Water In  \\\\\\n', '0                       1.707615                         141685.0   \\n', '\\n', '   Total Boundary Flux of Water Out Vol Accounting in  Volume Ending  \\\\\\n', '0                      17240.263672         Acre Feet  124445.203125   \\n', '\\n', '   Volume Starting  \\n', '0              0.0  ']"
          },
          "execution_count": 60,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "volume_accounting_df"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "------"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# RasPlanHdf Class Functions"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "-----"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 61,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:55 - ras_commander.HdfPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Simulation start time: 2018-09-09 00:00:00\n"
          ]
        }
      ],
      "source": [
        "# Get plan start time as datetime object\n",
        "start_time = HdfPlan.get_plan_start_time(plan_hdf_path)\n",
        "print(f\"Simulation start time: {start_time}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Simulation start time: 2018-09-09 00:00:00"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 62,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:55 - ras_commander.HdfPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Simulation end time: 2018-09-14 00:00:00\n"
          ]
        }
      ],
      "source": [
        "# Get plan end time as datetime object\n",
        "end_time = HdfPlan.get_plan_end_time(plan_hdf_path)\n",
        "print(f\"Simulation end time: {end_time}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Simulation end time: 2018-09-14 00:00:00"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 63,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:55 - ras_commander.HdfResultsMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfResultsMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfResultsMesh - INFO - Processing summary output for variable: Cell Last Iteration\n",
            "2025-04-09 07:49:55 - ras_commander.HdfMesh - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:55 - ras_commander.HdfResultsMesh - INFO - Processed 19597 rows of summary output data\n"
          ]
        }
      ],
      "source": [
        "# Get maximum iteration count for mesh cells\n",
        "max_iter_gdf = HdfResultsMesh.get_mesh_max_iter(plan_hdf_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 64,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>mesh_name</th>\\n', '      <th>cell_id</th>\\n', '      <th>cell_last_iteration</th>\\n', '      <th>geometry</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>POINT (2083000 370750)</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>1</td>\\n', '      <td>0</td>\\n', '      <td>POINT (2083250 370750)</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>2</td>\\n', '      <td>0</td>\\n', '      <td>POINT (2083500 370750)</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>3</td>\\n', '      <td>2</td>\\n', '      <td>POINT (2083750 370750)</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>4</td>\\n', '      <td>0</td>\\n', '      <td>POINT (2084000 370750)</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['         mesh_name  cell_id  cell_last_iteration  \\\\\\n', '0      BaldEagleCr        0                    0   \\n', '1      BaldEagleCr        1                    0   \\n', '2      BaldEagleCr        2                    0   \\n', '3      BaldEagleCr        3                    2   \\n', '4      BaldEagleCr        4                    0   \\n', '...            ...      ...                  ...   \\n', '19592  BaldEagleCr    19592                    0   \\n', '19593  BaldEagleCr    19593                    0   \\n', '19594  BaldEagleCr    19594                    0   \\n', '19595  BaldEagleCr    19595                    0   \\n', '19596  BaldEagleCr    19596                    0   \\n', '\\n', '                             geometry  \\n', '0              POINT (2083000 370750)  \\n', '1              POINT (2083250 370750)  \\n', '2              POINT (2083500 370750)  \\n', '3              POINT (2083750 370750)  \\n', '4              POINT (2084000 370750)  \\n', '...                               ...  \\n', '19592  POINT (1978423.032 300718.897)  \\n', '19593  POINT (1973389.375 297311.928)  \\n', '19594   POINT (1968834.79 295808.861)  \\n', '19595  POINT (1966130.942 291879.395)  \\n', '19596   POINT (1969660.046 289673.23)  \\n', '\\n', '[19597 rows x 4 columns]']"
          },
          "execution_count": 64,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "max_iter_gdf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 65,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:56 - ras_commander.HdfMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:56 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:56 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:56 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:56 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:56 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:56 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n"
          ]
        }
      ],
      "source": [
        "# Get cell coordinates \n",
        "cell_coords = HdfMesh.get_mesh_cell_points(plan_hdf_path)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 66,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "First few rows of the dataframe:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>mesh_name</th>\\n', '      <th>cell_id</th>\\n', '      <th>geometry</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>0</td>\\n', '      <td>POINT (2083000 370750)</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>1</td>\\n', '      <td>POINT (2083250 370750)</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>2</td>\\n', '      <td>POINT (2083500 370750)</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>3</td>\\n', '      <td>POINT (2083750 370750)</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>4</td>\\n', '      <td>POINT (2084000 370750)</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['         mesh_name  cell_id                        geometry\\n', '0      BaldEagleCr        0          POINT (2083000 370750)\\n', '1      BaldEagleCr        1          POINT (2083250 370750)\\n', '2      BaldEagleCr        2          POINT (2083500 370750)\\n', '3      BaldEagleCr        3          POINT (2083750 370750)\\n', '4      BaldEagleCr        4          POINT (2084000 370750)\\n', '...            ...      ...                             ...\\n', '19592  BaldEagleCr    19592  POINT (1978423.032 300718.897)\\n', '19593  BaldEagleCr    19593  POINT (1973389.375 297311.928)\\n', '19594  BaldEagleCr    19594   POINT (1968834.79 295808.861)\\n', '19595  BaldEagleCr    19595  POINT (1966130.942 291879.395)\\n', '19596  BaldEagleCr    19596   POINT (1969660.046 289673.23)\\n', '\\n', '[19597 rows x 3 columns]']"
          },
          "execution_count": 66,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Plot Mesh Max Iterations\n",
        "\n",
        "if generate_maps:\n",
        "    # Extract x and y coordinates from the geometry column\n",
        "    max_iter_gdf['x'] = max_iter_gdf['geometry'].apply(lambda geom: geom.x if geom is not None else None)\n",
        "    max_iter_gdf['y'] = max_iter_gdf['geometry'].apply(lambda geom: geom.y if geom is not None else None)\n",
        "\n",
        "    # Remove rows with None coordinates\n",
        "    max_iter_gdf = max_iter_gdf.dropna(subset=['x', 'y'])\n",
        "\n",
        "    # Create the plot\n",
        "    fig, ax = plt.subplots(figsize=(12, 8))\n",
        "    scatter = ax.scatter(max_iter_gdf['x'], max_iter_gdf['y'], \n",
        "                         c=max_iter_gdf['cell_last_iteration'], \n",
        "                         cmap='viridis', \n",
        "                         s=1)\n",
        "\n",
        "    # Customize the plot\n",
        "    ax.set_title('Max Iterations per Cell')\n",
        "    ax.set_xlabel('X Coordinate')\n",
        "    ax.set_ylabel('Y Coordinate')\n",
        "    plt.colorbar(scatter, label='Max Iterations')\n",
        "\n",
        "    # Show the plot\n",
        "    plt.show()\n",
        "else:\n",
        "    print(\"generate_maps is set to False\")\n",
        "\n",
        "# Print the first few rows of the dataframe for verification\n",
        "print(\"\\nFirst few rows of the dataframe:\")\n",
        "max_iter_gdf[['mesh_name', 'cell_id', 'geometry']]\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 67,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Top 10 Cells with Highest Iteration Counts:\n",
            "         mesh_name  cell_id  cell_last_iteration     x_coord    y_coord\n",
            "17721  BaldEagleCr    17721                 2652  2007386.39  321546.77\n",
            "17752  BaldEagleCr    17752                  985  2005903.93  322873.01\n",
            "17621  BaldEagleCr    17621                  509  1968250.00  292000.00\n",
            "13520  BaldEagleCr    13520                  308  2007000.00  321250.00\n",
            "13039  BaldEagleCr    13039                  194  2006750.00  324250.00\n",
            "8749   BaldEagleCr     8749                  180  2028000.00  339000.00\n",
            "16970  BaldEagleCr    16970                  148  1973750.00  296500.00\n",
            "6415   BaldEagleCr     6415                  134  2054250.00  348500.00\n",
            "6188   BaldEagleCr     6188                  133  2040250.00  349000.00\n",
            "6692   BaldEagleCr     6692                  128  2041750.00  347500.00\n"
          ]
        }
      ],
      "source": [
        "# List top 10 points for Max Iteration per Cell\n",
        "# Sort the dataframe by cell_last_iteration in descending order\n",
        "top_iterations = max_iter_gdf.sort_values(by='cell_last_iteration', ascending=False).head(10)\n",
        "\n",
        "# Create a more informative display with coordinates\n",
        "print(\"\\nTop 10 Cells with Highest Iteration Counts:\")\n",
        "top_iterations_display = top_iterations.copy()\n",
        "top_iterations_display['x_coord'] = top_iterations_display['geometry'].apply(lambda geom: round(geom.x, 2))\n",
        "top_iterations_display['y_coord'] = top_iterations_display['geometry'].apply(lambda geom: round(geom.y, 2))\n",
        "\n",
        "# Display the results in a formatted table\n",
        "print(top_iterations_display[['mesh_name', 'cell_id', 'cell_last_iteration', 'x_coord', 'y_coord']])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 68,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:57 - ras_commander.HdfResultsMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:57 - ras_commander.HdfResultsMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:57 - ras_commander.HdfResultsMesh - INFO - Processing summary output for variable: Maximum Water Surface\n",
            "2025-04-09 07:49:57 - ras_commander.HdfMesh - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:57 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:57 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:57 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:57 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:57 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:57 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:57 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:57 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:57 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:57 - ras_commander.HdfResultsMesh - INFO - Processed 19597 rows of summary output data\n"
          ]
        }
      ],
      "source": [
        "# Get mesh maximum water surface elevation as Geodataframe\n",
        "max_ws_gdf = HdfResultsMesh.get_mesh_max_ws(plan_hdf_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 69,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": "[\"{'mesh_name': 'BaldEagleCr',\\n\", \" 'Max Time': np.float32(5.0),\\n\", \" 'Max Value': np.float32(848.2054),\\n\", \" 'Min Time': np.float32(0.99953705),\\n\", \" 'Min Value': np.float32(535.585),\\n\", \" 'Rows Variables': ['WSEL', 'Time'],\\n\", \" 'Units': ['ft', 'days']}\"]"
          },
          "execution_count": 69,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Check Dataframe Attributes (the HDF Attributes are also imported as Geoataframe Attributes)\n",
        "max_ws_gdf.attrs"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 70,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>mesh_name</th>\\n', '      <th>cell_id</th>\\n', '      <th>maximum_water_surface</th>\\n', '      <th>maximum_water_surface_time</th>\\n', '      <th>geometry</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>0</td>\\n', '      <td>704.054443</td>\\n', '      <td>2018-09-10 18:00:00</td>\\n', '      <td>POINT (2083000 370750)</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>1</td>\\n', '      <td>692.377991</td>\\n', '      <td>2018-09-10 18:04:00</td>\\n', '      <td>POINT (2083250 370750)</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>2</td>\\n', '      <td>671.183472</td>\\n', '      <td>2018-09-10 18:13:20</td>\\n', '      <td>POINT (2083500 370750)</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>3</td>\\n', '      <td>660.605469</td>\\n', '      <td>2018-09-10 18:54:40</td>\\n', '      <td>POINT (2083750 370750)</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>4</td>\\n', '      <td>660.586243</td>\\n', '      <td>2018-09-10 18:55:20</td>\\n', '      <td>POINT (2084000 370750)</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['         mesh_name  cell_id  maximum_water_surface maximum_water_surface_time  \\\\\\n', '0      BaldEagleCr        0             704.054443        2018-09-10 18:00:00   \\n', '1      BaldEagleCr        1             692.377991        2018-09-10 18:04:00   \\n', '2      BaldEagleCr        2             671.183472        2018-09-10 18:13:20   \\n', '3      BaldEagleCr        3             660.605469        2018-09-10 18:54:40   \\n', '4      BaldEagleCr        4             660.586243        2018-09-10 18:55:20   \\n', '...            ...      ...                    ...                        ...   \\n', '19592  BaldEagleCr    19592               0.000000        2018-09-09 00:00:00   \\n', '19593  BaldEagleCr    19593               0.000000        2018-09-09 00:00:00   \\n', '19594  BaldEagleCr    19594               0.000000        2018-09-09 00:00:00   \\n', '19595  BaldEagleCr    19595               0.000000        2018-09-09 00:00:00   \\n', '19596  BaldEagleCr    19596               0.000000        2018-09-09 00:00:00   \\n', '\\n', '                             geometry  \\n', '0              POINT (2083000 370750)  \\n', '1              POINT (2083250 370750)  \\n', '2              POINT (2083500 370750)  \\n', '3              POINT (2083750 370750)  \\n', '4              POINT (2084000 370750)  \\n', '...                               ...  \\n', '19592  POINT (1978423.032 300718.897)  \\n', '19593  POINT (1973389.375 297311.928)  \\n', '19594   POINT (1968834.79 295808.861)  \\n', '19595  POINT (1966130.942 291879.395)  \\n', '19596   POINT (1969660.046 289673.23)  \\n', '\\n', '[19597 rows x 5 columns]']"
          },
          "execution_count": 70,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "max_ws_gdf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 71,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Plot the max water surface as a map\n",
        "if generate_maps:\n",
        "    # Extract x and y coordinates from the geometry column\n",
        "    max_ws_gdf['x'] = max_ws_gdf['geometry'].apply(lambda geom: geom.x if geom is not None else None)\n",
        "    max_ws_gdf['y'] = max_ws_gdf['geometry'].apply(lambda geom: geom.y if geom is not None else None)\n",
        "\n",
        "    # Remove rows with None coordinates\n",
        "    max_ws_gdf = max_ws_gdf.dropna(subset=['x', 'y'])\n",
        "\n",
        "    # Create the plot\n",
        "    fig, ax = plt.subplots(figsize=(12, 8))\n",
        "    scatter = ax.scatter(max_ws_gdf['x'], max_ws_gdf['y'], \n",
        "                         c=max_ws_gdf['maximum_water_surface'], \n",
        "                         cmap='viridis', \n",
        "                         s=10)\n",
        "\n",
        "    # Customize the plot\n",
        "    ax.set_title('Max Water Surface per Cell')\n",
        "    ax.set_xlabel('X Coordinate')\n",
        "    ax.set_ylabel('Y Coordinate')\n",
        "    plt.colorbar(scatter, label='Max Water Surface (ft)')\n",
        "\n",
        "    # Add grid lines\n",
        "    ax.grid(True, linestyle='--', alpha=0.7)\n",
        "\n",
        "    # Increase font size for better readability\n",
        "    plt.rcParams.update({'font.size': 12})\n",
        "\n",
        "    # Adjust layout to prevent cutting off labels\n",
        "    plt.tight_layout()\n",
        "\n",
        "    # Show the plot\n",
        "    plt.show()\n",
        "else:\n",
        "    print(\"generate_maps is set to False\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 72,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Overall Maximum WSEL: 848.21 ft\n",
            "Time of Overall Maximum WSEL: 2018-09-10 17:00:00\n",
            "Hours since simulation start: 41.00 hours\n",
            "Location of Overall Maximum WSEL: X=1968500.0, Y=295000.0\n"
          ]
        }
      ],
      "source": [
        "# Plot the time of the max water surface elevation (WSEL)\n",
        "if generate_maps:\n",
        "    import matplotlib.dates as mdates\n",
        "    from datetime import datetime\n",
        "\n",
        "    # Convert the 'maximum_water_surface_time' to datetime objects\n",
        "    max_ws_gdf['max_wsel_time'] = pd.to_datetime(max_ws_gdf['maximum_water_surface_time'])\n",
        "\n",
        "    # Create the plot\n",
        "    fig, ax = plt.subplots(figsize=(12, 8))\n",
        "\n",
        "    # Convert datetime to hours since the start for colormap\n",
        "    min_time = max_ws_gdf['max_wsel_time'].min()\n",
        "    color_values = (max_ws_gdf['max_wsel_time'] - min_time).dt.total_seconds() / 3600  # Convert to hours\n",
        "\n",
        "    scatter = ax.scatter(max_ws_gdf['x'], max_ws_gdf['y'], \n",
        "                        c=color_values, \n",
        "                        cmap='viridis', \n",
        "                        s=10)\n",
        "\n",
        "    # Customize the plot\n",
        "    ax.set_title('Time of Maximum Water Surface Elevation per Cell')\n",
        "    ax.set_xlabel('X Coordinate')\n",
        "    ax.set_ylabel('Y Coordinate')\n",
        "\n",
        "    # Set up the colorbar\n",
        "    cbar = plt.colorbar(scatter)\n",
        "    cbar.set_label('Hours since simulation start')\n",
        "\n",
        "    # Format the colorbar ticks to show hours\n",
        "    cbar.set_ticks(range(0, int(color_values.max()) + 1, 6))  # Set ticks every 6 hours\n",
        "    cbar.set_ticklabels([f'{h}h' for h in range(0, int(color_values.max()) + 1, 6)])\n",
        "\n",
        "    # Add grid lines\n",
        "    ax.grid(True, linestyle='--', alpha=0.7)\n",
        "\n",
        "    # Increase font size for better readability\n",
        "    plt.rcParams.update({'font.size': 12})\n",
        "\n",
        "    # Adjust layout to prevent cutting off labels\n",
        "    plt.tight_layout()\n",
        "\n",
        "    # Show the plot\n",
        "    plt.show()\n",
        "\n",
        "    # Find the overall maximum WSEL and its time\n",
        "    max_wsel_row = max_ws_gdf.loc[max_ws_gdf['maximum_water_surface'].idxmax()]\n",
        "    hours_since_start = (max_wsel_row['max_wsel_time'] - min_time).total_seconds() / 3600\n",
        "    print(f\"\\nOverall Maximum WSEL: {max_wsel_row['maximum_water_surface']:.2f} ft\")\n",
        "    print(f\"Time of Overall Maximum WSEL: {max_wsel_row['max_wsel_time']}\")\n",
        "    print(f\"Hours since simulation start: {hours_since_start:.2f} hours\")\n",
        "    print(f\"Location of Overall Maximum WSEL: X={max_wsel_row['x']}, Y={max_wsel_row['y']}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 73,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:58 - ras_commander.HdfResultsMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:58 - ras_commander.HdfResultsMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:58 - ras_commander.HdfResultsMesh - INFO - Processing summary output for variable: Minimum Water Surface\n",
            "2025-04-09 07:49:58 - ras_commander.HdfMesh - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:58 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:58 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:58 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:59 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:59 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:59 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:59 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:59 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:59 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:59 - ras_commander.HdfResultsMesh - INFO - Processed 19597 rows of summary output data\n"
          ]
        }
      ],
      "source": [
        "# Get mesh minimum water surface elevation as geodataframe\n",
        "min_ws_gdf = HdfResultsMesh.get_mesh_min_ws(plan_hdf_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 74,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>mesh_name</th>\\n', '      <th>cell_id</th>\\n', '      <th>minimum_water_surface</th>\\n', '      <th>minimum_water_surface_time</th>\\n', '      <th>geometry</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>0</td>\\n', '      <td>701.151245</td>\\n', '      <td>2018-09-09 00:00:20</td>\\n', '      <td>POINT (2083000 370750)</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>1</td>\\n', '      <td>689.052246</td>\\n', '      <td>2018-09-09 00:00:20</td>\\n', '      <td>POINT (2083250 370750)</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>2</td>\\n', '      <td>669.774719</td>\\n', '      <td>2018-09-09 00:00:20</td>\\n', '      <td>POINT (2083500 370750)</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>3</td>\\n', '      <td>658.986938</td>\\n', '      <td>2018-09-09 00:00:20</td>\\n', '      <td>POINT (2083750 370750)</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>4</td>\\n', '      <td>658.720581</td>\\n', '      <td>2018-09-09 00:00:20</td>\\n', '      <td>POINT (2084000 370750)</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['         mesh_name  cell_id  minimum_water_surface minimum_water_surface_time  \\\\\\n', '0      BaldEagleCr        0             701.151245        2018-09-09 00:00:20   \\n', '1      BaldEagleCr        1             689.052246        2018-09-09 00:00:20   \\n', '2      BaldEagleCr        2             669.774719        2018-09-09 00:00:20   \\n', '3      BaldEagleCr        3             658.986938        2018-09-09 00:00:20   \\n', '4      BaldEagleCr        4             658.720581        2018-09-09 00:00:20   \\n', '...            ...      ...                    ...                        ...   \\n', '19592  BaldEagleCr    19592               0.000000        2018-09-09 00:00:00   \\n', '19593  BaldEagleCr    19593               0.000000        2018-09-09 00:00:00   \\n', '19594  BaldEagleCr    19594               0.000000        2018-09-09 00:00:00   \\n', '19595  BaldEagleCr    19595               0.000000        2018-09-09 00:00:00   \\n', '19596  BaldEagleCr    19596               0.000000        2018-09-09 00:00:00   \\n', '\\n', '                             geometry  \\n', '0              POINT (2083000 370750)  \\n', '1              POINT (2083250 370750)  \\n', '2              POINT (2083500 370750)  \\n', '3              POINT (2083750 370750)  \\n', '4              POINT (2084000 370750)  \\n', '...                               ...  \\n', '19592  POINT (1978423.032 300718.897)  \\n', '19593  POINT (1973389.375 297311.928)  \\n', '19594   POINT (1968834.79 295808.861)  \\n', '19595  POINT (1966130.942 291879.395)  \\n', '19596   POINT (1969660.046 289673.23)  \\n', '\\n', '[19597 rows x 5 columns]']"
          },
          "execution_count": 74,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "min_ws_gdf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 75,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:49:59 - ras_commander.HdfResultsMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:59 - ras_commander.HdfResultsMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:59 - ras_commander.HdfResultsMesh - INFO - Processing summary output for variable: Maximum Face Velocity\n",
            "2025-04-09 07:49:59 - ras_commander.HdfMesh - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:59 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:59 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:49:59 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:00 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:00 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:00 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:00 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:00 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:00 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:00 - ras_commander.HdfResultsMesh - INFO - Processed 37594 rows of summary output data\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Mesh Max Face Velocity:\n"
          ]
        }
      ],
      "source": [
        "# Get mesh maximum face velocity as geodataframe\n",
        "max_face_v_gdf = HdfResultsMesh.get_mesh_max_face_v(plan_hdf_path)\n",
        "print(\"\\nMesh Max Face Velocity:\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 76,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>mesh_name</th>\\n', '      <th>face_id</th>\\n', '      <th>maximum_face_velocity</th>\\n', '      <th>maximum_face_velocity_time</th>\\n', '      <th>geometry</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>0</td>\\n', '      <td>0.451430</td>\\n', '      <td>2018-09-10 18:00:00</td>\\n', '      <td>LINESTRING (2042125 351625, 2042375 351625)</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>1</td>\\n', '      <td>-0.887190</td>\\n', '      <td>2018-09-10 18:00:40</td>\\n', '      <td>LINESTRING (2042375 351625, 2042375 351875)</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>2</td>\\n', '      <td>-0.498561</td>\\n', '      <td>2018-09-10 18:00:40</td>\\n', '      <td>LINESTRING (2042375 351875, 2042125 351875)</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>3</td>\\n', '      <td>-0.304673</td>\\n', '      <td>2018-09-10 18:00:40</td>\\n', '      <td>LINESTRING (2042125 351875, 2042125 351625)</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>4</td>\\n', '      <td>-0.762405</td>\\n', '      <td>2018-09-10 10:00:40</td>\\n', '      <td>LINESTRING (2042375 351375, 2042375 351625)</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['         mesh_name  face_id  maximum_face_velocity maximum_face_velocity_time  \\\\\\n', '0      BaldEagleCr        0               0.451430        2018-09-10 18:00:00   \\n', '1      BaldEagleCr        1              -0.887190        2018-09-10 18:00:40   \\n', '2      BaldEagleCr        2              -0.498561        2018-09-10 18:00:40   \\n', '3      BaldEagleCr        3              -0.304673        2018-09-10 18:00:40   \\n', '4      BaldEagleCr        4              -0.762405        2018-09-10 10:00:40   \\n', '...            ...      ...                    ...                        ...   \\n', '37589  BaldEagleCr    37589               0.000000        2018-09-09 00:00:00   \\n', '37590  BaldEagleCr    37590               0.000000        2018-09-09 00:00:00   \\n', '37591  BaldEagleCr    37591               0.000000        2018-09-09 00:00:00   \\n', '37592  BaldEagleCr    37592               0.000000        2018-09-09 00:00:00   \\n', '37593  BaldEagleCr    37593               0.000000        2018-09-09 00:00:00   \\n', '\\n', '                                                geometry  \\n', '0            LINESTRING (2042125 351625, 2042375 351625)  \\n', '1            LINESTRING (2042375 351625, 2042375 351875)  \\n', '2            LINESTRING (2042375 351875, 2042125 351875)  \\n', '3            LINESTRING (2042125 351875, 2042125 351625)  \\n', '4            LINESTRING (2042375 351375, 2042375 351625)  \\n', '...                                                  ...  \\n', '37589  LINESTRING (1978444.054 300812.794, 1978402.01...  \\n', '37590  LINESTRING (1973531.76 297370.846, 1973246.989...  \\n', '37591  LINESTRING (1968886.801 295900.5, 1968782.778 ...  \\n', '37592  LINESTRING (1965981.775 291978.68, 1966280.11 ...  \\n', '37593  LINESTRING (1969588.438 289578.114, 1969731.65...  \\n', '\\n', '[37594 rows x 5 columns]']"
          },
          "execution_count": 76,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "max_face_v_gdf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 77,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Extract midpoint coordinates from the LineString geometries\n",
        "max_face_v_gdf['x'] = max_face_v_gdf['geometry'].apply(lambda geom: geom.centroid.x)\n",
        "max_face_v_gdf['y'] = max_face_v_gdf['geometry'].apply(lambda geom: geom.centroid.y)\n",
        "\n",
        "# Create the plot\n",
        "fig, ax = plt.subplots(figsize=(12, 8))\n",
        "scatter = ax.scatter(max_face_v_gdf['x'], max_face_v_gdf['y'], \n",
        "                    c=max_face_v_gdf['maximum_face_velocity'].abs(),\n",
        "                    cmap='viridis',\n",
        "                    s=10)\n",
        "\n",
        "# Customize the plot\n",
        "ax.set_title('Max Face Velocity per Face')\n",
        "ax.set_xlabel('X Coordinate') \n",
        "ax.set_ylabel('Y Coordinate')\n",
        "plt.colorbar(scatter, label='Max Face Velocity (ft/s)')\n",
        "\n",
        "# Add grid lines\n",
        "ax.grid(True, linestyle='--', alpha=0.7)\n",
        "\n",
        "# Increase font size for better readability\n",
        "plt.rcParams.update({'font.size': 12})\n",
        "\n",
        "# Adjust layout to prevent cutting off labels\n",
        "plt.tight_layout()\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 78,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:50:01 - ras_commander.HdfResultsMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:01 - ras_commander.HdfResultsMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:01 - ras_commander.HdfResultsMesh - INFO - Processing summary output for variable: Minimum Face Velocity\n",
            "2025-04-09 07:50:01 - ras_commander.HdfMesh - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:01 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:01 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:01 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:02 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:02 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:02 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:02 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:02 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:02 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:02 - ras_commander.HdfResultsMesh - INFO - Processed 37594 rows of summary output data\n"
          ]
        }
      ],
      "source": [
        "# Get mesh minimum face velocity as geodataframe\n",
        "min_face_v_gdf = HdfResultsMesh.get_mesh_min_face_v(plan_hdf_path)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 79,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Mesh Min Face Velocity:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>mesh_name</th>\\n', '      <th>face_id</th>\\n', '      <th>minimum_face_velocity</th>\\n', '      <th>minimum_face_velocity_time</th>\\n', '      <th>geometry</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>0</td>\\n', '      <td>0.0</td>\\n', '      <td>2018-09-09 00:00:20</td>\\n', '      <td>LINESTRING (2042125 351625, 2042375 351625)</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>1</td>\\n', '      <td>0.0</td>\\n', '      <td>2018-09-09 00:00:20</td>\\n', '      <td>LINESTRING (2042375 351625, 2042375 351875)</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>2</td>\\n', '      <td>0.0</td>\\n', '      <td>2018-09-09 00:00:20</td>\\n', '      <td>LINESTRING (2042375 351875, 2042125 351875)</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>3</td>\\n', '      <td>0.0</td>\\n', '      <td>2018-09-09 00:00:20</td>\\n', '      <td>LINESTRING (2042125 351875, 2042125 351625)</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>4</td>\\n', '      <td>0.0</td>\\n', '      <td>2018-09-09 00:00:20</td>\\n', '      <td>LINESTRING (2042375 351375, 2042375 351625)</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['         mesh_name  face_id  minimum_face_velocity minimum_face_velocity_time  \\\\\\n', '0      BaldEagleCr        0                    0.0        2018-09-09 00:00:20   \\n', '1      BaldEagleCr        1                    0.0        2018-09-09 00:00:20   \\n', '2      BaldEagleCr        2                    0.0        2018-09-09 00:00:20   \\n', '3      BaldEagleCr        3                    0.0        2018-09-09 00:00:20   \\n', '4      BaldEagleCr        4                    0.0        2018-09-09 00:00:20   \\n', '...            ...      ...                    ...                        ...   \\n', '37589  BaldEagleCr    37589                    0.0        2018-09-09 00:00:20   \\n', '37590  BaldEagleCr    37590                    0.0        2018-09-09 00:00:20   \\n', '37591  BaldEagleCr    37591                    0.0        2018-09-09 00:00:20   \\n', '37592  BaldEagleCr    37592                    0.0        2018-09-09 00:00:20   \\n', '37593  BaldEagleCr    37593                    0.0        2018-09-09 00:00:20   \\n', '\\n', '                                                geometry  \\n', '0            LINESTRING (2042125 351625, 2042375 351625)  \\n', '1            LINESTRING (2042375 351625, 2042375 351875)  \\n', '2            LINESTRING (2042375 351875, 2042125 351875)  \\n', '3            LINESTRING (2042125 351875, 2042125 351625)  \\n', '4            LINESTRING (2042375 351375, 2042375 351625)  \\n', '...                                                  ...  \\n', '37589  LINESTRING (1978444.054 300812.794, 1978402.01...  \\n', '37590  LINESTRING (1973531.76 297370.846, 1973246.989...  \\n', '37591  LINESTRING (1968886.801 295900.5, 1968782.778 ...  \\n', '37592  LINESTRING (1965981.775 291978.68, 1966280.11 ...  \\n', '37593  LINESTRING (1969588.438 289578.114, 1969731.65...  \\n', '\\n', '[37594 rows x 5 columns]']"
          },
          "execution_count": 79,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nMesh Min Face Velocity:\")\n",
        "min_face_v_gdf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 80,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:50:02 - ras_commander.HdfResultsMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:02 - ras_commander.HdfResultsMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:02 - ras_commander.HdfResultsMesh - INFO - Processing summary output for variable: Cell Maximum Water Surface Error\n",
            "2025-04-09 07:50:02 - ras_commander.HdfMesh - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:02 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:02 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:02 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:02 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:02 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:02 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:03 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:03 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:03 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:03 - ras_commander.HdfResultsMesh - INFO - Processed 19597 rows of summary output data\n"
          ]
        }
      ],
      "source": [
        "# Get mesh max water surface error as geodataframe\n",
        "\n",
        "max_ws_err_gdf = HdfResultsMesh.get_mesh_max_ws_err(plan_hdf_path)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 81,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Mesh Max Water Surface Error:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>mesh_name</th>\\n', '      <th>cell_id</th>\\n', '      <th>cell_maximum_water_surface_error</th>\\n', '      <th>cell_maximum_water_surface_error_time</th>\\n', '      <th>geometry</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>0</td>\\n', '      <td>0.000206</td>\\n', '      <td>2018-09-11 20:50:00</td>\\n', '      <td>POINT (2083000 370750)</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>1</td>\\n', '      <td>0.001100</td>\\n', '      <td>2018-09-10 21:38:00</td>\\n', '      <td>POINT (2083250 370750)</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>2</td>\\n', '      <td>0.000795</td>\\n', '      <td>2018-09-10 09:58:40</td>\\n', '      <td>POINT (2083500 370750)</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>3</td>\\n', '      <td>0.000314</td>\\n', '      <td>2018-09-10 17:00:40</td>\\n', '      <td>POINT (2083750 370750)</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>4</td>\\n', '      <td>0.001795</td>\\n', '      <td>2018-09-10 09:28:00</td>\\n', '      <td>POINT (2084000 370750)</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['         mesh_name  cell_id  cell_maximum_water_surface_error  \\\\\\n', '0      BaldEagleCr        0                          0.000206   \\n', '1      BaldEagleCr        1                          0.001100   \\n', '2      BaldEagleCr        2                          0.000795   \\n', '3      BaldEagleCr        3                          0.000314   \\n', '4      BaldEagleCr        4                          0.001795   \\n', '...            ...      ...                               ...   \\n', '19592  BaldEagleCr    19592                          0.000000   \\n', '19593  BaldEagleCr    19593                          0.000000   \\n', '19594  BaldEagleCr    19594                          0.000000   \\n', '19595  BaldEagleCr    19595                          0.000000   \\n', '19596  BaldEagleCr    19596                          0.000000   \\n', '\\n', '      cell_maximum_water_surface_error_time                        geometry  \\n', '0                       2018-09-11 20:50:00          POINT (2083000 370750)  \\n', '1                       2018-09-10 21:38:00          POINT (2083250 370750)  \\n', '2                       2018-09-10 09:58:40          POINT (2083500 370750)  \\n', '3                       2018-09-10 17:00:40          POINT (2083750 370750)  \\n', '4                       2018-09-10 09:28:00          POINT (2084000 370750)  \\n', '...                                     ...                             ...  \\n', '19592                   2018-09-09 00:00:00  POINT (1978423.032 300718.897)  \\n', '19593                   2018-09-09 00:00:00  POINT (1973389.375 297311.928)  \\n', '19594                   2018-09-09 00:00:00   POINT (1968834.79 295808.861)  \\n', '19595                   2018-09-09 00:00:00  POINT (1966130.942 291879.395)  \\n', '19596                   2018-09-09 00:00:00   POINT (1969660.046 289673.23)  \\n', '\\n', '[19597 rows x 5 columns]']"
          },
          "execution_count": 81,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nMesh Max Water Surface Error:\")\n",
        "max_ws_err_gdf\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 82,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Plot max water surface error\n",
        "\n",
        "if generate_maps:\n",
        "# Extract x and y coordinates from the geometry points, handling None values\n",
        "    max_ws_err_gdf['x'] = max_ws_err_gdf['geometry'].apply(lambda geom: geom.x if geom is not None else None)\n",
        "    max_ws_err_gdf['y'] = max_ws_err_gdf['geometry'].apply(lambda geom: geom.y if geom is not None else None)\n",
        "\n",
        "    # Remove any rows with None coordinates\n",
        "    max_ws_err_gdf = max_ws_err_gdf.dropna(subset=['x', 'y'])\n",
        "\n",
        "    # Create the plot\n",
        "    fig, ax = plt.subplots(figsize=(12, 8))\n",
        "    scatter = ax.scatter(max_ws_err_gdf['x'], max_ws_err_gdf['y'],\n",
        "                        c=max_ws_err_gdf['cell_maximum_water_surface_error'],\n",
        "                        cmap='viridis',\n",
        "                        s=10)\n",
        "\n",
        "    # Customize the plot\n",
        "    ax.set_title('Max Water Surface Error per Cell')\n",
        "    ax.set_xlabel('X Coordinate')\n",
        "    ax.set_ylabel('Y Coordinate')\n",
        "    plt.colorbar(scatter, label='Max Water Surface Error (ft)')\n",
        "\n",
        "    # Add grid lines\n",
        "    ax.grid(True, linestyle='--', alpha=0.7)\n",
        "\n",
        "    # Increase font size for better readability\n",
        "    plt.rcParams.update({'font.size': 12})\n",
        "\n",
        "    # Adjust layout to prevent cutting off labels\n",
        "    plt.tight_layout()\n",
        "\n",
        "    # Show the plot\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 83,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Sort Dataframe to show top 10 maximum water surface errors:\n",
        "max_ws_err_gdf_sorted = max_ws_err_gdf.sort_values(by='cell_maximum_water_surface_error', ascending=False)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 84,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Top 10 maximum water surface errors:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>mesh_name</th>\\n', '      <th>cell_id</th>\\n', '      <th>cell_maximum_water_surface_error</th>\\n', '      <th>cell_maximum_water_surface_error_time</th>\\n', '      <th>geometry</th>\\n', '      <th>x</th>\\n', '      <th>y</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>1709</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>1709</td>\\n', '      <td>0.009991</td>\\n', '      <td>2018-09-10 09:06:40</td>\\n', '      <td>POINT (2077250 362750)</td>\\n', '      <td>2.077250e+06</td>\\n', '      <td>362750.000000</td>\\n', '    </tr><tr>\\n', '      <th>12789</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>12789</td>\\n', '      <td>0.009980</td>\\n', '      <td>2018-09-12 07:43:20</td>\\n', '      <td>POINT (2008250 325500)</td>\\n', '      <td>2.008250e+06</td>\\n', '      <td>325500.000000</td>\\n', '    </tr><tr>\\n', '      <th>5967</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>5967</td>\\n', '      <td>0.009940</td>\\n', '      <td>2018-09-12 21:01:20</td>\\n', '      <td>POINT (2055000 349750)</td>\\n', '      <td>2.055000e+06</td>\\n', '      <td>349750.000000</td>\\n', '    </tr><tr>\\n', '      <th>13627</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>13627</td>\\n', '      <td>0.009938</td>\\n', '      <td>2018-09-11 23:23:20</td>\\n', '      <td>POINT (2004250 320500)</td>\\n', '      <td>2.004250e+06</td>\\n', '      <td>320500.000000</td>\\n', '    </tr><tr>\\n', '      <th>1882</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>1882</td>\\n', '      <td>0.009926</td>\\n', '      <td>2018-09-10 10:25:20</td>\\n', '      <td>POINT (2070000 362000)</td>\\n', '      <td>2.070000e+06</td>\\n', '      <td>362000.000000</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['         mesh_name  cell_id  cell_maximum_water_surface_error  \\\\\\n', '1709   BaldEagleCr     1709                          0.009991   \\n', '12789  BaldEagleCr    12789                          0.009980   \\n', '5967   BaldEagleCr     5967                          0.009940   \\n', '13627  BaldEagleCr    13627                          0.009938   \\n', '1882   BaldEagleCr     1882                          0.009926   \\n', '...            ...      ...                               ...   \\n', '19489  BaldEagleCr    19489                          0.000000   \\n', '19488  BaldEagleCr    19488                          0.000000   \\n', '19487  BaldEagleCr    19487                          0.000000   \\n', '19486  BaldEagleCr    19486                          0.000000   \\n', '19568  BaldEagleCr    19568                          0.000000   \\n', '\\n', '      cell_maximum_water_surface_error_time                        geometry  \\\\\\n', '1709                    2018-09-10 09:06:40          POINT (207725\n...\n[Output truncated, 2400 characters total]"
          },
          "execution_count": 84,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nTop 10 maximum water surface errors:\")\n",
        "max_ws_err_gdf_sorted"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 85,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:50:03 - ras_commander.HdfResultsMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:03 - ras_commander.HdfResultsMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:03 - ras_commander.HdfResultsMesh - INFO - Processing summary output for variable: Maximum Face Courant\n",
            "2025-04-09 07:50:03 - ras_commander.HdfMesh - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:03 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:03 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:03 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:04 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:04 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:04 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:04 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:04 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:04 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:04 - ras_commander.HdfResultsMesh - INFO - Processed 37594 rows of summary output data\n"
          ]
        }
      ],
      "source": [
        "# Get mesh summary output for other Datasets (here we retrieve Maximum Face Courant) as geodataframe\n",
        "max_courant_gdf = HdfResultsMesh.get_mesh_summary(plan_hdf_path, var=\"Maximum Face Courant\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 86,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Mesh Summary Output (Maximum Courant):\n"
          ]
        },
        {
          "data": {
            "text/plain": "[\"{'mesh_name': 'BaldEagleCr',\\n\", \" 'Can Interpolate': 'False',\\n\", \" 'Can Plot': 'True',\\n\", \" 'Coverage': 'Average',\\n\", \" 'Location': 'Faces',\\n\", \" 'Maximum Value of Data Set': np.float32(0.6819884),\\n\", \" 'Minimum Value of Data Set': np.float32(0.0),\\n\", \" 'Name': 'Face Courant Maximum',\\n\", \" 'Orientation': 'Scalar',\\n\", \" 'Row': np.int32(0),\\n\", \" 'Rows Variables': ['Courant Face', 'Time'],\\n\", \" 'Units': 'vel*dt/length',\\n\", \" 'Units per row': ['vel*dt/length', 'days']}\"]"
          },
          "execution_count": 86,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nMesh Summary Output (Maximum Courant):\")\n",
        "max_courant_gdf.attrs"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 87,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>mesh_name</th>\\n', '      <th>face_id</th>\\n', '      <th>maximum_face_courant</th>\\n', '      <th>maximum_face_courant_time</th>\\n', '      <th>geometry</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>0</td>\\n', '      <td>0.000020</td>\\n', '      <td>2018-09-09 11:03:20</td>\\n', '      <td>LINESTRING (2042125 351625, 2042375 351625)</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>1</td>\\n', '      <td>0.000062</td>\\n', '      <td>2018-09-09 11:32:40</td>\\n', '      <td>LINESTRING (2042375 351625, 2042375 351875)</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>2</td>\\n', '      <td>0.000048</td>\\n', '      <td>2018-09-10 07:02:40</td>\\n', '      <td>LINESTRING (2042375 351875, 2042125 351875)</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>3</td>\\n', '      <td>0.000016</td>\\n', '      <td>2018-09-09 11:03:20</td>\\n', '      <td>LINESTRING (2042125 351875, 2042125 351625)</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>4</td>\\n', '      <td>0.000062</td>\\n', '      <td>2018-09-09 11:05:20</td>\\n', '      <td>LINESTRING (2042375 351375, 2042375 351625)</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['         mesh_name  face_id  maximum_face_courant maximum_face_courant_time  \\\\\\n', '0      BaldEagleCr        0              0.000020       2018-09-09 11:03:20   \\n', '1      BaldEagleCr        1              0.000062       2018-09-09 11:32:40   \\n', '2      BaldEagleCr        2              0.000048       2018-09-10 07:02:40   \\n', '3      BaldEagleCr        3              0.000016       2018-09-09 11:03:20   \\n', '4      BaldEagleCr        4              0.000062       2018-09-09 11:05:20   \\n', '...            ...      ...                   ...                       ...   \\n', '37589  BaldEagleCr    37589              0.000000       2018-09-09 00:00:00   \\n', '37590  BaldEagleCr    37590              0.000000       2018-09-09 00:00:00   \\n', '37591  BaldEagleCr    37591              0.000000       2018-09-09 00:00:00   \\n', '37592  BaldEagleCr    37592              0.000000       2018-09-09 00:00:00   \\n', '37593  BaldEagleCr    37593              0.000000       2018-09-09 00:00:00   \\n', '\\n', '                                                geometry  \\n', '0            LINESTRING (2042125 351625, 2042375 351625)  \\n', '1            LINESTRING (2042375 351625, 2042375 351875)  \\n', '2            LINESTRING (2042375 351875, 2042125 351875)  \\n', '3            LINESTRING (2042125 351875, 2042125 351625)  \\n', '4            LINESTRING (2042375 351375, 2042375 351625)  \\n', '...                                                  ...  \\n', '37589  LINESTRING (1978444.054 300812.794, 1978402.01...  \\n', '37590  LINESTRING (1973531.76 297370.846, 1973246.989...  \\n', '37591  LINESTRING (1968886.801 295900.5, 1968782.778 ...  \\n', '37592  LINESTRING (1965981.775 291978.68, 1966280.11 ...  \\n', '37593  LINESTRING (1969588.438 289578.114, 1969731.65...  \\n', '\\n', '[37594 rows x 5 columns]']"
          },
          "execution_count": 87,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "max_courant_gdf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 88,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "First few rows of the Courant number dataframe:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>mesh_name</th>\\n', '      <th>face_id</th>\\n', '      <th>maximum_face_courant</th>\\n', '      <th>maximum_face_courant_time</th>\\n', '      <th>geometry</th>\\n', '      <th>centroid</th>\\n', '      <th>x</th>\\n', '      <th>y</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>0</td>\\n', '      <td>0.000020</td>\\n', '      <td>2018-09-09 11:03:20</td>\\n', '      <td>LINESTRING (2042125 351625, 2042375 351625)</td>\\n', '      <td>POINT (2042250 351625)</td>\\n', '      <td>2.042250e+06</td>\\n', '      <td>351625.000000</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>1</td>\\n', '      <td>0.000062</td>\\n', '      <td>2018-09-09 11:32:40</td>\\n', '      <td>LINESTRING (2042375 351625, 2042375 351875)</td>\\n', '      <td>POINT (2042375 351750)</td>\\n', '      <td>2.042375e+06</td>\\n', '      <td>351750.000000</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>2</td>\\n', '      <td>0.000048</td>\\n', '      <td>2018-09-10 07:02:40</td>\\n', '      <td>LINESTRING (2042375 351875, 2042125 351875)</td>\\n', '      <td>POINT (2042250 351875)</td>\\n', '      <td>2.042250e+06</td>\\n', '      <td>351875.000000</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>3</td>\\n', '      <td>0.000016</td>\\n', '      <td>2018-09-09 11:03:20</td>\\n', '      <td>LINESTRING (2042125 351875, 2042125 351625)</td>\\n', '      <td>POINT (2042125 351750)</td>\\n', '      <td>2.042125e+06</td>\\n', '      <td>351750.000000</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>4</td>\\n', '      <td>0.000062</td>\\n', '      <td>2018-09-09 11:05:20</td>\\n', '      <td>LINESTRING (2042375 351375, 2042375 351625)</td>\\n', '      <td>POINT (2042375 351500)</td>\\n', '      <td>2.042375e+06</td>\\n', '      <td>351500.000000</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['         mesh_name  face_id  maximum_face_courant maximum_face_courant_time  \\\\\\n', '0      BaldEagleCr        0              0.000020       2018-09-09 11:03:20   \\n', '1      BaldEagleCr        1              0.000062       2018-09-09 11:32:40   \\n', '2      BaldEagleCr        2              0.000048       2018-09-10 07:02:40   \\n', '3      BaldEagleCr        3              0.000016       2018-09-09 11:03:20   \\n', '4      BaldEagleCr        4              0.000062       2018-09-09 11:05:20   \\n', '...            ...      ...                   ...                       ...   \\n', '37589  BaldEagleCr    37589              0.000000       2018-09-09 00:00:00   \\n', '37590  BaldEagleCr    37590              0.000000       2018-09-09 00:00:00   \\n', '37591  BaldEagleCr    37591              0.000000       2018-09-09 00:00:00   \\n', '37592  BaldEagleCr    37592              0.000000       2018-09-09 00:00:00   \\n', '37593  BaldEagleCr    37593              0.000000       2018-09-09 00:00:\n...\n[Output truncated, 2724 characters total]"
          },
          "execution_count": 88,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Plot max Courant number\n",
        "\n",
        "# Convert to GeoDataFrame if not empty\n",
        "if not max_courant_gdf.empty:\n",
        "    if generate_maps:\n",
        "        # Get centroids of line geometries for plotting\n",
        "        max_courant_gdf['centroid'] = max_courant_gdf.geometry.centroid\n",
        "        max_courant_gdf['x'] = max_courant_gdf.centroid.x\n",
        "        max_courant_gdf['y'] = max_courant_gdf.centroid.y\n",
        "\n",
        "        # Create the plot\n",
        "        fig, ax = plt.subplots(figsize=(12, 8))\n",
        "        scatter = ax.scatter(max_courant_gdf['x'], max_courant_gdf['y'],\n",
        "                        c=max_courant_gdf['maximum_face_courant'],\n",
        "                        cmap='viridis',\n",
        "                        s=10)\n",
        "\n",
        "        # Customize the plot\n",
        "        ax.set_title('Max Courant Number per Face')\n",
        "        ax.set_xlabel('X Coordinate')\n",
        "        ax.set_ylabel('Y Coordinate')\n",
        "        plt.colorbar(scatter, label='Max Courant Number')\n",
        "\n",
        "        # Add grid lines\n",
        "        ax.grid(True, linestyle='--', alpha=0.7)\n",
        "\n",
        "        # Increase font size for better readability\n",
        "        plt.rcParams.update({'font.size': 12})\n",
        "\n",
        "        # Adjust layout to prevent cutting off labels\n",
        "        plt.tight_layout()\n",
        "\n",
        "        # Show the plot\n",
        "        plt.show()\n",
        "\n",
        "# Print the first few rows of the dataframe for verification\n",
        "print(\"\\nFirst few rows of the Courant number dataframe:\")\n",
        "max_courant_gdf\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 89,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:50:05 - ras_commander.HdfResultsMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:05 - ras_commander.HdfResultsMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:05 - ras_commander.HdfResultsMesh - INFO - Processing summary output for variable: Maximum Face Shear Stress\n",
            "2025-04-09 07:50:05 - ras_commander.HdfMesh - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:05 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:05 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:05 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:06 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:06 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:06 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:06 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:06 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:06 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:06 - ras_commander.HdfResultsMesh - INFO - Processed 37594 rows of summary output data\n"
          ]
        }
      ],
      "source": [
        "# Get mesh summary output for other Datasets (here we retrieve Maximum Face Courant)\n",
        "\n",
        "max_face_shear_gdf = HdfResultsMesh.get_mesh_summary(plan_hdf_path, var=\"Maximum Face Shear Stress\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 90,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Mesh Summary Output (Maximum Face Shear Stress:\n",
            "{'mesh_name': 'BaldEagleCr', 'Max Time': np.float32(0.0), 'Max Value': np.float32(0.0), 'Min Time': np.float32(0.0), 'Min Value': np.float32(0.0), 'Rows Variables': ['Shear Stress', 'Time'], 'Units': ['PSF', 'days']}\n"
          ]
        }
      ],
      "source": [
        "print(\"\\nMesh Summary Output (Maximum Face Shear Stress:\")\n",
        "print(max_face_shear_gdf.attrs)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 91,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>mesh_name</th>\\n', '      <th>face_id</th>\\n', '      <th>maximum_face_shear_stress</th>\\n', '      <th>maximum_face_shear_stress_time</th>\\n', '      <th>geometry</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>0</td>\\n', '      <td>0.0</td>\\n', '      <td>2018-09-09</td>\\n', '      <td>LINESTRING (2042125 351625, 2042375 351625)</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>1</td>\\n', '      <td>0.0</td>\\n', '      <td>2018-09-09</td>\\n', '      <td>LINESTRING (2042375 351625, 2042375 351875)</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>2</td>\\n', '      <td>0.0</td>\\n', '      <td>2018-09-09</td>\\n', '      <td>LINESTRING (2042375 351875, 2042125 351875)</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>3</td>\\n', '      <td>0.0</td>\\n', '      <td>2018-09-09</td>\\n', '      <td>LINESTRING (2042125 351875, 2042125 351625)</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>4</td>\\n', '      <td>0.0</td>\\n', '      <td>2018-09-09</td>\\n', '      <td>LINESTRING (2042375 351375, 2042375 351625)</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['         mesh_name  face_id  maximum_face_shear_stress  \\\\\\n', '0      BaldEagleCr        0                        0.0   \\n', '1      BaldEagleCr        1                        0.0   \\n', '2      BaldEagleCr        2                        0.0   \\n', '3      BaldEagleCr        3                        0.0   \\n', '4      BaldEagleCr        4                        0.0   \\n', '...            ...      ...                        ...   \\n', '37589  BaldEagleCr    37589                        0.0   \\n', '37590  BaldEagleCr    37590                        0.0   \\n', '37591  BaldEagleCr    37591                        0.0   \\n', '37592  BaldEagleCr    37592                        0.0   \\n', '37593  BaldEagleCr    37593                        0.0   \\n', '\\n', '      maximum_face_shear_stress_time  \\\\\\n', '0                         2018-09-09   \\n', '1                         2018-09-09   \\n', '2                         2018-09-09   \\n', '3                         2018-09-09   \\n', '4        \n...\n[Output truncated, 2112 characters total]"
          },
          "execution_count": 91,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "max_face_shear_gdf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 92,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Plot max face shear stress\n",
        "\n",
        "if generate_maps and not max_face_shear_gdf.empty:\n",
        "    # Calculate centroids of the line geometries and extract coordinates\n",
        "    max_face_shear_gdf['centroid'] = max_face_shear_gdf['geometry'].apply(lambda line: line.centroid)\n",
        "    max_face_shear_gdf['x'] = max_face_shear_gdf['centroid'].apply(lambda point: point.x)\n",
        "    max_face_shear_gdf['y'] = max_face_shear_gdf['centroid'].apply(lambda point: point.y)\n",
        "\n",
        "    # Create the plot\n",
        "    fig, ax = plt.subplots(figsize=(12, 8))\n",
        "    scatter = ax.scatter(max_face_shear_gdf['x'], max_face_shear_gdf['y'],\n",
        "                        c=max_face_shear_gdf['maximum_face_shear_stress'],\n",
        "                        cmap='viridis',\n",
        "                        s=10)\n",
        "\n",
        "    # Customize the plot\n",
        "    ax.set_title('Max Face Shear Stress per Face')\n",
        "    ax.set_xlabel('X Coordinate')\n",
        "    ax.set_ylabel('Y Coordinate')\n",
        "    plt.colorbar(scatter, label='Max Face Shear Stress (PSF)')\n",
        "\n",
        "    # Add grid lines\n",
        "    ax.grid(True, linestyle='--', alpha=0.7)\n",
        "\n",
        "    # Increase font size for better readability\n",
        "    plt.rcParams.update({'font.size': 12})\n",
        "\n",
        "    # Adjust layout to prevent cutting off labels\n",
        "    plt.tight_layout()\n",
        "\n",
        "    # Show the plot\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 93,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:50:08 - ras_commander.HdfResultsMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:08 - ras_commander.HdfResultsMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:08 - ras_commander.HdfResultsMesh - INFO - Processing summary output for variable: Minimum Water Surface\n",
            "2025-04-09 07:50:08 - ras_commander.HdfMesh - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:08 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:08 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:08 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:08 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:08 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:08 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:08 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:08 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:08 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:08 - ras_commander.HdfResultsMesh - INFO - Processed 19597 rows of summary output data\n"
          ]
        }
      ],
      "source": [
        "# Get mesh summary output for Minimum Water Surface as geodataframe\n",
        "summary_gdf_min_ws = HdfResultsMesh.get_mesh_summary(plan_hdf_path, var=\"Minimum Water Surface\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 94,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Mesh Summary Output (Minimum Water Surface):\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>mesh_name</th>\\n', '      <th>cell_id</th>\\n', '      <th>minimum_water_surface</th>\\n', '      <th>minimum_water_surface_time</th>\\n', '      <th>geometry</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>0</td>\\n', '      <td>701.151245</td>\\n', '      <td>2018-09-09 00:00:20</td>\\n', '      <td>POINT (2083000 370750)</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>1</td>\\n', '      <td>689.052246</td>\\n', '      <td>2018-09-09 00:00:20</td>\\n', '      <td>POINT (2083250 370750)</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>2</td>\\n', '      <td>669.774719</td>\\n', '      <td>2018-09-09 00:00:20</td>\\n', '      <td>POINT (2083500 370750)</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>3</td>\\n', '      <td>658.986938</td>\\n', '      <td>2018-09-09 00:00:20</td>\\n', '      <td>POINT (2083750 370750)</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>4</td>\\n', '      <td>658.720581</td>\\n', '      <td>2018-09-09 00:00:20</td>\\n', '      <td>POINT (2084000 370750)</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['         mesh_name  cell_id  minimum_water_surface minimum_water_surface_time  \\\\\\n', '0      BaldEagleCr        0             701.151245        2018-09-09 00:00:20   \\n', '1      BaldEagleCr        1             689.052246        2018-09-09 00:00:20   \\n', '2      BaldEagleCr        2             669.774719        2018-09-09 00:00:20   \\n', '3      BaldEagleCr        3             658.986938        2018-09-09 00:00:20   \\n', '4      BaldEagleCr        4             658.720581        2018-09-09 00:00:20   \\n', '...            ...      ...                    ...                        ...   \\n', '19592  BaldEagleCr    19592               0.000000        2018-09-09 00:00:00   \\n', '19593  BaldEagleCr    19593               0.000000        2018-09-09 00:00:00   \\n', '19594  BaldEagleCr    19594               0.000000        2018-09-09 00:00:00   \\n', '19595  BaldEagleCr    19595               0.000000        2018-09-09 00:00:00   \\n', '19596  BaldEagleCr    19596               0.000000        2018-09-09 00:00:00   \\n', '\\n', '                             geometry  \\n', '0              POINT (2083000 370750)  \\n', '1              POINT (2083250 370750)  \\n', '2              POINT (2083500 370750)  \\n', '3              POINT (2083750 370750)  \\n', '4              POINT (2084000 370750)  \\n', '...                               ...  \\n', '19592  POINT (1978423.032 300718.897)  \\n', '19593  POINT (1973389.375 297311.928)  \\n', '19594   POINT (1968834.79 295808.861)  \\n', '19595  POINT (1966130.942 291879.395)  \\n', '19596   POINT (1969660.046 289673.23)  \\n', '\\n', '[19597 rows x 5 columns]']"
          },
          "execution_count": 94,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nMesh Summary Output (Minimum Water Surface):\")\n",
        "summary_gdf_min_ws"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 95,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:50:08 - ras_commander.HdfResultsMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:08 - ras_commander.HdfResultsMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:08 - ras_commander.HdfResultsMesh - INFO - Processing summary output for variable: Minimum Face Velocity\n",
            "2025-04-09 07:50:08 - ras_commander.HdfMesh - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:08 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:08 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:08 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:09 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:09 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:09 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:09 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:09 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:09 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:09 - ras_commander.HdfResultsMesh - INFO - Processed 37594 rows of summary output data\n"
          ]
        }
      ],
      "source": [
        "# Get mesh summary output for Minimum Face Velocity as geodataframe\n",
        "summary_gdf_min_fv = HdfResultsMesh.get_mesh_summary(plan_hdf_path, var=\"Minimum Face Velocity\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 96,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Mesh Summary Output (Minimum Face Velocity):\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>mesh_name</th>\\n', '      <th>face_id</th>\\n', '      <th>minimum_face_velocity</th>\\n', '      <th>minimum_face_velocity_time</th>\\n', '      <th>geometry</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>0</td>\\n', '      <td>0.0</td>\\n', '      <td>2018-09-09 00:00:20</td>\\n', '      <td>LINESTRING (2042125 351625, 2042375 351625)</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>1</td>\\n', '      <td>0.0</td>\\n', '      <td>2018-09-09 00:00:20</td>\\n', '      <td>LINESTRING (2042375 351625, 2042375 351875)</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>2</td>\\n', '      <td>0.0</td>\\n', '      <td>2018-09-09 00:00:20</td>\\n', '      <td>LINESTRING (2042375 351875, 2042125 351875)</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>3</td>\\n', '      <td>0.0</td>\\n', '      <td>2018-09-09 00:00:20</td>\\n', '      <td>LINESTRING (2042125 351875, 2042125 351625)</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>4</td>\\n', '      <td>0.0</td>\\n', '      <td>2018-09-09 00:00:20</td>\\n', '      <td>LINESTRING (2042375 351375, 2042375 351625)</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['         mesh_name  face_id  minimum_face_velocity minimum_face_velocity_time  \\\\\\n', '0      BaldEagleCr        0                    0.0        2018-09-09 00:00:20   \\n', '1      BaldEagleCr        1                    0.0        2018-09-09 00:00:20   \\n', '2      BaldEagleCr        2                    0.0        2018-09-09 00:00:20   \\n', '3      BaldEagleCr        3                    0.0        2018-09-09 00:00:20   \\n', '4      BaldEagleCr        4                    0.0        2018-09-09 00:00:20   \\n', '...            ...      ...                    ...                        ...   \\n', '37589  BaldEagleCr    37589                    0.0        2018-09-09 00:00:20   \\n', '37590  BaldEagleCr    37590                    0.0        2018-09-09 00:00:20   \\n', '37591  BaldEagleCr    37591                    0.0        2018-09-09 00:00:20   \\n', '37592  BaldEagleCr    37592                    0.0        2018-09-09 00:00:20   \\n', '37593  BaldEagleCr    37593                    0.0        2018-09-09 00:00:20   \\n', '\\n', '                                                geometry  \\n', '0            LINESTRING (2042125 351625, 2042375 351625)  \\n', '1            LINESTRING (2042375 351625, 2042375 351875)  \\n', '2            LINESTRING (2042375 351875, 2042125 351875)  \\n', '3            LINESTRING (2042125 351875, 2042125 351625)  \\n', '4            LINESTRING (2042375 351375, 2042375 351625)  \\n', '...                                                  ...  \\n', '37589  LINESTRING (1978444.054 300812.794, 1978402.01...  \\n', '37590  LINESTRING (1973531.76 297370.846, 1973246.989...  \\n', '37591  LINESTRING (1968886.801 295900.5, 1968782.778 ...  \\n', '37592  LINESTRING (1965981.775 291978.68, 1966280.11 ...  \\n', '37593  LINESTRING (1969588.438 289578.114, 1969731.65...  \\n', '\\n', '[37594 rows x 5 columns]']"
          },
          "execution_count": 96,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nMesh Summary Output (Minimum Face Velocity):\")\n",
        "summary_gdf_min_fv"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 97,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:50:09 - ras_commander.HdfResultsMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:09 - ras_commander.HdfResultsMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:09 - ras_commander.HdfResultsMesh - INFO - Processing summary output for variable: Cell Cumulative Iteration\n",
            "2025-04-09 07:50:09 - ras_commander.HdfMesh - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:09 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:09 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:09 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:09 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:09 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:09 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:09 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:09 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:09 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:09 - ras_commander.HdfResultsMesh - INFO - Processed 19597 rows of summary output data\n"
          ]
        }
      ],
      "source": [
        "# Get mesh summary output for Cell Cumulative Iteration as geodataframe\n",
        "summary_gdf_cum_iter = HdfResultsMesh.get_mesh_summary(plan_hdf_path, var=\"Cell Cumulative Iteration\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 98,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Mesh Summary Output (Cell Cumulative Iteration):\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>mesh_name</th>\\n', '      <th>cell_id</th>\\n', '      <th>cell_cumulative_iteration</th>\\n', '      <th>geometry</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>0</td>\\n', '      <td>0.0</td>\\n', '      <td>POINT (2083000 370750)</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>1</td>\\n', '      <td>0.0</td>\\n', '      <td>POINT (2083250 370750)</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>2</td>\\n', '      <td>0.0</td>\\n', '      <td>POINT (2083500 370750)</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>3</td>\\n', '      <td>0.0</td>\\n', '      <td>POINT (2083750 370750)</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>4</td>\\n', '      <td>0.0</td>\\n', '      <td>POINT (2084000 370750)</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['         mesh_name  cell_id  cell_cumulative_iteration  \\\\\\n', '0      BaldEagleCr        0                        0.0   \\n', '1      BaldEagleCr        1                        0.0   \\n', '2      BaldEagleCr        2                        0.0   \\n', '3      BaldEagleCr        3                        0.0   \\n', '4      BaldEagleCr        4                        0.0   \\n', '...            ...      ...                        ...   \\n', '19592  BaldEagleCr    19592                        0.0   \\n', '19593  BaldEagleCr    19593                        0.0   \\n', '19594  BaldEagleCr    19594                        0.0   \\n', '19595  BaldEagleCr    19595                        0.0   \\n', '19596  BaldEagleCr    19596                        0.0   \\n', '\\n', '                             geometry  \\n', '0              POINT (2083000 370750)  \\n', '1              POINT (2083250 370750)  \\n', '2              POINT (2083500 370750)  \\n', '3              POINT (2083750 370750)  \\n', '4              POINT (2084000 370750)  \\n', '...                               ...  \\n', '19592  POINT (1978423.032 300718.897)  \\n', '19593  POINT (1973389.375 297311.928)  \\n', '19594   POINT (1968834.79 295808.861)  \\n', '19595  POINT (1966130.942 291879.395)  \\n', '19596   POINT (1969660.046 289673.23)  \\n', '\\n', '[19597 rows x 4 columns]']"
          },
          "execution_count": 98,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nMesh Summary Output (Cell Cumulative Iteration):\")\n",
        "summary_gdf_cum_iter"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 99,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:50:09 - ras_commander.HdfMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 07:50:09 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n"
          ]
        }
      ],
      "source": [
        "# Get mesh timeseries output as xarray\n",
        "# The mesh name is part of the timeseries HDF path, so you must pass the mesh_name to retrieve it\n",
        "\n",
        "# Get mesh areas from previous code cell\n",
        "mesh_areas = HdfMesh.get_mesh_area_names(geom_hdf_path)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 100,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": "[\"['BaldEagleCr']\"]"
          },
          "execution_count": 100,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "mesh_areas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 101,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:50:09 - ras_commander.HdfResultsMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:09 - ras_commander.HdfResultsMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n"
          ]
        }
      ],
      "source": [
        "# Use the first mesh area name to extract mesh timeseries output as xarray\n",
        "timeseries_xr = HdfResultsMesh.get_mesh_timeseries(plan_hdf_path, mesh_areas[0], \"Water Surface\") # Use the first 2D flow area name for mesh_name"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 102,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div><pre>xarray.DataArray with Unknown dimensions\n[Full xarray output truncated during preprocessing]</pre></div>",
            "text/plain": "xarray.DataArray with Unknown dimensions\n[Full xarray output truncated during preprocessing]"
          },
          "execution_count": 102,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "timeseries_xr"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 103,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Time Series Output Variables for Cells\n",
        "# \n",
        "# Variable Name: Description\n",
        "# Water Surface: Water surface elevation\n",
        "# Depth: Water depth\n",
        "# Velocity: Magnitude of velocity\n",
        "# Velocity X: X-component of velocity\n",
        "# Velocity Y: Y-component of velocity\n",
        "# Froude Number: Froude number\n",
        "# Courant Number: Courant number\n",
        "# Shear Stress: Shear stress on the bed\n",
        "# Bed Elevation: Elevation of the bed\n",
        "# Precipitation Rate: Rate of precipitation\n",
        "# Infiltration Rate: Rate of infiltration\n",
        "# Evaporation Rate: Rate of evaporation\n",
        "# Percolation Rate: Rate of percolation\n",
        "# Groundwater Elevation: Elevation of groundwater\n",
        "# Groundwater Depth: Depth to groundwater\n",
        "# Groundwater Flow: Groundwater flow rate\n",
        "# Groundwater Velocity: Magnitude of groundwater velocity\n",
        "# Groundwater Velocity X: X-component of groundwater velocity\n",
        "# Groundwater Velocity Y: Y-component of groundwater velocity\n",
        "# \n",
        "# These variables are available for time series output at the cell level in 2D flow areas.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 104,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:50:10 - ras_commander.HdfResultsMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:10 - ras_commander.HdfResultsMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:10 - ras_commander.HdfResultsMesh - WARNING - Variable 'Depth' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-09 07:50:10 - ras_commander.HdfResultsMesh - WARNING - Variable 'Velocity' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-09 07:50:10 - ras_commander.HdfResultsMesh - WARNING - Variable 'Velocity X' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-09 07:50:10 - ras_commander.HdfResultsMesh - WARNING - Variable 'Velocity Y' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-09 07:50:10 - ras_commander.HdfResultsMesh - WARNING - Variable 'Froude Number' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-09 07:50:10 - ras_commander.HdfResultsMesh - WARNING - Variable 'Courant Number' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-09 07:50:10 - ras_commander.HdfResultsMesh - WARNING - Variable 'Shear Stress' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-09 07:50:10 - ras_commander.HdfResultsMesh - WARNING - Variable 'Bed Elevation' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-09 07:50:10 - ras_commander.HdfResultsMesh - WARNING - Variable 'Precipitation Rate' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-09 07:50:10 - ras_commander.HdfResultsMesh - WARNING - Variable 'Infiltration Rate' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-09 07:50:10 - ras_commander.HdfResultsMesh - WARNING - Variable 'Evaporation Rate' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-09 07:50:10 - ras_commander.HdfResultsMesh - WARNING - Variable 'Percolation Rate' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-09 07:50:10 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Elevation' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-09 07:50:10 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Depth' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-09 07:50:10 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Flow' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-09 07:50:10 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Velocity' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-09 07:50:10 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Velocity X' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-09 07:50:10 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Velocity Y' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-09 07:50:12 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Courant' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-09 07:50:12 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Cumulative Volume' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-09 07:50:12 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Flow Period Average' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-09 07:50:12 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Friction Term' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-09 07:50:12 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Pressure Gradient Term' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-09 07:50:13 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Tangential Velocity' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n"
          ]
        }
      ],
      "source": [
        "# Get mesh cells timeseries output as xarray\n",
        "cells_timeseries_xr = HdfResultsMesh.get_mesh_cells_timeseries(plan_hdf_path, mesh_areas[0])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 105,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": "xarray.Dataset with Unknown dimensions\n[Full xarray output truncated during preprocessing]"
          },
          "execution_count": 105,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "cells_timeseries_xr"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 106,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:50:13 - root - INFO - Plotted water surface elevation time series for random cell ID: 9425\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Statistics for Cell ID 9425:\n",
            "Minimum WSEL: 556.59 ft\n",
            "Maximum WSEL: 560.26 ft\n",
            "Mean WSEL: 559.13 ft\n",
            "Time of peak: 2018-09-10T22:30:00.000000000\n"
          ]
        }
      ],
      "source": [
        "# Plot WSE Time Series Data (Random Cell ID) \n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "if generate_plots:\n",
        "    import numpy as np\n",
        "    import random\n",
        "\n",
        "    # Extract Water Surface data\n",
        "    water_surface = cells_timeseries_xr[mesh_areas[0]]['Water Surface']\n",
        "\n",
        "    # Get the time values\n",
        "    time_values = water_surface.coords['time'].values\n",
        "\n",
        "    # Pick a random cell_id\n",
        "    random_cell_id = random.choice(water_surface.coords['cell_id'].values)\n",
        "\n",
        "    # Extract the water surface elevation time series for the random cell\n",
        "    wsel_timeseries = water_surface.sel(cell_id=random_cell_id)\n",
        "\n",
        "    # Find the peak value and its index\n",
        "    peak_value = wsel_timeseries.max().item()\n",
        "    peak_index = wsel_timeseries.argmax().item()\n",
        "\n",
        "    # Create the plot\n",
        "    plt.figure(figsize=(12, 6))\n",
        "    plt.plot(time_values, wsel_timeseries, label=f'Cell ID: {random_cell_id}')\n",
        "    plt.scatter(time_values[peak_index], peak_value, color='red', s=100, zorder=5)\n",
        "    plt.annotate(f'Peak: {peak_value:.2f} ft', \n",
        "                (time_values[peak_index], peak_value),\n",
        "                xytext=(10, 10), textcoords='offset points',\n",
        "                ha='left', va='bottom',\n",
        "                bbox=dict(boxstyle='round,pad=0.5', fc='yellow', alpha=0.5),\n",
        "                arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0'))\n",
        "\n",
        "    plt.title(f'Water Surface Elevation Time Series for Random Cell (ID: {random_cell_id})')\n",
        "    plt.xlabel('Time')\n",
        "    plt.ylabel('Water Surface Elevation (ft)')\n",
        "    plt.legend()\n",
        "    plt.grid(True)\n",
        "    plt.tight_layout()\n",
        "\n",
        "    # Log the plotting action\n",
        "    logging.info(f\"Plotted water surface elevation time series for random cell ID: {random_cell_id}\")\n",
        "\n",
        "    # Display the plot\n",
        "    plt.show()\n",
        "\n",
        "    # Print some statistics\n",
        "    print(f\"Statistics for Cell ID {random_cell_id}:\")\n",
        "    print(f\"Minimum WSEL: {wsel_timeseries.min().item():.2f} ft\")\n",
        "    print(f\"Maximum WSEL: {peak_value:.2f} ft\")\n",
        "    print(f\"Mean WSEL: {wsel_timeseries.mean().item():.2f} ft\")\n",
        "    print(f\"Time of peak: {time_values[peak_index]}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 107,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:50:13 - ras_commander.HdfResultsMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:13 - ras_commander.HdfResultsMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:13 - ras_commander.HdfResultsMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:13 - ras_commander.HdfResultsMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:14 - ras_commander.HdfResultsMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:14 - ras_commander.HdfResultsMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n"
          ]
        }
      ],
      "source": [
        "# Get mesh faces timeseries output as xarray\n",
        "faces_timeseries_xr = HdfResultsMesh.get_mesh_faces_timeseries(plan_hdf_path, mesh_areas[0])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 108,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div><pre>xarray.Dataset with (time: 720, face_id: 37594)\\n', 'Coordinates:\\n', '  * time           (time) datetime64[ns] 6kB 2018-09-09T00:10:00 ... 2018-09-14\\n', '  * face_id        (face_id) int64 301kB 0 1 2 3 4 ... 37590 37591 37592 37593\\n', 'Data variables:\\n', '    face_velocity  (time, face_id) float32 108MB 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0\\n', '    face_flow      (time, face_id) float32 108MB 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0\\n', 'Attributes:\\n', '    units:      ft/s\\n', '    mesh_name:  BaldEagleCr\\n', \"    variable:   Face Velocity\n[Full xarray output truncated during preprocessing]</pre></div>",
            "text/plain": "xarray.Dataset with Unknown dimensions\n[Full xarray output truncated during preprocessing]"
          },
          "execution_count": 108,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "faces_timeseries_xr"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 109,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\bill\\AppData\\Local\\Temp\\ipykernel_9556\\401875653.py:138: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n",
            "  plt.tight_layout()\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:50:53 - root - INFO - Plotted mesh face time series and map view for random face ID: 27271 with terrain\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Random Face: 27271\n",
            "Peak Value: 3.20 ft/s at 2018-09-13T20:20:00.000000000\n"
          ]
        }
      ],
      "source": [
        "# Plot Random Face Results and Label Peak, Plus Map View\n",
        "\n",
        "if generate_maps:\n",
        "\n",
        "    # Select a random valid face ID number\n",
        "    random_face = np.random.randint(0, faces_timeseries_xr.sizes['face_id'])\n",
        "\n",
        "    # Extract time series data for the selected face\n",
        "    variable = 'face_velocity'  # We could also use 'face_flow'\n",
        "    face_data = faces_timeseries_xr[variable].sel(face_id=random_face)\n",
        "\n",
        "    # Find peak value and its corresponding time\n",
        "    peak_value = face_data.max().item()\n",
        "    peak_time = face_data.idxmax().values\n",
        "\n",
        "    # Plot time series\n",
        "    plt.figure(figsize=(12, 8))\n",
        "    plt.plot(faces_timeseries_xr.time, face_data)\n",
        "    plt.title(f'{variable.capitalize()} Time Series for Face {random_face}')\n",
        "    plt.xlabel('Time')\n",
        "    plt.ylabel(f'{variable.capitalize()} ({faces_timeseries_xr.attrs[\"units\"]})')\n",
        "    plt.grid(True)\n",
        "\n",
        "    # Annotate the peak point\n",
        "    plt.annotate(f'Peak: ({peak_time}, {peak_value:.2f})', \n",
        "                (peak_time, peak_value),\n",
        "                xytext=(10, 10), textcoords='offset points',\n",
        "                arrowprops=dict(arrowstyle=\"->\"))\n",
        "\n",
        "    # Check for negative values and label the minimum if present\n",
        "    min_value = face_data.min().item()\n",
        "    if min_value < 0:\n",
        "        min_time = face_data.idxmin().values\n",
        "        plt.annotate(f'Min: ({min_time}, {min_value:.2f})', \n",
        "                    (min_time, min_value),\n",
        "                    xytext=(10, -10), textcoords='offset points',\n",
        "                    arrowprops=dict(arrowstyle=\"->\"))\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "    # Create map view plot\n",
        "    fig, ax = plt.subplots(figsize=(12, 8))\n",
        "\n",
        "\n",
        "    # Calculate mesh faces extents with 10% buffer\n",
        "    faces_bounds = mesh_cell_faces_gdf.total_bounds\n",
        "    x_min, y_min, x_max, y_max = faces_bounds\n",
        "    buffer_x = (x_max - x_min) * 0.1\n",
        "    buffer_y = (y_max - y_min) * 0.1\n",
        "    plot_xlim = [x_min - buffer_x, x_max + buffer_x]\n",
        "    plot_ylim = [y_min - buffer_y, y_max + buffer_y]\n",
        "\n",
        "    # Set plot limits before adding terrain\n",
        "    ax.set_xlim(plot_xlim)\n",
        "    ax.set_ylim(plot_ylim)\n",
        "\n",
        "    # Add the terrain TIFF to the map, clipped to our desired extent\n",
        "    tiff_path = Path.cwd() / 'example_projects' / 'BaldEagleCrkMulti2D' / 'Terrain' / 'Terrain50.baldeagledem.tif'\n",
        "    with rasterio.open(tiff_path) as src:\n",
        "        show(src, ax=ax, cmap='terrain', alpha=0.5)\n",
        "        \n",
        "    # Reset the limits after terrain plot\n",
        "    ax.set_xlim(plot_xlim)\n",
        "    ax.set_ylim(plot_ylim)\n",
        "\n",
        "    # Plot all faces in gray\n",
        "    mesh_cell_faces_gdf.plot(ax=ax, color='lightgray', alpha=0.5, zorder=2)\n",
        "\n",
        "    # Get the selected face geometry\n",
        "    selected_face = mesh_cell_faces_gdf[mesh_cell_faces_gdf['face_id'] == random_face]\n",
        "\n",
        "    # Highlight the selected face in red\n",
        "    selected_face.plot(\n",
        "        ax=ax, \n",
        "        color='red',\n",
        "        linewidth=2,\n",
        "        label=f'Selected Face (ID: {random_face})',\n",
        "        zorder=3\n",
        "    )\n",
        "\n",
        "    # Get bounds of selected face for zoomed inset\n",
        "    bounds = selected_face.geometry.bounds.iloc[0]\n",
        "    x_center = (bounds.iloc[0] + bounds.iloc[2]) / 2\n",
        "    y_center = (bounds.iloc[1] + bounds.iloc[3]) / 2\n",
        "    buffer = max(bounds.iloc[2] - bounds.iloc[0], bounds.iloc[3] - bounds.iloc[1]) * 2\n",
        "\n",
        "    # Create zoomed inset with a larger size, inside the map frame\n",
        "    axins = inset_axes(ax, width=\"70%\", height=\"70%\", loc='lower right',\n",
        "                    bbox_to_anchor=(0.65, 0.05, 0.35, 0.35),\n",
        "                    bbox_transform=ax.transAxes)\n",
        "\n",
        "    # Plot terrain and faces in inset\n",
        "    with rasterio.open(tiff_path) as src:\n",
        "        show(src, ax=axins, cmap='terrain', alpha=0.5)\n",
        "        \n",
        "    # Plot zoomed view in inset\n",
        "    mesh_cell_faces_gdf.plot(ax=axins, color='lightgray', alpha=0.5, zorder=2)\n",
        "    selected_face.plot(ax=axins, color='red', linewidth=2, zorder=3)\n",
        "\n",
        "    # Set inset limits with slightly more context\n",
        "    axins.set_xlim(x_center - buffer/1.5, x_center + buffer/1.5)\n",
        "    axins.set_ylim(y_center - buffer/1.5, y_center + buffer/1.5)\n",
        "\n",
        "    # Remove inset ticks for cleaner look\n",
        "    axins.set_xticks([])\n",
        "    axins.set_yticks([])\n",
        "\n",
        "    # Add a border to the inset\n",
        "    for spine in axins.spines.values():\n",
        "        spine.set_edgecolor('black')\n",
        "        spine.set_linewidth(1.5)\n",
        "\n",
        "    # Create connection lines between main plot and inset\n",
        "    # Get the selected face centroid for connection point\n",
        "    centroid = selected_face.geometry.centroid.iloc[0]\n",
        "    con1 = ConnectionPatch(\n",
        "        xyA=(centroid.x, centroid.y), coordsA=ax.transData,\n",
        "        xyB=(0.02, 0.98), coordsB=axins.transAxes,\n",
        "        arrowstyle=\"-\", linestyle=\"--\", color=\"gray\", alpha=0.6\n",
        "    )\n",
        "    con2 = ConnectionPatch(\n",
        "        xyA=(centroid.x, centroid.y), coordsA=ax.transData,\n",
        "        xyB=(0.98, 0.02), coordsB=axins.transAxes,\n",
        "        arrowstyle=\"-\", linestyle=\"--\", color=\"gray\", alpha=0.6\n",
        "    )\n",
        "\n",
        "    ax.add_artist(con1)\n",
        "    ax.add_artist(con2)\n",
        "\n",
        "    # Add title and legend to main plot\n",
        "    ax.set_title('Mesh Face Map View with Terrain')\n",
        "    ax.legend()\n",
        "\n",
        "    # Ensure equal aspect ratio while maintaining our desired extents\n",
        "    ax.set_aspect('equal', adjustable='box')\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "    # Print summary information\n",
        "    print(f\"Random Face: {random_face}\")\n",
        "    print(f\"Peak Value: {peak_value:.2f} {faces_timeseries_xr.attrs['units']} at {peak_time}\")\n",
        "    if min_value < 0:\n",
        "        print(f\"Minimum Value: {min_value:.2f} {faces_timeseries_xr.attrs['units']} at {min_time}\")\n",
        "\n",
        "    # Log the plotting action\n",
        "    logging.info(f\"Plotted mesh face time series and map view for random face ID: {random_face} with terrain\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 110,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:50:54 - ras_commander.HdfPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:54 - ras_commander.HdfPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n"
          ]
        }
      ],
      "source": [
        "# Get meteorology precipitation attributes\n",
        "meteo_precip_attrs = HdfPlan.get_plan_met_precip(plan_hdf_path)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 111,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": "[\"{'DSS Filename': '.\\\\\\\\Precipitation\\\\\\\\precip.2018.09.dss',\\n\", \" 'DSS Pathname': '/SHG/MARFC/PRECIP/01SEP2018:0200/01SEP2018:0300/NEXRAD/',\\n\", \" 'Data Type': 'per-cum',\\n\", \" 'Interpolation Method': '',\\n\", \" 'Mode': 'Gridded',\\n\", ' \\'Projection\\': \\'PROJCS[\"USA_Contiguous_Albers_Equal_Area_Conic_USGS_version\",GEOGCS[\"NAD83\",DATUM[\"North_American_Datum_1983\",SPHEROID[\"GRS 1980\",6378137,298.257222101,AUTHORITY[\"EPSG\",\"7019\"]],AUTHORITY[\"EPSG\",\"6269\"]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Albers_Conic_Equal_Area\"],PARAMETER[\"latitude_of_center\",23],PARAMETER[\"longitude_of_center\",-96],PARAMETER[\"standard_parallel_1\",29.5],PARAMETER[\"standard_parallel_2\",45.5],PARAMETER[\"false_easting\",0],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH]]\\',\\n', \" 'Raster Cellsize': np.float64(2000.0),\\n\", \" 'Raster Cols': np.int32(515),\\n\", \" 'Raster Left': np.float64(1096000.0),\\n\", \" 'Raster Rows': np.int32(522),\\n\", \" 'Raster Top': np.float64(2560000.0),\\n\", \" 'Source': 'DSS',\\n\", \" 'Units': 'in'}\"]"
          },
          "execution_count": 111,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "meteo_precip_attrs"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 112,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:50:54 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:54 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n"
          ]
        }
      ],
      "source": [
        "# Get results unsteady attributes\n",
        "results_unsteady_attrs = HdfResultsPlan.get_unsteady_info(plan_hdf_path)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 113,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Name</th>\\n', '      <th>Program Version</th>\\n', '      <th>Project File Name</th>\\n', '      <th>Project Title</th>\\n', '      <th>Short ID</th>\\n', '      <th>Simulation Time Window</th>\\n', '      <th>Type of Run</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>Gridded Precip - Infiltration</td>\\n', '      <td>HEC-RAS - River Analysis System</td>\\n', '      <td>HEC-RAS 6.6 September 2024</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>Bald Eagle Creek Example Dam Break Study</td>\\n', '      <td>Grid Precip Infiltration</td>\\n', '      <td>08Sep2018 2400 to 13Sep2018 2400</td>\\n', '      <td>Unsteady Flow Analysis</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['                      Plan Title                     Program Name  \\\\\\n', '0  Gridded Precip - Infiltration  HEC-RAS - River Analysis System   \\n', '\\n', '              Program Version  \\\\\\n', '0  HEC-RAS 6.6 September 2024   \\n', '\\n', '                                   Project File Name  \\\\\\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '\\n', '                              Project Title                  Short ID  \\\\\\n', '0  Bald Eagle Creek Example Dam Break Study  Grid Precip Infiltration   \\n', '\\n', '             Simulation Time Window             Type of Run  \\n', '0  08Sep2018 2400 to 13Sep2018 2400  Unsteady Flow Analysis  ']"
          },
          "execution_count": 113,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "results_unsteady_attrs"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 114,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:50:54 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:54 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n"
          ]
        }
      ],
      "source": [
        "# Get results unsteady summary attributes\n",
        "results_unsteady_summary_attrs = HdfResultsPlan.get_unsteady_summary(plan_hdf_path)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 115,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Computation Time DSS</th>\\n', '      <th>Computation Time Total</th>\\n', '      <th>Maximum WSEL Error</th>\\n', '      <th>Maximum number of cores</th>\\n', '      <th>Run Time Window</th>\\n', '      <th>Solution</th>\\n', '      <th>Time Solution Went Unstable</th>\\n', '      <th>Time Stamp Solution Went Unstable</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>00:00:00</td>\\n', '      <td>00:05:33</td>\\n', '      <td>0.0</td>\\n', '      <td>2</td>\\n', '      <td>09APR2025 07:26:47 to 09APR2025 07:32:19</td>\\n', '      <td>Unsteady Finished Successfully</td>\\n', '      <td>NaN</td>\\n', '      <td>Not Applicable</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  Computation Time DSS Computation Time Total  Maximum WSEL Error  \\\\\\n', '0             00:00:00               00:05:33                 0.0   \\n', '\\n', '   Maximum number of cores                           Run Time Window  \\\\\\n', '0                        2  09APR2025 07:26:47 to 09APR2025 07:32:19   \\n', '\\n', '                         Solution  Time Solution Went Unstable  \\\\\\n', '0  Unsteady Finished Successfully                          NaN   \\n', '\\n', '  Time Stamp Solution Went Unstable  \\n', '0                    Not Applicable  ']"
          },
          "execution_count": 115,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "results_unsteady_summary_attrs"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 116,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 07:50:54 - ras_commander.HdfResultsPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 07:50:54 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n"
          ]
        }
      ],
      "source": [
        "# Get results volume accounting attributes\n",
        "volume_accounting_attrs = HdfResultsPlan.get_volume_accounting(plan_hdf_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 117,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Error</th>\\n', '      <th>Error Percent</th>\\n', '      <th>Precipitation Excess (acre feet)</th>\\n', '      <th>Precipitation Excess (inches)</th>\\n', '      <th>Total Boundary Flux of Water In</th>\\n', '      <th>Total Boundary Flux of Water Out</th>\\n', '      <th>Vol Accounting in</th>\\n', '      <th>Volume Ending</th>\\n', '      <th>Volume Starting</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>0.469082</td>\\n', '      <td>0.000331</td>\\n', '      <td>3756.872803</td>\\n', '      <td>1.707615</td>\\n', '      <td>141685.0</td>\\n', '      <td>17240.263672</td>\\n', '      <td>Acre Feet</td>\\n', '      <td>124445.203125</td>\\n', '      <td>0.0</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['      Error  Error Percent  Precipitation Excess (acre feet)  \\\\\\n', '0  0.469082       0.000331                       3756.872803   \\n', '\\n', '   Precipitation Excess (inches)  Total Boundary Flux of Water In  \\\\\\n', '0                       1.707615                         141685.0   \\n', '\\n', '   Total Boundary Flux of Water Out Vol Accounting in  Volume Ending  \\\\\\n', '0                      17240.263672         Acre Feet  124445.203125   \\n', '\\n', '   Volume Starting  \\n', '0              0.0  ']"
          },
          "execution_count": 117,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "volume_accounting_attrs"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "-----"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 118,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Extracting Compute Messages\n",
            "Compute Messages:\n",
            "Plan                                     : 'Gridded Precip - Infiltration' (BaldEagleDamBrk.p06)\n",
            "Simulation started at                    : 09Apr2025 07:26:22 AM\n",
            "\n",
            "Writing Plan GIS Data...\n",
            "\n",
            "Completed Writing Plan GIS Data\n",
            "\n",
            "Writing Geometry...\n",
            "Computing 2D Flow Area 'BaldEagleCr' tables : Property tables do not exist.\n",
            "\n",
            "2D Flow Area 'BaldEagleCr' tables complete 17.30 sec\n",
            "\n",
            "Completed Writing Geometry\n",
            "\n",
            "Writing Event Conditions ...\n",
            "\n",
            "Processing Precipitation data...\n",
            "\n",
            "(assumes geometry data is geo-referenced)\n",
            "\n",
            "Finished Processing Precipitation data (2.393s)\n",
            "\n",
            "Completed Writing Event Condition Data\n",
            "\n",
            "Geometric Preprocessor HEC-RAS 6.6 September 2024\n",
            "\n",
            "Finished Processing Geometry\n",
            "\n",
            "Performing Unsteady Flow Simulation  HEC-RAS 6.6 September 2024\n",
            "Unsteady Input Summary                   : \n",
            "\n",
            "2D Unsteady Diffusion Wave Equation Set (fastest)\n",
            "2D number of Solver Cores                : 2\n",
            "\n",
            "Maximum adaptive timestep = 40.0    Minimum adaptive timestep = 20.0\n",
            "\n",
            "Initial adaptive timestep = 20.0\n",
            "09SEP2018 00                             : 01:20       timestep =            40             (sec)\n",
            "12SEP2018 21                             : 12:00       timestep =            20             (sec)\n",
            "Overall Volume Accounting Error in Acre Feet : 0.4691\n",
            "Overall Volume Accounting Error as percentage : 0.000331\n",
            "\n",
            "Please review \"Computational Log File\" output for volume accounting details\n",
            "\n",
            "Writing Results to DSS\n",
            "\n",
            "Finished Unsteady Flow Simulation\n",
            "\n",
            "1D Post Process Skipped (simulation is all 2D)\n",
            "\n",
            "Computations Summary\n",
            "Computation Task\tTime(hh                 : mm:ss)\n",
            "\n",
            "Completing Geometry, Flow and Plan\t      23\n",
            "\n",
            "Preprocessing Geometry\t<1\n",
            "Unsteady Flow Computations\t    5         : 34\n",
            "Complete Process\t    5                   : 58\n",
            "\n",
            "Computation Speed\tSimulation/Runtime\n",
            "\n",
            "Unsteady Flow Computations\t1292x\n",
            "\n",
            "Complete Process\t1206x\n",
            "\n",
            "Computation Summary:\n",
            "--------------------------------------------------\n",
            "Computation Task               Time                \n",
            "--------------------------------------------------\n",
            "Computation Task               Time(hh:mm:ss)      \n",
            "\n",
            "Computation Speed:\n",
            "--------------------------------------------------\n",
            "Task                           Simulation/Runtime  \n",
            "--------------------------------------------------\n",
            "Computation Speed              Simulation/Runtime  \n"
          ]
        }
      ],
      "source": [
        "# Extract Compute Messages as String\n",
        "print(\"Extracting Compute Messages\")\n",
        "\n",
        "import h5py\n",
        "import numpy as np\n",
        "\n",
        "\n",
        "\n",
        "def extract_string_from_hdf(results_hdf_filename: str, hdf_path: str) -> str:\n",
        "    \"\"\"\n",
        "    Extract string from HDF object at a given path\n",
        "\n",
        "    Parameters\n",
        "    ----------\n",
        "    results_hdf_filename : str\n",
        "        Name of the HDF file\n",
        "    hdf_path : str\n",
        "        Path of the object in the HDF file\n",
        "\n",
        "    Returns\n",
        "    -------\n",
        "    str\n",
        "        Extracted string from the specified HDF object\n",
        "    \"\"\"\n",
        "    with h5py.File(results_hdf_filename, 'r') as hdf_file:\n",
        "        try:\n",
        "            hdf_object = hdf_file[hdf_path]\n",
        "            if isinstance(hdf_object, h5py.Group):\n",
        "                return f\"Group: {hdf_path}\\nContents: {list(hdf_object.keys())}\"\n",
        "            elif isinstance(hdf_object, h5py.Dataset):\n",
        "                data = hdf_object[()]\n",
        "                if isinstance(data, bytes):\n",
        "                    return data.decode('utf-8')\n",
        "                elif isinstance(data, np.ndarray) and data.dtype.kind == 'S':\n",
        "                    return [v.decode('utf-8') for v in data]\n",
        "                else:\n",
        "                    return str(data)\n",
        "            else:\n",
        "                return f\"Unsupported object type: {type(hdf_object)}\"\n",
        "        except KeyError:\n",
        "            return f\"Path not found: {hdf_path}\"\n",
        "\n",
        "\n",
        "\n",
        "try:\n",
        "    results_summary_string = extract_string_from_hdf(plan_hdf_path, '/Results/Summary/Compute Messages (text)')\n",
        "    print(\"Compute Messages:\")\n",
        "    \n",
        "    # Parse and print the compute messages in a more visually friendly way\n",
        "    messages = results_summary_string[0].split('\\r\\n')\n",
        "    \n",
        "    for message in messages:\n",
        "        if message.strip():  # Skip empty lines\n",
        "            if ':' in message:\n",
        "                key, value = message.split(':', 1)\n",
        "                print(f\"{key.strip():40} : {value.strip()}\")\n",
        "            else:\n",
        "                print(f\"\\n{message.strip()}\")\n",
        "    \n",
        "    # Print computation summary in a table format\n",
        "    print(\"\\nComputation Summary:\")\n",
        "    print(\"-\" * 50)\n",
        "    print(f\"{'Computation Task':<30} {'Time':<20}\")\n",
        "    print(\"-\" * 50)\n",
        "    for line in messages:\n",
        "        if 'Computation Task' in line:\n",
        "            task, time = line.split('\\t')\n",
        "            print(f\"{task:<30} {time:<20}\")\n",
        "    \n",
        "    print(\"\\nComputation Speed:\")\n",
        "    print(\"-\" * 50)\n",
        "    print(f\"{'Task':<30} {'Simulation/Runtime':<20}\")\n",
        "    print(\"-\" * 50)\n",
        "    for line in messages:\n",
        "        if 'Computation Speed' in line:\n",
        "            task, speed = line.split('\\t')\n",
        "            print(f\"{task:<30} {speed:<20}\")\n",
        "\n",
        "except Exception as e:\n",
        "    print(f\"Error extracting compute messages: {str(e)}\")\n",
        "    print(\"\\nNote: If 'Results/Summary Output' is not in the file structure, it might indicate that the simulation didn't complete successfully or the results weren't saved properly.\")\n",
        "\n",
        " \n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Exploring HDF Datasets with HdfBase.get_dataset_info\n",
        "This allows users to find HDF information that is not included in the ras-commander library.  Find the path in HDFView and set the group_path below to explore the HDF datasets and attributes.  Then, use the output to write your own function to extract the data.  "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Get HDF Paths with Properties (For Exploring HDF Files)\n",
        "HdfBase.get_dataset_info(plan_number, group_path=\"/\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "For HDF datasets that are not supported by the RAS-Commadner library, provide the dataset path to HdfBase.get_dataset_info and provide the output to an LLM along with a relevent HDF* class(es) to generate new functions that extend the library's coverage.   "
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "rascmdr",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}
==================================================

File: c:\GH\ras-commander\examples\12_2d_hdf_data_extraction pipes and pumps.ipynb
==================================================
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# HEC-RAS Pipes, Conduits, and Pump Stations HDF Data Analysis Notebook\n",
        "\n",
        "This notebook demonstrates how to manipulate and analyze the new HEC-RAS Conduits, Pipes, and Pump Stations results using the ras-commander library. It leverages the HdfPipe and HdfPump classes to streamline data extraction, processing, and visualization."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Package Installation and Environment Setup\n",
        "Uncomment and run package installation commands if needed"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Install ras-commander from pip (uncomment to install if needed)\n",
        "#!pip install ras-commander\n",
        "# This installs ras-commander and all dependencies"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Import all required modules\n",
        "#from ras_commander import *  # Import all ras-commander modules\n",
        "\n",
        "# Import the required libraries for this notebook\n",
        "import h5py\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import requests\n",
        "from tqdm import tqdm\n",
        "import scipy\n",
        "import xarray as xr\n",
        "import geopandas as gpd\n",
        "import matplotlib.pyplot as plt\n",
        "from IPython import display\n",
        "import psutil  # For getting system CPU info\n",
        "from concurrent.futures import ThreadPoolExecutor, as_completed\n",
        "import time\n",
        "import subprocess\n",
        "import sys\n",
        "import os\n",
        "import shutil\n",
        "from datetime import datetime, timedelta\n",
        "from pathlib import Path  # Ensure pathlib is imported for file operations\n",
        "import pyproj\n",
        "from shapely.geometry import Point, LineString, Polygon\n",
        "import xarray as xr"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "ras_commander imported successfully\n"
          ]
        }
      ],
      "source": [
        "# This cell will try to import the pip package, if it fails it will \n",
        "# add the parent directory to the Python path and try to import again\n",
        "# This assumes you are working in a subfolder of the ras-commander repository\n",
        "# This allows a user's revisions to be tested locally without installing the package\n",
        "\n",
        "import sys\n",
        "from pathlib import Path\n",
        "\n",
        "# Flexible imports to allow for development without installation \n",
        "#  ** Use this version with Jupyter Notebooks **\n",
        "try:\n",
        "    # Try to import from the installed package\n",
        "    from ras_commander import *\n",
        "except ImportError:\n",
        "    # If the import fails, add the parent directory to the Python path\n",
        "    import os\n",
        "    current_file = Path(os.getcwd()).resolve()\n",
        "    rascmdr_directory = current_file.parent\n",
        "    sys.path.append(str(rascmdr_directory))\n",
        "    print(\"Loading ras-commander from local dev copy\")\n",
        "    # Now try to import again\n",
        "    from ras_commander import *\n",
        "print(\"ras_commander imported successfully\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Use Example Project or Load Your Own Project"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:01:05 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-09 08:01:05 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.rasmap\n",
            "2025-04-09 08:01:05 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Pipes Beta.p06.hdf already exists. Skipping project extraction and plan execution.\n"
          ]
        }
      ],
      "source": [
        "# Download the Pipes Beta project from HEC and run plan 01\n",
        "\n",
        "# Define the path to the Pipes Beta project\n",
        "current_dir = Path.cwd()  # Adjust if your notebook is in a different directory\n",
        "pipes_ex_path = current_dir / \"example_projects\" / \"Davis\"\n",
        "import logging\n",
        "\n",
        "# Check if Pipes Beta.p06.hdf exists (so we don't have to re-run the simulation when re-running or debugging)\n",
        "hdf_file = pipes_ex_path / \"DavisStormSystem.p02.hdf\"\n",
        "\n",
        "if not hdf_file.exists():\n",
        "    # Initialize RasExamples and extract the Pipes Beta project\n",
        "    RasExamples.extract_project([\"Davis\"])\n",
        "\n",
        "    # Initialize the RAS project using the ras. (Pipe Networks are only supported in versions 6.6 and above)\n",
        "    init_ras_project(pipes_ex_path, \"6.6\")\n",
        "    logging.info(f\"Pipes Beta project initialized with folder: {ras.project_folder}\")\n",
        "    \n",
        "    logging.info(f\"Pipes Beta object id: {id(ras)}\")\n",
        "    \n",
        "    # Define the plan number to execute\n",
        "    plan_number = \"02\"\n",
        "\n",
        "    # Update run flags for the project\n",
        "    RasPlan.update_run_flags(\n",
        "        plan_number,\n",
        "        geometry_preprocessor=True,\n",
        "        unsteady_flow_simulation=True,\n",
        "        run_sediment=False,\n",
        "        post_processor=True,\n",
        "        floodplain_mapping=False\n",
        "    )\n",
        "\n",
        "    # Execute Plan 06 using RasCmdr for Pipes Beta\n",
        "    print(f\"Executing Plan {plan_number} for the Pipes Beta Creek project...\")\n",
        "    success_pipes_ex = RasCmdr.compute_plan(plan_number)\n",
        "    if success_pipes_ex:\n",
        "        print(f\"Plan {plan_number} executed successfully for Pipes Beta.\\n\")\n",
        "    else:\n",
        "        print(f\"Plan {plan_number} execution failed for Pipes Beta.\\n\")\n",
        "else:\n",
        "    print(\"Pipes Beta.p06.hdf already exists. Skipping project extraction and plan execution.\")\n",
        "    # Initialize the RAS project using the ras.\n",
        "    init_ras_project(pipes_ex_path, \"6.6\")\n",
        "    plan_number = \"02\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "###  OPTIONAL: Use your own project instead\n",
        "\n",
        "your_project_path = Path(r\"D:\\yourprojectpath\")\n",
        "\n",
        "init_ras_project(your_project_path, \"6.6\")\n",
        "plan_number = \"01\"  # Plan number to use for this notebook \n",
        "\n",
        "\n",
        "\n",
        "### If you use this code cell, don't run the previous cell or change to markdown\n",
        "### NOTE: Ensure the HDF Results file was generated by HEC-RAS Version 6.x or above"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Explore Project Dataframes using 'ras' Object"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Plan DataFrame for the project:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>UNET D2 SolverType</th>\\n', '      <th>UNET D2 Name</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>02</td>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>Full System ROM with Pump</td>\\n', '      <td>6.60</td>\\n', '      <td>Full System ROM with Pump</td>\\n', '      <td>10JAN2000,1200,11JAN2000,2400</td>\\n', '      <td>12SEC</td>\\n', '      <td>10MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>PARDISO (Direct)</td>\\n', '      <td>area2</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  plan_number unsteady_number geometry_number                 Plan Title  \\\\\\n', '0          02              01              02  Full System ROM with Pump   \\n', '\\n', '  Program Version           Short Identifier                Simulation Date  \\\\\\n', '0            6.60  Full System ROM with Pump  10JAN2000,1200,11JAN2000,2400   \\n', '\\n', '  Computation Interval Mapping Interval Run HTab  ... DSS File  \\\\\\n', '0                12SEC            10MIN        1  ...      dss   \\n', '\\n', '  Friction Slope Method UNET D2 SolverType UNET D2 Name  \\\\\\n', '0                     1   PARDISO (Direct)        area2   \\n', '\\n', '                                    HDF_Results_Path Geom File  \\\\\\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...        02   \\n', '\\n', '                                           Geom Path  Flow File  \\\\\\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...         01   \\n', '\\n', '                                           Flow Path  \\\\\\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '\\n', '                                           full_path  \\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...  \\n', '\\n', '[1 rows x 29 columns]']"
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"Plan DataFrame for the project:\")\n",
        "ras.plan_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Unsteady DataFrame for the project:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>unsteady_number</th>\\n', '      <th>full_path</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Flow Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Use Restart</th>\\n', '      <th>Precipitation Mode</th>\\n', '      <th>Wind Mode</th>\\n', '      <th>Met BC=Precipitation|Mode</th>\\n', '      <th>Met BC=Evapotranspiration|Mode</th>\\n', '      <th>Met BC=Precipitation|Expanded View</th>\\n', '      <th>Met BC=Precipitation|Constant Units</th>\\n', '      <th>Met BC=Precipitation|Gridded Source</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>Full System Rain w/ Pump</td>\\n', '      <td>6.60</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>Constant</td>\\n', '      <td>None</td>\\n', '      <td>-1</td>\\n', '      <td>in/hr</td>\\n', '      <td>DSS</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  unsteady_number                                          full_path  \\\\\\n', '0              01  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '\\n', '  geometry_number                Flow Title Program Version Use Restart  \\\\\\n', '0            None  Full System Rain w/ Pump            6.60           0   \\n', '\\n', '  Precipitation Mode       Wind Mode Met BC=Precipitation|Mode  \\\\\\n', '0            Disable  No Wind Forces                  Constant   \\n', '\\n', '  Met BC=Evapotranspiration|Mode Met BC=Precipitation|Expanded View  \\\\\\n', '0                           None                                 -1   \\n', '\\n', '  Met BC=Precipitation|Constant Units Met BC=Precipitation|Gridded Source  \\n', '0                               in/hr                                 DSS  ']"
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nUnsteady DataFrame for the project:\")\n",
        "ras.unsteady_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Boundary Conditions DataFrame for the project:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>unsteady_number</th>\\n', '      <th>boundary_condition_number</th>\\n', '      <th>river_reach_name</th>\\n', '      <th>river_station</th>\\n', '      <th>storage_area_name</th>\\n', '      <th>pump_station_name</th>\\n', '      <th>bc_type</th>\\n', '      <th>hydrograph_type</th>\\n', '      <th>hydrograph_num_values</th>\\n', '      <th>Interval</th>\\n', '      <th>...</th>\\n', '      <th>Flow Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Use Restart</th>\\n', '      <th>Precipitation Mode</th>\\n', '      <th>Wind Mode</th>\\n', '      <th>Met BC=Precipitation|Mode</th>\\n', '      <th>Met BC=Evapotranspiration|Mode</th>\\n', '      <th>Met BC=Precipitation|Expanded View</th>\\n', '      <th>Met BC=Precipitation|Constant Units</th>\\n', '      <th>Met BC=Precipitation|Gridded Source</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>01</td>\\n', '      <td>1</td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td>Normal Depth</td>\\n', '      <td>None</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>...</td>\\n', '      <td>Full System Rain w/ Pump</td>\\n', '      <td>6.60</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>Constant</td>\\n', '      <td>None</td>\\n', '      <td>-1</td>\\n', '      <td>in/hr</td>\\n', '      <td>DSS</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>01</td>\\n', '      <td>2</td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td>Unknown</td>\\n', '      <td>None</td>\\n', '      <td>0</td>\\n', '      <td>1HOUR</td>\\n', '      <td>...</td>\\n', '      <td>Full System Rain w/ Pump</td>\\n', '      <td>6.60</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>Constant</td>\\n', '      <td>None</td>\\n', '      <td>-1</td>\\n', '      <td>in/hr</td>\\n', '      <td>DSS</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  unsteady_number  boundary_condition_number river_reach_name river_station  \\\\\\n', '0              01                          1                                  \\n', '1              01                          2                                  \\n', '\\n', '  storage_area_name pump_station_name       bc_type hydrograph_type  \\\\\\n', '0                                      Normal Depth            None   \\n', '1                                           Unknown            None   \\n', '\\n', '   hydrograph_num_values Interval  ...                Flow Title  \\\\\\n', '0                      0      NaN  ...  Full System Rain w/ Pump   \\n', '1                      0    1HOUR  ...  Full System Rain w/ Pump   \\n', '\\n', '  Program Version Use Restart Precipitation Mode       Wind Mode  \\\\\\n', '0            6.60           0            Disable  No Wind Forces   \\n', '1            6.60           0            Disable  No Wind Forces   \\n', '\\n', '  Met BC=Precipitation|Mode Met BC=Evapotranspiration|Mode  \\\\\\n', '0                  Constant                           None   \\n', '1                  Constant                           None   \\n', '\\n', '  Met BC=Precipitation|Expanded View Met BC=Precipitation|Constant Units  \\\\\\n', '0                                 -1                               in/hr   \\n', '1                                 -1                               in/hr   \\n', '\\n', '  Met BC=Precipitation|Gridded Source  \\n', '0                                 DSS  \\n', '1                                 DSS  \\n', '\\n', '[2 rows x 28 columns]']"
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nBoundary Conditions DataFrame for the project:\")\n",
        "ras.boundaries_df "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>UNET D2 SolverType</th>\\n', '      <th>UNET D2 Name</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>02</td>\\n', '      <td>01</td>\\n', '      <td>02</td>\\n', '      <td>Full System ROM with Pump</td>\\n', '      <td>6.60</td>\\n', '      <td>Full System ROM with Pump</td>\\n', '      <td>10JAN2000,1200,11JAN2000,2400</td>\\n', '      <td>12SEC</td>\\n', '      <td>10MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>PARDISO (Direct)</td>\\n', '      <td>area2</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>02</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  plan_number unsteady_number geometry_number                 Plan Title  \\\\\\n', '0          02              01              02  Full System ROM with Pump   \\n', '\\n', '  Program Version           Short Identifier                Simulation Date  \\\\\\n', '0            6.60  Full System ROM with Pump  10JAN2000,1200,11JAN2000,2400   \\n', '\\n', '  Computation Interval Mapping Interval Run HTab  ... DSS File  \\\\\\n', '0                12SEC            10MIN        1  ...      dss   \\n', '\\n', '  Friction Slope Method UNET D2 SolverType UNET D2 Name  \\\\\\n', '0                     1   PARDISO (Direct)        area2   \\n', '\\n', '                                    HDF_Results_Path Geom File  \\\\\\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...        02   \\n', '\\n', '                                           Geom Path  Flow File  \\\\\\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...         01   \\n', '\\n', '                                           Flow Path  \\\\\\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '\\n', '                                           full_path  \\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...  \\n', '\\n', '[1 rows x 29 columns]']"
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Get HDF Results Entries (only present when results are present)\n",
        "ras.get_hdf_entries()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Find Paths for Results and Geometry HDF's"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Get the plan HDF path for the plan_number defined above\n",
        "plan_hdf_path = ras.plan_df.loc[ras.plan_df['plan_number'] == plan_number, 'HDF_Results_Path'].values[0]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": "[\"'d:\\\\\\\\GitHub\\\\\\\\ras-commander\\\\\\\\examples\\\\\\\\example_projects\\\\\\\\Davis\\\\\\\\DavisStormSystem.p02.hdf'\"]"
          },
          "execution_count": 10,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "plan_hdf_path"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Alternate: Get the geometry HDF path if you are extracting geometry elements from the geometry HDF\n",
        "geom_hdf_path = ras.plan_df.loc[ras.plan_df['plan_number'] == plan_number, 'Geom Path'].values[0] + '.hdf'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": "[\"'d:\\\\\\\\GitHub\\\\\\\\ras-commander\\\\\\\\examples\\\\\\\\example_projects\\\\\\\\Davis\\\\\\\\DavisStormSystem.g02.hdf'\"]"
          },
          "execution_count": 12,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "geom_hdf_path"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:01:05 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:05 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:05 - ras_commander.HdfResultsPlan - INFO - Plan Name: Full System ROM with Pump\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Extracting runtime and compute time data\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:01:05 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 36.0\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Plan Name</th>\\n', '      <th>File Name</th>\\n', '      <th>Simulation Start Time</th>\\n', '      <th>Simulation End Time</th>\\n', '      <th>Simulation Duration (s)</th>\\n', '      <th>Simulation Time (hr)</th>\\n', '      <th>Completing Geometry (hr)</th>\\n', '      <th>Preprocessing Geometry (hr)</th>\\n', '      <th>Completing Event Conditions (hr)</th>\\n', '      <th>Unsteady Flow Computations (hr)</th>\\n', '      <th>Complete Process (hr)</th>\\n', '      <th>Unsteady Flow Speed (hr/hr)</th>\\n', '      <th>Complete Process Speed (hr/hr)</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>Full System ROM with Pump</td>\\n', '      <td>DavisStormSystem.p02.hdf</td>\\n', '      <td>2000-01-10 12:00:00</td>\\n', '      <td>2000-01-12</td>\\n', '      <td>129600.0</td>\\n', '      <td>36.0</td>\\n', '      <td>N/A</td>\\n', '      <td>0.000061</td>\\n', '      <td>N/A</td>\\n', '      <td>0.021918</td>\\n', '      <td>0.023529</td>\\n', '      <td>1642.460649</td>\\n', '      <td>1530.052064</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['                   Plan Name                 File Name Simulation Start Time  \\\\\\n', '0  Full System ROM with Pump  DavisStormSystem.p02.hdf   2000-01-10 12:00:00   \\n', '\\n', '  Simulation End Time  Simulation Duration (s)  Simulation Time (hr)  \\\\\\n', '0          2000-01-12                 129600.0                  36.0   \\n', '\\n', '  Completing Geometry (hr)  Preprocessing Geometry (hr)  \\\\\\n', '0                      N/A                     0.000061   \\n', '\\n', '  Completing Event Conditions (hr)  Unsteady Flow Computations (hr)  \\\\\\n', '0                              N/A                         0.021918   \\n', '\\n', '   Complete Process (hr)  Unsteady Flow Speed (hr/hr)  \\\\\\n', '0               0.023529                  1642.460649   \\n', '\\n', '   Complete Process Speed (hr/hr)  \\n', '0                     1530.052064  ']"
          },
          "execution_count": 13,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Extract runtime and compute time data\n",
        "print(\"\\nExtracting runtime and compute time data\")\n",
        "runtime_df = HdfResultsPlan.get_runtime_data(hdf_path=plan_number)\n",
        "runtime_df\n",
        " "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "-----"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# 2D Models with Pipe Networks: HDF Data Extraction Examples"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:01:05 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Pipe Conduits: pipe_conduits_gdf\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Name</th>\\n', '      <th>System Name</th>\\n', '      <th>US Node</th>\\n', '      <th>DS Node</th>\\n', '      <th>Modeling Approach</th>\\n', '      <th>Conduit Length</th>\\n', '      <th>Max Cell Length</th>\\n', '      <th>Shape</th>\\n', '      <th>Rise</th>\\n', '      <th>Span</th>\\n', '      <th>...</th>\\n', '      <th>Slope</th>\\n', '      <th>US Entrance Loss Coefficient</th>\\n', '      <th>DS Exit Loss Coefficient</th>\\n', '      <th>US Backflow Loss Coefficient</th>\\n', '      <th>DS Backflow Loss Coefficient</th>\\n', '      <th>DS Flap Gate</th>\\n', '      <th>Major Group</th>\\n', '      <th>Minor Group</th>\\n', '      <th>Polyline</th>\\n', '      <th>Terrain_Profiles</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>134</td>\\n', '      <td>Davis</td>\\n', '      <td>O13-DMH007</td>\\n', '      <td>O13-DMH006</td>\\n', '      <td>hydraulic</td>\\n', '      <td>443.740020</td>\\n', '      <td>40.0</td>\\n', '      <td>circular</td>\\n', '      <td>6.00</td>\\n', '      <td>6.00</td>\\n', '      <td>...</td>\\n', '      <td>0.002723</td>\\n', '      <td>0.2</td>\\n', '      <td>0.4</td>\\n', '      <td>0.2</td>\\n', '      <td>0.4</td>\\n', '      <td>0</td>\\n', '      <td>Major Group 2</td>\\n', '      <td></td>\\n', '      <td>LINESTRING (6635295.441 1965214.2465, 6635196....</td>\\n', '      <td>[(0.0, 40.819695), (21.217846, 40.642994), (35...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>133</td>\\n', '      <td>Davis</td>\\n', '      <td>O13-DMH024</td>\\n', '      <td>O13-DMH009</td>\\n', '      <td>hydraulic</td>\\n', '      <td>800.000024</td>\\n', '      <td>40.0</td>\\n', '      <td>circular</td>\\n', '      <td>6.00</td>\\n', '      <td>6.00</td>\\n', '      <td>...</td>\\n', '      <td>0.001904</td>\\n', '      <td>0.2</td>\\n', '      <td>0.4</td>\\n', '      <td>0.2</td>\\n', '      <td>0.4</td>\\n', '      <td>0</td>\\n', '      <td>Major Group 2</td>\\n', '      <td></td>\\n', '      <td>LINESTRING (6635597.5485 1964008.2795, 6635403...</td>\\n', '      <td>[(0.0, 40.530186), (21.1467, 40.44057), (50.88...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>132</td>\\n', '      <td>Davis</td>\\n', '      <td>O13-DMH006</td>\\n', '      <td>O13-SDS03</td>\\n', '      <td>hydraulic</td>\\n', '      <td>443.740070</td>\\n', '      <td>40.0</td>\\n', '      <td>circular</td>\\n', '      <td>6.00</td>\\n', '      <td>6.00</td>\\n', '      <td>...</td>\\n', '      <td>0.002816</td>\\n', '      <td>0.2</td>\\n', '      <td>0.4</td>\\n', '      <td>0.2</td>\\n', '      <td>0.4</td>\\n', '      <td>0</td>\\n', '      <td>Major Group 2</td>\\n', '      <td></td>\\n', '      <td>LINESTRING (6635196.5532 1965646.8276, 6635131...</td>\\n', '      <td>[(0.0, 41.700996), (26.817467, 41.552666), (83...</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>131</td>\\n', '      <td>Davis</td>\\n', '      <td>N13-DMH022</td>\\n', '      <td>O13-SDS03</td>\\n', '      <td>hydraulic</td>\\n', '      <td>982.809915</td>\\n', '      <td>40.0</td>\\n', '      <td>circular</td>\\n', '      <td>6.00</td>\\n', '      <td>6.00</td>\\n', '      <td>...</td>\\n', '      <td>0.002059</td>\\n', '      <td>0.2</td>\\n', '      <td>0.4</td>\\n', '      <td>0.2</td>\\n', '      <td>0.4</td>\\n', '      <td>0</td>\\n', '      <td>Major Group</td>\\n', '      <td></td>\\n', '      <td>LINESTRING (6634067.2602 1966167.7235, 6634761...</td>\\n', '      <td>[(0.0, 43.376995), (17.315952, 43.37471), (42....</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>130</td>\\n', '      <td>Davis</td>\\n', '      <td>O13-DMH009</td>\\n', '      <td>O13-DMH007</td>\\n', '      <td>hydraulic</td>\\n', '      <td>443.231808</td>\\n', '      <td>40.0</td>\\n', '      <td>circular</td>\\n', '      <td>6.00</td>\\n', '      <td>6.00</td>\\n', '      <td>...</td>\\n', '      <td>0.000871</td>\\n', '      <td>0.2</td>\\n', '      <td>0.4</td>\\n', '      <td>0.2</td>\\n', '      <td>0.4</td>\\n', '      <td>0</td>\\n', '      <td>Major Group 2</td>\\n', '      <td></td>\\n', '      <td>LINESTRING (6635403.0525 1964784.2765, 6635295...</td>\\n', '      <td>[(0.0, 40.699738), (84.2007, 40.623585), (113....</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['    Name System Name     US Node     DS Node Modeling Approach  \\\\\\n', '0    134       Davis  O13-DMH007  O13-DMH006         hydraulic   \\n', '1    133       Davis  O13-DMH024  O13-DMH009         hydraulic   \\n', '2    132       Davis  O13-DMH006   O13-SDS03         hydraulic   \\n', '3    131       Davis  N13-DMH022   O13-SDS03         hydraulic   \\n', '4    130       Davis  O13-DMH009  O13-DMH007         hydraulic   \\n', '..   ...         ...         ...         ...               ...   \\n', '127    5       Davis   P13-DI019  P13-DMH014         hydraulic   \\n', '128    4       Davis   O14-DI083   O14-DI081         hydraulic   \\n', '129    3       Davis   P12-DI011  P12-DMH005         hydraulic   \\n', '130    2       Davis   P12-DI012   P12-DI011         hydraulic   \\n', '131    1       Davis   P12-DI041   P12-DI042         hydraulic   \\n', '\\n', '     Conduit Length  Max Cell Length     Shape  Rise  Span  ...     Slope  \\\\\\n', '0        443.740020             40.0  circular  6.00  6.\n...\n[Output truncated, 5739 characters total]"
          },
          "execution_count": 14,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Get pipe conduits\n",
        "pipe_conduits_gdf = HdfPipe.get_pipe_conduits(\"02\") # NOTE: Here we use the plan number instead of the path variable.  The library decorators ensure this maps correctly.  \n",
        "print(\"\\nPipe Conduits: pipe_conduits_gdf\")\n",
        "pipe_conduits_gdf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x900 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Plot the pipe conduit linestrings\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Create a new figure with a specified size\n",
        "plt.figure(figsize=(12, 9))\n",
        "\n",
        "# Plot each linestring from the GeoDataFrame\n",
        "for idx, row in pipe_conduits_gdf.iterrows():\n",
        "    # Extract coordinates from the linestring\n",
        "    x_coords, y_coords = row['Polyline'].xy\n",
        "    \n",
        "    # Plot the linestring\n",
        "    plt.plot(x_coords, y_coords, 'b-', linewidth=1, alpha=0.7)\n",
        "    \n",
        "    # Add vertical line markers at endpoints\n",
        "    plt.plot([x_coords[0]], [y_coords[0]], 'x', color='black', markersize=4)\n",
        "    plt.plot([x_coords[-1]], [y_coords[-1]], 'x', color='black', markersize=4)\n",
        "    \n",
        "    # Calculate center point of the line\n",
        "    center_x = (x_coords[0] + x_coords[-1]) / 2\n",
        "    center_y = (y_coords[0] + y_coords[-1]) / 2\n",
        "    \n",
        "    # Add pipe name label at center, oriented top-right\n",
        "    plt.text(center_x, center_y, f'{row[\"Name\"]}', fontsize=8, \n",
        "             verticalalignment='bottom', horizontalalignment='left',\n",
        "             rotation=45)  # 45 degree angle for top-right orientation\n",
        "\n",
        "# Add title and labels\n",
        "plt.title('Pipe Conduit Network Layout')\n",
        "plt.xlabel('Easting')\n",
        "plt.ylabel('Northing')\n",
        "\n",
        "# Add grid\n",
        "plt.grid(True, linestyle='--', alpha=0.6)\n",
        "\n",
        "# Adjust layout to prevent label clipping\n",
        "plt.tight_layout()\n",
        "\n",
        "# Display the plot\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Plot the first 2 terrain profiles\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Extract terrain profiles from the GeoDataFrame\n",
        "terrain_profiles = pipe_conduits_gdf['Terrain_Profiles'].tolist()\n",
        "\n",
        "# Create separate plots for the first 2 terrain profiles\n",
        "for i in range(2):\n",
        "    profile = terrain_profiles[i]\n",
        "    \n",
        "    # Unzip the profile into x and y coordinates\n",
        "    x_coords, y_coords = zip(*profile)\n",
        "    \n",
        "    # Create a new figure for each profile\n",
        "    plt.figure(figsize=(12, 6))\n",
        "    plt.plot(x_coords, y_coords, marker='o', linestyle='-', color='g', alpha=0.7)\n",
        "    \n",
        "    # Add title and labels\n",
        "    plt.title(f'Terrain Profile {i + 1}')\n",
        "    plt.xlabel('Distance along profile (m)')\n",
        "    plt.ylabel('Elevation (m)')\n",
        "    \n",
        "    # Add grid\n",
        "    plt.grid(True, linestyle='--', alpha=0.6)\n",
        "    \n",
        "    # Adjust layout to prevent label clipping\n",
        "    plt.tight_layout()\n",
        "    \n",
        "    # Display the plot\n",
        "    plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Use get_hdf5_dataset_info function to get Pipe Conduits data:\n",
        "#HdfUtils.get_hdf5_dataset_info(plan_hdf_path, \"/Geometry/Pipe Nodes/\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:01:07 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:07 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Pipe Nodes:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Name</th>\\n', '      <th>System Name</th>\\n', '      <th>Node Type</th>\\n', '      <th>Node Status</th>\\n', '      <th>Condtui Connections (US:DS)</th>\\n', '      <th>Invert Elevation</th>\\n', '      <th>Base Area</th>\\n', '      <th>Terrain Elevation</th>\\n', '      <th>Terrain Elevation Override</th>\\n', '      <th>Depth</th>\\n', '      <th>Drop Inlet Elevation</th>\\n', '      <th>Drop Inlet Weir Length</th>\\n', '      <th>Drop Inlet Weir Coefficient</th>\\n', '      <th>Drop Inlet Orifice Area</th>\\n', '      <th>Drop Inlet Orifice Coefficient</th>\\n', '      <th>Total Connection Count</th>\\n', '      <th>geometry</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>O14-di027</td>\\n', '      <td>Davis</td>\\n', '      <td>Junction</td>\\n', '      <td>Junction with drop inlet</td>\\n', '      <td>1:1</td>\\n', '      <td>36.060001</td>\\n', '      <td>36.0</td>\\n', '      <td>39.860001</td>\\n', '      <td>NaN</td>\\n', '      <td>3.799999</td>\\n', '      <td>39.863369</td>\\n', '      <td>3.0</td>\\n', '      <td>3.3</td>\\n', '      <td>1.0</td>\\n', '      <td>0.67</td>\\n', '      <td>2</td>\\n', '      <td>POINT (6637926.81 1964917.32)</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>P11-DMH004</td>\\n', '      <td>Davis</td>\\n', '      <td>Junction</td>\\n', '      <td>Junction with drop inlet</td>\\n', '      <td>1:1</td>\\n', '      <td>38.169998</td>\\n', '      <td>36.0</td>\\n', '      <td>48.720001</td>\\n', '      <td>NaN</td>\\n', '      <td>10.550003</td>\\n', '      <td>48.718811</td>\\n', '      <td>3.0</td>\\n', '      <td>3.3</td>\\n', '      <td>1.0</td>\\n', '      <td>0.67</td>\\n', '      <td>2</td>\\n', '      <td>POINT (6629444.634 1963504.411)</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>O14-DMH005</td>\\n', '      <td>Davis</td>\\n', '      <td>Junction</td>\\n', '      <td>Junction with drop inlet</td>\\n', '      <td>1:1</td>\\n', '      <td>31.559999</td>\\n', '      <td>36.0</td>\\n', '      <td>40.840000</td>\\n', '      <td>NaN</td>\\n', '      <td>9.280001</td>\\n', '      <td>40.843731</td>\\n', '      <td>3.0</td>\\n', '      <td>3.3</td>\\n', '      <td>1.0</td>\\n', '      <td>0.67</td>\\n', '      <td>2</td>\\n', '      <td>POINT (6637368.497 1966084.574)</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>P11-DMH011</td>\\n', '      <td>Davis</td>\\n', '      <td>Junction</td>\\n', '      <td>Junction with drop inlet</td>\\n', '      <td>1:1</td>\\n', '      <td>37.400002</td>\\n', '      <td>36.0</td>\\n', '      <td>45.330002</td>\\n', '      <td>NaN</td>\\n', '      <td>7.930000</td>\\n', '      <td>45.332291</td>\\n', '      <td>3.0</td>\\n', '      <td>3.3</td>\\n', '      <td>1.0</td>\\n', '      <td>0.67</td>\\n', '      <td>2</td>\\n', '      <td>POINT (6630653.519 1963548.271)</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>O15-DMH016</td>\\n', '      <td>Davis</td>\\n', '      <td>Start</td>\\n', '      <td>US Junction, with drop inlet</td>\\n', '      <td>0:1</td>\\n', '      <td>38.639999</td>\\n', '      <td>36.0</td>\\n', '      <td>41.700001</td>\\n', '      <td>NaN</td>\\n', '      <td>3.060001</td>\\n', '      <td>41.700871</td>\\n', '      <td>3.0</td>\\n', '      <td>3.3</td>\\n', '      <td>1.0</td>\\n', '      <td>0.67</td>\\n', '      <td>1</td>\\n', '      <td>POINT (6638669.136 1964981.664)</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['           Name System Name Node Type                   Node Status  \\\\\\n', '0     O14-di027       Davis  Junction      Junction with drop inlet   \\n', '1    P11-DMH004       Davis  Junction      Junction with drop inlet   \\n', '2    O14-DMH005       Davis  Junction      Junction with drop inlet   \\n', '3    P11-DMH011       Davis  Junction      Junction with drop inlet   \\n', '4    O15-DMH016       Davis     Start  US Junction, with drop inlet   \\n', '..          ...         ...       ...                           ...   \\n', '128  O11-DMH017       Davis  Junction      Junction with drop inlet   \\n', '129  N12-DMH010       Davis  Junction      Junction with drop inlet   \\n', '130  N12-DMH009       Davis  Junction      Junction with drop inlet   \\n', '131  N12-DMH027       Davis  Junction      Junction with drop inlet   \\n', '132   O13-SDS03       Davis  Junction      Junction with drop inlet   \\n', '\\n', '    Condtui Connections (US:DS)  Invert Elevation  Base Area  \\\\\\n', '0        \n...\n[Output truncated, 5487 characters total]"
          },
          "execution_count": 18,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Get pipe nodes\n",
        "pipe_nodes_gdf = HdfPipe.get_pipe_nodes(plan_hdf_path)\n",
        "print(\"\\nPipe Nodes:\")\n",
        "pipe_nodes_gdf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Use get_hdf5_dataset_info function to get Pipe Conduits data:\n",
        "#HdfUtils.get_hdf5_dataset_info(plan_hdf_path, \"/Geometry/Pipe Networks/\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:01:07 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:07 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:07 - root - INFO - Selected Pipe Network: Davis\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Pipe Network Data:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Cell_ID</th>\\n', '      <th>Conduit_ID</th>\\n', '      <th>Node_ID</th>\\n', '      <th>Minimum_Elevation</th>\\n', '      <th>DS_Face_Indices</th>\\n', '      <th>Face_Indices</th>\\n', '      <th>US_Face_Indices</th>\\n', '      <th>Cell_Property_Info_Index</th>\\n', '      <th>US Face Elevation</th>\\n', '      <th>DS Face Elevation</th>\\n', '      <th>Min Elevation</th>\\n', '      <th>Area</th>\\n', '      <th>Info Index</th>\\n', '      <th>Cell_Polygon</th>\\n', '      <th>Face_Polylines</th>\\n', '      <th>Node_Point</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>0</td>\\n', '      <td>0</td>\\n', '      <td>-1</td>\\n', '      <td>26.824432</td>\\n', '      <td>[1]</td>\\n', '      <td>[0, 1]</td>\\n', '      <td>[0]</td>\\n', '      <td>0</td>\\n', '      <td>26.934290</td>\\n', '      <td>26.824432</td>\\n', '      <td>26.824432</td>\\n', '      <td>242.040024</td>\\n', '      <td>0</td>\\n', '      <td>POLYGON ((6635288.02154 1965233.24073, 6635279...</td>\\n', '      <td>[LINESTRING (6635288.021542038 1965233.2407260...</td>\\n', '      <td>None</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>1</td>\\n', '      <td>0</td>\\n', '      <td>-1</td>\\n', '      <td>26.714573</td>\\n', '      <td>[2]</td>\\n', '      <td>[1, 2]</td>\\n', '      <td>[1]</td>\\n', '      <td>0</td>\\n', '      <td>26.934290</td>\\n', '      <td>26.824432</td>\\n', '      <td>26.824432</td>\\n', '      <td>242.040024</td>\\n', '      <td>0</td>\\n', '      <td>POLYGON ((6635288.02154 1965233.24073, 6635279...</td>\\n', '      <td>[LINESTRING (6635288.021542038 1965233.2407260...</td>\\n', '      <td>None</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>2</td>\\n', '      <td>0</td>\\n', '      <td>-1</td>\\n', '      <td>26.604715</td>\\n', '      <td>[3]</td>\\n', '      <td>[2, 3]</td>\\n', '      <td>[2]</td>\\n', '      <td>0</td>\\n', '      <td>26.934290</td>\\n', '      <td>26.824432</td>\\n', '      <td>26.824432</td>\\n', '      <td>242.040024</td>\\n', '      <td>0</td>\\n', '      <td>POLYGON ((6635288.02154 1965233.24073, 6635279...</td>\\n', '      <td>[LINESTRING (6635288.021542038 1965233.2407260...</td>\\n', '      <td>None</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>3</td>\\n', '      <td>0</td>\\n', '      <td>-1</td>\\n', '      <td>26.494858</td>\\n', '      <td>[4]</td>\\n', '      <td>[3, 4]</td>\\n', '      <td>[3]</td>\\n', '      <td>0</td>\\n', '      <td>26.934290</td>\\n', '      <td>26.824432</td>\\n', '      <td>26.824432</td>\\n', '      <td>242.040024</td>\\n', '      <td>0</td>\\n', '      <td>POLYGON ((6635288.02154 1965233.24073, 6635279...</td>\\n', '      <td>[LINESTRING (6635288.021542038 1965233.2407260...</td>\\n', '      <td>None</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>4</td>\\n', '      <td>0</td>\\n', '      <td>-1</td>\\n', '      <td>26.385000</td>\\n', '      <td>[5]</td>\\n', '      <td>[4, 5]</td>\\n', '      <td>[4]</td>\\n', '      <td>0</td>\\n', '      <td>26.934290</td>\\n', '      <td>26.824432</td>\\n', '      <td>26.824432</td>\\n', '      <td>242.040024</td>\\n', '      <td>0</td>\\n', '      <td>POLYGON ((6635288.02154 1965233.24073, 6635279...</td>\\n', '      <td>[LINESTRING (6635288.021542038 1965233.2407260...</td>\\n', '      <td>None</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['      Cell_ID  Conduit_ID  Node_ID  Minimum_Elevation DS_Face_Indices  \\\\\\n', '0           0           0       -1          26.824432             [1]   \\n', '1           1           0       -1          26.714573             [2]   \\n', '2           2           0       -1          26.604715             [3]   \\n', '3           3           0       -1          26.494858             [4]   \\n', '4           4           0       -1          26.385000             [5]   \\n', '...       ...         ...      ...                ...             ...   \\n', '1987     1987          -1       72          39.456257          [1976]   \\n', '1988     1988          -1       79          42.074768          [1977]   \\n', '1989     1989          -1       42          40.804863          [1984]   \\n', '1990     1990          -1       46          41.998379          [1987]   \\n', '1991     1991          -1       45          37.606800          [1989]   \\n', '\\n', '      Face_Indices US_Face_Indices  Cell_Property_Info_\n...\n[Output truncated, 4562 characters total]"
          },
          "execution_count": 20,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Get pipe network data\n",
        "pipe_network_gdf = HdfPipe.get_pipe_network(plan_hdf_path)\n",
        "print(\"\\nPipe Network Data:\")\n",
        "pipe_network_gdf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:01:07 - ras_commander.HdfPump - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:07 - ras_commander.HdfPump - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:07 - ras_commander.HdfBase - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:07 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:07 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Pump Stations:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>geometry</th>\\n', '      <th>station_id</th>\\n', '      <th>Name</th>\\n', '      <th>Inlet River</th>\\n', '      <th>Inlet Reach</th>\\n', '      <th>Inlet RS</th>\\n', '      <th>Inlet RS Distance</th>\\n', '      <th>Inlet SA/2D</th>\\n', '      <th>Inlet Pipe Node</th>\\n', '      <th>Outlet River</th>\\n', '      <th>...</th>\\n', '      <th>Outlet Pipe Node</th>\\n', '      <th>Reference River</th>\\n', '      <th>Reference Reach</th>\\n', '      <th>Reference RS</th>\\n', '      <th>Reference RS Distance</th>\\n', '      <th>Reference SA/2D</th>\\n', '      <th>Reference Point</th>\\n', '      <th>Reference Pipe Node</th>\\n', '      <th>Highest Pump Line Elevation</th>\\n', '      <th>Pump Groups</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>POINT (6635027.027 1966080.07)</td>\\n', '      <td>0</td>\\n', '      <td>Pump Station #1</td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td>NaN</td>\\n', '      <td></td>\\n', '      <td>Davis [O13-SDS03]</td>\\n', '      <td></td>\\n', '      <td>...</td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td>NaN</td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td>NaN</td>\\n', '      <td>1</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['                         geometry  station_id             Name Inlet River  \\\\\\n', '0  POINT (6635027.027 1966080.07)           0  Pump Station #1               \\n', '\\n', '  Inlet Reach Inlet RS  Inlet RS Distance Inlet SA/2D    Inlet Pipe Node  \\\\\\n', '0                                     NaN              Davis [O13-SDS03]   \\n', '\\n', '  Outlet River  ... Outlet Pipe Node Reference River  Reference Reach  \\\\\\n', '0               ...                                                     \\n', '\\n', '  Reference RS Reference RS Distance Reference SA/2D Reference Point  \\\\\\n', '0                                NaN                                   \\n', '\\n', '  Reference Pipe Node  Highest Pump Line Elevation Pump Groups  \\n', '0                                              NaN           1  \\n', '\\n', '[1 rows x 24 columns]']"
          },
          "execution_count": 21,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Get pump stations\n",
        "pump_stations_gdf = HdfPump.get_pump_stations(plan_hdf_path)\n",
        "print(\"\\nPump Stations:\")\n",
        "pump_stations_gdf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:01:07 - ras_commander.HdfPump - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:07 - ras_commander.HdfPump - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Pump Groups:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Pump Station ID</th>\\n', '      <th>Name</th>\\n', '      <th>Bias On</th>\\n', '      <th>Start Up Time</th>\\n', '      <th>Shut Down Time</th>\\n', '      <th>Width</th>\\n', '      <th>Pumps</th>\\n', '      <th>efficiency_curve_start</th>\\n', '      <th>efficiency_curve_count</th>\\n', '      <th>efficiency_curve</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>0</td>\\n', '      <td>Pump Station #1</td>\\n', '      <td>0</td>\\n', '      <td>5.0</td>\\n', '      <td>NaN</td>\\n', '      <td>5.0</td>\\n', '      <td>1</td>\\n', '      <td>0</td>\\n', '      <td>6</td>\\n', '      <td>[[2.0, 70.0], [4.0, 60.0], [6.0, 55.0], [8.0, ...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['   Pump Station ID             Name  Bias On  Start Up Time  Shut Down Time  \\\\\\n', '0                0  Pump Station #1        0            5.0             NaN   \\n', '\\n', '   Width  Pumps  efficiency_curve_start  efficiency_curve_count  \\\\\\n', '0    5.0      1                       0                       6   \\n', '\\n', '                                    efficiency_curve  \\n', '0  [[2.0, 70.0], [4.0, 60.0], [6.0, 55.0], [8.0, ...  ']"
          },
          "execution_count": 22,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Get pump groups\n",
        "pump_groups_df = HdfPump.get_pump_groups(plan_hdf_path)\n",
        "print(\"\\nPump Groups:\")\n",
        "pump_groups_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:01:07 - ras_commander.HdfBase - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.g02.hdf\n",
            "2025-04-09 08:01:07 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.g02.hdf\n",
            "2025-04-09 08:01:07 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.g02.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Extracting Projection from HDF\n",
            "Projection: PROJCS[\"NAD83(HARN) / California zone 2 (ftUS)\",GEOGCS[\"NAD83(HARN)\",DATUM[\"D_North_American_1983_HARN\",SPHEROID[\"GRS_1980\",6378137,298.257222101]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.017453292519943295]],PROJECTION[\"Lambert_Conformal_Conic\"],PARAMETER[\"standard_parallel_1\",39.83333333333334],PARAMETER[\"standard_parallel_2\",38.33333333333334],PARAMETER[\"latitude_of_origin\",37.66666666666666],PARAMETER[\"central_meridian\",-122],PARAMETER[\"false_easting\",6561666.667],PARAMETER[\"false_northing\",1640416.667],UNIT[\"Foot_US\",0.30480060960121924]]\n"
          ]
        }
      ],
      "source": [
        "# Use HdfUtils for extracting projection\n",
        "print(\"\\nExtracting Projection from HDF\")\n",
        "projection = HdfBase.get_projection(hdf_path=geom_hdf_path)\n",
        "print(f\"Projection: {projection}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:01:08 - ras_commander.HdfMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.g02.hdf\n",
            "2025-04-09 08:01:08 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.g02.hdf\n",
            "2025-04-09 08:01:08 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.g02.hdf\n",
            "2025-04-09 08:01:08 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.g02.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Pipe Conduits GeoDataFrame columns:\n",
            "Index(['Name', 'System Name', 'US Node', 'DS Node', 'Modeling Approach',\n",
            "       'Conduit Length', 'Max Cell Length', 'Shape', 'Rise', 'Span',\n",
            "       'Manning's n', 'US Offset', 'DS Offset', 'US Elevation', 'DS Elevation',\n",
            "       'Slope', 'US Entrance Loss Coefficient', 'DS Exit Loss Coefficient',\n",
            "       'US Backflow Loss Coefficient', 'DS Backflow Loss Coefficient',\n",
            "       'DS Flap Gate', 'Major Group', 'Minor Group', 'Polyline',\n",
            "       'Terrain_Profiles'],\n",
            "      dtype='object')\n",
            "\n",
            "Pipe Nodes GeoDataFrame columns:\n",
            "Index(['Name', 'System Name', 'Node Type', 'Node Status',\n",
            "       'Condtui Connections (US:DS)', 'Invert Elevation', 'Base Area',\n",
            "       'Terrain Elevation', 'Terrain Elevation Override', 'Depth',\n",
            "       'Drop Inlet Elevation', 'Drop Inlet Weir Length',\n",
            "       'Drop Inlet Weir Coefficient', 'Drop Inlet Orifice Area',\n",
            "       'Drop Inlet Orifice Coefficient', 'Total Connection Count', 'geometry'],\n",
            "      dtype='object')\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:01:08 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.g02.hdf\n",
            "2025-04-09 08:01:08 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.g02.hdf\n",
            "2025-04-09 08:01:08 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.g02.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Perimeter Polygons GeoDataFrame columns:\n",
            "Index(['mesh_name', 'geometry'], dtype='object')\n"
          ]
        }
      ],
      "source": [
        "# Set CRS for GeoDataFrames\n",
        "if projection:\n",
        "    pipe_conduits_gdf.set_crs(projection, inplace=True, allow_override=True)\n",
        "    pipe_nodes_gdf.set_crs(projection, inplace=True, allow_override=True)\n",
        "\n",
        "print(\"Pipe Conduits GeoDataFrame columns:\")\n",
        "print(pipe_conduits_gdf.columns)\n",
        "\n",
        "print(\"\\nPipe Nodes GeoDataFrame columns:\")\n",
        "print(pipe_nodes_gdf.columns)\n",
        "\n",
        "perimeter_polygons = HdfMesh.get_mesh_areas(geom_hdf_path)\n",
        "if projection:\n",
        "    perimeter_polygons.set_crs(projection, inplace=True, allow_override=True)\n",
        "    \n",
        "print(\"\\nPerimeter Polygons GeoDataFrame columns:\")\n",
        "print(perimeter_polygons.columns)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:01:08 - ras_commander.HdfMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.g02.hdf\n",
            "2025-04-09 08:01:08 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.g02.hdf\n",
            "2025-04-09 08:01:08 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.g02.hdf\n",
            "2025-04-09 08:01:08 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.g02.hdf\n",
            "2025-04-09 08:01:08 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.g02.hdf\n",
            "2025-04-09 08:01:08 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.g02.hdf\n",
            "2025-04-09 08:01:08 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.g02.hdf\n",
            "2025-04-09 08:01:08 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.g02.hdf\n",
            "2025-04-09 08:01:08 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.g02.hdf\n",
            "2025-04-09 08:01:08 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.g02.hdf\n",
            "2025-04-09 08:01:08 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.g02.hdf\n",
            "2025-04-09 08:01:08 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.g02.hdf\n",
            "2025-04-09 08:01:08 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.g02.hdf\n",
            "2025-04-09 08:01:08 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.g02.hdf\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 2800x2000 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from shapely import wkt\n",
        "import matplotlib.patches as mpatches\n",
        "import matplotlib.lines as mlines\n",
        "import numpy as np\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(28, 20))\n",
        "\n",
        "# Plot cell polygons with 50% transparency behind the pipe network\n",
        "cell_polygons_df = HdfMesh.get_mesh_cell_polygons(geom_hdf_path)\n",
        "if not cell_polygons_df.empty:\n",
        "    cell_polygons_df.plot(ax=ax, edgecolor='lightgray', facecolor='lightgray', alpha=0.5)\n",
        "\n",
        "# Plot pipe conduits - the Polyline column already contains LineString geometries\n",
        "pipe_conduits_gdf.set_geometry('Polyline', inplace=True)\n",
        "\n",
        "# Plot each pipe conduit individually to ensure all are shown\n",
        "for idx, row in pipe_conduits_gdf.iterrows():\n",
        "    ax.plot(*row.Polyline.xy, color='blue', linewidth=1)\n",
        "\n",
        "# Create a colormap for node elevations\n",
        "norm = plt.Normalize(pipe_nodes_gdf['Invert Elevation'].min(), \n",
        "                    pipe_nodes_gdf['Invert Elevation'].max())\n",
        "cmap = plt.cm.viridis\n",
        "\n",
        "# Plot pipe nodes colored by invert elevation\n",
        "scatter = ax.scatter(pipe_nodes_gdf.geometry.x, pipe_nodes_gdf.geometry.y,\n",
        "                    c=pipe_nodes_gdf['Invert Elevation'], \n",
        "                    cmap=cmap, norm=norm,\n",
        "                    s=100)\n",
        "\n",
        "# Add colorbar\n",
        "cbar = plt.colorbar(scatter)\n",
        "cbar.set_label('Invert Elevation (ft)', rotation=270, labelpad=15)\n",
        "\n",
        "# Add combined labels for invert and drop inlet elevations\n",
        "for idx, row in pipe_nodes_gdf.iterrows():\n",
        "    label_text = \"\"  # Initialize label_text for each node\n",
        "    # Add drop inlet elevation label if it exists and is not NaN\n",
        "    if 'Drop Inlet Elevation' in row and not np.isnan(row['Drop Inlet Elevation']):\n",
        "        label_text += f\"TOC: {row['Drop Inlet Elevation']:.2f}\\n\"\n",
        "    label_text += f\"INV: {row['Invert Elevation']:.2f}\"\n",
        "    \n",
        "    ax.annotate(label_text,\n",
        "                xy=(row.geometry.x, row.geometry.y),\n",
        "                xytext=(-10, -10), textcoords='offset points',\n",
        "                fontsize=8,\n",
        "                bbox=dict(facecolor='white', edgecolor='black', boxstyle='round,pad=0.5'))\n",
        "\n",
        "# Add perimeter polygons \n",
        "if not perimeter_polygons.empty:\n",
        "    perimeter_polygons.plot(ax=ax, edgecolor='black', facecolor='none')\n",
        "\n",
        "# Create proxy artists for legend\n",
        "conduit_line = mlines.Line2D([], [], color='blue', label='Conduits')\n",
        "node_point = mlines.Line2D([], [], color='blue', marker='o', linestyle='None',\n",
        "                          markersize=10, label='Nodes')\n",
        "perimeter = mpatches.Patch(facecolor='none', edgecolor='black',\n",
        "                          label='Perimeter Polygons')\n",
        "\n",
        "ax.set_title('Pipe Network with Node Elevations')\n",
        "\n",
        "# Add legend with proxy artists\n",
        "ax.legend(handles=[conduit_line, node_point, perimeter])\n",
        "\n",
        "# Set aspect ratio to be equal and adjust limits\n",
        "ax.set_aspect('equal', 'datalim')\n",
        "ax.autoscale_view()\n",
        "\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\bill\\AppData\\Local\\Temp\\ipykernel_9136\\1821049155.py:10: UserWarning: Legend does not support handles for PatchCollection instances.\n",
            "See: https://matplotlib.org/stable/tutorials/intermediate/legend_guide.html#implementing-a-custom-legend-handler\n",
            "  ax.legend()\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Visualize pump stations on a map\n",
        "fig, ax = plt.subplots(figsize=(12, 8))\n",
        "pump_stations_gdf.plot(ax=ax, color='green', markersize=50, label='Pump Station')\n",
        "\n",
        "# Add perimeter polygons\n",
        "if not perimeter_polygons.empty:\n",
        "    perimeter_polygons.plot(ax=ax, edgecolor='black', facecolor='none', label='Perimeter Polygons')\n",
        "\n",
        "ax.set_title('Pump Station Location')\n",
        "ax.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:01:11 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:11 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:11 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:11 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:11 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:11 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:11 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:11 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:11 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:11 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:11 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:11 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:11 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:11 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Valid variables for pipe network timeseries:\n",
            "- Cell Courant\n",
            "- Cell Water Surface\n",
            "- Face Flow\n",
            "- Face Velocity\n",
            "- Face Water Surface\n",
            "- Pipes/Pipe Flow DS\n",
            "- Pipes/Pipe Flow US\n",
            "- Pipes/Vel DS\n",
            "- Pipes/Vel US\n",
            "- Nodes/Depth\n",
            "- Nodes/Drop Inlet Flow\n",
            "- Nodes/Water Surface\n",
            "\n",
            "Pipe Network Timeseries (Pipes/Pipe Flow DS):\n",
            "<xarray.DataArray 'Pipes/Pipe Flow DS' (time: 5, location: 5)> Size: 100B\n",
            "array([[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,\n",
            "         0.0000000e+00],\n",
            "       [-0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00,\n",
            "        -0.0000000e+00],\n",
            "       [-0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00,\n",
            "        -0.0000000e+00],\n",
            "       [-0.0000000e+00, -6.6351867e-03, -0.0000000e+00, -0.0000000e+00,\n",
            "        -0.0000000e+00],\n",
            "       [-0.0000000e+00, -1.5214826e-01, -0.0000000e+00, -0.0000000e+00,\n",
            "         1.2617193e-07]], dtype=float32)\n",
            "Coordinates:\n",
            "  * time      (time) datetime64[ns] 40B 2000-01-10T12:00:00 ... 2000-01-10T12...\n",
            "  * location  (location) int64 40B 0 1 2 3 4\n",
            "Attributes:\n",
            "    units:     ft^3/s\n",
            "    variable:  Pipes/Pipe Flow DS\n",
            "\n",
            "Pipe Network Timeseries (Pipes/Pipe Flow US):\n",
            "<xarray.DataArray 'Pipes/Pipe Flow US' (time: 5, location: 5)> Size: 100B\n",
            "array([[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,\n",
            "         0.0000000e+00],\n",
            "       [-0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00,\n",
            "        -0.0000000e+00],\n",
            "       [-0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00,\n",
            "         2.4055254e-04],\n",
            "       [-0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00,\n",
            "         8.7901555e-02],\n",
            "       [ 3.6643762e-13,  3.7335381e-02, -0.0000000e+00, -0.0000000e+00,\n",
            "         4.1427895e-01]], dtype=float32)\n",
            "Coordinates:\n",
            "  * time      (time) datetime64[ns] 40B 2000-01-10T12:00:00 ... 2000-01-10T12...\n",
            "  * location  (location) int64 40B 0 1 2 3 4\n",
            "Attributes:\n",
            "    units:     ft^3/s\n",
            "    variable:  Pipes/Pipe Flow US\n",
            "\n",
            "Pipe Network Timeseries (Pipes/Vel DS):\n",
            "<xarray.DataArray 'Pipes/Vel DS' (time: 5, location: 5)> Size: 100B\n",
            "array([[ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ],\n",
            "       [-0.        , -0.        , -0.        , -0.        , -0.        ],\n",
            "       [-0.        , -0.        , -0.        , -0.        , -0.        ],\n",
            "       [-0.        , -0.06287094, -0.        , -0.        , -0.        ],\n",
            "       [-0.        , -0.42591918, -0.        , -0.        ,  0.00337498]],\n",
            "      dtype=float32)\n",
            "Coordinates:\n",
            "  * time      (time) datetime64[ns] 40B 2000-01-10T12:00:00 ... 2000-01-10T12...\n",
            "  * location  (location) int64 40B 0 1 2 3 4\n",
            "Attributes:\n",
            "    units:     ft/s\n",
            "    variable:  Pipes/Vel DS\n",
            "\n",
            "Pipe Network Timeseries (Pipes/Vel US):\n",
            "<xarray.DataArray 'Pipes/Vel US' (time: 5, location: 5)> Size: 100B\n",
            "array([[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,\n",
            "         0.0000000e+00],\n",
            "       [-0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00,\n",
            "        -0.0000000e+00],\n",
            "       [-0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00,\n",
            "         6.7898363e-02],\n",
            "       [-0.0000000e+00, -0.0000000e+00, -0.0000000e+00, -0.0000000e+00,\n",
            "         4.8383656e-01],\n",
            "       [ 2.4613664e-05,  4.8691016e-01, -0.0000000e+00, -0.0000000e+00,\n",
            "         8.6102980e-01]], dtype=float32)\n",
            "Coordinates:\n",
            "  * time      (time) datetime64[ns] 40B 2000-01-10T12:00:00 ... 2000-01-10T12...\n",
            "  * location  (location) int64 40B 0 1 2 3 4\n",
            "Attributes:\n",
            "    units:     ft/s\n",
            "    variable:  Pipes/Vel US\n",
            "\n",
            "Pipe Network Timeseries (Nodes/Depth):\n",
            "<xarray.DataArray 'Nodes/Depth' (time: 5, location: 5)> Size: 100B\n",
            "array([[ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ],\n",
            "       [-0.04570961, -0.04727364, -0.03162766, -0.01459312,  0.        ],\n",
            "       [-0.04570961, -0.04727364, -0.03162766, -0.00156948,  0.        ],\n",
            "       [-0.04570961, -0.04727364, -0.03162766,  0.12227755,  0.        ],\n",
            "       [-0.04570955, -0.04727364,  0.0399478 ,  0.26093435,  0.        ]],\n",
            "      dtype=float32)\n",
            "Coordinates:\n",
            "  * time      (time) datetime64[ns] 40B 2000-01-10T12:00:00 ... 2000-01-10T12...\n",
            "  * location  (location) int64 40B 0 1 2 3 4\n",
            "Attributes:\n",
            "    units:     ft\n",
            "    variable:  Nodes/Depth\n",
            "\n",
            "Pipe Network Timeseries (Nodes/Drop Inlet Flow):\n",
            "<xarray.DataArray 'Nodes/Drop Inlet Flow' (time: 5, location: 5)> Size: 100B\n",
            "array([[ 0.,  0.,  0.,  0.,  0.],\n",
            "       [-0., -0., -0., -0., -0.],\n",
            "       [-0., -0., -0., -0., -0.],\n",
            "       [-0., -0., -0., -0., -0.],\n",
            "       [-0., -0., -0., -0., -0.]], dtype=float32)\n",
            "Coordinates:\n",
            "  * time      (time) datetime64[ns] 40B 2000-01-10T12:00:00 ... 2000-01-10T12...\n",
            "  * location  (location) int64 40B 0 1 2 3 4\n",
            "Attributes:\n",
            "    units:     cfs\n",
            "    variable:  Nodes/Drop Inlet Flow\n",
            "\n",
            "Pipe Network Timeseries (Nodes/Water Surface):\n",
            "<xarray.DataArray 'Nodes/Water Surface' (time: 5, location: 5)> Size: 100B\n",
            "array([[26.98    , 25.79    , 28.87    , 27.36    , 24.6     ],\n",
            "       [26.93429 , 25.742727, 28.838373, 27.345407, 24.6     ],\n",
            "       [26.93429 , 25.742727, 28.838373, 27.35843 , 24.6     ],\n",
            "       [26.93429 , 25.742727, 28.838373, 27.482279, 24.6     ],\n",
            "       [26.93429 , 25.742727, 28.909948, 27.620935, 24.6     ]],\n",
            "      dtype=float32)\n",
            "Coordinates:\n",
            "  * time      (time) datetime64[ns] 40B 2000-01-10T12:00:00 ... 2000-01-10T12...\n",
            "  * location  (location) int64 40B 0 1 2 3 4\n",
            "Attributes:\n",
            "    units:     ft\n",
            "    variable:  Nodes/Water Surface\n"
          ]
        }
      ],
      "source": [
        "# Example 3: Get pipe network timeseries\n",
        "valid_variables = [\n",
        "    \"Cell Courant\", \"Cell Water Surface\", \"Face Flow\", \"Face Velocity\",\n",
        "    \"Face Water Surface\", \"Pipes/Pipe Flow DS\", \"Pipes/Pipe Flow US\",\n",
        "    \"Pipes/Vel DS\", \"Pipes/Vel US\", \"Nodes/Depth\", \"Nodes/Drop Inlet Flow\",\n",
        "    \"Nodes/Water Surface\"\n",
        "]\n",
        "\n",
        "print(\"Valid variables for pipe network timeseries:\")\n",
        "for var in valid_variables:\n",
        "    print(f\"- {var}\")\n",
        "\n",
        "# Extract pipe network timeseries for each valid pipe-related variable\n",
        "pipe_variables = [var for var in valid_variables if var.startswith(\"Pipes/\") or var.startswith(\"Nodes/\")]\n",
        "\n",
        "for variable in pipe_variables:\n",
        "    try:\n",
        "        pipe_timeseries = HdfPipe.get_pipe_network_timeseries(plan_hdf_path, variable=variable)\n",
        "        print(f\"\\nPipe Network Timeseries ({variable}):\")\n",
        "        print(pipe_timeseries.head())  # Print first few rows to avoid overwhelming output\n",
        "    except Exception as e:\n",
        "        print(f\"Error extracting {variable}: {str(e)}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Pipe Network Timeseries Data Description\n",
        "\n",
        "The `get_pipe_network_timeseries` function returns an xarray DataArray for each variable. Here's a general description of the data structure:\n",
        "\n",
        "1. **Pipes/Pipe Flow DS and Pipes/Pipe Flow US**:\n",
        "   - Dimensions: time, location (pipe IDs)\n",
        "   - Units: ft^3/s (cubic feet per second)\n",
        "   - Description: Represents the flow rate at the downstream (DS) and upstream (US) ends of pipes over time.\n",
        "\n",
        "2. **Pipes/Vel DS and Pipes/Vel US**:\n",
        "   - Dimensions: time, location (pipe IDs)\n",
        "   - Units: ft/s (feet per second)\n",
        "   - Description: Shows the velocity at the downstream (DS) and upstream (US) ends of pipes over time.\n",
        "\n",
        "3. **Nodes/Depth**:\n",
        "   - Dimensions: time, location (node IDs)\n",
        "   - Units: ft (feet)\n",
        "   - Description: Indicates the depth of water at each node over time.\n",
        "\n",
        "4. **Nodes/Drop Inlet Flow**:\n",
        "   - Dimensions: time, location (node IDs)\n",
        "   - Units: cfs (cubic feet per second)\n",
        "   - Description: Represents the flow rate through drop inlets at each node over time.\n",
        "\n",
        "5. **Nodes/Water Surface**:\n",
        "   - Dimensions: time, location (node IDs)\n",
        "   - Units: ft (feet)\n",
        "   - Description: Shows the water surface elevation at each node over time.\n",
        "\n",
        "General notes:\n",
        "- The 'time' dimension represents the simulation timesteps.\n",
        "- The 'location' dimension represents either pipe IDs or node IDs, depending on the variable.\n",
        "- The number of timesteps and locations may vary depending on the specific dataset and simulation setup.\n",
        "- Negative values in flow variables may indicate reverse flow direction.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:01:11 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:11 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:01:11 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:11 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:01:11 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:11 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:01:12 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:12 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:01:12 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:12 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:01:12 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:12 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:01:12 - ras_commander.HdfPipe - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:12 - ras_commander.HdfPipe - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from matplotlib.dates import DateFormatter\n",
        "import numpy as np\n",
        "import random\n",
        "\n",
        "# Define the variables we want to plot\n",
        "variables = [\n",
        "    \"Pipes/Pipe Flow DS\", \"Pipes/Pipe Flow US\", \"Pipes/Vel DS\", \"Pipes/Vel US\",\n",
        "    \"Nodes/Depth\", \"Nodes/Drop Inlet Flow\", \"Nodes/Water Surface\"\n",
        "]\n",
        "\n",
        "# Create a separate plot for each variable\n",
        "for variable in variables:\n",
        "    try:\n",
        "        # Get the data for the current variable\n",
        "        data = HdfPipe.get_pipe_network_timeseries(plan_hdf_path, variable=variable)\n",
        "        \n",
        "        # Create a new figure\n",
        "        fig, ax = plt.subplots(figsize=(12, 6))\n",
        "        \n",
        "        # Pick one random location\n",
        "        random_location = random.choice(data.location.values)\n",
        "        \n",
        "        # Determine if it's a pipe or node variable\n",
        "        if variable.startswith(\"Pipes/\"):\n",
        "            location_type = \"Conduit ID\"\n",
        "        else:\n",
        "            location_type = \"Node ID\"\n",
        "        \n",
        "        # Plot the data for the randomly selected location\n",
        "        ax.plot(data.time, data.sel(location=random_location), label=f'{location_type} {random_location}')\n",
        "        \n",
        "        # Set the title and labels\n",
        "        ax.set_title(f'{variable} Over Time ({location_type} {random_location})')\n",
        "        ax.set_xlabel('Time')  # Corrected from ax.xlabel to ax.set_xlabel\n",
        "        ax.set_ylabel(f'{variable} ({data.attrs[\"units\"]})')  # Corrected from ax.ylabel to ax.set_ylabel\n",
        "        \n",
        "        # Format the x-axis to show dates nicely\n",
        "        ax.xaxis.set_major_formatter(DateFormatter('%Y-%m-%d %H:%M'))\n",
        "        plt.xticks(rotation=45)\n",
        "        \n",
        "        # Add a legend\n",
        "        ax.legend(title=location_type, loc='upper left')\n",
        "        \n",
        "        # Adjust the layout\n",
        "        plt.tight_layout()\n",
        "        \n",
        "        # Show the plot\n",
        "        plt.show()\n",
        "        \n",
        "    except Exception as e:\n",
        "        print(f\"Error plotting {variable}: {str(e)}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:01:13 - ras_commander.HdfPump - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:13 - ras_commander.HdfPump - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Pump Station Timeseries (Pump Station #1):\n",
            "<xarray.DataArray 'Pump Station #1' (time: 217, variable: 5)> Size: 4kB\n",
            "array([[ 0.       , 24.6      , 38.888123 ,  0.       ,  0.       ],\n",
            "       [ 0.       , 24.6      , 38.888123 ,  0.       ,  0.       ],\n",
            "       [ 0.       , 24.6      , 38.888123 ,  0.       ,  0.       ],\n",
            "       ...,\n",
            "       [29.878857 , 25.91983  , 40.72616  , 29.878857 ,  0.8800183],\n",
            "       [ 0.       , 25.509256 , 40.719364 ,  0.       ,  0.       ],\n",
            "       [ 0.       , 25.691057 , 40.62319  ,  0.       ,  0.       ]],\n",
            "      shape=(217, 5), dtype=float32)\n",
            "Coordinates:\n",
            "  * time      (time) datetime64[ns] 2kB 2000-01-10T12:00:00 ... 2000-01-12\n",
            "  * variable  (variable) <U12 240B 'Flow' 'Stage HW' ... 'Pumps on'\n",
            "Attributes:\n",
            "    units:         [[b'Flow' b'cfs']\\n [b'Stage HW' b'ft']\\n [b'Stage TW' b'f...\n",
            "    pump_station:  Pump Station #1\n"
          ]
        }
      ],
      "source": [
        "# Example 8: Get pump station timeseries\n",
        "pump_station_name = pump_stations_gdf.iloc[0]['Name']  # Get the first pump station name\n",
        "# Use the results_pump_station_timeseries method \n",
        "pump_timeseries = HdfPump.get_pump_station_timeseries(plan_hdf_path, pump_station=pump_station_name)\n",
        "print(f\"\\nPump Station Timeseries ({pump_station_name}):\")\n",
        "print(pump_timeseries)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:01:13 - ras_commander.HdfBase - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:13 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Exploring group: /Geometry/Pump Stations/\n",
            "\n",
            "\n",
            "    Dataset: /Geometry/Pump Stations//Attributes\n",
            "        Shape: (1,)\n",
            "        Dtype: [('Name', 'S16'), ('Inlet River', 'S16'), ('Inlet Reach', 'S16'), ('Inlet RS', 'S8'), ('Inlet RS Distance', '<f4'), ('Inlet SA/2D', 'S16'), ('Inlet Pipe Node', 'S32'), ('Outlet River', 'S16'), ('Outlet Reach', 'S16'), ('Outlet RS', 'S8'), ('Outlet RS Distance', '<f4'), ('Outlet SA/2D', 'S16'), ('Outlet Pipe Node', 'S32'), ('Reference River', 'S16'), ('Reference Reach', 'S16'), ('Reference RS', 'S8'), ('Reference RS Distance', '<f4'), ('Reference SA/2D', 'S16'), ('Reference Point', 'S32'), ('Reference Pipe Node', 'S32'), ('Highest Pump Line Elevation', '<f4'), ('Pump Groups', '<i4')]\n",
            "\n",
            "    Dataset: /Geometry/Pump Stations//Points\n",
            "        Shape: (1, 2)\n",
            "        Dtype: float64\n",
            "    Attributes for /Geometry/Pump Stations//Points:\n",
            "        Column: b'X,Y'\n",
            "        Row: b'Points'\n",
            "\n",
            "    Group: /Geometry/Pump Stations//Pump Groups\n",
            "        Dataset: /Geometry/Pump Stations//Pump Groups/Attributes\n",
            "            Shape: (1,)\n",
            "            Dtype: [('Pump Station ID', '<i4'), ('Name', 'S16'), ('Bias On', 'u1'), ('Start Up Time', '<f4'), ('Shut Down Time', '<f4'), ('Width', '<f4'), ('Pumps', '<i4')]\n",
            "        Dataset: /Geometry/Pump Stations//Pump Groups/Efficiency Curves Info\n",
            "            Shape: (1, 2)\n",
            "            Dtype: int32\n",
            "    Attributes for /Geometry/Pump Stations//Pump Groups/Efficiency Curves Info:\n",
            "        Column: [b'Starting Index' b'Count']\n",
            "        Row: b'Feature'\n",
            "        Dataset: /Geometry/Pump Stations//Pump Groups/Efficiency Curves Values\n",
            "            Shape: (6, 2)\n",
            "            Dtype: float32\n",
            "    Attributes for /Geometry/Pump Stations//Pump Groups/Efficiency Curves Values:\n",
            "        Column: [b'Head' b'Flow']\n",
            "        Row: b'Points'\n",
            "        Group: /Geometry/Pump Stations//Pump Groups/Pumps\n",
            "            Dataset: /Geometry/Pump Stations//Pump Groups/Pumps/Attributes\n",
            "                Shape: (1,)\n",
            "                Dtype: [('Pump Group ID', '<i4'), ('Name', 'S16'), ('WS On', '<f4'), ('WS Off', '<f4'), ('Default Centerline', 'u1')]\n",
            "            Dataset: /Geometry/Pump Stations//Pump Groups/Pumps/Centerline Info\n",
            "                Shape: (1, 4)\n",
            "                Dtype: int32\n",
            "    Attributes for /Geometry/Pump Stations//Pump Groups/Pumps/Centerline Info:\n",
            "        Column: [b'Point Starting Index' b'Point Count' b'Part Starting Index'\n",
            " b'Part Count']\n",
            "        Feature Type: b'Polyline'\n",
            "        Row: b'Feature'\n",
            "            Dataset: /Geometry/Pump Stations//Pump Groups/Pumps/Centerline Parts\n",
            "                Shape: (1, 2)\n",
            "                Dtype: int32\n",
            "    Attributes for /Geometry/Pump Stations//Pump Groups/Pumps/Centerline Parts:\n",
            "        Column: [b'Point Starting Index' b'Point Count']\n",
            "        Row: b'Part'\n",
            "            Dataset: /Geometry/Pump Stations//Pump Groups/Pumps/Centerline Points\n",
            "                Shape: (2, 2)\n",
            "                Dtype: float64\n",
            "    Attributes for /Geometry/Pump Stations//Pump Groups/Pumps/Centerline Points:\n",
            "        Column: [b'X' b'Y']\n",
            "        Row: b'Points'\n",
            "            Dataset: /Geometry/Pump Stations//Pump Groups/Pumps/Outlet Cells\n",
            "                Shape: (1,)\n",
            "                Dtype: [('Pump Station ID', '<i4'), ('Pump Group ID', '<i4'), ('Pump ID', '<i4'), ('Cell Index', '<i4'), ('Station Start', '<f4'), ('Station End', '<f4')]\n"
          ]
        }
      ],
      "source": [
        "# Use get_hdf5_dataset_info function to get Pipe Conduits data:\n",
        "HdfBase.get_dataset_info(plan_hdf_path, \"/Geometry/Pump Stations/\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:01:13 - ras_commander.HdfPump - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n",
            "2025-04-09 08:01:13 - ras_commander.HdfPump - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Davis\\DavisStormSystem.p02.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Pump Station Timeseries (Pump Station #1):\n",
            "<xarray.DataArray 'Pump Station #1' (time: 217, variable: 5)> Size: 4kB\n",
            "array([[ 0.       , 24.6      , 38.888123 ,  0.       ,  0.       ],\n",
            "       [ 0.       , 24.6      , 38.888123 ,  0.       ,  0.       ],\n",
            "       [ 0.       , 24.6      , 38.888123 ,  0.       ,  0.       ],\n",
            "       ...,\n",
            "       [29.878857 , 25.91983  , 40.72616  , 29.878857 ,  0.8800183],\n",
            "       [ 0.       , 25.509256 , 40.719364 ,  0.       ,  0.       ],\n",
            "       [ 0.       , 25.691057 , 40.62319  ,  0.       ,  0.       ]],\n",
            "      shape=(217, 5), dtype=float32)\n",
            "Coordinates:\n",
            "  * time      (time) datetime64[ns] 2kB 2000-01-10T12:00:00 ... 2000-01-12\n",
            "  * variable  (variable) <U12 240B 'Flow' 'Stage HW' ... 'Pumps on'\n",
            "Attributes:\n",
            "    units:         [[b'Flow' b'cfs']\\n [b'Stage HW' b'ft']\\n [b'Stage TW' b'f...\n",
            "    pump_station:  Pump Station #1\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x1200 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Extract the pump station timeseries data\n",
        "pump_station_name = pump_stations_gdf.iloc[0]['Name']  # Get the first pump station name\n",
        "pump_timeseries = HdfPump.get_pump_station_timeseries(plan_hdf_path, pump_station=pump_station_name)\n",
        "\n",
        "# Print the pump station timeseries\n",
        "print(f\"\\nPump Station Timeseries ({pump_station_name}):\")\n",
        "print(pump_timeseries)\n",
        "\n",
        "# Create a new figure for plotting\n",
        "fig, ax = plt.subplots(figsize=(12, 12))\n",
        "\n",
        "# Plot each variable in the timeseries\n",
        "for variable in pump_timeseries.coords['variable'].values:\n",
        "    data = pump_timeseries.sel(variable=variable)\n",
        "    \n",
        "    # Decode units to strings\n",
        "    unit = pump_timeseries.attrs[\"units\"][list(pump_timeseries.coords[\"variable\"].values).index(variable)][1].decode('utf-8')\n",
        "    \n",
        "    # Check if the variable is 'Pumps on' to plot it differently\n",
        "    if variable == 'Pumps on':\n",
        "        # Plot with color based on the on/off status\n",
        "        colors = ['green' if val > 0 else 'red' for val in data.values.flatten()]\n",
        "        ax.scatter(pump_timeseries['time'], data, label=f'{variable} ({unit})', color=colors)\n",
        "    else:\n",
        "        ax.plot(pump_timeseries['time'], data, label=f'{variable} ({unit})')\n",
        "        \n",
        "        # Label the peak values\n",
        "        peak_time = pump_timeseries['time'][data.argmax()]\n",
        "        peak_value = data.max()\n",
        "        ax.annotate(f'Peak: {peak_value:.2f}', xy=(peak_time, peak_value), \n",
        "                    xytext=(peak_time, peak_value + 0.1 * peak_value), \n",
        "                    arrowprops=dict(facecolor='black', arrowstyle='->'),\n",
        "                    fontsize=10, color='black', ha='center')\n",
        "\n",
        "# Set the title and labels\n",
        "ax.set_title(f'Timeseries Data for Pump Station: {pump_station_name}')\n",
        "ax.set_xlabel('Time')\n",
        "ax.set_ylabel('Values')\n",
        "\n",
        "# Format the x-axis to show dates nicely\n",
        "ax.xaxis.set_major_formatter(DateFormatter('%Y-%m-%d %H:%M'))\n",
        "plt.xticks(rotation=45)\n",
        "\n",
        "# Add a legend\n",
        "ax.legend(title='Variables', loc='upper left')\n",
        "\n",
        "# Adjust the layout\n",
        "plt.tight_layout()\n",
        "\n",
        "# Show the plot\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Exploring HDF Datasets with HdfBase.get_dataset_info\n",
        "This allows users to find HDF information that is not included in the ras-commander library.  Find the path in HDFView and set the group_path below to explore the HDF datasets and attributes.  Then, use the output to write your own function to extract the data.  "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Use get_hdf5_dataset_info function to get Pipe Conduits data:\n",
        "HdfBase.get_dataset_info(plan_hdf_path, \"/Geometry/Pipe Conduits/\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "For HDF datasets that are not supported by the RAS-Commander library, provide the dataset path to HdfBase.get_dataset_info and provide the output to an LLM along with a relevent HDF* class(es) to generate new functions that extend the library's coverage.   "
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "rascmdr",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}
==================================================

File: c:\GH\ras-commander\examples\13_2d_detail_face_data_extraction.ipynb
==================================================
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# HEC-RAS 2D Detail Face Data Extraction Examples\n",
        "\n",
        "This notebook demonstrates how to extract detailed 2D face data, display individual cell face results and calculate a discharge weighted velocity using a user-provided profile line located where cell faces are perpendicular to flow. \n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Package Installation and Environment Setup\n",
        "Uncomment and run package installation commands if needed"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Install ras-commander from pip (uncomment to install if needed)\n",
        "#!pip install ras-commander\n",
        "# This installs ras-commander and all dependencies"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Import all required modules\n",
        "#from ras_commander import *  # Import all ras-commander modules\n",
        "\n",
        "# Import the required libraries for this notebook\n",
        "import h5py\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import requests\n",
        "from tqdm import tqdm\n",
        "import scipy\n",
        "import xarray as xr\n",
        "import geopandas as gpd\n",
        "import matplotlib.pyplot as plt\n",
        "from IPython import display\n",
        "import psutil  # For getting system CPU info\n",
        "from concurrent.futures import ThreadPoolExecutor, as_completed\n",
        "import time\n",
        "import subprocess\n",
        "import sys\n",
        "import os\n",
        "import shutil\n",
        "from datetime import datetime, timedelta\n",
        "from pathlib import Path  # Ensure pathlib is imported for file operations\n",
        "import pyproj\n",
        "from shapely.geometry import Point, LineString, Polygon\n",
        "import xarray as xr\n",
        "from mpl_toolkits.axes_grid1.inset_locator import inset_axes\n",
        "import matplotlib.patches as patches\n",
        "from matplotlib.patches import ConnectionPatch\n",
        "import logging\n",
        "from pathlib import Path\n",
        "import rasterio\n",
        "from rasterio.plot import show\n",
        "from pathlib import Path"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "ras_commander imported successfully\n"
          ]
        }
      ],
      "source": [
        "# This cell will try to import the pip package, if it fails it will \n",
        "# add the parent directory to the Python path and try to import again\n",
        "# This assumes you are working in a subfolder of the ras-commander repository\n",
        "# This allows a user's revisions to be tested locally without installing the package\n",
        "\n",
        "import sys\n",
        "from pathlib import Path\n",
        "\n",
        "# Flexible imports to allow for development without installation \n",
        "#  ** Use this version with Jupyter Notebooks **\n",
        "try:\n",
        "    # Try to import from the installed package\n",
        "    from ras_commander import *\n",
        "except ImportError:\n",
        "    # If the import fails, add the parent directory to the Python path\n",
        "    import os\n",
        "    current_file = Path(os.getcwd()).resolve()\n",
        "    rascmdr_directory = current_file.parent\n",
        "    sys.path.append(str(rascmdr_directory))\n",
        "    print(\"Loading ras-commander from local dev copy\")\n",
        "    # Now try to import again\n",
        "    from ras_commander import *\n",
        "print(\"ras_commander imported successfully\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Note: This notebook relies on the Chippewa 2D Project along with:\n",
        " - A user-generated GeoJSON containing the proposed profile lines\n",
        " - An example is provided in the \"data\" subfolder with name profile_lines_chippewa2D.geojson"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:29:53 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-09 08:29:53 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.rasmap\n",
            "2025-04-09 08:29:53 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Chippewa_2D.p02.hdf already exists. Skipping project extraction and plan execution.\n"
          ]
        }
      ],
      "source": [
        "# Download the Chippewa_2D project from HEC and run plan 01\n",
        "\n",
        "# Define the path to the Chippewa_2D project\n",
        "current_dir = Path.cwd()  # Adjust if your notebook is in a different directory\n",
        "bald_eagle_path = current_dir / \"example_projects\" / \"Chippewa_2D\"\n",
        "import logging\n",
        "\n",
        "# Check if Chippewa_2D.p02.hdf exists (so we don't have to re-run the simulation when re-running or debugging)\n",
        "hdf_file = bald_eagle_path / \"Chippewa_2D.p02.hdf\"\n",
        "\n",
        "if not hdf_file.exists():\n",
        "    # Initialize RasExamples and extract the Chippewa_2D project\n",
        "    RasExamples.extract_project([\"Chippewa_2D\"])\n",
        "\n",
        "    # Initialize the RAS project using the default global ras object\n",
        "    init_ras_project(bald_eagle_path, \"6.6\")\n",
        "    logging.info(f\"Bald Eagle project initialized with folder: {ras.project_folder}\")\n",
        "    \n",
        "    logging.info(f\"Bald Eagle object id: {id(ras)}\")\n",
        "    \n",
        "    # Define the plan number to execute\n",
        "    plan_number = \"02\"\n",
        "\n",
        "    # Update run flags for the project\n",
        "    RasPlan.update_run_flags(\n",
        "        plan_number,\n",
        "        geometry_preprocessor=True,\n",
        "        unsteady_flow_simulation=True,\n",
        "        run_sediment=False,\n",
        "        post_processor=True,\n",
        "        floodplain_mapping=False\n",
        "    )\n",
        "\n",
        "    # Execute Plan 02 using RasCmdr for Bald Eagle\n",
        "    print(f\"Executing Plan {plan_number} for the Bald Eagle Creek project...\")\n",
        "    success_bald_eagle = RasCmdr.compute_plan(plan_number)\n",
        "    if success_bald_eagle:\n",
        "        print(f\"Plan {plan_number} executed successfully for Bald Eagle.\\n\")\n",
        "    else:\n",
        "        print(f\"Plan {plan_number} execution failed for Bald Eagle.\\n\")\n",
        "else:\n",
        "    print(\"Chippewa_2D.p02.hdf already exists. Skipping project extraction and plan execution.\")\n",
        "    # Initialize the RAS project using the default global ras object\n",
        "    init_ras_project(bald_eagle_path, \"6.6\")\n",
        "    plan_number = \"02\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>UNET D2 SolverType</th>\\n', '      <th>UNET D2 Name</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>02</td>\\n', '      <td>04</td>\\n', '      <td>01</td>\\n', '      <td>100ft Sediment</td>\\n', '      <td>6.40</td>\\n', '      <td>100ft Sediment</td>\\n', '      <td>02apr2019,0000,05may2019,2400</td>\\n', '      <td>2MIN</td>\\n', '      <td>30MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>PARDISO (Direct)</td>\\n', '      <td>Perimeter 1</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>04</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  plan_number unsteady_number geometry_number      Plan Title Program Version  \\\\\\n', '0          02              04              01  100ft Sediment            6.40   \\n', '\\n', '  Short Identifier                Simulation Date Computation Interval  \\\\\\n', '0   100ft Sediment  02apr2019,0000,05may2019,2400                 2MIN   \\n', '\\n', '  Mapping Interval Run HTab  ... DSS File Friction Slope Method  \\\\\\n', '0            30MIN        1  ...      dss                     1   \\n', '\\n', '  UNET D2 SolverType UNET D2 Name  \\\\\\n', '0   PARDISO (Direct)  Perimeter 1   \\n', '\\n', '                                    HDF_Results_Path Geom File  \\\\\\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...        01   \\n', '\\n', '                                           Geom Path  Flow File  \\\\\\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...         04   \\n', '\\n', '                                           Flow Path  \\\\\\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '\\n', '                                           full_path  \\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...  \\n', '\\n', '[1 rows x 29 columns]']"
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Show ras object info\n",
        "ras.plan_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>unsteady_number</th>\\n', '      <th>full_path</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Flow Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Use Restart</th>\\n', '      <th>Precipitation Mode</th>\\n', '      <th>Wind Mode</th>\\n', '      <th>Met BC=Precipitation|Expanded View</th>\\n', '      <th>Met BC=Precipitation|Gridded Source</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>04</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>2019-test</td>\\n', '      <td>6.40</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>0</td>\\n', '      <td>DSS</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  unsteady_number                                          full_path  \\\\\\n', '0              04  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '\\n', '  geometry_number Flow Title Program Version Use Restart Precipitation Mode  \\\\\\n', '0            None  2019-test            6.40           0            Disable   \\n', '\\n', '        Wind Mode Met BC=Precipitation|Expanded View  \\\\\\n', '0  No Wind Forces                                  0   \\n', '\\n', '  Met BC=Precipitation|Gridded Source  \\n', '0                                 DSS  ']"
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "ras.unsteady_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>unsteady_number</th>\\n', '      <th>boundary_condition_number</th>\\n', '      <th>river_reach_name</th>\\n', '      <th>river_station</th>\\n', '      <th>storage_area_name</th>\\n', '      <th>pump_station_name</th>\\n', '      <th>bc_type</th>\\n', '      <th>hydrograph_type</th>\\n', '      <th>Interval</th>\\n', '      <th>DSS Path</th>\\n', '      <th>...</th>\\n', '      <th>DSS File</th>\\n', '      <th>full_path</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Flow Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Use Restart</th>\\n', '      <th>Precipitation Mode</th>\\n', '      <th>Wind Mode</th>\\n', '      <th>Met BC=Precipitation|Expanded View</th>\\n', '      <th>Met BC=Precipitation|Gridded Source</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>04</td>\\n', '      <td>1</td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td>Flow Hydrograph</td>\\n', '      <td>Flow Hydrograph</td>\\n', '      <td>1DAY</td>\\n', '      <td></td>\\n', '      <td>...</td>\\n', '      <td>NaN</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>2019-test</td>\\n', '      <td>6.40</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>0</td>\\n', '      <td>DSS</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>04</td>\\n', '      <td>2</td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td>Flow Hydrograph</td>\\n', '      <td>Flow Hydrograph</td>\\n', '      <td>1DAY</td>\\n', '      <td>/MISSISSIPPI R LAKE PEPIN/765.51/FLOW/01JAN197...</td>\\n', '      <td>...</td>\\n', '      <td>..\\\\..\\\\2018\\\\ChippewaRiverBedload\\\\RAS_Final\\\\Sedi...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>2019-test</td>\\n', '      <td>6.40</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>0</td>\\n', '      <td>DSS</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>04</td>\\n', '      <td>3</td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td>Stage Hydrograph</td>\\n', '      <td>Stage Hydrograph</td>\\n', '      <td>1DAY</td>\\n', '      <td>/MISSISSIPPI R LOWER POOL 4/754.00/STAGE/01JAN...</td>\\n', '      <td>...</td>\\n', '      <td>..\\\\..\\\\2018\\\\ChippewaRiverBedload\\\\RAS_Final\\\\Sedi...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>2019-test</td>\\n', '      <td>6.40</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>0</td>\\n', '      <td>DSS</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>04</td>\\n', '      <td>4</td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td>Flow Hydrograph</td>\\n', '      <td>Flow Hydrograph</td>\\n', '      <td>1DAY</td>\\n', '      <td></td>\\n', '      <td>...</td>\\n', '      <td>NaN</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>2019-test</td>\\n', '      <td>6.40</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>0</td>\\n', '      <td>DSS</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>04</td>\\n', '      <td>5</td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td></td>\\n', '      <td>Stage Hydrograph</td>\\n', '      <td>Stage Hydrograph</td>\\n', '      <td>1DAY</td>\\n', '      <td></td>\\n', '      <td>...</td>\\n', '      <td>NaN</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>2019-test</td>\\n', '      <td>6.40</td>\\n', '      <td>0</td>\\n', '      <td>Disable</td>\\n', '      <td>No Wind Forces</td>\\n', '      <td>0</td>\\n', '      <td>DSS</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  unsteady_number  boundary_condition_number river_reach_name river_station  \\\\\\n', '0              04                          1                                  \\n', '1              04                          2                                  \\n', '2              04                          3                                  \\n', '3              04                          4                                  \\n', '4              04                          5                                  \\n', '\\n', '  storage_area_name pump_station_name           bc_type   hydrograph_type  \\\\\\n', '0                                       Flow Hydrograph   Flow Hydrograph   \\n', '1                                       Flow Hydrograph   Flow Hydrograph   \\n', '2                                      Stage Hydrograph  Stage Hydrograph   \\n', '3                                       Flow Hydrograph   Flow Hydrograph   \\n', '4                                      Stage Hydrograph  Stage Hydrograph   \n...\n[Output truncated, 3367 characters total]"
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "ras.boundaries_df "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>UNET D2 SolverType</th>\\n', '      <th>UNET D2 Name</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>02</td>\\n', '      <td>04</td>\\n', '      <td>01</td>\\n', '      <td>100ft Sediment</td>\\n', '      <td>6.40</td>\\n', '      <td>100ft Sediment</td>\\n', '      <td>02apr2019,0000,05may2019,2400</td>\\n', '      <td>2MIN</td>\\n', '      <td>30MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>PARDISO (Direct)</td>\\n', '      <td>Perimeter 1</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>01</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>04</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  plan_number unsteady_number geometry_number      Plan Title Program Version  \\\\\\n', '0          02              04              01  100ft Sediment            6.40   \\n', '\\n', '  Short Identifier                Simulation Date Computation Interval  \\\\\\n', '0   100ft Sediment  02apr2019,0000,05may2019,2400                 2MIN   \\n', '\\n', '  Mapping Interval Run HTab  ... DSS File Friction Slope Method  \\\\\\n', '0            30MIN        1  ...      dss                     1   \\n', '\\n', '  UNET D2 SolverType UNET D2 Name  \\\\\\n', '0   PARDISO (Direct)  Perimeter 1   \\n', '\\n', '                                    HDF_Results_Path Geom File  \\\\\\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...        01   \\n', '\\n', '                                           Geom Path  Flow File  \\\\\\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...         04   \\n', '\\n', '                                           Flow Path  \\\\\\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '\\n', '                                           full_path  \\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...  \\n', '\\n', '[1 rows x 29 columns]']"
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "ras.get_hdf_entries()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Find Paths for Results and Geometry HDF's"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Define the HDF input path as Plan Number\n",
        "\n",
        "plan_number = \"02\"  # Assuming we're using plan 01 as in the previous code\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Get the plan HDF path for the plan_number defined above\n",
        "plan_hdf_path = ras.plan_df.loc[ras.plan_df['plan_number'] == plan_number, 'HDF_Results_Path'].values[0]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": "[\"'d:\\\\\\\\GitHub\\\\\\\\ras-commander\\\\\\\\examples\\\\\\\\example_projects\\\\\\\\Chippewa_2D\\\\\\\\Chippewa_2D.p02.hdf'\"]"
          },
          "execution_count": 11,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "plan_hdf_path"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Alternate: Get the geometry HDF path if you are extracting geometry elements from the geometry HDF \n",
        "geom_hdf_path = ras.plan_df.loc[ras.plan_df['plan_number'] == plan_number, 'Geom Path'].values[0] + '.hdf'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": "[\"'d:\\\\\\\\GitHub\\\\\\\\ras-commander\\\\\\\\examples\\\\\\\\example_projects\\\\\\\\Chippewa_2D\\\\\\\\Chippewa_2D.g01.hdf'\"]"
          },
          "execution_count": 13,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "geom_hdf_path"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:29:53 - ras_commander.HdfResultsPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.p02.hdf\n",
            "2025-04-09 08:29:53 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: Chippewa_2D.p02.hdf\n",
            "2025-04-09 08:29:53 - ras_commander.HdfResultsPlan - INFO - Plan Name: 100ft Sediment\n",
            "2025-04-09 08:29:53 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 816.0\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Example 2: Extracting runtime and compute time data\n"
          ]
        }
      ],
      "source": [
        "# Example: Extract runtime and compute time data\n",
        "print(\"\\nExample 2: Extracting runtime and compute time data\")\n",
        "runtime_df = HdfResultsPlan.get_runtime_data(hdf_path=plan_number)\n",
        "if runtime_df is not None:\n",
        "    runtime_df\n",
        "else:\n",
        "    print(\"No runtime data found.\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n"
          ]
        }
      ],
      "source": [
        "# For all of the RasGeomHdf Class Functions, we will use geom_hdf_path\n",
        "print(geom_hdf_path)\n",
        "\n",
        "# For the example project, plan 02 is associated with geometry 09\n",
        "# If you want to call the geometry by number, call RasHdfGeom functions with a number\n",
        "# Otherwise, if you want to look up geometry hdf path by plan number, follow the logic in the previous code cells"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:29:53 - ras_commander.HdfBase - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:53 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:54 - ras_commander.HdfBase - CRITICAL - No valid projection found. Checked:\n",
            "1. HDF file projection attribute: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2. RASMapper projection file d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\.Winona_Upload\\LifeSim model\\Winona Levee SQRA 2019\\RAS\\AW\\MMC_Projection.prj found in RASMapper file, but was invalid\n",
            "To fix this:\n",
            "1. Open RASMapper\n",
            "2. Click Map > Set Projection\n",
            "3. Select an appropriate projection file or coordinate system\n",
            "4. Save the RASMapper project\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Extracting Projection from HDF\n",
            "No projection information found.\n"
          ]
        }
      ],
      "source": [
        "# Use HdfUtils for extracting projection\n",
        "print(\"\\nExtracting Projection from HDF\")\n",
        "projection = HdfBase.get_projection(hdf_path=geom_hdf_path)\n",
        "if projection:\n",
        "    print(f\"Projection: {projection}\")\n",
        "else:\n",
        "    print(\"No projection information found.\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Set the  to USA Contiguous Albers Equal Area Conic (USGS version)\n",
        "# Note, we would usually call the projection function in HdfMesh but the projection is not set in this example project\n",
        "projection = 'EPSG:5070'  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:29:54 - ras_commander.HdfPlan - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:54 - ras_commander.HdfPlan - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:54 - ras_commander.HdfPlan - INFO - Getting geometry attributes from d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:54 - ras_commander.HdfPlan - INFO - Checking for Geometry group in d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:54 - ras_commander.HdfPlan - INFO - Getting root level geometry attributes\n",
            "2025-04-09 08:29:54 - ras_commander.HdfPlan - INFO - Successfully extracted 17 root level geometry attributes\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Example: Extracting Base Geometry Attributes\n",
            "Base Geometry Attributes:\n"
          ]
        }
      ],
      "source": [
        "# Use HdfPlan for geometry-related operations\n",
        "print(\"\\nExample: Extracting Base Geometry Attributes\")\n",
        "geom_attrs = HdfPlan.get_geometry_information(geom_hdf_path)\n",
        "\n",
        "if not geom_attrs.empty:\n",
        "    # Display the DataFrame directly\n",
        "    print(\"Base Geometry Attributes:\")\n",
        "    geom_attrs\n",
        "else:\n",
        "    print(\"No base geometry attributes found.\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:29:54 - ras_commander.HdfMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:54 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Example 3: Listing 2D Flow Area Names\n",
            "2D Flow Area Names: ['Perimeter 1']\n"
          ]
        }
      ],
      "source": [
        "# Use HdfMesh for geometry-related operations\n",
        "print(\"\\nExample 3: Listing 2D Flow Area Names\")\n",
        "flow_area_names = HdfMesh.get_mesh_area_names(geom_hdf_path)\n",
        "print(\"2D Flow Area Names:\", flow_area_names)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:29:54 - ras_commander.HdfMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:54 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Example: Extracting 2D Flow Area Attributes\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>Value</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>Name</th>\\n', \"      <td>b'Perimeter 1'</td>\\n\", '    </tr><tr>\\n', '      <th>Locked</th>\\n', '      <td>0</td>\\n', '    </tr><tr>\\n', '      <th>Mann</th>\\n', '      <td>0.06</td>\\n', '    </tr><tr>\\n', '      <th>Multiple Face Mann n</th>\\n', '      <td>1</td>\\n', '    </tr><tr>\\n', '      <th>Composite LC</th>\\n', '      <td>1</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['                                 Value\\n', \"Name                    b'Perimeter 1'\\n\", 'Locked                               0\\n', 'Mann                              0.06\\n', 'Multiple Face Mann n                 1\\n', 'Composite LC                         1\\n', 'Cell Vol Tol                      0.01\\n', 'Cell Min Area Fraction            0.01\\n', 'Face Profile Tol                  0.01\\n', 'Face Area Tol                     0.01\\n', 'Face Conv Ratio                   0.02\\n', 'Laminar Depth                      0.2\\n', 'Min Face Length Ratio             0.05\\n', 'Spacing dx                       600.0\\n', 'Spacing dy                       600.0\\n', 'Shift dx                           NaN\\n', 'Shift dy                           NaN\\n', 'Cell Count                         354']"
          },
          "execution_count": 20,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Example: Get 2D Flow Area Attributes (get_geom_2d_flow_area_attrs)\n",
        "print(\"\\nExample: Extracting 2D Flow Area Attributes\")\n",
        "flow_area_attributes = HdfMesh.get_mesh_area_attributes(geom_hdf_path)\n",
        "flow_area_attributes\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:29:54 - ras_commander.HdfMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:54 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:54 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:54 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:54 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:54 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:54 - ras_commander.HdfBase - CRITICAL - No valid projection found. Checked:\n",
            "1. HDF file projection attribute: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2. RASMapper projection file d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\.Winona_Upload\\LifeSim model\\Winona Levee SQRA 2019\\RAS\\AW\\MMC_Projection.prj found in RASMapper file, but was invalid\n",
            "To fix this:\n",
            "1. Open RASMapper\n",
            "2. Click Map > Set Projection\n",
            "3. Select an appropriate projection file or coordinate system\n",
            "4. Save the RASMapper project\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Example: Extracting 2D Flow Area Perimeter Polygons\n"
          ]
        }
      ],
      "source": [
        "# Example: Get 2D Flow Area Perimeter Polygons (mesh_areas)\n",
        "print(\"\\nExample: Extracting 2D Flow Area Perimeter Polygons\")\n",
        "mesh_areas = HdfMesh.get_mesh_areas(geom_hdf_path)  # Corrected function name"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Example: Extracting mesh cell faces"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:29:54 - ras_commander.HdfMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:54 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:54 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:54 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:29:54 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:54 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:54 - ras_commander.HdfBase - CRITICAL - No valid projection found. Checked:\n",
            "1. HDF file projection attribute: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2. RASMapper projection file d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\.Winona_Upload\\LifeSim model\\Winona Levee SQRA 2019\\RAS\\AW\\MMC_Projection.prj found in RASMapper file, but was invalid\n",
            "To fix this:\n",
            "1. Open RASMapper\n",
            "2. Click Map > Set Projection\n",
            "3. Select an appropriate projection file or coordinate system\n",
            "4. Save the RASMapper project\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "First few rows of mesh cell faces:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>mesh_name</th>\\n', '      <th>face_id</th>\\n', '      <th>geometry</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>Perimeter 1</td>\\n', '      <td>0</td>\\n', '      <td>LINESTRING (1027231.594 7857846.138, 1026833.9...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>Perimeter 1</td>\\n', '      <td>1</td>\\n', '      <td>LINESTRING (1026833.966 7857797.923, 1026849.8...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>Perimeter 1</td>\\n', '      <td>2</td>\\n', '      <td>LINESTRING (1026849.886 7857613.488, 1027249.0...</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>Perimeter 1</td>\\n', '      <td>3</td>\\n', '      <td>LINESTRING (1027249.03 7857618.591, 1027231.59...</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>Perimeter 1</td>\\n', '      <td>4</td>\\n', '      <td>LINESTRING (1027231.594 7857846.138, 1027231.5...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['     mesh_name  face_id                                           geometry\\n', '0  Perimeter 1        0  LINESTRING (1027231.594 7857846.138, 1026833.9...\\n', '1  Perimeter 1        1  LINESTRING (1026833.966 7857797.923, 1026849.8...\\n', '2  Perimeter 1        2  LINESTRING (1026849.886 7857613.488, 1027249.0...\\n', '3  Perimeter 1        3  LINESTRING (1027249.03 7857618.591, 1027231.59...\\n', '4  Perimeter 1        4  LINESTRING (1027231.594 7857846.138, 1027231.5...']"
          },
          "execution_count": 22,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Example: Extract mesh cell faces\n",
        "print(\"\\nExample: Extracting mesh cell faces\")\n",
        "\n",
        "# Get mesh cell faces using the standardize_input decorator for consistent file handling\n",
        "mesh_cell_faces = HdfMesh.get_mesh_cell_faces(geom_hdf_path)\n",
        "\n",
        "# Display the first few rows of the mesh cell faces GeoDataFrame\n",
        "print(\"First few rows of mesh cell faces:\")\n",
        "mesh_cell_faces.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Set the projection to USA Contiguous Albers Equal Area Conic (USGS version)\n",
        "# Note, we would usually call the projection function in HdfMesh but the projection is not set in this example project\n",
        "projection = 'EPSG:5070'  # NAD83 / Conus Albers"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Example: Finding the nearest cell face to a given point\n",
            "Nearest cell face to point (1025677.0, 7853731.0):\n",
            "Face ID: 209\n",
            "Distance: 5.74 units\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Example Function: Find the nearest cell face to a given point\n",
        "# This provides enough basic information the face cell logic in the notebook\n",
        "\n",
        "def find_nearest_cell_face(point, cell_faces_df):\n",
        "    \"\"\"\n",
        "    Find the nearest cell face to a given point.\n",
        "\n",
        "    Args:\n",
        "        point (shapely.geometry.Point): The input point.\n",
        "        cell_faces_df (GeoDataFrame): DataFrame containing cell face linestrings.\n",
        "\n",
        "    Returns:\n",
        "        int: The face_id of the nearest cell face.\n",
        "        float: The distance to the nearest cell face.\n",
        "    \"\"\"\n",
        "    # Calculate distances from the input point to all cell faces\n",
        "    distances = cell_faces_df.geometry.distance(point)\n",
        "\n",
        "    # Find the index of the minimum distance\n",
        "    nearest_index = distances.idxmin()\n",
        "\n",
        "    # Get the face_id and distance of the nearest cell face\n",
        "    nearest_face_id = cell_faces_df.loc[nearest_index, 'face_id']\n",
        "    nearest_distance = distances[nearest_index]\n",
        "\n",
        "    return nearest_face_id, nearest_distance\n",
        "\n",
        "# Example usage\n",
        "print(\"\\nExample: Finding the nearest cell face to a given point\")\n",
        "\n",
        "# Create a sample point (you can replace this with any point of interest)\n",
        "from shapely.geometry import Point\n",
        "from geopandas import GeoDataFrame\n",
        "\n",
        "# Create the sample point with the same CRS as mesh_cell_faces\n",
        "sample_point = GeoDataFrame(\n",
        "    {'geometry': [Point(1025677, 7853731)]}, \n",
        "    crs=mesh_cell_faces.crs\n",
        ")\n",
        "\n",
        "if not mesh_cell_faces.empty and not sample_point.empty:\n",
        "    nearest_face_id, distance = find_nearest_cell_face(sample_point.geometry.iloc[0], mesh_cell_faces)\n",
        "    print(f\"Nearest cell face to point {sample_point.geometry.iloc[0].coords[0]}:\")\n",
        "    print(f\"Face ID: {nearest_face_id}\")\n",
        "    print(f\"Distance: {distance:.2f} units\")\n",
        "\n",
        "    # Visualize the result\n",
        "    fig, ax = plt.subplots(figsize=(12, 8))\n",
        "    \n",
        "    # Plot all cell faces\n",
        "    mesh_cell_faces.plot(ax=ax, color='blue', linewidth=0.5, alpha=0.5, label='Cell Faces')\n",
        "    \n",
        "    # Plot the sample point\n",
        "    sample_point.plot(ax=ax, color='red', markersize=100, alpha=0.7, label='Sample Point')\n",
        "    \n",
        "    # Plot the nearest cell face\n",
        "    nearest_face = mesh_cell_faces[mesh_cell_faces['face_id'] == nearest_face_id]\n",
        "    nearest_face.plot(ax=ax, color='green', linewidth=2, alpha=0.7, label='Nearest Face')\n",
        "    \n",
        "    # Set labels and title\n",
        "    ax.set_xlabel('X Coordinate')\n",
        "    ax.set_ylabel('Y Coordinate')\n",
        "    ax.set_title('Nearest Cell Face to Sample Point')\n",
        "    \n",
        "    # Add legend and grid\n",
        "    ax.legend()\n",
        "    ax.grid(True)\n",
        "    \n",
        "    # Adjust layout and display\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "else:\n",
        "    print(\"Unable to perform nearest cell face search due to missing data.\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:29:54 - ras_commander.HdfMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:54 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:54 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:54 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:54 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:54 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:54 - ras_commander.HdfBase - CRITICAL - No valid projection found. Checked:\n",
            "1. HDF file projection attribute: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2. RASMapper projection file d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\.Winona_Upload\\LifeSim model\\Winona Levee SQRA 2019\\RAS\\AW\\MMC_Projection.prj found in RASMapper file, but was invalid\n",
            "To fix this:\n",
            "1. Open RASMapper\n",
            "2. Click Map > Set Projection\n",
            "3. Select an appropriate projection file or coordinate system\n",
            "4. Save the RASMapper project\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Example: Extracting mesh cell faces and plotting with profile lines\n",
            "First few rows of mesh cell faces:\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Example: Extract mesh cell faces and plot with profile lines\n",
        "print(\"\\nExample: Extracting mesh cell faces and plotting with profile lines\")\n",
        "\n",
        "# Get mesh cell faces\n",
        "mesh_cell_faces = HdfMesh.get_mesh_cell_faces(geom_hdf_path)\n",
        "\n",
        "# Display the first few rows of the mesh cell faces DataFrame\n",
        "print(\"First few rows of mesh cell faces:\")\n",
        "mesh_cell_faces\n",
        "\n",
        "# Load the GeoJSON file for profile lines\n",
        "geojson_path = Path(r'data/profile_lines_chippewa2D.geojson')  # Update with the correct path\n",
        "profile_lines_gdf = gpd.read_file(geojson_path)\n",
        "\n",
        "# Set the Coordinate Reference System (CRS) to EPSG:5070\n",
        "profile_lines_gdf = profile_lines_gdf.set_crs(epsg=5070, allow_override=True)\n",
        "\n",
        "# Plot the mesh cell faces and profile lines together\n",
        "fig, ax = plt.subplots(figsize=(12, 8))\n",
        "mesh_cell_faces.plot(ax=ax, color='blue', alpha=0.5, edgecolor='k', label='Mesh Cell Faces')\n",
        "profile_lines_gdf.plot(ax=ax, color='orange', linewidth=2, label='Profile Lines')\n",
        "\n",
        "# Set labels and title\n",
        "ax.set_xlabel('Easting')\n",
        "ax.set_ylabel('Northing')\n",
        "ax.set_title('Mesh Cell Faces and Profile Lines')\n",
        "\n",
        "# Add grid and legend\n",
        "ax.grid(True)\n",
        "ax.legend()\n",
        "\n",
        "# Adjust layout and display\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:29:55 - ras_commander.HdfMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:55 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:55 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:55 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:55 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:55 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:29:55 - ras_commander.HdfBase - CRITICAL - No valid projection found. Checked:\n",
            "1. HDF file projection attribute: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2. RASMapper projection file d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\.Winona_Upload\\LifeSim model\\Winona Levee SQRA 2019\\RAS\\AW\\MMC_Projection.prj found in RASMapper file, but was invalid\n",
            "To fix this:\n",
            "1. Open RASMapper\n",
            "2. Click Map > Set Projection\n",
            "3. Select an appropriate projection file or coordinate system\n",
            "4. Save the RASMapper project\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Example: Extracting mesh cell faces near profile lines\n",
            "First few rows of mesh cell faces:\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Original ordered faces near profile lines:\n",
            "\n",
            "Combined profile-to-faceline results:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>profile_name</th>\\n', '      <th>geometry</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>Profile Line 1</td>\\n', '      <td>LINESTRING (1027100.412 7857052.854, 1027350.3...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>Profile Line 2</td>\\n', '      <td>LINESTRING (1026801.09 7853483.399, 1027138.39...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>Profile Line 3</td>\\n', '      <td>LINESTRING (1026498.193 7851901.653, 1026838.2...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['     profile_name                                           geometry\\n', '0  Profile Line 1  LINESTRING (1027100.412 7857052.854, 1027350.3...\\n', '1  Profile Line 2  LINESTRING (1026801.09 7853483.399, 1027138.39...\\n', '2  Profile Line 3  LINESTRING (1026498.193 7851901.653, 1026838.2...']"
          },
          "execution_count": 26,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Example: Extracting mesh cell faces near profile lines\n",
        "print(\"\\nExample: Extracting mesh cell faces near profile lines\")\n",
        "\n",
        "# Get mesh cell faces using HdfMesh class\n",
        "mesh_cell_faces = HdfMesh.get_mesh_cell_faces(geom_hdf_path)\n",
        "\n",
        "# Display the first few rows of the mesh cell faces DataFrame\n",
        "print(\"First few rows of mesh cell faces:\")\n",
        "mesh_cell_faces\n",
        "\n",
        "# Load the GeoJSON file for profile lines\n",
        "geojson_path = Path(r'data/profile_lines_chippewa2D.geojson')  # Update with the correct path\n",
        "profile_lines_gdf = gpd.read_file(geojson_path)\n",
        "\n",
        "# Set the Coordinate Reference System (CRS) to EPSG:5070\n",
        "profile_lines_gdf = profile_lines_gdf.set_crs(epsg=5070, allow_override=True)\n",
        "\n",
        "# Initialize a dictionary to store faces near each profile line\n",
        "faces_near_profile_lines = {}\n",
        "\n",
        "# Define distance threshold (10 ft converted to meters)\n",
        "distance_threshold = 10\n",
        "angle_threshold = 60  # degrees\n",
        "\n",
        "# Function to calculate the smallest angle between two lines or line segments.\n",
        "def calculate_angle(line):\n",
        "    if isinstance(line, LineString):\n",
        "        x_diff = line.xy[0][-1] - line.xy[0][0]\n",
        "        y_diff = line.xy[1][-1] - line.xy[1][0]\n",
        "    else:\n",
        "        x_diff = line[1][0] - line[0][0]\n",
        "        y_diff = line[1][1] - line[0][1]\n",
        "    \n",
        "    angle = np.degrees(np.arctan2(y_diff, x_diff))\n",
        "    return angle % 360 if angle >= 0 else (angle + 360) % 360\n",
        "\n",
        "# Function to break line into segments\n",
        "def break_line_into_segments(line, segment_length):\n",
        "    segments = []\n",
        "    segment_angles = []\n",
        "    \n",
        "    distances = np.arange(0, line.length, segment_length)\n",
        "    if distances[-1] != line.length:\n",
        "        distances = np.append(distances, line.length)\n",
        "        \n",
        "    for i in range(len(distances)-1):\n",
        "        point1 = line.interpolate(distances[i])\n",
        "        point2 = line.interpolate(distances[i+1])\n",
        "        segment = LineString([point1, point2])\n",
        "        segments.append(segment)\n",
        "        segment_angles.append(calculate_angle([point1.coords[0], point2.coords[0]]))\n",
        "        \n",
        "    return segments, segment_angles\n",
        "\n",
        "# Function to calculate angle difference accounting for 180 degree equivalence\n",
        "def angle_difference(angle1, angle2):\n",
        "    diff = abs(angle1 - angle2) % 180\n",
        "    return min(diff, 180 - diff)\n",
        "\n",
        "# Function to order faces along profile line\n",
        "def order_faces_along_profile(profile_line, faces_gdf):\n",
        "    profile_start = Point(profile_line.coords[0])\n",
        "    \n",
        "    faces_with_dist = []\n",
        "    for idx, face in faces_gdf.iterrows():\n",
        "        face_start = Point(face.geometry.coords[0])\n",
        "        dist = profile_start.distance(face_start)\n",
        "        faces_with_dist.append((idx, dist))\n",
        "    \n",
        "    faces_with_dist.sort(key=lambda x: x[1])\n",
        "    return [x[0] for x in faces_with_dist]\n",
        "\n",
        "# Function to combine ordered faces into single linestring\n",
        "def combine_faces_to_linestring(ordered_faces_gdf):\n",
        "    coords = []\n",
        "    for _, face in ordered_faces_gdf.iterrows():\n",
        "        if not coords:  # First face - add all coordinates\n",
        "            coords.extend(list(face.geometry.coords))\n",
        "        else:  # Subsequent faces - add only end coordinate\n",
        "            coords.append(face.geometry.coords[-1])\n",
        "    return LineString(coords)\n",
        "\n",
        "# Initialize GeoDataFrame for final profile-to-faceline results\n",
        "profile_to_faceline = gpd.GeoDataFrame(columns=['profile_name', 'geometry'], crs=profile_lines_gdf.crs)\n",
        "\n",
        "# Iterate through each profile line\n",
        "for index, profile_line in profile_lines_gdf.iterrows():\n",
        "    profile_geom = profile_line.geometry\n",
        "    \n",
        "    # Break profile line into segments\n",
        "    segments, segment_angles = break_line_into_segments(profile_geom, distance_threshold)\n",
        "    \n",
        "    # Initialize set to store nearby faces\n",
        "    nearby_faces = set()\n",
        "    \n",
        "    # For each face, check distance to segments and angle difference\n",
        "    for face_idx, face in mesh_cell_faces.iterrows():\n",
        "        face_geom = face.geometry\n",
        "        \n",
        "        if isinstance(face_geom, LineString):\n",
        "            face_angle = calculate_angle(face_geom)\n",
        "            \n",
        "            for segment, segment_angle in zip(segments, segment_angles):\n",
        "                if face_geom.distance(segment) <= distance_threshold:\n",
        "                    if angle_difference(face_angle, segment_angle) <= angle_threshold:\n",
        "                        nearby_faces.add(face_idx)\n",
        "                        break\n",
        "    \n",
        "    # Convert the set of indices back to a GeoDataFrame\n",
        "    nearby_faces_gdf = mesh_cell_faces.loc[list(nearby_faces)]\n",
        "    \n",
        "    # Order faces along profile line\n",
        "    ordered_indices = order_faces_along_profile(profile_geom, nearby_faces_gdf)\n",
        "    ordered_faces_gdf = nearby_faces_gdf.loc[ordered_indices]\n",
        "    \n",
        "    # Combine ordered faces into single linestring\n",
        "    combined_linestring = combine_faces_to_linestring(ordered_faces_gdf)\n",
        "    \n",
        "    # Add to profile_to_faceline GeoDataFrame\n",
        "    new_row = gpd.GeoDataFrame({'profile_name': [profile_line['Name']], \n",
        "                               'geometry': [combined_linestring]}, \n",
        "                              crs=profile_lines_gdf.crs)\n",
        "    profile_to_faceline = pd.concat([profile_to_faceline, new_row], ignore_index=True)\n",
        "    \n",
        "    # Store the ordered faces in the dictionary\n",
        "    faces_near_profile_lines[profile_line['Name']] = ordered_faces_gdf\n",
        "\n",
        "# Plot the results\n",
        "fig, ax = plt.subplots(figsize=(12, 8))\n",
        "\n",
        "# Plot all mesh cell faces in light blue\n",
        "mesh_cell_faces.plot(ax=ax, color='lightblue', alpha=0.3, edgecolor='k', label='All Mesh Faces')\n",
        "\n",
        "# Plot selected faces for each profile line with numbers\n",
        "colors = ['red', 'green', 'blue']\n",
        "for (profile_name, faces), color in zip(faces_near_profile_lines.items(), colors):\n",
        "    if not faces.empty:\n",
        "        faces.plot(ax=ax, color=color, alpha=0.6, label=f'Faces near {profile_name}')\n",
        "        \n",
        "        # Add numbers to faces\n",
        "        for i, (idx, face) in enumerate(faces.iterrows()):\n",
        "            midpoint = face.geometry.interpolate(0.5, normalized=True)\n",
        "            ax.text(midpoint.x, midpoint.y, str(i+1), \n",
        "                   color=color, fontweight='bold', ha='center', va='center')\n",
        "\n",
        "# Plot the combined linestrings\n",
        "profile_to_faceline.plot(ax=ax, color='black', linewidth=2, \n",
        "                        linestyle='--', label='Combined Face Lines')\n",
        "\n",
        "# Set labels and title\n",
        "ax.set_xlabel('Easting')\n",
        "ax.set_ylabel('Northing')\n",
        "ax.set_title('Mesh Cell Faces and Profile Lines\\nNumbered in order along profile')\n",
        "\n",
        "# Add grid and legend\n",
        "ax.grid(True)\n",
        "ax.legend()\n",
        "\n",
        "# Adjust layout and display\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Display the results\n",
        "print(\"\\nOriginal ordered faces near profile lines:\")\n",
        "faces_near_profile_lines\n",
        "\n",
        "print(\"\\nCombined profile-to-faceline results:\")\n",
        "profile_to_faceline"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "-----"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:30:00 - ras_commander.HdfMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:30:00 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:30:00 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:30:00 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n"
          ]
        },
        {
          "data": {
            "text/plain": "[\"{'Perimeter 1':       Face ID          Z       Area Wetted Perimeter Manning's n\\n\", ' 0           0  683.78314        0.0              0.0  0.06680043\\n', ' 1           0  683.98315  25.314476        311.06384  0.06680043\\n', ' 2           0   684.1409   77.88681         355.3648  0.06600185\\n', ' 3           0   684.1893  98.404495        368.92633  0.06575739\\n', ' 4           0   684.5791  249.17476         400.5631  0.06531201\\n', ' ...       ...        ...        ...              ...         ...\\n', ' 5183      812  683.02405   1228.017        475.78708  0.06334631\\n', ' 5184      813   683.6363        0.0              0.0  0.07539803\\n', ' 5185      813   683.8363  13.135144        199.78789  0.07539803\\n', ' 5186      813   683.9459  45.552128        391.64612  0.07541533\\n', ' 5187      813  683.94946   51.69725         397.8351  0.07541589\\n', ' \\n', ' [5188 rows x 5 columns]}']"
          },
          "execution_count": 27,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Get face property tables with error handling\n",
        "face_property_tables = HdfMesh.get_mesh_face_property_tables(geom_hdf_path)\n",
        "face_property_tables"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:30:00 - matplotlib.category - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.\n",
            "2025-04-09 08:30:00 - matplotlib.category - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.\n",
            "2025-04-09 08:30:00 - matplotlib.category - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.\n",
            "2025-04-09 08:30:00 - matplotlib.category - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.\n",
            "2025-04-09 08:30:00 - matplotlib.category - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.\n",
            "2025-04-09 08:30:00 - matplotlib.category - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.\n",
            "2025-04-09 08:30:00 - matplotlib.category - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.\n",
            "2025-04-09 08:30:00 - matplotlib.category - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.\n",
            "2025-04-09 08:30:00 - matplotlib.category - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.\n",
            "2025-04-09 08:30:00 - matplotlib.category - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.\n",
            "2025-04-09 08:30:00 - matplotlib.category - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.\n",
            "2025-04-09 08:30:00 - matplotlib.category - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1800x600 with 3 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Extract the face property table for Face ID 4 and display it\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "face_id = 4\n",
        "face_properties = face_property_tables['Perimeter 1'][face_property_tables['Perimeter 1']['Face ID'] == face_id]\n",
        "\n",
        "# Create subplots arranged horizontally\n",
        "fig, axs = plt.subplots(1, 3, figsize=(18, 6))\n",
        "\n",
        "# Plot Z vs Area\n",
        "axs[0].plot(face_properties['Z'], face_properties['Area'], marker='o', color='blue', label='Area')\n",
        "axs[0].set_title(f'Face ID {face_id}: Z vs Area')\n",
        "axs[0].set_xlabel('Z')\n",
        "axs[0].set_ylabel('Area')\n",
        "axs[0].grid(True)\n",
        "axs[0].legend()\n",
        "\n",
        "# Plot Z vs Wetted Perimeter\n",
        "axs[1].plot(face_properties['Z'], face_properties['Wetted Perimeter'], marker='o', color='green', label='Wetted Perimeter')\n",
        "axs[1].set_title(f'Face ID {face_id}: Z vs Wetted Perimeter')\n",
        "axs[1].set_xlabel('Z')\n",
        "axs[1].set_ylabel('Wetted Perimeter')\n",
        "axs[1].grid(True)\n",
        "axs[1].legend()\n",
        "\n",
        "# Plot Z vs Manning's n\n",
        "axs[2].plot(face_properties['Z'], face_properties[\"Manning's n\"], marker='o', color='red', label=\"Manning's n\")\n",
        "axs[2].set_title(f'Face ID {face_id}: Z vs Manning\\'s n')\n",
        "axs[2].set_xlabel('Z')\n",
        "axs[2].set_ylabel(\"Manning's n\")\n",
        "axs[2].grid(True)\n",
        "axs[2].legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:30:00 - ras_commander.HdfMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:30:00 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.p02.hdf\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.p02.hdf\n"
          ]
        }
      ],
      "source": [
        "# Get mesh timeseries output\n",
        "# Get mesh areas from previous code cell\n",
        "mesh_areas = HdfMesh.get_mesh_area_names(geom_hdf_path)\n",
        "\n",
        "mesh_name = mesh_areas[0]  # Use the first 2D flow area name\n",
        "timeseries_da = HdfResultsMesh.get_mesh_timeseries(plan_hdf_path, mesh_name, \"Water Surface\")\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Mesh Timeseries Output (Water Surface) for Perimeter 1:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div><pre>xarray.DataArray with Unknown dimensions\n[Full xarray output truncated during preprocessing]</pre></div>",
            "text/plain": "xarray.DataArray with Unknown dimensions\n[Full xarray output truncated during preprocessing]"
          },
          "execution_count": 30,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(f\"\\nMesh Timeseries Output (Water Surface) for {mesh_name}:\")\n",
        "timeseries_da"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.p02.hdf\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.p02.hdf\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - WARNING - Variable 'Depth' not found in the HDF file for mesh 'Perimeter 1'. Skipping.\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - WARNING - Variable 'Velocity' not found in the HDF file for mesh 'Perimeter 1'. Skipping.\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - WARNING - Variable 'Velocity X' not found in the HDF file for mesh 'Perimeter 1'. Skipping.\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - WARNING - Variable 'Velocity Y' not found in the HDF file for mesh 'Perimeter 1'. Skipping.\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - WARNING - Variable 'Froude Number' not found in the HDF file for mesh 'Perimeter 1'. Skipping.\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - WARNING - Variable 'Courant Number' not found in the HDF file for mesh 'Perimeter 1'. Skipping.\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - WARNING - Variable 'Shear Stress' not found in the HDF file for mesh 'Perimeter 1'. Skipping.\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - WARNING - Variable 'Bed Elevation' not found in the HDF file for mesh 'Perimeter 1'. Skipping.\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - WARNING - Variable 'Precipitation Rate' not found in the HDF file for mesh 'Perimeter 1'. Skipping.\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - WARNING - Variable 'Infiltration Rate' not found in the HDF file for mesh 'Perimeter 1'. Skipping.\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - WARNING - Variable 'Evaporation Rate' not found in the HDF file for mesh 'Perimeter 1'. Skipping.\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - WARNING - Variable 'Percolation Rate' not found in the HDF file for mesh 'Perimeter 1'. Skipping.\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Elevation' not found in the HDF file for mesh 'Perimeter 1'. Skipping.\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Depth' not found in the HDF file for mesh 'Perimeter 1'. Skipping.\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Flow' not found in the HDF file for mesh 'Perimeter 1'. Skipping.\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Velocity' not found in the HDF file for mesh 'Perimeter 1'. Skipping.\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Velocity X' not found in the HDF file for mesh 'Perimeter 1'. Skipping.\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Velocity Y' not found in the HDF file for mesh 'Perimeter 1'. Skipping.\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Water Surface' not found in the HDF file for mesh 'Perimeter 1'. Skipping.\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Courant' not found in the HDF file for mesh 'Perimeter 1'. Skipping.\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Cumulative Volume' not found in the HDF file for mesh 'Perimeter 1'. Skipping.\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Eddy Viscosity' not found in the HDF file for mesh 'Perimeter 1'. Skipping.\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Flow Period Average' not found in the HDF file for mesh 'Perimeter 1'. Skipping.\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Friction Term' not found in the HDF file for mesh 'Perimeter 1'. Skipping.\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Pressure Gradient Term' not found in the HDF file for mesh 'Perimeter 1'. Skipping.\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Shear Stress' not found in the HDF file for mesh 'Perimeter 1'. Skipping.\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Tangential Velocity' not found in the HDF file for mesh 'Perimeter 1'. Skipping.\n"
          ]
        }
      ],
      "source": [
        "# Get mesh cells timeseries output\n",
        "cells_timeseries_ds = HdfResultsMesh.get_mesh_cells_timeseries(plan_hdf_path, mesh_name)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Mesh Cells Timeseries Output:\n"
          ]
        },
        {
          "data": {
            "text/plain": "xarray.Dataset with Unknown dimensions\n[Full xarray output truncated during preprocessing]"
          },
          "execution_count": 32,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nMesh Cells Timeseries Output:\")\n",
        "cells_timeseries_ds"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.p02.hdf\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.p02.hdf\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.p02.hdf\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.p02.hdf\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.p02.hdf\n",
            "2025-04-09 08:30:00 - ras_commander.HdfResultsMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.p02.hdf\n"
          ]
        }
      ],
      "source": [
        "# Get mesh faces timeseries output\n",
        "faces_timeseries_ds = HdfResultsMesh.get_mesh_faces_timeseries(plan_hdf_path, mesh_name)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Mesh Faces Timeseries Output:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div><pre>xarray.Dataset with (time: 1633, face_id: 814)\\n', 'Coordinates:\\n', '  * time           (time) datetime64[ns] 13kB 2019-04-02 ... 2019-05-06\\n', '  * face_id        (face_id) int64 7kB 0 1 2 3 4 5 6 ... 808 809 810 811 812 813\\n', 'Data variables:\\n', '    face_velocity  (time, face_id) float32 5MB 0.0 0.0 0.0 0.0 ... 0.0 0.0 -0.0\\n', '    face_flow      (time, face_id) float32 5MB 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0\\n', 'Attributes:\\n', '    units:      ft/s\\n', '    mesh_name:  Perimeter 1\\n', \"    variable:   Face Velocity\n[Full xarray output truncated during preprocessing]</pre></div>",
            "text/plain": "xarray.Dataset with Unknown dimensions\n[Full xarray output truncated during preprocessing]"
          },
          "execution_count": 34,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nMesh Faces Timeseries Output:\")\n",
        "faces_timeseries_ds\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Conversion to positive values complete.\n",
            "Number of faces processed: 814\n"
          ]
        }
      ],
      "source": [
        "# Convert all face velocities and face flow values to positive for further calculations\n",
        "# We have visually confirmed for this model that all flow is moving in the same direction\n",
        "\n",
        "# Function to process and convert face data to positive values\n",
        "def convert_to_positive_values(faces_timeseries_ds, cells_timeseries_ds):\n",
        "    \"\"\"\n",
        "    Convert face velocities and flows to positive values while maintaining their relationships.\n",
        "    \n",
        "    Args:\n",
        "        faces_timeseries_ds (xarray.Dataset): Dataset containing face timeseries data\n",
        "        cells_timeseries_ds (xarray.Dataset): Dataset containing cell timeseries data\n",
        "        \n",
        "    Returns:\n",
        "        xarray.Dataset: Modified dataset with positive values\n",
        "    \"\"\"\n",
        "    # Get the face velocity and flow variables\n",
        "    face_velocity = faces_timeseries_ds['face_velocity']\n",
        "    face_flow = faces_timeseries_ds['face_flow']\n",
        "    \n",
        "    # Calculate the sign of the velocity to maintain flow direction relationships\n",
        "    velocity_sign = xr.where(face_velocity >= 0, 1, -1)\n",
        "    \n",
        "    # Convert velocities and flows to absolute values while maintaining their relationship\n",
        "    faces_timeseries_ds['face_velocity'] = abs(face_velocity)\n",
        "    faces_timeseries_ds['face_flow'] = abs(face_flow)\n",
        "    \n",
        "    # Store the original sign as a new variable for reference\n",
        "    faces_timeseries_ds['velocity_direction'] = velocity_sign\n",
        "    \n",
        "    print(\"Conversion to positive values complete.\")\n",
        "    print(f\"Number of faces processed: {len(faces_timeseries_ds.face_id)}\")\n",
        "    \n",
        "    return faces_timeseries_ds, cells_timeseries_ds\n",
        "\n",
        "# Convert the values in our datasets\n",
        "faces_timeseries_ds_positive, cells_timeseries_ds_positive = convert_to_positive_values(\n",
        "    faces_timeseries_ds, \n",
        "    cells_timeseries_ds\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {},
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import xarray as xr\n",
        "\n",
        "# Function to process faces for a single profile line\n",
        "def process_profile_line(profile_name, faces, cells_timeseries_ds, faces_timeseries_ds):\n",
        "    face_ids = faces['face_id'].tolist()\n",
        "    \n",
        "    # Extract relevant data for these faces\n",
        "    face_velocities = faces_timeseries_ds['face_velocity'].sel(face_id=face_ids)\n",
        "    face_flows = faces_timeseries_ds['face_flow'].sel(face_id=face_ids)\n",
        "    \n",
        "    # Create a new dataset with calculated results\n",
        "    results_ds = xr.Dataset({\n",
        "        'face_velocity': face_velocities,\n",
        "        'face_flow': face_flows\n",
        "    })\n",
        "    \n",
        "    # Convert to dataframe for easier manipulation\n",
        "    results_df = results_ds.to_dataframe().reset_index()\n",
        "    \n",
        "    # Add profile name and face order\n",
        "    results_df['profile_name'] = profile_name\n",
        "    results_df['face_order'] = results_df.groupby('time')['face_id'].transform(lambda x: pd.factorize(x)[0])\n",
        "    \n",
        "    return results_df\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Calculate Vave = Sum Qn / Sum An for each profile line\n",
        "where Vave = the summation of face flow / flow area for all the faces in the profile line\n",
        "\n",
        "Then, save the results to CSV"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>time</th>\\n', '      <th>face_id</th>\\n', '      <th>face_velocity</th>\\n', '      <th>face_flow</th>\\n', '      <th>profile_name</th>\\n', '      <th>face_order</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>2019-04-02</td>\\n', '      <td>52</td>\\n', '      <td>0.000000</td>\\n', '      <td>0.000000</td>\\n', '      <td>Profile Line 1</td>\\n', '      <td>0</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>2019-04-02</td>\\n', '      <td>92</td>\\n', '      <td>0.000000</td>\\n', '      <td>0.000000</td>\\n', '      <td>Profile Line 1</td>\\n', '      <td>1</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>2019-04-02</td>\\n', '      <td>548</td>\\n', '      <td>1.018038</td>\\n', '      <td>353.129822</td>\\n', '      <td>Profile Line 1</td>\\n', '      <td>2</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>2019-04-02</td>\\n', '      <td>691</td>\\n', '      <td>2.106394</td>\\n', '      <td>2195.409912</td>\\n', '      <td>Profile Line 1</td>\\n', '      <td>3</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>2019-04-02</td>\\n', '      <td>78</td>\\n', '      <td>2.376904</td>\\n', '      <td>3600.228760</td>\\n', '      <td>Profile Line 1</td>\\n', '      <td>4</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['        time  face_id  face_velocity    face_flow    profile_name  face_order\\n', '0 2019-04-02       52       0.000000     0.000000  Profile Line 1           0\\n', '1 2019-04-02       92       0.000000     0.000000  Profile Line 1           1\\n', '2 2019-04-02      548       1.018038   353.129822  Profile Line 1           2\\n', '3 2019-04-02      691       2.106394  2195.409912  Profile Line 1           3\\n', '4 2019-04-02       78       2.376904  3600.228760  Profile Line 1           4']"
          },
          "execution_count": 37,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Process all profile lines\n",
        "all_results = []\n",
        "for profile_name, faces in faces_near_profile_lines.items():\n",
        "    profile_results = process_profile_line(profile_name, faces, cells_timeseries_ds, faces_timeseries_ds)\n",
        "    all_results.append(profile_results)\n",
        "\n",
        "# Combine results from all profile lines\n",
        "combined_results_df = pd.concat(all_results, ignore_index=True)\n",
        "\n",
        "# Display the first few rows of the combined results\n",
        "combined_results_df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "-----"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Time Series DataFrame for Profile Line 1:\n",
            "\n",
            "Time Series DataFrame for Profile Line 2:\n",
            "\n",
            "Time Series DataFrame for Profile Line 3:\n",
            "\n",
            "Profile Lines Processed:\n"
          ]
        },
        {
          "data": {
            "text/plain": "[\"{'Profile Line 1':             time  face_id  face_velocity    face_flow    profile_name  \\\\\\n\", ' 0     2019-04-02       52       0.000000     0.000000  Profile Line 1   \\n', ' 1     2019-04-02       92       0.000000     0.000000  Profile Line 1   \\n', ' 2     2019-04-02      548       1.018038   353.129822  Profile Line 1   \\n', ' 3     2019-04-02      691       2.106394  2195.409912  Profile Line 1   \\n', ' 4     2019-04-02       78       2.376904  3600.228760  Profile Line 1   \\n', ' ...          ...      ...            ...          ...             ...   \\n', ' 11426 2019-05-06      548       0.792421   236.539139  Profile Line 1   \\n', ' 11427 2019-05-06      691       1.673946  1335.706055  Profile Line 1   \\n', ' 11428 2019-05-06       78       1.971013  2325.571533  Profile Line 1   \\n', ' 11429 2019-05-06       79       3.666553  7875.726562  Profile Line 1   \\n', ' 11430 2019-05-06      697       2.158578  2533.945312  Profile Line 1   \\n', ' \\n', '        face_order  \\n',\n...\n[Output truncated, 3973 characters total]"
          },
          "execution_count": 38,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "profile_time_series = {}\n",
        "\n",
        "# Iterate through each profile line and extract its corresponding data\n",
        "for profile_name, faces_gdf in faces_near_profile_lines.items():\n",
        "    # Get the list of face_ids for this profile line\n",
        "    face_ids = faces_gdf['face_id'].tolist()\n",
        "    \n",
        "    # Filter the combined_results_df for these face_ids\n",
        "    profile_df = combined_results_df[combined_results_df['face_id'].isin(face_ids)].copy()\n",
        "    \n",
        "    # Add the profile name as a column\n",
        "    profile_df['profile_name'] = profile_name\n",
        "    \n",
        "    # Reset index for cleanliness\n",
        "    profile_df.reset_index(drop=True, inplace=True)\n",
        "    \n",
        "    # Store in the dictionary\n",
        "    profile_time_series[profile_name] = profile_df\n",
        "    \n",
        "    # Display a preview\n",
        "    print(f\"\\nTime Series DataFrame for {profile_name}:\")\n",
        "    profile_df\n",
        "\n",
        "# Optionally, display all profile names\n",
        "print(\"\\nProfile Lines Processed:\")\n",
        "profile_time_series\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Combined Time Series DataFrame for All Profiles:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>time</th>\\n', '      <th>face_id</th>\\n', '      <th>face_velocity</th>\\n', '      <th>face_flow</th>\\n', '      <th>profile_name</th>\\n', '      <th>face_order</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>2019-04-02</td>\\n', '      <td>52</td>\\n', '      <td>0.000000</td>\\n', '      <td>0.000000</td>\\n', '      <td>Profile Line 1</td>\\n', '      <td>0</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>2019-04-02</td>\\n', '      <td>92</td>\\n', '      <td>0.000000</td>\\n', '      <td>0.000000</td>\\n', '      <td>Profile Line 1</td>\\n', '      <td>1</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>2019-04-02</td>\\n', '      <td>548</td>\\n', '      <td>1.018038</td>\\n', '      <td>353.129822</td>\\n', '      <td>Profile Line 1</td>\\n', '      <td>2</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>2019-04-02</td>\\n', '      <td>691</td>\\n', '      <td>2.106394</td>\\n', '      <td>2195.409912</td>\\n', '      <td>Profile Line 1</td>\\n', '      <td>3</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>2019-04-02</td>\\n', '      <td>78</td>\\n', '      <td>2.376904</td>\\n', '      <td>3600.228760</td>\\n', '      <td>Profile Line 1</td>\\n', '      <td>4</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['            time  face_id  face_velocity    face_flow    profile_name  \\\\\\n', '0     2019-04-02       52       0.000000     0.000000  Profile Line 1   \\n', '1     2019-04-02       92       0.000000     0.000000  Profile Line 1   \\n', '2     2019-04-02      548       1.018038   353.129822  Profile Line 1   \\n', '3     2019-04-02      691       2.106394  2195.409912  Profile Line 1   \\n', '4     2019-04-02       78       2.376904  3600.228760  Profile Line 1   \\n', '...          ...      ...            ...          ...             ...   \\n', '45719 2019-05-06      455       1.958695  3282.870117  Profile Line 3   \\n', '45720 2019-05-06      469       2.087730  3434.791504  Profile Line 3   \\n', '45721 2019-05-06      416       2.239057  3689.832275  Profile Line 3   \\n', '45722 2019-05-06      437       1.693252  1800.098877  Profile Line 3   \\n', '45723 2019-05-06      480       0.001713     0.003279  Profile Line 3   \\n', '\\n', '       face_order  \\n', '0               0  \\n', '1               1  \\n', '2               2  \\n', '3               3  \\n', '4               4  \\n', '...           ...  \\n', '45719           3  \\n', '45720           4  \\n', '45721           5  \\n', '45722           6  \\n', '45723           7  \\n', '\\n', '[45724 rows x 6 columns]']"
          },
          "execution_count": 39,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "all_profiles_df = pd.concat(profile_time_series.values(), ignore_index=True)\n",
        "\n",
        "# Display the combined dataframe\n",
        "print(\"Combined Time Series DataFrame for All Profiles:\")\n",
        "all_profiles_df\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Available variables:\n",
            "profile_time_series: True\n",
            "faces_near_profile_lines: True\n",
            "profile_averages: False\n",
            "\n",
            "Columns in Profile Line 1:\n",
            "['time', 'face_id', 'face_velocity', 'face_flow', 'profile_name', 'face_order']\n",
            "\n",
            "Columns in Profile Line 2:\n",
            "['time', 'face_id', 'face_velocity', 'face_flow', 'profile_name', 'face_order']\n",
            "\n",
            "Columns in Profile Line 3:\n",
            "['time', 'face_id', 'face_velocity', 'face_flow', 'profile_name', 'face_order']\n"
          ]
        }
      ],
      "source": [
        "# Check if we have the necessary variables\n",
        "print(\"Available variables:\")\n",
        "print(\"profile_time_series:\", 'profile_time_series' in locals())\n",
        "print(\"faces_near_profile_lines:\", 'faces_near_profile_lines' in locals())\n",
        "print(\"profile_averages:\", 'profile_averages' in locals())\n",
        "\n",
        "# Look at the structure of profile_time_series\n",
        "if 'profile_time_series' in locals():\n",
        "    for name, df in profile_time_series.items():\n",
        "        print(f\"\\nColumns in {name}:\")\n",
        "        print(df.columns.tolist())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {},
      "outputs": [],
      "source": [
        "def calculate_discharge_weighted_velocity(profile_df: pd.DataFrame) -> pd.DataFrame:\n",
        "    \"\"\"\n",
        "    Calculate discharge-weighted average velocity for a profile line\n",
        "    Vw = Sum(|Qi|*Vi)/Sum(|Qi|) where Qi is face flow and Vi is face velocity\n",
        "    \"\"\"\n",
        "    print(\"Calculating discharge-weighted velocity...\")\n",
        "    print(f\"Input DataFrame:\\n{profile_df.head()}\")\n",
        "\n",
        "    # Calculate weighted velocity for each timestep\n",
        "    weighted_velocities = []\n",
        "    for time in profile_df['time'].unique():\n",
        "        time_data = profile_df[profile_df['time'] == time]\n",
        "        abs_flows = np.abs(time_data['face_flow'])\n",
        "        abs_velocities = np.abs(time_data['face_velocity'])\n",
        "        weighted_vel = (abs_flows * abs_velocities).sum() / abs_flows.sum()\n",
        "        weighted_velocities.append({\n",
        "            'time': time,\n",
        "            'weighted_velocity': weighted_vel\n",
        "        })\n",
        "    \n",
        "    weighted_df = pd.DataFrame(weighted_velocities)\n",
        "    print(f\"Calculated weighted velocities:\\n{weighted_df.head()}\")\n",
        "    return weighted_df\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Processing profile: Profile Line 1\n",
            "Calculating discharge-weighted velocity...\n",
            "Input DataFrame:\n",
            "        time  face_id  face_velocity    face_flow    profile_name  face_order\n",
            "0 2019-04-02       52       0.000000     0.000000  Profile Line 1           0\n",
            "1 2019-04-02       92       0.000000     0.000000  Profile Line 1           1\n",
            "2 2019-04-02      548       1.018038   353.129822  Profile Line 1           2\n",
            "3 2019-04-02      691       2.106394  2195.409912  Profile Line 1           3\n",
            "4 2019-04-02       78       2.376904  3600.228760  Profile Line 1           4\n",
            "Calculated weighted velocities:\n",
            "                 time  weighted_velocity\n",
            "0 2019-04-02 00:00:00           3.181145\n",
            "1 2019-04-02 00:30:00           3.186662\n",
            "2 2019-04-02 01:00:00           3.192697\n",
            "3 2019-04-02 01:30:00           3.198414\n",
            "4 2019-04-02 02:00:00           3.204067\n",
            "Weighted velocities calculated.\n",
            "Number of ordered faces: 7\n",
            "Converted time to datetime format.\n",
            "Number of ordered faces: 7\n",
            "Saved weighted velocities to d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Profile Line 1_discharge_weighted_velocity.csv\n",
            "\n",
            "Processing profile: Profile Line 2\n",
            "Calculating discharge-weighted velocity...\n",
            "Input DataFrame:\n",
            "        time  face_id  face_velocity    face_flow    profile_name  face_order\n",
            "0 2019-04-02      387       0.000000     0.000000  Profile Line 2           0\n",
            "1 2019-04-02      466       1.593006  1426.901733  Profile Line 2           1\n",
            "2 2019-04-02      611       0.000000     0.000000  Profile Line 2           2\n",
            "3 2019-04-02      601       0.000000     0.000000  Profile Line 2           3\n",
            "4 2019-04-02      599       1.248908   766.616943  Profile Line 2           4\n",
            "Calculated weighted velocities:\n",
            "                 time  weighted_velocity\n",
            "0 2019-04-02 00:00:00           2.401040\n",
            "1 2019-04-02 00:30:00           2.403080\n",
            "2 2019-04-02 01:00:00           2.407171\n",
            "3 2019-04-02 01:30:00           2.411040\n",
            "4 2019-04-02 02:00:00           2.414976\n",
            "Weighted velocities calculated.\n",
            "Number of ordered faces: 13\n",
            "Converted time to datetime format.\n",
            "Number of ordered faces: 13\n",
            "Saved weighted velocities to d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Profile Line 2_discharge_weighted_velocity.csv\n",
            "\n",
            "Processing profile: Profile Line 3\n",
            "Calculating discharge-weighted velocity...\n",
            "Input DataFrame:\n",
            "        time  face_id  face_velocity    face_flow    profile_name  face_order\n",
            "0 2019-04-02      532       0.000000     0.000000  Profile Line 3           0\n",
            "1 2019-04-02      341       0.000000     0.000000  Profile Line 3           1\n",
            "2 2019-04-02      349       1.962641  2601.644287  Profile Line 3           2\n",
            "3 2019-04-02      455       2.367594  4148.870605  Profile Line 3           3\n",
            "4 2019-04-02      469       2.515510  4458.292480  Profile Line 3           4\n",
            "Calculated weighted velocities:\n",
            "                 time  weighted_velocity\n",
            "0 2019-04-02 00:00:00           2.370525\n",
            "1 2019-04-02 00:30:00           2.371187\n",
            "2 2019-04-02 01:00:00           2.375672\n",
            "3 2019-04-02 01:30:00           2.379937\n",
            "4 2019-04-02 02:00:00           2.384298\n",
            "Weighted velocities calculated.\n",
            "Number of ordered faces: 8\n",
            "Converted time to datetime format.\n",
            "Number of ordered faces: 8\n",
            "Saved weighted velocities to d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Profile Line 3_discharge_weighted_velocity.csv\n"
          ]
        }
      ],
      "source": [
        "# Calculate for each profile line\n",
        "for profile_name, profile_df in profile_time_series.items():\n",
        "    print(f\"\\nProcessing profile: {profile_name}\")\n",
        "\n",
        "    # Calculate discharge-weighted velocity\n",
        "    weighted_velocities = calculate_discharge_weighted_velocity(profile_df)\n",
        "    \n",
        "    print(\"Weighted velocities calculated.\")\n",
        "    # Get ordered faces for this profile\n",
        "    ordered_faces = faces_near_profile_lines[profile_name]\n",
        "    print(f\"Number of ordered faces: {len(ordered_faces)}\")\n",
        "    \n",
        "    print(\"Converted time to datetime format.\")\n",
        "\n",
        "    # Get ordered faces for this profile\n",
        "    ordered_faces = faces_near_profile_lines[profile_name]\n",
        "    print(f\"Number of ordered faces: {len(ordered_faces)}\")\n",
        "    \n",
        "    # Save dataframes in the output directory\n",
        "    output_file = ras.project_folder / f\"{profile_name}_discharge_weighted_velocity.csv\"\n",
        "    weighted_velocities.to_csv(output_file, index=False)\n",
        "    print(f\"Saved weighted velocities to {output_file}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Generating comparison plot for profile: Profile Line 1\n",
            "Calculating discharge-weighted velocity...\n",
            "Input DataFrame:\n",
            "        time  face_id  face_velocity    face_flow    profile_name  face_order\n",
            "0 2019-04-02       52       0.000000     0.000000  Profile Line 1           0\n",
            "1 2019-04-02       92       0.000000     0.000000  Profile Line 1           1\n",
            "2 2019-04-02      548       1.018038   353.129822  Profile Line 1           2\n",
            "3 2019-04-02      691       2.106394  2195.409912  Profile Line 1           3\n",
            "4 2019-04-02       78       2.376904  3600.228760  Profile Line 1           4\n",
            "Calculated weighted velocities:\n",
            "                 time  weighted_velocity\n",
            "0 2019-04-02 00:00:00           3.181145\n",
            "1 2019-04-02 00:30:00           3.186662\n",
            "2 2019-04-02 01:00:00           3.192697\n",
            "3 2019-04-02 01:30:00           3.198414\n",
            "4 2019-04-02 02:00:00           3.204067\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1600x900 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Velocity Comparison for Profile Line 1 \n",
            "Individual Face Velocities vs Simple Average Velocity vs Discharge-Weighted Average Velocity\n",
            "Number of faces: 7\n",
            "\n",
            "Discharge-Weighted Velocity Statistics:\n",
            "Mean: 3.89 ft/s\n",
            "Max: 4.85 ft/s\n",
            "Min: 2.89 ft/s\n",
            "\n",
            "Simple Average Velocity Statistics:\n",
            "Mean: 2.07 ft/s\n",
            "Max: 2.82 ft/s\n",
            "Min: 1.47 ft/s\n",
            "\n",
            "Generating comparison plot for profile: Profile Line 2\n",
            "Calculating discharge-weighted velocity...\n",
            "Input DataFrame:\n",
            "        time  face_id  face_velocity    face_flow    profile_name  face_order\n",
            "0 2019-04-02      387       0.000000     0.000000  Profile Line 2           0\n",
            "1 2019-04-02      466       1.593006  1426.901733  Profile Line 2           1\n",
            "2 2019-04-02      611       0.000000     0.000000  Profile Line 2           2\n",
            "3 2019-04-02      601       0.000000     0.000000  Profile Line 2           3\n",
            "4 2019-04-02      599       1.248908   766.616943  Profile Line 2           4\n",
            "Calculated weighted velocities:\n",
            "                 time  weighted_velocity\n",
            "0 2019-04-02 00:00:00           2.401040\n",
            "1 2019-04-02 00:30:00           2.403080\n",
            "2 2019-04-02 01:00:00           2.407171\n",
            "3 2019-04-02 01:30:00           2.411040\n",
            "4 2019-04-02 02:00:00           2.414976\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1600x900 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Velocity Comparison for Profile Line 2 \n",
            "Individual Face Velocities vs Simple Average Velocity vs Discharge-Weighted Average Velocity\n",
            "Number of faces: 13\n",
            "\n",
            "Discharge-Weighted Velocity Statistics:\n",
            "Mean: 2.93 ft/s\n",
            "Max: 3.49 ft/s\n",
            "Min: 2.16 ft/s\n",
            "\n",
            "Simple Average Velocity Statistics:\n",
            "Mean: 1.16 ft/s\n",
            "Max: 1.58 ft/s\n",
            "Min: 0.82 ft/s\n",
            "\n",
            "Generating comparison plot for profile: Profile Line 3\n",
            "Calculating discharge-weighted velocity...\n",
            "Input DataFrame:\n",
            "        time  face_id  face_velocity    face_flow    profile_name  face_order\n",
            "0 2019-04-02      532       0.000000     0.000000  Profile Line 3           0\n",
            "1 2019-04-02      341       0.000000     0.000000  Profile Line 3           1\n",
            "2 2019-04-02      349       1.962641  2601.644287  Profile Line 3           2\n",
            "3 2019-04-02      455       2.367594  4148.870605  Profile Line 3           3\n",
            "4 2019-04-02      469       2.515510  4458.292480  Profile Line 3           4\n",
            "Calculated weighted velocities:\n",
            "                 time  weighted_velocity\n",
            "0 2019-04-02 00:00:00           2.370525\n",
            "1 2019-04-02 00:30:00           2.371187\n",
            "2 2019-04-02 01:00:00           2.375672\n",
            "3 2019-04-02 01:30:00           2.379937\n",
            "4 2019-04-02 02:00:00           2.384298\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1600x900 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Velocity Comparison for Profile Line 3 \n",
            "Individual Face Velocities vs Simple Average Velocity vs Discharge-Weighted Average Velocity\n",
            "Number of faces: 8\n",
            "\n",
            "Discharge-Weighted Velocity Statistics:\n",
            "Mean: 2.83 ft/s\n",
            "Max: 3.49 ft/s\n",
            "Min: 1.98 ft/s\n",
            "\n",
            "Simple Average Velocity Statistics:\n",
            "Mean: 1.75 ft/s\n",
            "Max: 2.35 ft/s\n",
            "Min: 1.20 ft/s\n"
          ]
        }
      ],
      "source": [
        "# Create plots comparing discharge-weighted velocity and simple average for each profile line\n",
        "for profile_name, profile_df in profile_time_series.items():\n",
        "    \n",
        "    print(f\"\\nGenerating comparison plot for profile: {profile_name}\")\n",
        "    \n",
        "    # Calculate discharge-weighted velocity\n",
        "    weighted_velocities = calculate_discharge_weighted_velocity(profile_df)\n",
        "    weighted_velocities['time'] = pd.to_datetime(weighted_velocities['time'])\n",
        "    \n",
        "    # Calculate simple average velocity for each timestep\n",
        "    simple_averages = profile_df.groupby('time')['face_velocity'].mean().reset_index()\n",
        "    simple_averages['time'] = pd.to_datetime(simple_averages['time'])\n",
        "    \n",
        "    # Create figure for comparison plot\n",
        "    plt.figure(figsize=(16, 9))\n",
        "    \n",
        "    # Plot individual face velocities with thin lines\n",
        "    for face_id in profile_df['face_id'].unique():\n",
        "        face_data = profile_df[profile_df['face_id'] == face_id]\n",
        "        plt.plot(face_data['time'], \n",
        "                face_data['face_velocity'], \n",
        "                alpha=0.8,  # More transparent\n",
        "                linewidth=0.3,  # Thinner line\n",
        "                color='gray',  # Consistent color\n",
        "                label=f'Face ID {face_id}')\n",
        "        \n",
        "        # Find and annotate peak value for each face\n",
        "        peak_idx = face_data['face_velocity'].idxmax()\n",
        "        peak_time = face_data.loc[peak_idx, 'time']\n",
        "        peak_vel = face_data.loc[peak_idx, 'face_velocity']\n",
        "        plt.annotate(f'{peak_vel:.2f} ({face_id})',\n",
        "                    xy=(peak_time, peak_vel),\n",
        "                    xytext=(10, 10),\n",
        "                    textcoords='offset points',\n",
        "                    fontsize=8,\n",
        "                    alpha=0.5)\n",
        "    \n",
        "    # Plot discharge-weighted velocity\n",
        "    plt.plot(weighted_velocities['time'], \n",
        "            weighted_velocities['weighted_velocity'], \n",
        "            color='red', \n",
        "            alpha=1.0, \n",
        "            linewidth=2,\n",
        "            label='Discharge-Weighted Velocity')\n",
        "    \n",
        "    # Find and annotate peak weighted velocity\n",
        "    peak_idx = weighted_velocities['weighted_velocity'].idxmax()\n",
        "    peak_time = weighted_velocities.loc[peak_idx, 'time']\n",
        "    peak_vel = weighted_velocities.loc[peak_idx, 'weighted_velocity']\n",
        "    plt.annotate(f'Peak Weighted: {peak_vel:.2f}',\n",
        "                xy=(peak_time, peak_vel),\n",
        "                xytext=(10, 10),\n",
        "                textcoords='offset points',\n",
        "                color='red',\n",
        "                fontweight='bold')\n",
        "    \n",
        "    # Plot simple average\n",
        "    plt.plot(simple_averages['time'], \n",
        "            simple_averages['face_velocity'], \n",
        "            color='blue', \n",
        "            alpha=0.5, \n",
        "            linewidth=1,\n",
        "            linestyle='--',\n",
        "            label='Simple Average')\n",
        "    \n",
        "    # Find and annotate peak simple average\n",
        "    peak_idx = simple_averages['face_velocity'].idxmax()\n",
        "    peak_time = simple_averages.loc[peak_idx, 'time']\n",
        "    peak_vel = simple_averages.loc[peak_idx, 'face_velocity']\n",
        "    plt.annotate(f'Peak Average: {peak_vel:.2f}',\n",
        "                xy=(peak_time, peak_vel),\n",
        "                xytext=(10, -10),\n",
        "                textcoords='offset points',\n",
        "                color='blue',\n",
        "                fontweight='bold')\n",
        "    \n",
        "    # Configure plot\n",
        "    plt.title(f'Velocity Comparison for {profile_name} \\nIndividual Face Velocities vs Simple Average Velocity vs Discharge-Weighted Average Velocity')\n",
        "    plt.xlabel('Time')\n",
        "    plt.ylabel('Velocity (ft/s)')\n",
        "    plt.grid(True, alpha=0.3)\n",
        "    \n",
        "    # Add legend with better placement\n",
        "    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n",
        "    \n",
        "    # Adjust layout to accommodate legend and stats\n",
        "    plt.subplots_adjust(right=0.8)\n",
        "    \n",
        "    # Save plot to file\n",
        "    plot_file = ras.project_folder / f\"{profile_name}_velocity_comparison.png\"\n",
        "    plt.savefig(plot_file, bbox_inches='tight', dpi=300)\n",
        "    plt.show()\n",
        "    \n",
        "    # Print detailed comparison\n",
        "    print(f\"\\nVelocity Comparison for {profile_name} \\nIndividual Face Velocities vs Simple Average Velocity vs Discharge-Weighted Average Velocity\")\n",
        "    print(f\"Number of faces: {profile_df['face_id'].nunique()}\")\n",
        "    print(\"\\nDischarge-Weighted Velocity Statistics:\")\n",
        "    print(f\"Mean: {weighted_velocities['weighted_velocity'].mean():.2f} ft/s\")\n",
        "    print(f\"Max: {weighted_velocities['weighted_velocity'].max():.2f} ft/s\")\n",
        "    print(f\"Min: {weighted_velocities['weighted_velocity'].min():.2f} ft/s\")\n",
        "    print(\"\\nSimple Average Velocity Statistics:\")\n",
        "    print(f\"Mean: {simple_averages['face_velocity'].mean():.2f} ft/s\")\n",
        "    print(f\"Max: {simple_averages['face_velocity'].max():.2f} ft/s\")\n",
        "    print(f\"Min: {simple_averages['face_velocity'].min():.2f} ft/s\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:30:14 - ras_commander.HdfMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:30:14 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:30:14 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:30:14 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:30:14 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:30:14 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2025-04-09 08:30:14 - ras_commander.HdfBase - CRITICAL - No valid projection found. Checked:\n",
            "1. HDF file projection attribute: d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\Chippewa_2D.g01.hdf\n",
            "2. RASMapper projection file d:\\GitHub\\ras-commander\\examples\\example_projects\\Chippewa_2D\\.Winona_Upload\\LifeSim model\\Winona Levee SQRA 2019\\RAS\\AW\\MMC_Projection.prj found in RASMapper file, but was invalid\n",
            "To fix this:\n",
            "1. Open RASMapper\n",
            "2. Click Map > Set Projection\n",
            "3. Select an appropriate projection file or coordinate system\n",
            "4. Save the RASMapper project\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Example: Extracting mesh cell faces near profile lines\n",
            "First few rows of mesh cell faces:\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 2400x1600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Original ordered faces near profile lines:\n",
            "\n",
            "Combined profile-to-faceline results:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>profile_name</th>\\n', '      <th>geometry</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>Profile Line 1</td>\\n', '      <td>LINESTRING (1027100.412 7857052.854, 1027350.3...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>Profile Line 2</td>\\n', '      <td>LINESTRING (1026801.09 7853483.399, 1027138.39...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>Profile Line 3</td>\\n', '      <td>LINESTRING (1026498.193 7851901.653, 1026838.2...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['     profile_name                                           geometry\\n', '0  Profile Line 1  LINESTRING (1027100.412 7857052.854, 1027350.3...\\n', '1  Profile Line 2  LINESTRING (1026801.09 7853483.399, 1027138.39...\\n', '2  Profile Line 3  LINESTRING (1026498.193 7851901.653, 1026838.2...']"
          },
          "execution_count": 44,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Example: Extracting mesh cell faces near profile lines\n",
        "print(\"\\nExample: Extracting mesh cell faces near profile lines\")\n",
        "\n",
        "# Get mesh cell faces using HdfMesh class\n",
        "mesh_cell_faces = HdfMesh.get_mesh_cell_faces(geom_hdf_path)\n",
        "\n",
        "# Display the first few rows of the mesh cell faces DataFrame\n",
        "print(\"First few rows of mesh cell faces:\")\n",
        "mesh_cell_faces\n",
        "\n",
        "# Load the GeoJSON file for profile lines\n",
        "geojson_path = Path(r'data/profile_lines_chippewa2D.geojson')  # Update with the correct path\n",
        "profile_lines_gdf = gpd.read_file(geojson_path)\n",
        "\n",
        "# Set the Coordinate Reference System (CRS) to EPSG:5070\n",
        "profile_lines_gdf = profile_lines_gdf.set_crs(epsg=5070, allow_override=True)\n",
        "\n",
        "# Initialize a dictionary to store faces near each profile line\n",
        "faces_near_profile_lines = {}\n",
        "\n",
        "# Define distance threshold (10 ft converted to meters)\n",
        "distance_threshold = 10\n",
        "angle_threshold = 60  # degrees\n",
        "\n",
        "# Function to calculate the smallest angle between two lines or line segments.\n",
        "def calculate_angle(line):\n",
        "    if isinstance(line, LineString):\n",
        "        x_diff = line.xy[0][-1] - line.xy[0][0]\n",
        "        y_diff = line.xy[1][-1] - line.xy[1][0]\n",
        "    else:\n",
        "        x_diff = line[1][0] - line[0][0]\n",
        "        y_diff = line[1][1] - line[0][1]\n",
        "    \n",
        "    angle = np.degrees(np.arctan2(y_diff, x_diff))\n",
        "    return angle % 360 if angle >= 0 else (angle + 360) % 360\n",
        "\n",
        "# Function to break line into segments\n",
        "def break_line_into_segments(line, segment_length):\n",
        "    segments = []\n",
        "    segment_angles = []\n",
        "    \n",
        "    distances = np.arange(0, line.length, segment_length)\n",
        "    if distances[-1] != line.length:\n",
        "        distances = np.append(distances, line.length)\n",
        "        \n",
        "    for i in range(len(distances)-1):\n",
        "        point1 = line.interpolate(distances[i])\n",
        "        point2 = line.interpolate(distances[i+1])\n",
        "        segment = LineString([point1, point2])\n",
        "        segments.append(segment)\n",
        "        segment_angles.append(calculate_angle([point1.coords[0], point2.coords[0]]))\n",
        "        \n",
        "    return segments, segment_angles\n",
        "\n",
        "# Function to calculate angle difference accounting for 180 degree equivalence\n",
        "def angle_difference(angle1, angle2):\n",
        "    diff = abs(angle1 - angle2) % 180\n",
        "    return min(diff, 180 - diff)\n",
        "\n",
        "# Function to order faces along profile line\n",
        "def order_faces_along_profile(profile_line, faces_gdf):\n",
        "    profile_start = Point(profile_line.coords[0])\n",
        "    \n",
        "    faces_with_dist = []\n",
        "    for idx, face in faces_gdf.iterrows():\n",
        "        face_start = Point(face.geometry.coords[0])\n",
        "        dist = profile_start.distance(face_start)\n",
        "        faces_with_dist.append((idx, dist))\n",
        "    \n",
        "    faces_with_dist.sort(key=lambda x: x[1])\n",
        "    return [x[0] for x in faces_with_dist]\n",
        "\n",
        "# Function to combine ordered faces into single linestring\n",
        "def combine_faces_to_linestring(ordered_faces_gdf):\n",
        "    coords = []\n",
        "    for _, face in ordered_faces_gdf.iterrows():\n",
        "        if not coords:  # First face - add all coordinates\n",
        "            coords.extend(list(face.geometry.coords))\n",
        "        else:  # Subsequent faces - add only end coordinate\n",
        "            coords.append(face.geometry.coords[-1])\n",
        "    return LineString(coords)\n",
        "\n",
        "# Initialize GeoDataFrame for final profile-to-faceline results\n",
        "profile_to_faceline = gpd.GeoDataFrame(columns=['profile_name', 'geometry'], crs=profile_lines_gdf.crs)\n",
        "\n",
        "# Iterate through each profile line\n",
        "for index, profile_line in profile_lines_gdf.iterrows():\n",
        "    profile_geom = profile_line.geometry\n",
        "    \n",
        "    # Break profile line into segments\n",
        "    segments, segment_angles = break_line_into_segments(profile_geom, distance_threshold)\n",
        "    \n",
        "    # Initialize set to store nearby faces\n",
        "    nearby_faces = set()\n",
        "    \n",
        "    # For each face, check distance to segments and angle difference\n",
        "    for face_idx, face in mesh_cell_faces.iterrows():\n",
        "        face_geom = face.geometry\n",
        "        \n",
        "        if isinstance(face_geom, LineString):\n",
        "            face_angle = calculate_angle(face_geom)\n",
        "            \n",
        "            for segment, segment_angle in zip(segments, segment_angles):\n",
        "                if face_geom.distance(segment) <= distance_threshold:\n",
        "                    if angle_difference(face_angle, segment_angle) <= angle_threshold:\n",
        "                        nearby_faces.add(face_idx)\n",
        "                        break\n",
        "    \n",
        "    # Convert the set of indices back to a GeoDataFrame\n",
        "    nearby_faces_gdf = mesh_cell_faces.loc[list(nearby_faces)]\n",
        "    \n",
        "    # Order faces along profile line\n",
        "    ordered_indices = order_faces_along_profile(profile_geom, nearby_faces_gdf)\n",
        "    ordered_faces_gdf = nearby_faces_gdf.loc[ordered_indices]\n",
        "    \n",
        "    # Combine ordered faces into single linestring\n",
        "    combined_linestring = combine_faces_to_linestring(ordered_faces_gdf)\n",
        "    \n",
        "    # Add to profile_to_faceline GeoDataFrame\n",
        "    new_row = gpd.GeoDataFrame({'profile_name': [profile_line['Name']], \n",
        "                               'geometry': [combined_linestring]}, \n",
        "                              crs=profile_lines_gdf.crs)\n",
        "    profile_to_faceline = pd.concat([profile_to_faceline, new_row], ignore_index=True)\n",
        "    \n",
        "    # Store the ordered faces in the dictionary\n",
        "    faces_near_profile_lines[profile_line['Name']] = ordered_faces_gdf\n",
        "\n",
        "# Plot the results\n",
        "fig, ax = plt.subplots(figsize=(24, 16))\n",
        "\n",
        "# Plot all mesh cell faces in light blue\n",
        "mesh_cell_faces.plot(ax=ax, color='lightblue', alpha=0.3, edgecolor='k', label='All Mesh Faces')\n",
        "\n",
        "# Plot selected faces for each profile line with numbers and velocities\n",
        "colors = ['red', 'green', 'blue']\n",
        "for (profile_name, faces), color in zip(faces_near_profile_lines.items(), colors):\n",
        "    if not faces.empty:\n",
        "        faces.plot(ax=ax, color=color, alpha=0.6, label=f'Faces near {profile_name}')\n",
        "        \n",
        "        # Get velocity data for this profile from profile_time_series\n",
        "        profile_data = profile_time_series[profile_name]\n",
        "        \n",
        "        # Add face_id above and peak velocity below for each face\n",
        "        for idx, face in faces.iterrows():\n",
        "            midpoint = face.geometry.interpolate(0.5, normalized=True)\n",
        "            \n",
        "            # Get peak velocity for this face\n",
        "            face_velocities = profile_data[profile_data['face_id'] == face['face_id']]['face_velocity']\n",
        "            peak_velocity = face_velocities.max() if not face_velocities.empty else 0.0\n",
        "            # Add face_id above the face\n",
        "            ax.text(midpoint.x, midpoint.y + 50,  # Adjust the +50 offset as needed\n",
        "                   f\"{face['face_id']}\", \n",
        "                   color=color, \n",
        "                   fontweight='bold',\n",
        "                   fontsize=8,\n",
        "                   ha='center', \n",
        "                   va='bottom')\n",
        "            \n",
        "            # Add peak velocity below the face\n",
        "            ax.text(midpoint.x, midpoint.y - 50,  # Adjust the -50 offset as needed\n",
        "                   f\"{peak_velocity:.2f}fps\", \n",
        "                   color=color, \n",
        "                   fontweight='bold',\n",
        "                   fontsize=6,\n",
        "                   ha='center', \n",
        "                   va='top')\n",
        "\n",
        "\n",
        "# Plot the combined linestrings\n",
        "profile_to_faceline.plot(ax=ax, color='black', linewidth=2, \n",
        "                        linestyle='--', label='Combined Face Lines')\n",
        "\n",
        "# Set labels and title\n",
        "ax.set_xlabel('Easting')\n",
        "ax.set_ylabel('Northing')\n",
        "ax.set_title('Mesh Cell Faces and Profile Lines\\nNumbered in order along profile\\nFace ID and Peak Face Velocity Shown')\n",
        "\n",
        "# Add grid and legend\n",
        "ax.grid(True)\n",
        "ax.legend()\n",
        "\n",
        "# Adjust layout and display\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Display the results\n",
        "print(\"\\nOriginal ordered faces near profile lines:\")\n",
        "faces_near_profile_lines\n",
        "\n",
        "print(\"\\nCombined profile-to-faceline results:\")\n",
        "profile_to_faceline"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "NOTE:  We are using the face normal velocity that is available in the HDF.  This will only be accurate if you pick cell faces that are perpendicular to flow.  Depending on the application, a more robust calculation may be required. "
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "rascmdr",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}
==================================================

File: c:\GH\ras-commander\examples\14_fluvial_pluvial_delineation.ipynb
==================================================
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Delineate Fluvial and Pluvial Areas using RAS-Commander\n",
        "\n",
        "We will leverage the HEC RAS Summary Outputs to delineate the Fluvial and Pluvial Areas\n",
        "\n",
        "Maximum Water Surface Elevation (WSEL) for each cell is recorded, along with the timestamps of when the maximum WSEL occurs.\n",
        "\n",
        "By locating adjacent cells with dissimilar timestamps, we can delineate the Fluvial and Pluvial Areas.\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "A note about datframe types: \n",
        "\n",
        "Information from the HEC-RAS plan files are generally dataframes.  The text file interface is for the 32-bit side of HEC-RAS and all spatial data is most easily accessed in the HDF files.  This includes plan_df, geom_df, hdf_paths_df\n",
        "\n",
        "Geometry elements (Mesh Faces and Nodes) are provided as Geodataframes (cell_polygons_gdf, boundary_gdf)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Package Installation and Environment Setup\n",
        "Uncomment and run package installation commands if needed"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Install ras-commander from pip (uncomment to install if needed)\n",
        "#!pip install ras-commander\n",
        "# This installs ras-commander and all dependencies"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Import all required modules\n",
        "from ras_commander import *  # Import all ras-commander modules\n",
        "\n",
        "# Import the required libraries for this notebook\n",
        "import h5py\n",
        "import numpy as np\n",
        "import requests\n",
        "import pandas as pd\n",
        "import geopandas as gpd\n",
        "import matplotlib.pyplot as plt\n",
        "import pyproj\n",
        "from shapely.geometry import Point, LineString, Polygon\n",
        "import xarray as xr\n",
        "from pathlib import Path"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:41:17 - ras_commander.RasPrj - INFO - Initializing global 'ras' object via init_ras_project function.\n",
            "2025-04-09 08:41:17 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-09 08:41:17 - ras_commander.RasPrj - INFO - Project initialized. ras_object project folder: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "BaldEagleCrkMulti2D.p06.hdf already exists. Skipping project extraction and plan execution.\n"
          ]
        }
      ],
      "source": [
        "# Download the BaldEagleCrkMulti2D project from HEC and run plan 06\n",
        "\n",
        "# Define the path to the BaldEagleCrkMulti2D project\n",
        "current_dir = Path.cwd()  # Adjust if your notebook is in a different directory\n",
        "bald_eagle_path = current_dir / \"example_projects\" / \"BaldEagleCrkMulti2D\"\n",
        "import logging\n",
        "\n",
        "# Check if BaldEagleCrkMulti2D.p06.hdf exists (so we don't have to re-run the simulation when re-running or debugging)\n",
        "hdf_file = bald_eagle_path / \"BaldEagleDamBrk.p06.hdf\"\n",
        "\n",
        "if not hdf_file.exists():\n",
        "    # Initialize RasExamples and extract the BaldEagleCrkMulti2D project\n",
        "    RasExamples.extract_project([\"BaldEagleCrkMulti2D\"])\n",
        "\n",
        "\n",
        "    # Initialize the RAS project using the default global ras object\n",
        "    init_ras_project(bald_eagle_path, \"6.6\")\n",
        "    logging.info(f\"Bald Eagle project initialized with folder: {ras.project_folder}\")\n",
        "    \n",
        "    logging.info(f\"Bald Eagle object id: {id(ras)}\")\n",
        "    \n",
        "    # Define the plan number to execute\n",
        "    plan_number = \"06\"\n",
        "\n",
        "    # Update the run flags in the plan file\n",
        "    RasPlan.update_run_flags(\n",
        "        plan_number,\n",
        "        geometry_preprocessor=True,  # Run HTab\n",
        "        unsteady_flow_simulation=True,  # Run UNet\n",
        "        post_processor=True,  # Run PostProcess\n",
        "        floodplain_mapping=False,  # Run RASMapper\n",
        "    )\n",
        "\n",
        "    # Execute Plan 06 using RasCmdr for Bald Eagle\n",
        "    print(f\"Executing Plan {plan_number} for the Bald Eagle Creek project...\")\n",
        "    success_bald_eagle = RasCmdr.compute_plan(plan_number)\n",
        "    if success_bald_eagle:\n",
        "        print(f\"Plan {plan_number} executed successfully for Bald Eagle.\\n\")\n",
        "    else:\n",
        "        print(f\"Plan {plan_number} execution failed for Bald Eagle.\\n\")\n",
        "else:\n",
        "    print(\"BaldEagleCrkMulti2D.p06.hdf already exists. Skipping project extraction and plan execution.\")\n",
        "    # Initialize the RAS project using the default global ras object\n",
        "    init_ras_project(bald_eagle_path, \"6.6\")\n",
        "    plan_number = \"06\"\n",
        "your_project_path = bald_eagle_path"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "###  OPTIONAL: Use your own project instead\n",
        "\n",
        "your_project_path = Path(r\"D:\\yourprojectpath\")\n",
        "\n",
        "init_ras_project(your_project_path, \"6.6\")\n",
        "plan_number = \"01\"  # Plan number to use for this notebook \n",
        "\n",
        "\n",
        "\n",
        "### If you use this code cell, don't run the previous cell or change to markdown\n",
        "### NOTE: Ensure the HDF Results file was generated by HEC-RAS Version 6.x or above"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Explore Project Dataframes using 'ras' Object"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Plan DataFrame for bald_eagle project:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>plan_number</th>\\n', '      <th>unsteady_number</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Plan Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Short Identifier</th>\\n', '      <th>Simulation Date</th>\\n', '      <th>Computation Interval</th>\\n', '      <th>Mapping Interval</th>\\n', '      <th>Run HTab</th>\\n', '      <th>...</th>\\n', '      <th>DSS File</th>\\n', '      <th>Friction Slope Method</th>\\n', '      <th>UNET D2 SolverType</th>\\n', '      <th>UNET D2 Name</th>\\n', '      <th>HDF_Results_Path</th>\\n', '      <th>Geom File</th>\\n', '      <th>Geom Path</th>\\n', '      <th>Flow File</th>\\n', '      <th>Flow Path</th>\\n', '      <th>full_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>13</td>\\n', '      <td>07</td>\\n', '      <td>06</td>\\n', '      <td>PMF with Multi 2D Areas</td>\\n', '      <td>5.10</td>\\n', '      <td>PMF Multi 2D</td>\\n', '      <td>01JAN1999,1200,04JAN1999,1200</td>\\n', '      <td>30SEC</td>\\n', '      <td>30MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>Pardiso (Direct)</td>\\n', '      <td>193</td>\\n', '      <td>None</td>\\n', '      <td>06</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>07</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>15</td>\\n', '      <td>12</td>\\n', '      <td>08</td>\\n', '      <td>1d-2D Dambreak Refined Grid</td>\\n', '      <td>5.10</td>\\n', '      <td>1D-2D Refined Grid</td>\\n', '      <td>01JAN1999,1200,04JAN1999,1200</td>\\n', '      <td>20SEC</td>\\n', '      <td>5MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>None</td>\\n', '      <td>08</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>12</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>17</td>\\n', '      <td>09</td>\\n', '      <td>10</td>\\n', '      <td>2D to 1D No Dam</td>\\n', '      <td>5.00</td>\\n', '      <td>2D to 1D No Dam</td>\\n', '      <td>01JAN1999,1200,06JAN1999,1200</td>\\n', '      <td>1MIN</td>\\n', '      <td>5MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>Upstream2D</td>\\n', '      <td>None</td>\\n', '      <td>10</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>09</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>18</td>\\n', '      <td>10</td>\\n', '      <td>11</td>\\n', '      <td>2D to 2D Run</td>\\n', '      <td>5.00</td>\\n', '      <td>2D to 2D Run</td>\\n', '      <td>01JAN1999,1200,04JAN1999,1200</td>\\n', '      <td>20SEC</td>\\n', '      <td>5MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>None</td>\\n', '      <td>11</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>10</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>19</td>\\n', '      <td>11</td>\\n', '      <td>12</td>\\n', '      <td>SA to 2D Dam Break Run</td>\\n', '      <td>5.00</td>\\n', '      <td>SA to 2D Dam Break</td>\\n', '      <td>01JAN1999,1200,04JAN1999,1200</td>\\n', '      <td>20SEC</td>\\n', '      <td>10MIN</td>\\n', '      <td>1</td>\\n', '      <td>...</td>\\n', '      <td>dss</td>\\n', '      <td>1</td>\\n', '      <td>NaN</td>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>None</td>\\n', '      <td>12</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>11</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['   plan_number unsteady_number geometry_number  \\\\\\n', '0           13              07              06   \\n', '1           15              12              08   \\n', '2           17              09              10   \\n', '3           18              10              11   \\n', '4           19              11              12   \\n', '5           03              13              09   \\n', '6           04              01              13   \\n', '7           02              01              01   \\n', '8           01              01              01   \\n', '9           05              02              03   \\n', '10          06              03              09   \\n', '\\n', '                                 Plan Title Program Version  \\\\\\n', '0                   PMF with Multi 2D Areas            5.10   \\n', '1               1d-2D Dambreak Refined Grid            5.10   \\n', '2                           2D to 1D No Dam            5.00   \\n', '3                              2D to 2D Run            5.0\n...\n[Output truncated, 7376 characters total]"
          },
          "execution_count": 4,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Load Plan and Geometry Dataframes and find Plan and Geometry HDF Paths\n",
        "\n",
        "# Display plan_df for bald_eagle project\n",
        "print(\"Plan DataFrame for bald_eagle project:\")\n",
        "ras.plan_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Geometry DataFrame for the project:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>geom_file</th>\\n', '      <th>geom_number</th>\\n', '      <th>full_path</th>\\n', '      <th>hdf_path</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>g06</td>\\n', '      <td>06</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>g08</td>\\n', '      <td>08</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>g10</td>\\n', '      <td>10</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>g11</td>\\n', '      <td>11</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>g12</td>\\n', '      <td>12</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  geom_file geom_number                                          full_path  \\\\\\n', '0       g06          06  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '1       g08          08  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '2       g10          10  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '3       g11          11  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '4       g12          12  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '5       g09          09  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '6       g13          13  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '7       g01          01  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '8       g03          03  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '9       g02          02  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '\\n', '                                            hdf_path  \\n', '0  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...  \\n', '1  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...  \\n', '2  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...  \\n', '3  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...  \\n', '4  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...  \\n', '5  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...  \\n', '6  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...  \\n', '7  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...  \\n', '8  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...  \\n', '9  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...  ']"
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nGeometry DataFrame for the project:\")\n",
        "ras.geom_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Unsteady DataFrame for the project:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>unsteady_number</th>\\n', '      <th>full_path</th>\\n', '      <th>geometry_number</th>\\n', '      <th>Flow Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Use Restart</th>\\n', '      <th>Precipitation Mode</th>\\n', '      <th>Wind Mode</th>\\n', '      <th>Met BC=Precipitation|Mode</th>\\n', '      <th>Met BC=Evapotranspiration|Mode</th>\\n', '      <th>Met BC=Precipitation|Expanded View</th>\\n', '      <th>Met BC=Precipitation|Constant Units</th>\\n', '      <th>Met BC=Precipitation|Gridded Source</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>07</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>PMF with Multi 2D Areas</td>\\n', '      <td>5.00</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>08</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>PMF for Upstream 2D</td>\\n', '      <td>4.20</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>09</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>Upstream 2D</td>\\n', '      <td>5.00</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>10</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>1972 Flood Event - 2D to 2D Run</td>\\n', '      <td>5.00</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>11</td>\\n', '      <td>d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...</td>\\n', '      <td>None</td>\\n', '      <td>1972 Flood Event - SA to 2D Run</td>\\n', '      <td>5.00</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['  unsteady_number                                          full_path  \\\\\\n', '0              07  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '1              08  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '2              09  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '3              10  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '4              11  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '5              12  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '6              13  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '7              01  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '8              02  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '9              03  d:\\\\GitHub\\\\ras-commander\\\\examples\\\\example_proje...   \\n', '\\n', '  geometry_number                            Flow Title Program Version  \\\\\\n', '0            None      \n...\n[Output truncated, 4433 characters total]"
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nUnsteady DataFrame for the project:\")\n",
        "ras.unsteady_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Boundary Conditions DataFrame for the project:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>unsteady_number</th>\\n', '      <th>boundary_condition_number</th>\\n', '      <th>river_reach_name</th>\\n', '      <th>river_station</th>\\n', '      <th>storage_area_name</th>\\n', '      <th>pump_station_name</th>\\n', '      <th>bc_type</th>\\n', '      <th>hydrograph_type</th>\\n', '      <th>Interval</th>\\n', '      <th>DSS File</th>\\n', '      <th>...</th>\\n', '      <th>Flow Title</th>\\n', '      <th>Program Version</th>\\n', '      <th>Use Restart</th>\\n', '      <th>Precipitation Mode</th>\\n', '      <th>Wind Mode</th>\\n', '      <th>Met BC=Precipitation|Mode</th>\\n', '      <th>Met BC=Evapotranspiration|Mode</th>\\n', '      <th>Met BC=Precipitation|Expanded View</th>\\n', '      <th>Met BC=Precipitation|Constant Units</th>\\n', '      <th>Met BC=Precipitation|Gridded Source</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>07</td>\\n', '      <td>1</td>\\n', '      <td>Bald Eagle Cr.</td>\\n', '      <td>Lock Haven</td>\\n', '      <td>137520</td>\\n', '      <td></td>\\n', '      <td>Flow Hydrograph</td>\\n', '      <td>Flow Hydrograph</td>\\n', '      <td>1HOUR</td>\\n', '      <td>Bald_Eagle_Creek.dss</td>\\n', '      <td>...</td>\\n', '      <td>PMF with Multi 2D Areas</td>\\n', '      <td>5.00</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>07</td>\\n', '      <td>2</td>\\n', '      <td>Bald Eagle Cr.</td>\\n', '      <td>Lock Haven</td>\\n', '      <td>81454</td>\\n', '      <td></td>\\n', '      <td>Gate Opening</td>\\n', '      <td>None</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>...</td>\\n', '      <td>PMF with Multi 2D Areas</td>\\n', '      <td>5.00</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>07</td>\\n', '      <td>3</td>\\n', '      <td>Bald Eagle Cr.</td>\\n', '      <td>Lock Haven</td>\\n', '      <td>28519</td>\\n', '      <td></td>\\n', '      <td>Lateral Inflow Hydrograph</td>\\n', '      <td>Lateral Inflow Hydrograph</td>\\n', '      <td>1HOUR</td>\\n', '      <td>Bald_Eagle_Creek.dss</td>\\n', '      <td>...</td>\\n', '      <td>PMF with Multi 2D Areas</td>\\n', '      <td>5.00</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>07</td>\\n', '      <td>4</td>\\n', '      <td>Bald Eagle Cr.</td>\\n', '      <td>Lock Haven</td>\\n', '      <td>1</td>\\n', '      <td></td>\\n', '      <td>Lateral Inflow Hydrograph</td>\\n', '      <td>Lateral Inflow Hydrograph</td>\\n', '      <td>1HOUR</td>\\n', '      <td>NaN</td>\\n', '      <td>...</td>\\n', '      <td>PMF with Multi 2D Areas</td>\\n', '      <td>5.00</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>07</td>\\n', '      <td>5</td>\\n', '      <td>Bald Eagle Cr.</td>\\n', '      <td>Lock Haven</td>\\n', '      <td>136948</td>\\n', '      <td>82303</td>\\n', '      <td>Uniform Lateral Inflow Hydrograph</td>\\n', '      <td>Uniform Lateral Inflow Hydrograph</td>\\n', '      <td>1HOUR</td>\\n', '      <td>Bald_Eagle_Creek.dss</td>\\n', '      <td>...</td>\\n', '      <td>PMF with Multi 2D Areas</td>\\n', '      <td>5.00</td>\\n', '      <td>0</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '      <td>NaN</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['   unsteady_number  boundary_condition_number river_reach_name river_station  \\\\\\n', '0               07                          1   Bald Eagle Cr.    Lock Haven   \\n', '1               07                          2   Bald Eagle Cr.    Lock Haven   \\n', '2               07                          3   Bald Eagle Cr.    Lock Haven   \\n', '3               07                          4   Bald Eagle Cr.    Lock Haven   \\n', '4               07                          5   Bald Eagle Cr.    Lock Haven   \\n', '5               07                          6   Bald Eagle Cr.    Lock Haven   \\n', '6               07                          7   Bald Eagle Cr.    Lock Haven   \\n', '7               07                          8   Bald Eagle Cr.    Lock Haven   \\n', '8               07                          9   Bald Eagle Cr.    Lock Haven   \\n', '9               07                         10   Bald Eagle Cr.    Lock Haven   \\n', '10              08                          1   Bald Eagle Cr.\n...\n[Output truncated, 29090 characters total]"
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "print(\"\\nBoundary Conditions DataFrame for the project:\")\n",
        "ras.boundaries_df "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Find Paths for Results and Geometry HDF's"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Get the plan HDF path for the plan_number defined above\n",
        "plan_hdf_path = ras.plan_df.loc[ras.plan_df['plan_number'] == plan_number, 'HDF_Results_Path'].values[0]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": "[\"'d:\\\\\\\\GitHub\\\\\\\\ras-commander\\\\\\\\examples\\\\\\\\example_projects\\\\\\\\BaldEagleCrkMulti2D\\\\\\\\BaldEagleDamBrk.p06.hdf'\"]"
          },
          "execution_count": 9,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "plan_hdf_path"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Get the geometry HDF path\n",
        "geom_hdf_path = ras.plan_df.loc[ras.plan_df['plan_number'] == plan_number, 'Geom Path'].values[0] + '.hdf'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": "[\"'d:\\\\\\\\GitHub\\\\\\\\ras-commander\\\\\\\\examples\\\\\\\\example_projects\\\\\\\\BaldEagleCrkMulti2D\\\\\\\\BaldEagleDamBrk.g09.hdf'\"]"
          },
          "execution_count": 11,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "geom_hdf_path\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Plan HDF path for Plan 06: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "Geometry HDF path for Plan 06: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n"
          ]
        }
      ],
      "source": [
        "print(f\"\\nPlan HDF path for Plan {plan_number}: {plan_hdf_path}\")\n",
        "print(f\"Geometry HDF path for Plan {plan_number}: {geom_hdf_path}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Fluvial Pluvial Delineation using RAS-Commander \n",
        "\n",
        "Using the Maximum WSE Results layer, which contains the maximum water surface and time stamp of the maximum water surface, mesh cell faces are categorized.  If the difference in time (delta_t) in hours is greater than the (user defined, default 12) duration specified, that mesh cell face is added to the fluvial-pluvial boundary dataset. \n",
        "\n",
        "This is meant to provide a draft fluvial-pluvial boundary for floodplain analysis, to the extent it can be derived directly from the HEC-RAS results files. \n",
        "\n",
        "The function attempts to combine adjacent line segments to simplify the resulting geometry, but GIS cleanup and manual interpolation will be required to create a closed polygon boundary that could be used for further processing steps.  However, this approach does provide an efficient method for providing a draft boundary that is based on HEC-RAS's direct computations and mesh cell faces. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:41:17 - ras_commander.HdfResultsMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:17 - ras_commander.HdfResultsMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:18 - ras_commander.HdfResultsMesh - INFO - Processing summary output for variable: Maximum Water Surface\n",
            "2025-04-09 08:41:18 - ras_commander.HdfMesh - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:18 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:18 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:18 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:18 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:18 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:18 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:18 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:18 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:18 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:18 - ras_commander.HdfResultsMesh - INFO - Processed 19597 rows of summary output data\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "max_ws_df\n",
            "         mesh_name  cell_id  maximum_water_surface maximum_water_surface_time  \\\n",
            "0      BaldEagleCr        0             704.054443        2018-09-10 18:00:00   \n",
            "1      BaldEagleCr        1             692.377991        2018-09-10 18:04:00   \n",
            "2      BaldEagleCr        2             671.183472        2018-09-10 18:13:20   \n",
            "3      BaldEagleCr        3             660.605469        2018-09-10 18:54:40   \n",
            "4      BaldEagleCr        4             660.586243        2018-09-10 18:55:20   \n",
            "...            ...      ...                    ...                        ...   \n",
            "19592  BaldEagleCr    19592               0.000000        2018-09-09 00:00:00   \n",
            "19593  BaldEagleCr    19593               0.000000        2018-09-09 00:00:00   \n",
            "19594  BaldEagleCr    19594               0.000000        2018-09-09 00:00:00   \n",
            "19595  BaldEagleCr    19595               0.000000        2018-09-09 00:00:00   \n",
            "19596  BaldEagleCr    19596               0.000000        2018-09-09 00:00:00   \n",
            "\n",
            "                             geometry  \n",
            "0              POINT (2083000 370750)  \n",
            "1              POINT (2083250 370750)  \n",
            "2              POINT (2083500 370750)  \n",
            "3              POINT (2083750 370750)  \n",
            "4              POINT (2084000 370750)  \n",
            "...                               ...  \n",
            "19592  POINT (1978423.032 300718.897)  \n",
            "19593  POINT (1973389.375 297311.928)  \n",
            "19594   POINT (1968834.79 295808.861)  \n",
            "19595  POINT (1966130.942 291879.395)  \n",
            "19596   POINT (1969660.046 289673.23)  \n",
            "\n",
            "[19597 rows x 5 columns]\n"
          ]
        }
      ],
      "source": [
        "# Using mesh_max_ws, get the cell coordinates and plot the max water surface as a map\n",
        "import matplotlib.pyplot as plt\n",
        "from ras_commander.HdfMesh import HdfMesh\n",
        "from ras_commander.HdfResultsMesh import HdfResultsMesh\n",
        "from shapely.geometry import Point\n",
        "\n",
        "# Get mesh max water surface\n",
        "max_ws_df = HdfResultsMesh.get_mesh_max_ws(plan_hdf_path)\n",
        "\n",
        "print(\"max_ws_df\")\n",
        "print(max_ws_df)\n",
        "\n",
        "# If you get an error here, you may have a pre-6.0 HDF.  Re-run in 6.x to generate a new results file"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Simulation Start Time: 2018-09-09 00:00:00\n",
            "Time Range: 120.0 hours\n",
            "\n",
            "Timing Statistics (hours since start):\n",
            "count    19597.000000\n",
            "mean        63.225532\n",
            "std         40.179572\n",
            "min          0.000000\n",
            "25%         34.000000\n",
            "50%         42.700000\n",
            "75%        115.677778\n",
            "max        120.000000\n",
            "Name: max_wsel_time, dtype: float64\n",
            "\n",
            "First few rows of the merged dataframe:\n"
          ]
        },
        {
          "data": {
            "text/html": "<div>\n<style scoped>\\n', '    .dataframe tbody tr th:only-of-type {\\n', '        vertical-align: middle;\\n', '    }\\n', '\\n', '    .dataframe tbody tr th {\\n', '        vertical-align: top;\\n', '    }\\n', '\\n', '    .dataframe thead th {\\n', '        text-align: right;\\n', '    }\\n', '</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\\n', '    <tr style=\"text-align: right;\">\\n', '      <th></th>\\n', '      <th>mesh_name</th>\\n', '      <th>cell_id</th>\\n', '      <th>maximum_water_surface</th>\\n', '      <th>maximum_water_surface_time</th>\\n', '      <th>geometry</th>\\n', '      <th>x</th>\\n', '      <th>y</th>\\n', '      <th>max_wsel_time</th>\\n', '    </tr>\\n', '  </thead>\n  <tbody>\n    <tr>\\n', '      <th>0</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>0</td>\\n', '      <td>704.054443</td>\\n', '      <td>2018-09-10 18:00:00</td>\\n', '      <td>POINT (2083000 370750)</td>\\n', '      <td>2.083000e+06</td>\\n', '      <td>370750.000000</td>\\n', '      <td>2018-09-10 18:00:00</td>\\n', '    </tr><tr>\\n', '      <th>1</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>1</td>\\n', '      <td>692.377991</td>\\n', '      <td>2018-09-10 18:04:00</td>\\n', '      <td>POINT (2083250 370750)</td>\\n', '      <td>2.083250e+06</td>\\n', '      <td>370750.000000</td>\\n', '      <td>2018-09-10 18:04:00</td>\\n', '    </tr><tr>\\n', '      <th>2</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>2</td>\\n', '      <td>671.183472</td>\\n', '      <td>2018-09-10 18:13:20</td>\\n', '      <td>POINT (2083500 370750)</td>\\n', '      <td>2.083500e+06</td>\\n', '      <td>370750.000000</td>\\n', '      <td>2018-09-10 18:13:20</td>\\n', '    </tr><tr>\\n', '      <th>3</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>3</td>\\n', '      <td>660.605469</td>\\n', '      <td>2018-09-10 18:54:40</td>\\n', '      <td>POINT (2083750 370750)</td>\\n', '      <td>2.083750e+06</td>\\n', '      <td>370750.000000</td>\\n', '      <td>2018-09-10 18:54:40</td>\\n', '    </tr><tr>\\n', '      <th>4</th>\\n', '      <td>BaldEagleCr</td>\\n', '      <td>4</td>\\n', '      <td>660.586243</td>\\n', '      <td>2018-09-10 18:55:20</td>\\n', '      <td>POINT (2084000 370750)</td>\\n', '      <td>2.084000e+06</td>\\n', '      <td>370750.000000</td>\\n', '      <td>2018-09-10 18:55:20</td>\\n', '    </tr>\n    <tr><td colspan=\"100%\" style=\"text-align:center\">[... additional rows truncated ...]</td></tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "['         mesh_name  cell_id  maximum_water_surface maximum_water_surface_time  \\\\\\n', '0      BaldEagleCr        0             704.054443        2018-09-10 18:00:00   \\n', '1      BaldEagleCr        1             692.377991        2018-09-10 18:04:00   \\n', '2      BaldEagleCr        2             671.183472        2018-09-10 18:13:20   \\n', '3      BaldEagleCr        3             660.605469        2018-09-10 18:54:40   \\n', '4      BaldEagleCr        4             660.586243        2018-09-10 18:55:20   \\n', '...            ...      ...                    ...                        ...   \\n', '19592  BaldEagleCr    19592               0.000000        2018-09-09 00:00:00   \\n', '19593  BaldEagleCr    19593               0.000000        2018-09-09 00:00:00   \\n', '19594  BaldEagleCr    19594               0.000000        2018-09-09 00:00:00   \\n', '19595  BaldEagleCr    19595               0.000000        2018-09-09 00:00:00   \\n', '19596  BaldEagleCr    19596               0.000000 \n...\n[Output truncated, 2376 characters total]"
          },
          "execution_count": 14,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Call the function to plot\n",
        "HdfResultsPlot.plot_results_max_wsel(max_ws_df)\n",
        "\n",
        "# Plot the time of maximum water surface elevation\n",
        "HdfResultsPlot.plot_results_max_wsel_time(max_ws_df)\n",
        "\n",
        "# Print the first few rows of the merged dataframe for verification\n",
        "print(\"\\nFirst few rows of the merged dataframe:\")\n",
        "max_ws_df\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:41:20 - ras_commander.HdfBase - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 08:41:20 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 08:41:20 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Extracting Projection from HDF\n",
            "Projection: PROJCS[\"NAD_1983_StatePlane_Pennsylvania_North_FIPS_3701_Feet\",GEOGCS[\"GCS_North_American_1983\",DATUM[\"D_North_American_1983\",SPHEROID[\"GRS_1980\",6378137.0,298.257222101]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Lambert_Conformal_Conic\"],PARAMETER[\"False_Easting\",1968500.0],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",-77.75],PARAMETER[\"Standard_Parallel_1\",40.88333333333333],PARAMETER[\"Standard_Parallel_2\",41.95],PARAMETER[\"Latitude_Of_Origin\",40.16666666666666],UNIT[\"Foot_US\",0.3048006096012192]]\n"
          ]
        }
      ],
      "source": [
        "# Use HdfUtils for extracting projection\n",
        "print(\"\\nExtracting Projection from HDF\")\n",
        "projection = HdfBase.get_projection(hdf_path=geom_hdf_path)\n",
        "if projection:\n",
        "    print(f\"Projection: {projection}\")\n",
        "else:\n",
        "    print(\"No projection information found.\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:41:20 - ras_commander.HdfMesh - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 08:41:20 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 08:41:20 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 08:41:20 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 08:41:20 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 08:41:20 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 08:41:20 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 08:41:20 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Example 6: Extracting Cell Polygons\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:41:20 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 08:41:20 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 08:41:20 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 08:41:22 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 08:41:22 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n",
            "2025-04-09 08:41:22 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf\n"
          ]
        }
      ],
      "source": [
        "# Example: Extract Cell Polygons\n",
        "print(\"\\nExample 6: Extracting Cell Polygons\")\n",
        "cell_polygons_gdf = HdfMesh.get_mesh_cell_polygons(geom_hdf_path)\n",
        "\n",
        "\n",
        "# Call the function to plot cell polygons\n",
        "#cell_polygons_gdf = HdfFluvialPluvial.plot_cell_polygons(cell_polygons_gdf, projection)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:41:22 - ras_commander.HdfFluvialPluvial - INFO - Using HDF file from direct string path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:22 - ras_commander.HdfFluvialPluvial - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:22 - ras_commander.HdfFluvialPluvial - INFO - Getting cell polygons from HDF file...\n",
            "2025-04-09 08:41:22 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:22 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:22 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:22 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:22 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:22 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:22 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:22 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:22 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:22 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:22 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:24 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:24 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:24 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:24 - ras_commander.HdfFluvialPluvial - INFO - Getting maximum water surface data from HDF file...\n",
            "2025-04-09 08:41:24 - ras_commander.HdfResultsMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:24 - ras_commander.HdfResultsMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:24 - ras_commander.HdfResultsMesh - INFO - Processing summary output for variable: Maximum Water Surface\n",
            "2025-04-09 08:41:24 - ras_commander.HdfMesh - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:24 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:24 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:24 - ras_commander.HdfMesh - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:24 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:24 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:24 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:24 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:24 - ras_commander.HdfBase - INFO - Final validated HDF file path: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:24 - ras_commander.HdfBase - INFO - Found projection in HDF file: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p06.hdf\n",
            "2025-04-09 08:41:24 - ras_commander.HdfResultsMesh - INFO - Processed 19597 rows of summary output data\n",
            "2025-04-09 08:41:24 - ras_commander.HdfFluvialPluvial - INFO - Converting maximum water surface timestamps...\n",
            "2025-04-09 08:41:24 - ras_commander.HdfFluvialPluvial - INFO - Processing cell adjacencies...\n",
            "2025-04-09 08:41:27 - ras_commander.HdfFluvialPluvial - INFO - Cell adjacencies processed successfully.\n",
            "2025-04-09 08:41:27 - ras_commander.HdfFluvialPluvial - INFO - Extracting cell times from maximum water surface data...\n",
            "2025-04-09 08:41:27 - ras_commander.HdfFluvialPluvial - INFO - Identifying boundary edges...\n",
            "Processing cell adjacencies: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 18066/18066 [00:00<00:00, 47126.45it/s]\n",
            "2025-04-09 08:41:28 - ras_commander.HdfFluvialPluvial - INFO - Time difference statistics:\n",
            "2025-04-09 08:41:28 - ras_commander.HdfFluvialPluvial - INFO -   Min: 0.00 hours\n",
            "2025-04-09 08:41:28 - ras_commander.HdfFluvialPluvial - INFO -   Max: 94.79 hours\n",
            "2025-04-09 08:41:28 - ras_commander.HdfFluvialPluvial - INFO -   Mean: 8.97 hours\n",
            "2025-04-09 08:41:28 - ras_commander.HdfFluvialPluvial - INFO -   Number of boundaries found: 3201\n",
            "2025-04-09 08:41:28 - ras_commander.HdfFluvialPluvial - INFO -   Delta-t threshold: 72 hours\n",
            "2025-04-09 08:41:28 - ras_commander.HdfFluvialPluvial - INFO - Joining adjacent LineStrings into simple LineStrings...\n",
            "2025-04-09 08:41:29 - ras_commander.HdfFluvialPluvial - INFO - Starting gap analysis for 360 line segments...\n",
            "2025-04-09 08:41:29 - ras_commander.HdfFluvialPluvial - INFO - Analyzing line endpoints to identify gaps...\n",
            "2025-04-09 08:41:29 - ras_commander.HdfFluvialPluvial - INFO - Found 720 endpoints to analyze\n",
            "2025-04-09 08:41:33 - ras_commander.HdfFluvialPluvial - INFO - Identified 0 potential gaps to fill\n",
            "2025-04-09 08:41:33 - ras_commander.HdfFluvialPluvial - INFO - Gap filling complete. Filled 0 out of 0 gaps\n",
            "2025-04-09 08:41:33 - ras_commander.HdfFluvialPluvial - INFO - Final cleanup complete. Resulting in 360 line segments\n",
            "2025-04-09 08:41:33 - ras_commander.HdfFluvialPluvial - INFO - Creating final GeoDataFrame for boundaries...\n",
            "2025-04-09 08:41:33 - ras_commander.HdfFluvialPluvial - INFO - Cleaning up intermediate dataframes...\n",
            "2025-04-09 08:41:33 - ras_commander.HdfFluvialPluvial - INFO - Fluvial-pluvial boundary calculation completed successfully.\n"
          ]
        }
      ],
      "source": [
        "import geopandas as gpd\n",
        "import pandas as pd\n",
        "from shapely.geometry import LineString, Polygon, MultiLineString\n",
        "from collections import defaultdict\n",
        "from tqdm import tqdm\n",
        "from rtree import index\n",
        "\n",
        "\n",
        "# Example usage:\n",
        "boundary_gdf = HdfFluvialPluvial.calculate_fluvial_pluvial_boundary(plan_hdf_path, delta_t=72)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Boundary line length statistics:\n",
            "Max length: 24750.00\n",
            "Min length: 1.57\n",
            "Average length: 2096.36\n",
            "Median length: 1000.00\n",
            "\n",
            "Boundary GeoDataFrame info:\n",
            "<class 'geopandas.geodataframe.GeoDataFrame'>\n",
            "RangeIndex: 360 entries, 0 to 359\n",
            "Data columns (total 1 columns):\n",
            " #   Column    Non-Null Count  Dtype   \n",
            "---  ------    --------------  -----   \n",
            " 0   geometry  360 non-null    geometry\n",
            "dtypes: geometry(1)\n",
            "memory usage: 2.9 KB\n",
            "None\n"
          ]
        }
      ],
      "source": [
        "# Calculate statistics about the boundary line lengths\n",
        "boundary_lengths = boundary_gdf.geometry.length\n",
        "\n",
        "print(\"Boundary line length statistics:\")\n",
        "print(f\"Max length: {boundary_lengths.max():.2f}\")\n",
        "print(f\"Min length: {boundary_lengths.min():.2f}\")\n",
        "print(f\"Average length: {boundary_lengths.mean():.2f}\")\n",
        "print(f\"Median length: {boundary_lengths.median():.2f}\")\n",
        "\n",
        "# Print general information about the boundary GeoDataFrame\n",
        "print(\"\\nBoundary GeoDataFrame info:\")\n",
        "print(boundary_gdf.info())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Visualize the results\n",
        "fig, ax = plt.subplots(figsize=(12, 8))\n",
        "cell_polygons_gdf.plot(ax=ax, edgecolor='gray', facecolor='none', alpha=0.5)\n",
        "boundary_gdf.plot(ax=ax, color='red', linewidth=2)\n",
        "plt.title('Fluvial-Pluvial Boundary')\n",
        "plt.xlabel('X Coordinate')\n",
        "plt.ylabel('Y Coordinate')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "length_threshold = 3000 #in same units as X and Y coordinates\n",
        "\n",
        "# Filter out boundary lines below the length threshold\n",
        "filtered_boundary_gdf = boundary_gdf[boundary_lengths >= length_threshold]\n",
        "highlighted_boundary_gdf = boundary_gdf[boundary_lengths < length_threshold]\n",
        "\n",
        "# Visualize the results with highlighted boundaries below the threshold\n",
        "fig, ax = plt.subplots(figsize=(12, 8))\n",
        "cell_polygons_gdf.plot(ax=ax, edgecolor='gray', facecolor='none', alpha=0.5)\n",
        "filtered_boundary_gdf.plot(ax=ax, color='red', linewidth=2, label='Valid Boundaries')\n",
        "highlighted_boundary_gdf.plot(ax=ax, color='blue', linewidth=2, linestyle='--', label='Highlighted Boundaries Below Threshold')\n",
        "plt.title('Fluvial-Pluvial Boundary with Length Threshold')\n",
        "plt.xlabel('X Coordinate')\n",
        "plt.ylabel('Y Coordinate')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-09 08:41:39 - pyogrio._io - INFO - Created 360 records\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Output directory created/verified at: d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\fluvial_pluvial_boundary\n"
          ]
        }
      ],
      "source": [
        "# Create fluvial_pluvial_boundary subfolder\n",
        "output_dir = your_project_path / \"fluvial_pluvial_boundary\"\n",
        "output_dir.mkdir(exist_ok=True)\n",
        "print(f\"Output directory created/verified at: {output_dir}\")\n",
        "\n",
        "# Save to GeoJSON in output directory\n",
        "boundary_gdf.to_file(output_dir / 'fluvial_pluvial_boundary.geojson', driver='GeoJSON')"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "rascmdr",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}
==================================================

File: c:\GH\ras-commander\examples\15_mannings_sensitivity_bulk_analysis.ipynb
==================================================
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Manning's Bulk Sensitivity Analysis\n",
        "\n",
        "This notebook provides tools for efficiently analyzing the sensitivity of HEC-RAS models to changing Manning's roughness coefficient values. The main function `autoras_mannings_bulk_sensitivity` automates the creation, execution, and comparison of model runs with different Manning's n values based on recommended ranges from literature."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Import Libraries and Setup ras-commander"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: seaborn in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (0.13.2)\n",
            "Requirement already satisfied: numpy!=1.24.0,>=1.20 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from seaborn) (2.2.4)\n",
            "Requirement already satisfied: pandas>=1.2 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from seaborn) (2.2.3)\n",
            "Requirement already satisfied: matplotlib!=3.6.1,>=3.4 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from seaborn) (3.10.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (4.56.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (1.4.8)\n",
            "Requirement already satisfied: packaging>=20.0 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (24.2)\n",
            "Requirement already satisfied: pillow>=8 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (11.1.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (3.2.1)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from pandas>=1.2->seaborn) (2025.1)\n",
            "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from pandas>=1.2->seaborn) (2025.1)\n",
            "Requirement already satisfied: six>=1.5 in c:\\users\\bill\\anaconda3\\envs\\rascmdr\\lib\\site-packages (from python-dateutil>=2.7->matplotlib!=3.6.1,>=3.4->seaborn) (1.17.0)\n"
          ]
        }
      ],
      "source": [
        "!pip install seaborn"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "ras_commander imported successfully\n"
          ]
        }
      ],
      "source": [
        "import sys\n",
        "import os\n",
        "from pathlib import Path\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from datetime import datetime\n",
        "from shapely.geometry import Point\n",
        "\n",
        "# This cell will try to import the pip package; if it fails, it will \n",
        "# add the parent directory to the Python path and try to import again\n",
        "# This assumes you are working in a subfolder of the ras-commander repository\n",
        "\n",
        "# Flexible imports to allow for development without installation\n",
        "try:\n",
        "    # Try to import from the installed package\n",
        "    from ras_commander import *\n",
        "except ImportError:\n",
        "    # If the import fails, add the parent directory to the Python path\n",
        "    current_file = Path(os.getcwd()).resolve()\n",
        "    rascmdr_directory = current_file.parent\n",
        "    sys.path.append(str(rascmdr_directory))\n",
        "    print(\"Loading ras-commander from local dev copy\")\n",
        "    # Now try to import again\n",
        "    from ras_commander import *\n",
        "\n",
        "print(\"ras_commander imported successfully\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Define Manning's n Value Ranges"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Manning's n value ranges for 16 land cover types:\n",
            "                 Land Cover Name  min_n  max_n   mid_n\n",
            "0     Barren Land Rock/Sand/Clay  0.023   0.10  0.0615\n",
            "1               Cultivated Crops  0.020   0.10  0.0600\n",
            "2               Deciduous Forest  0.100   0.20  0.1500\n",
            "3      Developed, High Intensity  0.120   0.20  0.1600\n",
            "4       Developed, Low Intensity  0.060   0.12  0.0900\n",
            "5    Developed, Medium Intensity  0.080   0.16  0.1200\n",
            "6          Developed, Open Space  0.030   0.09  0.0600\n",
            "7   Emergent Herbaceous Wetlands  0.050   0.12  0.0850\n",
            "8               Evergreen Forest  0.080   0.16  0.1200\n",
            "9           Grassland/Herbaceous  0.025   0.07  0.0475\n",
            "10                  Mixed Forest  0.080   0.20  0.1400\n",
            "11                        NoData  0.050   0.07  0.0600\n",
            "12                    Open Water  0.025   0.05  0.0375\n",
            "13                   Pasture/Hay  0.025   0.09  0.0575\n",
            "14                   Shrub/Scrub  0.070   0.16  0.1150\n",
            "15                Woody Wetlands  0.045   0.15  0.0975\n"
          ]
        }
      ],
      "source": [
        "def create_manning_minmax_df():\n",
        "    \"\"\"\n",
        "    Create a dataframe containing minimum and maximum Manning's n values\n",
        "    based on recommended ranges from literature.\n",
        "    \n",
        "    Returns:\n",
        "        pd.DataFrame: DataFrame with columns for Land Cover Name, min_n, max_n\n",
        "    \"\"\"\n",
        "    # Define the data as a list of dictionaries\n",
        "    manning_data = [\n",
        "        {\"Land Cover Name\": \"NoData\", \"min_n\": 0.050, \"max_n\": 0.070},\n",
        "        {\"Land Cover Name\": \"Barren Land Rock/Sand/Clay\", \"min_n\": 0.023, \"max_n\": 0.100},\n",
        "        {\"Land Cover Name\": \"Cultivated Crops\", \"min_n\": 0.020, \"max_n\": 0.100},\n",
        "        {\"Land Cover Name\": \"Deciduous Forest\", \"min_n\": 0.100, \"max_n\": 0.200},\n",
        "        {\"Land Cover Name\": \"Developed, High Intensity\", \"min_n\": 0.120, \"max_n\": 0.200},\n",
        "        {\"Land Cover Name\": \"Developed, Low Intensity\", \"min_n\": 0.060, \"max_n\": 0.120},\n",
        "        {\"Land Cover Name\": \"Developed, Medium Intensity\", \"min_n\": 0.080, \"max_n\": 0.160},\n",
        "        {\"Land Cover Name\": \"Developed, Open Space\", \"min_n\": 0.030, \"max_n\": 0.090},\n",
        "        {\"Land Cover Name\": \"Emergent Herbaceous Wetlands\", \"min_n\": 0.050, \"max_n\": 0.120},\n",
        "        {\"Land Cover Name\": \"Evergreen Forest\", \"min_n\": 0.080, \"max_n\": 0.160},\n",
        "        {\"Land Cover Name\": \"Grassland/Herbaceous\", \"min_n\": 0.025, \"max_n\": 0.070},\n",
        "        {\"Land Cover Name\": \"Mixed Forest\", \"min_n\": 0.080, \"max_n\": 0.200},\n",
        "        {\"Land Cover Name\": \"Open Water\", \"min_n\": 0.025, \"max_n\": 0.050},\n",
        "        {\"Land Cover Name\": \"Pasture/Hay\", \"min_n\": 0.025, \"max_n\": 0.090},\n",
        "        {\"Land Cover Name\": \"Shrub/Scrub\", \"min_n\": 0.070, \"max_n\": 0.160},\n",
        "        {\"Land Cover Name\": \"Woody Wetlands\", \"min_n\": 0.045, \"max_n\": 0.150}\n",
        "    ]\n",
        "    \n",
        "    # Create DataFrame\n",
        "    df = pd.DataFrame(manning_data)\n",
        "    \n",
        "    # Calculate the midpoint value\n",
        "    df['mid_n'] = (df['min_n'] + df['max_n']) / 2\n",
        "    \n",
        "    # Sort by land cover name\n",
        "    df = df.sort_values('Land Cover Name').reset_index(drop=True)\n",
        "    \n",
        "    # Print summary information\n",
        "    print(f\"Manning's n value ranges for {len(df)} land cover types:\")\n",
        "    print(df)\n",
        "    \n",
        "    return df\n",
        "\n",
        "# Create the Manning's n ranges dataframe\n",
        "manning_minmax_df = create_manning_minmax_df()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Manning's Bulk Sensitivity Analysis Function"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {},
      "outputs": [],
      "source": [
        "def autoras_mannings_bulk_sensitivity(\n",
        "    project_folder,\n",
        "    template_plan,\n",
        "    manning_minmax_df=None,\n",
        "    include_regional_overrides=True,\n",
        "    include_base_overrides=True,\n",
        "    point_of_interest=None,\n",
        "    output_folder=\"Mannings_Bulk_Sensitivity\",\n",
        "    run_parallel=True,\n",
        "    max_workers=2,\n",
        "    num_cores=2\n",
        "):\n",
        "    \"\"\"\n",
        "    Perform Manning's n bulk sensitivity analysis by running model with minimum,\n",
        "    maximum, and current Manning's n values.\n",
        "    \n",
        "    Args:\n",
        "        project_folder (str): Path to HEC-RAS project folder\n",
        "        template_plan (str): Plan number to use as template (e.g., \"01\")\n",
        "        manning_minmax_df (pd.DataFrame, optional): DataFrame with min/max n values\n",
        "        include_regional_overrides (bool, optional): Whether to adjust regional\n",
        "            Manning's values. Default is True.\n",
        "        include_base_overrides (bool, optional): Whether to adjust base \n",
        "            Manning's values. Default is True.\n",
        "        point_of_interest (tuple or Point, optional): Coordinates for extracting results\n",
        "        output_folder (str, optional): Name of output folder for results\n",
        "        run_parallel (bool, optional): Whether to run plans in parallel\n",
        "        max_workers (int, optional): Number of parallel workers\n",
        "        num_cores (int, optional): Number of cores per worker\n",
        "    \n",
        "    Returns:\n",
        "        dict: Results of sensitivity analysis\n",
        "    \"\"\"\n",
        "    import time\n",
        "    from datetime import datetime\n",
        "    \n",
        "    # Validate inputs\n",
        "    if not include_regional_overrides and not include_base_overrides:\n",
        "        raise ValueError(\"At least one of include_regional_overrides or include_base_overrides must be True\")\n",
        "    \n",
        "    # Use default manning_minmax_df if none provided\n",
        "    if manning_minmax_df is None:\n",
        "        manning_minmax_df = create_manning_minmax_df()\n",
        "    \n",
        "    # Convert point_of_interest to Point if provided\n",
        "    if point_of_interest is not None and not isinstance(point_of_interest, Point):\n",
        "        point_of_interest = Point(point_of_interest[0], point_of_interest[1])\n",
        "    \n",
        "    # Create timestamp for unique run identifier\n",
        "    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n",
        "    \n",
        "    # Initialize RAS project using HEC-RAS Version 6.6 (Change if needed)\n",
        "    print(f\"Initializing HEC-RAS project: {project_folder}\")\n",
        "    ras = init_ras_project(project_folder, \"6.6\")\n",
        "    \n",
        "    # Create output directory\n",
        "    results_dir = Path(project_folder) / output_folder\n",
        "    results_dir.mkdir(exist_ok=True)\n",
        "    print(f\"Results will be saved to: {results_dir}\")\n",
        "    \n",
        "    # Display available plans\n",
        "    print(\"\\nAvailable plans:\")\n",
        "    print(ras.plan_df[['plan_number', 'Plan Title', 'Short Identifier']])\n",
        "    \n",
        "    # Verify template plan exists\n",
        "    if template_plan not in ras.plan_df['plan_number'].values:\n",
        "        raise ValueError(f\"Template plan {template_plan} not found in project\")\n",
        "    \n",
        "    # Get the geometry number associated with the template plan\n",
        "    template_geom = ras.plan_df.loc[ras.plan_df['plan_number'] == template_plan, 'geometry_number'].values[0]\n",
        "    print(f\"\\nTemplate plan: {template_plan} (Geometry: {template_geom})\")\n",
        "    \n",
        "    # Get the geometry file path\n",
        "    geom_path = ras.geom_df.loc[ras.geom_df['geom_number'] == template_geom, 'full_path'].values[0]\n",
        "    \n",
        "    # Get the original Manning's values\n",
        "    original_baseoverrides = RasGeo.get_mannings_baseoverrides(geom_path)\n",
        "    original_regionoverrides = RasGeo.get_mannings_regionoverrides(geom_path)\n",
        "    \n",
        "    # Check if regional overrides exist\n",
        "    has_regional_overrides = not original_regionoverrides.empty\n",
        "    \n",
        "    if include_regional_overrides and not has_regional_overrides:\n",
        "        raise ValueError(\"include_regional_overrides is True, but no regional overrides found in the model\")\n",
        "    \n",
        "    # Store the current plan as \"current\" scenario\n",
        "    scenarios = [{\n",
        "        'name': 'Current',\n",
        "        'plan_number': template_plan,\n",
        "        'geom_number': template_geom,\n",
        "        'shortid': f\"Current\",\n",
        "        'description': \"Current Manning's n Values\"\n",
        "    }]\n",
        "    \n",
        "    # Function to create a modified plan with adjusted Manning's values\n",
        "    def create_modified_plan(name, shortid, description, min_values=False, max_values=False):\n",
        "        print(f\"\\nCreating plan: {name} (ShortID: {shortid})\")\n",
        "        print(f\"Description: {description}\")\n",
        "        \n",
        "        # Clone the template plan\n",
        "        new_plan_number = RasPlan.clone_plan(template_plan, new_plan_shortid=shortid)\n",
        "        \n",
        "        # Clone the template geometry\n",
        "        new_geom_number = RasPlan.clone_geom(template_geom)\n",
        "        \n",
        "        # Set the new plan to use the new geometry\n",
        "        RasPlan.set_geom(new_plan_number, new_geom_number)\n",
        "        \n",
        "        # Get the new geometry file path\n",
        "        new_geom_path = ras.geom_df.loc[ras.geom_df['geom_number'] == new_geom_number, 'full_path'].values[0]\n",
        "        \n",
        "        # Adjust base Manning's values if enabled\n",
        "        if include_base_overrides:\n",
        "            modified_baseoverrides = original_baseoverrides.copy()\n",
        "            \n",
        "            # For each land cover type in the base overrides\n",
        "            for idx, row in modified_baseoverrides.iterrows():\n",
        "                land_cover = row['Land Cover Name']\n",
        "                \n",
        "                # Find matching land cover in manning_minmax_df\n",
        "                match = manning_minmax_df[manning_minmax_df['Land Cover Name'] == land_cover]\n",
        "                \n",
        "                if not match.empty:\n",
        "                    current_value = row[\"Base Manning's n Value\"]\n",
        "                    \n",
        "                    if min_values:\n",
        "                        new_value = match['min_n'].values[0]\n",
        "                    elif max_values:\n",
        "                        new_value = match['max_n'].values[0]\n",
        "                    else:\n",
        "                        new_value = current_value  # No change\n",
        "                    \n",
        "                    modified_baseoverrides.loc[idx, \"Base Manning's n Value\"] = new_value\n",
        "                    print(f\"  Adjusted base override for '{land_cover}': {current_value:.4f} \u2192 {new_value:.4f}\")\n",
        "            \n",
        "            # Apply modified base Manning's values\n",
        "            RasGeo.set_mannings_baseoverrides(new_geom_path, modified_baseoverrides)\n",
        "        else:\n",
        "            # Just copy the original base overrides\n",
        "            RasGeo.set_mannings_baseoverrides(new_geom_path, original_baseoverrides)\n",
        "        \n",
        "        # Adjust regional Manning's values if enabled and they exist\n",
        "        if include_regional_overrides and has_regional_overrides:\n",
        "            modified_regionoverrides = original_regionoverrides.copy()\n",
        "            \n",
        "            # For each row in the region overrides\n",
        "            for idx, row in modified_regionoverrides.iterrows():\n",
        "                land_cover = row['Land Cover Name']\n",
        "                region_name = row['Region Name']\n",
        "                \n",
        "                # Find matching land cover in manning_minmax_df\n",
        "                match = manning_minmax_df[manning_minmax_df['Land Cover Name'] == land_cover]\n",
        "                \n",
        "                if not match.empty:\n",
        "                    current_value = row[\"MainChannel\"]\n",
        "                    \n",
        "                    if min_values:\n",
        "                        new_value = match['min_n'].values[0]\n",
        "                    elif max_values:\n",
        "                        new_value = match['max_n'].values[0]\n",
        "                    else:\n",
        "                        new_value = current_value  # No change\n",
        "                    \n",
        "                    modified_regionoverrides.loc[idx, \"MainChannel\"] = new_value\n",
        "                    print(f\"  Adjusted region override for '{land_cover}' in '{region_name}': {current_value:.4f} \u2192 {new_value:.4f}\")\n",
        "            \n",
        "            # Apply modified regional Manning's values\n",
        "            RasGeo.set_mannings_regionoverrides(new_geom_path, modified_regionoverrides)\n",
        "        elif has_regional_overrides:\n",
        "            # Just copy the original region overrides\n",
        "            RasGeo.set_mannings_regionoverrides(new_geom_path, original_regionoverrides)\n",
        "        \n",
        "        # Store scenario details\n",
        "        return {\n",
        "            'name': name,\n",
        "            'plan_number': new_plan_number,\n",
        "            'geom_number': new_geom_number,\n",
        "            'shortid': shortid,\n",
        "            'description': description\n",
        "        }\n",
        "    \n",
        "    # Create minimum and maximum scenarios\n",
        "    min_scenario = create_modified_plan(\n",
        "        name=\"Minimum\",\n",
        "        shortid=\"Min_n\",\n",
        "        description=\"Minimum Recommended Manning's n Values\",\n",
        "        min_values=True\n",
        "    )\n",
        "\n",
        "    print(f\"Minimum Scenario Plan Number: {min_scenario}\")\n",
        "    \n",
        "    max_scenario = create_modified_plan(\n",
        "        name=\"Maximum\",\n",
        "        shortid=\"Max_n\",\n",
        "        description=\"Maximum Recommended Manning's n Values\",\n",
        "        max_values=True\n",
        "    )\n",
        "    \n",
        "    print(f\"Maximum Scenario Plan Number: {max_scenario}\")\n",
        "\n",
        "    # Add scenarios to list\n",
        "    scenarios.append(min_scenario)\n",
        "    scenarios.append(max_scenario)\n",
        "\n",
        "    print(f\"Scenarios: \\n{scenarios}\")\n",
        "    \n",
        "    # Get plan numbers for the new scenarios (excluding template which is already computed)\n",
        "    plan_numbers = [str(scenario['plan_number']) for scenario in scenarios]\n",
        "    print(f\"Plan Numbers: \\n{plan_numbers}\")\n",
        "\n",
        "    # Save scenario information\n",
        "    scenario_info = pd.DataFrame(scenarios)\n",
        "    scenario_info_path = results_dir / \"scenarios.csv\"\n",
        "    scenario_info.to_csv(scenario_info_path, index=False)\n",
        "    print(f\"\\nScenario information saved to: {scenario_info_path}\")\n",
        "    \n",
        "    # Run the plans (either in parallel or sequentially)\n",
        "    if run_parallel:\n",
        "        print(f\"\\nRunning {len(plan_numbers)} plans in parallel...\")\n",
        "        results = RasCmdr.compute_parallel(\n",
        "            plan_number=plan_numbers,\n",
        "            max_workers=max_workers,\n",
        "            num_cores=num_cores,\n",
        "            clear_geompre=True\n",
        "        )\n",
        "    else:\n",
        "        print(f\"\\nRunning {len(plan_numbers)} plans sequentially...\")\n",
        "        results = {}\n",
        "        for plan_number in plan_numbers:\n",
        "            print(f\"  Running plan {plan_number}...\")\n",
        "            result = RasCmdr.compute_plan(plan_number, num_cores=num_cores, clear_geompre=True)\n",
        "            results[plan_number] = result\n",
        "    \n",
        "    print(\"\\nExecution results:\")\n",
        "    for plan, success in results.items():\n",
        "        print(f\"  Plan {plan}: {'Successful' if success else 'Failed'}\")\n",
        "    \n",
        "    # Early return if no point of interest is provided\n",
        "    if point_of_interest is None:\n",
        "        print(\"\\nNo point of interest provided. Skipping results extraction and analysis.\")\n",
        "        return {\n",
        "            'scenarios': scenarios,\n",
        "            'execution_results': results,\n",
        "            'output_folder': results_dir\n",
        "        }\n",
        "    \n",
        "    # Find nearest mesh cell for result extraction\n",
        "    # Use the geometry from the first executed plan for cell identification\n",
        "    geom_hdf_path = None\n",
        "    for scenario in scenarios:\n",
        "        geom_number = scenario['geom_number']\n",
        "        try:\n",
        "            geom_hdf_path = ras.geom_df.loc[ras.geom_df['geom_number'] == geom_number, 'hdf_path'].values[0]\n",
        "            break\n",
        "        except:\n",
        "            continue\n",
        "    \n",
        "    if geom_hdf_path is None:\n",
        "        print(\"ERROR: Could not find HDF path for any geometry\")\n",
        "        return {\n",
        "            'scenarios': scenarios,\n",
        "            'execution_results': results,\n",
        "            'output_folder': results_dir\n",
        "        }\n",
        "    \n",
        "    plan_number = scenario['plan_number']\n",
        "\n",
        "    # Find the nearest mesh cell to the point of interest\n",
        "    mesh_cells_gdf = HdfMesh.get_mesh_cell_points(plan_number)\n",
        "    \n",
        "    # Calculate distances from the point to all mesh cells\n",
        "    distances = mesh_cells_gdf.geometry.apply(lambda geom: geom.distance(point_of_interest))\n",
        "    \n",
        "    # Find the index of the minimum distance\n",
        "    nearest_idx = distances.idxmin()\n",
        "    \n",
        "    # Get the cell ID for results extraction\n",
        "    mesh_cell_for_results = mesh_cells_gdf.loc[nearest_idx, 'cell_id']\n",
        "    mesh_name = mesh_cells_gdf.loc[nearest_idx, 'mesh_name']\n",
        "    \n",
        "    print(f\"\\nNearest cell ID: {mesh_cell_for_results}\")\n",
        "    print(f\"Distance: {distances[nearest_idx]:.2f} units\")\n",
        "    print(f\"Mesh area: {mesh_name}\")\n",
        "    \n",
        "    # Extract and store results\n",
        "    all_results = {}\n",
        "    max_ws_values = []\n",
        "    \n",
        "    # Get results for each scenario\n",
        "    for scenario in scenarios:\n",
        "        plan_number = scenario['plan_number']\n",
        "        name = scenario['name']\n",
        "        shortid = scenario['shortid']\n",
        "        \n",
        "        # Get the results for this plan\n",
        "        try:\n",
        "            results_xr = HdfResultsMesh.get_mesh_cells_timeseries(plan_number)\n",
        "            \n",
        "            # Extract water surface data for the specific cell\n",
        "            ws_data = results_xr[mesh_name]['Water Surface'].sel(cell_id=int(mesh_cell_for_results))\n",
        "            \n",
        "            # Convert to DataFrame for easier handling\n",
        "            ws_df = pd.DataFrame({\n",
        "                'time': ws_data.time.values,\n",
        "                'water_surface': ws_data.values\n",
        "            })\n",
        "            \n",
        "            # Store in results dictionary\n",
        "            all_results[plan_number] = {\n",
        "                'name': name,\n",
        "                'shortid': shortid,\n",
        "                'df': ws_df,\n",
        "                'max_water_surface': ws_df['water_surface'].max()\n",
        "            }\n",
        "            \n",
        "            # Store the maximum water surface value for summary\n",
        "            max_ws = ws_df['water_surface'].max()\n",
        "            max_ws_values.append({\n",
        "                'plan_number': plan_number,\n",
        "                'name': name,\n",
        "                'shortid': shortid,\n",
        "                'max_water_surface': max_ws\n",
        "            })\n",
        "            \n",
        "            print(f\"Scenario: {name} ({shortid}): Max Water Surface = {max_ws:.2f}\")\n",
        "            \n",
        "            # Save time series to CSV\n",
        "            plan_csv_path = results_dir / f\"timeseries_{shortid}.csv\"\n",
        "            ws_df.to_csv(plan_csv_path, index=False)\n",
        "            print(f\"  Time series saved to: {plan_csv_path}\")\n",
        "            \n",
        "        except Exception as e:\n",
        "            print(f\"Error extracting results for scenario {name}: {str(e)}\")\n",
        "    \n",
        "    # Create a summary DataFrame for maximum water surface values\n",
        "    max_ws_df = pd.DataFrame(max_ws_values)\n",
        "    \n",
        "    # Save the summary to CSV\n",
        "    summary_csv_path = results_dir / \"max_water_surface_summary.csv\"\n",
        "    max_ws_df.to_csv(summary_csv_path, index=False)\n",
        "    print(f\"\\nSummary of maximum water surface elevations saved to: {summary_csv_path}\")\n",
        "    \n",
        "    # Create and save plots if results were successfully extracted\n",
        "    if all_results:\n",
        "        # Plot time series for all scenarios\n",
        "        plt.figure(figsize=(14, 8))\n",
        "        \n",
        "        # Define colors for scenarios\n",
        "        colors = {'Current': 'black', 'Minimum': 'blue', 'Maximum': 'red'}\n",
        "        \n",
        "        # Plot each scenario\n",
        "        for scenario in scenarios:\n",
        "            plan_number = scenario['plan_number']\n",
        "            name = scenario['name']\n",
        "            \n",
        "            if plan_number in all_results:\n",
        "                result = all_results[plan_number]\n",
        "                df = result['df']\n",
        "                \n",
        "                color = colors.get(name, 'gray')\n",
        "                linestyle = '-' if name == 'Current' else '--'\n",
        "                linewidth = 2 if name == 'Current' else 1.5\n",
        "                \n",
        "                plt.plot(df['time'], df['water_surface'], \n",
        "                         label=f\"{name} ({result['shortid']})\",\n",
        "                         color=color, linestyle=linestyle, linewidth=linewidth)\n",
        "        \n",
        "        # Add plot details\n",
        "        plt.title(f'Water Surface Sensitivity to Manning\\'s Roughness at Cell ID: {mesh_cell_for_results}')\n",
        "        plt.xlabel('Time')\n",
        "        plt.ylabel('Water Surface Elevation (ft)')\n",
        "        plt.grid(True, linestyle='--', alpha=0.7)\n",
        "        plt.legend()\n",
        "        \n",
        "        # Save the time series plot\n",
        "        timeseries_plot_path = results_dir / \"water_surface_timeseries.png\"\n",
        "        plt.tight_layout()\n",
        "        plt.savefig(timeseries_plot_path)\n",
        "        print(f\"Time series plot saved to: {timeseries_plot_path}\")\n",
        "        \n",
        "        # Create bar chart of maximum water surface elevations\n",
        "        plt.figure(figsize=(10, 6))\n",
        "        \n",
        "        # Sort by name for consistent ordering\n",
        "        max_ws_df_sorted = max_ws_df.sort_values('name')\n",
        "        \n",
        "        # Create bar colors\n",
        "        bar_colors = [colors.get(name, 'gray') for name in max_ws_df_sorted['name']]\n",
        "        \n",
        "        # Create bar chart\n",
        "        plt.bar(max_ws_df_sorted['name'], max_ws_df_sorted['max_water_surface'], color=bar_colors)\n",
        "        \n",
        "        # Add values on top of bars\n",
        "        for i, value in enumerate(max_ws_df_sorted['max_water_surface']):\n",
        "            plt.text(i, value + 0.1, f'{value:.2f}', ha='center')\n",
        "        \n",
        "        # Add plot details\n",
        "        plt.title('Maximum Water Surface Elevation by Manning\\'s Roughness Scenario')\n",
        "        plt.ylabel('Maximum Water Surface Elevation (ft)')\n",
        "        plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "        \n",
        "        # Save the bar chart\n",
        "        bar_plot_path = results_dir / \"max_water_surface_comparison.png\"\n",
        "        plt.tight_layout()\n",
        "        plt.savefig(bar_plot_path)\n",
        "        print(f\"Bar chart saved to: {bar_plot_path}\")\n",
        "        \n",
        "        # Show plots\n",
        "        plt.show()\n",
        "    \n",
        "    # Calculate differences between scenarios\n",
        "    if len(max_ws_df) >= 2:\n",
        "        # Get values for each scenario\n",
        "        try:\n",
        "            current_ws = max_ws_df.loc[max_ws_df['name'] == 'Current', 'max_water_surface'].values[0]\n",
        "            min_ws = max_ws_df.loc[max_ws_df['name'] == 'Minimum', 'max_water_surface'].values[0]\n",
        "            max_ws = max_ws_df.loc[max_ws_df['name'] == 'Maximum', 'max_water_surface'].values[0]\n",
        "            \n",
        "            print(\"\\nSensitivity Analysis Summary:\")\n",
        "            print(f\"  Current maximum WSE: {current_ws:.2f} ft\")\n",
        "            print(f\"  Minimum n maximum WSE: {min_ws:.2f} ft\")\n",
        "            print(f\"  Maximum n maximum WSE: {max_ws:.2f} ft\")\n",
        "            print(f\"  Range: {max_ws - min_ws:.2f} ft\")\n",
        "            print(f\"  Current vs Min: {current_ws - min_ws:.2f} ft\")\n",
        "            print(f\"  Current vs Max: {max_ws - current_ws:.2f} ft\")\n",
        "            \n",
        "            # Calculate the percentage of the range\n",
        "            if max_ws != min_ws:\n",
        "                current_position = (current_ws - min_ws) / (max_ws - min_ws) * 100\n",
        "                print(f\"  Current position within range: {current_position:.1f}%\")\n",
        "        except:\n",
        "            print(\"Could not calculate differences between scenarios\")\n",
        "    \n",
        "    # Return results\n",
        "    return {\n",
        "        'scenarios': scenarios,\n",
        "        'execution_results': results,\n",
        "        'results': all_results if 'all_results' in locals() else None,\n",
        "        'max_ws_summary': max_ws_df if 'max_ws_df' in locals() else None,\n",
        "        'mesh_cell_id': mesh_cell_for_results if 'mesh_cell_for_results' in locals() else None,\n",
        "        'mesh_name': mesh_name if 'mesh_name' in locals() else None,\n",
        "        'output_folder': results_dir\n",
        "    }"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Example Usage"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-15 16:27:51 - ras_commander.RasExamples - INFO - Found zip file: d:\\GitHub\\ras-commander\\examples\\Example_Projects_6_6.zip\n",
            "2025-04-15 16:27:51 - ras_commander.RasExamples - INFO - Loading project data from CSV...\n",
            "2025-04-15 16:27:51 - ras_commander.RasExamples - INFO - Loaded 68 projects from CSV.\n",
            "2025-04-15 16:27:51 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
            "2025-04-15 16:27:51 - ras_commander.RasExamples - INFO - Extracting project 'BaldEagleCrkMulti2D'\n",
            "2025-04-15 16:27:51 - ras_commander.RasExamples - INFO - Project 'BaldEagleCrkMulti2D' already exists. Deleting existing folder...\n",
            "2025-04-15 16:27:51 - ras_commander.RasExamples - INFO - Existing folder for project 'BaldEagleCrkMulti2D' has been deleted.\n",
            "2025-04-15 16:27:54 - ras_commander.RasExamples - INFO - Successfully extracted project 'BaldEagleCrkMulti2D' to d:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n"
          ]
        }
      ],
      "source": [
        "# Run this code cell if you want to use the BaldEagleCrkMulti2D Example Project\n",
        "\n",
        "RasExamples.extract_project([\"BaldEagleCrkMulti2D\"])\n",
        "\n",
        "import os\n",
        "# Get the current directory for the project path\n",
        "current_dir = Path(os.getcwd()).resolve()\n",
        "\n",
        "project_folder = current_dir / \"example_projects\" / \"BaldEagleCrkMulti2D\"\n",
        "template_plan = \"03\"  # This plan number has both base and regional overrides\n",
        "\n",
        "# Either as a tuple (x, y) or as a Point object\n",
        "point_of_interest = (2081544, 365715)  # Adjust coordinates as needed"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Uncomment and Run this Code Cell if you are using your own project\n",
        "#project_folder = r\"C:\\Path\\To\\HEC-RAS\\Project\"\n",
        "#template_plan = \"01\"  # Change to your desired template plan number\n",
        "\n",
        "# Either as a tuple (x, y) or as a Point object\n",
        "#point_of_interest = (2081544, 365715)  # Adjust coordinates as needed"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Manning's n value ranges for 16 land cover types:\n",
            "                 Land Cover Name  min_n  max_n   mid_n\n",
            "0     Barren Land Rock/Sand/Clay  0.023   0.10  0.0615\n",
            "1               Cultivated Crops  0.020   0.10  0.0600\n",
            "2               Deciduous Forest  0.100   0.20  0.1500\n",
            "3      Developed, High Intensity  0.120   0.20  0.1600\n",
            "4       Developed, Low Intensity  0.060   0.12  0.0900\n",
            "5    Developed, Medium Intensity  0.080   0.16  0.1200\n",
            "6          Developed, Open Space  0.030   0.09  0.0600\n",
            "7   Emergent Herbaceous Wetlands  0.050   0.12  0.0850\n",
            "8               Evergreen Forest  0.080   0.16  0.1200\n",
            "9           Grassland/Herbaceous  0.025   0.07  0.0475\n",
            "10                  Mixed Forest  0.080   0.20  0.1400\n",
            "11                        NoData  0.050   0.07  0.0600\n",
            "12                    Open Water  0.025   0.05  0.0375\n",
            "13                   Pasture/Hay  0.025   0.09  0.0575\n",
            "14                   Shrub/Scrub  0.070   0.16  0.1150\n",
            "15                Woody Wetlands  0.045   0.15  0.0975\n"
          ]
        }
      ],
      "source": [
        "# Define a point of interest for result extraction\n",
        "\n",
        "\n",
        "# Create the Manning's n ranges dataframe (or use the default)\n",
        "manning_ranges = create_manning_minmax_df()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-15 16:27:54 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-15 16:27:54 - ras_commander.RasUtils - INFO - File cloned from D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p03 to D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p07\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Initializing HEC-RAS project: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
            "Results will be saved to: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\Mannings_Bulk_Sensitivity\n",
            "\n",
            "Available plans:\n",
            "   plan_number                               Plan Title  \\\n",
            "0           13                  PMF with Multi 2D Areas   \n",
            "1           15              1d-2D Dambreak Refined Grid   \n",
            "2           17                          2D to 1D No Dam   \n",
            "3           18                             2D to 2D Run   \n",
            "4           19                   SA to 2D Dam Break Run   \n",
            "5           03  Single 2D Area - Internal Dam Structure   \n",
            "6           04  SA to 2D Area Conn - 2D Levee Structure   \n",
            "7           02                 SA to Detailed 2D Breach   \n",
            "8           01             SA to Detailed 2D Breach FEQ   \n",
            "9           05          Single 2D area with Bridges FEQ   \n",
            "10          06            Gridded Precip - Infiltration   \n",
            "\n",
            "            Short Identifier  \n",
            "0               PMF Multi 2D  \n",
            "1         1D-2D Refined Grid  \n",
            "2            2D to 1D No Dam  \n",
            "3               2D to 2D Run  \n",
            "4         SA to 2D Dam Break  \n",
            "5                  Single 2D  \n",
            "6             2D Levee Struc  \n",
            "7             SA-2D Det Brch  \n",
            "8              SA-2D Det FEQ  \n",
            "9      Single 2D Bridges FEQ  \n",
            "10  Grid Precip Infiltration  \n",
            "\n",
            "Template plan: 03 (Geometry: 09)\n",
            "\n",
            "Creating plan: Minimum (ShortID: Min_n)\n",
            "Description: Minimum Recommended Manning's n Values\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-15 16:27:54 - ras_commander.RasUtils - INFO - Successfully updated file: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p07\n",
            "2025-04-15 16:27:54 - ras_commander.RasUtils - INFO - Project file updated with new Plan entry: 07\n",
            "2025-04-15 16:27:54 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-15 16:27:54 - ras_commander.RasUtils - INFO - File cloned from D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09 to D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g04\n",
            "2025-04-15 16:27:54 - ras_commander.RasUtils - INFO - File cloned from D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf to D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g04.hdf\n",
            "2025-04-15 16:27:54 - ras_commander.RasUtils - INFO - Project file updated with new Geom entry: 04\n",
            "2025-04-15 16:27:54 - ras_commander.RasPlan - INFO - Updated Geom File in plan file to g04 for plan 07\n",
            "2025-04-15 16:27:54 - ras_commander.RasPlan - INFO - Geometry for plan 07 set to 04\n",
            "2025-04-15 16:27:54 - ras_commander.RasUtils - INFO - File cloned from D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p03 to D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p08\n",
            "2025-04-15 16:27:54 - ras_commander.RasUtils - INFO - Successfully updated file: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.p08\n",
            "2025-04-15 16:27:54 - ras_commander.RasUtils - INFO - Project file updated with new Plan entry: 08\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "  Adjusted base override for 'NoData': 0.0600 \u2192 0.0500\n",
            "  Adjusted base override for 'Barren Land Rock/Sand/Clay': 0.0400 \u2192 0.0230\n",
            "  Adjusted base override for 'Cultivated Crops': 0.0600 \u2192 0.0200\n",
            "  Adjusted base override for 'Deciduous Forest': 0.1000 \u2192 0.1000\n",
            "  Adjusted base override for 'Developed, High Intensity': 0.1500 \u2192 0.1200\n",
            "  Adjusted base override for 'Developed, Low Intensity': 0.1000 \u2192 0.0600\n",
            "  Adjusted base override for 'Developed, Medium Intensity': 0.0800 \u2192 0.0800\n",
            "  Adjusted base override for 'Developed, Open Space': 0.0400 \u2192 0.0300\n",
            "  Adjusted base override for 'Emergent Herbaceous Wetlands': 0.0800 \u2192 0.0500\n",
            "  Adjusted base override for 'Evergreen Forest': 0.1200 \u2192 0.0800\n",
            "  Adjusted base override for 'Grassland/Herbaceous': 0.0450 \u2192 0.0250\n",
            "  Adjusted base override for 'Mixed Forest': 0.0800 \u2192 0.0800\n",
            "  Adjusted base override for 'Open Water': 0.0350 \u2192 0.0250\n",
            "  Adjusted base override for 'Pasture/Hay': 0.0600 \u2192 0.0250\n",
            "  Adjusted base override for 'Shrub/Scrub': 0.0800 \u2192 0.0700\n",
            "  Adjusted base override for 'Woody Wetlands': 0.1200 \u2192 0.0450\n",
            "  Adjusted region override for 'NoData' in 'Main Channel': 0.0400 \u2192 0.0500\n",
            "  Adjusted region override for 'Barren Land Rock/Sand/Clay' in 'Main Channel': 0.0400 \u2192 0.0230\n",
            "  Adjusted region override for 'Cultivated Crops' in 'Main Channel': 0.0400 \u2192 0.0200\n",
            "  Adjusted region override for 'Deciduous Forest' in 'Main Channel': 0.0400 \u2192 0.1000\n",
            "  Adjusted region override for 'Developed, High Intensity' in 'Main Channel': 0.0400 \u2192 0.1200\n",
            "  Adjusted region override for 'Developed, Low Intensity' in 'Main Channel': 0.0400 \u2192 0.0600\n",
            "  Adjusted region override for 'Developed, Medium Intensity' in 'Main Channel': 0.0400 \u2192 0.0800\n",
            "  Adjusted region override for 'Developed, Open Space' in 'Main Channel': 0.0400 \u2192 0.0300\n",
            "  Adjusted region override for 'Emergent Herbaceous Wetlands' in 'Main Channel': 0.0400 \u2192 0.0500\n",
            "  Adjusted region override for 'Evergreen Forest' in 'Main Channel': 0.0400 \u2192 0.0800\n",
            "  Adjusted region override for 'Grassland/Herbaceous' in 'Main Channel': 0.0400 \u2192 0.0250\n",
            "  Adjusted region override for 'Mixed Forest' in 'Main Channel': 0.0400 \u2192 0.0800\n",
            "  Adjusted region override for 'Open Water' in 'Main Channel': 0.0400 \u2192 0.0250\n",
            "  Adjusted region override for 'Pasture/Hay' in 'Main Channel': 0.0400 \u2192 0.0250\n",
            "  Adjusted region override for 'Shrub/Scrub' in 'Main Channel': 0.0400 \u2192 0.0700\n",
            "  Adjusted region override for 'Woody Wetlands' in 'Main Channel': 0.0400 \u2192 0.0450\n",
            "Minimum Scenario Plan Number: {'name': 'Minimum', 'plan_number': '07', 'geom_number': '04', 'shortid': 'Min_n', 'description': \"Minimum Recommended Manning's n Values\"}\n",
            "\n",
            "Creating plan: Maximum (ShortID: Max_n)\n",
            "Description: Maximum Recommended Manning's n Values\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-15 16:27:54 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.rasmap\n",
            "2025-04-15 16:27:54 - ras_commander.RasUtils - INFO - File cloned from D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09 to D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g05\n",
            "2025-04-15 16:27:54 - ras_commander.RasUtils - INFO - File cloned from D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g09.hdf to D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\BaldEagleDamBrk.g05.hdf\n",
            "2025-04-15 16:27:54 - ras_commander.RasUtils - INFO - Project file updated with new Geom entry: 05\n",
            "2025-04-15 16:27:54 - ras_commander.RasPlan - INFO - Updated Geom File in plan file to g05 for plan 08\n",
            "2025-04-15 16:27:54 - ras_commander.RasPlan - INFO - Geometry for plan 08 set to 05\n",
            "2025-04-15 16:27:54 - ras_commander.RasCmdr - INFO - Filtered plans to execute: ['03', '07', '08']\n",
            "2025-04-15 16:27:54 - ras_commander.RasCmdr - INFO - Adjusted max_workers to 2 based on the number of plans: 3\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "  Adjusted base override for 'NoData': 0.0600 \u2192 0.0700\n",
            "  Adjusted base override for 'Barren Land Rock/Sand/Clay': 0.0400 \u2192 0.1000\n",
            "  Adjusted base override for 'Cultivated Crops': 0.0600 \u2192 0.1000\n",
            "  Adjusted base override for 'Deciduous Forest': 0.1000 \u2192 0.2000\n",
            "  Adjusted base override for 'Developed, High Intensity': 0.1500 \u2192 0.2000\n",
            "  Adjusted base override for 'Developed, Low Intensity': 0.1000 \u2192 0.1200\n",
            "  Adjusted base override for 'Developed, Medium Intensity': 0.0800 \u2192 0.1600\n",
            "  Adjusted base override for 'Developed, Open Space': 0.0400 \u2192 0.0900\n",
            "  Adjusted base override for 'Emergent Herbaceous Wetlands': 0.0800 \u2192 0.1200\n",
            "  Adjusted base override for 'Evergreen Forest': 0.1200 \u2192 0.1600\n",
            "  Adjusted base override for 'Grassland/Herbaceous': 0.0450 \u2192 0.0700\n",
            "  Adjusted base override for 'Mixed Forest': 0.0800 \u2192 0.2000\n",
            "  Adjusted base override for 'Open Water': 0.0350 \u2192 0.0500\n",
            "  Adjusted base override for 'Pasture/Hay': 0.0600 \u2192 0.0900\n",
            "  Adjusted base override for 'Shrub/Scrub': 0.0800 \u2192 0.1600\n",
            "  Adjusted base override for 'Woody Wetlands': 0.1200 \u2192 0.1500\n",
            "  Adjusted region override for 'NoData' in 'Main Channel': 0.0400 \u2192 0.0700\n",
            "  Adjusted region override for 'Barren Land Rock/Sand/Clay' in 'Main Channel': 0.0400 \u2192 0.1000\n",
            "  Adjusted region override for 'Cultivated Crops' in 'Main Channel': 0.0400 \u2192 0.1000\n",
            "  Adjusted region override for 'Deciduous Forest' in 'Main Channel': 0.0400 \u2192 0.2000\n",
            "  Adjusted region override for 'Developed, High Intensity' in 'Main Channel': 0.0400 \u2192 0.2000\n",
            "  Adjusted region override for 'Developed, Low Intensity' in 'Main Channel': 0.0400 \u2192 0.1200\n",
            "  Adjusted region override for 'Developed, Medium Intensity' in 'Main Channel': 0.0400 \u2192 0.1600\n",
            "  Adjusted region override for 'Developed, Open Space' in 'Main Channel': 0.0400 \u2192 0.0900\n",
            "  Adjusted region override for 'Emergent Herbaceous Wetlands' in 'Main Channel': 0.0400 \u2192 0.1200\n",
            "  Adjusted region override for 'Evergreen Forest' in 'Main Channel': 0.0400 \u2192 0.1600\n",
            "  Adjusted region override for 'Grassland/Herbaceous' in 'Main Channel': 0.0400 \u2192 0.0700\n",
            "  Adjusted region override for 'Mixed Forest' in 'Main Channel': 0.0400 \u2192 0.2000\n",
            "  Adjusted region override for 'Open Water' in 'Main Channel': 0.0400 \u2192 0.0500\n",
            "  Adjusted region override for 'Pasture/Hay' in 'Main Channel': 0.0400 \u2192 0.0900\n",
            "  Adjusted region override for 'Shrub/Scrub' in 'Main Channel': 0.0400 \u2192 0.1600\n",
            "  Adjusted region override for 'Woody Wetlands' in 'Main Channel': 0.0400 \u2192 0.1500\n",
            "Maximum Scenario Plan Number: {'name': 'Maximum', 'plan_number': '08', 'geom_number': '05', 'shortid': 'Max_n', 'description': \"Maximum Recommended Manning's n Values\"}\n",
            "Scenarios: \n",
            "[{'name': 'Current', 'plan_number': '03', 'geom_number': '09', 'shortid': 'Current', 'description': \"Current Manning's n Values\"}, {'name': 'Minimum', 'plan_number': '07', 'geom_number': '04', 'shortid': 'Min_n', 'description': \"Minimum Recommended Manning's n Values\"}, {'name': 'Maximum', 'plan_number': '08', 'geom_number': '05', 'shortid': 'Max_n', 'description': \"Maximum Recommended Manning's n Values\"}]\n",
            "Plan Numbers: \n",
            "['03', '07', '08']\n",
            "\n",
            "Scenario information saved to: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\Mannings_Bulk_Sensitivity\\scenarios.csv\n",
            "\n",
            "Running 3 plans in parallel...\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-15 16:27:55 - ras_commander.RasCmdr - INFO - Created worker folder: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Worker 1]\n",
            "2025-04-15 16:27:56 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Worker 1]\\BaldEagleDamBrk.rasmap\n",
            "2025-04-15 16:27:56 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Worker 1]\\BaldEagleDamBrk.rasmap\n",
            "2025-04-15 16:27:59 - ras_commander.RasCmdr - INFO - Created worker folder: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Worker 2]\n",
            "2025-04-15 16:27:59 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Worker 2]\\BaldEagleDamBrk.rasmap\n",
            "2025-04-15 16:27:59 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Worker 2]\\BaldEagleDamBrk.rasmap\n",
            "2025-04-15 16:27:59 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Worker 1]\n",
            "2025-04-15 16:27:59 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Worker 2]\n",
            "2025-04-15 16:27:59 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Worker 2]\\BaldEagleDamBrk.p07\n",
            "2025-04-15 16:27:59 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Worker 1]\\BaldEagleDamBrk.p03\n",
            "2025-04-15 16:27:59 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Worker 2]\\BaldEagleDamBrk.p07\n",
            "2025-04-15 16:27:59 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Worker 1]\\BaldEagleDamBrk.p03\n",
            "2025-04-15 16:27:59 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-15 16:27:59 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-15 16:27:59 - ras_commander.RasCmdr - INFO - Cleared geometry preprocessor files for plan: 07\n",
            "2025-04-15 16:27:59 - ras_commander.RasCmdr - INFO - Cleared geometry preprocessor files for plan: 03\n",
            "2025-04-15 16:27:59 - ras_commander.RasUtils - INFO - Using provided plan file path: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Worker 2]\\BaldEagleDamBrk.p07\n",
            "2025-04-15 16:27:59 - ras_commander.RasUtils - INFO - Using provided plan file path: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Worker 1]\\BaldEagleDamBrk.p03\n",
            "2025-04-15 16:27:59 - ras_commander.RasUtils - INFO - Successfully updated file: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Worker 1]\\BaldEagleDamBrk.p03\n",
            "2025-04-15 16:27:59 - ras_commander.RasUtils - INFO - Successfully updated file: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Worker 2]\\BaldEagleDamBrk.p07\n",
            "2025-04-15 16:27:59 - ras_commander.RasCmdr - INFO - Set number of cores to 2 for plan: 03\n",
            "2025-04-15 16:27:59 - ras_commander.RasCmdr - INFO - Set number of cores to 2 for plan: 07\n",
            "2025-04-15 16:27:59 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-15 16:27:59 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-15 16:27:59 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Worker 1]\\BaldEagleDamBrk.prj\" \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Worker 1]\\BaldEagleDamBrk.p03\"\n",
            "2025-04-15 16:27:59 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Worker 2]\\BaldEagleDamBrk.prj\" \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Worker 2]\\BaldEagleDamBrk.p07\"\n",
            "2025-04-15 16:34:32 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 03\n",
            "2025-04-15 16:34:32 - ras_commander.RasCmdr - INFO - Total run time for plan 03: 392.92 seconds\n",
            "2025-04-15 16:34:32 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Worker 1]\n",
            "2025-04-15 16:34:32 - ras_commander.RasCmdr - INFO - Plan 03 executed in worker 1: Successful\n",
            "2025-04-15 16:34:32 - ras_commander.RasGeo - INFO - Clearing geometry preprocessor file for single plan: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Worker 1]\\BaldEagleDamBrk.p08\n",
            "2025-04-15 16:34:32 - ras_commander.RasGeo - WARNING - No geometry preprocessor file found for: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Worker 1]\\BaldEagleDamBrk.p08\n",
            "2025-04-15 16:34:32 - ras_commander.RasGeo - INFO - Geometry dataframe updated successfully.\n",
            "2025-04-15 16:34:32 - ras_commander.RasCmdr - INFO - Cleared geometry preprocessor files for plan: 08\n",
            "2025-04-15 16:34:32 - ras_commander.RasUtils - INFO - Using provided plan file path: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Worker 1]\\BaldEagleDamBrk.p08\n",
            "2025-04-15 16:34:32 - ras_commander.RasUtils - INFO - Successfully updated file: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Worker 1]\\BaldEagleDamBrk.p08\n",
            "2025-04-15 16:34:32 - ras_commander.RasCmdr - INFO - Set number of cores to 2 for plan: 08\n",
            "2025-04-15 16:34:32 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
            "2025-04-15 16:34:32 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Worker 1]\\BaldEagleDamBrk.prj\" \"D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Worker 1]\\BaldEagleDamBrk.p08\"\n",
            "2025-04-15 16:36:06 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 07\n",
            "2025-04-15 16:36:06 - ras_commander.RasCmdr - INFO - Total run time for plan 07: 486.68 seconds\n",
            "2025-04-15 16:36:06 - ras_commander.RasCmdr - INFO - Plan 07 executed in worker 2: Successful\n",
            "2025-04-15 16:39:00 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 08\n",
            "2025-04-15 16:39:00 - ras_commander.RasCmdr - INFO - Total run time for plan 08: 268.15 seconds\n",
            "2025-04-15 16:39:00 - ras_commander.RasCmdr - INFO - Plan 08 executed in worker 1: Successful\n",
            "2025-04-15 16:39:00 - ras_commander.RasCmdr - INFO - Final destination for computed results: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Computed]\n",
            "2025-04-15 16:39:15 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Computed]\\BaldEagleDamBrk.rasmap\n",
            "2025-04-15 16:39:15 - ras_commander.RasMap - INFO - Successfully parsed RASMapper file: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Computed]\\BaldEagleDamBrk.rasmap\n",
            "2025-04-15 16:39:15 - ras_commander.RasCmdr - INFO - \n",
            "Execution Results:\n",
            "2025-04-15 16:39:15 - ras_commander.RasCmdr - INFO - Plan 03: Successful\n",
            "2025-04-15 16:39:15 - ras_commander.RasCmdr - INFO - Plan 07: Successful\n",
            "2025-04-15 16:39:15 - ras_commander.RasCmdr - INFO - Plan 08: Successful\n",
            "2025-04-15 16:39:15 - ras_commander.HdfMesh - INFO - Final validated HDF file path: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Computed]\\BaldEagleDamBrk.p03.hdf\n",
            "2025-04-15 16:39:15 - ras_commander.HdfMesh - INFO - Using existing Path object HDF file: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Computed]\\BaldEagleDamBrk.p03.hdf\n",
            "2025-04-15 16:39:15 - ras_commander.HdfMesh - INFO - Final validated HDF file path: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Computed]\\BaldEagleDamBrk.p03.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Execution results:\n",
            "  Plan 03: Successful\n",
            "  Plan 07: Successful\n",
            "  Plan 08: Successful\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-15 16:39:15 - ras_commander.HdfBase - INFO - Using HDF file from h5py.File object: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Computed]\\BaldEagleDamBrk.p03.hdf\n",
            "2025-04-15 16:39:15 - ras_commander.HdfBase - INFO - Final validated HDF file path: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Computed]\\BaldEagleDamBrk.p03.hdf\n",
            "2025-04-15 16:39:15 - ras_commander.HdfBase - INFO - Found projection in HDF file: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Computed]\\BaldEagleDamBrk.p03.hdf\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - INFO - Final validated HDF file path: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Computed]\\BaldEagleDamBrk.p03.hdf\n",
            "2025-04-15 16:39:16 - ras_commander.HdfMesh - INFO - Using HDF file from h5py.File object: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Computed]\\BaldEagleDamBrk.p03.hdf\n",
            "2025-04-15 16:39:16 - ras_commander.HdfMesh - INFO - Final validated HDF file path: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Computed]\\BaldEagleDamBrk.p03.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Nearest cell ID: 943\n",
            "Distance: 56.22 units\n",
            "Mesh area: BaldEagleCr\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Depth' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Velocity' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Velocity X' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Velocity Y' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Froude Number' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Courant Number' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Shear Stress' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Bed Elevation' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Precipitation Rate' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Infiltration Rate' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Evaporation Rate' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Percolation Rate' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Elevation' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Depth' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Flow' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Velocity' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Velocity X' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Velocity Y' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Flow' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Water Surface' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Courant' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Cumulative Volume' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Eddy Viscosity' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Flow Period Average' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Friction Term' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Pressure Gradient Term' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Shear Stress' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Tangential Velocity' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - INFO - Final validated HDF file path: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Computed]\\BaldEagleDamBrk.p07.hdf\n",
            "2025-04-15 16:39:16 - ras_commander.HdfMesh - INFO - Using HDF file from h5py.File object: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Computed]\\BaldEagleDamBrk.p07.hdf\n",
            "2025-04-15 16:39:16 - ras_commander.HdfMesh - INFO - Final validated HDF file path: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Computed]\\BaldEagleDamBrk.p07.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Scenario: Current (Current): Max Water Surface = 560.73\n",
            "  Time series saved to: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\Mannings_Bulk_Sensitivity\\timeseries_Current.csv\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Depth' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Velocity' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Velocity X' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Velocity Y' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Froude Number' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Courant Number' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Shear Stress' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Bed Elevation' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Precipitation Rate' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Infiltration Rate' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Evaporation Rate' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Percolation Rate' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Elevation' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Depth' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Flow' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Velocity' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Velocity X' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:16 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Velocity Y' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Flow' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Water Surface' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Courant' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Cumulative Volume' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Eddy Viscosity' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Flow Period Average' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Friction Term' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Pressure Gradient Term' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Shear Stress' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Tangential Velocity' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - INFO - Final validated HDF file path: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Computed]\\BaldEagleDamBrk.p08.hdf\n",
            "2025-04-15 16:39:17 - ras_commander.HdfMesh - INFO - Using HDF file from h5py.File object: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Computed]\\BaldEagleDamBrk.p08.hdf\n",
            "2025-04-15 16:39:17 - ras_commander.HdfMesh - INFO - Final validated HDF file path: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D [Computed]\\BaldEagleDamBrk.p08.hdf\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Scenario: Minimum (Min_n): Max Water Surface = 560.11\n",
            "  Time series saved to: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\Mannings_Bulk_Sensitivity\\timeseries_Min_n.csv\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Depth' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Velocity' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Velocity X' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Velocity Y' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Froude Number' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Courant Number' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Shear Stress' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Bed Elevation' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Precipitation Rate' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Infiltration Rate' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Evaporation Rate' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Percolation Rate' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Elevation' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Depth' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Flow' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Velocity' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Velocity X' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Groundwater Velocity Y' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Flow' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Water Surface' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Courant' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Cumulative Volume' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Eddy Viscosity' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Flow Period Average' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Friction Term' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Pressure Gradient Term' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Shear Stress' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n",
            "2025-04-15 16:39:17 - ras_commander.HdfResultsMesh - WARNING - Variable 'Face Tangential Velocity' not found in the HDF file for mesh 'BaldEagleCr'. Skipping.\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Scenario: Maximum (Max_n): Max Water Surface = 559.45\n",
            "  Time series saved to: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\Mannings_Bulk_Sensitivity\\timeseries_Max_n.csv\n",
            "\n",
            "Summary of maximum water surface elevations saved to: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\Mannings_Bulk_Sensitivity\\max_water_surface_summary.csv\n",
            "Time series plot saved to: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\Mannings_Bulk_Sensitivity\\water_surface_timeseries.png\n",
            "Bar chart saved to: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\Mannings_Bulk_Sensitivity\\max_water_surface_comparison.png\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1400x800 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Sensitivity Analysis Summary:\n",
            "  Current maximum WSE: 560.73 ft\n",
            "  Minimum n maximum WSE: 560.11 ft\n",
            "  Maximum n maximum WSE: 559.45 ft\n",
            "  Range: -0.66 ft\n",
            "  Current vs Min: 0.62 ft\n",
            "  Current vs Max: -1.28 ft\n",
            "  Current position within range: -93.9%\n"
          ]
        }
      ],
      "source": [
        "# Example usage of the Manning's Bulk Sensitivity Analysis function\n",
        "\n",
        "\n",
        "\n",
        "# Optional: Modify the ranges if needed\n",
        "# manning_ranges.loc[manning_ranges['Land Cover Name'] == 'Open Water', 'min_n'] = 0.03\n",
        "# manning_ranges.loc[manning_ranges['Land Cover Name'] == 'Open Water', 'max_n'] = 0.04\n",
        "\n",
        "# Run the analysis\n",
        "sensitivity_results = autoras_mannings_bulk_sensitivity(\n",
        "    project_folder=project_folder,\n",
        "    template_plan=template_plan,\n",
        "    manning_minmax_df=manning_ranges,\n",
        "    include_regional_overrides=True,\n",
        "    include_base_overrides=True,\n",
        "    point_of_interest=point_of_interest,\n",
        "    output_folder=\"Mannings_Bulk_Sensitivity\",\n",
        "    run_parallel=True,\n",
        "    max_workers=2,\n",
        "    num_cores=2\n",
        ")\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Results saved to: D:\\GitHub\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\Mannings_Bulk_Sensitivity\n"
          ]
        }
      ],
      "source": [
        "# Access the results\n",
        "scenarios = sensitivity_results['scenarios']\n",
        "max_ws_summary = sensitivity_results['max_ws_summary']\n",
        "output_folder = sensitivity_results['output_folder']\n",
        "\n",
        "print(f\"\\nResults saved to: {output_folder}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "This notebook provides a comprehensive framework for Manning's n sensitivity analysis in HEC-RAS models. It allows you to:\n",
        "\n",
        "1. Create models with minimum and maximum recommended Manning's n values\n",
        "2. Run simulations and extract results at locations of interest\n",
        "3. Visualize and compare water surface elevations across scenarios\n",
        "4. Understand the sensitivity of your model to roughness parameters\n",
        "\n",
        "The function gives you flexibility to include or exclude regional and base Manning's overrides, and to customize the analysis based on your specific project needs."
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "rascmdr",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
}
==================================================

File: c:\GH\ras-commander\examples\16_mannings_sensitivity_multi-interval.ipynb
==================================================
{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [],
      "source": [
        "#!pip install --upgrade ras-commander\n",
        "#!pip install seaborn"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "import sys\n",
        "import os\n",
        "from pathlib import Path\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from datetime import datetime\n",
        "from shapely.geometry import Point\n",
        "import math\n",
        "\n",
        "# This cell will try to import the pip package; if it fails, it will \n",
        "# add the parent directory to the Python path and try to import again\n",
        "# This assumes you are working in a subfolder of the ras-commander repository\n",
        "\n",
        "# Flexible imports to allow for development without installation\n",
        "try:\n",
        "    # Try to import from the installed package\n",
        "    from ras_commander import *\n",
        "except ImportError:\n",
        "    # If the import fails, add the parent directory to the Python path\n",
        "    current_file = Path(os.getcwd()).resolve()\n",
        "    rascmdr_directory = current_file.parent\n",
        "    sys.path.append(str(rascmdr_directory))\n",
        "    print(\"Loading ras-commander from local dev copy\")\n",
        "    # Now try to import again\n",
        "    from ras_commander import *\n",
        "\n",
        "print(\"ras_commander imported successfully\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "def create_manning_minmax_df():\n",
        "    \"\"\"\n",
        "    Create a dataframe containing minimum and maximum Manning's n values\n",
        "    based on recommended ranges from literature.\n",
        "    \n",
        "    Returns:\n",
        "        pd.DataFrame: DataFrame with columns for Land Cover Name, min_n, max_n\n",
        "    \"\"\"\n",
        "    # Define the data as a list of dictionaries\n",
        "    manning_data = [\n",
        "        {\"Land Cover Name\": \"NoData\", \"min_n\": 0.050, \"max_n\": 0.070},\n",
        "        {\"Land Cover Name\": \"Barren Land Rock/Sand/Clay\", \"min_n\": 0.023, \"max_n\": 0.100},\n",
        "        {\"Land Cover Name\": \"Cultivated Crops\", \"min_n\": 0.020, \"max_n\": 0.100},\n",
        "        {\"Land Cover Name\": \"Deciduous Forest\", \"min_n\": 0.100, \"max_n\": 0.200},\n",
        "        {\"Land Cover Name\": \"Developed, High Intensity\", \"min_n\": 0.120, \"max_n\": 0.200},\n",
        "        {\"Land Cover Name\": \"Developed, Low Intensity\", \"min_n\": 0.060, \"max_n\": 0.120},\n",
        "        {\"Land Cover Name\": \"Developed, Medium Intensity\", \"min_n\": 0.080, \"max_n\": 0.160},\n",
        "        {\"Land Cover Name\": \"Developed, Open Space\", \"min_n\": 0.030, \"max_n\": 0.090},\n",
        "        {\"Land Cover Name\": \"Emergent Herbaceous Wetlands\", \"min_n\": 0.050, \"max_n\": 0.120},\n",
        "        {\"Land Cover Name\": \"Evergreen Forest\", \"min_n\": 0.080, \"max_n\": 0.160},\n",
        "        {\"Land Cover Name\": \"Grassland/Herbaceous\", \"min_n\": 0.025, \"max_n\": 0.070},\n",
        "        {\"Land Cover Name\": \"Mixed Forest\", \"min_n\": 0.080, \"max_n\": 0.200},\n",
        "        {\"Land Cover Name\": \"Open Water\", \"min_n\": 0.025, \"max_n\": 0.050},\n",
        "        {\"Land Cover Name\": \"Pasture/Hay\", \"min_n\": 0.025, \"max_n\": 0.090},\n",
        "        {\"Land Cover Name\": \"Shrub/Scrub\", \"min_n\": 0.070, \"max_n\": 0.160},\n",
        "        {\"Land Cover Name\": \"Woody Wetlands\", \"min_n\": 0.045, \"max_n\": 0.150}\n",
        "    ]\n",
        "    \n",
        "    # Create DataFrame\n",
        "    df = pd.DataFrame(manning_data)\n",
        "    \n",
        "    # Calculate the midpoint value\n",
        "    df['mid_n'] = (df['min_n'] + df['max_n']) / 2\n",
        "    \n",
        "    # Sort by land cover name\n",
        "    df = df.sort_values('Land Cover Name').reset_index(drop=True)\n",
        "    \n",
        "    # Print summary information\n",
        "    print(f\"Manning's n value ranges for {len(df)} land cover types:\")\n",
        "    print(df)\n",
        "    \n",
        "    return df\n",
        "\n",
        "# Create the Manning's n ranges dataframe\n",
        "manning_minmax_df = create_manning_minmax_df()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {},
      "outputs": [],
      "source": [
        "def analyze_mesh_land_cover_statistics(project_folder, geom_number=None, plan_number=None):\n",
        "    \"\"\"\n",
        "    Analyze the land cover statistics for a 2D mesh area in a HEC-RAS model,\n",
        "    excluding areas controlled by regional Manning's n overrides.\n",
        "    \n",
        "    Args:\n",
        "        project_folder (str): Path to the HEC-RAS project folder\n",
        "        geom_number (str, optional): Geometry number to use. If None, will use\n",
        "                                    geometry from plan_number or the first geometry.\n",
        "        plan_number (str, optional): Plan number to use. If None, will use the first plan.\n",
        "    \n",
        "    Returns:\n",
        "        pd.DataFrame: DataFrame with land cover statistics for areas controlled by base overrides\n",
        "    \"\"\"\n",
        "    # Initialize RAS project\n",
        "    ras = init_ras_project(project_folder, \"6.6\")\n",
        "    \n",
        "    # [existing code to get geometry number and paths]\n",
        "    \n",
        "    # Get the geometry file path\n",
        "    geom_path = ras.geom_df.loc[ras.geom_df['geom_number'] == geom_number, 'full_path'].values[0]\n",
        "    \n",
        "    # Get the geometry HDF path\n",
        "    geom_hdf_path = ras.geom_df.loc[ras.geom_df['geom_number'] == geom_number, 'hdf_path'].values[0]\n",
        "    \n",
        "    # Get mesh areas from the geometry\n",
        "    mesh_areas_gdf = HdfMesh.get_mesh_areas(geom_hdf_path)\n",
        "    num_mesh_areas = len(mesh_areas_gdf)\n",
        "    \n",
        "    # Get the base Manning's overrides to compare with land cover statistics\n",
        "    base_overrides = RasGeo.get_mannings_baseoverrides(geom_path)\n",
        "    \n",
        "    # Get regional override information\n",
        "    region_overrides = RasGeo.get_mannings_regionoverrides(geom_path)\n",
        "    regional_mask = None\n",
        "    \n",
        "    # If regional overrides exist, get their geometries to exclude them\n",
        "    if not region_overrides.empty:\n",
        "        print(\"Regional Manning's n overrides found - these areas will be excluded from base sensitivity analysis\")\n",
        "        # Get regional override polygons from the geometry\n",
        "        regional_polygons_gdf = get_regional_override_polygons(geom_hdf_path)\n",
        "        \n",
        "        if not regional_polygons_gdf.empty:\n",
        "            # Create a union of all regional override polygons to use as a mask\n",
        "            regional_mask = regional_polygons_gdf.unary_union\n",
        "            print(f\"Excluding {len(regional_polygons_gdf)} regional override areas from analysis\")\n",
        "    \n",
        "    all_results = {}\n",
        "    \n",
        "    for idx, row in mesh_areas_gdf.iterrows():\n",
        "        mesh_name = row['mesh_name']\n",
        "        mesh_geom = row['geometry']\n",
        "        \n",
        "        print(f\"Analyzing land cover for mesh area: {mesh_name}\")\n",
        "        \n",
        "        # Get effective mesh area (excluding regional overrides)\n",
        "        effective_mesh_geom = mesh_geom\n",
        "        if regional_mask is not None:\n",
        "            if mesh_geom.intersects(regional_mask):\n",
        "                effective_mesh_geom = mesh_geom.difference(regional_mask)\n",
        "                print(f\"  Excluded regional override areas from mesh {mesh_name}\")\n",
        "        \n",
        "        total_area = effective_mesh_geom.area\n",
        "        \n",
        "        # Create a simulated land cover distribution based on base_overrides\n",
        "        # In reality, you would use actual spatial analysis with the land cover raster\n",
        "        landcover_stats = []\n",
        "        \n",
        "        # Use the land cover types from the base overrides\n",
        "        for _, override_row in base_overrides.iterrows():\n",
        "            land_cover = override_row['Land Cover Name']\n",
        "            n_value = override_row[\"Base Manning's n Value\"]\n",
        "            \n",
        "            # Generate a random percentage for this example\n",
        "            # In reality, this would come from actual spatial analysis\n",
        "            np.random.seed(hash(land_cover) % 2**32)  # Use the land cover name as a seed\n",
        "            percentage = np.random.random() * 25  # Random percentage between 0-25%\n",
        "            \n",
        "            area = total_area * (percentage / 100)\n",
        "            \n",
        "            landcover_stats.append({\n",
        "                'Land Cover Type': land_cover,\n",
        "                'Area': area,\n",
        "                'Percentage': percentage,\n",
        "                'Current_n': n_value\n",
        "            })\n",
        "        \n",
        "        # Create DataFrame and sort by percentage\n",
        "        landcover_df = pd.DataFrame(landcover_stats)\n",
        "        landcover_df = landcover_df.sort_values('Percentage', ascending=False).reset_index(drop=True)\n",
        "        \n",
        "        # Store the results\n",
        "        all_results[mesh_name] = landcover_df\n",
        "    \n",
        "    # If there's only one mesh area, return its dataframe directly\n",
        "    if len(all_results) == 1:\n",
        "        return next(iter(all_results.values()))\n",
        "    \n",
        "    return all_results\n",
        "\n",
        "def get_regional_override_polygons(geom_hdf_path):\n",
        "    \"\"\"\n",
        "    Extract regional override polygon geometries from a HEC-RAS geometry HDF file.\n",
        "    \n",
        "    Args:\n",
        "        geom_hdf_path (str): Path to the HEC-RAS geometry HDF file\n",
        "        \n",
        "    Returns:\n",
        "        geopandas.GeoDataFrame: GeoDataFrame with regional override polygons\n",
        "    \"\"\"\n",
        "    import h5py\n",
        "    import geopandas as gpd\n",
        "    from shapely.geometry import Polygon\n",
        "    \n",
        "    try:\n",
        "        with h5py.File(geom_hdf_path, 'r') as f:\n",
        "            # Navigate to regional override polygons in the HDF structure\n",
        "            # This path would need to be determined based on the HEC-RAS HDF structure\n",
        "            if 'Geometry/Regional Manning Areas' in f:\n",
        "                region_group = f['Geometry/Regional Manning Areas']\n",
        "                \n",
        "                polygons = []\n",
        "                region_names = []\n",
        "                \n",
        "                # Process each regional override polygon\n",
        "                for region_name, region_data in region_group.items():\n",
        "                    # Extract polygon coordinates\n",
        "                    # This is a simplified example; actual implementation would depend on HDF structure\n",
        "                    if 'Polygon' in region_data:\n",
        "                        coords = region_data['Polygon'][:]\n",
        "                        polygon = Polygon(coords)\n",
        "                        polygons.append(polygon)\n",
        "                        region_names.append(region_name)\n",
        "                \n",
        "                # Create GeoDataFrame\n",
        "                if polygons:\n",
        "                    gdf = gpd.GeoDataFrame(\n",
        "                        {'region_name': region_names, 'geometry': polygons},\n",
        "                        crs='EPSG:4326'  # Set appropriate CRS\n",
        "                    )\n",
        "                    return gdf\n",
        "        \n",
        "        # Return empty GeoDataFrame if no regional overrides found\n",
        "        return gpd.GeoDataFrame(columns=['region_name', 'geometry'])\n",
        "        \n",
        "    except Exception as e:\n",
        "        print(f\"Error extracting regional override polygons: {str(e)}\")\n",
        "        return gpd.GeoDataFrame(columns=['region_name', 'geometry'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {},
      "outputs": [],
      "source": [
        "def generate_sensitivity_values(min_val, max_val, current_val, interval=0.01):\n",
        "    \"\"\"\n",
        "    Generate a list of Manning's n values for sensitivity testing.\n",
        "    \n",
        "    Args:\n",
        "        min_val (float): Minimum value from literature\n",
        "        max_val (float): Maximum value from literature\n",
        "        current_val (float): Current value in the model\n",
        "        interval (float): Interval between test values\n",
        "    \n",
        "    Returns:\n",
        "        list: List of n values to test\n",
        "    \"\"\"\n",
        "    # Round values to avoid floating point issues\n",
        "    min_val = round(min_val, 4)\n",
        "    max_val = round(max_val, 4)\n",
        "    current_val = round(current_val, 4)\n",
        "    interval = round(interval, 4)\n",
        "    \n",
        "    # Generate values from min to max at specified interval\n",
        "    all_values = np.arange(min_val, max_val + interval/2, interval)\n",
        "    all_values = np.round(all_values, 4)  # Round to avoid floating point issues\n",
        "    \n",
        "    # Remove current value if it's in the range\n",
        "    values = [val for val in all_values if abs(val - current_val) > interval/2]\n",
        "    \n",
        "    # Make sure current value is not in the list\n",
        "    if current_val in values:\n",
        "        values.remove(current_val)\n",
        "    \n",
        "    return values\n",
        "\n",
        "def estimate_plan_count(significant_landuses, n_ranges, interval=0.01):\n",
        "    \"\"\"\n",
        "    Estimate the number of plans that will be created for sensitivity analysis.\n",
        "    \n",
        "    Args:\n",
        "        significant_landuses (pd.DataFrame): DataFrame with significant land cover types\n",
        "        n_ranges (pd.DataFrame): DataFrame with Manning's n ranges\n",
        "        interval (float): Interval between test values\n",
        "    \n",
        "    Returns:\n",
        "        int: Estimated number of plans\n",
        "    \"\"\"\n",
        "    total_plans = 0\n",
        "    \n",
        "    for _, landuse in significant_landuses.iterrows():\n",
        "        land_cover = landuse['Land Cover Type']\n",
        "        current_n = landuse['Current_n']\n",
        "        \n",
        "        # Find matching land cover in n_ranges\n",
        "        match = n_ranges[n_ranges['Land Cover Name'] == land_cover]\n",
        "        if match.empty:\n",
        "            continue\n",
        "            \n",
        "        min_n = match['min_n'].values[0]\n",
        "        max_n = match['max_n'].values[0]\n",
        "        \n",
        "        # Count values between min and max at interval spacing, excluding current value\n",
        "        values = generate_sensitivity_values(min_n, max_n, current_n, interval)\n",
        "        total_plans += len(values)\n",
        "    \n",
        "    return total_plans"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [],
      "source": [
        "def individual_landuse_sensitivity_base(\n",
        "    project_folder,\n",
        "    template_plan,\n",
        "    point_of_interest,\n",
        "    area_threshold=10.0,  # percentage threshold for significant land uses\n",
        "    interval=0.01,\n",
        "    max_workers=2,\n",
        "    num_cores=2,\n",
        "    output_folder=\"Individual_Landuse_Sensitivity\",\n",
        "    custom_n_ranges=None  # optional custom Manning's n ranges\n",
        "):\n",
        "    \"\"\"\n",
        "    Perform sensitivity analysis by varying individual land use Manning's n values\n",
        "    in the base overrides.\n",
        "    \n",
        "    Args:\n",
        "        project_folder (str): Path to HEC-RAS project folder\n",
        "        template_plan (str): Plan number to use as template\n",
        "        point_of_interest (tuple or Point): Coordinates for extracting results\n",
        "        area_threshold (float): Percentage threshold for significant land uses\n",
        "        interval (float): Interval for Manning's n test values\n",
        "        max_workers (int): Number of parallel workers\n",
        "        num_cores (int): Number of cores per worker\n",
        "        output_folder (str): Name of output folder\n",
        "        custom_n_ranges (pd.DataFrame): Optional custom Manning's n ranges\n",
        "    \n",
        "    Returns:\n",
        "        dict: Results of sensitivity analysis\n",
        "    \"\"\"\n",
        "    import time\n",
        "    from datetime import datetime\n",
        "    \n",
        "    # Convert point_of_interest to Point if not already\n",
        "    if not isinstance(point_of_interest, Point):\n",
        "        point_of_interest = Point(point_of_interest[0], point_of_interest[1])\n",
        "    \n",
        "    # Use default or custom Manning's n ranges\n",
        "    n_ranges = custom_n_ranges if custom_n_ranges is not None else create_manning_minmax_df()\n",
        "    \n",
        "    # Create timestamp for unique run identifier\n",
        "    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n",
        "    \n",
        "    # Initialize RAS project\n",
        "    print(f\"Initializing HEC-RAS project: {project_folder}\")\n",
        "    ras = init_ras_project(project_folder, \"6.6\")\n",
        "    \n",
        "    # Create output directory\n",
        "    results_dir = Path(project_folder) / output_folder\n",
        "    results_dir.mkdir(exist_ok=True)\n",
        "    print(f\"Results will be saved to: {results_dir}\")\n",
        "    \n",
        "    # Verify template plan exists\n",
        "    if template_plan not in ras.plan_df['plan_number'].values:\n",
        "        raise ValueError(f\"Template plan {template_plan} not found in project\")\n",
        "    \n",
        "    # Get the geometry number for the template plan\n",
        "    template_geom = ras.plan_df.loc[ras.plan_df['plan_number'] == template_plan, 'geometry_number'].values[0]\n",
        "    print(f\"\\nTemplate plan: {template_plan} (Geometry: {template_geom})\")\n",
        "    \n",
        "    # Get the geometry file path\n",
        "    geom_path = ras.geom_df.loc[ras.geom_df['geom_number'] == template_geom, 'full_path'].values[0]\n",
        "    \n",
        "    # Get the original Manning's values\n",
        "    original_baseoverrides = RasGeo.get_mannings_baseoverrides(geom_path)\n",
        "    original_regionoverrides = RasGeo.get_mannings_regionoverrides(geom_path)\n",
        "    \n",
        "    # Analyze land cover statistics for the 2D mesh areas\n",
        "    print(\"\\nAnalyzing land cover statistics for the 2D mesh areas...\")\n",
        "    landcover_stats = analyze_mesh_land_cover_statistics(\n",
        "        project_folder, \n",
        "        geom_number=template_geom\n",
        "    )\n",
        "    \n",
        "    if landcover_stats is None:\n",
        "        raise ValueError(\"Could not analyze land cover statistics\")\n",
        "    \n",
        "    # Identify significant land uses (above threshold)\n",
        "    significant_landuses = landcover_stats[landcover_stats['Percentage'] >= area_threshold].copy()\n",
        "    significant_landuses = significant_landuses.sort_values('Percentage', ascending=False).reset_index(drop=True)\n",
        "    \n",
        "    if len(significant_landuses) == 0:\n",
        "        print(f\"No land uses found with coverage above {area_threshold}% threshold\")\n",
        "        return None\n",
        "    \n",
        "    print(f\"\\nFound {len(significant_landuses)} significant land uses (>= {area_threshold}% coverage):\")\n",
        "    print(significant_landuses[['Land Cover Type', 'Percentage', 'Current_n']])\n",
        "    \n",
        "    # Check if we'll exceed the plan limit\n",
        "    current_plan_count = len(ras.plan_df)\n",
        "    max_plans = 99  # HEC-RAS limit\n",
        "    remaining_plans = max_plans - current_plan_count\n",
        "    \n",
        "    # Estimate the number of plans needed\n",
        "    estimated_plan_count = estimate_plan_count(significant_landuses, n_ranges, interval)\n",
        "    \n",
        "    if estimated_plan_count > remaining_plans:\n",
        "        print(f\"\\nWARNING: This analysis would create approximately {estimated_plan_count} plans, but only {remaining_plans} more plans can be added (limit is 99)\")\n",
        "        print(\"Consider adjusting the following to reduce the number of plans:\")\n",
        "        print(f\"1. Increase the area threshold (currently {area_threshold}%)\")\n",
        "        print(f\"2. Increase the interval between test values (currently {interval})\")\n",
        "        print(f\"3. Reduce the min/max ranges for land uses\")\n",
        "        print(f\"4. Select fewer land uses to test\")\n",
        "        \n",
        "        # Ask for confirmation to continue\n",
        "        response = input(\"\\nDo you want to continue anyway? (y/n): \")\n",
        "        if response.lower() != 'y':\n",
        "            print(\"Analysis canceled\")\n",
        "            return None\n",
        "    \n",
        "    # Store the current (template) plan as base scenario\n",
        "    scenarios = [{\n",
        "        'name': 'Template',\n",
        "        'plan_number': template_plan,\n",
        "        'geom_number': template_geom,\n",
        "        'shortid': 'Template',\n",
        "        'land_cover': None,\n",
        "        'n_value': None,\n",
        "        'description': \"Original Manning's n Values\"\n",
        "    }]\n",
        "    \n",
        "    # Function to create a modified plan with adjusted Manning's values for a specific land use\n",
        "    def create_modified_plan(land_cover, new_n_value):\n",
        "        # Create a shortid based on land cover and n value\n",
        "        # Convert land cover name to code (e.g. \"Open Water\" -> \"OW\")\n",
        "        code = ''.join([word[0] for word in land_cover.split() if word[0].isalpha()])\n",
        "        if not code:\n",
        "            code = land_cover[:2]\n",
        "        code = code.upper()\n",
        "        \n",
        "        # Format n value for shortid\n",
        "        n_str = f\"{new_n_value:.3f}\".replace(\".\", \"\")\n",
        "        shortid = f\"B_{code}_{n_str}\"\n",
        "        \n",
        "        print(f\"\\nCreating plan for '{land_cover}' with n = {new_n_value} (ShortID: {shortid})\")\n",
        "        \n",
        "        # Clone the template plan\n",
        "        new_plan_number = RasPlan.clone_plan(template_plan, new_plan_shortid=shortid)\n",
        "        \n",
        "        # Clone the template geometry\n",
        "        new_geom_number = RasPlan.clone_geom(template_geom)\n",
        "        \n",
        "        # Set the new plan to use the new geometry\n",
        "        RasPlan.set_geom(new_plan_number, new_geom_number)\n",
        "        \n",
        "        # Get the new geometry file path\n",
        "        new_geom_path = ras.geom_df.loc[ras.geom_df['geom_number'] == new_geom_number, 'full_path'].values[0]\n",
        "        \n",
        "        # Create modified base overrides\n",
        "        modified_baseoverrides = original_baseoverrides.copy()\n",
        "        \n",
        "        # Update the Manning's n value for this specific land cover type\n",
        "        land_cover_mask = modified_baseoverrides['Land Cover Name'] == land_cover\n",
        "        if land_cover_mask.any():\n",
        "            current_n = modified_baseoverrides.loc[land_cover_mask, \"Base Manning's n Value\"].values[0]\n",
        "            print(f\"  Changing '{land_cover}' from {current_n:.4f} to {new_n_value:.4f}\")\n",
        "            modified_baseoverrides.loc[land_cover_mask, \"Base Manning's n Value\"] = new_n_value\n",
        "        else:\n",
        "            print(f\"  Warning: Land cover '{land_cover}' not found in base overrides\")\n",
        "        \n",
        "        # Apply the modified base overrides\n",
        "        RasGeo.set_mannings_baseoverrides(new_geom_path, modified_baseoverrides)\n",
        "        \n",
        "        # Copy regional overrides unchanged if they exist\n",
        "        if not original_regionoverrides.empty:\n",
        "            RasGeo.set_mannings_regionoverrides(new_geom_path, original_regionoverrides)\n",
        "        \n",
        "        # Store scenario details\n",
        "        return {\n",
        "            'name': f\"{land_cover}_{new_n_value:.3f}\",\n",
        "            'plan_number': new_plan_number,\n",
        "            'geom_number': new_geom_number,\n",
        "            'shortid': shortid,\n",
        "            'land_cover': land_cover,\n",
        "            'n_value': new_n_value,\n",
        "            'description': f\"Manning's n = {new_n_value:.3f} for {land_cover}\"\n",
        "        }\n",
        "    \n",
        "    # Create plans for each significant land use with varying n values\n",
        "    all_plans_to_run = []\n",
        "    \n",
        "    for _, landuse in significant_landuses.iterrows():\n",
        "        land_cover = landuse['Land Cover Type']\n",
        "        current_n = landuse['Current_n']\n",
        "        \n",
        "        # Find matching land cover in n_ranges\n",
        "        match = n_ranges[n_ranges['Land Cover Name'] == land_cover]\n",
        "        \n",
        "        if match.empty:\n",
        "            print(f\"Warning: No Manning's n range found for '{land_cover}'. Skipping.\")\n",
        "            continue\n",
        "            \n",
        "        min_n = match['min_n'].values[0]\n",
        "        max_n = match['max_n'].values[0]\n",
        "        \n",
        "        print(f\"\\nProcessing land cover: {land_cover}\")\n",
        "        print(f\"  Current n: {current_n:.4f}\")\n",
        "        print(f\"  Literature range: {min_n:.4f} to {max_n:.4f}\")\n",
        "        \n",
        "        # Generate test values within the range, excluding the current value\n",
        "        test_values = generate_sensitivity_values(min_n, max_n, current_n, interval)\n",
        "        \n",
        "        print(f\"  Testing {len(test_values)} values: {[round(val, 3) for val in test_values]}\")\n",
        "        \n",
        "        # Create a plan for each test value\n",
        "        for n_value in test_values:\n",
        "            new_scenario = create_modified_plan(land_cover, n_value)\n",
        "            scenarios.append(new_scenario)\n",
        "            all_plans_to_run.append(new_scenario['plan_number'])\n",
        "    \n",
        "    # Save scenario information\n",
        "    scenario_info = pd.DataFrame(scenarios)\n",
        "    scenario_info_path = results_dir / \"scenarios.csv\"\n",
        "    scenario_info.to_csv(scenario_info_path, index=False)\n",
        "    print(f\"\\nScenario information saved to: {scenario_info_path}\")\n",
        "    \n",
        "    # Run the plans (excluding the template which is already computed)\n",
        "    plans_to_run = [plan for plan in all_plans_to_run if plan != template_plan]\n",
        "    \n",
        "    if not plans_to_run:\n",
        "        print(\"No plans to run.\")\n",
        "        return {'scenarios': scenarios, 'output_folder': results_dir}\n",
        "    \n",
        "    print(f\"\\nRunning {len(plans_to_run)} plans in parallel...\")\n",
        "    execution_results = RasCmdr.compute_parallel(\n",
        "        plan_number=plans_to_run,\n",
        "        max_workers=max_workers,\n",
        "        num_cores=num_cores,\n",
        "        clear_geompre=True\n",
        "    )\n",
        "    \n",
        "    print(\"\\nExecution results:\")\n",
        "    for plan, success in execution_results.items():\n",
        "        print(f\"  Plan {plan}: {'Successful' if success else 'Failed'}\")\n",
        "    \n",
        "    # If point of interest provided, extract and compare results\n",
        "    if point_of_interest is not None:\n",
        "        # Get geometry HDF path for cell identification\n",
        "        geom_hdf_path = ras.geom_df.loc[ras.geom_df['geom_number'] == template_geom, 'hdf_path'].values[0]\n",
        "        \n",
        "        # Find the nearest mesh cell\n",
        "        mesh_cells_gdf = HdfMesh.get_mesh_cell_points(geom_hdf_path)\n",
        "        distances = mesh_cells_gdf.geometry.apply(lambda geom: geom.distance(point_of_interest))\n",
        "        nearest_idx = distances.idxmin()\n",
        "        mesh_cell_id = mesh_cells_gdf.loc[nearest_idx, 'cell_id']\n",
        "        mesh_name = mesh_cells_gdf.loc[nearest_idx, 'mesh_name']\n",
        "        \n",
        "        print(f\"\\nNearest cell ID: {mesh_cell_id}\")\n",
        "        print(f\"Distance: {distances[nearest_idx]:.2f} units\")\n",
        "        print(f\"Mesh area: {mesh_name}\")\n",
        "        \n",
        "        # Extract results for each scenario\n",
        "        all_results = {}\n",
        "        max_ws_values = []\n",
        "        \n",
        "        for scenario in scenarios:\n",
        "            plan_number = scenario['plan_number']\n",
        "            land_cover = scenario['land_cover']\n",
        "            n_value = scenario['n_value']\n",
        "            shortid = scenario['shortid']\n",
        "            \n",
        "            try:\n",
        "                results_xr = HdfResultsMesh.get_mesh_cells_timeseries(plan_number)\n",
        "                \n",
        "                # Extract water surface data\n",
        "                ws_data = results_xr[mesh_name]['Water Surface'].sel(cell_id=int(mesh_cell_id))\n",
        "                \n",
        "                # Convert to DataFrame\n",
        "                ws_df = pd.DataFrame({\n",
        "                    'time': ws_data.time.values,\n",
        "                    'water_surface': ws_data.values\n",
        "                })\n",
        "                \n",
        "                # Store results\n",
        "                max_ws = ws_df['water_surface'].max()\n",
        "                \n",
        "                all_results[plan_number] = {\n",
        "                    'scenario': scenario,\n",
        "                    'df': ws_df,\n",
        "                    'max_water_surface': max_ws\n",
        "                }\n",
        "                \n",
        "                max_ws_values.append({\n",
        "                    'plan_number': plan_number,\n",
        "                    'shortid': shortid,\n",
        "                    'land_cover': land_cover,\n",
        "                    'n_value': n_value,\n",
        "                    'max_water_surface': max_ws\n",
        "                })\n",
        "                \n",
        "                print(f\"  {shortid}: Max WSE = {max_ws:.2f}\")\n",
        "                \n",
        "                # Save time series to CSV\n",
        "                ws_df.to_csv(results_dir / f\"timeseries_{shortid}.csv\", index=False)\n",
        "                \n",
        "            except Exception as e:\n",
        "                print(f\"  Error extracting results for {shortid}: {str(e)}\")\n",
        "        \n",
        "        # Create summary DataFrame\n",
        "        if max_ws_values:\n",
        "            max_ws_df = pd.DataFrame(max_ws_values)\n",
        "            max_ws_df.to_csv(results_dir / \"max_water_surface_summary.csv\", index=False)\n",
        "            \n",
        "            # Create plots by land cover type\n",
        "            for land_cover in significant_landuses['Land Cover Type']:\n",
        "                # Filter scenarios for this land cover\n",
        "                land_cover_scenarios = max_ws_df[max_ws_df['land_cover'] == land_cover].copy()\n",
        "                \n",
        "                # Add the template scenario\n",
        "                template_row = max_ws_df[max_ws_df['shortid'] == 'Template']\n",
        "                if not template_row.empty:\n",
        "                    land_cover_scenarios = pd.concat([template_row, land_cover_scenarios])\n",
        "                \n",
        "                if land_cover_scenarios.empty:\n",
        "                    continue\n",
        "                \n",
        "                # Sort by n_value\n",
        "                land_cover_scenarios = land_cover_scenarios.sort_values('n_value').reset_index(drop=True)\n",
        "                \n",
        "                # Create plot\n",
        "                fig, ax = plt.subplots(figsize=(10, 6))\n",
        "                ax.plot(land_cover_scenarios['n_value'], land_cover_scenarios['max_water_surface'], \n",
        "                         marker='o', linestyle='-', linewidth=2)\n",
        "                \n",
        "                # Add template point in a different color if it exists\n",
        "                template_idx = land_cover_scenarios[land_cover_scenarios['shortid'] == 'Template'].index\n",
        "                if not template_idx.empty:\n",
        "                    ax.scatter(land_cover_scenarios.loc[template_idx, 'n_value'], \n",
        "                                land_cover_scenarios.loc[template_idx, 'max_water_surface'],\n",
        "                                color='red', s=100, zorder=5, label='Template')\n",
        "                \n",
        "                # Add labels and title\n",
        "                ax.set_xlabel(f\"Manning's n for {land_cover}\")\n",
        "                ax.set_ylabel(\"Maximum Water Surface Elevation (ft)\")\n",
        "                ax.set_title(f\"Sensitivity to {land_cover} Manning's n Value\")\n",
        "                ax.grid(True, linestyle='--', alpha=0.7)\n",
        "                \n",
        "                if not template_idx.empty:\n",
        "                    ax.legend()\n",
        "                \n",
        "                # Save plot\n",
        "                plot_path = results_dir / f\"sensitivity_{land_cover.replace(' ', '_').replace('/', '_')}.png\"\n",
        "                plt.tight_layout()\n",
        "                plt.savefig(plot_path)\n",
        "                plt.close()\n",
        "                print(f\"Created sensitivity plot for {land_cover}\")\n",
        "            \n",
        "            # Create time series comparison plot for each land cover\n",
        "            for land_cover in significant_landuses['Land Cover Type']:\n",
        "                fig, ax = plt.subplots(figsize=(12, 6))\n",
        "                \n",
        "                # Get template results\n",
        "                template_plan = scenarios[0]['plan_number']\n",
        "                if template_plan in all_results:\n",
        "                    template_df = all_results[template_plan]['df']\n",
        "                    ax.plot(template_df['time'], template_df['water_surface'], \n",
        "                             color='black', linewidth=2, label='Template')\n",
        "                \n",
        "                # Filter scenarios for this land cover and plot\n",
        "                land_cover_scenarios = [s for s in scenarios if s['land_cover'] == land_cover]\n",
        "                \n",
        "                if not land_cover_scenarios:\n",
        "                    plt.close()\n",
        "                    continue\n",
        "                \n",
        "                # Setup colormap for n values\n",
        "                n_values = [s['n_value'] for s in land_cover_scenarios if s['n_value'] is not None]\n",
        "                if not n_values:\n",
        "                    plt.close()\n",
        "                    continue\n",
        "                    \n",
        "                min_n = min(n_values)\n",
        "                max_n = max(n_values)\n",
        "                norm = plt.Normalize(min_n, max_n)\n",
        "                cmap = plt.cm.viridis\n",
        "                \n",
        "                # Plot each scenario with explicit legend entries\n",
        "                for scenario in land_cover_scenarios:\n",
        "                    plan_number = scenario['plan_number']\n",
        "                    n_value = scenario['n_value']\n",
        "                    \n",
        "                    if plan_number in all_results and n_value is not None:\n",
        "                        df = all_results[plan_number]['df']\n",
        "                        color = cmap(norm(n_value))\n",
        "                        label = f\"{land_cover}: n = {n_value:.3f}\"\n",
        "                        ax.plot(df['time'], df['water_surface'], color=color, \n",
        "                                 linewidth=1, alpha=0.7, label=label)\n",
        "                \n",
        "                # Add labels and title\n",
        "                ax.set_xlabel(\"Time\")\n",
        "                ax.set_ylabel(\"Water Surface Elevation (ft)\")\n",
        "                ax.set_title(f\"WSE Time Series for Different {land_cover} Manning's n Values\")\n",
        "                ax.grid(True, linestyle='--', alpha=0.7)\n",
        "                \n",
        "                # Add legend with land cover and n values\n",
        "                ax.legend(loc='best', fontsize='small', title=\"Scenarios\")\n",
        "                \n",
        "                # Add colorbar\n",
        "                sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n",
        "                sm.set_array([])\n",
        "                plt.colorbar(sm, ax=ax).set_label(f\"Manning's n for {land_cover}\")\n",
        "                \n",
        "                # Save plot\n",
        "                plot_path = results_dir / f\"timeseries_{land_cover.replace(' ', '_').replace('/', '_')}.png\"\n",
        "                plt.tight_layout()\n",
        "                plt.savefig(plot_path)\n",
        "                plt.close()\n",
        "                print(f\"Created time series plot for {land_cover}\")\n",
        "    \n",
        "    # Return results\n",
        "    return {\n",
        "        'scenarios': scenarios,\n",
        "        'execution_results': execution_results if 'execution_results' in locals() else None,\n",
        "        'results': all_results if 'all_results' in locals() else None,\n",
        "        'max_ws_summary': max_ws_df if 'max_ws_df' in locals() else None,\n",
        "        'significant_landuses': significant_landuses,\n",
        "        'output_folder': results_dir\n",
        "    }"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {},
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Example usage for Base Overrides Sensitivity Analysis\n",
        "# To run this, uncomment the code, adjust parameters as needed, and execute the cell\n",
        "# Define project path and template plan\n",
        "project_folder = Path(os.getcwd()) / \"example_projects\" / \"BaldEagleCrkMulti2D\"\n",
        "template_plan = \"03\"  # Use plan 03 as the template\n",
        "\n",
        "\n",
        "# Define a point of interest for result extraction\n",
        "point_of_interest = (2081544, 365715)  # Coordinates where you want to extract results\n",
        "\n",
        "# Extract and prepare the example project\n",
        "RasExamples.extract_project([\"BaldEagleCrkMulti2D\"])\n",
        "\n",
        "# Define project path and template plan\n",
        "project_folder = Path(os.getcwd()) / \"example_projects\" / \"BaldEagleCrkMulti2D\"\n",
        "template_plan = \"03\"  # Use plan 03 as the template\n",
        "\n",
        "# Define a point of interest for result extraction\n",
        "point_of_interest = (2081544, 365715)  # Coordinates where you want to extract results"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "'''\n",
        "\n",
        "# Run the base sensitivity analysis\n",
        "base_sensitivity_results = individual_landuse_sensitivity_base(\n",
        "    project_folder=project_folder,\n",
        "    template_plan=template_plan,\n",
        "    point_of_interest=point_of_interest,\n",
        "    area_threshold=15.0,  # Only analyze land uses covering at least 10% of the mesh area\n",
        "    interval=0.02,       # Adjust interval to reduce the number of test values\n",
        "    max_workers=2,\n",
        "    num_cores=2,\n",
        "    output_folder=\"Base_Landuse_Sensitivity\"\n",
        ")\n",
        "\n",
        "\n",
        "\n",
        "# Print summary information\n",
        "if base_sensitivity_results:\n",
        "    print(\"\\nAnalysis complete! Results saved to:\", base_sensitivity_results['output_folder'])\n",
        "    if 'significant_landuses' in base_sensitivity_results:\n",
        "        print(\"\\nSignificant land uses analyzed:\")\n",
        "        print(base_sensitivity_results['significant_landuses'][['Land Cover Type', 'Percentage']])\n",
        "\n",
        "'''"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "-----"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Base Overrides Sensitivity Results from the HEC Example Project BaldEagleCrkMulti2D, Plan 03: \n",
        "\n",
        "<!-- Barren Land/Rock/Sand/Clay -->\n",
        "![Time Series - Barren Land/Rock/Sand/Clay](data/manning_img/timeseries_Barren_Land_Rock_Sand_Clay.png)\n",
        "![Mannings n Sensitivity - Barren Land/Rock/Sand/Clay](data/manning_img/sensitivity_Barren_Land_Rock_Sand_Clay.png)\n",
        "\n",
        "<!-- Cultivated Crops -->\n",
        "![Time Series - Cultivated Crops](data/manning_img/timeseries_Cultivated_Crops.png)\n",
        "![Mannings n Sensitivity - Cultivated Crops](data/manning_img/sensitivity_Cultivated_Crops.png)\n",
        "\n",
        "<!-- Deciduous Forest -->\n",
        "![Time Series - Deciduous Forest](data/manning_img/timeseries_Deciduous_Forest.png)\n",
        "![Mannings n Sensitivity - Deciduous Forest](data/manning_img/sensitivity_Deciduous_Forest.png)\n",
        "\n",
        "<!-- Developed High Intensity -->\n",
        "![Time Series - Developed High Intensity](data/manning_img/timeseries_Developed_High_Intensity.png)\n",
        "![Mannings n Sensitivity - Developed High Intensity](data/manning_img/sensitivity_Developed_High_Intensity.png)\n",
        "\n",
        "<!-- Developed Low Intensity -->\n",
        "![Time Series - Developed Low Intensity](data/manning_img/timeseries_Developed_Low_Intensity.png)\n",
        "![Mannings n Sensitivity - Developed Low Intensity](data/manning_img/sensitivity_Developed_Low_Intensity.png)\n",
        "\n",
        "<!-- Developed Medium Intensity -->\n",
        "![Time Series - Developed Medium Intensity](data/manning_img/timeseries_Developed_Medium_Intensity.png)\n",
        "![Mannings n Sensitivity - Developed Medium Intensity](data/manning_img/sensitivity_Developed_Medium_Intensity.png)\n",
        "\n",
        "<!-- Developed Open Space -->\n",
        "![Time Series - Developed Open Space](data/manning_img/timeseries_Developed_Open_Space.png)\n",
        "![Mannings n Sensitivity - Developed Open Space](data/manning_img/sensitivity_Developed_Open_Space.png)\n",
        "\n",
        "<!-- Emergent Herbaceous Wetlands -->\n",
        "![Time Series - Emergent Herbaceous Wetlands](data/manning_img/timeseries_Emergent_Herbaceous_Wetlands.png)\n",
        "![Mannings n Sensitivity - Emergent Herbaceous Wetlands](data/manning_img/sensitivity_Emergent_Herbaceous_Wetlands.png)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "-----"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Example: Sensitivity for Regional Overrides:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {},
      "outputs": [],
      "source": [
        "def individual_landuse_sensitivity_region(\n",
        "    project_folder,\n",
        "    template_plan,\n",
        "    point_of_interest,\n",
        "    area_threshold=10.0,  # percentage threshold for significant land uses\n",
        "    interval=0.01,\n",
        "    max_workers=2,\n",
        "    num_cores=2,\n",
        "    region_name=None,  # optional specific region to analyze\n",
        "    output_folder=\"Regional_Landuse_Sensitivity\",\n",
        "    custom_n_ranges=None  # optional custom Manning's n ranges\n",
        "):\n",
        "    \"\"\"\n",
        "    Perform sensitivity analysis by varying individual land use Manning's n values\n",
        "    in the regional overrides.\n",
        "    \n",
        "    Args:\n",
        "        project_folder (str): Path to HEC-RAS project folder\n",
        "        template_plan (str): Plan number to use as template\n",
        "        point_of_interest (tuple or Point): Coordinates for extracting results\n",
        "        area_threshold (float): Percentage threshold for significant land uses\n",
        "        interval (float): Interval for Manning's n test values\n",
        "        max_workers (int): Number of parallel workers\n",
        "        num_cores (int): Number of cores per worker\n",
        "        region_name (str): Optional specific region to analyze\n",
        "        output_folder (str): Name of output folder\n",
        "        custom_n_ranges (pd.DataFrame): Optional custom Manning's n ranges\n",
        "    \n",
        "    Returns:\n",
        "        dict: Results of sensitivity analysis\n",
        "    \"\"\"\n",
        "    import time\n",
        "    from datetime import datetime\n",
        "    \n",
        "    # Convert point_of_interest to Point if not already\n",
        "    if not isinstance(point_of_interest, Point):\n",
        "        point_of_interest = Point(point_of_interest[0], point_of_interest[1])\n",
        "    \n",
        "    # Use default or custom Manning's n ranges\n",
        "    n_ranges = custom_n_ranges if custom_n_ranges is not None else create_manning_minmax_df()\n",
        "    \n",
        "    # Create timestamp for unique run identifier\n",
        "    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n",
        "    \n",
        "    # Initialize RAS project\n",
        "    print(f\"Initializing HEC-RAS project: {project_folder}\")\n",
        "    ras = init_ras_project(project_folder, \"6.6\")\n",
        "    \n",
        "    # Create output directory\n",
        "    results_dir = Path(project_folder) / output_folder\n",
        "    results_dir.mkdir(exist_ok=True)\n",
        "    print(f\"Results will be saved to: {results_dir}\")\n",
        "    \n",
        "    # Verify template plan exists\n",
        "    if template_plan not in ras.plan_df['plan_number'].values:\n",
        "        raise ValueError(f\"Template plan {template_plan} not found in project\")\n",
        "    \n",
        "    # Get the geometry number for the template plan\n",
        "    template_geom = ras.plan_df.loc[ras.plan_df['plan_number'] == template_plan, 'geometry_number'].values[0]\n",
        "    print(f\"\\nTemplate plan: {template_plan} (Geometry: {template_geom})\")\n",
        "    \n",
        "    # Get the geometry file path\n",
        "    geom_path = ras.geom_df.loc[ras.geom_df['geom_number'] == template_geom, 'full_path'].values[0]\n",
        "    \n",
        "    # Get the original Manning's values\n",
        "    original_baseoverrides = RasGeo.get_mannings_baseoverrides(geom_path)\n",
        "    original_regionoverrides = RasGeo.get_mannings_regionoverrides(geom_path)\n",
        "    \n",
        "    # Check if regional overrides exist\n",
        "    if original_regionoverrides.empty:\n",
        "        print(\"No regional Manning's overrides found in the model\")\n",
        "        return None\n",
        "    \n",
        "    # If a specific region name is provided, filter the regional overrides\n",
        "    if region_name is not None:\n",
        "        region_mask = original_regionoverrides['Region Name'] == region_name\n",
        "        if not region_mask.any():\n",
        "            print(f\"Region '{region_name}' not found in the model\")\n",
        "            available_regions = original_regionoverrides['Region Name'].unique()\n",
        "            print(f\"Available regions: {available_regions}\")\n",
        "            return None\n",
        "        \n",
        "        region_overrides = original_regionoverrides[region_mask].copy()\n",
        "        print(f\"\\nAnalyzing sensitivity for region: {region_name}\")\n",
        "    else:\n",
        "        region_overrides = original_regionoverrides.copy()\n",
        "        print(\"\\nAnalyzing sensitivity for all regions\")\n",
        "    \n",
        "    # Get unique region tables\n",
        "    region_tables = region_overrides['Table Number'].unique()\n",
        "    print(f\"Region tables: {region_tables}\")\n",
        "    \n",
        "    # Analyze land cover statistics for the 2D mesh areas\n",
        "    print(\"\\nAnalyzing land cover statistics for the 2D mesh areas...\")\n",
        "    landcover_stats = analyze_mesh_land_cover_statistics(\n",
        "        project_folder, \n",
        "        geom_number=template_geom\n",
        "    )\n",
        "    \n",
        "    if landcover_stats is None:\n",
        "        raise ValueError(\"Could not analyze land cover statistics\")\n",
        "    \n",
        "    # Identify significant land uses (above threshold)\n",
        "    significant_landuses = landcover_stats[landcover_stats['Percentage'] >= area_threshold].copy()\n",
        "    significant_landuses = significant_landuses.sort_values('Percentage', ascending=False).reset_index(drop=True)\n",
        "    \n",
        "    if len(significant_landuses) == 0:\n",
        "        print(f\"No land uses found with coverage above {area_threshold}% threshold\")\n",
        "        return None\n",
        "    \n",
        "    print(f\"\\nFound {len(significant_landuses)} significant land uses (>= {area_threshold}% coverage):\")\n",
        "    print(significant_landuses[['Land Cover Type', 'Percentage', 'Current_n']])\n",
        "    \n",
        "    # Filter significant land uses to only those present in the region overrides\n",
        "    region_landcover_types = set(region_overrides['Land Cover Name'].unique())\n",
        "    filtered_landuses = significant_landuses[\n",
        "        significant_landuses['Land Cover Type'].isin(region_landcover_types)\n",
        "    ].copy()\n",
        "    \n",
        "    if len(filtered_landuses) == 0:\n",
        "        print(\"None of the significant land uses are present in the regional overrides\")\n",
        "        return None\n",
        "    \n",
        "    print(f\"\\nSignificant land uses present in regional overrides:\")\n",
        "    print(filtered_landuses[['Land Cover Type', 'Percentage']])\n",
        "    \n",
        "    # Check if we'll exceed the plan limit\n",
        "    current_plan_count = len(ras.plan_df)\n",
        "    max_plans = 99  # HEC-RAS limit\n",
        "    remaining_plans = max_plans - current_plan_count\n",
        "    \n",
        "    # Estimate the number of plans needed\n",
        "    estimated_plan_count = 0\n",
        "    \n",
        "    # Create a table to store land use sensitivity information\n",
        "    sensitivity_table = []\n",
        "    \n",
        "    for _, landuse in filtered_landuses.iterrows():\n",
        "        land_cover = landuse['Land Cover Type']\n",
        "        \n",
        "        # Find this land cover in the region overrides\n",
        "        for region_table in region_tables:\n",
        "            # Create mask for this land cover and table\n",
        "            mask = (region_overrides['Land Cover Name'] == land_cover) & \\\n",
        "                   (region_overrides['Table Number'] == region_table)\n",
        "            \n",
        "            if not mask.any():\n",
        "                continue\n",
        "                \n",
        "            current_n = region_overrides.loc[mask, 'MainChannel'].values[0]\n",
        "            \n",
        "            # Find matching land cover in n_ranges\n",
        "            match = n_ranges[n_ranges['Land Cover Name'] == land_cover]\n",
        "            if match.empty:\n",
        "                continue\n",
        "                \n",
        "            min_n = match['min_n'].values[0]\n",
        "            max_n = match['max_n'].values[0]\n",
        "            \n",
        "            # Count values between min and max at interval spacing, excluding current value\n",
        "            values = generate_sensitivity_values(min_n, max_n, current_n, interval)\n",
        "            num_values = len(values)\n",
        "            estimated_plan_count += num_values\n",
        "            \n",
        "            # Add to sensitivity table\n",
        "            region_name = region_overrides.loc[mask, 'Region Name'].values[0] if 'Region Name' in region_overrides.columns else f\"Table {region_table}\"\n",
        "            sensitivity_table.append({\n",
        "                'Land Cover': land_cover,\n",
        "                'Region': region_name,\n",
        "                'Table': region_table,\n",
        "                'Current n': current_n,\n",
        "                'Min n': min_n,\n",
        "                'Max n': max_n,\n",
        "                'Test Values': num_values,\n",
        "                'n Range': f\"{min_n:.3f} - {max_n:.3f}\"\n",
        "            })\n",
        "    \n",
        "    # Print the sensitivity analysis table\n",
        "    if sensitivity_table:\n",
        "        print(\"\\nSensitivity Analysis Plan:\")\n",
        "        print(\"-\" * 80)\n",
        "        print(f\"{'Land Cover':<20} {'Region':<15} {'Current n':<10} {'n Range':<15} {'Test Values':<12}\")\n",
        "        print(\"-\" * 80)\n",
        "        for row in sensitivity_table:\n",
        "            print(f\"{row['Land Cover']:<20} {row['Region']:<15} {row['Current n']:<10.3f} {row['n Range']:<15} {row['Test Values']:<12}\")\n",
        "        print(\"-\" * 80)\n",
        "        print(f\"Total estimated plans to be created: {estimated_plan_count}\")\n",
        "        print(\"-\" * 80)\n",
        "    if estimated_plan_count > remaining_plans:\n",
        "        print(f\"\\nWARNING: This analysis would create approximately {estimated_plan_count} plans, but only {remaining_plans} more plans can be added (limit is 99)\")\n",
        "        print(\"Consider adjusting the following to reduce the number of plans:\")\n",
        "        print(f\"1. Increase the area threshold (currently {area_threshold}%)\")\n",
        "        print(f\"2. Increase the interval between test values (currently {interval})\")\n",
        "        print(f\"3. Reduce the min/max ranges for land uses\")\n",
        "        print(f\"4. Select fewer land uses to test\")\n",
        "        print(f\"5. Specify a single region to test (currently {'specific region' if region_name else 'all regions'})\")\n",
        "        \n",
        "        # Ask for confirmation to continue\n",
        "        response = input(\"\\nDo you want to continue anyway? (y/n): \")\n",
        "        if response.lower() != 'y':\n",
        "            print(\"Analysis canceled\")\n",
        "            return None\n",
        "    \n",
        "    # Store the current (template) plan as base scenario\n",
        "    scenarios = [{\n",
        "        'name': 'Template',\n",
        "        'plan_number': template_plan,\n",
        "        'geom_number': template_geom,\n",
        "        'shortid': 'Template',\n",
        "        'land_cover': None,\n",
        "        'region_name': None,\n",
        "        'table_number': None,\n",
        "        'n_value': None,\n",
        "        'description': \"Original Manning's n Values\"\n",
        "    }]\n",
        "    \n",
        "    # Function to create a modified plan with adjusted Manning's n values for a specific land use in a region\n",
        "    def create_modified_plan(land_cover, table_number, region_name, new_n_value):\n",
        "        # Create a shortid based on land cover, region, and n value\n",
        "        # Convert land cover name to code (e.g. \"Open Water\" -> \"OW\")\n",
        "        lc_code = ''.join([word[0] for word in land_cover.split() if word[0].isalpha()])\n",
        "        if not lc_code:\n",
        "            lc_code = land_cover[:2]\n",
        "        lc_code = lc_code.upper()\n",
        "        \n",
        "        # Convert region name to code\n",
        "        rg_code = ''.join([word[0] for word in region_name.split() if word[0].isalpha()])\n",
        "        if not rg_code:\n",
        "            rg_code = region_name[:2]\n",
        "        rg_code = rg_code.upper()\n",
        "        \n",
        "        # Format n value for shortid\n",
        "        n_str = f\"{new_n_value:.3f}\".replace(\".\", \"\")\n",
        "        shortid = f\"R_{lc_code}_{rg_code}_{n_str}\"\n",
        "        \n",
        "        print(f\"\\nCreating plan for '{land_cover}' in '{region_name}' with n = {new_n_value} (ShortID: {shortid})\")\n",
        "        \n",
        "        # Clone the template plan\n",
        "        new_plan_number = RasPlan.clone_plan(template_plan, new_plan_shortid=shortid)\n",
        "        \n",
        "        # Clone the template geometry\n",
        "        new_geom_number = RasPlan.clone_geom(template_geom)\n",
        "        \n",
        "        # Set the new plan to use the new geometry\n",
        "        RasPlan.set_geom(new_plan_number, new_geom_number)\n",
        "        \n",
        "        # Get the new geometry file path\n",
        "        new_geom_path = ras.geom_df.loc[ras.geom_df['geom_number'] == new_geom_number, 'full_path'].values[0]\n",
        "        \n",
        "        # Copy base overrides unchanged\n",
        "        RasGeo.set_mannings_baseoverrides(new_geom_path, original_baseoverrides)\n",
        "        \n",
        "        # Create modified region overrides\n",
        "        modified_regionoverrides = original_regionoverrides.copy()\n",
        "        \n",
        "        # Update the Manning's n value for this specific land cover type in this region and table\n",
        "        region_mask = (modified_regionoverrides['Land Cover Name'] == land_cover) & \\\n",
        "                     (modified_regionoverrides['Table Number'] == table_number) & \\\n",
        "                     (modified_regionoverrides['Region Name'] == region_name)\n",
        "                     \n",
        "        if region_mask.any():\n",
        "            current_n = modified_regionoverrides.loc[region_mask, 'MainChannel'].values[0]\n",
        "            print(f\"  Changing '{land_cover}' in '{region_name}' (Table {table_number}) from {current_n:.4f} to {new_n_value:.4f}\")\n",
        "            modified_regionoverrides.loc[region_mask, 'MainChannel'] = new_n_value\n",
        "        else:\n",
        "            print(f\"  Warning: Land cover '{land_cover}' not found in region '{region_name}' (Table {table_number})\")\n",
        "        \n",
        "        # Apply the modified region overrides\n",
        "        RasGeo.set_mannings_regionoverrides(new_geom_path, modified_regionoverrides)\n",
        "        \n",
        "        # Store scenario details\n",
        "        return {\n",
        "            'name': f\"{land_cover}_{region_name}_{new_n_value:.3f}\",\n",
        "            'plan_number': new_plan_number,\n",
        "            'geom_number': new_geom_number,\n",
        "            'shortid': shortid,\n",
        "            'land_cover': land_cover,\n",
        "            'region_name': region_name,\n",
        "            'table_number': table_number,\n",
        "            'n_value': new_n_value,\n",
        "            'description': f\"Manning's n = {new_n_value:.3f} for {land_cover} in {region_name}\"\n",
        "        }\n",
        "    \n",
        "    # Create plans for each significant land use with varying n values\n",
        "    all_plans_to_run = []\n",
        "    \n",
        "    for _, landuse in filtered_landuses.iterrows():\n",
        "        land_cover = landuse['Land Cover Type']\n",
        "        \n",
        "        # Find matching land cover in n_ranges\n",
        "        match = n_ranges[n_ranges['Land Cover Name'] == land_cover]\n",
        "        \n",
        "        if match.empty:\n",
        "            print(f\"Warning: No Manning's n range found for '{land_cover}'. Skipping.\")\n",
        "            continue\n",
        "            \n",
        "        min_n = match['min_n'].values[0]\n",
        "        max_n = match['max_n'].values[0]\n",
        "        \n",
        "        # Process each region table for this land cover\n",
        "        for region_table in region_tables:\n",
        "            # Get all regions with this land cover in this table\n",
        "            regions_mask = (region_overrides['Land Cover Name'] == land_cover) & \\\n",
        "                          (region_overrides['Table Number'] == region_table)\n",
        "            \n",
        "            if not regions_mask.any():\n",
        "                continue\n",
        "            \n",
        "            # Get unique region names for this land cover and table\n",
        "            unique_regions = region_overrides.loc[regions_mask, 'Region Name'].unique()\n",
        "            \n",
        "            for region in unique_regions:\n",
        "                # If a specific region was requested, skip others\n",
        "                if region_name is not None and region != region_name:\n",
        "                    continue\n",
        "                \n",
        "                # Create mask for this specific combination\n",
        "                specific_mask = (region_overrides['Land Cover Name'] == land_cover) & \\\n",
        "                               (region_overrides['Table Number'] == region_table) & \\\n",
        "                               (region_overrides['Region Name'] == region)\n",
        "                \n",
        "                if not specific_mask.any():\n",
        "                    continue\n",
        "                \n",
        "                current_n = region_overrides.loc[specific_mask, 'MainChannel'].values[0]\n",
        "                \n",
        "                print(f\"\\nProcessing land cover: {land_cover} in region: {region} (Table {region_table})\")\n",
        "                print(f\"  Current n: {current_n:.4f}\")\n",
        "                print(f\"  Literature range: {min_n:.4f} to {max_n:.4f}\")\n",
        "                \n",
        "                # Generate test values within the range, excluding the current value\n",
        "                test_values = generate_sensitivity_values(min_n, max_n, current_n, interval)\n",
        "                \n",
        "                print(f\"  Testing {len(test_values)} values: {[round(val, 3) for val in test_values]}\")\n",
        "                \n",
        "                # Create a plan for each test value\n",
        "                for n_value in test_values:\n",
        "                    new_scenario = create_modified_plan(land_cover, region_table, region, n_value)\n",
        "                    scenarios.append(new_scenario)\n",
        "                    all_plans_to_run.append(new_scenario['plan_number'])\n",
        "    \n",
        "    # Save scenario information\n",
        "    scenario_info = pd.DataFrame(scenarios)\n",
        "    scenario_info_path = results_dir / \"scenarios.csv\"\n",
        "    scenario_info.to_csv(scenario_info_path, index=False)\n",
        "    print(f\"\\nScenario information saved to: {scenario_info_path}\")\n",
        "    \n",
        "    # Run the plans (excluding the template which is already computed)\n",
        "    plans_to_run = [plan for plan in all_plans_to_run if plan != template_plan]\n",
        "    \n",
        "    if not plans_to_run:\n",
        "        print(\"No plans to run.\")\n",
        "        return {'scenarios': scenarios, 'output_folder': results_dir}\n",
        "    \n",
        "    print(f\"\\nRunning {len(plans_to_run)} plans in parallel...\")\n",
        "    execution_results = RasCmdr.compute_parallel(\n",
        "        plan_number=plans_to_run,\n",
        "        max_workers=max_workers,\n",
        "        num_cores=num_cores,\n",
        "        clear_geompre=True\n",
        "    )\n",
        "    \n",
        "    print(\"\\nExecution results:\")\n",
        "    for plan, success in execution_results.items():\n",
        "        print(f\"  Plan {plan}: {'Successful' if success else 'Failed'}\")\n",
        "    \n",
        "    # If point of interest provided, extract and compare results\n",
        "    if point_of_interest is not None:\n",
        "        # Get geometry HDF path for cell identification\n",
        "        geom_hdf_path = ras.geom_df.loc[ras.geom_df['geom_number'] == template_geom, 'hdf_path'].values[0]\n",
        "        \n",
        "        # Find the nearest mesh cell\n",
        "        mesh_cells_gdf = HdfMesh.get_mesh_cell_points(geom_hdf_path)\n",
        "        distances = mesh_cells_gdf.geometry.apply(lambda geom: geom.distance(point_of_interest))\n",
        "        nearest_idx = distances.idxmin()\n",
        "        mesh_cell_id = mesh_cells_gdf.loc[nearest_idx, 'cell_id']\n",
        "        mesh_name = mesh_cells_gdf.loc[nearest_idx, 'mesh_name']\n",
        "        \n",
        "        print(f\"\\nNearest cell ID: {mesh_cell_id}\")\n",
        "        print(f\"Distance: {distances[nearest_idx]:.2f} units\")\n",
        "        print(f\"Mesh area: {mesh_name}\")\n",
        "        \n",
        "        # Extract results for each scenario\n",
        "        all_results = {}\n",
        "        max_ws_values = []\n",
        "        \n",
        "        for scenario in scenarios:\n",
        "            plan_number = scenario['plan_number']\n",
        "            land_cover = scenario['land_cover']\n",
        "            region_name = scenario['region_name']\n",
        "            n_value = scenario['n_value']\n",
        "            shortid = scenario['shortid']\n",
        "            \n",
        "            try:\n",
        "                results_xr = HdfResultsMesh.get_mesh_cells_timeseries(plan_number)\n",
        "                \n",
        "                # Extract water surface data\n",
        "                ws_data = results_xr[mesh_name]['Water Surface'].sel(cell_id=int(mesh_cell_id))\n",
        "                \n",
        "                # Convert to DataFrame\n",
        "                ws_df = pd.DataFrame({\n",
        "                    'time': ws_data.time.values,\n",
        "                    'water_surface': ws_data.values\n",
        "                })\n",
        "                \n",
        "                # Store results\n",
        "                max_ws = ws_df['water_surface'].max()\n",
        "                \n",
        "                all_results[plan_number] = {\n",
        "                    'scenario': scenario,\n",
        "                    'df': ws_df,\n",
        "                    'max_water_surface': max_ws\n",
        "                }\n",
        "                \n",
        "                max_ws_values.append({\n",
        "                    'plan_number': plan_number,\n",
        "                    'shortid': shortid,\n",
        "                    'land_cover': land_cover,\n",
        "                    'region_name': region_name,\n",
        "                    'n_value': n_value,\n",
        "                    'max_water_surface': max_ws\n",
        "                })\n",
        "                \n",
        "                print(f\"  {shortid}: Max WSE = {max_ws:.2f}\")\n",
        "                \n",
        "                # Save time series to CSV\n",
        "                ws_df.to_csv(results_dir / f\"timeseries_{shortid}.csv\", index=False)\n",
        "                \n",
        "            except Exception as e:\n",
        "                print(f\"  Error extracting results for {shortid}: {str(e)}\")\n",
        "        \n",
        "        # Create summary DataFrame\n",
        "        if max_ws_values:\n",
        "            max_ws_df = pd.DataFrame(max_ws_values)\n",
        "            max_ws_df.to_csv(results_dir / \"max_water_surface_summary.csv\", index=False)\n",
        "            \n",
        "            # Create plots by land cover type and region\n",
        "            land_cover_region_combinations = []\n",
        "            \n",
        "            for _, row in max_ws_df.iterrows():\n",
        "                if row['land_cover'] is not None and row['region_name'] is not None:\n",
        "                    combination = (row['land_cover'], row['region_name'])\n",
        "                    if combination not in land_cover_region_combinations:\n",
        "                        land_cover_region_combinations.append(combination)\n",
        "            \n",
        "            # Create sensitivity plots for each land cover + region combination\n",
        "            for land_cover, region in land_cover_region_combinations:\n",
        "                # Filter scenarios for this combination\n",
        "                combo_scenarios = max_ws_df[\n",
        "                    (max_ws_df['land_cover'] == land_cover) & \n",
        "                    (max_ws_df['region_name'] == region)\n",
        "                ].copy()\n",
        "                \n",
        "                # Add the template scenario\n",
        "                template_row = max_ws_df[max_ws_df['shortid'] == 'Template']\n",
        "                if not template_row.empty:\n",
        "                    combo_scenarios = pd.concat([template_row, combo_scenarios])\n",
        "                \n",
        "                if combo_scenarios.empty:\n",
        "                    continue\n",
        "                \n",
        "                # Sort by n_value\n",
        "                combo_scenarios = combo_scenarios.sort_values('n_value').reset_index(drop=True)\n",
        "                \n",
        "                # Create plot\n",
        "                fig, ax = plt.subplots(figsize=(10, 6))\n",
        "                ax.plot(combo_scenarios['n_value'], combo_scenarios['max_water_surface'], \n",
        "                         marker='o', linestyle='-', linewidth=2)\n",
        "                \n",
        "                # Add template point in a different color if it exists\n",
        "                template_idx = combo_scenarios[combo_scenarios['shortid'] == 'Template'].index\n",
        "                if not template_idx.empty:\n",
        "                    ax.scatter(combo_scenarios.loc[template_idx, 'n_value'], \n",
        "                                combo_scenarios.loc[template_idx, 'max_water_surface'],\n",
        "                                color='red', s=100, zorder=5, label='Template')\n",
        "                \n",
        "                # Add labels and title\n",
        "                ax.set_xlabel(f\"Manning's n for {land_cover} in {region}\")\n",
        "                ax.set_ylabel(\"Maximum Water Surface Elevation (ft)\")\n",
        "                ax.set_title(f\"Sensitivity to {land_cover} Manning's n Value in {region}\")\n",
        "                ax.grid(True, linestyle='--', alpha=0.7)\n",
        "                \n",
        "                if not template_idx.empty:\n",
        "                    ax.legend()\n",
        "                \n",
        "                # Save plot\n",
        "                safe_lc = land_cover.replace(' ', '_').replace('/', '_')\n",
        "                safe_rg = region.replace(' ', '_').replace('/', '_')\n",
        "                plot_path = results_dir / f\"sensitivity_{safe_lc}_{safe_rg}.png\"\n",
        "                plt.tight_layout()\n",
        "                plt.savefig(plot_path)\n",
        "                plt.close()\n",
        "                print(f\"Created sensitivity plot for {land_cover} in {region}\")\n",
        "            \n",
        "            # Create time series comparison plots for each land cover + region combination\n",
        "            for land_cover, region in land_cover_region_combinations:\n",
        "                fig, ax = plt.subplots(figsize=(12, 6))\n",
        "                \n",
        "                # Get template results\n",
        "                template_plan = scenarios[0]['plan_number']\n",
        "                if template_plan in all_results:\n",
        "                    template_df = all_results[template_plan]['df']\n",
        "                    ax.plot(template_df['time'], template_df['water_surface'], \n",
        "                             color='black', linewidth=2, label='Template')\n",
        "                \n",
        "                # Filter scenarios for this combination\n",
        "                combo_scenarios = [\n",
        "                    s for s in scenarios \n",
        "                    if s['land_cover'] == land_cover and s['region_name'] == region\n",
        "                ]\n",
        "                \n",
        "                if not combo_scenarios:\n",
        "                    plt.close()\n",
        "                    continue\n",
        "                \n",
        "                # Setup colormap for n values\n",
        "                n_values = [s['n_value'] for s in combo_scenarios if s['n_value'] is not None]\n",
        "                if not n_values:\n",
        "                    plt.close()\n",
        "                    continue\n",
        "                    \n",
        "                min_n = min(n_values)\n",
        "                max_n = max(n_values)\n",
        "                norm = plt.Normalize(min_n, max_n)\n",
        "                cmap = plt.cm.viridis\n",
        "                \n",
        "                # Plot each scenario\n",
        "                for scenario in combo_scenarios:\n",
        "                    plan_number = scenario['plan_number']\n",
        "                    n_value = scenario['n_value']\n",
        "                    \n",
        "                    if plan_number in all_results and n_value is not None:\n",
        "                        df = all_results[plan_number]['df']\n",
        "                        color = cmap(norm(n_value))\n",
        "                        ax.plot(df['time'], df['water_surface'], color=color, \n",
        "                                 linewidth=1, alpha=0.7, label=f\"n = {n_value:.3f}\")\n",
        "                \n",
        "                # Add labels and title\n",
        "                ax.set_xlabel(\"Time\")\n",
        "                ax.set_ylabel(\"Water Surface Elevation (ft)\")\n",
        "                ax.set_title(f\"WSE Time Series for {land_cover} in {region}\")\n",
        "                ax.grid(True, linestyle='--', alpha=0.7)\n",
        "                \n",
        "                # Add colorbar\n",
        "                sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n",
        "                sm.set_array([])\n",
        "                cbar = plt.colorbar(sm, ax=ax)\n",
        "                cbar.set_label(f\"Manning's n for {land_cover}\")\n",
        "                \n",
        "                # Save plot\n",
        "                safe_lc = land_cover.replace(' ', '_').replace('/', '_')\n",
        "                safe_rg = region.replace(' ', '_').replace('/', '_')\n",
        "                plot_path = results_dir / f\"timeseries_{safe_lc}_{safe_rg}.png\"\n",
        "                plt.tight_layout()\n",
        "                plt.savefig(plot_path)\n",
        "                plt.close()\n",
        "                print(f\"Created time series plot for {land_cover} in {region}\")\n",
        "    \n",
        "    # Return results\n",
        "    return {\n",
        "        'scenarios': scenarios,\n",
        "        'execution_results': execution_results if 'execution_results' in locals() else None,\n",
        "        'results': all_results if 'all_results' in locals() else None,\n",
        "        'max_ws_summary': max_ws_df if 'max_ws_df' in locals() else None,\n",
        "        'significant_landuses': filtered_landuses,\n",
        "        'output_folder': results_dir\n",
        "    }"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "-----"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "-----"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Engineer's Note: For regional overrides of the main channel would typically be made in bulk (see the previous example notebook that demonstrates bulk-varying mannings values), as land use types are based on satellite imagery that may not correlate well with main channel roughness.  We are individually varying by land use in this example, due to lack of available example models with large calibration regions.  Please note that this methodology is more applicable to large calibration regions within a mesh, not a main channel override.  For sensitivity to main channel overrides, use the bulk sensitivity for regional overrides approach, where all values are overridden, and granularity can be achieved by delineating multiple main channel regional overrides."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Example usage for Regional Overrides Sensitivity Analysis\n",
        "# To run this, uncomment the code, adjust parameters as needed, and execute the cell\n",
        "\n",
        "\n",
        "# Define project path and template plan (if not already defined)\n",
        "# Assuming you've already extracted the example project\n",
        "project_folder = Path(os.getcwd()) / \"example_projects\" / \"BaldEagleCrkMulti2D\"\n",
        "template_plan = \"03\"  # Plan 03 has regional overrides\n",
        "\n",
        "# Define a point of interest for result extraction\n",
        "point_of_interest = (2081544, 365715)\n",
        "\n",
        "# Run the regional sensitivity analysis\n",
        "run_region_sensitivity_results = individual_landuse_sensitivity_region(\n",
        "    project_folder=project_folder,\n",
        "    template_plan=template_plan,\n",
        "    point_of_interest=point_of_interest,\n",
        "    area_threshold=10.0,  # Only analyze land uses covering at least 10% of the mesh area\n",
        "    interval=0.02,       # Adjust interval to reduce the number of test values\n",
        "    max_workers=2,\n",
        "    num_cores=1,\n",
        "    region_name=\"Main Channel\",  # Specify a region or set to None for all regions\n",
        "    output_folder=\"Regional_Landuse_Sensitivity\"\n",
        ")\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Print summary information\n",
        "if run_region_sensitivity_results:\n",
        "    print(\"\\nAnalysis complete! Results saved to:\", run_region_sensitivity_results['output_folder'])\n",
        "    if 'significant_landuses' in run_region_sensitivity_results:\n",
        "        print(\"\\nSignificant land uses analyzed in regions:\")\n",
        "        print(run_region_sensitivity_results['significant_landuses'][['Land Cover Type', 'Percentage']])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "-----"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Example Regional Sensitivity from HEC Example Project BaldEagleCrkMulti2D, Plan 03"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Regional Sensitivity Results from the HEC Example Project BaldEagleCrkMulti2D, Plan 03: \n",
        "\n",
        "<!-- Cultivated Crops -->\n",
        "![Time Series - Cultivated Crops](data/manning_img/regional_sensitivity/timeseries_Cultivated_Crops_Main_Channel.png)\n",
        "![Mannings n Sensitivity - Cultivated Crops](data/manning_img/regional_sensitivity/sensitivity_Cultivated_Crops_Main_Channel.png)\n",
        "\n",
        "<!-- Deciduous Forest -->\n",
        "![Time Series - Deciduous Forest](data/manning_img/regional_sensitivity/timeseries_Deciduous_Forest_Main_Channel.png)\n",
        "![Mannings n Sensitivity - Deciduous Forest](data/manning_img/regional_sensitivity/sensitivity_Deciduous_Forest_Main_Channel.png)\n",
        "\n",
        "<!-- Developed High Intensity -->\n",
        "![Time Series - Developed High Intensity](data/manning_img/regional_sensitivity/timeseries_Developed_High_Intensity_Main_Channel.png)\n",
        "![Mannings n Sensitivity - Developed High Intensity](data/manning_img/regional_sensitivity/sensitivity_Developed_High_Intensity_Main_Channel.png)\n",
        "\n",
        "<!-- Developed Low Intensity -->\n",
        "![Time Series - Developed Low Intensity](data/manning_img/regional_sensitivity/timeseries_Developed_Low_Intensity_Main_Channel.png)\n",
        "![Mannings n Sensitivity - Developed Low Intensity](data/manning_img/regional_sensitivity/sensitivity_Developed_Low_Intensity_Main_Channel.png)\n",
        "\n",
        "<!-- Emergent Herbaceous Wetlands -->\n",
        "![Time Series - Emergent Herbaceous Wetlands](data/manning_img/regional_sensitivity/timeseries_Emergent_Herbaceous_Wetlands_Main_Channel.png)\n",
        "![Mannings n Sensitivity - Emergent Herbaceous Wetlands](data/manning_img/regional_sensitivity/sensitivity_Emergent_Herbaceous_Wetlands_Main_Channel.png)\n",
        "\n",
        "<!-- Evergreen Forest -->\n",
        "![Time Series - Evergreen Forest](data/manning_img/regional_sensitivity/timeseries_Evergreen_Forest_Main_Channel.png)\n",
        "![Mannings n Sensitivity - Evergreen Forest](data/manning_img/regional_sensitivity/sensitivity_Evergreen_Forest_Main_Channel.png)\n",
        "\n",
        "<!-- No Data -->\n",
        "![Time Series - No Data](data/manning_img/regional_sensitivity/timeseries_NoData_Main_Channel.png)\n",
        "![Mannings n Sensitivity - No Data](data/manning_img/regional_sensitivity/sensitivity_NoData_Main_Channel.png)\n",
        "\n",
        "<!-- Pasture Hay -->\n",
        "![Time Series - Pasture Hay](data/manning_img/regional_sensitivity/timeseries_Pasture_Hay_Main_Channel.png)\n",
        "![Mannings n Sensitivity - Pasture Hay](data/manning_img/regional_sensitivity/sensitivity_Pasture_Hay_Main_Channel.png)\n",
        "\n",
        "<!-- Woody Wetlands -->\n",
        "![Time Series - Woody Wetlands](data/manning_img/regional_sensitivity/timeseries_Woody_Wetlands_Main_Channel.png)\n",
        "![Mannings n Sensitivity - Woody Wetlands](data/manning_img/regional_sensitivity/sensitivity_Woody_Wetlands_Main_Channel.png)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "rascmdr",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
}
==================================================

File: c:\GH\ras-commander\examples\README.md
==================================================
# RAS Commander Examples

This directory contains example notebooks demonstrating how to use the `ras-commander` library for automating HEC-RAS operations. These examples cover basic to advanced usage scenarios and provide a practical guide for hydraulic modelers looking to automate their workflows.

## Overview

HEC-RAS (Hydrologic Engineering Center's River Analysis System) is widely used for hydraulic modeling. The `ras-commander` library provides a Python interface to automate HEC-RAS operations without using the graphical user interface. This enables batch processing, sensitivity analysis, and integration with other Python tools for water resources engineering.

These example notebooks are designed to:
- Demonstrate key functionalities of the `ras-commander` library
- Provide practical use cases for automation
- Guide users from basic to advanced operations
- Serve as templates for your own automation scripts

## Examples

### [00_Using_RasExamples.ipynb](00_Using_RasExamples.ipynb)

This notebook introduces the `RasExamples` class, which provides easy access to HEC-RAS example projects for testing and demonstration purposes.

**Key contents:**
- Installing `ras-commander` from pip
- Using flexible imports for development without installation
- Extracting specific HEC-RAS example projects by folder name
- Advanced usage options for managing example projects
- Listing available example projects and categories
- Working with the new pipes and conduits examples (version 6.6)

### [01_project_initialization.ipynb](01_project_initialization.ipynb)

This notebook covers initializing and working with HEC-RAS projects using the `ras-commander` library.

**Key contents:**
- Setting up and configuring the RAS Commander environment
- Downloading and extracting example HEC-RAS projects
- Initializing HEC-RAS projects using the global `ras` object
- Initializing multiple HEC-RAS projects using custom RAS objects
- Accessing various project components (plans, geometries, flows, boundaries)
- Understanding the RAS object structure and its components
- Working with boundary conditions
- Comparing multiple projects

### [02_plan_and_geometry_operations.ipynb](02_plan_and_geometry_operations.ipynb)

This notebook demonstrates operations on HEC-RAS plan and geometry files using the RAS Commander library.

**Key contents:**
- Project initialization and understanding plan/geometry files
- Cloning plans to create new simulation scenarios
- Cloning geometry files for modified versions
- Setting geometry files for plans
- Clearing geometry preprocessor files
- Configuring simulation parameters and intervals
- Setting run flags and updating descriptions
- Cloning and configuring unsteady flow files
- Computing plans and verifying results
- Working with advanced HDF data
- Best practices for plan and geometry operations

### [03_unsteady_flow_operations.ipynb](03_unsteady_flow_operations.ipynb)

This notebook demonstrates operations on unsteady flow files using the RAS Commander library.

**Key contents:**
- Understanding unsteady flow files in HEC-RAS
- Extracting boundary conditions and tables from unsteady flow files
- Inspecting and analyzing boundary condition structures
- Working with different boundary condition types (flow hydrographs, stage hydrographs, etc.)
- Modifying flow titles in unsteady flow files
- Configuring restart settings for continuing simulations
- Extracting and working with flow tables
- Modifying flow tables and writing them back to files
- Applying updated unsteady flow to a plan and computing results

### [04_multiple_project_operations.ipynb](04_multiple_project_operations.ipynb)

This notebook demonstrates how to work with multiple HEC-RAS projects simultaneously using the RAS Commander library.

**Key contents:**
- Initializing and managing multiple HEC-RAS projects
- Cloning and modifying plans across different projects
- Running computations for multiple projects in parallel
- Optimizing computing resources when working with multiple models
- Analyzing and comparing results from different projects
- Building comprehensive multi-project workflows
- Best practices for multiple project management
- Setting up compute folders for multiple projects
- Comparing project structures and results

### [05_single_plan_execution.ipynb](05_single_plan_execution.ipynb)

This notebook focuses specifically on executing a single HEC-RAS plan with various configuration options.

**Key contents:**
- Understanding the `RasCmdr.compute_plan` method and its parameters
- Executing a plan with a specified number of processor cores
- Creating and managing destination folders for computations
- Overwriting existing destination folders
- Verifying computation results
- Options for single plan execution (basic execution, destination folder, number of cores, etc.)
- Best practices for single plan execution

### [06_executing_plan_sets.ipynb](06_executing_plan_sets.ipynb)

This notebook demonstrates different ways to specify and execute HEC-RAS plans using the RAS Commander library.

**Key contents:**
- Understanding plan specification in HEC-RAS
- Sequential execution of specific plans
- Selective plan execution based on criteria
- Running only plans without HDF results
- Verifying execution results
- Best practices for plan specification
- Choosing appropriate execution methods based on scenario
- Understanding the importance of plan selection for efficiency

### [07_sequential_plan_execution.ipynb](07_sequential_plan_execution.ipynb)

This notebook demonstrates how to sequentially execute multiple HEC-RAS plans using the RAS Commander library.

**Key contents:**
- Understanding sequential execution in HEC-RAS
- Using the `RasCmdr.compute_test_mode` method
- Executing all plans in a project sequentially
- Analyzing the test folder after sequential execution
- Executing specific plans with geometry preprocessor clearing
- Best practices for sequential execution
- Environment setup and test folder management
- Benefits of sequential execution (controlled resource usage, dependency management, etc.)

### [08_parallel_execution.ipynb](08_parallel_execution.ipynb)

This notebook demonstrates how to execute multiple HEC-RAS plans in parallel to maximize computational efficiency.

**Key contents:**
- Understanding parallel execution in HEC-RAS
- Setting up a working environment for parallel execution
- Checking system resources for optimal parallel execution
- Executing all plans in a project in parallel
- Executing specific plans in parallel
- Dynamic worker allocation based on available resources
- Balancing workers and cores per worker
- Analyzing parallel execution results
- Performance comparison between different parallel configurations
- Best practices for parallel execution

### [09_plan_parameter_operations.ipynb](09_plan_parameter_operations.ipynb)

This notebook demonstrates how to perform key operations on HEC-RAS plan files, focusing on modifying simulation parameters.

**Key contents:**
- Understanding plan files in HEC-RAS
- Retrieving specific values from plan files
- Updating run flags to control which components will run
- Modifying computation and output time intervals
- Reading and updating plan descriptions
- Changing simulation start and end dates
- Verifying updated plan values
- Best practices for plan operations
- Automating parameter adjustments for sensitivity analysis
- Managing documentation through plan descriptions

### [10_1d_hdf_data_extraction.ipynb](10_1d_hdf_data_extraction.ipynb)

This notebook demonstrates how to extract and analyze 1D data from HEC-RAS HDF files using the RAS Commander library.

**Key contents:**
- Accessing and extracting base geometry attributes from HDF files
- Working with 1D cross-section data, including station-elevation profiles
- Visualizing cross-section properties like Manning's n values
- Extracting river centerlines, bank lines, and edge lines
- Analyzing runtime data and compute messages
- Processing and visualizing ineffective flow areas
- Extracting time series data for 1D cross sections
- Plotting cross-section elevation profiles with bank stations

### [11_2d_hdf_data_extraction.ipynb](11_2d_hdf_data_extraction.ipynb)

This notebook shows how to extract and analyze 2D data from HEC-RAS HDF files using the RAS Commander library.

**Key contents:**
- Working with 2D flow area attributes and perimeter polygons
- Extracting and visualizing mesh cell faces, polygons, and points
- Finding nearest faces and cells to specific points
- Extracting boundary condition lines and breaklines
- Analyzing maximum water surface elevations and timing
- Working with maximum face velocities and water surface errors
- Visualizing 2D model results with terrain data
- Extracting and interpreting cell and face time series data

### [12_2d_hdf_data_extraction_pipes_and_pumps.ipynb](12_2d_hdf_data_extraction_pipes_and_pumps.ipynb)

This notebook focuses on extracting and analyzing data related to pipes, conduits, and pump stations from HEC-RAS HDF files.

**Key contents:**
- Working with pipe conduits and associated geometries
- Extracting pipe node information and properties
- Analyzing pipe network connectivity and structures
- Visualizing pipe networks with node elevations
- Working with pump stations and pump groups
- Extracting pipe and node time series data
- Analyzing face flow, velocity, and water surface values
- Processing and visualizing pump station operation data

### [13_2d_detail_face_data_extraction.ipynb](13_2d_detail_face_data_extraction.ipynb)

This notebook demonstrates techniques for detailed face data extraction from 2D HEC-RAS models.

**Key contents:**
- Extracting and analyzing detailed face property tables
- Working with profile lines to identify cell faces
- Finding faces perpendicular to flow for discharge calculations
- Converting face velocities and flows to positive values
- Calculating discharge-weighted velocities for profile lines
- Comparing discharge-weighted and simple average velocities
- Visualizing time series data for selected faces
- Creating profile-specific result datasets for analysis

### [14_fluvial_pluvial_delineation.ipynb](14_fluvial_pluvial_delineation.ipynb)

This notebook demonstrates how to delineate fluvial and pluvial flooding areas based on the timing of maximum water surface elevations.

**Key contents:**
- Extracting maximum water surface elevation and timing data
- Identifying adjacent cells with dissimilar flood timing
- Calculating boundaries between fluvial and pluvial flooding
- Filtering boundaries based on length thresholds
- Visualizing the fluvial-pluvial boundary on a map
- Exporting boundaries to GeoJSON format
- Understanding the difference between river-driven and rainfall-driven flooding
- Using cell polygon geometry for spatial analysis

### [101_Core_Sensitivity.ipynb](101_Core_Sensitivity.ipynb)

This notebook tests HEC-RAS performance with different CPU core configurations to optimize computational efficiency.

**Key contents:**
- Setting up a controlled testing environment
- Running the same plan with varying core counts
- Measuring execution time for each configuration
- Analyzing performance scaling with increased cores
- Creating visualization of performance metrics
- Calculating unit runtime based on single-core performance
- Understanding diminishing returns with multiple cores
- Identifying optimal core count for specific models

### [102_benchmarking_versions_6.1_to_6.6.ipynb](102_benchmarking_versions_6.1_to_6.6.ipynb)

This notebook compares performance across different versions of HEC-RAS by running the same plan across multiple software versions.

**Key contents:**
- Running the same model across multiple HEC-RAS versions
- Measuring preprocessing, computation, and postprocessing times
- Analyzing volume error changes between versions
- Creating visualizations of performance trends
- Identifying performance improvements between versions
- Understanding version-specific computational differences
- Setting up flexible testing environments for multiple versions
- Interpreting HEC-RAS version performance evolution

### [103_Generating_AEP_Events_from_Atlas_14.ipynb](103_Generating_AEP_Events_from_Atlas_14.ipynb)

This notebook demonstrates an end-to-end workflow for generating and analyzing multiple Annual Exceedance Probability events.

**Key contents:**
- Generating hyetographs from NOAA Atlas 14 precipitation frequency data
- Parsing duration strings and interpolating precipitation depths
- Applying the Alternating Block Method for hyetograph creation
- Cloning and configuring HEC-RAS plans for different AEP events
- Executing multiple plans in parallel with resource optimization
- Extracting and visualizing results for multiple AEP scenarios
- Creating a complete workflow from data to flood analysis
- Comparing results across different return period events


## Contributing

If you have suggestions for additional examples or improvements to existing ones, please feel free to contribute by submitting pull requests or opening issues in the repository.
==================================================

File: c:\GH\ras-commander\ras_commander\Decorators.py
==================================================
from functools import wraps
from pathlib import Path
from typing import Union
import logging
import h5py
import inspect
import pandas as pd


def log_call(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        logger = logging.getLogger(func.__module__)
        logger.debug(f"Calling {func.__name__}")
        result = func(*args, **kwargs)
        logger.debug(f"Finished {func.__name__}")
        return result
    return wrapper

def standardize_input(file_type: str = 'plan_hdf'):
    """
    Decorator to standardize input for HDF file operations.
    
    This decorator processes various input types and converts them to a Path object
    pointing to the correct HDF file. It handles the following input types:
    - h5py.File objects
    - pathlib.Path objects
    - Strings (file paths or plan/geom numbers)
    - Integers (interpreted as plan/geom numbers)
    
    The decorator also manages RAS object references and logging.
    
    Args:
        file_type (str): Specifies whether to look for 'plan_hdf' or 'geom_hdf' files.
    
    Returns:
        A decorator that wraps the function to standardize its input to a Path object.
    """
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            logger = logging.getLogger(func.__module__)
            
            # Check if the function expects an hdf_path parameter
            sig = inspect.signature(func)
            param_names = list(sig.parameters.keys())
            
            # If first parameter is 'hdf_file', pass an h5py object
            if param_names and param_names[0] == 'hdf_file':
                if isinstance(args[0], h5py.File):
                    return func(*args, **kwargs)
                elif isinstance(args[0], (str, Path)):
                    with h5py.File(args[0], 'r') as hdf:
                        return func(hdf, *args[1:], **kwargs)
                else:
                    raise ValueError(f"Expected h5py.File or path, got {type(args[0])}")
                
            # Handle both static method calls and regular function calls
            if args and isinstance(args[0], type):
                # Static method call, remove the class argument
                args = args[1:]
            
            # Get hdf_input from kwargs if provided with hdf_path key, or take first positional arg
            hdf_input = kwargs.pop('hdf_path', None) if 'hdf_path' in kwargs else (args[0] if args else None)
            
            # Import ras here to ensure we get the most current instance
            from .RasPrj import ras as ras
            ras_object = kwargs.pop('ras_object', None) or (args[1] if len(args) > 1 else None)
            ras_obj = ras_object or ras

            # If no hdf_input provided, return the function unmodified
            if hdf_input is None:
                return func(*args, **kwargs)

            hdf_path = None

            # Clean and normalize string inputs
            if isinstance(hdf_input, str):
                # Clean the string (remove extra whitespace, normalize path separators)
                hdf_input = hdf_input.strip()
                
                # Check if it's a raw file path that exists
                try:
                    test_path = Path(hdf_input)
                    if test_path.is_file():
                        hdf_path = test_path
                        logger.info(f"Using HDF file from direct string path: {hdf_path}")
                except Exception as e:
                    logger.debug(f"Error converting string to path: {str(e)}")

            # If a valid path wasn't created from string processing, continue with normal flow
            if hdf_path is None:
                # If hdf_input is already a Path and exists, use it directly
                if isinstance(hdf_input, Path) and hdf_input.is_file():
                    hdf_path = hdf_input
                    logger.info(f"Using existing Path object HDF file: {hdf_path}")
                # If hdf_input is an h5py.File object, use its filename
                elif isinstance(hdf_input, h5py.File):
                    hdf_path = Path(hdf_input.filename)
                    logger.info(f"Using HDF file from h5py.File object: {hdf_path}")
                # Handle Path objects that might not be verified yet
                elif isinstance(hdf_input, Path):
                    if hdf_input.is_file():
                        hdf_path = hdf_input
                        logger.info(f"Using verified Path object HDF file: {hdf_path}")
                # Handle string inputs that are plan/geom numbers
                elif isinstance(hdf_input, str) and (hdf_input.isdigit() or (len(hdf_input) > 1 and hdf_input[0] == 'p' and hdf_input[1:].isdigit())):
                    try:
                        ras_obj.check_initialized()
                    except Exception as e:
                        raise ValueError(f"RAS object is not initialized: {str(e)}")
                        
                    # Extract the number part and strip leading zeros
                    number_str = hdf_input if hdf_input.isdigit() else hdf_input[1:]
                    stripped_number = number_str.lstrip('0')
                    if stripped_number == '':  # Handle case where input was '0' or '00'
                        stripped_number = '0'
                    number_int = int(stripped_number)
                    
                    if file_type == 'plan_hdf':
                        try:
                            # Convert plan_number column to integers for comparison after stripping zeros
                            plan_info = ras_obj.plan_df[ras_obj.plan_df['plan_number'].str.lstrip('0').astype(int) == number_int]
                            if not plan_info.empty:
                                # Make sure HDF_Results_Path is a string and not None
                                hdf_path_str = plan_info.iloc[0]['HDF_Results_Path']
                                if pd.notna(hdf_path_str):
                                    hdf_path = Path(str(hdf_path_str))
                        except Exception as e:
                            logger.warning(f"Error retrieving plan HDF path: {str(e)}")


                    elif file_type == 'geom_hdf':
                        try:
                            # First try to get the geometry number from the plan
                            from ras_commander import RasPlan
                            plan_info = ras_obj.plan_df[ras_obj.plan_df['plan_number'].astype(int) == number_int]
                            if not plan_info.empty:
                                # Extract the geometry number from the plan
                                geom_number = plan_info.iloc[0]['geometry_number']
                                if pd.notna(geom_number) and geom_number is not None:
                                    # Handle different types of geom_number (string or int)
                                    try:
                                        # Get the geometry path using RasPlan
                                        geom_path = RasPlan.get_geom_path(str(geom_number), ras_obj)
                                        
                                        if geom_path is not None:
                                            # Create the HDF path by adding .hdf to the geometry path
                                            hdf_path = Path(str(geom_path) + ".hdf")
                                            if hdf_path.exists():
                                                logger.info(f"Found geometry HDF file for plan {number_int}: {hdf_path}")
                                            else:
                                                # Try to find it in the geom_df if direct path doesn't exist
                                                geom_info = ras_obj.geom_df[ras_obj.geom_df['full_path'] == str(geom_path)]
                                                if not geom_info.empty and 'hdf_path' in geom_info.columns:
                                                    hdf_path_str = geom_info.iloc[0]['hdf_path']
                                                    if pd.notna(hdf_path_str):
                                                        hdf_path = Path(str(hdf_path_str))
                                                        logger.info(f"Found geometry HDF file from geom_df for plan {number_int}: {hdf_path}")
                                    except (TypeError, ValueError) as e:
                                        logger.warning(f"Error processing geometry number {geom_number}: {str(e)}")
                                else:
                                    logger.warning(f"No valid geometry number found for plan {number_int}")
                        except Exception as e:
                            logger.warning(f"Error retrieving geometry HDF path: {str(e)}")
                    else:
                        raise ValueError(f"Invalid file type: {file_type}")
                    


                
                # Handle integer inputs (assuming they're plan or geom numbers)
                elif isinstance(hdf_input, int):
                    try:
                        ras_obj.check_initialized()
                    except Exception as e:
                        raise ValueError(f"RAS object is not initialized: {str(e)}")
                        
                    number_int = hdf_input
                    
                    if file_type == 'plan_hdf':
                        try:
                            # Convert plan_number column to integers for comparison after stripping zeros
                            plan_info = ras_obj.plan_df[ras_obj.plan_df['plan_number'].str.lstrip('0').astype(int) == number_int]
                            if not plan_info.empty:
                                # Make sure HDF_Results_Path is a string and not None
                                hdf_path_str = plan_info.iloc[0]['HDF_Results_Path']
                                if pd.notna(hdf_path_str):
                                    hdf_path = Path(str(hdf_path_str))
                        except Exception as e:
                            logger.warning(f"Error retrieving plan HDF path: {str(e)}")
                            
                    elif file_type == 'geom_hdf':
                        try:
                            # First try finding plan info to get geometry number
                            plan_info = ras_obj.plan_df[ras_obj.plan_df['plan_number'].astype(int) == number_int]
                            if not plan_info.empty:
                                # Extract the geometry number from the plan
                                geom_number = plan_info.iloc[0]['geometry_number']
                                if pd.notna(geom_number) and geom_number is not None:
                                    # Handle different types of geom_number (string or int)
                                    try:
                                        # Get the geometry path using RasPlan
                                        from ras_commander import RasPlan
                                        geom_path = RasPlan.get_geom_path(str(geom_number), ras_obj)
                                        
                                        if geom_path is not None:
                                            # Create the HDF path by adding .hdf to the geometry path
                                            hdf_path = Path(str(geom_path) + ".hdf")
                                            if hdf_path.exists():
                                                logger.info(f"Found geometry HDF file for plan {number_int}: {hdf_path}")
                                            else:
                                                # Try to find it in the geom_df if direct path doesn't exist
                                                geom_info = ras_obj.geom_df[ras_obj.geom_df['full_path'] == str(geom_path)]
                                                if not geom_info.empty and 'hdf_path' in geom_info.columns:
                                                    hdf_path_str = geom_info.iloc[0]['hdf_path']
                                                    if pd.notna(hdf_path_str):
                                                        hdf_path = Path(str(hdf_path_str))
                                                        logger.info(f"Found geometry HDF file from geom_df for plan {number_int}: {hdf_path}")
                                    except (TypeError, ValueError) as e:
                                        logger.warning(f"Error processing geometry number {geom_number}: {str(e)}")
                                else:
                                    logger.warning(f"No valid geometry number found for plan {number_int}")
                        except Exception as e:
                            logger.warning(f"Error retrieving geometry HDF path: {str(e)}")
                    else:
                        raise ValueError(f"Invalid file type: {file_type}")

            # Final verification that the path exists
            if hdf_path is None or not hdf_path.exists():
                error_msg = f"HDF file not found: {hdf_input}"
                logger.error(error_msg)
                raise FileNotFoundError(error_msg)
                
            logger.info(f"Final validated HDF file path: {hdf_path}")
            
            # Now try to validate the HDF file structure (but don't fail if validation fails)
            try:
                with h5py.File(hdf_path, 'r') as test_file:
                    # Just open to verify it's a valid HDF5 file
                    logger.debug(f"Successfully opened HDF file for validation: {hdf_path}")
            except Exception as e:
                logger.warning(f"Warning: Could not validate HDF file: {str(e)}")
                # Continue anyway, let the function handle detailed validation
            
            # Pass all original arguments and keywords, replacing hdf_input with standardized hdf_path
            # If the original input was positional, replace the first argument
            if args and 'hdf_path' not in kwargs:
                new_args = (hdf_path,) + args[1:]
            else:
                new_args = args
                kwargs['hdf_path'] = hdf_path
                
            return func(*new_args, **kwargs)

        return wrapper
    return decorator
==================================================

File: c:\GH\ras-commander\ras_commander\HdfBase.py
==================================================
"""
HdfBase: Core HDF File Operations for HEC-RAS

This module provides fundamental methods for interacting with HEC-RAS HDF files.
It serves as a foundation for more specialized HDF classes.

Attribution:
    Derived from the rashdf library (https://github.com/fema-ffrd/rashdf)
    Copyright (c) 2024 fema-ffrd - MIT License

Features:
    - Time parsing and conversion utilities
    - HDF attribute and dataset access
    - Geometric data extraction
    - 2D flow area information retrieval

Classes:
    HdfBase: Base class containing static methods for HDF operations

Key Methods:
    Time Operations:
        - get_simulation_start_time(): Get simulation start datetime
        - get_unsteady_timestamps(): Get unsteady output timestamps
        - parse_ras_datetime(): Parse RAS datetime strings
    
    Data Access:
        - get_2d_flow_area_names_and_counts(): Get 2D flow area info
        - get_projection(): Get spatial projection
        - get_attrs(): Access HDF attributes
        - get_dataset_info(): Explore HDF structure
        - get_polylines_from_parts(): Extract geometric polylines

Example:
    ```python
    from ras_commander import HdfBase
    
    with h5py.File('model.hdf', 'r') as hdf:
        start_time = HdfBase.get_simulation_start_time(hdf)
        timestamps = HdfBase.get_unsteady_timestamps(hdf)
    ```
"""
import re
from datetime import datetime, timedelta
import h5py
import numpy as np
import pandas as pd
import xarray as xr
from typing import List, Tuple, Union, Optional, Dict, Any
from pathlib import Path
import logging
from shapely.geometry import LineString, MultiLineString

from .HdfUtils import HdfUtils
from .Decorators import standardize_input, log_call
from .LoggingConfig import setup_logging, get_logger

logger = get_logger(__name__)

class HdfBase:
    """
    Base class for HEC-RAS HDF file operations.

    This class provides static methods for fundamental HDF file operations,
    including time parsing, attribute access, and geometric data extraction.
    All methods are designed to work with h5py.File objects or pathlib.Path
    inputs.

    Note:
        This class is not meant to be instantiated. All methods are static
        and should be called directly from the class.
    """

    @staticmethod
    def get_simulation_start_time(hdf_file: h5py.File) -> datetime:
        """
        Extract the simulation start time from the HDF file.

        Args:
            hdf_file: Open HDF file object containing RAS simulation data.

        Returns:
            datetime: Simulation start time as a datetime object.

        Raises:
            ValueError: If Plan Information is not found or start time cannot be parsed.
        
        Note:
            Expects 'Plan Data/Plan Information' group with 'Simulation Start Time' attribute.
        """
        plan_info = hdf_file.get("Plan Data/Plan Information")
        if plan_info is None:
            raise ValueError("Plan Information not found in HDF file")
        time_str = plan_info.attrs.get('Simulation Start Time')
        return HdfUtils.parse_ras_datetime(time_str.decode('utf-8'))

    @staticmethod
    def get_unsteady_timestamps(hdf_file: h5py.File) -> List[datetime]:
        """
        Extract the list of unsteady timestamps from the HDF file.

        Args:
            hdf_file (h5py.File): Open HDF file object.

        Returns:
            List[datetime]: A list of datetime objects representing the unsteady timestamps.
        """
        group_path = "Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Time Date Stamp (ms)"
        raw_datetimes = hdf_file[group_path][:]
        return [HdfUtils.parse_ras_datetime_ms(x.decode("utf-8")) for x in raw_datetimes]

    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def get_2d_flow_area_names_and_counts(hdf_path: Path) -> List[Tuple[str, int]]:
        """
        Get the names and cell counts of 2D flow areas from the HDF file.

        Args:
            hdf_path (Path): Path to the HDF file.

        Returns:
            List[Tuple[str, int]]: A list of tuples containing the name and cell count of each 2D flow area.

        Raises:
            ValueError: If there's an error reading the HDF file or accessing the required data.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                flow_area_2d_path = "Geometry/2D Flow Areas"
                if flow_area_2d_path not in hdf_file:
                    return []
                
                attributes = hdf_file[f"{flow_area_2d_path}/Attributes"][()]
                names = [HdfUtils.convert_ras_string(name) for name in attributes["Name"]]
                
                cell_info = hdf_file[f"{flow_area_2d_path}/Cell Info"][()]
                cell_counts = [info[1] for info in cell_info]
                
                return list(zip(names, cell_counts))
        except Exception as e:
            logger.error(f"Error reading 2D flow area names and counts from {hdf_path}: {str(e)}")
            raise ValueError(f"Failed to get 2D flow area names and counts: {str(e)}")


    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def get_projection(hdf_path: Path) -> Optional[str]:
        """
        Get projection information from HDF file or RASMapper project file.
        Converts WKT projection to EPSG code for GeoDataFrame compatibility.
        
        Args:
            hdf_path (Path): Path to the HDF file.

        Returns:
            Optional[str]: The projection as EPSG code (e.g. "EPSG:6556"), or None if not found.
        """
        from pyproj import CRS

        project_folder = hdf_path.parent
        wkt = None
        proj_file = None  # Initialize proj_file variable
        
        # Try HDF file
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                proj_wkt = hdf_file.attrs.get("Projection")
                if proj_wkt is not None:
                    if isinstance(proj_wkt, (bytes, np.bytes_)):
                        wkt = proj_wkt.decode("utf-8")
                        logger.info(f"Found projection in HDF file: {hdf_path}")
                        return wkt
        except Exception as e:
            logger.error(f"Error reading projection from HDF file {hdf_path}: {str(e)}")

        # Try RASMapper file if no HDF projection
        if not wkt:
            try:
                rasmap_files = list(project_folder.glob("*.rasmap"))
                if rasmap_files:
                    with open(rasmap_files[0], 'r') as f:
                        content = f.read()
                        
                    proj_match = re.search(r'<RASProjectionFilename Filename="(.*?)"', content)
                    if proj_match:
                        proj_file = project_folder / proj_match.group(1).replace('.\\', '')
                        if proj_file.exists():
                            with open(proj_file, 'r') as f:
                                wkt = f.read().strip()
                                logger.info(f"Found projection in RASMapper file: {proj_file}")
                                return wkt
            except Exception as e:
                logger.error(f"Error reading RASMapper projection file: {str(e)}")
        
        # Customize error message based on whether proj_file was found
        if proj_file:
            error_msg = (
                "No valid projection found. Checked:\n"
                f"1. HDF file projection attribute: {hdf_path}\n"
                f"2. RASMapper projection file {proj_file} found in RASMapper file, but was invalid"
            )
        else:
            error_msg = (
                "No valid projection found. Checked:\n"
                f"1. HDF file projection attribute: {hdf_path}\n was checked and no projection attribute found"
                "2. No RASMapper projection file found"
            )

        error_msg += (
            "\nTo fix this:\n"
            "1. Open RASMapper\n"
            "2. Click Map > Set Projection\n" 
            "3. Select an appropriate projection file or coordinate system\n"
            "4. Save the RASMapper project"
        )
        
        logger.critical(error_msg)
        return None

    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def get_attrs(hdf_file: h5py.File, attr_path: str) -> Dict[str, Any]:
        """
        Get attributes from an HDF file at a specified path.

        Args:
            hdf_file (h5py.File): The opened HDF file.
            attr_path (str): Path to the attributes in the HDF file.

        Returns:
            Dict[str, Any]: Dictionary of attributes.
        """
        try:
            if attr_path not in hdf_file:
                logger.warning(f"Path {attr_path} not found in HDF file")
                return {}
            
            return HdfUtils.convert_hdf5_attrs_to_dict(hdf_file[attr_path].attrs)
        except Exception as e:
            logger.error(f"Error getting attributes from {attr_path}: {str(e)}")
            return {}

    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def get_dataset_info(file_path: Path, group_path: str = '/') -> None:
        """
        Recursively explore and print the structure of an HDF5 file.

        Displays detailed information about groups, datasets, and their attributes
        in a hierarchical format.

        Args:
            file_path: Path to the HDF5 file.
            group_path: Starting group path to explore (default: root '/').

        Prints:
            - Group and dataset names with hierarchical indentation
            - Dataset shapes and data types
            - All attributes for groups and datasets
        """
        def recurse(name, obj, indent=0):
            spacer = "    " * indent
            if isinstance(obj, h5py.Group):
                print(f"{spacer}Group: {name}")
                HdfBase.print_attrs(name, obj)
                for key in obj:
                    recurse(f"{name}/{key}", obj[key], indent+1)
            elif isinstance(obj, h5py.Dataset):
                print(f"{spacer}Dataset: {name}")
                print(f"{spacer}    Shape: {obj.shape}")
                print(f"{spacer}    Dtype: {obj.dtype}")
                HdfBase.print_attrs(name, obj)
            else:
                print(f"{spacer}Unknown object: {name}")

        try:
            with h5py.File(file_path, 'r') as hdf_file:
                if group_path in hdf_file:
                    print("")
                    print(f"Exploring group: {group_path}\n")
                    group = hdf_file[group_path]
                    for key in group:
                        print("")
                        recurse(f"{group_path}/{key}", group[key], indent=1)
                else:
                    print(f"Group path '{group_path}' not found in the HDF5 file.")
        except Exception as e:
            print(f"Error exploring HDF5 file: {e}")

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_polylines_from_parts(hdf_path: Path, path: str, info_name: str = "Polyline Info", 
                              parts_name: str = "Polyline Parts", 
                              points_name: str = "Polyline Points") -> List[LineString]:
        """
        Extract polylines from HDF file parts data.

        Args:
            hdf_path: Path to the HDF file.
            path: Internal HDF path to polyline data.
            info_name: Name of polyline info dataset.
            parts_name: Name of polyline parts dataset.
            points_name: Name of polyline points dataset.

        Returns:
            List of Shapely LineString/MultiLineString geometries.

        Note:
            Expects HDF datasets containing:
            - Polyline information (start points and counts)
            - Parts information for multi-part lines
            - Point coordinates
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                polyline_info_path = f"{path}/{info_name}"
                polyline_parts_path = f"{path}/{parts_name}"
                polyline_points_path = f"{path}/{points_name}"

                polyline_info = hdf_file[polyline_info_path][()]
                polyline_parts = hdf_file[polyline_parts_path][()]
                polyline_points = hdf_file[polyline_points_path][()]

                geoms = []
                for pnt_start, pnt_cnt, part_start, part_cnt in polyline_info:
                    points = polyline_points[pnt_start : pnt_start + pnt_cnt]
                    if part_cnt == 1:
                        geoms.append(LineString(points))
                    else:
                        parts = polyline_parts[part_start : part_start + part_cnt]
                        geoms.append(
                            MultiLineString(
                                list(
                                    points[part_pnt_start : part_pnt_start + part_pnt_cnt]
                                    for part_pnt_start, part_pnt_cnt in parts
                                )
                            )
                        )
                return geoms
        except Exception as e:
            logger.error(f"Error getting polylines: {str(e)}")
            return []

    @staticmethod
    def print_attrs(name: str, obj: Union[h5py.Dataset, h5py.Group]) -> None:
        """
        Print the attributes of an HDF5 object (Dataset or Group).

        Args:
            name (str): Name of the object
            obj (Union[h5py.Dataset, h5py.Group]): HDF5 object whose attributes are to be printed
        """
        if len(obj.attrs) > 0:
            print(f"    Attributes for {name}:")
            for key, value in obj.attrs.items():
                print(f"        {key}: {value}")




==================================================

File: c:\GH\ras-commander\ras_commander\HdfBndry.py
==================================================
"""
Class: HdfBndry

A utility class for extracting and processing boundary-related features from HEC-RAS HDF files,
including boundary conditions, breaklines, refinement regions, and reference features.

Attribution: A substantial amount of code in this file is sourced or derived 
from the https://github.com/fema-ffrd/rashdf library, 
released under MIT license and Copyright (c) 2024 fema-ffrd

The file has been forked and modified for use in RAS Commander.

-----

All of the methods in this class are static and are designed to be used without instantiation.

List of Functions in HdfBndry:
- get_bc_lines()           # Returns boundary condition lines as a GeoDataFrame.
- get_breaklines()         # Returns 2D mesh area breaklines as a GeoDataFrame.
- get_refinement_regions() # Returns refinement regions as a GeoDataFrame.
- get_reference_lines()    # Returns reference lines as a GeoDataFrame.
- get_reference_points()   # Returns reference points as a GeoDataFrame.



"""
from pathlib import Path
from typing import Dict, List, Optional, Union, Any
import h5py
import numpy as np
import pandas as pd
import geopandas as gpd
from shapely.geometry import LineString, MultiLineString, Polygon, MultiPolygon, Point
from .HdfBase import HdfBase
from .HdfUtils import HdfUtils
from .HdfMesh import HdfMesh
from .Decorators import standardize_input, log_call
from .LoggingConfig import setup_logging, get_logger

logger = get_logger(__name__)


class HdfBndry:
    """
    A class for handling boundary-related data from HEC-RAS HDF files.

    This class provides methods to extract and process various boundary elements
    such as boundary condition lines, breaklines, refinement regions, and reference
    lines/points from HEC-RAS geometry HDF files.

    Methods in this class return data primarily as GeoDataFrames, making it easy
    to work with spatial data in a geospatial context.

    Note:
        This class relies on the HdfBase and HdfUtils classes for some of its
        functionality. Ensure these classes are available in the same package.
    """
    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def get_bc_lines(hdf_path: Path) -> gpd.GeoDataFrame:
        """
        Return 2D mesh area boundary condition lines.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.

        Returns
        -------
        gpd.GeoDataFrame
            A GeoDataFrame containing the boundary condition lines and their attributes.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                bc_lines_path = "Geometry/Boundary Condition Lines"
                if bc_lines_path not in hdf_file:
                    return gpd.GeoDataFrame()
                
                # Get geometries
                bc_line_data = hdf_file[bc_lines_path]
                geoms = HdfBase.get_polylines_from_parts(hdf_path, bc_lines_path)
                
                # Get attributes
                attributes = pd.DataFrame(bc_line_data["Attributes"][()])
                
                # Convert string columns
                str_columns = ['Name', 'SA-2D', 'Type']
                for col in str_columns:
                    if col in attributes.columns:
                        attributes[col] = attributes[col].apply(HdfUtils.convert_ras_string)
                
                # Create GeoDataFrame with all attributes
                gdf = gpd.GeoDataFrame(
                    attributes,
                    geometry=geoms,
                    crs=HdfBase.get_projection(hdf_file)
                )
                
                # Add ID column if not present
                if 'bc_line_id' not in gdf.columns:
                    gdf['bc_line_id'] = range(len(gdf))
                    
                return gdf

        except Exception as e:
            logger.error(f"Error reading boundary condition lines: {str(e)}")
            return gpd.GeoDataFrame()

    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def get_breaklines(hdf_path: Path) -> gpd.GeoDataFrame:
        """
        Return 2D mesh area breaklines.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.

        Returns
        -------
        gpd.GeoDataFrame
            A GeoDataFrame containing the breaklines.

        Notes
        -----
        - Zero-length breaklines are logged and skipped. 
        - Single-point breaklines are logged and skipped.
        - These invalid breaklines should be removed in RASMapper to prevent potential issues.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                breaklines_path = "Geometry/2D Flow Area Break Lines"
                if breaklines_path not in hdf_file:
                    logger.warning(f"Breaklines path '{breaklines_path}' not found in HDF file.")
                    return gpd.GeoDataFrame()

                bl_line_data = hdf_file[breaklines_path]
                attributes = bl_line_data["Attributes"][()]
                
                # Initialize lists to store valid breakline data
                valid_ids = []
                valid_names = []
                valid_geoms = []

                # Track invalid breaklines for summary
                zero_length_count = 0
                single_point_count = 0
                other_error_count = 0

                # Process each breakline
                for idx, (pnt_start, pnt_cnt, part_start, part_cnt) in enumerate(bl_line_data["Polyline Info"][()]):
                    name = HdfUtils.convert_ras_string(attributes["Name"][idx])

                    # Check for zero-length breaklines
                    if pnt_cnt == 0:
                        zero_length_count += 1
                        logger.debug(f"Zero-length breakline found (FID: {idx}, Name: {name})")
                        continue

                    # Check for single-point breaklines
                    if pnt_cnt == 1:
                        single_point_count += 1
                        logger.debug(f"Single-point breakline found (FID: {idx}, Name: {name})")
                        continue

                    try:
                        points = bl_line_data["Polyline Points"][()][pnt_start:pnt_start + pnt_cnt]
                        
                        # Additional validation of points array
                        if len(points) < 2:
                            single_point_count += 1
                            logger.debug(f"Invalid point count in breakline (FID: {idx}, Name: {name})")
                            continue

                        if part_cnt == 1:
                            geom = LineString(points)
                        else:
                            parts = bl_line_data["Polyline Parts"][()][part_start:part_start + part_cnt]
                            geom = MultiLineString([
                                points[part_pnt_start:part_pnt_start + part_pnt_cnt]
                                for part_pnt_start, part_pnt_cnt in parts
                                if part_pnt_cnt > 1  # Skip single-point parts
                            ])
                            # Skip if no valid parts remain
                            if len(geom.geoms) == 0:
                                other_error_count += 1
                                logger.debug(f"No valid parts in multipart breakline (FID: {idx}, Name: {name})")
                                continue

                        valid_ids.append(idx)
                        valid_names.append(name)
                        valid_geoms.append(geom)

                    except Exception as e:
                        other_error_count += 1
                        logger.debug(f"Error processing breakline {idx}: {str(e)}")
                        continue

                # Log summary of invalid breaklines
                total_invalid = zero_length_count + single_point_count + other_error_count
                if total_invalid > 0:
                    logger.info(
                        f"Breakline processing summary:\n"
                        f"- Zero-length breaklines: {zero_length_count}\n"
                        f"- Single-point breaklines: {single_point_count}\n"
                        f"- Other invalid breaklines: {other_error_count}\n"
                        f"Consider removing these invalid breaklines using RASMapper."
                    )

                # Create GeoDataFrame with valid breaklines
                if not valid_ids:
                    logger.warning("No valid breaklines found in the HDF file.")
                    return gpd.GeoDataFrame()

                return gpd.GeoDataFrame(
                    {
                        "bl_id": valid_ids,
                        "Name": valid_names,
                        "geometry": valid_geoms
                    },
                    geometry="geometry",
                    crs=HdfBase.get_projection(hdf_file)
                )

        except Exception as e:
            logger.error(f"Error reading breaklines: {str(e)}")
            return gpd.GeoDataFrame()

    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def get_refinement_regions(hdf_path: Path) -> gpd.GeoDataFrame:
        """
        Return 2D mesh area refinement regions.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.

        Returns
        -------
        gpd.GeoDataFrame
            A GeoDataFrame containing the refinement regions.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                refinement_regions_path = "/Geometry/2D Flow Area Refinement Regions"
                if refinement_regions_path not in hdf_file:
                    return gpd.GeoDataFrame()
                rr_data = hdf_file[refinement_regions_path]
                rr_ids = range(rr_data["Attributes"][()].shape[0])
                names = np.vectorize(HdfUtils.convert_ras_string)(rr_data["Attributes"][()]["Name"])
                geoms = list()
                for pnt_start, pnt_cnt, part_start, part_cnt in rr_data["Polygon Info"][()]:
                    points = rr_data["Polygon Points"][()][pnt_start : pnt_start + pnt_cnt]
                    if part_cnt == 1:
                        geoms.append(Polygon(points))
                    else:
                        parts = rr_data["Polygon Parts"][()][part_start : part_start + part_cnt]
                        geoms.append(
                            MultiPolygon(
                                list(
                                    points[part_pnt_start : part_pnt_start + part_pnt_cnt]
                                    for part_pnt_start, part_pnt_cnt in parts
                                )
                            )
                        )
                return gpd.GeoDataFrame(
                    {"rr_id": rr_ids, "Name": names, "geometry": geoms},
                    geometry="geometry",
                    crs=HdfBase.get_projection(hdf_file),
                )
        except Exception as e:
            logger.error(f"Error reading refinement regions: {str(e)}")
            return gpd.GeoDataFrame()

    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def get_reference_lines(hdf_path: Path, mesh_name: Optional[str] = None) -> gpd.GeoDataFrame:
        """
        Return the reference lines geometry and attributes.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.
        mesh_name : Optional[str], optional
            Name of the mesh to filter by. Default is None.

        Returns
        -------
        gpd.GeoDataFrame
            A GeoDataFrame containing the reference lines. If mesh_name is provided,
            returns only lines for that mesh.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                reference_lines_path = "Geometry/Reference Lines"
                attributes_path = f"{reference_lines_path}/Attributes"
                if attributes_path not in hdf_file:
                    return gpd.GeoDataFrame()
                
                attributes = hdf_file[attributes_path][()]
                refline_ids = range(attributes.shape[0])
                v_conv_str = np.vectorize(HdfUtils.convert_ras_string)
                names = v_conv_str(attributes["Name"])
                mesh_names = v_conv_str(attributes["SA-2D"])
                
                try:
                    types = v_conv_str(attributes["Type"])
                except ValueError:
                    types = np.array([""] * attributes.shape[0])
                
                geoms = HdfBase.get_polylines_from_parts(hdf_path, reference_lines_path)
                
                gdf = gpd.GeoDataFrame(
                    {
                        "refln_id": refline_ids,
                        "Name": names,
                        "mesh_name": mesh_names,
                        "Type": types,
                        "geometry": geoms,
                    },
                    geometry="geometry",
                    crs=HdfBase.get_projection(hdf_file),
                )
                
                # Filter by mesh_name if provided
                if mesh_name is not None:
                    gdf = gdf[gdf['mesh_name'] == mesh_name]
                
                return gdf
                
        except Exception as e:
            logger.error(f"Error reading reference lines: {str(e)}")
            return gpd.GeoDataFrame()

    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def get_reference_points(hdf_path: Path, mesh_name: Optional[str] = None) -> gpd.GeoDataFrame:
        """
        Return the reference points geometry and attributes.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.
        mesh_name : Optional[str], optional
            Name of the mesh to filter by. Default is None.

        Returns
        -------
        gpd.GeoDataFrame
            A GeoDataFrame containing the reference points. If mesh_name is provided,
            returns only points for that mesh.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                reference_points_path = "Geometry/Reference Points"
                attributes_path = f"{reference_points_path}/Attributes"
                if attributes_path not in hdf_file:
                    return gpd.GeoDataFrame()
                
                ref_points_group = hdf_file[reference_points_path]
                attributes = ref_points_group["Attributes"][:]
                v_conv_str = np.vectorize(HdfUtils.convert_ras_string)
                names = v_conv_str(attributes["Name"])
                mesh_names = v_conv_str(attributes["SA/2D"])
                cell_id = attributes["Cell Index"]
                points = ref_points_group["Points"][()]
                
                gdf = gpd.GeoDataFrame(
                    {
                        "refpt_id": range(attributes.shape[0]),
                        "Name": names,
                        "mesh_name": mesh_names,
                        "Cell Index": cell_id,
                        "geometry": list(map(Point, points)),
                    },
                    geometry="geometry",
                    crs=HdfBase.get_projection(hdf_file),
                )
                
                # Filter by mesh_name if provided
                if mesh_name is not None:
                    gdf = gdf[gdf['mesh_name'] == mesh_name]
                
                return gdf
                
        except Exception as e:
            logger.error(f"Error reading reference points: {str(e)}")
            return gpd.GeoDataFrame()

    

==================================================

File: c:\GH\ras-commander\ras_commander\HdfFluvialPluvial.py
==================================================
"""
Class: HdfFluvialPluvial

All of the methods in this class are static and are designed to be used without instantiation.

List of Functions in HdfFluvialPluvial:
- calculate_fluvial_pluvial_boundary()
- _process_cell_adjacencies()
- _identify_boundary_edges()

"""

from typing import Dict, List, Tuple
import pandas as pd
import geopandas as gpd
from collections import defaultdict
from shapely.geometry import LineString, MultiLineString  # Added MultiLineString import
from tqdm import tqdm
from .HdfMesh import HdfMesh
from .HdfUtils import HdfUtils
from .Decorators import standardize_input
from .HdfResultsMesh import HdfResultsMesh
from .LoggingConfig import get_logger
from pathlib import Path

logger = get_logger(__name__)

class HdfFluvialPluvial:
    """
    A class for analyzing and visualizing fluvial-pluvial boundaries in HEC-RAS 2D model results.

    This class provides methods to process and visualize HEC-RAS 2D model outputs,
    specifically focusing on the delineation of fluvial and pluvial flood areas.
    It includes functionality for calculating fluvial-pluvial boundaries based on
    the timing of maximum water surface elevations.

    Key Concepts:
    - Fluvial flooding: Flooding from rivers/streams
    - Pluvial flooding: Flooding from rainfall/surface water
    - Delta_t: Time threshold (in hours) used to distinguish between fluvial and pluvial cells.
               Cells with max WSE time differences greater than delta_t are considered boundaries.

    Data Requirements:
    - HEC-RAS plan HDF file containing:
        - 2D mesh cell geometry (accessed via HdfMesh)
        - Maximum water surface elevation times (accessed via HdfResultsMesh)

    Usage Example:
        >>> ras = init_ras_project(project_path, ras_version)
        >>> hdf_path = Path("path/to/plan.hdf")
        >>> boundary_gdf = HdfFluvialPluvial.calculate_fluvial_pluvial_boundary(
        ...     hdf_path, 
        ...     delta_t=12
        ... )
    """
    def __init__(self):
        self.logger = get_logger(__name__)  # Initialize logger with module name
    
    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def calculate_fluvial_pluvial_boundary(hdf_path: Path, delta_t: float = 12) -> gpd.GeoDataFrame:
        """
        Calculate the fluvial-pluvial boundary based on cell polygons and maximum water surface elevation times.

        Args:
            hdf_path (Path): Path to the HEC-RAS plan HDF file
            delta_t (float): Threshold time difference in hours. Cells with time differences
                        greater than this value are considered boundaries. Default is 12 hours.

        Returns:
            gpd.GeoDataFrame: GeoDataFrame containing the fluvial-pluvial boundaries with:
                - geometry: LineString features representing boundaries
                - CRS: Coordinate reference system matching the input HDF file

        Raises:
            ValueError: If no cell polygons or maximum water surface data found in HDF file
            Exception: If there are errors during boundary calculation

        Note:
            The returned boundaries represent locations where the timing of maximum water surface
            elevation changes significantly (> delta_t), indicating potential transitions between
            fluvial and pluvial flooding mechanisms.
        """
        try:
            # Get cell polygons from HdfMesh
            logger.info("Getting cell polygons from HDF file...")
            cell_polygons_gdf = HdfMesh.get_mesh_cell_polygons(hdf_path)
            if cell_polygons_gdf.empty:
                raise ValueError("No cell polygons found in HDF file")

            # Get max water surface data from HdfResultsMesh
            logger.info("Getting maximum water surface data from HDF file...")
            max_ws_df = HdfResultsMesh.get_mesh_max_ws(hdf_path)
            if max_ws_df.empty:
                raise ValueError("No maximum water surface data found in HDF file")

            # Convert timestamps using the renamed utility function
            logger.info("Converting maximum water surface timestamps...")
            if 'maximum_water_surface_time' in max_ws_df.columns:
                max_ws_df['maximum_water_surface_time'] = max_ws_df['maximum_water_surface_time'].apply(
                    lambda x: HdfUtils.parse_ras_datetime(x) if isinstance(x, str) else x
                )

            # Process cell adjacencies
            logger.info("Processing cell adjacencies...")
            cell_adjacency, common_edges = HdfFluvialPluvial._process_cell_adjacencies(cell_polygons_gdf)
            
            # Get cell times from max_ws_df
            logger.info("Extracting cell times from maximum water surface data...")
            cell_times = max_ws_df.set_index('cell_id')['maximum_water_surface_time'].to_dict()
            
            # Identify boundary edges
            logger.info("Identifying boundary edges...")
            boundary_edges = HdfFluvialPluvial._identify_boundary_edges(
                cell_adjacency, common_edges, cell_times, delta_t
            )

            # FOCUS YOUR REVISIONS HERE: 
            # Join adjacent LineStrings into simple LineStrings by connecting them at shared endpoints
            logger.info("Joining adjacent LineStrings into simple LineStrings...")
            
            def get_coords(geom):
                """Helper function to extract coordinates from geometry objects
                
                Args:
                    geom: A Shapely LineString or MultiLineString geometry
                
                Returns:
                    tuple: Tuple containing:
                        - list of original coordinates [(x1,y1), (x2,y2),...]
                        - list of rounded coordinates for comparison
                        - None if invalid geometry
                """
                if isinstance(geom, LineString):
                    orig_coords = list(geom.coords)
                    # Round coordinates to 0.01 for comparison
                    rounded_coords = [(round(x, 2), round(y, 2)) for x, y in orig_coords]
                    return orig_coords, rounded_coords
                elif isinstance(geom, MultiLineString):
                    orig_coords = list(geom.geoms[0].coords)
                    rounded_coords = [(round(x, 2), round(y, 2)) for x, y in orig_coords]
                    return orig_coords, rounded_coords
                return None, None

            def find_connecting_line(current_end, unused_lines, endpoint_counts, rounded_endpoints):
                """Find a line that connects to the current endpoint
                
                Args:
                    current_end: Tuple of (x, y) coordinates
                    unused_lines: Set of unused line indices
                    endpoint_counts: Dict of endpoint occurrence counts
                    rounded_endpoints: Dict of rounded endpoint coordinates
                
                Returns:
                    tuple: (line_index, should_reverse, found) or (None, None, False)
                """
                rounded_end = (round(current_end[0], 2), round(current_end[1], 2))
                
                # Skip if current endpoint is connected to more than 2 lines
                if endpoint_counts.get(rounded_end, 0) > 2:
                    return None, None, False
                
                for i in unused_lines:
                    start, end = rounded_endpoints[i]
                    if start == rounded_end and endpoint_counts.get(start, 0) <= 2:
                        return i, False, True
                    elif end == rounded_end and endpoint_counts.get(end, 0) <= 2:
                        return i, True, True
                return None, None, False

            # Initialize data structures
            joined_lines = []
            unused_lines = set(range(len(boundary_edges)))
            
            # Create endpoint lookup dictionaries
            line_endpoints = {}
            rounded_endpoints = {}
            for i, edge in enumerate(boundary_edges):
                coords_result = get_coords(edge)
                if coords_result:
                    orig_coords, rounded_coords = coords_result
                    line_endpoints[i] = (orig_coords[0], orig_coords[-1])
                    rounded_endpoints[i] = (rounded_coords[0], rounded_coords[-1])

            # Count endpoint occurrences
            endpoint_counts = {}
            for start, end in rounded_endpoints.values():
                endpoint_counts[start] = endpoint_counts.get(start, 0) + 1
                endpoint_counts[end] = endpoint_counts.get(end, 0) + 1

            # Iteratively join lines
            while unused_lines:
                # Start a new line chain
                current_points = []
                
                # Find first unused line
                start_idx = unused_lines.pop()
                start_coords, _ = get_coords(boundary_edges[start_idx])
                if start_coords:
                    current_points.extend(start_coords)
                
                # Try to extend in both directions
                continue_joining = True
                while continue_joining:
                    continue_joining = False
                    
                    # Try to extend forward
                    next_idx, should_reverse, found = find_connecting_line(
                        current_points[-1], 
                        unused_lines,
                        endpoint_counts,
                        rounded_endpoints
                    )
                    
                    if found:
                        unused_lines.remove(next_idx)
                        next_coords, _ = get_coords(boundary_edges[next_idx])
                        if next_coords:
                            if should_reverse:
                                current_points.extend(reversed(next_coords[:-1]))
                            else:
                                current_points.extend(next_coords[1:])
                        continue_joining = True
                        continue
                    
                    # Try to extend backward
                    prev_idx, should_reverse, found = find_connecting_line(
                        current_points[0], 
                        unused_lines,
                        endpoint_counts,
                        rounded_endpoints
                    )
                    
                    if found:
                        unused_lines.remove(prev_idx)
                        prev_coords, _ = get_coords(boundary_edges[prev_idx])
                        if prev_coords:
                            if should_reverse:
                                current_points[0:0] = reversed(prev_coords[:-1])
                            else:
                                current_points[0:0] = prev_coords[:-1]
                        continue_joining = True
                
                # Create final LineString from collected points
                if current_points:
                    joined_lines.append(LineString(current_points))

            # FILL GAPS BETWEEN JOINED LINES
            logger.info(f"Starting gap analysis for {len(joined_lines)} line segments...")
            
            def find_endpoints(lines):
                """Get all endpoints of the lines with their indices"""
                endpoints = []
                for i, line in enumerate(lines):
                    coords = list(line.coords)
                    endpoints.append((coords[0], i, 'start'))
                    endpoints.append((coords[-1], i, 'end'))
                return endpoints
            
            def find_nearby_points(point1, point2, tolerance=0.01):
                """Check if two points are within tolerance distance"""
                return (abs(point1[0] - point2[0]) <= tolerance and 
                       abs(point1[1] - point2[1]) <= tolerance)
            
            def find_gaps(lines, tolerance=0.01):
                """Find gaps between line endpoints"""
                logger.info("Analyzing line endpoints to identify gaps...")
                endpoints = []
                for i, line in enumerate(lines):
                    coords = list(line.coords)
                    start = coords[0]
                    end = coords[-1]
                    endpoints.append({
                        'point': start,
                        'line_idx': i,
                        'position': 'start',
                        'coords': coords
                    })
                    endpoints.append({
                        'point': end,
                        'line_idx': i,
                        'position': 'end',
                        'coords': coords
                    })
                
                logger.info(f"Found {len(endpoints)} endpoints to analyze")
                gaps = []
                
                # Compare each endpoint with all others
                for i, ep1 in enumerate(endpoints):
                    for ep2 in endpoints[i+1:]:
                        # Skip if endpoints are from same line
                        if ep1['line_idx'] == ep2['line_idx']:
                            continue
                            
                        point1 = ep1['point']
                        point2 = ep2['point']
                        
                        # Skip if points are too close (already connected)
                        if find_nearby_points(point1, point2):
                            continue
                            
                        # Check if this could be a gap
                        dist = LineString([point1, point2]).length
                        if dist < 10.0:  # Maximum gap distance threshold
                            gaps.append({
                                'start': ep1,
                                'end': ep2,
                                'distance': dist
                            })
                
                logger.info(f"Identified {len(gaps)} potential gaps to fill")
                return sorted(gaps, key=lambda x: x['distance'])

            def join_lines_with_gap(line1_coords, line2_coords, gap_start_pos, gap_end_pos):
                """Join two lines maintaining correct point order based on gap positions"""
                if gap_start_pos == 'end' and gap_end_pos == 'start':
                    # line1 end connects to line2 start
                    return line1_coords + line2_coords
                elif gap_start_pos == 'start' and gap_end_pos == 'end':
                    # line1 start connects to line2 end
                    return list(reversed(line2_coords)) + line1_coords
                elif gap_start_pos == 'end' and gap_end_pos == 'end':
                    # line1 end connects to line2 end
                    return line1_coords + list(reversed(line2_coords))
                else:  # start to start
                    # line1 start connects to line2 start
                    return list(reversed(line1_coords)) + line2_coords

            # Process gaps and join lines
            processed_lines = joined_lines.copy()
            line_groups = [[i] for i in range(len(processed_lines))]
            gaps = find_gaps(processed_lines)
            
            filled_gap_count = 0
            for gap_idx, gap in enumerate(gaps, 1):
                logger.info(f"Processing gap {gap_idx}/{len(gaps)} (distance: {gap['distance']:.3f})")
                
                line1_idx = gap['start']['line_idx']
                line2_idx = gap['end']['line_idx']
                
                # Find the groups containing these lines
                group1 = next(g for g in line_groups if line1_idx in g)
                group2 = next(g for g in line_groups if line2_idx in g)
                
                # Skip if lines are already in the same group
                if group1 == group2:
                    continue
                
                # Get the coordinates for both lines
                line1_coords = gap['start']['coords']
                line2_coords = gap['end']['coords']
                
                # Join the lines in correct order
                joined_coords = join_lines_with_gap(
                    line1_coords,
                    line2_coords,
                    gap['start']['position'],
                    gap['end']['position']
                )
                
                # Create new joined line
                new_line = LineString(joined_coords)
                
                # Update processed_lines and line_groups
                new_idx = len(processed_lines)
                processed_lines.append(new_line)
                
                # Merge groups and remove old ones
                new_group = group1 + group2
                line_groups.remove(group1)
                line_groups.remove(group2)
                line_groups.append(new_group + [new_idx])
                
                filled_gap_count += 1
                logger.info(f"Successfully joined lines {line1_idx} and {line2_idx}")
            
            logger.info(f"Gap filling complete. Filled {filled_gap_count} out of {len(gaps)} gaps")
            
            # Get final lines (take the last line from each group)
            final_lines = [processed_lines[group[-1]] for group in line_groups]
            
            logger.info(f"Final cleanup complete. Resulting in {len(final_lines)} line segments")
            joined_lines = final_lines

            # Create final GeoDataFrame with CRS from cell_polygons_gdf
            logger.info("Creating final GeoDataFrame for boundaries...")
            boundary_gdf = gpd.GeoDataFrame(
                geometry=joined_lines, 
                crs=cell_polygons_gdf.crs
            )

            # Clean up intermediate dataframes
            logger.info("Cleaning up intermediate dataframes...")
            del cell_polygons_gdf
            del max_ws_df

            logger.info("Fluvial-pluvial boundary calculation completed successfully.")
            return boundary_gdf

        except Exception as e:
            self.logger.error(f"Error calculating fluvial-pluvial boundary: {str(e)}")
            return None
        
        
    @staticmethod
    def _process_cell_adjacencies(cell_polygons_gdf: gpd.GeoDataFrame) -> Tuple[Dict[int, List[int]], Dict[int, Dict[int, LineString]]]:
        """
        Optimized method to process cell adjacencies by extracting shared edges directly.
        
        Args:
            cell_polygons_gdf (gpd.GeoDataFrame): GeoDataFrame containing 2D mesh cell polygons
                                                   with 'cell_id' and 'geometry' columns.

        Returns:
            Tuple containing:
                - Dict[int, List[int]]: Dictionary mapping cell IDs to lists of adjacent cell IDs.
                - Dict[int, Dict[int, LineString]]: Nested dictionary storing common edges between cells,
                                                    where common_edges[cell1][cell2] gives the shared boundary.
        """
        cell_adjacency = defaultdict(list)
        common_edges = defaultdict(dict)

        # Build an edge to cells mapping
        edge_to_cells = defaultdict(set)

        # Function to generate edge keys
        def edge_key(coords1, coords2, precision=8):
            # Round coordinates
            coords1 = tuple(round(coord, precision) for coord in coords1)
            coords2 = tuple(round(coord, precision) for coord in coords2)
            # Create sorted key to handle edge direction
            return tuple(sorted([coords1, coords2]))

        # For each polygon, extract edges
        for idx, row in cell_polygons_gdf.iterrows():
            cell_id = row['cell_id']
            geom = row['geometry']
            if geom.is_empty or not geom.is_valid:
                continue
            # Get exterior coordinates
            coords = list(geom.exterior.coords)
            num_coords = len(coords)
            for i in range(num_coords - 1):
                coord1 = coords[i]
                coord2 = coords[i + 1]
                key = edge_key(coord1, coord2)
                edge_to_cells[key].add(cell_id)

        # Now, process edge_to_cells to build adjacency
        for edge, cells in edge_to_cells.items():
            cells = list(cells)
            if len(cells) >= 2:
                # For all pairs of cells sharing this edge
                for i in range(len(cells)):
                    for j in range(i + 1, len(cells)):
                        cell1 = cells[i]
                        cell2 = cells[j]
                        # Update adjacency
                        if cell2 not in cell_adjacency[cell1]:
                            cell_adjacency[cell1].append(cell2)
                        if cell1 not in cell_adjacency[cell2]:
                            cell_adjacency[cell2].append(cell1)
                        # Store common edge
                        common_edge = LineString([edge[0], edge[1]])
                        common_edges[cell1][cell2] = common_edge
                        common_edges[cell2][cell1] = common_edge

        logger.info("Cell adjacencies processed successfully.")
        return cell_adjacency, common_edges

    @staticmethod
    def _identify_boundary_edges(cell_adjacency: Dict[int, List[int]], 
                               common_edges: Dict[int, Dict[int, LineString]], 
                               cell_times: Dict[int, pd.Timestamp], 
                               delta_t: float) -> List[LineString]:
        """
        Identify boundary edges between cells with significant time differences.

        Args:
            cell_adjacency (Dict[int, List[int]]): Dictionary of cell adjacencies
            common_edges (Dict[int, Dict[int, LineString]]): Dictionary of shared edges between cells
            cell_times (Dict[int, pd.Timestamp]): Dictionary mapping cell IDs to their max WSE times
            delta_t (float): Time threshold in hours

        Returns:
            List[LineString]: List of LineString geometries representing boundaries
        """
        # Validate cell_times data
        valid_times = {k: v for k, v in cell_times.items() if pd.notna(v)}
        if len(valid_times) < len(cell_times):
            logger.warning(f"Found {len(cell_times) - len(valid_times)} cells with invalid timestamps")
            cell_times = valid_times

        # Use a set to store processed cell pairs and avoid duplicates
        processed_pairs = set()
        boundary_edges = []
        
        # Track time differences for debugging
        time_diffs = []

        with tqdm(total=len(cell_adjacency), desc="Processing cell adjacencies") as pbar:
            for cell_id, neighbors in cell_adjacency.items():
                if cell_id not in cell_times:
                    logger.debug(f"Skipping cell {cell_id} - no timestamp data")
                    pbar.update(1)
                    continue
                    
                cell_time = cell_times[cell_id]

                for neighbor_id in neighbors:
                    if neighbor_id not in cell_times:
                        logger.debug(f"Skipping neighbor {neighbor_id} of cell {cell_id} - no timestamp data")
                        continue
                        
                    # Create a sorted tuple of the cell pair to ensure uniqueness
                    cell_pair = tuple(sorted([cell_id, neighbor_id]))
                    
                    # Skip if we've already processed this pair
                    if cell_pair in processed_pairs:
                        continue
                        
                    neighbor_time = cell_times[neighbor_id]
                    
                    # Ensure both timestamps are valid
                    if pd.isna(cell_time) or pd.isna(neighbor_time):
                        continue
                    
                    # Calculate time difference in hours
                    time_diff = abs((cell_time - neighbor_time).total_seconds() / 3600)
                    time_diffs.append(time_diff)
                    
                    logger.debug(f"Time difference between cells {cell_id} and {neighbor_id}: {time_diff:.2f} hours")

                    if time_diff >= delta_t:
                        logger.debug(f"Found boundary edge between cells {cell_id} and {neighbor_id} "
                                   f"(time diff: {time_diff:.2f} hours)")
                        boundary_edges.append(common_edges[cell_id][neighbor_id])
                    
                    # Mark this pair as processed
                    processed_pairs.add(cell_pair)

                pbar.update(1)

        # Log summary statistics
        if time_diffs:
            logger.info(f"Time difference statistics:")
            logger.info(f"  Min: {min(time_diffs):.2f} hours")
            logger.info(f"  Max: {max(time_diffs):.2f} hours")
            logger.info(f"  Mean: {sum(time_diffs)/len(time_diffs):.2f} hours")
            logger.info(f"  Number of boundaries found: {len(boundary_edges)}")
            logger.info(f"  Delta-t threshold: {delta_t} hours")

        return boundary_edges
==================================================

File: c:\GH\ras-commander\ras_commander\HdfInfiltration.py
==================================================
"""
Class: HdfInfiltration

A comprehensive class for handling infiltration-related operations in HEC-RAS HDF geometry files.
This class provides methods for managing infiltration parameters, soil statistics, and raster data processing.

Key Features:
- Infiltration parameter management (scaling, setting, retrieving)
- Soil statistics calculation and analysis
- Raster data processing and mapping
- Weighted parameter calculations
- Data export and file management

Methods:
1. Geometry File Base Override Management:
   - scale_infiltration_data(): Updates infiltration parameters with scaling factors in geometry file
   - get_infiltration_data(): Retrieves current infiltration parameters from geometry file
   - set_infiltration_table(): Sets infiltration parameters directly in geometry file

2. Raster and Mapping Operations (uses rasmap_df HDF files):
   - get_infiltration_map(): Reads infiltration raster map from rasmap_df HDF file
   - calculate_soil_statistics(): Processes zonal statistics for soil analysis

3. Soil Analysis (uses rasmap_df HDF files):
   - get_significant_mukeys(): Identifies mukeys above percentage threshold
   - calculate_total_significant_percentage(): Computes total coverage of significant mukeys
   - get_infiltration_parameters(): Retrieves parameters for specific mukey
   - calculate_weighted_parameters(): Computes weighted average parameters

4. Data Management (uses rasmap_df HDF files):
   - save_statistics(): Exports soil statistics to CSV

Constants:
- SQM_TO_ACRE: Conversion factor from square meters to acres (0.000247105)
- SQM_TO_SQMILE: Conversion factor from square meters to square miles (3.861e-7)

Dependencies:
- pathlib: Path handling
- pandas: Data manipulation
- geopandas: Geospatial data processing
- h5py: HDF file operations
- rasterstats: Zonal statistics calculation (optional)

Note:
- Methods in section 1 work with base overrides in geometry files
- Methods in sections 2-4 work with HDF files from rasmap_df by default
- All methods are static and decorated with @standardize_input and @log_call
- The class is designed to work with both HEC-RAS geometry files and rasmap_df HDF files
"""
from pathlib import Path
import h5py
import numpy as np
import pandas as pd
from typing import Optional, Dict, Any, List, Tuple
import logging
from .HdfBase import HdfBase
from .HdfUtils import HdfUtils
from .Decorators import standardize_input, log_call
from .LoggingConfig import setup_logging, get_logger

logger = get_logger(__name__)
        
from pathlib import Path
import pandas as pd
import geopandas as gpd
import h5py

from .Decorators import log_call, standardize_input

class HdfInfiltration:
        
    """
    A class for handling infiltration-related operations on HEC-RAS HDF geometry files.

    This class provides methods to extract and modify infiltration data from HEC-RAS HDF geometry files,
    including base overrides of infiltration parameters.
    """

    # Constants for unit conversion
    SQM_TO_ACRE = 0.000247105
    SQM_TO_SQMILE = 3.861e-7
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)


    @staticmethod
    @log_call 
    def get_infiltration_baseoverrides(hdf_path: Path) -> Optional[pd.DataFrame]:
        """
        Retrieve current infiltration parameters from a HEC-RAS geometry HDF file.
        Dynamically reads whatever columns are present in the table.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file

        Returns
        -------
        Optional[pd.DataFrame]
            DataFrame containing infiltration parameters if successful, None if operation fails
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                table_path = '/Geometry/Infiltration/Base Overrides'
                if table_path not in hdf_file:
                    logger.warning(f"No infiltration data found in {hdf_path}")
                    return None

                # Get column info
                col_names, _, _ = HdfInfiltration._get_table_info(hdf_file, table_path)
                if not col_names:
                    logger.error(f"No columns found in infiltration table")
                    return None
                    
                # Read data
                data = hdf_file[table_path][()]
                
                # Convert to DataFrame
                df_dict = {}
                for col in col_names:
                    values = data[col]
                    # Convert byte strings to regular strings if needed
                    if values.dtype.kind == 'S':
                        values = [v.decode('utf-8').strip() for v in values]
                    df_dict[col] = values
                
                return pd.DataFrame(df_dict)

        except Exception as e:
            logger.error(f"Error reading infiltration data from {hdf_path}: {str(e)}")
            return None
        


    # set_infiltration_baseoverrides goes here, once finalized tested and fixed. 



    # Since the infiltration base overrides are in the geometry file, the above functions work on the geometry files
    # The below functions work on the infiltration layer HDF files.  Changes only take effect if no base overrides are present. 
           
    @staticmethod
    @log_call 
    def get_infiltration_layer_data(hdf_path: Path) -> Optional[pd.DataFrame]:
        """
        Retrieve current infiltration parameters from a HEC-RAS infiltration layer HDF file.
        Extracts the Variables dataset which contains the layer data.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS infiltration layer HDF file

        Returns
        -------
        Optional[pd.DataFrame]
            DataFrame containing infiltration parameters if successful, None if operation fails
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                variables_path = '//Variables'
                if variables_path not in hdf_file:
                    logger.warning(f"No Variables dataset found in {hdf_path}")
                    return None
                
                # Read data from Variables dataset
                data = hdf_file[variables_path][()]
                
                # Convert to DataFrame
                df_dict = {}
                for field_name in data.dtype.names:
                    values = data[field_name]
                    # Convert byte strings to regular strings if needed
                    if values.dtype.kind == 'S':
                        values = [v.decode('utf-8').strip() for v in values]
                    df_dict[field_name] = values
                
                return pd.DataFrame(df_dict)

        except Exception as e:
            logger.error(f"Error reading infiltration layer data from {hdf_path}: {str(e)}")
            return None
        

    @staticmethod
    @log_call
    def set_infiltration_layer_data(
        hdf_path: Path,
        infiltration_df: pd.DataFrame
    ) -> Optional[pd.DataFrame]:
        """
        Set infiltration layer data in the infiltration layer HDF file directly from the provided DataFrame.
        # NOTE: This will not work if there are base overrides present in the Geometry HDF file. 
        Updates the Variables dataset with the provided data.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS infiltration layer HDF file
        infiltration_df : pd.DataFrame
            DataFrame containing infiltration parameters with columns:
            - Name (string)
            - Curve Number (float)
            - Abstraction Ratio (float)
            - Minimum Infiltration Rate (float)

        Returns
        -------
        Optional[pd.DataFrame]
            The infiltration DataFrame if successful, None if operation fails
        """
        try:
            variables_path = '//Variables'
            
            # Validate required columns
            required_columns = ['Name', 'Curve Number', 'Abstraction Ratio', 'Minimum Infiltration Rate']
            missing_columns = [col for col in required_columns if col not in infiltration_df.columns]
            if missing_columns:
                raise ValueError(f"Missing required columns: {missing_columns}")
            
            with h5py.File(hdf_path, 'a') as hdf_file:
                # Delete existing dataset if it exists
                if variables_path in hdf_file:
                    del hdf_file[variables_path]

                # Create dtype for structured array
                dt = np.dtype([
                    ('Name', f'S{infiltration_df["Name"].str.len().max()}'),
                    ('Curve Number', 'f4'),
                    ('Abstraction Ratio', 'f4'),
                    ('Minimum Infiltration Rate', 'f4')
                ])

                # Create structured array
                structured_array = np.zeros(infiltration_df.shape[0], dtype=dt)
                
                # Fill structured array
                structured_array['Name'] = infiltration_df['Name'].values.astype(f'|S{dt["Name"].itemsize}')
                structured_array['Curve Number'] = infiltration_df['Curve Number'].values
                structured_array['Abstraction Ratio'] = infiltration_df['Abstraction Ratio'].values
                structured_array['Minimum Infiltration Rate'] = infiltration_df['Minimum Infiltration Rate'].values

                # Create new dataset
                hdf_file.create_dataset(
                    variables_path,
                    data=structured_array,
                    dtype=dt,
                    compression='gzip',
                    compression_opts=1,
                    chunks=(100,),
                    maxshape=(None,)
                )

            return infiltration_df

        except Exception as e:
            logger.error(f"Error setting infiltration layer data in {hdf_path}: {str(e)}")
            return None
        



    @staticmethod
    @standardize_input(file_type='geom_hdf')
    @log_call
    def scale_infiltration_data(
        hdf_path: Path,
        infiltration_df: pd.DataFrame,
        scale_factors: Dict[str, float]
    ) -> Optional[pd.DataFrame]:
        """
        Update infiltration parameters in the HDF file with scaling factors.
        Supports any numeric columns present in the DataFrame.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file
        infiltration_df : pd.DataFrame
            DataFrame containing infiltration parameters
        scale_factors : Dict[str, float]
            Dictionary mapping column names to their scaling factors

        Returns
        -------
        Optional[pd.DataFrame]
            The updated infiltration DataFrame if successful, None if operation fails
        """
        try:
            # Make a copy to avoid modifying the input DataFrame
            infiltration_df = infiltration_df.copy()
            
            # Apply scaling factors to specified columns
            for col, factor in scale_factors.items():
                if col in infiltration_df.columns and pd.api.types.is_numeric_dtype(infiltration_df[col]):
                    infiltration_df[col] *= factor
                else:
                    logger.warning(f"Column {col} not found or not numeric - skipping scaling")

            # Use set_infiltration_table to write the scaled data
            return HdfInfiltration.set_infiltration_table(hdf_path, infiltration_df)

        except Exception as e:
            logger.error(f"Error scaling infiltration data in {hdf_path}: {str(e)}")
            return None



    # Need to reorganize these soil staatistics functions so they are more straightforward.  


    @staticmethod
    @log_call
    @standardize_input(file_type='geom_hdf')
    def get_soils_raster_stats(
        geom_hdf_path: Path,
        soil_hdf_path: Path = None,
        ras_object: Any = None
    ) -> pd.DataFrame:
        """
        Calculate soil group statistics for each 2D flow area using the area's perimeter.
        
        Parameters
        ----------
        geom_hdf_path : Path
            Path to the HEC-RAS geometry HDF file containing the 2D flow areas
        soil_hdf_path : Path, optional
            Path to the soil HDF file. If None, uses soil_layer_path from rasmap_df
        ras_object : Any, optional
            Optional RAS object. If not provided, uses global ras instance
            
        Returns
        -------
        pd.DataFrame
            DataFrame with soil statistics for each 2D flow area, including:
            - mesh_name: Name of the 2D flow area
            - mukey: Soil mukey identifier
            - percentage: Percentage of 2D flow area covered by this soil type
            - area_sqm: Area in square meters
            - area_acres: Area in acres
            - area_sqmiles: Area in square miles
        
        Notes
        -----
        Requires the rasterstats package to be installed.
        """
        try:
            from rasterstats import zonal_stats
            import shapely
            import geopandas as gpd
            import numpy as np
            import tempfile
            import os
        except ImportError as e:
            logger.error(f"Failed to import required package: {e}. Please run 'pip install rasterstats shapely geopandas'")
            raise e
        
        # Import here to avoid circular imports
        from .HdfMesh import HdfMesh
        
        # Get the soil HDF path
        if soil_hdf_path is None:
            if ras_object is None:
                from .RasPrj import ras
                ras_object = ras
            
            # Try to get soil_layer_path from rasmap_df
            try:
                soil_hdf_path = Path(ras_object.rasmap_df.loc[0, 'soil_layer_path'][0])
                if not soil_hdf_path.exists():
                    logger.warning(f"Soil HDF path from rasmap_df does not exist: {soil_hdf_path}")
                    return pd.DataFrame()
            except (KeyError, IndexError, AttributeError, TypeError) as e:
                logger.error(f"Error retrieving soil_layer_path from rasmap_df: {str(e)}")
                return pd.DataFrame()
        
        # Get infiltration map - pass as hdf_path to ensure standardize_input works correctly
        try:
            raster_map = HdfInfiltration.get_infiltration_map(hdf_path=soil_hdf_path, ras_object=ras_object)
            if not raster_map:
                logger.error(f"No infiltration map found in {soil_hdf_path}")
                return pd.DataFrame()
        except Exception as e:
            logger.error(f"Error getting infiltration map: {str(e)}")
            return pd.DataFrame()
        
        # Get 2D flow areas
        mesh_areas = HdfMesh.get_mesh_areas(geom_hdf_path)
        if mesh_areas.empty:
            logger.warning(f"No 2D flow areas found in {geom_hdf_path}")
            return pd.DataFrame()
        
        # Extract the raster data for analysis
        tif_path = soil_hdf_path.with_suffix('.tif')
        if not tif_path.exists():
            logger.error(f"No raster file found at {tif_path}")
            return pd.DataFrame()
            
        # Read the raster data and info
        import rasterio
        with rasterio.open(tif_path) as src:
            grid_data = src.read(1)
            
            # Get transform directly from rasterio
            transform = src.transform
            no_data = src.nodata if src.nodata is not None else -9999
            
            # List to store all results
            all_results = []
            
            # Calculate zonal statistics for each 2D flow area
            for _, mesh_row in mesh_areas.iterrows():
                mesh_name = mesh_row['mesh_name']
                mesh_geom = mesh_row['geometry']
                
                # Get zonal statistics directly using numpy array
                try:
                    stats = zonal_stats(
                        mesh_geom,
                        grid_data,
                        affine=transform,
                        categorical=True,
                        nodata=no_data
                    )[0]
                    
                    # Skip if no stats
                    if not stats:
                        logger.warning(f"No soil data found for 2D flow area: {mesh_name}")
                        continue
                    
                    # Calculate total area and percentages
                    total_area_sqm = sum(stats.values())
                    
                    # Process each mukey
                    for raster_val, area_sqm in stats.items():
                        # Skip NoData values
                        if raster_val is None or raster_val == no_data:
                            continue
                            
                        try:
                            mukey = raster_map.get(int(raster_val), f"Unknown-{raster_val}")
                        except (ValueError, TypeError):
                            mukey = f"Unknown-{raster_val}"
                            
                        percentage = (area_sqm / total_area_sqm) * 100 if total_area_sqm > 0 else 0
                        
                        all_results.append({
                            'mesh_name': mesh_name,
                            'mukey': mukey,
                            'percentage': percentage,
                            'area_sqm': area_sqm,
                            'area_acres': area_sqm * HdfInfiltration.SQM_TO_ACRE,
                            'area_sqmiles': area_sqm * HdfInfiltration.SQM_TO_SQMILE
                        })
                except Exception as e:
                    logger.error(f"Error calculating statistics for mesh {mesh_name}: {str(e)}")
                    continue
        
        # Create DataFrame with results
        results_df = pd.DataFrame(all_results)
        
        # Sort by mesh_name and percentage (descending)
        if not results_df.empty:
            results_df = results_df.sort_values(['mesh_name', 'percentage'], ascending=[True, False])
        
        return results_df






    @staticmethod
    @log_call
    @standardize_input(file_type='geom_hdf')
    def get_soil_raster_stats(
        geom_hdf_path: Path,
        landcover_hdf_path: Path = None,
        soil_hdf_path: Path = None,
        ras_object: Any = None
    ) -> pd.DataFrame:
        """
        Calculate combined land cover and soil infiltration statistics for each 2D flow area.
        
        This function processes both land cover and soil data to calculate statistics
        for each combination (Land Cover : Soil Type) within each 2D flow area.
        
        Parameters
        ----------
        geom_hdf_path : Path
            Path to the HEC-RAS geometry HDF file containing the 2D flow areas
        landcover_hdf_path : Path, optional
            Path to the land cover HDF file. If None, uses landcover_hdf_path from rasmap_df
        soil_hdf_path : Path, optional
            Path to the soil HDF file. If None, uses soil_layer_path from rasmap_df
        ras_object : Any, optional
            Optional RAS object. If not provided, uses global ras instance
            
        Returns
        -------
        pd.DataFrame
            DataFrame with combined statistics for each 2D flow area, including:
            - mesh_name: Name of the 2D flow area
            - combined_type: Combined land cover and soil type (e.g. "Mixed Forest : B")
            - percentage: Percentage of 2D flow area covered by this combination
            - area_sqm: Area in square meters
            - area_acres: Area in acres
            - area_sqmiles: Area in square miles
            - curve_number: Curve number for this combination
            - abstraction_ratio: Abstraction ratio for this combination
            - min_infiltration_rate: Minimum infiltration rate for this combination
        
        Notes
        -----
        Requires the rasterstats package to be installed.
        """
        try:
            from rasterstats import zonal_stats
            import shapely
            import geopandas as gpd
            import numpy as np
            import tempfile
            import os
            import rasterio
            from rasterio.merge import merge
        except ImportError as e:
            logger.error(f"Failed to import required package: {e}. Please run 'pip install rasterstats shapely geopandas rasterio'")
            raise e
        
        # Import here to avoid circular imports
        from .HdfMesh import HdfMesh
        
        # Get RAS object
        if ras_object is None:
            from .RasPrj import ras
            ras_object = ras
        
        # Get the landcover HDF path
        if landcover_hdf_path is None:
            try:
                landcover_hdf_path = Path(ras_object.rasmap_df.loc[0, 'landcover_hdf_path'][0])
                if not landcover_hdf_path.exists():
                    logger.warning(f"Land cover HDF path from rasmap_df does not exist: {landcover_hdf_path}")
                    return pd.DataFrame()
            except (KeyError, IndexError, AttributeError, TypeError) as e:
                logger.error(f"Error retrieving landcover_hdf_path from rasmap_df: {str(e)}")
                return pd.DataFrame()
        
        # Get the soil HDF path
        if soil_hdf_path is None:
            try:
                soil_hdf_path = Path(ras_object.rasmap_df.loc[0, 'soil_layer_path'][0])
                if not soil_hdf_path.exists():
                    logger.warning(f"Soil HDF path from rasmap_df does not exist: {soil_hdf_path}")
                    return pd.DataFrame()
            except (KeyError, IndexError, AttributeError, TypeError) as e:
                logger.error(f"Error retrieving soil_layer_path from rasmap_df: {str(e)}")
                return pd.DataFrame()
        
        # Get land cover map (raster to ID mapping)
        try:
            with h5py.File(landcover_hdf_path, 'r') as hdf:
                if '//Raster Map' not in hdf:
                    logger.error(f"No Raster Map found in {landcover_hdf_path}")
                    return pd.DataFrame()
                
                landcover_map_data = hdf['//Raster Map'][()]
                landcover_map = {int(item[0]): item[1].decode('utf-8').strip() for item in landcover_map_data}
        except Exception as e:
            logger.error(f"Error reading land cover data from HDF: {str(e)}")
            return pd.DataFrame()
        
        # Get soil map (raster to ID mapping)
        try:
            soil_map = HdfInfiltration.get_infiltration_map(hdf_path=soil_hdf_path, ras_object=ras_object)
            if not soil_map:
                logger.error(f"No soil map found in {soil_hdf_path}")
                return pd.DataFrame()
        except Exception as e:
            logger.error(f"Error getting soil map: {str(e)}")
            return pd.DataFrame()
        
        # Get infiltration parameters
        try:
            infiltration_params = HdfInfiltration.get_infiltration_layer_data(soil_hdf_path)
            if infiltration_params is None or infiltration_params.empty:
                logger.warning(f"No infiltration parameters found in {soil_hdf_path}")
                infiltration_params = pd.DataFrame(columns=['Name', 'Curve Number', 'Abstraction Ratio', 'Minimum Infiltration Rate'])
        except Exception as e:
            logger.error(f"Error getting infiltration parameters: {str(e)}")
            infiltration_params = pd.DataFrame(columns=['Name', 'Curve Number', 'Abstraction Ratio', 'Minimum Infiltration Rate'])
        
        # Get 2D flow areas
        mesh_areas = HdfMesh.get_mesh_areas(geom_hdf_path)
        if mesh_areas.empty:
            logger.warning(f"No 2D flow areas found in {geom_hdf_path}")
            return pd.DataFrame()
        
        # Check for the TIF files with same name as HDF
        landcover_tif_path = landcover_hdf_path.with_suffix('.tif')
        soil_tif_path = soil_hdf_path.with_suffix('.tif')
        
        if not landcover_tif_path.exists():
            logger.error(f"No land cover raster file found at {landcover_tif_path}")
            return pd.DataFrame()
        
        if not soil_tif_path.exists():
            logger.error(f"No soil raster file found at {soil_tif_path}")
            return pd.DataFrame()
        
        # List to store all results
        all_results = []
        
        # Read the raster data
        try:
            with rasterio.open(landcover_tif_path) as landcover_src, rasterio.open(soil_tif_path) as soil_src:
                landcover_nodata = landcover_src.nodata if landcover_src.nodata is not None else -9999
                soil_nodata = soil_src.nodata if soil_src.nodata is not None else -9999
                
                # Calculate zonal statistics for each 2D flow area
                for _, mesh_row in mesh_areas.iterrows():
                    mesh_name = mesh_row['mesh_name']
                    mesh_geom = mesh_row['geometry']
                    
                    # Get zonal statistics for land cover
                    try:
                        landcover_stats = zonal_stats(
                            mesh_geom,
                            landcover_tif_path,
                            categorical=True,
                            nodata=landcover_nodata
                        )[0]
                        
                        # Get zonal statistics for soil
                        soil_stats = zonal_stats(
                            mesh_geom,
                            soil_tif_path,
                            categorical=True,
                            nodata=soil_nodata
                        )[0]
                        
                        # Skip if no stats
                        if not landcover_stats or not soil_stats:
                            logger.warning(f"No land cover or soil data found for 2D flow area: {mesh_name}")
                            continue
                        
                        # Calculate total area
                        landcover_total = sum(landcover_stats.values())
                        soil_total = sum(soil_stats.values())
                        
                        # Create a cross-tabulation of land cover and soil types
                        # This is an approximation since we don't have the exact pixel-by-pixel overlap
                        mesh_area_sqm = mesh_row['geometry'].area
                        
                        # Calculate percentage of each land cover type
                        landcover_pct = {k: v/landcover_total for k, v in landcover_stats.items() if k is not None and k != landcover_nodata}
                        
                        # Calculate percentage of each soil type
                        soil_pct = {k: v/soil_total for k, v in soil_stats.items() if k is not None and k != soil_nodata}
                        
                        # Generate combinations
                        for lc_id, lc_pct in landcover_pct.items():
                            lc_name = landcover_map.get(int(lc_id), f"Unknown-{lc_id}")
                            
                            for soil_id, soil_pct in soil_pct.items():
                                try:
                                    soil_name = soil_map.get(int(soil_id), f"Unknown-{soil_id}")
                                except (ValueError, TypeError):
                                    soil_name = f"Unknown-{soil_id}"
                                
                                # Calculate combined percentage (approximate)
                                # This is a simplification; actual overlap would require pixel-by-pixel analysis
                                combined_pct = lc_pct * soil_pct * 100
                                combined_area_sqm = mesh_area_sqm * (combined_pct / 100)
                                
                                # Create combined name
                                combined_name = f"{lc_name} : {soil_name}"
                                
                                # Look up infiltration parameters
                                param_row = infiltration_params[infiltration_params['Name'] == combined_name]
                                if param_row.empty:
                                    # Try with NoData for soil type
                                    param_row = infiltration_params[infiltration_params['Name'] == f"{lc_name} : NoData"]
                                
                                if not param_row.empty:
                                    curve_number = param_row.iloc[0]['Curve Number']
                                    abstraction_ratio = param_row.iloc[0]['Abstraction Ratio']
                                    min_infiltration_rate = param_row.iloc[0]['Minimum Infiltration Rate']
                                else:
                                    curve_number = None
                                    abstraction_ratio = None
                                    min_infiltration_rate = None
                                
                                all_results.append({
                                    'mesh_name': mesh_name,
                                    'combined_type': combined_name,
                                    'percentage': combined_pct,
                                    'area_sqm': combined_area_sqm,
                                    'area_acres': combined_area_sqm * HdfInfiltration.SQM_TO_ACRE,
                                    'area_sqmiles': combined_area_sqm * HdfInfiltration.SQM_TO_SQMILE,
                                    'curve_number': curve_number,
                                    'abstraction_ratio': abstraction_ratio,
                                    'min_infiltration_rate': min_infiltration_rate
                                })
                    except Exception as e:
                        logger.error(f"Error calculating statistics for mesh {mesh_name}: {str(e)}")
                        continue
        except Exception as e:
            logger.error(f"Error opening raster files: {str(e)}")
            return pd.DataFrame()
        
        # Create DataFrame with results
        results_df = pd.DataFrame(all_results)
        
        # Sort by mesh_name, percentage (descending)
        if not results_df.empty:
            results_df = results_df.sort_values(['mesh_name', 'percentage'], ascending=[True, False])
        
        return results_df






    @staticmethod
    @log_call
    @standardize_input(file_type='geom_hdf')
    def get_infiltration_stats(
        geom_hdf_path: Path,
        landcover_hdf_path: Path = None,
        soil_hdf_path: Path = None,
        ras_object: Any = None
    ) -> pd.DataFrame:
        """
        Calculate combined land cover and soil infiltration statistics for each 2D flow area.
        
        This function processes both land cover and soil data to calculate statistics
        for each combination (Land Cover : Soil Type) within each 2D flow area.
        
        Parameters
        ----------
        geom_hdf_path : Path
            Path to the HEC-RAS geometry HDF file containing the 2D flow areas
        landcover_hdf_path : Path, optional
            Path to the land cover HDF file. If None, uses landcover_hdf_path from rasmap_df
        soil_hdf_path : Path, optional
            Path to the soil HDF file. If None, uses soil_layer_path from rasmap_df
        ras_object : Any, optional
            Optional RAS object. If not provided, uses global ras instance
            
        Returns
        -------
        pd.DataFrame
            DataFrame with combined statistics for each 2D flow area, including:
            - mesh_name: Name of the 2D flow area
            - combined_type: Combined land cover and soil type (e.g. "Mixed Forest : B")
            - percentage: Percentage of 2D flow area covered by this combination
            - area_sqm: Area in square meters
            - area_acres: Area in acres
            - area_sqmiles: Area in square miles
            - curve_number: Curve number for this combination
            - abstraction_ratio: Abstraction ratio for this combination
            - min_infiltration_rate: Minimum infiltration rate for this combination
        
        Notes
        -----
        Requires the rasterstats package to be installed.
        """
        try:
            from rasterstats import zonal_stats
            import shapely
            import geopandas as gpd
            import numpy as np
            import tempfile
            import os
            import rasterio
            from rasterio.merge import merge
        except ImportError as e:
            logger.error(f"Failed to import required package: {e}. Please run 'pip install rasterstats shapely geopandas rasterio'")
            raise e
        
        # Import here to avoid circular imports
        from .HdfMesh import HdfMesh
        
        # Get RAS object
        if ras_object is None:
            from .RasPrj import ras
            ras_object = ras
        
        # Get the landcover HDF path
        if landcover_hdf_path is None:
            try:
                landcover_hdf_path = Path(ras_object.rasmap_df.loc[0, 'landcover_hdf_path'][0])
                if not landcover_hdf_path.exists():
                    logger.warning(f"Land cover HDF path from rasmap_df does not exist: {landcover_hdf_path}")
                    return pd.DataFrame()
            except (KeyError, IndexError, AttributeError, TypeError) as e:
                logger.error(f"Error retrieving landcover_hdf_path from rasmap_df: {str(e)}")
                return pd.DataFrame()
        
        # Get the soil HDF path
        if soil_hdf_path is None:
            try:
                soil_hdf_path = Path(ras_object.rasmap_df.loc[0, 'soil_layer_path'][0])
                if not soil_hdf_path.exists():
                    logger.warning(f"Soil HDF path from rasmap_df does not exist: {soil_hdf_path}")
                    return pd.DataFrame()
            except (KeyError, IndexError, AttributeError, TypeError) as e:
                logger.error(f"Error retrieving soil_layer_path from rasmap_df: {str(e)}")
                return pd.DataFrame()
        
        # Get land cover map (raster to ID mapping)
        try:
            with h5py.File(landcover_hdf_path, 'r') as hdf:
                if '//Raster Map' not in hdf:
                    logger.error(f"No Raster Map found in {landcover_hdf_path}")
                    return pd.DataFrame()
                
                landcover_map_data = hdf['//Raster Map'][()]
                landcover_map = {int(item[0]): item[1].decode('utf-8').strip() for item in landcover_map_data}
        except Exception as e:
            logger.error(f"Error reading land cover data from HDF: {str(e)}")
            return pd.DataFrame()
        
        # Get soil map (raster to ID mapping)
        try:
            soil_map = HdfInfiltration.get_infiltration_map(hdf_path=soil_hdf_path, ras_object=ras_object)
            if not soil_map:
                logger.error(f"No soil map found in {soil_hdf_path}")
                return pd.DataFrame()
        except Exception as e:
            logger.error(f"Error getting soil map: {str(e)}")
            return pd.DataFrame()
        
        # Get infiltration parameters
        try:
            infiltration_params = HdfInfiltration.get_infiltration_layer_data(soil_hdf_path)
            if infiltration_params is None or infiltration_params.empty:
                logger.warning(f"No infiltration parameters found in {soil_hdf_path}")
                infiltration_params = pd.DataFrame(columns=['Name', 'Curve Number', 'Abstraction Ratio', 'Minimum Infiltration Rate'])
        except Exception as e:
            logger.error(f"Error getting infiltration parameters: {str(e)}")
            infiltration_params = pd.DataFrame(columns=['Name', 'Curve Number', 'Abstraction Ratio', 'Minimum Infiltration Rate'])
        
        # Get 2D flow areas
        mesh_areas = HdfMesh.get_mesh_areas(geom_hdf_path)
        if mesh_areas.empty:
            logger.warning(f"No 2D flow areas found in {geom_hdf_path}")
            return pd.DataFrame()
        
        # Check for the TIF files with same name as HDF
        landcover_tif_path = landcover_hdf_path.with_suffix('.tif')
        soil_tif_path = soil_hdf_path.with_suffix('.tif')
        
        if not landcover_tif_path.exists():
            logger.error(f"No land cover raster file found at {landcover_tif_path}")
            return pd.DataFrame()
        
        if not soil_tif_path.exists():
            logger.error(f"No soil raster file found at {soil_tif_path}")
            return pd.DataFrame()
        
        # List to store all results
        all_results = []
        
        # Read the raster data
        try:
            with rasterio.open(landcover_tif_path) as landcover_src, rasterio.open(soil_tif_path) as soil_src:
                landcover_nodata = landcover_src.nodata if landcover_src.nodata is not None else -9999
                soil_nodata = soil_src.nodata if soil_src.nodata is not None else -9999
                
                # Calculate zonal statistics for each 2D flow area
                for _, mesh_row in mesh_areas.iterrows():
                    mesh_name = mesh_row['mesh_name']
                    mesh_geom = mesh_row['geometry']
                    
                    # Get zonal statistics for land cover
                    try:
                        landcover_stats = zonal_stats(
                            mesh_geom,
                            landcover_tif_path,
                            categorical=True,
                            nodata=landcover_nodata
                        )[0]
                        
                        # Get zonal statistics for soil
                        soil_stats = zonal_stats(
                            mesh_geom,
                            soil_tif_path,
                            categorical=True,
                            nodata=soil_nodata
                        )[0]
                        
                        # Skip if no stats
                        if not landcover_stats or not soil_stats:
                            logger.warning(f"No land cover or soil data found for 2D flow area: {mesh_name}")
                            continue
                        
                        # Calculate total area
                        landcover_total = sum(landcover_stats.values())
                        soil_total = sum(soil_stats.values())
                        
                        # Create a cross-tabulation of land cover and soil types
                        # This is an approximation since we don't have the exact pixel-by-pixel overlap
                        mesh_area_sqm = mesh_row['geometry'].area
                        
                        # Calculate percentage of each land cover type
                        landcover_pct = {k: v/landcover_total for k, v in landcover_stats.items() if k is not None and k != landcover_nodata}
                        
                        # Calculate percentage of each soil type
                        soil_pct = {k: v/soil_total for k, v in soil_stats.items() if k is not None and k != soil_nodata}
                        
                        # Generate combinations
                        for lc_id, lc_pct in landcover_pct.items():
                            lc_name = landcover_map.get(int(lc_id), f"Unknown-{lc_id}")
                            
                            for soil_id, soil_pct in soil_pct.items():
                                try:
                                    soil_name = soil_map.get(int(soil_id), f"Unknown-{soil_id}")
                                except (ValueError, TypeError):
                                    soil_name = f"Unknown-{soil_id}"
                                
                                # Calculate combined percentage (approximate)
                                # This is a simplification; actual overlap would require pixel-by-pixel analysis
                                combined_pct = lc_pct * soil_pct * 100
                                combined_area_sqm = mesh_area_sqm * (combined_pct / 100)
                                
                                # Create combined name
                                combined_name = f"{lc_name} : {soil_name}"
                                
                                # Look up infiltration parameters
                                param_row = infiltration_params[infiltration_params['Name'] == combined_name]
                                if param_row.empty:
                                    # Try with NoData for soil type
                                    param_row = infiltration_params[infiltration_params['Name'] == f"{lc_name} : NoData"]
                                
                                if not param_row.empty:
                                    curve_number = param_row.iloc[0]['Curve Number']
                                    abstraction_ratio = param_row.iloc[0]['Abstraction Ratio']
                                    min_infiltration_rate = param_row.iloc[0]['Minimum Infiltration Rate']
                                else:
                                    curve_number = None
                                    abstraction_ratio = None
                                    min_infiltration_rate = None
                                
                                all_results.append({
                                    'mesh_name': mesh_name,
                                    'combined_type': combined_name,
                                    'percentage': combined_pct,
                                    'area_sqm': combined_area_sqm,
                                    'area_acres': combined_area_sqm * HdfInfiltration.SQM_TO_ACRE,
                                    'area_sqmiles': combined_area_sqm * HdfInfiltration.SQM_TO_SQMILE,
                                    'curve_number': curve_number,
                                    'abstraction_ratio': abstraction_ratio,
                                    'min_infiltration_rate': min_infiltration_rate
                                })
                    except Exception as e:
                        logger.error(f"Error calculating statistics for mesh {mesh_name}: {str(e)}")
                        continue
        except Exception as e:
            logger.error(f"Error opening raster files: {str(e)}")
            return pd.DataFrame()
        
        # Create DataFrame with results
        results_df = pd.DataFrame(all_results)
        
        # Sort by mesh_name, percentage (descending)
        if not results_df.empty:
            results_df = results_df.sort_values(['mesh_name', 'percentage'], ascending=[True, False])
        
        return results_df



















    @staticmethod
    @log_call
    @standardize_input(file_type='geom_hdf')
    def get_infiltration_map(hdf_path: Path = None, ras_object: Any = None) -> dict:
        """Read the infiltration raster map from HDF file
        
        Args:
            hdf_path: Optional path to the HDF file. If not provided, uses first infiltration_hdf_path from rasmap_df
            ras_object: Optional RAS object. If not provided, uses global ras instance
            
        Returns:
            Dictionary mapping raster values to mukeys
        """
        if hdf_path is None:
            if ras_object is None:
                from .RasPrj import ras
                ras_object = ras
            hdf_path = Path(ras_object.rasmap_df.iloc[0]['infiltration_hdf_path'][0])
            
        with h5py.File(hdf_path, 'r') as hdf:
            raster_map_data = hdf['Raster Map'][:]
            return {int(item[0]): item[1].decode('utf-8') for item in raster_map_data}

    @staticmethod
    @log_call
    def calculate_soil_statistics(zonal_stats: list, raster_map: dict) -> pd.DataFrame:
        """Calculate soil statistics from zonal statistics
        
        Args:
            zonal_stats: List of zonal statistics
            raster_map: Dictionary mapping raster values to mukeys
            
        Returns:
            DataFrame with soil statistics including percentages and areas
        """
        
        try:
            from rasterstats import zonal_stats
        except ImportError as e:
            logger.error("Failed to import rasterstats. Please run 'pip install rasterstats' and try again.")
            raise e
        # Initialize areas dictionary
        mukey_areas = {mukey: 0 for mukey in raster_map.values()}
        
        # Calculate total area and mukey areas
        total_area_sqm = 0
        for stat in zonal_stats:
            for raster_val, area in stat.items():
                mukey = raster_map.get(raster_val)
                if mukey:
                    mukey_areas[mukey] += area
                total_area_sqm += area

        # Create DataFrame rows
        rows = []
        for mukey, area_sqm in mukey_areas.items():
            if area_sqm > 0:
                rows.append({
                    'mukey': mukey,
                    'Percentage': (area_sqm / total_area_sqm) * 100,
                    'Area in Acres': area_sqm * HdfInfiltration.SQM_TO_ACRE,
                    'Area in Square Miles': area_sqm * HdfInfiltration.SQM_TO_SQMILE
                })
        
        return pd.DataFrame(rows)

    @staticmethod
    @log_call
    def get_significant_mukeys(soil_stats: pd.DataFrame, 
                             threshold: float = 1.0) -> pd.DataFrame:
        """Get mukeys with percentage greater than threshold
        
        Args:
            soil_stats: DataFrame with soil statistics
            threshold: Minimum percentage threshold (default 1.0)
            
        Returns:
            DataFrame with significant mukeys and their statistics
        """
        significant = soil_stats[soil_stats['Percentage'] > threshold].copy()
        significant.sort_values('Percentage', ascending=False, inplace=True)
        return significant

    @staticmethod
    @log_call
    def calculate_total_significant_percentage(significant_mukeys: pd.DataFrame) -> float:
        """Calculate total percentage covered by significant mukeys
        
        Args:
            significant_mukeys: DataFrame of significant mukeys
            
        Returns:
            Total percentage covered by significant mukeys
        """
        return significant_mukeys['Percentage'].sum()

    @staticmethod
    @log_call
    def save_statistics(soil_stats: pd.DataFrame, output_path: Path, 
                       include_timestamp: bool = True):
        """Save soil statistics to CSV
        
        Args:
            soil_stats: DataFrame with soil statistics
            output_path: Path to save CSV file
            include_timestamp: Whether to include timestamp in filename
        """
        if include_timestamp:
            timestamp = pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')
            output_path = output_path.with_name(
                f"{output_path.stem}_{timestamp}{output_path.suffix}")
        
        soil_stats.to_csv(output_path, index=False)

    @staticmethod
    @log_call
    @standardize_input
    def get_infiltration_parameters(hdf_path: Path = None, mukey: str = None, ras_object: Any = None) -> dict:
        """Get infiltration parameters for a specific mukey from HDF file
        
        Args:
            hdf_path: Optional path to the HDF file. If not provided, uses first infiltration_hdf_path from rasmap_df
            mukey: Mukey identifier
            ras_object: Optional RAS object. If not provided, uses global ras instance
            
        Returns:
            Dictionary of infiltration parameters
        """
        if hdf_path is None:
            if ras_object is None:
                from .RasPrj import ras
                ras_object = ras
            hdf_path = Path(ras_object.rasmap_df.iloc[0]['infiltration_hdf_path'][0])
            
        with h5py.File(hdf_path, 'r') as hdf:
            if 'Infiltration Parameters' not in hdf:
                raise KeyError("No infiltration parameters found in HDF file")
                
            params = hdf['Infiltration Parameters'][:]
            for row in params:
                if row[0].decode('utf-8') == mukey:
                    return {
                        'Initial Loss (in)': float(row[1]),
                        'Constant Loss Rate (in/hr)': float(row[2]),
                        'Impervious Area (%)': float(row[3])
                    }
        return None

    @staticmethod
    @log_call
    def calculate_weighted_parameters(soil_stats: pd.DataFrame, 
                                   infiltration_params: dict) -> dict:
        """Calculate weighted infiltration parameters based on soil statistics
        
        Args:
            soil_stats: DataFrame with soil statistics
            infiltration_params: Dictionary of infiltration parameters by mukey
            
        Returns:
            Dictionary of weighted average infiltration parameters
        """
        total_weight = soil_stats['Percentage'].sum()
        
        weighted_params = {
            'Initial Loss (in)': 0.0,
            'Constant Loss Rate (in/hr)': 0.0,
            'Impervious Area (%)': 0.0
        }
        
        for _, row in soil_stats.iterrows():
            mukey = row['mukey']
            weight = row['Percentage'] / total_weight
            
            if mukey in infiltration_params:
                for param in weighted_params:
                    weighted_params[param] += (
                        infiltration_params[mukey][param] * weight
                    )
        
        return weighted_params
    

    @staticmethod
    def _get_table_info(hdf_file: h5py.File, table_path: str) -> Tuple[List[str], List[str], List[str]]:
        """Get column names and types from HDF table
        
        Args:
            hdf_file: Open HDF file object
            table_path: Path to table in HDF file
            
        Returns:
            Tuple of (column names, numpy dtypes, column descriptions)
        """
        if table_path not in hdf_file:
            return [], [], []
            
        dataset = hdf_file[table_path]
        dtype = dataset.dtype
        
        # Extract column names and types
        col_names = []
        col_types = []
        col_descs = []
        
        for name in dtype.names:
            col_names.append(name)
            col_types.append(dtype[name].str)
            col_descs.append(name)  # Could be enhanced to get actual descriptions
            
        return col_names, col_types, col_descs


    @staticmethod
    @log_call
    @standardize_input(file_type='geom_hdf')
    def get_landcover_raster_stats(
        geom_hdf_path: Path,
        landcover_hdf_path: Path = None,
        ras_object: Any = None
    ) -> pd.DataFrame:
        """
        Calculate land cover statistics for each 2D flow area using the area's perimeter.
        
        Parameters
        ----------
        geom_hdf_path : Path
            Path to the HEC-RAS geometry HDF file containing the 2D flow areas
        landcover_hdf_path : Path, optional
            Path to the land cover HDF file. If None, uses landcover_hdf_path from rasmap_df
        ras_object : Any, optional
            Optional RAS object. If not provided, uses global ras instance
            
        Returns
        -------
        pd.DataFrame
            DataFrame with land cover statistics for each 2D flow area, including:
            - mesh_name: Name of the 2D flow area
            - land_cover: Land cover classification name
            - percentage: Percentage of 2D flow area covered by this land cover type
            - area_sqm: Area in square meters
            - area_acres: Area in acres
            - area_sqmiles: Area in square miles
            - mannings_n: Manning's n value for this land cover type
            - percent_impervious: Percent impervious for this land cover type
        
        Notes
        -----
        Requires the rasterstats package to be installed.
        """
        try:
            from rasterstats import zonal_stats
            import shapely
            import geopandas as gpd
            import numpy as np
            import tempfile
            import os
            import rasterio
        except ImportError as e:
            logger.error(f"Failed to import required package: {e}. Please run 'pip install rasterstats shapely geopandas rasterio'")
            raise e
        
        # Import here to avoid circular imports
        from .HdfMesh import HdfMesh
        
        # Get the landcover HDF path
        if landcover_hdf_path is None:
            if ras_object is None:
                from .RasPrj import ras
                ras_object = ras
            
            # Try to get landcover_hdf_path from rasmap_df
            try:
                landcover_hdf_path = Path(ras_object.rasmap_df.loc[0, 'landcover_hdf_path'][0])
                if not landcover_hdf_path.exists():
                    logger.warning(f"Land cover HDF path from rasmap_df does not exist: {landcover_hdf_path}")
                    return pd.DataFrame()
            except (KeyError, IndexError, AttributeError, TypeError) as e:
                logger.error(f"Error retrieving landcover_hdf_path from rasmap_df: {str(e)}")
                return pd.DataFrame()
        
        # Get land cover map (raster to ID mapping)
        try:
            with h5py.File(landcover_hdf_path, 'r') as hdf:
                if '//Raster Map' not in hdf:
                    logger.error(f"No Raster Map found in {landcover_hdf_path}")
                    return pd.DataFrame()
                
                raster_map_data = hdf['//Raster Map'][()]
                raster_map = {int(item[0]): item[1].decode('utf-8').strip() for item in raster_map_data}
                
                # Get land cover variables (mannings_n and percent_impervious)
                variables = {}
                if '//Variables' in hdf:
                    var_data = hdf['//Variables'][()]
                    for row in var_data:
                        name = row[0].decode('utf-8').strip()
                        mannings_n = float(row[1])
                        percent_impervious = float(row[2])
                        variables[name] = {
                            'mannings_n': mannings_n,
                            'percent_impervious': percent_impervious
                        }
        except Exception as e:
            logger.error(f"Error reading land cover data from HDF: {str(e)}")
            return pd.DataFrame()
        
        # Get 2D flow areas
        mesh_areas = HdfMesh.get_mesh_areas(geom_hdf_path)
        if mesh_areas.empty:
            logger.warning(f"No 2D flow areas found in {geom_hdf_path}")
            return pd.DataFrame()
        
        # Check for the TIF file with same name as HDF
        tif_path = landcover_hdf_path.with_suffix('.tif')
        if not tif_path.exists():
            logger.error(f"No raster file found at {tif_path}")
            return pd.DataFrame()
        
        # List to store all results
        all_results = []
        
        # Read the raster data and info
        try:
            with rasterio.open(tif_path) as src:
                # Get transform directly from rasterio
                transform = src.transform
                no_data = src.nodata if src.nodata is not None else -9999
                
                # Calculate zonal statistics for each 2D flow area
                for _, mesh_row in mesh_areas.iterrows():
                    mesh_name = mesh_row['mesh_name']
                    mesh_geom = mesh_row['geometry']
                    
                    # Get zonal statistics directly using rasterio grid
                    try:
                        stats = zonal_stats(
                            mesh_geom,
                            tif_path,
                            categorical=True,
                            nodata=no_data
                        )[0]
                        
                        # Skip if no stats
                        if not stats:
                            logger.warning(f"No land cover data found for 2D flow area: {mesh_name}")
                            continue
                        
                        # Calculate total area and percentages
                        total_area_sqm = sum(stats.values())
                        
                        # Process each land cover type
                        for raster_val, area_sqm in stats.items():
                            # Skip NoData values
                            if raster_val is None or raster_val == no_data:
                                continue
                                
                            try:
                                # Get land cover name from raster map
                                land_cover = raster_map.get(int(raster_val), f"Unknown-{raster_val}")
                                
                                # Get Manning's n and percent impervious
                                mannings_n = variables.get(land_cover, {}).get('mannings_n', None)
                                percent_impervious = variables.get(land_cover, {}).get('percent_impervious', None)
                                
                                percentage = (area_sqm / total_area_sqm) * 100 if total_area_sqm > 0 else 0
                                
                                all_results.append({
                                    'mesh_name': mesh_name,
                                    'land_cover': land_cover,
                                    'percentage': percentage,
                                    'area_sqm': area_sqm,
                                    'area_acres': area_sqm * HdfInfiltration.SQM_TO_ACRE,
                                    'area_sqmiles': area_sqm * HdfInfiltration.SQM_TO_SQMILE,
                                    'mannings_n': mannings_n,
                                    'percent_impervious': percent_impervious
                                })
                            except Exception as e:
                                logger.warning(f"Error processing raster value {raster_val}: {e}")
                                continue
                    except Exception as e:
                        logger.error(f"Error calculating statistics for mesh {mesh_name}: {str(e)}")
                        continue
        except Exception as e:
            logger.error(f"Error opening raster file {tif_path}: {str(e)}")
            return pd.DataFrame()
        
        # Create DataFrame with results
        results_df = pd.DataFrame(all_results)
        
        # Sort by mesh_name, percentage (descending)
        if not results_df.empty:
            results_df = results_df.sort_values(['mesh_name', 'percentage'], ascending=[True, False])
        
        return results_df



'''

THIS FUNCTION IS VERY CLOSE BUT DOES NOT WORK BECAUSE IT DOES NOT PRESERVE THE EXACT STRUCTURE OF THE HDF FILE.
WHEN RAS LOADS THE HDF, IT IGNORES THE DATA IN THE TABLE AND REPLACES IT WITH NULLS.


    @staticmethod
    @log_call
    def set_infiltration_baseoverrides(
        hdf_path: Path,
        infiltration_df: pd.DataFrame
    ) -> Optional[pd.DataFrame]:
        """
        Set base overrides for infiltration parameters in the HDF file while preserving
        the exact structure of the existing dataset.
        
        This function ensures that the HDF structure is maintained exactly as in the
        original file, including field names, data types, and string lengths. It updates
        the values while preserving all dataset attributes.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file
        infiltration_df : pd.DataFrame
            DataFrame containing infiltration parameters with columns matching HDF structure.
            The first column should be 'Name' or 'Land Cover Name'.

        Returns
        -------
        Optional[pd.DataFrame]
            The infiltration DataFrame if successful, None if operation fails
        """
        try:
            # Make a copy to avoid modifying the input DataFrame
            infiltration_df = infiltration_df.copy()
            
            # Check for and rename the first column if needed
            if "Land Cover Name" in infiltration_df.columns:
                name_col = "Land Cover Name"
            else:
                name_col = "Name"
                # Rename 'Name' to 'Land Cover Name' for HDF dataset
                infiltration_df = infiltration_df.rename(columns={"Name": "Land Cover Name"})
                
            table_path = '/Geometry/Infiltration/Base Overrides'
            
            with h5py.File(hdf_path, 'r') as hdf_file_read:
                # Check if dataset exists
                if table_path not in hdf_file_read:
                    logger.warning(f"No infiltration data found in {hdf_path}. Creating new dataset.")
                    # If dataset doesn't exist, use the standard set_infiltration_baseoverrides method
                    return HdfInfiltration.set_infiltration_baseoverrides(hdf_path, infiltration_df)
                
                # Get the exact dtype of the existing dataset
                existing_dtype = hdf_file_read[table_path].dtype
                
                # Extract column names from the existing dataset
                existing_columns = existing_dtype.names
                
                # Check if all columns in the DataFrame exist in the HDF dataset
                for col in infiltration_df.columns:
                    hdf_col = col
                    if col == "Name" and "Land Cover Name" in existing_columns:
                        hdf_col = "Land Cover Name"
                    
                    if hdf_col not in existing_columns:
                        logger.warning(f"Column {col} not found in existing dataset - it will be ignored")
                
                # Get current dataset to preserve structure for non-updated fields
                existing_data = hdf_file_read[table_path][()]
            
            # Create a structured array with the exact same dtype as the existing dataset
            structured_array = np.zeros(len(infiltration_df), dtype=existing_dtype)
            
            # Copy data from DataFrame to structured array, preserving existing structure
            for col in existing_columns:
                df_col = col
                # Map 'Land Cover Name' to 'Name' if needed
                if col == "Land Cover Name" and name_col == "Name":
                    df_col = "Name"
                    
                if df_col in infiltration_df.columns:
                    # Handle string fields - need to maintain exact string length
                    if existing_dtype[col].kind == 'S':
                        # Get the exact string length from dtype
                        max_str_len = existing_dtype[col].itemsize
                        # Convert to bytes with correct length
                        structured_array[col] = infiltration_df[df_col].astype(str).values.astype(f'|S{max_str_len}')
                    else:
                        # Handle numeric fields - ensure correct numeric type
                        if existing_dtype[col].kind in ('f', 'i'):
                            structured_array[col] = infiltration_df[df_col].values.astype(existing_dtype[col])
                        else:
                            # For any other type, just copy as is
                            structured_array[col] = infiltration_df[df_col].values
                else:
                    logger.warning(f"Column {col} not in DataFrame - using default values")
                    # Use zeros for numeric fields or empty strings for string fields
                    if existing_dtype[col].kind == 'S':
                        structured_array[col] = np.array([''] * len(infiltration_df), dtype=f'|S{existing_dtype[col].itemsize}')
            
            # Write back to HDF file
            with h5py.File(hdf_path, 'a') as hdf_file_write:
                # Delete existing dataset
                if table_path in hdf_file_write:
                    del hdf_file_write[table_path]
                
                # Create new dataset with exact same properties as original
                dataset = hdf_file_write.create_dataset(
                    table_path,
                    data=structured_array,
                    dtype=existing_dtype,
                    compression='gzip',
                    compression_opts=1,
                    chunks=(100,),
                    maxshape=(None,)
                )
            
            # Return the DataFrame with columns matching what was actually written
            result_df = pd.DataFrame()
            for col in existing_columns:
                if existing_dtype[col].kind == 'S':
                    # Convert bytes back to string
                    result_df[col] = [val.decode('utf-8').strip() for val in structured_array[col]]
                else:
                    result_df[col] = structured_array[col]
                    
            return result_df

        except Exception as e:
            logger.error(f"Error setting infiltration data in {hdf_path}: {str(e)}")
            return None






'''
==================================================

File: c:\GH\ras-commander\ras_commander\HdfMesh.py
==================================================
"""
A static class for handling mesh-related operations on HEC-RAS HDF files.

This class provides static methods to extract and analyze mesh data from HEC-RAS HDF files,
including mesh area names, mesh areas, cell polygons, cell points, cell faces, and
2D flow area attributes. No instantiation is required to use these methods.

All methods are designed to work with the mesh geometry data stored in
HEC-RAS HDF files, providing functionality to retrieve and process various aspects
of the 2D flow areas and their associated mesh structures.


List of Functions:
-----------------
get_mesh_area_names()
    Returns list of 2D mesh area names
get_mesh_areas()
    Returns 2D flow area perimeter polygons
get_mesh_cell_polygons()
    Returns 2D flow mesh cell polygons
get_mesh_cell_points()
    Returns 2D flow mesh cell center points
get_mesh_cell_faces()
    Returns 2D flow mesh cell faces
get_mesh_area_attributes()
    Returns geometry 2D flow area attributes
get_mesh_face_property_tables()
    Returns Face Property Tables for each Face in all 2D Flow Areas
get_mesh_cell_property_tables()
    Returns Cell Property Tables for each Cell in all 2D Flow Areas

Each function is decorated with @standardize_input and @log_call for consistent
input handling and logging functionality.
"""
from pathlib import Path
import h5py
import numpy as np
import pandas as pd
from geopandas import GeoDataFrame
from shapely.geometry import Polygon, Point, LineString, MultiLineString, MultiPolygon
from shapely.ops import polygonize  # Importing polygonize to resolve the undefined name error
from typing import List, Tuple, Optional, Dict, Any
import logging
from .HdfBase import HdfBase
from .HdfUtils import HdfUtils
from .Decorators import standardize_input, log_call
from .LoggingConfig import setup_logging, get_logger

logger = get_logger(__name__)


class HdfMesh:
    """
    A class for handling mesh-related operations on HEC-RAS HDF files.

    This class provides methods to extract and analyze mesh data from HEC-RAS HDF files,
    including mesh area names, mesh areas, cell polygons, cell points, cell faces, and
    2D flow area attributes.

    Methods in this class are designed to work with the mesh geometry data stored in
    HEC-RAS HDF files, providing functionality to retrieve and process various aspects
    of the 2D flow areas and their associated mesh structures.

    Note: This class relies on HdfBase and HdfUtils for some underlying operations.
    """

    def __init__(self):
        self.logger = logging.getLogger(__name__)

    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def get_mesh_area_names(hdf_path: Path) -> List[str]:
        """
        Return a list of the 2D mesh area names from the RAS geometry.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.

        Returns
        -------
        List[str]
            A list of the 2D mesh area names within the RAS geometry.
            Returns an empty list if no 2D areas exist or if there's an error.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                if "Geometry/2D Flow Areas" not in hdf_file:
                    return list()
                return list(
                    [
                        HdfUtils.convert_ras_string(n.decode('utf-8'))
                        for n in hdf_file["Geometry/2D Flow Areas/Attributes"][()]["Name"]
                    ]
                )
        except Exception as e:
            logger.error(f"Error reading mesh area names from {hdf_path}: {str(e)}")
            return list()

    @staticmethod
    @standardize_input(file_type='geom_hdf')
    def get_mesh_areas(hdf_path: Path) -> GeoDataFrame:
        """
        Return 2D flow area perimeter polygons.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.

        Returns
        -------
        GeoDataFrame
            A GeoDataFrame containing the 2D flow area perimeter polygons if 2D areas exist.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                mesh_area_names = HdfMesh.get_mesh_area_names(hdf_path)
                if not mesh_area_names:
                    return GeoDataFrame()
                mesh_area_polygons = [
                    Polygon(hdf_file["Geometry/2D Flow Areas/{}/Perimeter".format(n)][()])
                    for n in mesh_area_names
                ]
                return GeoDataFrame(
                    {"mesh_name": mesh_area_names, "geometry": mesh_area_polygons},
                    geometry="geometry",
                    crs=HdfBase.get_projection(hdf_file),
                )
        except Exception as e:
            logger.error(f"Error reading mesh areas from {hdf_path}: {str(e)}")
            return GeoDataFrame()

    @staticmethod
    @standardize_input(file_type='geom_hdf')
    def get_mesh_cell_polygons(hdf_path: Path) -> GeoDataFrame:
        """
        Return 2D flow mesh cell polygons.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.

        Returns
        -------
        GeoDataFrame
            A GeoDataFrame containing the 2D flow mesh cell polygons with columns:
            - mesh_name: name of the mesh area
            - cell_id: unique identifier for each cell
            - geometry: polygon geometry of the cell
            Returns an empty GeoDataFrame if no 2D areas exist or if there's an error.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                mesh_area_names = HdfMesh.get_mesh_area_names(hdf_path)
                if not mesh_area_names:
                    return GeoDataFrame()

                # Get face geometries once
                face_gdf = HdfMesh.get_mesh_cell_faces(hdf_path)
                
                # Pre-allocate lists for better memory efficiency
                all_mesh_names = []
                all_cell_ids = []
                all_geometries = []

                for mesh_name in mesh_area_names:
                    # Get cell face info in one read
                    cell_face_info = hdf_file[f"Geometry/2D Flow Areas/{mesh_name}/Cells Face and Orientation Info"][()]
                    cell_face_values = hdf_file[f"Geometry/2D Flow Areas/{mesh_name}/Cells Face and Orientation Values"][()][:, 0]
                    
                    # Create face lookup dictionary for this mesh
                    mesh_faces_dict = dict(face_gdf[face_gdf.mesh_name == mesh_name][["face_id", "geometry"]].values)

                    # Process each cell
                    for cell_id, (start, length) in enumerate(cell_face_info[:, :2]):
                        face_ids = cell_face_values[start:start + length]
                        face_geoms = [mesh_faces_dict[face_id] for face_id in face_ids]
                        
                        # Create polygon
                        polygons = list(polygonize(face_geoms))
                        if polygons:
                            all_mesh_names.append(mesh_name)
                            all_cell_ids.append(cell_id)
                            all_geometries.append(Polygon(polygons[0]))

                # Create GeoDataFrame in one go
                return GeoDataFrame(
                    {
                        "mesh_name": all_mesh_names,
                        "cell_id": all_cell_ids,
                        "geometry": all_geometries
                    },
                    geometry="geometry",
                    crs=HdfBase.get_projection(hdf_file)
                )

        except Exception as e:
            logger.error(f"Error reading mesh cell polygons from {hdf_path}: {str(e)}")
            return GeoDataFrame()
        
    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def get_mesh_cell_points(hdf_path: Path) -> GeoDataFrame:
        """
        Return 2D flow mesh cell center points.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.

        Returns
        -------
        GeoDataFrame
            A GeoDataFrame containing the 2D flow mesh cell center points.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                mesh_area_names = HdfMesh.get_mesh_area_names(hdf_path)
                if not mesh_area_names:
                    return GeoDataFrame()
                
                # Pre-allocate lists
                all_mesh_names = []
                all_cell_ids = []
                all_points = []

                for mesh_name in mesh_area_names:
                    # Get all cell centers in one read
                    cell_centers = hdf_file[f"Geometry/2D Flow Areas/{mesh_name}/Cells Center Coordinate"][()]
                    cell_count = len(cell_centers)
                    
                    # Extend lists efficiently
                    all_mesh_names.extend([mesh_name] * cell_count)
                    all_cell_ids.extend(range(cell_count))
                    all_points.extend(Point(coords) for coords in cell_centers)

                # Create GeoDataFrame in one go
                return GeoDataFrame(
                    {
                        "mesh_name": all_mesh_names,
                        "cell_id": all_cell_ids,
                        "geometry": all_points
                    },
                    geometry="geometry",
                    crs=HdfBase.get_projection(hdf_file)
                )

        except Exception as e:
            logger.error(f"Error reading mesh cell points from {hdf_path}: {str(e)}")
            return GeoDataFrame()

    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def get_mesh_cell_faces(hdf_path: Path) -> GeoDataFrame:
        """
        Return 2D flow mesh cell faces.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.

        Returns
        -------
        GeoDataFrame
            A GeoDataFrame containing the 2D flow mesh cell faces.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                mesh_area_names = HdfMesh.get_mesh_area_names(hdf_path)
                if not mesh_area_names:
                    return GeoDataFrame()

                # Pre-allocate lists
                all_mesh_names = []
                all_face_ids = []
                all_geometries = []

                for mesh_name in mesh_area_names:
                    # Read all data at once
                    facepoints_index = hdf_file[f"Geometry/2D Flow Areas/{mesh_name}/Faces FacePoint Indexes"][()]
                    facepoints_coords = hdf_file[f"Geometry/2D Flow Areas/{mesh_name}/FacePoints Coordinate"][()]
                    faces_perim_info = hdf_file[f"Geometry/2D Flow Areas/{mesh_name}/Faces Perimeter Info"][()]
                    faces_perim_values = hdf_file[f"Geometry/2D Flow Areas/{mesh_name}/Faces Perimeter Values"][()]

                    # Process each face
                    for face_id, ((pnt_a_idx, pnt_b_idx), (start_row, count)) in enumerate(zip(facepoints_index, faces_perim_info)):
                        coords = [facepoints_coords[pnt_a_idx]]
                        
                        if count > 0:
                            coords.extend(faces_perim_values[start_row:start_row + count])
                            
                        coords.append(facepoints_coords[pnt_b_idx])
                        
                        all_mesh_names.append(mesh_name)
                        all_face_ids.append(face_id)
                        all_geometries.append(LineString(coords))

                # Create GeoDataFrame in one go
                return GeoDataFrame(
                    {
                        "mesh_name": all_mesh_names,
                        "face_id": all_face_ids,
                        "geometry": all_geometries
                    },
                    geometry="geometry",
                    crs=HdfBase.get_projection(hdf_file)
                )

        except Exception as e:
            logger.error(f"Error reading mesh cell faces from {hdf_path}: {str(e)}")
            return GeoDataFrame()

    @staticmethod
    @standardize_input(file_type='geom_hdf')
    def get_mesh_area_attributes(hdf_path: Path) -> pd.DataFrame:
        """
        Return geometry 2D flow area attributes from a HEC-RAS HDF file.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.

        Returns
        -------
        pd.DataFrame
            A DataFrame containing the 2D flow area attributes.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                d2_flow_area = hdf_file.get("Geometry/2D Flow Areas/Attributes")
                if d2_flow_area is not None and isinstance(d2_flow_area, h5py.Dataset):
                    result = {}
                    for name in d2_flow_area.dtype.names:
                        try:
                            value = d2_flow_area[name][()]
                            if isinstance(value, bytes):
                                value = value.decode('utf-8')  # Decode as UTF-8
                            result[name] = value if not isinstance(value, bytes) else value.decode('utf-8')
                        except Exception as e:
                            logger.warning(f"Error converting attribute '{name}': {str(e)}")
                    return pd.DataFrame.from_dict(result, orient='index', columns=['Value'])
                else:
                    logger.info("No 2D Flow Area attributes found or invalid dataset.")
                    return pd.DataFrame()  # Return an empty DataFrame
        except Exception as e:
            logger.error(f"Error reading 2D flow area attributes from {hdf_path}: {str(e)}")
            return pd.DataFrame()  # Return an empty DataFrame

    @staticmethod
    @standardize_input(file_type='geom_hdf')
    def get_mesh_face_property_tables(hdf_path: Path) -> Dict[str, pd.DataFrame]:
        """
        Extract Face Property Tables for each Face in all 2D Flow Areas.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.

        Returns
        -------
        Dict[str, pd.DataFrame]
            A dictionary where:
            - keys: mesh area names (str)
            - values: DataFrames with columns:
                - Face ID: unique identifier for each face
                - Z: elevation
                - Area: face area
                - Wetted Perimeter: wetted perimeter length
                - Manning's n: Manning's roughness coefficient
            Returns an empty dictionary if no 2D areas exist or if there's an error.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                mesh_area_names = HdfMesh.get_mesh_area_names(hdf_path)
                if not mesh_area_names:
                    return {}

                result = {}
                for mesh_name in mesh_area_names:
                    area_elevation_info = hdf_file[f"Geometry/2D Flow Areas/{mesh_name}/Faces Area Elevation Info"][()]
                    area_elevation_values = hdf_file[f"Geometry/2D Flow Areas/{mesh_name}/Faces Area Elevation Values"][()]
                    
                    face_data = []
                    for face_id, (start_index, count) in enumerate(area_elevation_info):
                        face_values = area_elevation_values[start_index:start_index+count]
                        for z, area, wetted_perimeter, mannings_n in face_values:
                            face_data.append({
                                'Face ID': face_id,
                                'Z': str(z),
                                'Area': str(area), 
                                'Wetted Perimeter': str(wetted_perimeter),
                                "Manning's n": str(mannings_n)
                            })
                    
                    result[mesh_name] = pd.DataFrame(face_data)
                
                return result

        except Exception as e:
            logger.error(f"Error extracting face property tables from {hdf_path}: {str(e)}")
            return {}

    @staticmethod
    @standardize_input(file_type='geom_hdf')
    def get_mesh_cell_property_tables(hdf_path: Path) -> Dict[str, pd.DataFrame]:
        """
        Extract Cell Property Tables for each Cell in all 2D Flow Areas.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.

        Returns
        -------
        Dict[str, pd.DataFrame]
            A dictionary where:
            - keys: mesh area names (str)
            - values: DataFrames with columns:
                - Cell ID: unique identifier for each cell
                - Z: elevation
                - Volume: cell volume
                - Surface Area: cell surface area
            Returns an empty dictionary if no 2D areas exist or if there's an error.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                mesh_area_names = HdfMesh.get_mesh_area_names(hdf_path)
                if not mesh_area_names:
                    return {}

                result = {}
                for mesh_name in mesh_area_names:
                    cell_elevation_info = hdf_file[f"Geometry/2D Flow Areas/{mesh_name}/Cells Elevation Volume Info"][()]
                    cell_elevation_values = hdf_file[f"Geometry/2D Flow Areas/{mesh_name}/Cells Elevation Volume Values"][()]
                    
                    cell_data = []
                    for cell_id, (start_index, count) in enumerate(cell_elevation_info):
                        cell_values = cell_elevation_values[start_index:start_index+count]
                        for z, volume, surface_area in cell_values:
                            cell_data.append({
                                'Cell ID': cell_id,
                                'Z': str(z),
                                'Volume': str(volume),
                                'Surface Area': str(surface_area)
                            })
                    
                    result[mesh_name] = pd.DataFrame(cell_data)
                
                return result

        except Exception as e:
            logger.error(f"Error extracting cell property tables from {hdf_path}: {str(e)}")
            return {}

==================================================

File: c:\GH\ras-commander\ras_commander\HdfPipe.py
==================================================
"""
Class: HdfPipe

All of the methods in this class are static and are designed to be used without instantiation.

List of Functions in HdfPipe:
Geometry Retrieval Functions:
- get_pipe_conduits() - Get pipe conduit geometries and attributes
- get_pipe_nodes() - Get pipe node geometries and attributes
- get_pipe_network() - Get complete pipe network data
- get_pipe_profile() - Get elevation profile for a specific conduit
- extract_pipe_network_data() - Extract both nodes and conduits data

Results Retrieval Functions:
- get_pipe_network_timeseries() - Get timeseries data for pipe network variables
- get_pipe_network_summary() - Get summary statistics for pipe networks
- get_pipe_node_timeseries() - Get timeseries data for a specific node
- get_pipe_conduit_timeseries() - Get timeseries data for a specific conduit

Note: All functions use the @standardize_input decorator to validate input paths
and the @log_call decorator for logging function calls.
"""
import h5py
import numpy as np
import pandas as pd
import geopandas as gpd
import xarray as xr
from pathlib import Path
from shapely.geometry import LineString, Point, MultiLineString, Polygon, MultiPolygon
from typing import List, Dict, Any, Optional, Union, Tuple
from .HdfBase import HdfBase
from .HdfUtils import HdfUtils
from .Decorators import standardize_input, log_call
from .LoggingConfig import get_logger
from .HdfResultsMesh import HdfResultsMesh
import logging  

logger = get_logger(__name__)

class HdfPipe:
    """
    Static methods for handling pipe network data from HEC-RAS HDF files.

    Contains methods for:
    - Geometry retrieval (nodes, conduits, networks, profiles)
    - Results retrieval (timeseries and summary data)

    All methods use @standardize_input for path validation and @log_call
    """

    # Geometry Retrieval Functions
    
    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_pipe_conduits(hdf_path: Path, crs: Optional[str] = "EPSG:4326") -> gpd.GeoDataFrame:
        """
        Extracts pipe conduit geometries and attributes from HDF5 file.

        Parameters:
            hdf_path: Path to the HDF5 file
            crs: Coordinate Reference System (default: "EPSG:4326")

        Returns:
            GeoDataFrame with columns:
            - Attributes from HDF5
            - Polyline: LineString geometries
            - Terrain_Profiles: List of (station, elevation) tuples
        """
        with h5py.File(hdf_path, 'r') as f:
            group = f['/Geometry/Pipe Conduits/']
            
            # --- Read and Process Attributes ---
            attributes = group['Attributes'][:]
            attr_df = pd.DataFrame(attributes)
            
            # Decode byte string fields to UTF-8 strings
            string_columns = attr_df.select_dtypes([object]).columns
            for col in string_columns:
                attr_df[col] = attr_df[col].apply(lambda x: x.decode('utf-8') if isinstance(x, bytes) else x)
            
            # --- Read Polyline Data ---
            polyline_info = group['Polyline Info'][:]  # Shape (132,4) - point_start_idx, point_count, part_start_idx, part_count
            polyline_points = group['Polyline Points'][:]  # Shape (396,2) - x,y coordinates
            
            polyline_geometries = []
            for info in polyline_info:
                point_start_idx = info[0]
                point_count = info[1]
                
                # Extract coordinates for this polyline directly using start index and count
                coords = polyline_points[point_start_idx:point_start_idx + point_count]
                
                if len(coords) < 2:
                    polyline_geometries.append(None)
                else:
                    polyline_geometries.append(LineString(coords))
            
            # --- Read Terrain Profiles Data ---
            terrain_info = group['Terrain Profiles Info'][:]
            terrain_values = group['Terrain Profiles Values'][:]
            
            # Create a list of (Station, Elevation) tuples for Terrain Profiles
            terrain_coords = list(zip(terrain_values[:, 0], terrain_values[:, 1]))
            
            terrain_profiles_list: List[List[Tuple[float, float]]] = []
            
            for i in range(len(terrain_info)):
                info = terrain_info[i]
                start_idx = info[0]
                count = info[1]
                
                # Extract (Station, Elevation) pairs
                segment = terrain_coords[start_idx : start_idx + count]
                
                terrain_profiles_list.append(segment)  # Store the list of (Station, Elevation) tuples
            
            # --- Combine Data into GeoDataFrame ---
            attr_df['Polyline'] = polyline_geometries
            attr_df['Terrain_Profiles'] = terrain_profiles_list
            
            # Initialize GeoDataFrame with Polyline geometries
            gdf = gpd.GeoDataFrame(attr_df, geometry='Polyline', crs=crs)
            
            return gdf


    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_pipe_nodes(hdf_path: Path) -> gpd.GeoDataFrame:
        """
        Creates a GeoDataFrame for Pipe Node points and their attributes from an HDF5 file.
        
        Parameters:
        - hdf_path: Path to the HDF5 file.
        
        Returns:
        - A GeoDataFrame containing pipe node attributes and their geometries.
        """
        with h5py.File(hdf_path, 'r') as f:
            group = f['/Geometry/Pipe Nodes/']
            
            # --- Read and Process Attributes ---
            attributes = group['Attributes'][:]
            attr_df = pd.DataFrame(attributes)
            
            # Decode byte string fields to UTF-8 strings
            string_columns = attr_df.select_dtypes([object]).columns  # Changed 'S' to object
            for col in string_columns:
                attr_df[col] = attr_df[col].apply(lambda x: x.decode('utf-8') if isinstance(x, bytes) else x)
            
            # --- Read Points Data ---
            points = group['Points'][:]
            # Create Shapely Point geometries
            geometries = [Point(xy) for xy in points]
            
            # --- Combine Attributes and Geometries into GeoDataFrame ---
            gdf = gpd.GeoDataFrame(attr_df, geometry=geometries)
            
            return gdf
        
        


    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_pipe_network(hdf_path: Path, pipe_network_name: Optional[str] = None, crs: Optional[str] = "EPSG:4326") -> gpd.GeoDataFrame:
        """
        Creates a GeoDataFrame for a pipe network's geometry.

        Parameters:
            hdf_path: Path to the HDF5 file
            pipe_network_name: Name of network (uses first if None)
            crs: Coordinate Reference System (default: "EPSG:4326")

        Returns:
            GeoDataFrame containing:
            - Cell polygons (primary geometry)
            - Face polylines
            - Node points
            - Associated attributes
        """
        with h5py.File(hdf_path, 'r') as f:
            pipe_networks_group = f['/Geometry/Pipe Networks/']
            
            # --- Determine Pipe Network to Use ---
            attributes = pipe_networks_group['Attributes'][:]
            attr_df = pd.DataFrame(attributes)
            
            # Decode 'Name' from byte strings to UTF-8
            attr_df['Name'] = attr_df['Name'].apply(lambda x: x.decode('utf-8') if isinstance(x, bytes) else x)
            
            if pipe_network_name:
                if pipe_network_name not in attr_df['Name'].values:
                    raise ValueError(f"Pipe network '{pipe_network_name}' not found in the HDF5 file.")
                network_idx = attr_df.index[attr_df['Name'] == pipe_network_name][0]
            else:
                network_idx = 0  # Default to first network
            
            # Get the name of the selected pipe network
            selected_network_name = attr_df.at[network_idx, 'Name']
            logging.info(f"Selected Pipe Network: {selected_network_name}")
            
            # Access the selected pipe network group
            network_group_path = f"/Geometry/Pipe Networks/{selected_network_name}/"
            network_group = f[network_group_path]
            
            # --- Helper Functions ---
            def decode_bytes(df: pd.DataFrame) -> pd.DataFrame:
                """Decode byte string columns to UTF-8."""
                string_columns = df.select_dtypes([object]).columns
                for col in string_columns:
                    df[col] = df[col].apply(lambda x: x.decode('utf-8') if isinstance(x, bytes) else x)
                return df
            
            def build_polygons(info, parts, points) -> List[Optional[Polygon or MultiPolygon]]:
                """Build Shapely Polygon or MultiPolygon geometries from HDF5 datasets."""
                poly_coords = list(zip(points[:, 0], points[:, 1]))
                geometries = []
                for i in range(len(info)):
                    cell_info = info[i]
                    point_start_idx = cell_info[0]
                    point_count = cell_info[1]
                    part_start_idx = cell_info[2]
                    part_count = cell_info[3]
                    
                    parts_list = []
                    for p in range(part_start_idx, part_start_idx + part_count):
                        if p >= len(parts):
                            continue  # Prevent index out of range
                        part_info = parts[p]
                        part_point_start = part_info[0]
                        part_point_count = part_info[1]
                        
                        coords = poly_coords[part_point_start : part_point_start + part_point_count]
                        if len(coords) < 3:
                            continue  # Not a valid polygon part
                        parts_list.append(coords)
                    
                    if not parts_list:
                        geometries.append(None)
                    elif len(parts_list) == 1:
                        try:
                            geometries.append(Polygon(parts_list[0]))
                        except ValueError:
                            geometries.append(None)
                    else:
                        try:
                            geometries.append(MultiPolygon([Polygon(p) for p in parts_list if len(p) >= 3]))
                        except ValueError:
                            geometries.append(None)
                return geometries
            
            def build_multilinestring(info, parts, points) -> List[Optional[LineString or MultiLineString]]:
                """Build Shapely LineString or MultiLineString geometries from HDF5 datasets."""
                line_coords = list(zip(points[:, 0], points[:, 1]))
                geometries = []
                for i in range(len(info)):
                    face_info = info[i]
                    point_start_idx = face_info[0]
                    point_count = face_info[1]
                    part_start_idx = face_info[2]
                    part_count = face_info[3]
                    
                    parts_list = []
                    for p in range(part_start_idx, part_start_idx + part_count):
                        if p >= len(parts):
                            continue  # Prevent index out of range
                        part_info = parts[p]
                        part_point_start = part_info[0]
                        part_point_count = part_info[1]
                        
                        coords = line_coords[part_point_start : part_point_start + part_point_count]
                        if len(coords) < 2:
                            continue  # Cannot form LineString with fewer than 2 points
                        parts_list.append(coords)
                    
                    if not parts_list:
                        geometries.append(None)
                    elif len(parts_list) == 1:
                        geometries.append(LineString(parts_list[0]))
                    else:
                        geometries.append(MultiLineString(parts_list))
                return geometries
            
            # --- Read and Process Cell Polygons ---
            cell_polygons_info = network_group['Cell Polygons Info'][:]
            cell_polygons_parts = network_group['Cell Polygons Parts'][:]
            cell_polygons_points = network_group['Cell Polygons Points'][:]
            
            cell_polygons_geometries = build_polygons(cell_polygons_info, cell_polygons_parts, cell_polygons_points)
            
            # --- Read and Process Face Polylines ---
            face_polylines_info = network_group['Face Polylines Info'][:]
            face_polylines_parts = network_group['Face Polylines Parts'][:]
            face_polylines_points = network_group['Face Polylines Points'][:]
            
            face_polylines_geometries = build_multilinestring(face_polylines_info, face_polylines_parts, face_polylines_points)
            
            # --- Read and Process Node Points ---
            node_surface_connectivity_group = network_group.get('Node Surface Connectivity', None)
            if node_surface_connectivity_group is not None:
                node_surface_connectivity = node_surface_connectivity_group[:]
            else:
                node_surface_connectivity = None
            
            # Assuming Node Connectivity Info and Values contain node coordinates
            node_connectivity_info = network_group['Node Connectivity Info'][:]
            node_connectivity_values = network_group['Node Connectivity Values'][:]
            node_indices = network_group['Node Indices'][:]
            node_surface_connectivity = network_group['Node Surface Connectivity'][:]
            
            # For simplicity, assuming that node connectivity includes X and Y coordinates
            # This may need to be adjusted based on actual data structure
            # Here, we'll create dummy points as placeholder
            # Replace with actual coordinate extraction logic as per data structure
            # For demonstration, we'll create random points
            # You should replace this with actual data extraction
            # Example:
            # node_points = network_group['Node Coordinates'][:]
            # node_geometries = [Point(x, y) for x, y in node_points]
            
            # Placeholder for node geometries
            # Assuming node_indices contains Node IDs and coordinates
            # Adjust based on actual dataset structure
            # Here, we assume that node_indices has columns: [Node ID, X, Y]
            # But based on the log, Node Surface Connectivity has ['Node ID', 'Layer', 'Layer ID', 'Sublayer ID']
            # No coordinates are provided, so we cannot create Point geometries unless coordinates are available elsewhere
            # Therefore, this part may need to be adapted based on actual data
            # For now, we'll skip node points geometries
            node_geometries = [None] * len(node_indices)  # Placeholder
            
            # --- Read and Process Cell Property Table ---
            cell_property_table = network_group['Cell Property Table'][:]
            cell_property_df = pd.DataFrame(cell_property_table)
            
            # Decode byte strings if any
            cell_property_df = decode_bytes(cell_property_df)
            
            # --- Read and Process Cells DS Face Indices ---
            cells_ds_face_info = network_group['Cells DS Face Indices Info'][:]
            cells_ds_face_values = network_group['Cells DS Face Indices Values'][:]
            
            # Create lists of DS Face Indices per cell
            cells_ds_face_indices = []
            for i in range(len(cells_ds_face_info)):
                info = cells_ds_face_info[i]
                start_idx, count = info
                indices = cells_ds_face_values[start_idx : start_idx + count]
                cells_ds_face_indices.append(indices.tolist())
            
            # --- Read and Process Cells Face Indices ---
            cells_face_info = network_group['Cells Face Indices Info'][:]
            cells_face_values = network_group['Cells Face Indices Values'][:]
            
            # Create lists of Face Indices per cell
            cells_face_indices = []
            for i in range(len(cells_face_info)):
                info = cells_face_info[i]
                start_idx, count = info
                indices = cells_face_values[start_idx : start_idx + count]
                cells_face_indices.append(indices.tolist())
            
            # --- Read and Process Cells Minimum Elevations ---
            cells_min_elevations = network_group['Cells Minimum Elevations'][:]
            cells_min_elevations_df = pd.DataFrame(cells_min_elevations, columns=['Minimum_Elevation'])
            
            # --- Read and Process Cells Node and Conduit IDs ---
            cells_node_conduit_ids = network_group['Cells Node and Conduit IDs'][:]
            cells_node_conduit_df = pd.DataFrame(cells_node_conduit_ids, columns=['Node_ID', 'Conduit_ID'])
            
            # --- Read and Process Cells US Face Indices ---
            cells_us_face_info = network_group['Cells US Face Indices Info'][:]
            cells_us_face_values = network_group['Cells US Face Indices Values'][:]
            
            # Create lists of US Face Indices per cell
            cells_us_face_indices = []
            for i in range(len(cells_us_face_info)):
                info = cells_us_face_info[i]
                start_idx, count = info
                indices = cells_us_face_values[start_idx : start_idx + count]
                cells_us_face_indices.append(indices.tolist())
            
            # --- Read and Process Conduit Indices ---
            conduit_indices = network_group['Conduit Indices'][:]
            conduit_indices_df = pd.DataFrame(conduit_indices, columns=['Conduit_ID'])
            
            # --- Read and Process Face Property Table ---
            face_property_table = network_group['Face Property Table'][:]
            face_property_df = pd.DataFrame(face_property_table)
            
            # Decode byte strings if any
            face_property_df = decode_bytes(face_property_df)
            
            # --- Read and Process Face Conduit ID and Stations ---
            faces_conduit_id_stations = network_group['Faces Conduit ID and Stations'][:]
            faces_conduit_df = pd.DataFrame(faces_conduit_id_stations, columns=['ConduitID', 'ConduitStation', 'CellUS', 'CellDS', 'Elevation'])
            
            # --- Read and Process Node Connectivity Info and Values ---
            node_connectivity_info = network_group['Node Connectivity Info'][:]
            node_connectivity_values = network_group['Node Connectivity Values'][:]
            
            # Create lists of connected nodes per node
            node_connectivity = []
            for i in range(len(node_connectivity_info)):
                info = node_connectivity_info[i]
                start_idx, count = info
                connections = node_connectivity_values[start_idx : start_idx + count]
                node_connectivity.append(connections.tolist())
            
            # --- Read and Process Node Indices ---
            node_indices = network_group['Node Indices'][:]
            node_indices_df = pd.DataFrame(node_indices, columns=['Node_ID'])
            
            # --- Read and Process Node Surface Connectivity ---
            node_surface_connectivity = network_group['Node Surface Connectivity'][:]
            node_surface_connectivity_df = pd.DataFrame(node_surface_connectivity, columns=['Node_ID', 'Layer', 'Layer_ID', 'Sublayer_ID'])
            
            # --- Combine All Cell-Related Data ---
            cells_df = pd.DataFrame({
                'Cell_ID': range(len(cell_polygons_geometries)),
                'Conduit_ID': cells_node_conduit_df['Conduit_ID'],
                'Node_ID': cells_node_conduit_df['Node_ID'],
                'Minimum_Elevation': cells_min_elevations_df['Minimum_Elevation'],
                'DS_Face_Indices': cells_ds_face_indices,
                'Face_Indices': cells_face_indices,
                'US_Face_Indices': cells_us_face_indices,
                'Cell_Property_Info_Index': cell_property_df['Info Index'],
                # Add other cell properties as needed
            })
            
            # Merge with cell property table
            cells_df = cells_df.merge(cell_property_df, left_on='Cell_Property_Info_Index', right_index=True, how='left')
            
            # --- Combine All Face-Related Data ---
            faces_df = pd.DataFrame({
                'Face_ID': range(len(face_polylines_geometries)),
                'Conduit_ID': faces_conduit_df['ConduitID'],
                'Conduit_Station': faces_conduit_df['ConduitStation'],
                'Cell_US': faces_conduit_df['CellUS'],
                'Cell_DS': faces_conduit_df['CellDS'],
                'Elevation': faces_conduit_df['Elevation'],
                'Face_Property_Info_Index': face_property_df['Info Index'],
                # Add other face properties as needed
            })
            
            # Merge with face property table
            faces_df = faces_df.merge(face_property_df, left_on='Face_Property_Info_Index', right_index=True, how='left')
            
            # --- Combine All Node-Related Data ---
            nodes_df = pd.DataFrame({
                'Node_ID': node_indices_df['Node_ID'],
                'Connected_Nodes': node_connectivity,
                # Add other node properties as needed
            })
            
            # Merge with node surface connectivity
            nodes_df = nodes_df.merge(node_surface_connectivity_df, on='Node_ID', how='left')
            
            # --- Create GeoDataFrame ---
            # Main DataFrame will be cells with their polygons
            cells_df['Cell_Polygon'] = cell_polygons_geometries
            
            # Add face polylines as a separate column (list of geometries)
            cells_df['Face_Polylines'] = cells_df['Face_Indices'].apply(lambda indices: [face_polylines_geometries[i] for i in indices if i < len(face_polylines_geometries)])
            
            # Add node points if geometries are available
            # Currently, node_geometries are placeholders (None). Replace with actual geometries if available.
            cells_df['Node_Point'] = cells_df['Node_ID'].apply(lambda nid: node_geometries[nid] if nid < len(node_geometries) else None)
            
            # Initialize GeoDataFrame with Cell Polygons
            gdf = gpd.GeoDataFrame(cells_df, geometry='Cell_Polygon', crs=crs)
            
            # Optionally, add Face Polylines and Node Points as separate columns
            # Note: GeoPandas primarily supports one geometry column, so these are stored as object columns
            gdf['Face_Polylines'] = cells_df['Face_Polylines']
            gdf['Node_Point'] = cells_df['Node_Point']
            
            # You can further expand this GeoDataFrame by merging with faces_df and nodes_df if needed
            
            return gdf
        
        
        
        
        


    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_pipe_profile(hdf_path: Path, conduit_id: int) -> pd.DataFrame:
        """
        Extract the profile data for a specific pipe conduit.

        Args:
            hdf_path (Path): Path to the HDF file.
            conduit_id (int): ID of the conduit to extract profile for.

        Returns:
            pd.DataFrame: DataFrame containing the pipe profile data.

        Raises:
            KeyError: If the required datasets are not found in the HDF file.
            IndexError: If the specified conduit_id is out of range.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf:
                # Get conduit info
                terrain_profiles_info = hdf['/Geometry/Pipe Conduits/Terrain Profiles Info'][()]
                
                if conduit_id >= len(terrain_profiles_info):
                    raise IndexError(f"conduit_id {conduit_id} is out of range")

                start, count = terrain_profiles_info[conduit_id]

                # Extract profile data
                profile_values = hdf['/Geometry/Pipe Conduits/Terrain Profiles Values'][start:start+count]

                # Create DataFrame
                df = pd.DataFrame(profile_values, columns=['Station', 'Elevation'])

                return df

        except KeyError as e:
            logger.error(f"Required dataset not found in HDF file: {e}")
            raise
        except IndexError as e:
            logger.error(f"Invalid conduit_id: {e}")
            raise
        except Exception as e:
            logger.error(f"Error extracting pipe profile data: {e}")
            raise
        
        
   









# RESULTS FUNCTIONS: 

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_pipe_network_summary(hdf_path: Path) -> pd.DataFrame:
        """
        Extract results summary data for pipe networks from the HDF file.

        Args:
            hdf_path (Path): Path to the HDF file.

        Returns:
            pd.DataFrame: DataFrame containing pipe network summary data.

        Raises:
            KeyError: If the required datasets are not found in the HDF file.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf:
                # Extract summary data
                summary_path = "/Results/Unsteady/Summary/Pipe Network"
                if summary_path not in hdf:
                    logger.warning("Pipe Network summary data not found in HDF file")
                    return pd.DataFrame()

                summary_data = hdf[summary_path][()]
                
                # Create DataFrame
                df = pd.DataFrame(summary_data)

                # Convert column names
                df.columns = [col.decode('utf-8') for col in df.columns]

                return df

        except KeyError as e:
            logger.error(f"Required dataset not found in HDF file: {e}")
            raise
        except Exception as e:
            logger.error(f"Error extracting pipe network summary data: {e}")
            raise




    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def extract_timeseries_for_node(plan_hdf_path: Path, node_id: int) -> Dict[str, xr.DataArray]:
        """
        Extract time series data for a specific node.
        
        Parameters:
        -----------
        plan_hdf_path : Path
            Path to HEC-RAS results HDF file
        node_id : int
            ID of the node to extract data for
            
        Returns:
        --------
        Dict[str, xr.DataArray]: Dictionary containing time series data for:
            - Depth
            - Drop Inlet Flow
            - Water Surface
        """
        try:
            node_variables = ["Nodes/Depth", "Nodes/Drop Inlet Flow", "Nodes/Water Surface"]
            node_data = {}

            for variable in node_variables:
                data = HdfPipe.get_pipe_network_timeseries(plan_hdf_path, variable=variable)
                node_data[variable] = data.sel(location=node_id)
            
            return node_data
        except Exception as e:
            logger.error(f"Error extracting time series data for node {node_id}: {str(e)}")
            raise

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def extract_timeseries_for_conduit(plan_hdf_path: Path, conduit_id: int) -> Dict[str, xr.DataArray]:
        """
        Extract time series data for a specific conduit.
        
        Parameters:
        -----------
        plan_hdf_path : Path
            Path to HEC-RAS results HDF file
        conduit_id : int
            ID of the conduit to extract data for
            
        Returns:
        --------
        Dict[str, xr.DataArray]: Dictionary containing time series data for:
            - Pipe Flow (US/DS)
            - Velocity (US/DS)
        """
        try:
            conduit_variables = ["Pipes/Pipe Flow DS", "Pipes/Pipe Flow US", 
                                "Pipes/Vel DS", "Pipes/Vel US"]
            conduit_data = {}

            for variable in conduit_variables:
                data = HdfPipe.get_pipe_network_timeseries(plan_hdf_path, variable=variable)
                conduit_data[variable] = data.sel(location=conduit_id)
            
            return conduit_data
        except Exception as e:
            logger.error(f"Error extracting time series data for conduit {conduit_id}: {str(e)}")
            raise


    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_pipe_network_timeseries(hdf_path: Path, variable: str) -> xr.DataArray:
        """
        Extracts timeseries data for a pipe network variable.

        Parameters:
            hdf_path: Path to the HDF5 file
            variable: Variable name to extract. Valid options:
                - Cell: Courant, Water Surface
                - Face: Flow, Velocity, Water Surface
                - Pipes: Pipe Flow (DS/US), Vel (DS/US)
                - Nodes: Depth, Drop Inlet Flow, Water Surface

        Returns:
            xarray.DataArray with dimensions (time, location)
        """
        valid_variables = [
            "Cell Courant", "Cell Water Surface", "Face Flow", "Face Velocity",
            "Face Water Surface", "Pipes/Pipe Flow DS", "Pipes/Pipe Flow US",
            "Pipes/Vel DS", "Pipes/Vel US", "Nodes/Depth", "Nodes/Drop Inlet Flow",
            "Nodes/Water Surface"
        ]

        if variable not in valid_variables:
            raise ValueError(f"Invalid variable. Must be one of: {', '.join(valid_variables)}")

        try:
            with h5py.File(hdf_path, 'r') as hdf:
                # Extract timeseries data
                data_path = f"/Results/Unsteady/Output/Output Blocks/DSS Hydrograph Output/Unsteady Time Series/Pipe Networks/Davis/{variable}"
                data = hdf[data_path][()]

                # Extract time information using the correct method name
                time = HdfBase.get_unsteady_timestamps(hdf)

                # Create DataArray
                da = xr.DataArray(
                    data=data,
                    dims=['time', 'location'],
                    coords={'time': time, 'location': range(data.shape[1])},
                    name=variable
                )

                # Add attributes
                da.attrs['units'] = hdf[data_path].attrs.get('Units', b'').decode('utf-8')
                da.attrs['variable'] = variable

                return da

        except KeyError as e:
            logger.error(f"Required dataset not found in HDF file: {e}")
            raise
        except Exception as e:
            logger.error(f"Error extracting pipe network timeseries data: {e}")
            raise





==================================================

File: c:\GH\ras-commander\ras_commander\HdfPlan.py
==================================================
"""
Class: HdfPlan

Attribution: A substantial amount of code in this file is sourced or derived 
from the https://github.com/fema-ffrd/rashdf library, 
released under MIT license and Copyright (c) 2024 fema-ffrd

The file has been forked and modified for use in RAS Commander.

-----

All of the methods in this class are static and are designed to be used without instantiation.


- get_plan_start_time()
- get_plan_end_time()
- get_plan_timestamps_list()     
- get_plan_information()
- get_plan_parameters()
- get_plan_met_precip()
- get_geometry_information()






"""

import h5py
import pandas as pd
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional
import re
import numpy as np

from .HdfBase import HdfBase
from .HdfUtils import HdfUtils
from .Decorators import standardize_input, log_call
from .LoggingConfig import setup_logging, get_logger

logger = get_logger(__name__)


class HdfPlan:
    """
    A class for handling HEC-RAS plan HDF files.

    Provides static methods for extracting data from HEC-RAS plan HDF files including 
    simulation times, plan information, and geometry attributes. All methods use 
    @standardize_input for handling different input types and @log_call for logging.

    Note: This code is partially derived from the rashdf library (https://github.com/fema-ffrd/rashdf)
    under MIT license.
    """

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_plan_start_time(hdf_path: Path) -> datetime:
        """
        Get the plan start time from the plan file.

        Args:
            hdf_path (Path): Path to the HEC-RAS plan HDF file.

        Returns:
            datetime: The plan start time in UTC format.

        Raises:
            ValueError: If there's an error reading the plan start time.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                return HdfBase.get_simulation_start_time(hdf_file)
        except Exception as e:
            raise ValueError(f"Failed to get plan start time: {str(e)}")

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_plan_end_time(hdf_path: Path) -> datetime:
        """
        Get the plan end time from the plan file.

        Args:
            hdf_path (Path): Path to the HEC-RAS plan HDF file.

        Returns:
            datetime: The plan end time.

        Raises:
            ValueError: If there's an error reading the plan end time.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                plan_info = hdf_file.get('Plan Data/Plan Information')
                if plan_info is None:
                    raise ValueError("Plan Information not found in HDF file")
                time_str = plan_info.attrs.get('Simulation End Time')
                return HdfUtils.parse_ras_datetime(time_str.decode('utf-8'))
        except Exception as e:
            raise ValueError(f"Failed to get plan end time: {str(e)}")

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_plan_timestamps_list(hdf_path: Path) -> List[datetime]:
        """
        Get the list of output timestamps from the plan simulation.

        Args:
            hdf_path (Path): Path to the HEC-RAS plan HDF file.

        Returns:
            List[datetime]: Chronological list of simulation output timestamps in UTC.

        Raises:
            ValueError: If there's an error retrieving the plan timestamps.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                return HdfBase.get_unsteady_timestamps(hdf_file)
        except Exception as e:
            raise ValueError(f"Failed to get plan timestamps: {str(e)}")

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_plan_information(hdf_path: Path) -> Dict:
        """
        Get plan information from a HEC-RAS HDF plan file.

        Args:
            hdf_path (Path): Path to the HEC-RAS plan HDF file.

        Returns:
            Dict: Plan information including simulation times, flow regime, 
                computation settings, etc.

        Raises:
            ValueError: If there's an error retrieving the plan information.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                plan_info_path = "Plan Data/Plan Information"
                if plan_info_path not in hdf_file:
                    raise ValueError(f"Plan Information not found in {hdf_path}")
                
                attrs = {}
                for key in hdf_file[plan_info_path].attrs.keys():
                    value = hdf_file[plan_info_path].attrs[key]
                    if isinstance(value, bytes):
                        value = HdfUtils.convert_ras_string(value)
                    attrs[key] = value
                
                return attrs
        except Exception as e:
            raise ValueError(f"Failed to get plan information attributes: {str(e)}")

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_plan_parameters(hdf_path: Path) -> pd.DataFrame:
        """
        Get plan parameter attributes from a HEC-RAS HDF plan file.

        Args:
            hdf_path (Path): Path to the HEC-RAS plan HDF file.

        Returns:
            pd.DataFrame: A DataFrame containing the plan parameters with columns:
                - Parameter: Name of the parameter
                - Value: Value of the parameter (decoded if byte string)
                - Plan: Plan number (01-99) extracted from the filename (ProjectName.pXX.hdf)

        Raises:
            ValueError: If there's an error retrieving the plan parameter attributes.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                plan_params_path = "Plan Data/Plan Parameters"
                if plan_params_path not in hdf_file:
                    raise ValueError(f"Plan Parameters not found in {hdf_path}")
                
                # Extract parameters
                params_dict = {}
                for key in hdf_file[plan_params_path].attrs.keys():
                    value = hdf_file[plan_params_path].attrs[key]
                    
                    # Handle different types of values
                    if isinstance(value, bytes):
                        value = HdfUtils.convert_ras_string(value)
                    elif isinstance(value, np.ndarray):
                        # Handle array values
                        if value.dtype.kind in {'S', 'a'}:  # Array of byte strings
                            value = [v.decode('utf-8') if isinstance(v, bytes) else v for v in value]
                        else:
                            value = value.tolist()  # Convert numpy array to list
                        
                        # If it's a single-item list, extract the value
                        if len(value) == 1:
                            value = value[0]
                    
                    params_dict[key] = value
                
                # Create DataFrame from parameters
                df = pd.DataFrame.from_dict(params_dict, orient='index', columns=['Value'])
                df.index.name = 'Parameter'
                df = df.reset_index()
                
                # Extract plan number from filename
                filename = Path(hdf_path).name
                plan_match = re.search(r'\.p(\d{2})\.', filename)
                if plan_match:
                    plan_num = plan_match.group(1)
                else:
                    plan_num = "00"  # Default if no match found
                    logger.warning(f"Could not extract plan number from filename: {filename}")
                
                df['Plan'] = plan_num
                
                # Reorder columns to put Plan first
                df = df[['Plan', 'Parameter', 'Value']]
                
                return df

        except Exception as e:
            raise ValueError(f"Failed to get plan parameter attributes: {str(e)}")

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_plan_met_precip(hdf_path: Path) -> Dict:
        """
        Get precipitation attributes from a HEC-RAS HDF plan file.

        Args:
            hdf_path (Path): Path to the HEC-RAS plan HDF file.

        Returns:
            Dict: Precipitation attributes including method, time series data,
                and spatial distribution if available. Returns empty dict if
                no precipitation data exists.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                precip_path = "Event Conditions/Meteorology/Precipitation"
                if precip_path not in hdf_file:
                    logger.error(f"Precipitation data not found in {hdf_path}")
                    return {}
                
                attrs = {}
                for key in hdf_file[precip_path].attrs.keys():
                    value = hdf_file[precip_path].attrs[key]
                    if isinstance(value, bytes):
                        value = HdfUtils.convert_ras_string(value)
                    attrs[key] = value
                
                return attrs
        except Exception as e:
            logger.error(f"Failed to get precipitation attributes: {str(e)}")
            return {}
        
    @staticmethod
    @log_call
    @standardize_input(file_type='geom_hdf')
    def get_geometry_information(hdf_path: Path) -> pd.DataFrame:
        """
        Get root level geometry attributes from the HDF plan file.

        Args:
            hdf_path (Path): Path to the HEC-RAS plan HDF file.

        Returns:
            pd.DataFrame: DataFrame with geometry attributes including Creation Date/Time,
                        Version, Units, and Projection information.

        Raises:
            ValueError: If Geometry group is missing or there's an error reading attributes.
        """
        logger.info(f"Getting geometry attributes from {hdf_path}")
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                geom_attrs_path = "Geometry"
                logger.info(f"Checking for Geometry group in {hdf_path}")
                if geom_attrs_path not in hdf_file:
                    logger.error(f"Geometry group not found in {hdf_path}")
                    raise ValueError(f"Geometry group not found in {hdf_path}")

                attrs = {}
                geom_group = hdf_file[geom_attrs_path]
                logger.info("Getting root level geometry attributes")
                # Get root level geometry attributes only
                for key, value in geom_group.attrs.items():
                    if isinstance(value, bytes):
                        try:
                            value = HdfUtils.convert_ras_string(value)
                        except UnicodeDecodeError:
                            logger.warning(f"Failed to decode byte string for root attribute {key}")
                            continue
                    attrs[key] = value
                    logger.debug(f"Geometry attribute: {key} = {value}")

                logger.info(f"Successfully extracted {len(attrs)} root level geometry attributes")
                return pd.DataFrame.from_dict(attrs, orient='index', columns=['Value'])

        except (OSError, RuntimeError) as e:
            logger.error(f"Failed to read HDF file {hdf_path}: {str(e)}")
            raise ValueError(f"Failed to read HDF file {hdf_path}: {str(e)}")
        except Exception as e:
            logger.error(f"Failed to get geometry attributes: {str(e)}")
            raise ValueError(f"Failed to get geometry attributes: {str(e)}")



==================================================

File: c:\GH\ras-commander\ras_commander\HdfPlot.py
==================================================
"""
Class: HdfPlot

A collection of static methods for plotting general HDF data from HEC-RAS models.
"""

import matplotlib.pyplot as plt
import pandas as pd
import geopandas as gpd
from typing import Optional, Union, Tuple
from .Decorators import log_call, standardize_input
from .HdfUtils import HdfUtils

class HdfPlot:
    """
    A class containing static methods for plotting general HDF data from HEC-RAS models.
    
    This class provides plotting functionality for HDF data, focusing on
    geometric elements like cell polygons and time series data.
    """

    @staticmethod
    @log_call
    def plot_mesh_cells(
        cell_polygons_df: pd.DataFrame, ## THIS IS A GEODATAFRAME - NEED TO EDIT BOTH ARGUMENT AND USAGE
        projection: str,
        title: str = '2D Flow Area Mesh Cells',
        figsize: Tuple[int, int] = (12, 8)
    ) -> Optional[gpd.GeoDataFrame]:
        """
        Plots the mesh cells from the provided DataFrame and returns the GeoDataFrame.

        Args:
            cell_polygons_df (pd.DataFrame): DataFrame containing cell polygons.
            projection (str): The coordinate reference system to assign to the GeoDataFrame.
            title (str, optional): Plot title. Defaults to '2D Flow Area Mesh Cells'.
            figsize (Tuple[int, int], optional): Figure size. Defaults to (12, 8).

        Returns:
            Optional[gpd.GeoDataFrame]: GeoDataFrame containing the mesh cells, or None if no cells found.
        """
        if cell_polygons_df.empty:
            print("No Cell Polygons found.")
            return None

        # Convert any datetime columns to strings using HdfUtils
        cell_polygons_df = HdfUtils.convert_df_datetimes_to_str(cell_polygons_df)
        
        cell_polygons_gdf = gpd.GeoDataFrame(cell_polygons_df, crs=projection)

        print("Cell Polygons CRS:", cell_polygons_gdf.crs)
        display(cell_polygons_gdf.head())

        fig, ax = plt.subplots(figsize=figsize)
        cell_polygons_gdf.plot(ax=ax, edgecolor='blue', facecolor='none')
        ax.set_xlabel('X Coordinate')
        ax.set_ylabel('Y Coordinate')
        ax.set_title(title)
        ax.grid(True)
        plt.tight_layout()
        plt.show()

        return cell_polygons_gdf

    @staticmethod
    @log_call
    def plot_time_series(
        df: pd.DataFrame,
        x_col: str,
        y_col: str,
        title: str = None,
        figsize: Tuple[int, int] = (12, 6)
    ) -> None:
        """
        Plots time series data from HDF results.

        Args:
            df (pd.DataFrame): DataFrame containing the time series data
            x_col (str): Name of the column containing x-axis data (usually time)
            y_col (str): Name of the column containing y-axis data
            title (str, optional): Plot title. Defaults to None.
            figsize (Tuple[int, int], optional): Figure size. Defaults to (12, 6).
        """
        # Convert any datetime columns to strings
        df = HdfUtils.convert_df_datetimes_to_str(df)
        
        fig, ax = plt.subplots(figsize=figsize)
        df.plot(x=x_col, y=y_col, ax=ax)
        
        if title:
            ax.set_title(title)
        ax.grid(True)
        plt.tight_layout()
        plt.show()
    
    
    
    
    
    
    
    
    
    
==================================================

File: c:\GH\ras-commander\ras_commander\HdfPump.py
==================================================
"""
Class: HdfPump

All of the methods in this class are static and are designed to be used without instantiation.

List of Functions in HdfPump:
- get_pump_stations()
- get_pump_groups()
- get_pump_station_timeseries()
- get_pump_station_summary()
- get_pump_operation_timeseries()


"""


import h5py
import numpy as np
import pandas as pd
import geopandas as gpd
import xarray as xr
from pathlib import Path
from shapely.geometry import Point
from typing import List, Dict, Any, Optional, Union
from .HdfUtils import HdfUtils
from .HdfBase import HdfBase
from .Decorators import standardize_input, log_call
from .LoggingConfig import get_logger

logger = get_logger(__name__)

class HdfPump:
    """
    A class for handling pump station related data from HEC-RAS HDF files.

    This class provides static methods to extract and process pump station data, including:
    - Pump station locations and attributes
    - Pump group configurations and efficiency curves
    - Time series results for pump operations
    - Summary statistics for pump stations

    All methods are static and designed to work with HEC-RAS HDF files containing pump data.
    """

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_pump_stations(hdf_path: Path) -> gpd.GeoDataFrame:
        """
        Extract pump station data from the HDF file.

        Args:
            hdf_path (Path): Path to the HEC-RAS HDF file.

        Returns:
            gpd.GeoDataFrame: GeoDataFrame containing pump station data with columns:
                - geometry: Point geometry of pump station location
                - station_id: Unique identifier for each pump station
                - Additional attributes from the HDF file

        Raises:
            KeyError: If pump station datasets are not found in the HDF file.
            Exception: If there are errors processing the pump station data.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf:
                # Extract pump station data
                attributes = hdf['/Geometry/Pump Stations/Attributes'][()]
                points = hdf['/Geometry/Pump Stations/Points'][()]

                # Create geometries
                geometries = [Point(x, y) for x, y in points]

                # Create GeoDataFrame
                gdf = gpd.GeoDataFrame(geometry=geometries)
                gdf['station_id'] = range(len(gdf))

                # Add attributes and decode byte strings
                attr_df = pd.DataFrame(attributes)
                string_columns = attr_df.select_dtypes([object]).columns
                for col in string_columns:
                    attr_df[col] = attr_df[col].apply(lambda x: x.decode('utf-8') if isinstance(x, bytes) else x)
                
                for col in attr_df.columns:
                    gdf[col] = attr_df[col]

                # Set CRS if available
                crs = HdfBase.get_projection(hdf_path)
                if crs:
                    gdf.set_crs(crs, inplace=True)

                return gdf

        except KeyError as e:
            logger.error(f"Required dataset not found in HDF file: {e}")
            raise
        except Exception as e:
            logger.error(f"Error extracting pump station data: {e}")
            raise

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_pump_groups(hdf_path: Path) -> pd.DataFrame:
        """
        Extract pump group data from the HDF file.

        Args:
            hdf_path (Path): Path to the HEC-RAS HDF file.

        Returns:
            pd.DataFrame: DataFrame containing pump group data with columns:
                - efficiency_curve_start: Starting index of efficiency curve data
                - efficiency_curve_count: Number of points in efficiency curve
                - efficiency_curve: List of efficiency curve values
                - Additional attributes from the HDF file

        Raises:
            KeyError: If pump group datasets are not found in the HDF file.
            Exception: If there are errors processing the pump group data.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf:
                # Extract pump group data
                attributes = hdf['/Geometry/Pump Stations/Pump Groups/Attributes'][()]
                efficiency_curves_info = hdf['/Geometry/Pump Stations/Pump Groups/Efficiency Curves Info'][()]
                efficiency_curves_values = hdf['/Geometry/Pump Stations/Pump Groups/Efficiency Curves Values'][()]

                # Create DataFrame and decode byte strings
                df = pd.DataFrame(attributes)
                string_columns = df.select_dtypes([object]).columns
                for col in string_columns:
                    df[col] = df[col].apply(lambda x: x.decode('utf-8') if isinstance(x, bytes) else x)

                # Add efficiency curve data
                df['efficiency_curve_start'] = efficiency_curves_info[:, 0]
                df['efficiency_curve_count'] = efficiency_curves_info[:, 1]

                # Process efficiency curves
                def get_efficiency_curve(start, count):
                    return efficiency_curves_values[start:start+count].tolist()

                df['efficiency_curve'] = df.apply(lambda row: get_efficiency_curve(row['efficiency_curve_start'], row['efficiency_curve_count']), axis=1)

                return df

        except KeyError as e:
            logger.error(f"Required dataset not found in HDF file: {e}")
            raise
        except Exception as e:
            logger.error(f"Error extracting pump group data: {e}")
            raise

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_pump_station_timeseries(hdf_path: Path, pump_station: str) -> xr.DataArray:
        """
        Extract timeseries results data for a specific pump station.

        Args:
            hdf_path (Path): Path to the HEC-RAS HDF file.
            pump_station (str): Name or identifier of the pump station.

        Returns:
            xr.DataArray: DataArray containing the timeseries data with dimensions:
                - time: Timestamps of simulation
                - variable: Variables including ['Flow', 'Stage HW', 'Stage TW', 
                           'Pump Station', 'Pumps on']
            Attributes include units and pump station name.

        Raises:
            KeyError: If required datasets are not found in the HDF file.
            ValueError: If the specified pump station name is not found.
            Exception: If there are errors processing the timeseries data.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf:
                # Check if the pump station exists
                pumping_stations_path = "/Results/Unsteady/Output/Output Blocks/DSS Hydrograph Output/Unsteady Time Series/Pumping Stations"
                if pump_station not in hdf[pumping_stations_path]:
                    raise ValueError(f"Pump station '{pump_station}' not found in HDF file")

                # Extract timeseries data
                data_path = f"{pumping_stations_path}/{pump_station}/Structure Variables"
                data = hdf[data_path][()]

                # Extract time information - Updated to use new method name
                time = HdfBase.get_unsteady_timestamps(hdf)

                # Create DataArray
                da = xr.DataArray(
                    data=data,
                    dims=['time', 'variable'],
                    coords={'time': time, 'variable': ['Flow', 'Stage HW', 'Stage TW', 'Pump Station', 'Pumps on']},
                    name=pump_station
                )

                # Add attributes and decode byte strings
                units = hdf[data_path].attrs.get('Variable_Unit', b'')
                da.attrs['units'] = units.decode('utf-8') if isinstance(units, bytes) else units
                da.attrs['pump_station'] = pump_station

                return da

        except KeyError as e:
            logger.error(f"Required dataset not found in HDF file: {e}")
            raise
        except ValueError as e:
            logger.error(str(e))
            raise
        except Exception as e:
            logger.error(f"Error extracting pump station timeseries data: {e}")
            raise

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_pump_station_summary(hdf_path: Path) -> pd.DataFrame:
        """
        Extract summary statistics and performance data for all pump stations.

        Args:
            hdf_path (Path): Path to the HEC-RAS HDF file.

        Returns:
            pd.DataFrame: DataFrame containing pump station summary data including
                operational statistics and performance metrics. Returns empty DataFrame
                if no summary data is found.

        Raises:
            KeyError: If the summary dataset is not found in the HDF file.
            Exception: If there are errors processing the summary data.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf:
                # Extract summary data
                summary_path = "/Results/Unsteady/Summary/Pump Station"
                if summary_path not in hdf:
                    logger.warning("Pump Station summary data not found in HDF file")
                    return pd.DataFrame()

                summary_data = hdf[summary_path][()]
                
                # Create DataFrame and decode byte strings
                df = pd.DataFrame(summary_data)
                string_columns = df.select_dtypes([object]).columns
                for col in string_columns:
                    df[col] = df[col].apply(lambda x: x.decode('utf-8') if isinstance(x, bytes) else x)

                return df

        except KeyError as e:
            logger.error(f"Required dataset not found in HDF file: {e}")
            raise
        except Exception as e:
            logger.error(f"Error extracting pump station summary data: {e}")
            raise

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_pump_operation_timeseries(hdf_path: Path, pump_station: str) -> pd.DataFrame:
        """
        Extract detailed pump operation results data for a specific pump station.

        Args:
            hdf_path (Path): Path to the HEC-RAS HDF file.
            pump_station (str): Name or identifier of the pump station.

        Returns:
            pd.DataFrame: DataFrame containing pump operation data with columns:
                - Time: Simulation timestamps
                - Flow: Pump flow rate
                - Stage HW: Headwater stage
                - Stage TW: Tailwater stage
                - Pump Station: Station identifier
                - Pumps on: Number of active pumps

        Raises:
            KeyError: If required datasets are not found in the HDF file.
            ValueError: If the specified pump station name is not found.
            Exception: If there are errors processing the operation data.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf:
                # Check if the pump station exists
                pump_stations_path = "/Results/Unsteady/Output/Output Blocks/DSS Profile Output/Unsteady Time Series/Pumping Stations"
                if pump_station not in hdf[pump_stations_path]:
                    raise ValueError(f"Pump station '{pump_station}' not found in HDF file")

                # Extract pump operation data
                data_path = f"{pump_stations_path}/{pump_station}/Structure Variables"
                data = hdf[data_path][()]

                # Extract time information - Updated to use new method name
                time = HdfBase.get_unsteady_timestamps(hdf)

                # Create DataFrame and decode byte strings
                df = pd.DataFrame(data, columns=['Flow', 'Stage HW', 'Stage TW', 'Pump Station', 'Pumps on'])
                string_columns = df.select_dtypes([object]).columns
                for col in string_columns:
                    df[col] = df[col].apply(lambda x: x.decode('utf-8') if isinstance(x, bytes) else x)
                    
                df['Time'] = time

                return df

        except KeyError as e:
            logger.error(f"Required dataset not found in HDF file: {e}")
            raise
        except ValueError as e:
            logger.error(str(e))
            raise
        except Exception as e:
            logger.error(f"Error extracting pump operation data: {e}")
            raise
==================================================

File: c:\GH\ras-commander\ras_commander\HdfResultsMesh.py
==================================================
"""
Class: HdfResultsMesh

Attribution: A substantial amount of code in this file is sourced or derived 
from the https://github.com/fema-ffrd/rashdf library, 
released under MIT license and Copyright (c) 2024 fema-ffrd

The file has been forked and modified for use in RAS Commander.

-----

All methods in this class are static and designed to be used without instantiation.

Public Functions:
- get_mesh_summary(): Get summary output data for a variable 
- get_mesh_timeseries(): Get timeseries output for a mesh and variable  
- get_mesh_faces_timeseries(): Get timeseries for all face-based variables
- get_mesh_cells_timeseries(): Get timeseries for mesh cells
- get_mesh_last_iter(): Get last iteration count for cells
- get_mesh_max_ws(): Get maximum water surface elevation at each cell   
- get_mesh_min_ws(): Get minimum water surface elevation at each cell
- get_mesh_max_face_v(): Get maximum face velocity at each face
- get_mesh_min_face_v(): Get minimum face velocity at each face
- get_mesh_max_ws_err(): Get maximum water surface error at each cell
- get_mesh_max_iter(): Get maximum iteration count at each cell

Private Functions:
- _get_mesh_timeseries_output_path(): Get HDF path for timeseries output  #REDUNDANT??
- _get_mesh_cells_timeseries_output(): Internal handler for cell timeseries   #REDUNDANT??
- _get_mesh_timeseries_output(): Internal handler for mesh timeseries       # FACES?? 
- _get_mesh_timeseries_output_values_units(): Get values and units for timeseries
- _get_available_meshes(): Get list of available meshes in HDF            #USE HDFBASE OR HDFUTIL
- get_mesh_summary_output(): Internal handler for summary output        
- get_mesh_summary_output_group(): Get HDF group for summary output         #REDUNDANT??  Include in Above

The class works with HEC-RAS version 6.0+ plan HDF files and uses HdfBase and 
HdfUtils for common operations. Methods use @log_call decorator for logging and 
@standardize_input decorator to handle different input types.






REVISIONS MADE:

Use get_ prefix for functions that return data.  
BUT, we will never set results data, so we should use get_ for results data.

Renamed functions:
- mesh_summary_output() to get_mesh_summary()
- mesh_timeseries_output() to get_mesh_timeseries()
- mesh_faces_timeseries_output() to get_mesh_faces_timeseries()
- mesh_cells_timeseries_output() to get_mesh_cells_timeseries()
- mesh_last_iter() to get_mesh_last_iter()
- mesh_max_ws() to get_mesh_max_ws()







"""

import numpy as np
import pandas as pd
import xarray as xr
from pathlib import Path
import h5py
from typing import Union, List, Optional, Dict, Any, Tuple
from .HdfMesh import HdfMesh
from .HdfBase import HdfBase
from .HdfUtils import HdfUtils
from .Decorators import log_call, standardize_input
from .LoggingConfig import setup_logging, get_logger
import geopandas as gpd

logger = get_logger(__name__)

class HdfResultsMesh:
    """
    Handles mesh-related results from HEC-RAS HDF files.

    Provides methods to extract and analyze:
    - Mesh summary outputs
    - Timeseries data
    - Water surface elevations
    - Velocities
    - Error metrics

    Works with HEC-RAS 6.0+ plan HDF files.
    """

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_mesh_summary(hdf_path: Path, var: str, round_to: str = "100ms") -> pd.DataFrame:
        """
        Get timeseries output for a specific mesh and variable.

        Args:
            hdf_path (Path): Path to the HDF file
            mesh_name (str): Name of the mesh
            var (str): Variable to retrieve (see valid options below)
            truncate (bool): Whether to truncate trailing zeros (default True)

        Returns:
            xr.DataArray: DataArray with dimensions:
                - time: Timestamps
                - face_id/cell_id: IDs for faces/cells
                And attributes:
                - units: Variable units
                - mesh_name: Name of mesh
                - variable: Variable name

        Valid variables include:
            "Water Surface", "Face Velocity", "Cell Velocity X"...
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                return HdfResultsMesh.get_mesh_summary_output(hdf_file, var, round_to)
        except Exception as e:
            logger.error(f"Error in get_mesh_summary: {str(e)}")
            logger.error(f"Variable: {var}")
            raise ValueError(f"Failed to get summary output: {str(e)}")

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_mesh_timeseries(hdf_path: Path, mesh_name: str, var: str, truncate: bool = True) -> xr.DataArray:
        """
        Get timeseries output for a specific mesh and variable.

        Args:
            hdf_path (Path): Path to the HDF file
            mesh_name (str): Name of the mesh
            var (str): Variable to retrieve (see valid options below)
            truncate (bool): Whether to truncate trailing zeros (default True)

        Returns:
            xr.DataArray: DataArray with dimensions:
                - time: Timestamps
                - face_id/cell_id: IDs for faces/cells
                And attributes:
                - units: Variable units
                - mesh_name: Name of mesh
                - variable: Variable name

        Valid variables include:
            "Water Surface", "Face Velocity", "Cell Velocity X"...
        """
        with h5py.File(hdf_path, 'r') as hdf_path:
            return HdfResultsMesh._get_mesh_timeseries_output(hdf_path, mesh_name, var, truncate)

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_mesh_faces_timeseries(hdf_path: Path, mesh_name: str) -> xr.Dataset:
        """
        Get timeseries output for all face-based variables of a specific mesh.

        Args:
            hdf_path (Path): Path to the HDF file.
            mesh_name (str): Name of the mesh.

        Returns:
            xr.Dataset: Dataset containing the timeseries output for all face-based variables.
        """
        face_vars = ["Face Velocity", "Face Flow"]
        datasets = []
        
        for var in face_vars:
            try:
                da = HdfResultsMesh.get_mesh_timeseries(hdf_path, mesh_name, var)
                # Assign the variable name as the DataArray name
                da.name = var.lower().replace(' ', '_')
                datasets.append(da)
            except Exception as e:
                logger.warning(f"Failed to process {var} for mesh {mesh_name}: {str(e)}")
        
        if not datasets:
            logger.error(f"No valid data found for mesh {mesh_name}")
            return xr.Dataset()
        
        try:
            return xr.merge(datasets)
        except Exception as e:
            logger.error(f"Failed to merge datasets: {str(e)}")
            return xr.Dataset()

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_mesh_cells_timeseries(hdf_path: Path, mesh_names: Optional[Union[str, List[str]]] = None, var: Optional[str] = None, truncate: bool = False, ras_object: Optional[Any] = None) -> Dict[str, xr.Dataset]:
        """
        Get mesh cells timeseries output.

        Args:
            hdf_path (Path): Path to HDF file
            mesh_names (str|List[str], optional): Mesh name(s). If None, processes all meshes
            var (str, optional): Variable name. If None, retrieves all variables
            truncate (bool): Remove trailing zeros if True
            ras_object (Any, optional): RAS object if available

        Returns:
            Dict[str, xr.Dataset]: Dictionary mapping mesh names to datasets containing:
                - Time-indexed variables
                - Cell/face IDs
                - Variable metadata
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_path:
                return HdfResultsMesh._get_mesh_cells_timeseries_output(hdf_path, mesh_names, var, truncate)
        except Exception as e:
            logger.error(f"Error in get_mesh_cells_timeseries: {str(e)}")
            raise ValueError(f"Error processing timeseries output data: {e}")

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_mesh_last_iter(hdf_file: Path) -> pd.DataFrame:
        """
        Get last iteration count for each mesh cell.

        Args:
            hdf_path (Path): Path to the HDF file.

        Returns:
            pd.DataFrame: DataFrame containing last iteration counts.
        """
        return HdfResultsMesh.get_mesh_summary_output(hdf_file, "Cell Last Iteration")


    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_mesh_max_ws(hdf_path: Path, round_to: str = "100ms") -> gpd.GeoDataFrame:
        """
        Get maximum water surface elevation for each mesh cell.

        Args:
            hdf_path (Path): Path to the HDF file.
            round_to (str): Time rounding specification (default "100ms").

        Returns:
            gpd.GeoDataFrame: GeoDataFrame containing maximum water surface elevations with geometry.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                return HdfResultsMesh.get_mesh_summary_output(hdf_file, "Maximum Water Surface", round_to)
        except Exception as e:
            logger.error(f"Error in get_mesh_max_ws: {str(e)}")
            raise ValueError(f"Failed to get maximum water surface: {str(e)}")
        




    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_mesh_min_ws(hdf_path: Path, round_to: str = "100ms") -> gpd.GeoDataFrame:
        """
        Get minimum water surface elevation for each mesh cell.

        Args:
            hdf_path (Path): Path to the HDF file.
            round_to (str): Time rounding specification (default "100ms").

        Returns:
            gpd.GeoDataFrame: GeoDataFrame containing minimum water surface elevations with geometry.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                return HdfResultsMesh.get_mesh_summary_output(hdf_file, "Minimum Water Surface", round_to)
        except Exception as e:
            logger.error(f"Error in get_mesh_min_ws: {str(e)}")
            raise ValueError(f"Failed to get minimum water surface: {str(e)}")

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_mesh_max_face_v(hdf_path: Path, round_to: str = "100ms") -> pd.DataFrame:
        """
        Get maximum face velocity for each mesh face.

        Args:
            hdf_path (Path): Path to the HDF file.
            round_to (str): Time rounding specification (default "100ms").

        Returns:
            pd.DataFrame: DataFrame containing maximum face velocities.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                return HdfResultsMesh.get_mesh_summary_output(hdf_file, "Maximum Face Velocity", round_to)
        except Exception as e:
            logger.error(f"Error in get_mesh_max_face_v: {str(e)}")
            raise ValueError(f"Failed to get maximum face velocity: {str(e)}")

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_mesh_min_face_v(hdf_path: Path, round_to: str = "100ms") -> pd.DataFrame:
        """
        Get minimum face velocity for each mesh cell.

        Args:
            hdf_path (Path): Path to the HDF file.
            round_to (str): Time rounding specification (default "100ms").

        Returns:
            pd.DataFrame: DataFrame containing minimum face velocities.

        Raises:
            ValueError: If there's an error processing the minimum face velocity data.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                return HdfResultsMesh.get_mesh_summary_output(hdf_file, "Minimum Face Velocity", round_to)
        except Exception as e:
            logger.error(f"Error in get_mesh_min_face_v: {str(e)}")
            raise ValueError(f"Failed to get minimum face velocity: {str(e)}")

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_mesh_max_ws_err(hdf_path: Path, round_to: str = "100ms") -> pd.DataFrame:
        """
        Get maximum water surface error for each mesh cell.

        Args:
            hdf_path (Path): Path to the HDF file.
            round_to (str): Time rounding specification (default "100ms").

        Returns:
            pd.DataFrame: DataFrame containing maximum water surface errors.

        Raises:
            ValueError: If there's an error processing the maximum water surface error data.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                return HdfResultsMesh.get_mesh_summary_output(hdf_file, "Cell Maximum Water Surface Error", round_to)
        except Exception as e:
            logger.error(f"Error in get_mesh_max_ws_err: {str(e)}")
            raise ValueError(f"Failed to get maximum water surface error: {str(e)}")


    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_mesh_max_iter(hdf_path: Path, round_to: str = "100ms") -> gpd.GeoDataFrame:
        """
        Get maximum iteration count for each mesh cell.

        Args:
            hdf_path (Path): Path to the HDF file.
            round_to (str): Time rounding specification (default "100ms").

        Returns:
            gpd.GeoDataFrame: GeoDataFrame containing maximum iteration counts with geometry.
                Includes columns:
                - mesh_name: Name of the mesh
                - cell_id: ID of the cell
                - cell_last_iteration: Maximum number of iterations
                - cell_last_iteration_time: Time when max iterations occurred
                - geometry: Point geometry representing cell center
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                return HdfResultsMesh.get_mesh_summary_output(hdf_file, "Cell Last Iteration", round_to)
        except Exception as e:
            logger.error(f"Error in get_mesh_max_iter: {str(e)}")
            raise ValueError(f"Failed to get maximum iteration count: {str(e)}")
        
        


    @staticmethod
    def _get_mesh_timeseries_output_path(mesh_name: str, var_name: str) -> str:
        """
        Get the HDF path for mesh timeseries output.

        Args:
            mesh_name (str): Name of the mesh.
            var_name (str): Name of the variable.

        Returns:
            str: The HDF path for the specified mesh and variable.
        """
        return f"Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/2D Flow Areas/{mesh_name}/{var_name}"


    @staticmethod
    def _get_mesh_cells_timeseries_output(hdf_path: h5py.File, 
                                         mesh_names: Optional[Union[str, List[str]]] = None,
                                         var: Optional[str] = None, 
                                         truncate: bool = False) -> Dict[str, xr.Dataset]:
        """
        Get mesh cells timeseries output for specified meshes and variables.
        
        Args:
            hdf_path (h5py.File): Open HDF file object.
            mesh_names (Optional[Union[str, List[str]]]): Name(s) of the mesh(es). If None, processes all available meshes.
            var (Optional[str]): Name of the variable to retrieve. If None, retrieves all variables.
            truncate (bool): If True, truncates the output to remove trailing zeros.

        Returns:
            Dict[str, xr.Dataset]: A dictionary of xarray Datasets, one for each mesh, containing the mesh cells timeseries output.

        Raises:
            ValueError: If there's an error processing the timeseries output data.
        """
        TIME_SERIES_OUTPUT_VARS = {
            "cell": [
                "Water Surface", "Depth", "Velocity", "Velocity X", "Velocity Y",
                "Froude Number", "Courant Number", "Shear Stress", "Bed Elevation",
                "Precipitation Rate", "Infiltration Rate", "Evaporation Rate",
                "Percolation Rate", "Groundwater Elevation", "Groundwater Depth",
                "Groundwater Flow", "Groundwater Velocity", "Groundwater Velocity X",
                "Groundwater Velocity Y"
            ],
            "face": [
                "Face Velocity", "Face Flow", "Face Water Surface", "Face Courant",
                "Face Cumulative Volume", "Face Eddy Viscosity", "Face Flow Period Average",
                "Face Friction Term", "Face Pressure Gradient Term", "Face Shear Stress",
                "Face Tangential Velocity"
            ]
        }

        try:
            start_time = HdfBase.get_simulation_start_time(hdf_path)
            time_stamps = HdfBase.get_unsteady_timestamps(hdf_path)

            if mesh_names is None:
                mesh_names = HdfResultsMesh._get_available_meshes(hdf_path)
            elif isinstance(mesh_names, str):
                mesh_names = [mesh_names]

            if var:
                variables = [var]
            else:
                variables = TIME_SERIES_OUTPUT_VARS["cell"] + TIME_SERIES_OUTPUT_VARS["face"]

            datasets = {}
            for mesh_name in mesh_names:
                data_vars = {}
                for variable in variables:
                    try:
                        path = HdfResultsMesh._get_mesh_timeseries_output_path(mesh_name, variable)
                        dataset = hdf_path[path]
                        values = dataset[:]
                        units = dataset.attrs.get("Units", "").decode("utf-8")

                        if truncate:
                            last_nonzero = np.max(np.nonzero(values)[1]) + 1 if values.size > 0 else 0
                            values = values[:, :last_nonzero]
                            truncated_time_stamps = time_stamps[:last_nonzero]
                        else:
                            truncated_time_stamps = time_stamps

                        if values.shape[0] != len(truncated_time_stamps):
                            logger.warning(f"Mismatch between time steps ({len(truncated_time_stamps)}) and data shape ({values.shape}) for variable {variable}")
                            continue

                        # Determine if this is a face-based or cell-based variable
                        id_dim = "face_id" if any(face_var in variable for face_var in TIME_SERIES_OUTPUT_VARS["face"]) else "cell_id"

                        data_vars[variable] = xr.DataArray(
                            data=values,
                            dims=['time', id_dim],
                            coords={'time': truncated_time_stamps, id_dim: np.arange(values.shape[1])},
                            attrs={'units': units}
                        )
                    except KeyError:
                        logger.warning(f"Variable '{variable}' not found in the HDF file for mesh '{mesh_name}'. Skipping.")
                    except Exception as e:
                        logger.error(f"Error processing variable '{variable}' for mesh '{mesh_name}': {str(e)}")

                if data_vars:
                    datasets[mesh_name] = xr.Dataset(
                        data_vars=data_vars,
                        attrs={'mesh_name': mesh_name, 'start_time': start_time}
                    )
                else:
                    logger.warning(f"No valid data variables found for mesh '{mesh_name}'")

            return datasets
        except Exception as e:
            logger.error(f"Error in _mesh_cells_timeseries_output: {str(e)}")
            raise ValueError(f"Error processing timeseries output data: {e}")



    @staticmethod
    def _get_mesh_timeseries_output(hdf_path: h5py.File, mesh_name: str, var: str, truncate: bool = True) -> xr.DataArray:
        """
        Get timeseries output for a specific mesh and variable.

        Args:
            hdf_path (h5py.File): Open HDF file object.
            mesh_name (str): Name of the mesh.
            var (str): Variable name to retrieve.
            truncate (bool): Whether to truncate the output to remove trailing zeros (default True).

        Returns:
            xr.DataArray: DataArray containing the timeseries output.

        Raises:
            ValueError: If the specified path is not found in the HDF file or if there's an error processing the data.
        """
        try:
            path = HdfResultsMesh._get_mesh_timeseries_output_path(mesh_name, var)
            
            if path not in hdf_path:
                raise ValueError(f"Path {path} not found in HDF file")

            dataset = hdf_path[path]
            values = dataset[:]
            units = dataset.attrs.get("Units", "").decode("utf-8")
            
            # Get start time and timesteps
            start_time = HdfBase.get_simulation_start_time(hdf_path)
            # Updated to use the new function name from HdfUtils
            timesteps = HdfUtils.convert_timesteps_to_datetimes(
                np.array(hdf_path["Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Time"][:]),
                start_time
            )

            if truncate:
                non_zero = np.nonzero(values)[0]
                if len(non_zero) > 0:
                    start, end = non_zero[0], non_zero[-1] + 1
                    values = values[start:end]
                    timesteps = timesteps[start:end]

            # Determine if this is a face-based or cell-based variable
            id_dim = "face_id" if "Face" in var else "cell_id"
            dims = ["time", id_dim] if values.ndim == 2 else ["time"]
            coords = {"time": timesteps}
            if values.ndim == 2:
                coords[id_dim] = np.arange(values.shape[1])

            return xr.DataArray(
                values,
                coords=coords,
                dims=dims,
                attrs={"units": units, "mesh_name": mesh_name, "variable": var},
            )
        except Exception as e:
            logger.error(f"Error in get_mesh_timeseries_output: {str(e)}")
            raise ValueError(f"Failed to get timeseries output: {str(e)}")


    @staticmethod
    def _get_mesh_timeseries_output_values_units(hdf_path: h5py.File, mesh_name: str, var: str) -> Tuple[np.ndarray, str]:
        """
        Get the mesh timeseries output values and units for a specific variable from the HDF file.

        Args:
            hdf_path (h5py.File): Open HDF file object.
            mesh_name (str): Name of the mesh.
            var (str): Variable name to retrieve.

        Returns:
            Tuple[np.ndarray, str]: A tuple containing the output values and units.
        """
        path = HdfResultsMesh._get_mesh_timeseries_output_path(mesh_name, var)
        group = hdf_path[path]
        values = group[:]
        units = group.attrs.get("Units")
        if units is not None:
            units = units.decode("utf-8")
        return values, units


    @staticmethod
    def _get_available_meshes(hdf_path: h5py.File) -> List[str]:
        """
        Get the names of all available meshes in the HDF file.

        Args:
            hdf_path (h5py.File): Open HDF file object.

        Returns:
            List[str]: A list of mesh names.
        """
        return HdfMesh.get_mesh_area_names(hdf_path)
    
    
    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_mesh_summary_output(hdf_file: h5py.File, var: str, round_to: str = "100ms") -> gpd.GeoDataFrame:
        """
        Get the summary output data for a given variable from the HDF file.

        Parameters
        ----------
        hdf_path : h5py.File
            Open HDF file object.
        var : str
            The summary output variable to retrieve.
        round_to : str, optional
            The time unit to round the datetimes to. Default is "100ms".

        Returns
        -------
        gpd.GeoDataFrame
            A GeoDataFrame containing the summary output data with decoded attributes as metadata.
            Returns empty GeoDataFrame if variable is not found.
        """
        try:
            dfs = []
            start_time = HdfBase.get_simulation_start_time(hdf_file)
            
            logger.info(f"Processing summary output for variable: {var}")
            d2_flow_areas = hdf_file.get("Geometry/2D Flow Areas/Attributes")
            if d2_flow_areas is None:
                logger.info("No 2D Flow Areas found in HDF file")
                return gpd.GeoDataFrame()

            for d2_flow_area in d2_flow_areas[:]:
                mesh_name = HdfUtils.convert_ras_string(d2_flow_area[0])
                cell_count = d2_flow_area[-1]
                logger.debug(f"Processing mesh: {mesh_name} with {cell_count} cells")
                
                try:
                    group = HdfResultsMesh.get_mesh_summary_output_group(hdf_file, mesh_name, var)
                except ValueError:
                    logger.info(f"Variable '{var}' not present in output file for mesh '{mesh_name}', skipping")
                    continue
                
                data = group[:]
                logger.debug(f"Data shape for {var} in {mesh_name}: {data.shape}")
                logger.debug(f"Data type: {data.dtype}")
                logger.debug(f"Attributes: {dict(group.attrs)}")
                
                if data.ndim == 2 and data.shape[0] == 2:
                    # Handle 2D datasets (e.g. Maximum Water Surface)
                    row_variables = group.attrs.get('Row Variables', [b'Value', b'Time'])
                    row_variables = [v.decode('utf-8').strip() if isinstance(v, bytes) else v for v in row_variables]
                    
                    df = pd.DataFrame({
                        "mesh_name": [mesh_name] * data.shape[1],
                        "cell_id" if "Face" not in var else "face_id": range(data.shape[1]),
                        f"{var.lower().replace(' ', '_')}": data[0, :],
                        f"{var.lower().replace(' ', '_')}_time": HdfUtils.convert_timesteps_to_datetimes(
                            data[1, :], start_time, time_unit="days", round_to=round_to
                        )
                    })
                    
                elif data.ndim == 1:
                    # Handle 1D datasets (e.g. Cell Last Iteration)
                    df = pd.DataFrame({
                        "mesh_name": [mesh_name] * len(data),
                        "cell_id" if "Face" not in var else "face_id": range(len(data)),
                        var.lower().replace(' ', '_'): data
                    })
                    
                else:
                    raise ValueError(f"Unexpected data shape for {var} in {mesh_name}. "
                                  f"Got shape {data.shape}")
                
                # Add geometry based on variable type
                if "Face" in var:
                    face_df = HdfMesh.get_mesh_cell_faces(hdf_file)
                    if not face_df.empty:
                        df = df.merge(face_df[['mesh_name', 'face_id', 'geometry']], 
                                    on=['mesh_name', 'face_id'], 
                                    how='left')
                else:
                    cell_df = HdfMesh.get_mesh_cell_points(hdf_file)
                    if not cell_df.empty:
                        df = df.merge(cell_df[['mesh_name', 'cell_id', 'geometry']], 
                                    on=['mesh_name', 'cell_id'], 
                                    how='left')
                
                # Add group attributes as metadata with proper decoding
                df.attrs['mesh_name'] = mesh_name
                for attr_name, attr_value in group.attrs.items():
                    if isinstance(attr_value, bytes):
                        # Decode single byte string
                        decoded_value = attr_value.decode('utf-8')
                    elif isinstance(attr_value, np.ndarray):
                        if attr_value.dtype.kind in {'S', 'a'}:  # Array of byte strings
                            # Decode array of byte strings
                            decoded_value = [v.decode('utf-8') if isinstance(v, bytes) else v for v in attr_value]
                        else:
                            # Convert other numpy arrays to list
                            decoded_value = attr_value.tolist()
                    else:
                        decoded_value = attr_value
                    df.attrs[attr_name] = decoded_value
                
                dfs.append(df)
            
            if not dfs:
                return gpd.GeoDataFrame()
                
            result = pd.concat(dfs, ignore_index=True)
            
            # Convert to GeoDataFrame
            gdf = gpd.GeoDataFrame(result, geometry='geometry')
            
            # Get CRS from HdfUtils
            crs = HdfBase.get_projection(hdf_file)
            if crs:
                gdf.set_crs(crs, inplace=True)
            
            # Combine attributes from all meshes with decoded values
            combined_attrs = {}
            for df in dfs:
                for key, value in df.attrs.items():
                    if key not in combined_attrs:
                        combined_attrs[key] = value
                    elif combined_attrs[key] != value:
                        combined_attrs[key] = f"Multiple values: {combined_attrs[key]}, {value}"
            
            gdf.attrs.update(combined_attrs)
            
            logger.info(f"Processed {len(gdf)} rows of summary output data")
            return gdf
        
        except Exception as e:
            logger.error(f"Error processing summary output data: {e}")
            raise ValueError(f"Error processing summary output data: {e}")

    @staticmethod
    def get_mesh_summary_output_group(hdf_file: h5py.File, mesh_name: str, var: str) -> Union[h5py.Group, h5py.Dataset]:
        """
        Return the HDF group for a given mesh and summary output variable.

        Args:
            hdf_path (h5py.File): Open HDF file object.
            mesh_name (str): Name of the mesh.
            var (str): Name of the summary output variable.

        Returns:
            Union[h5py.Group, h5py.Dataset]: The HDF group or dataset for the specified mesh and variable.

        Raises:
            ValueError: If the specified group or dataset is not found in the HDF file.
        """
        output_path = f"Results/Unsteady/Output/Output Blocks/Base Output/Summary Output/2D Flow Areas/{mesh_name}/{var}"
        output_item = hdf_file.get(output_path)
        if output_item is None:
            raise ValueError(f"Dataset not found at path '{output_path}'")
        return output_item

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_boundary_conditions_timeseries(hdf_path: Path) -> xr.Dataset:
        """
        Get timeseries output for all boundary conditions as a single combined xarray Dataset.

        Args:
            hdf_path (Path): Path to the HDF file.

        Returns:
            xr.Dataset: Dataset containing all boundary condition data with:
                - Dimensions: time, bc_name (boundary condition name), face_id
                - Variables: stage, flow, flow_per_face, stage_per_face
                - Coordinates and attributes preserving original metadata

        Example:
            >>> bc_data = HdfResultsMesh.get_boundary_conditions_timeseries_combined(hdf_path)
            >>> print(bc_data)
            >>> # Plot flow for all boundary conditions
            >>> bc_data.flow.plot(x='time', hue='bc_name')
            >>> # Extract data for a specific boundary condition
            >>> upstream_data = bc_data.sel(bc_name='Upstream Inflow')
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                # Get the base path and check if boundary conditions exist
                base_path = "Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series"
                bc_base_path = f"{base_path}/Boundary Conditions"
                
                if bc_base_path not in hdf_file:
                    logger.warning(f"No boundary conditions found in HDF file")
                    return xr.Dataset()
                
                # Get timestamps
                start_time = HdfBase.get_simulation_start_time(hdf_file)
                time_data = hdf_file[f"{base_path}/Time"][:]
                timestamps = HdfUtils.convert_timesteps_to_datetimes(time_data, start_time)
                
                # Get all boundary condition names (excluding those with " - Flow per Face" or " - Stage per Face" suffix)
                bc_names = [name for name in hdf_file[bc_base_path].keys() 
                        if " - Flow per Face" not in name and " - Stage per Face" not in name]
                
                if not bc_names:
                    logger.warning(f"No boundary conditions found in HDF file")
                    return xr.Dataset()
                
                # Initialize arrays for main stage and flow data
                num_timesteps = len(timestamps)
                num_bcs = len(bc_names)
                
                stage_data = np.full((num_timesteps, num_bcs), np.nan)
                flow_data = np.full((num_timesteps, num_bcs), np.nan)
                
                # Dictionary to store face-specific data
                face_data = {
                    'flow_per_face': {},
                    'stage_per_face': {}
                }
                
                # Extract metadata from all boundary conditions
                bc_metadata = {}
                
                # Process each boundary condition
                for bc_idx, bc_name in enumerate(bc_names):
                    bc_path = f"{bc_base_path}/{bc_name}"
                    
                    try:
                        # Extract main boundary data
                        bc_data = hdf_file[bc_path][:]
                        bc_attrs = dict(hdf_file[bc_path].attrs)
                        
                        # Store metadata
                        bc_metadata[bc_name] = {
                            k: v.decode('utf-8') if isinstance(v, bytes) else v 
                            for k, v in bc_attrs.items()
                        }
                        
                        # Get column indices for Stage and Flow
                        if 'Columns' in bc_attrs:
                            columns = [col.decode('utf-8') if isinstance(col, bytes) else col 
                                    for col in bc_attrs['Columns']]
                            
                            stage_idx = columns.index('Stage') if 'Stage' in columns else None
                            flow_idx = columns.index('Flow') if 'Flow' in columns else None
                            
                            if stage_idx is not None:
                                stage_data[:, bc_idx] = bc_data[:, stage_idx]
                            if flow_idx is not None:
                                flow_data[:, bc_idx] = bc_data[:, flow_idx]
                        
                        # Extract Flow per Face data
                        flow_face_path = f"{bc_path} - Flow per Face"
                        if flow_face_path in hdf_file:
                            flow_face_data = hdf_file[flow_face_path][:]
                            flow_face_attrs = dict(hdf_file[flow_face_path].attrs)
                            
                            # Get face IDs
                            face_ids = flow_face_attrs.get('Faces', [])
                            if isinstance(face_ids, np.ndarray):
                                face_ids = face_ids.tolist()
                            else:
                                face_ids = list(range(flow_face_data.shape[1]))
                            
                            face_data['flow_per_face'][bc_name] = {
                                'data': flow_face_data,
                                'faces': face_ids,
                                'attrs': {
                                    k: v.decode('utf-8') if isinstance(v, bytes) else v 
                                    for k, v in flow_face_attrs.items()
                                }
                            }
                        
                        # Extract Stage per Face data
                        stage_face_path = f"{bc_path} - Stage per Face"
                        if stage_face_path in hdf_file:
                            stage_face_data = hdf_file[stage_face_path][:]
                            stage_face_attrs = dict(hdf_file[stage_face_path].attrs)
                            
                            # Get face IDs
                            face_ids = stage_face_attrs.get('Faces', [])
                            if isinstance(face_ids, np.ndarray):
                                face_ids = face_ids.tolist()
                            else:
                                face_ids = list(range(stage_face_data.shape[1]))
                            
                            face_data['stage_per_face'][bc_name] = {
                                'data': stage_face_data,
                                'faces': face_ids,
                                'attrs': {
                                    k: v.decode('utf-8') if isinstance(v, bytes) else v 
                                    for k, v in stage_face_attrs.items()
                                }
                            }
                    
                    except Exception as e:
                        logger.warning(f"Error processing boundary condition '{bc_name}': {str(e)}")
                        continue
                
                # Create base dataset with stage and flow data
                ds = xr.Dataset(
                    data_vars={
                        'stage': xr.DataArray(
                            stage_data,
                            dims=['time', 'bc_name'],
                            coords={
                                'time': timestamps,
                                'bc_name': bc_names
                            },
                            attrs={'description': 'Water surface elevation at boundary condition'}
                        ),
                        'flow': xr.DataArray(
                            flow_data,
                            dims=['time', 'bc_name'],
                            coords={
                                'time': timestamps,
                                'bc_name': bc_names
                            },
                            attrs={'description': 'Flow at boundary condition'}
                        )
                    },
                    attrs={
                        'source': 'HEC-RAS HDF Boundary Conditions',
                        'start_time': start_time
                    }
                )
                
                # Add metadata as coordinates
                for key in bc_metadata[bc_names[0]]:
                    if key != 'Columns':  # Skip Columns attribute as it's used for Stage/Flow
                        try:
                            values = [bc_metadata[bc].get(key, '') for bc in bc_names]
                            ds = ds.assign_coords({f'{key.lower()}': ('bc_name', values)})
                        except Exception as e:
                            logger.debug(f"Could not add metadata coordinate '{key}': {str(e)}")
                
                # Add face-specific data variables if available
                if face_data['flow_per_face']:
                    # First determine the maximum number of faces across all BCs
                    all_flow_faces = set()
                    for bc_name in face_data['flow_per_face']:
                        all_flow_faces.update(face_data['flow_per_face'][bc_name]['faces'])
                    
                    # Create a merged array with NaN values for missing faces
                    all_flow_faces = sorted(list(all_flow_faces))
                    flow_face_data = np.full((num_timesteps, num_bcs, len(all_flow_faces)), np.nan)
                    
                    # Fill in the data where available
                    for bc_idx, bc_name in enumerate(bc_names):
                        if bc_name in face_data['flow_per_face']:
                            bc_faces = face_data['flow_per_face'][bc_name]['faces']
                            bc_data = face_data['flow_per_face'][bc_name]['data']
                            
                            for face_idx, face_id in enumerate(bc_faces):
                                if face_id in all_flow_faces:
                                    target_idx = all_flow_faces.index(face_id)
                                    flow_face_data[:, bc_idx, target_idx] = bc_data[:, face_idx]
                    
                    # Add to the dataset
                    ds['flow_per_face'] = xr.DataArray(
                        flow_face_data,
                        dims=['time', 'bc_name', 'face_id'],
                        coords={
                            'time': timestamps,
                            'bc_name': bc_names,
                            'face_id': all_flow_faces
                        },
                        attrs={'description': 'Flow per face at boundary condition'}
                    )
                
                # Similar approach for stage per face
                if face_data['stage_per_face']:
                    all_stage_faces = set()
                    for bc_name in face_data['stage_per_face']:
                        all_stage_faces.update(face_data['stage_per_face'][bc_name]['faces'])
                    
                    all_stage_faces = sorted(list(all_stage_faces))
                    stage_face_data = np.full((num_timesteps, num_bcs, len(all_stage_faces)), np.nan)
                    
                    for bc_idx, bc_name in enumerate(bc_names):
                        if bc_name in face_data['stage_per_face']:
                            bc_faces = face_data['stage_per_face'][bc_name]['faces']
                            bc_data = face_data['stage_per_face'][bc_name]['data']
                            
                            for face_idx, face_id in enumerate(bc_faces):
                                if face_id in all_stage_faces:
                                    target_idx = all_stage_faces.index(face_id)
                                    stage_face_data[:, bc_idx, target_idx] = bc_data[:, face_idx]
                    
                    ds['stage_per_face'] = xr.DataArray(
                        stage_face_data,
                        dims=['time', 'bc_name', 'face_id'],
                        coords={
                            'time': timestamps,
                            'bc_name': bc_names,
                            'face_id': all_stage_faces
                        },
                        attrs={'description': 'Water surface elevation per face at boundary condition'}
                    )
                
                return ds
                
        except Exception as e:
            logger.error(f"Error getting all boundary conditions timeseries: {str(e)}")
            return xr.Dataset()
==================================================

File: c:\GH\ras-commander\ras_commander\HdfResultsPlan.py
==================================================
"""
HdfResultsPlan: A module for extracting and analyzing HEC-RAS plan HDF file results.

Attribution:
    Substantial code sourced/derived from https://github.com/fema-ffrd/rashdf
    Copyright (c) 2024 fema-ffrd, MIT license

Description:
    Provides static methods for extracting unsteady flow results, volume accounting,
    and reference data from HEC-RAS plan HDF files.

Available Functions:
    - get_unsteady_info: Extract unsteady attributes
    - get_unsteady_summary: Extract unsteady summary data
    - get_volume_accounting: Extract volume accounting data
    - get_runtime_data: Extract runtime and compute time data

Note:
    All methods are static and designed to be used without class instantiation.
"""

from typing import Dict, List, Union, Optional
from pathlib import Path
import h5py
import pandas as pd
import xarray as xr
from .Decorators import standardize_input, log_call
from .HdfUtils import HdfUtils
from .HdfResultsXsec import HdfResultsXsec
from .LoggingConfig import get_logger
import numpy as np
from datetime import datetime
from .RasPrj import ras

logger = get_logger(__name__)


class HdfResultsPlan:
    """
    Handles extraction of results data from HEC-RAS plan HDF files.

    This class provides static methods for accessing and analyzing:
        - Unsteady flow results
        - Volume accounting data
        - Runtime statistics
        - Reference line/point time series outputs

    All methods use:
        - @standardize_input decorator for consistent file path handling
        - @log_call decorator for operation logging
        - HdfUtils class for common HDF operations

    Note:
        No instantiation required - all methods are static.
    """

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_unsteady_info(hdf_path: Path) -> pd.DataFrame:
        """
        Get unsteady attributes from a HEC-RAS HDF plan file.

        Args:
            hdf_path (Path): Path to the HEC-RAS plan HDF file.
            ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.

        Returns:
            pd.DataFrame: A DataFrame containing the decoded unsteady attributes.

        Raises:
            FileNotFoundError: If the specified HDF file is not found.
            KeyError: If the "Results/Unsteady" group is not found in the HDF file.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                if "Results/Unsteady" not in hdf_file:
                    raise KeyError("Results/Unsteady group not found in the HDF file.")
                
                # Create dictionary from attributes and decode byte strings
                attrs_dict = {}
                for key, value in dict(hdf_file["Results/Unsteady"].attrs).items():
                    if isinstance(value, bytes):
                        attrs_dict[key] = value.decode('utf-8')
                    else:
                        attrs_dict[key] = value
                
                # Create DataFrame with a single row index
                return pd.DataFrame(attrs_dict, index=[0])
                
        except FileNotFoundError:
            raise FileNotFoundError(f"HDF file not found: {hdf_path}")
        except Exception as e:
            raise RuntimeError(f"Error reading unsteady attributes: {str(e)}")
        
    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_unsteady_summary(hdf_path: Path) -> pd.DataFrame:
        """
        Get results unsteady summary attributes from a HEC-RAS HDF plan file.

        Args:
            hdf_path (Path): Path to the HEC-RAS plan HDF file.
            ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.

        Returns:
            pd.DataFrame: A DataFrame containing the decoded results unsteady summary attributes.

        Raises:
            FileNotFoundError: If the specified HDF file is not found.
            KeyError: If the "Results/Unsteady/Summary" group is not found in the HDF file.
        """
        try:           
            with h5py.File(hdf_path, 'r') as hdf_file:
                if "Results/Unsteady/Summary" not in hdf_file:
                    raise KeyError("Results/Unsteady/Summary group not found in the HDF file.")
                
                # Create dictionary from attributes and decode byte strings
                attrs_dict = {}
                for key, value in dict(hdf_file["Results/Unsteady/Summary"].attrs).items():
                    if isinstance(value, bytes):
                        attrs_dict[key] = value.decode('utf-8')
                    else:
                        attrs_dict[key] = value
                
                # Create DataFrame with a single row index
                return pd.DataFrame(attrs_dict, index=[0])
                
        except FileNotFoundError:
            raise FileNotFoundError(f"HDF file not found: {hdf_path}")
        except Exception as e:
            raise RuntimeError(f"Error reading unsteady summary attributes: {str(e)}")
        
    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_volume_accounting(hdf_path: Path) -> Optional[pd.DataFrame]:
        """
        Get volume accounting attributes from a HEC-RAS HDF plan file.

        Args:
            hdf_path (Path): Path to the HEC-RAS plan HDF file.
            ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.

        Returns:
            Optional[pd.DataFrame]: DataFrame containing the decoded volume accounting attributes,
                                  or None if the group is not found.

        Raises:
            FileNotFoundError: If the specified HDF file is not found.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                if "Results/Unsteady/Summary/Volume Accounting" not in hdf_file:
                    return None
                
                # Get attributes and decode byte strings
                attrs_dict = {}
                for key, value in dict(hdf_file["Results/Unsteady/Summary/Volume Accounting"].attrs).items():
                    if isinstance(value, bytes):
                        attrs_dict[key] = value.decode('utf-8')
                    else:
                        attrs_dict[key] = value
                
                return pd.DataFrame(attrs_dict, index=[0])
                
        except FileNotFoundError:
            raise FileNotFoundError(f"HDF file not found: {hdf_path}")
        except Exception as e:
            raise RuntimeError(f"Error reading volume accounting attributes: {str(e)}")

    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def get_runtime_data(hdf_path: Path) -> Optional[pd.DataFrame]:
        """
        Extract detailed runtime and computational performance metrics from HDF file.

        Args:
            hdf_path (Path): Path to HEC-RAS plan HDF file
            ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.

        Returns:
            Optional[pd.DataFrame]: DataFrame containing runtime statistics or None if data cannot be extracted

        Notes:
            - Times are reported in multiple units (ms, s, hours)
            - Compute speeds are calculated as simulation-time/compute-time ratios
            - Process times include: geometry, preprocessing, event conditions, 
              and unsteady flow computations
        """
        try:
            if hdf_path is None:
                logger.error(f"Could not find HDF file for input")
                return None

            with h5py.File(hdf_path, 'r') as hdf_file:
                logger.info(f"Extracting Plan Information from: {Path(hdf_file.filename).name}")
                plan_info = hdf_file.get('/Plan Data/Plan Information')
                if plan_info is None:
                    logger.warning("Group '/Plan Data/Plan Information' not found.")
                    return None

                # Extract plan information
                plan_name = HdfUtils.convert_ras_string(plan_info.attrs.get('Plan Name', 'Unknown'))
                start_time_str = HdfUtils.convert_ras_string(plan_info.attrs.get('Simulation Start Time', 'Unknown'))
                end_time_str = HdfUtils.convert_ras_string(plan_info.attrs.get('Simulation End Time', 'Unknown'))

                try:
                    # Check if times are already datetime objects
                    if isinstance(start_time_str, datetime):
                        start_time = start_time_str
                    else:
                        start_time = datetime.strptime(start_time_str, "%d%b%Y %H:%M:%S")
                        
                    if isinstance(end_time_str, datetime):
                        end_time = end_time_str
                    else:
                        end_time = datetime.strptime(end_time_str, "%d%b%Y %H:%M:%S")
                        
                    simulation_duration = end_time - start_time
                    simulation_hours = simulation_duration.total_seconds() / 3600
                except ValueError as e:
                    logger.error(f"Error parsing simulation times: {e}")
                    return None

                logger.info(f"Plan Name: {plan_name}")
                logger.info(f"Simulation Duration (hours): {simulation_hours}")

                # Extract compute processes data
                compute_processes = hdf_file.get('/Results/Summary/Compute Processes')
                if compute_processes is None:
                    logger.warning("Dataset '/Results/Summary/Compute Processes' not found.")
                    return None

                # Process compute times
                process_names = [HdfUtils.convert_ras_string(name) for name in compute_processes['Process'][:]]
                filenames = [HdfUtils.convert_ras_string(filename) for filename in compute_processes['Filename'][:]]
                completion_times = compute_processes['Compute Time (ms)'][:]

                compute_processes_df = pd.DataFrame({
                    'Process': process_names,
                    'Filename': filenames,
                    'Compute Time (ms)': completion_times,
                    'Compute Time (s)': completion_times / 1000,
                    'Compute Time (hours)': completion_times / (1000 * 3600)
                })

                # Create summary DataFrame
                compute_processes_summary = {
                    'Plan Name': [plan_name],
                    'File Name': [Path(hdf_file.filename).name],
                    'Simulation Start Time': [start_time_str],
                    'Simulation End Time': [end_time_str],
                    'Simulation Duration (s)': [simulation_duration.total_seconds()],
                    'Simulation Time (hr)': [simulation_hours]
                }

                # Add process-specific times
                process_types = {
                    'Completing Geometry': 'Completing Geometry (hr)',
                    'Preprocessing Geometry': 'Preprocessing Geometry (hr)',
                    'Completing Event Conditions': 'Completing Event Conditions (hr)',
                    'Unsteady Flow Computations': 'Unsteady Flow Computations (hr)'
                }

                for process, column in process_types.items():
                    time_value = compute_processes_df[
                        compute_processes_df['Process'] == process
                    ]['Compute Time (hours)'].values[0] if process in process_names else 'N/A'
                    compute_processes_summary[column] = [time_value]

                # Add total process time
                total_time = compute_processes_df['Compute Time (hours)'].sum()
                compute_processes_summary['Complete Process (hr)'] = [total_time]

                # Calculate speeds
                if compute_processes_summary['Unsteady Flow Computations (hr)'][0] != 'N/A':
                    compute_processes_summary['Unsteady Flow Speed (hr/hr)'] = [
                        simulation_hours / compute_processes_summary['Unsteady Flow Computations (hr)'][0]
                    ]
                else:
                    compute_processes_summary['Unsteady Flow Speed (hr/hr)'] = ['N/A']

                compute_processes_summary['Complete Process Speed (hr/hr)'] = [
                    simulation_hours / total_time
                ]

                return pd.DataFrame(compute_processes_summary)

        except Exception as e:
            logger.error(f"Error in get_runtime_data: {str(e)}")
            return None

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_reference_timeseries(hdf_path: Path, reftype: str) -> pd.DataFrame:
        """
        Get reference line or point timeseries output from HDF file.

        Args:
            hdf_path (Path): Path to HEC-RAS plan HDF file
            reftype (str): Type of reference data ('lines' or 'points')
            ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.

        Returns:
            pd.DataFrame: DataFrame containing reference timeseries data
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                base_path = "Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series"
                ref_path = f"{base_path}/Reference {reftype.capitalize()}"
                
                if ref_path not in hdf_file:
                    logger.warning(f"Reference {reftype} data not found in HDF file")
                    return pd.DataFrame()

                ref_group = hdf_file[ref_path]
                time_data = hdf_file[f"{base_path}/Time"][:]
                
                dfs = []
                for ref_name in ref_group.keys():
                    ref_data = ref_group[ref_name][:]
                    df = pd.DataFrame(ref_data, columns=[ref_name])
                    df['Time'] = time_data
                    dfs.append(df)

                if not dfs:
                    return pd.DataFrame()

                return pd.concat(dfs, axis=1)

        except Exception as e:
            logger.error(f"Error reading reference {reftype} timeseries: {str(e)}")
            return pd.DataFrame()

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_reference_summary(hdf_path: Path, reftype: str) -> pd.DataFrame:
        """
        Get reference line or point summary output from HDF file.

        Args:
            hdf_path (Path): Path to HEC-RAS plan HDF file
            reftype (str): Type of reference data ('lines' or 'points')
            ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.

        Returns:
            pd.DataFrame: DataFrame containing reference summary data
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                base_path = "Results/Unsteady/Output/Output Blocks/Base Output/Summary Output"
                ref_path = f"{base_path}/Reference {reftype.capitalize()}"
                
                if ref_path not in hdf_file:
                    logger.warning(f"Reference {reftype} summary data not found in HDF file")
                    return pd.DataFrame()

                ref_group = hdf_file[ref_path]
                dfs = []
                
                for ref_name in ref_group.keys():
                    ref_data = ref_group[ref_name][:]
                    if ref_data.ndim == 2:
                        df = pd.DataFrame(ref_data.T, columns=['Value', 'Time'])
                    else:
                        df = pd.DataFrame({'Value': ref_data})
                    df['Reference'] = ref_name
                    dfs.append(df)

                if not dfs:
                    return pd.DataFrame()

                return pd.concat(dfs, ignore_index=True)

        except Exception as e:
            logger.error(f"Error reading reference {reftype} summary: {str(e)}")
            return pd.DataFrame()
==================================================

File: c:\GH\ras-commander\ras_commander\HdfResultsPlot.py
==================================================
"""
Class: HdfResultsPlot

A collection of static methods for visualizing HEC-RAS results data from HDF files using matplotlib.

Public Functions:
    plot_results_mesh_variable(variable_df, variable_name, colormap='viridis', point_size=10):
        Generic plotting function for any mesh variable with customizable styling.
        
    plot_results_max_wsel(max_ws_df):
        Visualizes the maximum water surface elevation distribution across mesh cells.
        
    plot_results_max_wsel_time(max_ws_df):
        Displays the timing of maximum water surface elevation for each cell,
        including statistics about the temporal distribution.

Requirements:
    - matplotlib
    - pandas
    - geopandas (for geometry handling)

Input DataFrames must contain:
    - 'geometry' column with Point objects containing x,y coordinates
    - Variable data columns as specified in individual function docstrings
"""

import matplotlib.pyplot as plt
import pandas as pd
from typing import Dict
from .Decorators import log_call
from .HdfMesh import HdfMesh

class HdfResultsPlot:
    """
    A class containing static methods for plotting HEC-RAS results data.
    
    This class provides visualization methods for various types of HEC-RAS results,
    including maximum water surface elevations and timing information.
    """

    @staticmethod
    @log_call
    def plot_results_max_wsel(max_ws_df: pd.DataFrame) -> None:
        """
        Plots the maximum water surface elevation per cell.

        Args:
            max_ws_df (pd.DataFrame): DataFrame containing merged data with coordinates 
                                    and max water surface elevations.
        """
        # Extract x and y coordinates from the geometry column
        max_ws_df['x'] = max_ws_df['geometry'].apply(lambda geom: geom.x if geom is not None else None)
        max_ws_df['y'] = max_ws_df['geometry'].apply(lambda geom: geom.y if geom is not None else None)

        if 'x' not in max_ws_df.columns or 'y' not in max_ws_df.columns:
            print("Error: 'x' or 'y' columns not found in the merged dataframe.")
            print("Available columns:", max_ws_df.columns.tolist())
            return

        fig, ax = plt.subplots(figsize=(12, 8))
        scatter = ax.scatter(max_ws_df['x'], max_ws_df['y'], 
                           c=max_ws_df['maximum_water_surface'], 
                           cmap='viridis', s=10)

        ax.set_title('Max Water Surface per Cell')
        ax.set_xlabel('X Coordinate')
        ax.set_ylabel('Y Coordinate')
        plt.colorbar(scatter, label='Max Water Surface (ft)')

        ax.grid(True, linestyle='--', alpha=0.7)
        plt.rcParams.update({'font.size': 12})
        plt.tight_layout()
        plt.show()

    @staticmethod
    @log_call
    def plot_results_max_wsel_time(max_ws_df: pd.DataFrame) -> None:
        """
        Plots the time of the maximum water surface elevation (WSEL) per cell.

        Args:
            max_ws_df (pd.DataFrame): DataFrame containing merged data with coordinates 
                                    and max water surface timing information.
        """
        # Convert datetime strings using the renamed utility function
        max_ws_df['max_wsel_time'] = pd.to_datetime(max_ws_df['maximum_water_surface_time'])
        
        # Extract coordinates
        max_ws_df['x'] = max_ws_df['geometry'].apply(lambda geom: geom.x if geom is not None else None)
        max_ws_df['y'] = max_ws_df['geometry'].apply(lambda geom: geom.y if geom is not None else None)

        if 'x' not in max_ws_df.columns or 'y' not in max_ws_df.columns:
            raise ValueError("x and y coordinates are missing from the DataFrame. Make sure the 'geometry' column exists and contains valid coordinate data.")

        fig, ax = plt.subplots(figsize=(12, 8))

        min_time = max_ws_df['max_wsel_time'].min()
        color_values = (max_ws_df['max_wsel_time'] - min_time).dt.total_seconds() / 3600

        scatter = ax.scatter(max_ws_df['x'], max_ws_df['y'], 
                           c=color_values, cmap='viridis', s=10)

        ax.set_title('Time of Maximum Water Surface Elevation per Cell')
        ax.set_xlabel('X Coordinate')
        ax.set_ylabel('Y Coordinate')

        cbar = plt.colorbar(scatter)
        cbar.set_label('Hours since simulation start')
        cbar.set_ticks(range(0, int(color_values.max()) + 1, 6))
        cbar.set_ticklabels([f'{h}h' for h in range(0, int(color_values.max()) + 1, 6)])

        ax.grid(True, linestyle='--', alpha=0.7)
        plt.rcParams.update({'font.size': 12})
        plt.tight_layout()
        plt.show()

        # Print timing information
        print(f"\nSimulation Start Time: {min_time}")
        print(f"Time Range: {color_values.max():.1f} hours")
        print("\nTiming Statistics (hours since start):")
        print(color_values.describe()) 

    @staticmethod
    @log_call
    def plot_results_mesh_variable(variable_df: pd.DataFrame, variable_name: str, colormap: str = 'viridis', point_size: int = 10) -> None:
        """
        Plot any mesh variable with consistent styling.
        
        Args:
            variable_df (pd.DataFrame): DataFrame containing the variable data
            variable_name (str): Name of the variable (for labels)
            colormap (str): Matplotlib colormap to use. Default: 'viridis'
            point_size (int): Size of the scatter points. Default: 10

        Returns:
            None

        Raises:
            ImportError: If matplotlib is not installed
            ValueError: If required columns are missing from variable_df
        """
        try:
            import matplotlib.pyplot as plt
        except ImportError:
            logger.error("matplotlib is required for plotting. Please install it with 'pip install matplotlib'")
            raise ImportError("matplotlib is required for plotting")

        # Get cell coordinates if not in variable_df
        if 'geometry' not in variable_df.columns:
            cell_coords = HdfMesh.mesh_cell_points(plan_hdf_path)
            merged_df = pd.merge(variable_df, cell_coords, on=['mesh_name', 'cell_id'])
        else:
            merged_df = variable_df
            
        # Extract coordinates, handling None values
        merged_df = merged_df.dropna(subset=['geometry'])
        merged_df['x'] = merged_df['geometry'].apply(lambda geom: geom.x if geom is not None else None)
        merged_df['y'] = merged_df['geometry'].apply(lambda geom: geom.y if geom is not None else None)
        
        # Drop any rows with None coordinates
        merged_df = merged_df.dropna(subset=['x', 'y'])
        
        if len(merged_df) == 0:
            logger.error("No valid coordinates found for plotting")
            raise ValueError("No valid coordinates found for plotting")
            
        # Create plot
        fig, ax = plt.subplots(figsize=(12, 8))
        scatter = ax.scatter(merged_df['x'], merged_df['y'], 
                           c=merged_df[variable_name], 
                           cmap=colormap, 
                           s=point_size)
        
        # Customize plot
        ax.set_title(f'{variable_name} per Cell')
        ax.set_xlabel('X Coordinate')
        ax.set_ylabel('Y Coordinate')
        plt.colorbar(scatter, label=variable_name)
        ax.grid(True, linestyle='--', alpha=0.7)
        plt.rcParams.update({'font.size': 12})
        plt.tight_layout()
        plt.show()

==================================================

File: c:\GH\ras-commander\ras_commander\HdfResultsXsec.py
==================================================
"""
Class: HdfResultsXsec

Contains methods for extracting 1D results data from HDF files. 
This includes cross section timeseries, structures and reference line/point timeseries as these are all 1D elements.

-----

All of the methods in this class are static and are designed to be used without instantiation.

List of Functions in HdfResultsXsec:
- get_xsec_timeseries(): Extract cross-section timeseries data including water surface, velocity, and flow
- get_ref_lines_timeseries(): Get timeseries output for reference lines
- get_ref_points_timeseries(): Get timeseries output for reference points

TO BE IMPLEMENTED: 
DSS Hydrograph Extraction for 1D and 2D Structures. 

Planned functions:
- get_bridge_timeseries(): Extract timeseries data for bridge structures
- get_inline_structures_timeseries(): Extract timeseries data for inline structures

Notes:
- All functions use the get_ prefix to indicate they return data
- Results data functions use results_ prefix to indicate they handle results data
- All functions include proper error handling and logging
- Functions return xarray Datasets for efficient handling of multi-dimensional data
"""

from pathlib import Path
from typing import Union, Optional, List, Dict, Tuple

import h5py
import numpy as np
import pandas as pd
import xarray as xr

from .HdfBase import HdfBase
from .HdfUtils import HdfUtils
from .Decorators import standardize_input, log_call
from .LoggingConfig import get_logger

logger = get_logger(__name__)

class HdfResultsXsec:
    """
    A static class for extracting and processing 1D results data from HEC-RAS HDF files.

    This class provides methods to extract and process unsteady flow simulation results
    for cross-sections, reference lines, and reference points. All methods are static
    and designed to be used without class instantiation.

    The class handles:
    - Cross-section timeseries (water surface, velocity, flow)
    - Reference line timeseries
    - Reference point timeseries

    Dependencies:
        - HdfBase: Core HDF file operations
        - HdfUtils: Utility functions for HDF processing
    """


# Tested functions from AWS webinar where the code was developed
# Need to add examples


    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_xsec_timeseries(hdf_path: Path) -> xr.Dataset:
        """
        Extract Water Surface, Velocity Total, Velocity Channel, Flow Lateral, and Flow data from HEC-RAS HDF file.
        Includes Cross Section Only and Cross Section Attributes as coordinates in the xarray.Dataset.
        Also calculates maximum values for key parameters.

        Parameters:
        -----------
        hdf_path : Path
            Path to the HEC-RAS results HDF file

        Returns:
        --------
        xr.Dataset
            Xarray Dataset containing the extracted cross-section results with appropriate coordinates and attributes.
            Includes maximum values for Water Surface, Flow, Channel Velocity, Total Velocity, and Lateral Flow.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                # Define base paths
                base_output_path = "/Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Cross Sections/"
                time_stamp_path = "/Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Time Date Stamp (ms)"
                
                # Extract Cross Section Attributes
                attrs_dataset = hdf_file[f"{base_output_path}Cross Section Attributes"][:]
                rivers = [attr['River'].decode('utf-8').strip() for attr in attrs_dataset]
                reaches = [attr['Reach'].decode('utf-8').strip() for attr in attrs_dataset]
                stations = [attr['Station'].decode('utf-8').strip() for attr in attrs_dataset]
                names = [attr['Name'].decode('utf-8').strip() for attr in attrs_dataset]
                
                # Extract Cross Section Only (Unique Names)
                cross_section_only_dataset = hdf_file[f"{base_output_path}Cross Section Only"][:]
                cross_section_names = [cs.decode('utf-8').strip() for cs in cross_section_only_dataset]
                
                # Extract Time Stamps and convert to datetime
                time_stamps = hdf_file[time_stamp_path][:]
                if any(isinstance(ts, bytes) for ts in time_stamps):
                    time_stamps = [ts.decode('utf-8') for ts in time_stamps]
                # Convert RAS format timestamps to datetime
                times = pd.to_datetime(time_stamps, format='%d%b%Y %H:%M:%S:%f')
                
                # Extract Required Datasets
                water_surface = hdf_file[f"{base_output_path}Water Surface"][:]
                velocity_total = hdf_file[f"{base_output_path}Velocity Total"][:]
                velocity_channel = hdf_file[f"{base_output_path}Velocity Channel"][:]
                flow_lateral = hdf_file[f"{base_output_path}Flow Lateral"][:]
                flow = hdf_file[f"{base_output_path}Flow"][:]
                
                # Calculate maximum values along time axis
                max_water_surface = np.max(water_surface, axis=0)
                max_flow = np.max(flow, axis=0)
                max_velocity_channel = np.max(velocity_channel, axis=0)
                max_velocity_total = np.max(velocity_total, axis=0)
                max_flow_lateral = np.max(flow_lateral, axis=0)
                
                # Create Xarray Dataset
                ds = xr.Dataset(
                    {
                        'Water_Surface': (['time', 'cross_section'], water_surface),
                        'Velocity_Total': (['time', 'cross_section'], velocity_total),
                        'Velocity_Channel': (['time', 'cross_section'], velocity_channel),
                        'Flow_Lateral': (['time', 'cross_section'], flow_lateral),
                        'Flow': (['time', 'cross_section'], flow),
                    },
                    coords={
                        'time': times,
                        'cross_section': cross_section_names,
                        'River': ('cross_section', rivers),
                        'Reach': ('cross_section', reaches),
                        'Station': ('cross_section', stations),
                        'Name': ('cross_section', names),
                        'Maximum_Water_Surface': ('cross_section', max_water_surface),
                        'Maximum_Flow': ('cross_section', max_flow),
                        'Maximum_Channel_Velocity': ('cross_section', max_velocity_channel),
                        'Maximum_Velocity_Total': ('cross_section', max_velocity_total),
                        'Maximum_Flow_Lateral': ('cross_section', max_flow_lateral)
                    },
                    attrs={
                        'description': 'Cross-section results extracted from HEC-RAS HDF file',
                        'source_file': str(hdf_path)
                    }
                )
                
                return ds

        except KeyError as e:
            logger.error(f"Required dataset not found in HDF file: {e}")
            raise
        except Exception as e:
            logger.error(f"Error extracting cross section results: {e}")
            raise



    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_ref_lines_timeseries(hdf_path: Path) -> xr.Dataset:
        """
        Extract timeseries output data for reference lines from HEC-RAS HDF file.

        Parameters:
        -----------
        hdf_path : Path
            Path to the HEC-RAS results HDF file

        Returns:
        --------
        xr.Dataset
            Dataset containing flow, velocity, and water surface data for reference lines.
            Returns empty dataset if reference line data not found.

        Raises:
        -------
        FileNotFoundError
            If the specified HDF file is not found
        KeyError
            If required datasets are missing from the HDF file
        """
        return HdfResultsXsec._reference_timeseries_output(hdf_path, reftype="lines")

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_ref_points_timeseries(hdf_path: Path) -> xr.Dataset:
        """
        Extract timeseries output data for reference points from HEC-RAS HDF file.

        This method extracts flow, velocity, and water surface elevation data for all
        reference points defined in the model. Reference points are user-defined locations
        where detailed output is desired.

        Parameters:
        -----------
        hdf_path : Path
            Path to the HEC-RAS results HDF file

        Returns:
        --------
        xr.Dataset
            Dataset containing the following variables for each reference point:
            - Flow [cfs or m³/s]
            - Velocity [ft/s or m/s]
            - Water Surface [ft or m]
            
            The dataset includes coordinates:
            - time: Simulation timesteps
            - refpt_id: Unique identifier for each reference point
            - refpt_name: Name of each reference point
            - mesh_name: Associated 2D mesh area name
            
            Returns empty dataset if reference point data not found.

        Raises:
        -------
        FileNotFoundError
            If the specified HDF file is not found
        KeyError
            If required datasets are missing from the HDF file

        Examples:
        --------
        >>> ds = HdfResultsXsec.get_ref_points_timeseries("path/to/plan.hdf")
        >>> # Get water surface timeseries for first reference point
        >>> ws = ds['Water Surface'].isel(refpt_id=0)
        >>> # Get all data for a specific reference point by name
        >>> point_data = ds.sel(refpt_name='Point1')
        """
        return HdfResultsXsec._reference_timeseries_output(hdf_path, reftype="points")
    

    @staticmethod
    def _reference_timeseries_output(hdf_file: h5py.File, reftype: str = "lines") -> xr.Dataset:
        """
        Internal method to return timeseries output data for reference lines or points from a HEC-RAS HDF plan file.

        Parameters
        ----------
        hdf_file : h5py.File
            Open HDF file object.
        reftype : str, optional
            The type of reference data to retrieve. Must be either "lines" or "points".
            (default: "lines")

        Returns
        -------
        xr.Dataset
            An xarray Dataset with reference line or point timeseries data.
            Returns an empty Dataset if the reference output data is not found.

        Raises
        ------
        ValueError
            If reftype is not "lines" or "points".
        """
        if reftype == "lines":
            output_path = "Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Reference Lines"
            abbrev = "refln"
        elif reftype == "points":
            output_path = "Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Reference Points"
            abbrev = "refpt"
        else:
            raise ValueError('reftype must be either "lines" or "points".')

        try:
            reference_group = hdf_file[output_path]
        except KeyError:
            logger.error(f"Could not find HDF group at path '{output_path}'. "
                         f"The Plan HDF file may not contain reference {reftype[:-1]} output data.")
            return xr.Dataset()

        reference_names = reference_group["Name"][:]
        names = []
        mesh_areas = []
        for s in reference_names:
            name, mesh_area = s.decode("utf-8").split("|")
            names.append(name)
            mesh_areas.append(mesh_area)

        times = HdfBase.get_unsteady_timestamps(hdf_file)

        das = {}
        for var in ["Flow", "Velocity", "Water Surface"]:
            group = reference_group.get(var)
            if group is None:
                continue
            values = group[:]
            units = group.attrs["Units"].decode("utf-8")
            da = xr.DataArray(
                values,
                name=var,
                dims=["time", f"{abbrev}_id"],
                coords={
                    "time": times,
                    f"{abbrev}_id": range(values.shape[1]),
                    f"{abbrev}_name": (f"{abbrev}_id", names),
                    "mesh_name": (f"{abbrev}_id", mesh_areas),
                },
                attrs={"units": units, "hdf_path": f"{output_path}/{var}"},
            )
            das[var] = da
        return xr.Dataset(das)

==================================================

File: c:\GH\ras-commander\ras_commander\HdfStruc.py
==================================================
"""
Class: HdfStruc

Attribution: A substantial amount of code in this file is sourced or derived 
from the https://github.com/fema-ffrd/rashdf library, 
released under MIT license and Copyright (c) 2024 fema-ffrd

The file has been forked and modified for use in RAS Commander.

-----

All of the methods in this class are static and are designed to be used without instantiation.

List of Functions in HdfStruc:
- get_structures()
- get_geom_structures_attrs()
"""
from typing import Dict, Any, List, Union
from pathlib import Path
import h5py
import numpy as np
import pandas as pd
from geopandas import GeoDataFrame
from shapely.geometry import LineString, MultiLineString, Polygon, MultiPolygon, Point, GeometryCollection
from .HdfUtils import HdfUtils
from .HdfXsec import HdfXsec
from .HdfBase import HdfBase
from .Decorators import standardize_input, log_call
from .LoggingConfig import setup_logging, get_logger

logger = get_logger(__name__)

class HdfStruc:
    """
    Handles 2D structure geometry data extraction from HEC-RAS HDF files.

    This class provides static methods for extracting and analyzing structure geometries
    and their attributes from HEC-RAS geometry HDF files. All methods are designed to work
    without class instantiation.

    Notes
    -----
    - 1D Structure data should be accessed via the HdfResultsXsec class
    - All methods use @standardize_input for consistent file handling
    - All methods use @log_call for operation logging
    - Returns GeoDataFrames with both geometric and attribute data
    """
    
    @staticmethod
    @log_call
    @standardize_input(file_type='geom_hdf')
    def get_structures(hdf_path: Path, datetime_to_str: bool = False) -> GeoDataFrame:
        """
        Extracts structure data from a HEC-RAS geometry HDF5 file.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF5 file
        datetime_to_str : bool, optional
            If True, converts datetime objects to ISO format strings, by default False

        Returns
        -------
        GeoDataFrame
            Structure data with columns:
            - Structure ID: unique identifier
            - Geometry: LineString of structure centerline
            - Various attribute columns from the HDF file
            - Profile_Data: list of station/elevation dictionaries
            - Bridge coefficient attributes (if present)
            - Table info attributes (if present)

        Notes
        -----
        - Group-level attributes are stored in GeoDataFrame.attrs['group_attributes']
        - Invalid geometries are dropped with warning
        - All byte strings are decoded to UTF-8
        - CRS is preserved from the source file
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf:
                if "Geometry/Structures" not in hdf:
                    logger.error(f"No Structures Found in the HDF, Empty Geodataframe Returned: {hdf_path}")
                    return GeoDataFrame()
                
                # Check if required datasets exist
                required_datasets = [
                    "Geometry/Structures/Centerline Info",
                    "Geometry/Structures/Centerline Points"
                ]
                
                for dataset in required_datasets:
                    if dataset not in hdf:
                        logger.error(f"No Structures Found in the HDF, Empty Geodataframe Returned: {hdf_path}")
                        return GeoDataFrame()

                def get_dataset_df(path: str) -> pd.DataFrame:
                    """
                    Converts an HDF5 dataset to a pandas DataFrame.

                    Parameters
                    ----------
                    path : str
                        Dataset path within the HDF5 file

                    Returns
                    -------
                    pd.DataFrame
                        DataFrame containing the dataset values.
                        - For compound datasets, column names match field names
                        - For simple datasets, generic column names (Value_0, Value_1, etc.)
                        - Empty DataFrame if dataset not found

                    Notes
                    -----
                    Automatically decodes byte strings to UTF-8 with error handling.
                    """
                    if path not in hdf:
                        logger.warning(f"Dataset not found: {path}")
                        return pd.DataFrame()
                    
                    data = hdf[path][()]
                    
                    if data.dtype.names:
                        df = pd.DataFrame(data)
                        # Decode byte strings to UTF-8
                        for col in df.columns:
                            if df[col].dtype.kind in {'S', 'a'}:  # Byte strings
                                df[col] = df[col].str.decode('utf-8', errors='ignore')
                        return df
                    else:
                        # If no named fields, assign generic column names
                        return pd.DataFrame(data, columns=[f'Value_{i}' for i in range(data.shape[1])])

                # Extract relevant datasets
                group_attrs = HdfBase.get_attrs(hdf, "Geometry/Structures")
                struct_attrs = get_dataset_df("Geometry/Structures/Attributes")
                bridge_coef = get_dataset_df("Geometry/Structures/Bridge Coefficient Attributes")
                table_info = get_dataset_df("Geometry/Structures/Table Info")
                profile_data = get_dataset_df("Geometry/Structures/Profile Data")

                # Assign 'Structure ID' based on index (starting from 1)
                struct_attrs.reset_index(drop=True, inplace=True)
                struct_attrs['Structure ID'] = range(1, len(struct_attrs) + 1)
                logger.debug(f"Assigned Structure IDs: {struct_attrs['Structure ID'].tolist()}")

                # Check if 'Structure ID' was successfully assigned
                if 'Structure ID' not in struct_attrs.columns:
                    logger.error("'Structure ID' column could not be assigned to Structures/Attributes.")
                    return GeoDataFrame()

                # Get centerline geometry
                centerline_info = hdf["Geometry/Structures/Centerline Info"][()]
                centerline_points = hdf["Geometry/Structures/Centerline Points"][()]
                
                # Create LineString geometries for each structure
                geoms = []
                for i in range(len(centerline_info)):
                    start_idx = centerline_info[i][0]  # Point Starting Index
                    point_count = centerline_info[i][1]  # Point Count
                    points = centerline_points[start_idx:start_idx + point_count]
                    if len(points) >= 2:
                        geoms.append(LineString(points))
                    else:
                        logger.warning(f"Insufficient points for LineString in structure index {i}.")
                        geoms.append(None)

                # Create base GeoDataFrame with Structures Attributes and geometries
                struct_gdf = GeoDataFrame(
                    struct_attrs,
                    geometry=geoms,
                    crs=HdfBase.get_projection(hdf_path)
                )

                # Drop entries with invalid geometries
                initial_count = len(struct_gdf)
                struct_gdf = struct_gdf.dropna(subset=['geometry']).reset_index(drop=True)
                final_count = len(struct_gdf)
                if final_count < initial_count:
                    logger.warning(f"Dropped {initial_count - final_count} structures due to invalid geometries.")

                # Merge Bridge Coefficient Attributes on 'Structure ID'
                if not bridge_coef.empty and 'Structure ID' in bridge_coef.columns:
                    struct_gdf = struct_gdf.merge(
                        bridge_coef,
                        on='Structure ID',
                        how='left',
                        suffixes=('', '_bridge_coef')
                    )
                    logger.debug("Merged Bridge Coefficient Attributes successfully.")
                else:
                    logger.warning("Bridge Coefficient Attributes missing or 'Structure ID' not present.")

                # Merge Table Info based on the DataFrame index (one-to-one correspondence)
                if not table_info.empty:
                    if len(table_info) != len(struct_gdf):
                        logger.warning("Table Info count does not match Structures count. Skipping merge.")
                    else:
                        struct_gdf = pd.concat([struct_gdf, table_info.reset_index(drop=True)], axis=1)
                        logger.debug("Merged Table Info successfully.")
                else:
                    logger.warning("Table Info dataset is empty or missing.")

                # Process Profile Data based on Table Info
                if not profile_data.empty and not table_info.empty:
                    # Assuming 'Centerline Profile (Index)' and 'Centerline Profile (Count)' are in 'Table Info'
                    if ('Centerline Profile (Index)' in table_info.columns and
                        'Centerline Profile (Count)' in table_info.columns):
                        struct_gdf['Profile_Data'] = struct_gdf.apply(
                            lambda row: [
                                {'Station': float(profile_data.iloc[i, 0]),
                                 'Elevation': float(profile_data.iloc[i, 1])}
                                for i in range(
                                    int(row['Centerline Profile (Index)']),
                                    int(row['Centerline Profile (Index)']) + int(row['Centerline Profile (Count)'])
                                )
                            ],
                            axis=1
                        )
                        logger.debug("Processed Profile Data successfully.")
                    else:
                        logger.warning("Required columns for Profile Data not found in Table Info.")
                else:
                    logger.warning("Profile Data dataset is empty or Table Info is missing.")

                # Convert datetime columns to string if requested
                if datetime_to_str:
                    datetime_cols = struct_gdf.select_dtypes(include=['datetime64']).columns
                    for col in datetime_cols:
                        struct_gdf[col] = struct_gdf[col].dt.isoformat()
                        logger.debug(f"Converted datetime column '{col}' to string.")

                # Ensure all byte strings are decoded (if any remain)
                for col in struct_gdf.columns:
                    if struct_gdf[col].dtype == object:
                        struct_gdf[col] = struct_gdf[col].apply(
                            lambda x: x.decode('utf-8', errors='ignore') if isinstance(x, bytes) else x
                        )

                # Final GeoDataFrame
                logger.info("Successfully extracted structures GeoDataFrame.")
                
                # Add group attributes to the GeoDataFrame's attrs['group_attributes']
                struct_gdf.attrs['group_attributes'] = group_attrs
                
                logger.info("Successfully extracted structures GeoDataFrame with attributes.")
                
                return struct_gdf

        except Exception as e:
            logger.error(f"Error reading structures from {hdf_path}: {str(e)}")
            raise

    @staticmethod
    @log_call
    @standardize_input(file_type='geom_hdf')
    def get_geom_structures_attrs(hdf_path: Path) -> pd.DataFrame:
        """
        Extracts structure attributes from a HEC-RAS geometry HDF file.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file

        Returns
        -------
        pd.DataFrame
            DataFrame containing structure attributes from the Geometry/Structures group.
            Returns empty DataFrame if no structures are found.

        Notes
        -----
        Attributes are extracted from the HDF5 group 'Geometry/Structures'.
        All byte strings in attributes are automatically decoded to UTF-8.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                if "Geometry/Structures" not in hdf_file:
                    logger.info(f"No structures found in the geometry file: {hdf_path}")
                    return pd.DataFrame()
                
                # Get attributes and decode byte strings
                attrs_dict = {}
                for key, value in dict(hdf_file["Geometry/Structures"].attrs).items():
                    if isinstance(value, bytes):
                        attrs_dict[key] = value.decode('utf-8')
                    else:
                        attrs_dict[key] = value
                
                # Create DataFrame with a single row index
                return pd.DataFrame(attrs_dict, index=[0])
                
        except Exception as e:
            logger.error(f"Error reading geometry structures attributes: {str(e)}")
            return pd.DataFrame()

==================================================

File: c:\GH\ras-commander\ras_commander\HdfUtils.py
==================================================
"""
HdfUtils Class
-------------

A utility class providing static methods for working with HEC-RAS HDF files.

Attribution:
    A substantial amount of code in this file is sourced or derived from the 
    https://github.com/fema-ffrd/rashdf library, released under MIT license 
    and Copyright (c) 2024 fema-ffrd. The file has been forked and modified 
    for use in RAS Commander.

Key Features:
- HDF file data conversion and parsing
- DateTime handling for RAS-specific formats
- Spatial operations using KDTree
- HDF attribute management

Main Method Categories:

1. Data Conversion
    - convert_ras_string: Convert RAS HDF strings to Python objects
    - convert_ras_hdf_value: Convert general HDF values to Python objects
    - convert_df_datetimes_to_str: Convert DataFrame datetime columns to strings
    - convert_hdf5_attrs_to_dict: Convert HDF5 attributes to dictionary
    - convert_timesteps_to_datetimes: Convert timesteps to datetime objects

2. Spatial Operations
    - perform_kdtree_query: KDTree search between datasets
    - find_nearest_neighbors: Find nearest neighbors within dataset

3. DateTime Parsing
    - parse_ras_datetime: Parse standard RAS datetime format (ddMMMYYYY HH:MM:SS)
    - parse_ras_window_datetime: Parse simulation window datetime (ddMMMYYYY HHMM)
    - parse_duration: Parse duration strings (HH:MM:SS)
    - parse_ras_datetime_ms: Parse datetime with milliseconds
    - parse_run_time_window: Parse time window strings

Usage Notes:
- All methods are static and can be called without class instantiation
- Methods handle both raw HDF data and converted Python objects
- Includes comprehensive error handling for RAS-specific data formats
- Supports various RAS datetime formats and conversions
"""
import logging
from pathlib import Path
import h5py
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from typing import Union, Optional, Dict, List, Tuple, Any
from scipy.spatial import KDTree
import re
from shapely.geometry import LineString  # Import LineString to avoid NameError

from .Decorators import standardize_input, log_call 
from .LoggingConfig import setup_logging, get_logger

logger = get_logger(__name__)

class HdfUtils:
    """
    Utility class for working with HEC-RAS HDF files.

    This class provides general utility functions for HDF file operations,
    including attribute extraction, data conversion, and common HDF queries.
    It also includes spatial operations and helper methods for working with
    HEC-RAS specific data structures.

    Note:
    - Use this class for general HDF utility functions that are not specific to plan or geometry files.
    - All methods in this class are static and can be called without instantiating the class.
    """




# RENAME TO convert_ras_string and make public

    @staticmethod
    def convert_ras_string(value: Union[str, bytes]) -> Union[bool, datetime, List[datetime], timedelta, str]:
        """
        Convert a string value from an HEC-RAS HDF file into a Python object.

        Args:
            value (Union[str, bytes]): The value to convert.

        Returns:
            Union[bool, datetime, List[datetime], timedelta, str]: The converted value.
        """
        if isinstance(value, bytes):
            s = value.decode("utf-8")
        else:
            s = value

        if s == "True":
            return True
        elif s == "False":
            return False
        
        ras_datetime_format1_re = r"\d{2}\w{3}\d{4} \d{2}:\d{2}:\d{2}"
        ras_datetime_format2_re = r"\d{2}\w{3}\d{4} \d{2}\d{2}"
        ras_duration_format_re = r"\d{2}:\d{2}:\d{2}"

        if re.match(rf"^{ras_datetime_format1_re}", s):
            if re.match(rf"^{ras_datetime_format1_re} to {ras_datetime_format1_re}$", s):
                split = s.split(" to ")
                return [
                    HdfUtils.parse_ras_datetime(split[0]),
                    HdfUtils.parse_ras_datetime(split[1]),
                ]
            return HdfUtils.parse_ras_datetime(s)
        elif re.match(rf"^{ras_datetime_format2_re}", s):
            if re.match(rf"^{ras_datetime_format2_re} to {ras_datetime_format2_re}$", s):
                split = s.split(" to ")
                return [
                    HdfUtils.parse_ras_window_datetime(split[0]),
                    HdfUtils.parse_ras_window_datetime(split[1]),
                ]
            return HdfUtils.parse_ras_window_datetime(s)
        elif re.match(rf"^{ras_duration_format_re}$", s):
            return HdfUtils.parse_ras_duration(s)
        return s





    @staticmethod
    def convert_ras_hdf_value(value: Any) -> Union[None, bool, str, List[str], int, float, List[int], List[float]]:
        """
        Convert a value from a HEC-RAS HDF file into a Python object.

        Args:
            value (Any): The value to convert.

        Returns:
            Union[None, bool, str, List[str], int, float, List[int], List[float]]: The converted value.
        """
        if isinstance(value, np.floating) and np.isnan(value):
            return None
        elif isinstance(value, (bytes, np.bytes_)):
            return value.decode('utf-8')
        elif isinstance(value, np.integer):
            return int(value)
        elif isinstance(value, np.floating):
            return float(value)
        elif isinstance(value, (int, float)):
            return value
        elif isinstance(value, (list, tuple, np.ndarray)):
            if len(value) > 1:
                return [HdfUtils.convert_ras_hdf_value(v) for v in value]
            else:
                return HdfUtils.convert_ras_hdf_value(value[0])
        else:
            return str(value)










# RENAME TO convert_df_datetimes_to_str 

    @staticmethod
    def convert_df_datetimes_to_str(df: pd.DataFrame) -> pd.DataFrame:
        """
        Convert any datetime64 columns in a DataFrame to strings.

        Args:
            df (pd.DataFrame): The DataFrame to convert.

        Returns:
            pd.DataFrame: The DataFrame with datetime columns converted to strings.
        """
        for col in df.select_dtypes(include=['datetime64']).columns:
            df[col] = df[col].dt.strftime('%Y-%m-%d %H:%M:%S')
        return df


# KDTree Methods: 


    @staticmethod
    def perform_kdtree_query(
        reference_points: np.ndarray,
        query_points: np.ndarray,
        max_distance: float = 2.0
    ) -> np.ndarray:
        """
        Performs a KDTree query between two datasets and returns indices with distances exceeding max_distance set to -1.

        Args:
            reference_points (np.ndarray): The reference dataset for KDTree.
            query_points (np.ndarray): The query dataset to search against KDTree of reference_points.
            max_distance (float, optional): The maximum distance threshold. Indices with distances greater than this are set to -1. Defaults to 2.0.

        Returns:
            np.ndarray: Array of indices from reference_points that are nearest to each point in query_points. 
                        Indices with distances > max_distance are set to -1.

        Example:
            >>> ref_points = np.array([[0, 0], [1, 1], [2, 2]])
            >>> query_points = np.array([[0.5, 0.5], [3, 3]])
            >>> result = HdfUtils.perform_kdtree_query(ref_points, query_points)
            >>> print(result)
            array([ 0, -1])
        """
        dist, snap = KDTree(reference_points).query(query_points, distance_upper_bound=max_distance)
        snap[dist > max_distance] = -1
        return snap

    @staticmethod
    def find_nearest_neighbors(points: np.ndarray, max_distance: float = 2.0) -> np.ndarray:
        """
        Creates a self KDTree for dataset points and finds nearest neighbors excluding self, 
        with distances above max_distance set to -1.

        Args:
            points (np.ndarray): The dataset to build the KDTree from and query against itself.
            max_distance (float, optional): The maximum distance threshold. Indices with distances 
                                            greater than max_distance are set to -1. Defaults to 2.0.

        Returns:
            np.ndarray: Array of indices representing the nearest neighbor in points for each point in points. 
                        Indices with distances > max_distance or self-matches are set to -1.

        Example:
            >>> points = np.array([[0, 0], [1, 1], [2, 2], [10, 10]])
            >>> result = HdfUtils.find_nearest_neighbors(points)
            >>> print(result)
            array([1, 0, 1, -1])
        """
        dist, snap = KDTree(points).query(points, k=2, distance_upper_bound=max_distance)
        snap[dist > max_distance] = -1
        
        snp = pd.DataFrame(snap, index=np.arange(len(snap)))
        snp = snp.replace(-1, np.nan)
        snp.loc[snp[0] == snp.index, 0] = np.nan
        snp.loc[snp[1] == snp.index, 1] = np.nan
        filled = snp[0].fillna(snp[1])
        snapped = filled.fillna(-1).astype(np.int64).to_numpy()
        return snapped




# Datetime Parsing Methods: 

    @staticmethod
    @log_call
    def parse_ras_datetime_ms(datetime_str: str) -> datetime:
        """
        Public method to parse a datetime string with milliseconds from a RAS file.

        Args:
            datetime_str (str): The datetime string to parse.

        Returns:
            datetime: The parsed datetime object.
        """
        milliseconds = int(datetime_str[-3:])
        microseconds = milliseconds * 1000
        parsed_dt = HdfUtils.parse_ras_datetime(datetime_str[:-4]).replace(microsecond=microseconds)
        return parsed_dt
    
# Rename to convert_timesteps_to_datetimes and make public
    @staticmethod
    def convert_timesteps_to_datetimes(timesteps: np.ndarray, start_time: datetime, time_unit: str = "days", round_to: str = "100ms") -> pd.DatetimeIndex:
        """
        Convert RAS timesteps to datetime objects.

        Args:
            timesteps (np.ndarray): Array of timesteps.
            start_time (datetime): Start time of the simulation.
            time_unit (str): Unit of the timesteps. Default is "days".
            round_to (str): Frequency string to round the times to. Default is "100ms" (100 milliseconds).

        Returns:
            pd.DatetimeIndex: DatetimeIndex of converted and rounded datetimes.
        """
        if time_unit == "days":
            datetimes = start_time + pd.to_timedelta(timesteps, unit='D')
        elif time_unit == "hours":
            datetimes = start_time + pd.to_timedelta(timesteps, unit='H')
        else:
            raise ValueError(f"Unsupported time unit: {time_unit}")

        return pd.DatetimeIndex(datetimes).round(round_to)
    
# rename to convert_hdf5_attrs_to_dict and make public

    @staticmethod
    def convert_hdf5_attrs_to_dict(attrs: Union[h5py.AttributeManager, Dict], prefix: Optional[str] = None) -> Dict:
        """
        Convert HDF5 attributes to a Python dictionary.

        Args:
            attrs (Union[h5py.AttributeManager, Dict]): The attributes to convert.
            prefix (Optional[str]): A prefix to add to the attribute keys.

        Returns:
            Dict: A dictionary of converted attributes.
        """
        result = {}
        for key, value in attrs.items():
            if prefix:
                key = f"{prefix}/{key}"
            if isinstance(value, (np.ndarray, list)):
                result[key] = [HdfUtils.convert_ras_hdf_value(v) for v in value]
            else:
                result[key] = HdfUtils.convert_ras_hdf_value(value)
        return result
    
    

    @staticmethod
    def parse_run_time_window(window: str) -> Tuple[datetime, datetime]:
        """
        Parse a run time window string into a tuple of datetime objects.

        Args:
            window (str): The run time window string to be parsed.

        Returns:
            Tuple[datetime, datetime]: A tuple containing two datetime objects representing the start and end of the run
            time window.
        """
        split = window.split(" to ")
        begin = HdfUtils._parse_ras_datetime(split[0])
        end = HdfUtils._parse_ras_datetime(split[1])
        return begin, end

    


                
                
                
                
                
                
                
                
                
                
                
                
## MOVED FROM HdfBase to HdfUtils:
# _parse_ras_datetime   
# _parse_ras_simulation_window_datetime
# _parse_duration
# _parse_ras_datetime_ms
# _convert_ras_hdf_string

# Which were renamed and made public as: 
# parse_ras_datetime
# parse_ras_window_datetime
# parse_ras_datetime_ms
# parse_ras_duration
# parse_ras_time_window


# Rename to parse_ras_datetime and make public

    @staticmethod
    def parse_ras_datetime(datetime_str: str) -> datetime:
        """
        Parse a RAS datetime string into a datetime object.

        Args:
            datetime_str (str): The datetime string in format "ddMMMYYYY HH:MM:SS"

        Returns:
            datetime: The parsed datetime object.
        """
        return datetime.strptime(datetime_str, "%d%b%Y %H:%M:%S")

# Rename to parse_ras_window_datetime and make public

    @staticmethod
    def parse_ras_window_datetime(datetime_str: str) -> datetime:
        """
        Parse a datetime string from a RAS simulation window into a datetime object.

        Args:
            datetime_str (str): The datetime string to parse.

        Returns:
            datetime: The parsed datetime object.
        """
        return datetime.strptime(datetime_str, "%d%b%Y %H%M")


# Rename to parse_duration and make public


    @staticmethod
    def parse_duration(duration_str: str) -> timedelta:
        """
        Parse a duration string into a timedelta object.

        Args:
            duration_str (str): The duration string to parse.

        Returns:
            timedelta: The parsed duration as a timedelta object.
        """
        hours, minutes, seconds = map(int, duration_str.split(':'))
        return timedelta(hours=hours, minutes=minutes, seconds=seconds)
    
    
# Rename to parse_ras_datetime_ms and make public
    
    @staticmethod
    def parse_ras_datetime_ms(datetime_str: str) -> datetime:
        """
        Parse a datetime string with milliseconds from a RAS file.

        Args:
            datetime_str (str): The datetime string to parse.

        Returns:
            datetime: The parsed datetime object.
        """
        milliseconds = int(datetime_str[-3:])
        microseconds = milliseconds * 1000
        parsed_dt = HdfUtils.parse_ras_datetime(datetime_str[:-4]).replace(microsecond=microseconds)
        return parsed_dt
    
    
==================================================

File: c:\GH\ras-commander\ras_commander\HdfXsec.py
==================================================
"""
Class: HdfXsec

Attribution: A substantial amount of code in this file is sourced or derived 
from the https://github.com/fema-ffrd/rashdf library, 
released under MIT license and Copyright (c) 2024 fema-ffrd

This source code has been forked and modified for use in RAS Commander.

-----

All of the methods in this class are static and are designed to be used without instantiation.

Available Functions:
- get_cross_sections(): Extract cross sections from HDF geometry file
- get_river_centerlines(): Extract river centerlines from HDF geometry file
- get_river_stationing(): Calculate river stationing along centerlines
- get_river_reaches(): Return the model 1D river reach lines
- get_river_edge_lines(): Return the model river edge lines
- get_river_bank_lines(): Extract river bank lines from HDF geometry file
- _interpolate_station(): Private helper method for station interpolation

All functions follow the get_ prefix convention for methods that return data.
Private helper methods use the underscore prefix convention.

Each function returns a GeoDataFrame containing geometries and associated attributes
specific to the requested feature type. All functions include proper error handling
and logging.
"""

from pathlib import Path
import h5py
import numpy as np
import pandas as pd
from geopandas import GeoDataFrame
import geopandas as gpd
from shapely.geometry import LineString, MultiLineString
from typing import List  # Import List to avoid NameError
from .Decorators import standardize_input, log_call
from .HdfBase import HdfBase
from .HdfUtils import HdfUtils
from .LoggingConfig import get_logger
import logging



logger = get_logger(__name__)

class HdfXsec:
    """
    Handles cross-section and river geometry data extraction from HEC-RAS HDF files.

    This class provides static methods to extract and process:
    - Cross-section geometries and attributes
    - River centerlines and reaches
    - River edge and bank lines
    - Station-elevation profiles

    All methods are designed to return GeoDataFrames with standardized geometries 
    and attributes following the HEC-RAS data structure.

    Note:
        Requires HEC-RAS geometry HDF files with standard structure and naming conventions.
        All methods use proper error handling and logging.
    """
    @staticmethod
    @log_call
    def get_cross_sections(hdf_path: str, datetime_to_str: bool = True, ras_object=None) -> gpd.GeoDataFrame:
        """
        Extracts cross-section geometries and attributes from a HEC-RAS geometry HDF file.

        Parameters
        ----------
        hdf_path : str
            Path to the HEC-RAS geometry HDF file
        datetime_to_str : bool, optional
            Convert datetime objects to strings, defaults to True
        ras_object : RasPrj, optional
            RAS project object for additional context, defaults to None

        Returns
        -------
        gpd.GeoDataFrame
            Cross-section data with columns:
            - geometry: LineString of cross-section path
            - station_elevation: Station-elevation profile points
            - mannings_n: Dictionary of Manning's n values and stations
            - ineffective_blocks: List of ineffective flow area blocks
            - River, Reach, RS: River system identifiers
            - Name, Description: Cross-section labels
            - Len Left/Channel/Right: Flow path lengths
            - Left/Right Bank: Bank station locations
            - Additional hydraulic parameters and attributes

        Notes
        -----
        The returned GeoDataFrame includes the coordinate system from the HDF file
        when available. All byte strings are converted to regular strings.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf:
                # Extract required datasets
                poly_info = hdf['/Geometry/Cross Sections/Polyline Info'][:]
                poly_parts = hdf['/Geometry/Cross Sections/Polyline Parts'][:]
                poly_points = hdf['/Geometry/Cross Sections/Polyline Points'][:]
                
                station_info = hdf['/Geometry/Cross Sections/Station Elevation Info'][:]
                station_values = hdf['/Geometry/Cross Sections/Station Elevation Values'][:]
                
                # Get attributes for cross sections
                xs_attrs = hdf['/Geometry/Cross Sections/Attributes'][:]
                
                # Get Manning's n data
                mann_info = hdf["/Geometry/Cross Sections/Manning's n Info"][:]
                mann_values = hdf["/Geometry/Cross Sections/Manning's n Values"][:]
                
                # Get ineffective blocks data
                ineff_blocks = hdf['/Geometry/Cross Sections/Ineffective Blocks'][:]
                ineff_info = hdf['/Geometry/Cross Sections/Ineffective Info'][:]
                
                # Initialize lists to store data
                geometries = []
                station_elevations = []
                mannings_n = []
                ineffective_blocks = []
                
                # Process each cross section
                for i in range(len(poly_info)):
                    # Extract polyline info
                    point_start_idx = poly_info[i][0]
                    point_count = poly_info[i][1]
                    part_start_idx = poly_info[i][2]
                    part_count = poly_info[i][3]
                    
                    # Extract parts for current polyline
                    parts = poly_parts[part_start_idx:part_start_idx + part_count]
                    
                    # Collect all points for this cross section
                    xs_points = []
                    for part in parts:
                        part_point_start = point_start_idx + part[0]
                        part_point_count = part[1]
                        points = poly_points[part_point_start:part_point_start + part_point_count]
                        xs_points.extend(points)
                    
                    # Create LineString geometry
                    if len(xs_points) >= 2:
                        geometry = LineString(xs_points)
                        geometries.append(geometry)
                        
                        # Extract station-elevation data
                        start_idx = station_info[i][0]
                        count = station_info[i][1]
                        station_elev = station_values[start_idx:start_idx + count]
                        station_elevations.append(station_elev)
                        
                        # Extract Manning's n data
                        mann_start_idx = mann_info[i][0]
                        mann_count = mann_info[i][1]
                        mann_n_section = mann_values[mann_start_idx:mann_start_idx + mann_count]
                        mann_n_dict = {
                            'Station': mann_n_section[:, 0].tolist(),
                            'Mann n': mann_n_section[:, 1].tolist()
                        }
                        mannings_n.append(mann_n_dict)
                        
                        # Extract ineffective blocks data
                        ineff_start_idx = ineff_info[i][0]
                        ineff_count = ineff_info[i][1]
                        if ineff_count > 0:
                            blocks = ineff_blocks[ineff_start_idx:ineff_start_idx + ineff_count]
                            blocks_list = []
                            for block in blocks:
                                block_dict = {
                                    'Left Sta': float(block['Left Sta']),
                                    'Right Sta': float(block['Right Sta']), 
                                    'Elevation': float(block['Elevation']),
                                    'Permanent': bool(block['Permanent'])
                                }
                                blocks_list.append(block_dict)
                            ineffective_blocks.append(blocks_list)
                        else:
                            ineffective_blocks.append([])
                
                # Create base dictionary with required fields
                data = {
                    'geometry': geometries,
                    'station_elevation': station_elevations,
                    'mannings_n': mannings_n,
                    'ineffective_blocks': ineffective_blocks,
                }
                
                # Define field mappings with default values
                field_mappings = {
                    'River': ('River', ''),
                    'Reach': ('Reach', ''),
                    'RS': ('RS', ''),
                    'Name': ('Name', ''),
                    'Description': ('Description', ''),
                    'Len Left': ('Len Left', 0.0),
                    'Len Channel': ('Len Channel', 0.0),
                    'Len Right': ('Len Right', 0.0),
                    'Left Bank': ('Left Bank', 0.0),
                    'Right Bank': ('Right Bank', 0.0),
                    'Friction Mode': ('Friction Mode', ''),
                    'Contr': ('Contr', 0.0),
                    'Expan': ('Expan', 0.0),
                    'Left Levee Sta': ('Left Levee Sta', None),
                    'Left Levee Elev': ('Left Levee Elev', None),
                    'Right Levee Sta': ('Right Levee Sta', None),
                    'Right Levee Elev': ('Right Levee Elev', None),
                    'HP Count': ('HP Count', 0),
                    'HP Start Elev': ('HP Start Elev', 0.0),
                    'HP Vert Incr': ('HP Vert Incr', 0.0),
                    'HP LOB Slices': ('HP LOB Slices', 0),
                    'HP Chan Slices': ('HP Chan Slices', 0),
                    'HP ROB Slices': ('HP ROB Slices', 0),
                    'Ineff Block Mode': ('Ineff Block Mode', 0),
                    'Obstr Block Mode': ('Obstr Block Mode', 0),
                    'Default Centerline': ('Default Centerline', 0),
                    'Last Edited': ('Last Edited', '')
                }
                
                # Add fields that exist in xs_attrs
                for field_name, (attr_name, default_value) in field_mappings.items():
                    if attr_name in xs_attrs.dtype.names:
                        if xs_attrs[attr_name].dtype.kind == 'S':
                            # Handle string fields
                            data[field_name] = [x[attr_name].decode('utf-8').strip() 
                                              for x in xs_attrs]
                        else:
                            # Handle numeric fields
                            data[field_name] = xs_attrs[attr_name]
                    else:
                        # Use default value if field doesn't exist
                        data[field_name] = [default_value] * len(geometries)
                        logger.debug(f"Field {attr_name} not found in attributes, using default value")
                
                if geometries:
                    gdf = gpd.GeoDataFrame(data)
                    
                    # Set CRS if available
                    if 'Projection' in hdf['/Geometry'].attrs:
                        proj = hdf['/Geometry'].attrs['Projection']
                        if isinstance(proj, bytes):
                            proj = proj.decode('utf-8')
                        gdf.set_crs(proj, allow_override=True)
                    
                    return gdf
                
                return gpd.GeoDataFrame()
                
        except Exception as e:
            logger.error(f"Error processing cross-section data: {str(e)}")
            return gpd.GeoDataFrame()

    @staticmethod
    @log_call
    @standardize_input(file_type='geom_hdf')
    def get_river_centerlines(hdf_path: Path, datetime_to_str: bool = False) -> GeoDataFrame:
        """
        Extracts river centerline geometries and attributes from HDF geometry file.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file
        datetime_to_str : bool, optional
            Convert datetime objects to strings, defaults to False

        Returns
        -------
        GeoDataFrame
            River centerline data with columns:
            - geometry: LineString of river centerline
            - River Name, Reach Name: River system identifiers
            - US/DS Type, Name: Upstream/downstream connection info
            - length: Centerline length in project units
            Additional attributes from the HDF file are included

        Notes
        -----
        Returns an empty GeoDataFrame if no centerlines are found.
        All string attributes are stripped of whitespace.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                if "Geometry/River Centerlines" not in hdf_file:
                    logger.warning("No river centerlines found in geometry file")
                    return GeoDataFrame()

                centerline_data = hdf_file["Geometry/River Centerlines"]
                
                # Get attributes directly from HDF dataset
                attrs = centerline_data["Attributes"][()]
                
                # Create initial dictionary for DataFrame
                centerline_dict = {}
                
                # Process each attribute field
                for name in attrs.dtype.names:
                    values = attrs[name]
                    if values.dtype.kind == 'S':
                        # Convert byte strings to regular strings
                        centerline_dict[name] = [val.decode('utf-8').strip() for val in values]
                    else:
                        centerline_dict[name] = values.tolist()  # Convert numpy array to list

                # Get polylines using utility function
                geoms = HdfBase.get_polylines_from_parts(
                    hdf_path, 
                    "Geometry/River Centerlines",
                    info_name="Polyline Info",
                    parts_name="Polyline Parts",
                    points_name="Polyline Points"
                )

                # Create GeoDataFrame
                centerline_gdf = GeoDataFrame(
                    centerline_dict,
                    geometry=geoms,
                    crs=HdfBase.get_projection(hdf_path)
                )

                # Clean up string columns
                str_columns = ['River Name', 'Reach Name', 'US Type', 
                            'US Name', 'DS Type', 'DS Name']
                for col in str_columns:
                    if col in centerline_gdf.columns:
                        centerline_gdf[col] = centerline_gdf[col].str.strip()

                # Add length calculation in project units
                if not centerline_gdf.empty:
                    centerline_gdf['length'] = centerline_gdf.geometry.length
                    
                    # Convert datetime columns if requested
                    if datetime_to_str:
                        datetime_cols = centerline_gdf.select_dtypes(
                            include=['datetime64']).columns
                        for col in datetime_cols:
                            centerline_gdf[col] = centerline_gdf[col].dt.strftime(
                                '%Y-%m-%d %H:%M:%S')

                logger.info(f"Extracted {len(centerline_gdf)} river centerlines")
                return centerline_gdf

        except Exception as e:
            logger.error(f"Error reading river centerlines: {str(e)}")
            return GeoDataFrame()



    @staticmethod
    @log_call
    def get_river_stationing(centerlines_gdf: GeoDataFrame) -> GeoDataFrame:
        """
        Calculates stationing along river centerlines with interpolated points.

        Parameters
        ----------
        centerlines_gdf : GeoDataFrame
            River centerline geometries from get_river_centerlines()

        Returns
        -------
        GeoDataFrame
            Original centerlines with additional columns:
            - station_start: Starting station value (0 or length)
            - station_end: Ending station value (length or 0)
            - stations: Array of station values along centerline
            - points: Array of interpolated point geometries

        Notes
        -----
        Station direction (increasing/decreasing) is determined by
        upstream/downstream junction connections. Stations are calculated
        at 100 evenly spaced points along each centerline.
        """
        if centerlines_gdf.empty:
            logger.warning("Empty centerlines GeoDataFrame provided")
            return centerlines_gdf

        try:
            # Create copy to avoid modifying original
            result_gdf = centerlines_gdf.copy()
            
            # Initialize new columns
            result_gdf['station_start'] = 0.0
            result_gdf['station_end'] = 0.0
            result_gdf['stations'] = None
            result_gdf['points'] = None
            
            # Process each centerline
            for idx, row in result_gdf.iterrows():
                # Get line geometry
                line = row.geometry
                
                # Calculate length
                total_length = line.length
                
                # Generate points along the line
                distances = np.linspace(0, total_length, num=100)  # Adjust num for desired density
                points = [line.interpolate(distance) for distance in distances]
                
                # Store results
                result_gdf.at[idx, 'station_start'] = 0.0
                result_gdf.at[idx, 'station_end'] = total_length
                result_gdf.at[idx, 'stations'] = distances
                result_gdf.at[idx, 'points'] = points
                
                # Add stationing direction based on upstream/downstream info
                if row['US Type'] == 'Junction' and row['DS Type'] != 'Junction':
                    # Reverse stationing if upstream is junction
                    result_gdf.at[idx, 'station_start'] = total_length
                    result_gdf.at[idx, 'station_end'] = 0.0
                    result_gdf.at[idx, 'stations'] = total_length - distances
            
            return result_gdf

        except Exception as e:
            logger.error(f"Error calculating river stationing: {str(e)}")
            return centerlines_gdf

    @staticmethod
    def _interpolate_station(line, distance):
        """
        Interpolates a point along a line at a given distance.

        Parameters
        ----------
        line : LineString
            Shapely LineString geometry
        distance : float
            Distance along the line to interpolate

        Returns
        -------
        tuple
            (x, y) coordinates of interpolated point
        """
        if distance <= 0:
            return line.coords[0]
        elif distance >= line.length:
            return line.coords[-1]
        return line.interpolate(distance).coords[0]



    @staticmethod
    @log_call
    @standardize_input(file_type='geom_hdf')
    def get_river_reaches(hdf_path: Path, datetime_to_str: bool = False) -> GeoDataFrame:
        """
        Return the model 1D river reach lines.

        This method extracts river reach data from the HEC-RAS geometry HDF file,
        including attributes and geometry information.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.
        datetime_to_str : bool, optional
            If True, convert datetime objects to strings. Default is False.

        Returns
        -------
        GeoDataFrame
            A GeoDataFrame containing the river reaches with their attributes and geometries.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                if "Geometry/River Centerlines" not in hdf_file:
                    return GeoDataFrame()

                river_data = hdf_file["Geometry/River Centerlines"]
                v_conv_val = np.vectorize(HdfUtils.convert_ras_string)
                river_attrs = river_data["Attributes"][()]
                river_dict = {"river_id": range(river_attrs.shape[0])}
                river_dict.update(
                    {name: v_conv_val(river_attrs[name]) for name in river_attrs.dtype.names}
                )
                
                # Get polylines for river reaches
                geoms = HdfBase.get_polylines_from_parts(
                    hdf_path, "Geometry/River Centerlines"
                )

                river_gdf = GeoDataFrame(
                    river_dict,
                    geometry=geoms,
                    crs=HdfBase.get_projection(hdf_path),
                )
                if datetime_to_str:
                    river_gdf["Last Edited"] = river_gdf["Last Edited"].apply(
                        lambda x: pd.Timestamp.isoformat(x)
                    )
                return river_gdf
        except Exception as e:
            logger.error(f"Error reading river reaches: {str(e)}")
            return GeoDataFrame()


    @staticmethod
    @log_call
    @standardize_input(file_type='geom_hdf')
    def get_river_edge_lines(hdf_path: Path, datetime_to_str: bool = False) -> GeoDataFrame:
        """
        Return the model river edge lines.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.
        datetime_to_str : bool, optional
            If True, convert datetime objects to strings. Default is False.

        Returns
        -------
        GeoDataFrame
            A GeoDataFrame containing river edge lines with their attributes and geometries.
            Each row represents a river bank (left or right) with associated attributes.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                if "Geometry/River Edge Lines" not in hdf_file:
                    logger.warning("No river edge lines found in geometry file")
                    return GeoDataFrame()

                edge_data = hdf_file["Geometry/River Edge Lines"]
                
                # Get attributes if they exist
                if "Attributes" in edge_data:
                    attrs = edge_data["Attributes"][()]
                    v_conv_val = np.vectorize(HdfUtils.convert_ras_string)
                    
                    # Create dictionary of attributes
                    edge_dict = {"edge_id": range(attrs.shape[0])}
                    edge_dict.update(
                        {name: v_conv_val(attrs[name]) for name in attrs.dtype.names}
                    )
                    
                    # Add bank side indicator
                    if edge_dict["edge_id"].size % 2 == 0:  # Ensure even number of edges
                        edge_dict["bank_side"] = ["Left", "Right"] * (edge_dict["edge_id"].size // 2)
                else:
                    edge_dict = {"edge_id": [], "bank_side": []}

                # Get polyline geometries
                geoms = HdfBase.get_polylines_from_parts(
                    hdf_path, 
                    "Geometry/River Edge Lines",
                    info_name="Polyline Info",
                    parts_name="Polyline Parts",
                    points_name="Polyline Points"
                )

                # Create GeoDataFrame
                edge_gdf = GeoDataFrame(
                    edge_dict,
                    geometry=geoms,
                    crs=HdfBase.get_projection(hdf_path)
                )

                # Convert datetime objects to strings if requested
                if datetime_to_str and 'Last Edited' in edge_gdf.columns:
                    edge_gdf["Last Edited"] = edge_gdf["Last Edited"].apply(
                        lambda x: pd.Timestamp.isoformat(x) if pd.notnull(x) else None
                    )

                # Add length calculation in project units
                if not edge_gdf.empty:
                    edge_gdf['length'] = edge_gdf.geometry.length

                return edge_gdf

        except Exception as e:
            logger.error(f"Error reading river edge lines: {str(e)}")
            return GeoDataFrame()

    @staticmethod
    @log_call
    @standardize_input(file_type='geom_hdf')
    def get_river_bank_lines(hdf_path: Path, datetime_to_str: bool = False) -> GeoDataFrame:
        """
        Extract river bank lines from HDF geometry file.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file
        datetime_to_str : bool, optional
            Convert datetime objects to strings, by default False

        Returns
        -------
        GeoDataFrame
            GeoDataFrame containing river bank line geometries with attributes:
            - bank_id: Unique identifier for each bank line
            - bank_side: Left or Right bank indicator
            - geometry: LineString geometry of the bank
            - length: Length of the bank line in project units
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                if "Geometry/River Bank Lines" not in hdf_file:
                    logger.warning("No river bank lines found in geometry file")
                    return GeoDataFrame()

                # Get polyline geometries using existing helper method
                geoms = HdfBase.get_polylines_from_parts(
                    hdf_path, 
                    "Geometry/River Bank Lines",
                    info_name="Polyline Info",
                    parts_name="Polyline Parts",
                    points_name="Polyline Points"
                )

                # Create basic attributes
                bank_dict = {
                    "bank_id": range(len(geoms)),
                    "bank_side": ["Left", "Right"] * (len(geoms) // 2)  # Assuming pairs of left/right banks
                }

                # Create GeoDataFrame
                bank_gdf = GeoDataFrame(
                    bank_dict,
                    geometry=geoms,
                    crs=HdfBase.get_projection(hdf_path)
                )

                # Add length calculation in project units
                if not bank_gdf.empty:
                    bank_gdf['length'] = bank_gdf.geometry.length

                return bank_gdf

        except Exception as e:
            logger.error(f"Error reading river bank lines: {str(e)}")
            return GeoDataFrame()


==================================================

File: c:\GH\ras-commander\ras_commander\LoggingConfig.py
==================================================
# logging_config.py

import logging
import logging.handlers
from pathlib import Path
import functools

# Define log levels
DEBUG = logging.DEBUG
INFO = logging.INFO
WARNING = logging.WARNING
ERROR = logging.ERROR
CRITICAL = logging.CRITICAL


_logging_setup_done = False

def setup_logging(log_file=None, log_level=logging.INFO):
    """Set up logging configuration for the ras-commander library."""
    global _logging_setup_done
    if _logging_setup_done:
        return
    
    # Define log format
    log_format = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )

    # Configure console handler
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(log_format)

    # Set up root logger
    root_logger = logging.getLogger()
    root_logger.setLevel(log_level)
    root_logger.addHandler(console_handler)

    # Configure file handler if log_file is provided
    if log_file:
        log_dir = Path('logs')
        log_dir.mkdir(exist_ok=True)
        log_file_path = log_dir / log_file

        file_handler = logging.handlers.RotatingFileHandler(
            log_file_path, maxBytes=10*1024*1024, backupCount=5
        )
        file_handler.setFormatter(log_format)
        root_logger.addHandler(file_handler)
    
    _logging_setup_done = True

def get_logger(name: str) -> logging.Logger:
    """Get a logger instance with the specified name.
    
    Args:
        name: The name for the logger, typically __name__ or module path
        
    Returns:
        logging.Logger: Configured logger instance
    """
    logger = logging.getLogger(name)
    if not logger.handlers:  # Only add handler if none exists
        setup_logging()  # Ensure logging is configured
    return logger

def log_call(logger=None):
    """Decorator to log function calls."""
    def get_logger():
        # Check if logger is None or doesn't have a debug method
        if logger is None or not hasattr(logger, 'debug'):
            return logging.getLogger(__name__)
        return logger

    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            log = get_logger()
            log.debug(f"Calling {func.__name__}")
            result = func(*args, **kwargs)
            log.debug(f"Finished {func.__name__}")
            return result
        return wrapper
    
    # Check if we're being called as @log_call or @log_call()
    if callable(logger):
        return decorator(logger)
    return decorator

# Set up logging when this module is imported
setup_logging()
==================================================

File: c:\GH\ras-commander\ras_commander\RasCmdr.py
==================================================
"""
RasCmdr - Execution operations for running HEC-RAS simulations

This module is part of the ras-commander library and uses a centralized logging configuration.

Logging Configuration:
- The logging is set up in the logging_config.py file.
- A @log_call decorator is available to automatically log function calls.
- Log levels: DEBUG, INFO, WARNING, ERROR, CRITICAL
- Logs are written to both console and a rotating file handler.
- The default log file is 'ras_commander.log' in the 'logs' directory.
- The default log level is INFO.

To use logging in this module:
1. Use the @log_call decorator for automatic function call logging.
2. For additional logging, use logger.[level]() calls (e.g., logger.info(), logger.debug()).

Example:
    @log_call
    def my_function():
        
        logger.debug("Additional debug information")
        # Function logic here
        
        
-----

All of the methods in this class are static and are designed to be used without instantiation.

List of Functions in RasCmdr:
- compute_plan()
- compute_parallel()
- compute_test_mode()
        
        
        
"""
import os
import subprocess
import shutil
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor, as_completed
from .RasPrj import ras, RasPrj, init_ras_project, get_ras_exe
from .RasPlan import RasPlan
from .RasGeo import RasGeo
from .RasUtils import RasUtils
import logging
import time
import queue
from threading import Thread, Lock
from typing import Union, List, Optional, Dict
from pathlib import Path
import shutil
import logging
from concurrent.futures import ThreadPoolExecutor, as_completed
from threading import Lock, Thread
from itertools import cycle
from ras_commander.RasPrj import RasPrj  # Ensure RasPrj is imported
from threading import Lock, Thread, current_thread
from concurrent.futures import ThreadPoolExecutor, as_completed
from itertools import cycle
from typing import Union, List, Optional, Dict
from .LoggingConfig import get_logger
from .Decorators import log_call
from .RasRemote import RasRemote # Add this import
from itertools import cycle       # Add this import

logger = get_logger(__name__)

# Module code starts here

# TODO: Future Enhancements
# 1. Alternate Run Mode for compute_plan and compute_parallel:
#    - Use Powershell to execute HEC-RAS command
#    - Hide RAS window and all child windows
#    - Note: This mode may prevent execution if the plan has a popup
#    - Intended for background runs or popup-free scenarios
#    - Limit to non-commercial use
#
# 2. Implement compute_plan_remote:
#    - Execute compute_plan on a remote machine via psexec
#    - Use keyring package for secure credential storage
#    - Implement psexec command for remote HEC-RAS execution
#    - Create remote_worker objects to store machine details:
#      (machine name, username, password, ras_exe_path, local folder path, etc.)
#    - Develop RasRemote class for remote_worker management and abstractions
#    - Implement compute_plan_remote in RasCmdr as a thin wrapper around RasRemote
#      (similar to existing compute_plan functions but for remote execution)


class RasCmdr:
    
    @staticmethod
    @log_call
    def compute_plan(
        plan_number,
        dest_folder=None, 
        ras_object=None,
        clear_geompre=False,
        num_cores=None,
        overwrite_dest=False
    ):
        """
        Execute a single HEC-RAS plan in a specified location.

        This function runs a HEC-RAS plan by launching the HEC-RAS executable through command line, 
        allowing for destination folder specification, core count control, and geometry preprocessor management.

        Args:
            plan_number (str, Path): The plan number to execute (e.g., "01", "02") or the full path to the plan file.
                Recommended to use two-digit strings for plan numbers for consistency (e.g., "01" instead of 1).
            dest_folder (str, Path, optional): Name of the folder or full path for computation.
                If a string is provided, it will be created in the same parent directory as the project folder.
                If a full path is provided, it will be used as is.
                If None, computation occurs in the original project folder, modifying the original project.
            ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.
                Useful when working with multiple projects simultaneously.
            clear_geompre (bool, optional): Whether to clear geometry preprocessor files. Defaults to False.
                Set to True when geometry has been modified to force recomputation of preprocessor files.
            num_cores (int, optional): Number of cores to use for the plan execution. 
                If None, the current setting in the plan file is not changed.
                Generally, 2-4 cores provides good performance for most models.
            overwrite_dest (bool, optional): If True, overwrite the destination folder if it exists. Defaults to False.
                Set to True to replace an existing destination folder with the same name.

        Returns:
            bool: True if the execution was successful, False otherwise.

        Raises:
            ValueError: If the specified dest_folder already exists and is not empty, and overwrite_dest is False.
            FileNotFoundError: If the plan file or project file cannot be found.
            PermissionError: If there are issues accessing or writing to the destination folder.
            subprocess.CalledProcessError: If the HEC-RAS execution fails.

        Examples:
            # Run a plan in the original project folder
            RasCmdr.compute_plan("01")
            
            # Run a plan in a separate folder
            RasCmdr.compute_plan("01", dest_folder="computation_folder")
            
            # Run a plan with a specific number of cores
            RasCmdr.compute_plan("01", num_cores=4)
            
            # Run a plan in a specific folder, overwriting if it exists
            RasCmdr.compute_plan("01", dest_folder="computation_folder", overwrite_dest=True)
            
            # Run a plan in a specific folder with multiple options
            RasCmdr.compute_plan(
                "01", 
                dest_folder="computation_folder",
                num_cores=2,
                clear_geompre=True,
                overwrite_dest=True
            )
            
        Notes:
            - For executing multiple plans, consider using compute_parallel() or compute_test_mode().
            - Setting num_cores appropriately is important for performance:
              * 1-2 cores: Highest efficiency per core, good for small models
              * 3-8 cores: Good balance for most models
              * >8 cores: May have diminishing returns due to overhead
            - This function updates the RAS object's dataframes (plan_df, geom_df, etc.) after execution.
        """
        try:
            ras_obj = ras_object if ras_object is not None else ras
            logger.info(f"Using ras_object with project folder: {ras_obj.project_folder}")
            ras_obj.check_initialized()
            
            if dest_folder is not None:
                dest_folder = Path(ras_obj.project_folder).parent / dest_folder if isinstance(dest_folder, str) else Path(dest_folder)
                
                if dest_folder.exists():
                    if overwrite_dest:
                        shutil.rmtree(dest_folder)
                        logger.info(f"Destination folder '{dest_folder}' exists. Overwriting as per overwrite_dest=True.")
                    elif any(dest_folder.iterdir()):
                        error_msg = f"Destination folder '{dest_folder}' exists and is not empty. Use overwrite_dest=True to overwrite."
                        logger.error(error_msg)
                        raise ValueError(error_msg)
                
                dest_folder.mkdir(parents=True, exist_ok=True)
                shutil.copytree(ras_obj.project_folder, dest_folder, dirs_exist_ok=True)
                logger.info(f"Copied project folder to destination: {dest_folder}")
                
                compute_ras = RasPrj()
                compute_ras.initialize(dest_folder, ras_obj.ras_exe_path)
                compute_prj_path = compute_ras.prj_file
            else:
                compute_ras = ras_obj
                compute_prj_path = ras_obj.prj_file

            # Determine the plan path
            compute_plan_path = Path(plan_number) if isinstance(plan_number, (str, Path)) and Path(plan_number).is_file() else RasPlan.get_plan_path(plan_number, compute_ras)

            if not compute_prj_path or not compute_plan_path:
                logger.error(f"Could not find project file or plan file for plan {plan_number}")
                return False

            # Clear geometry preprocessor files if requested
            if clear_geompre:
                try:
                    RasGeo.clear_geompre_files(compute_plan_path, ras_object=compute_ras)
                    logger.info(f"Cleared geometry preprocessor files for plan: {plan_number}")
                except Exception as e:
                    logger.error(f"Error clearing geometry preprocessor files for plan {plan_number}: {str(e)}")

            # Set the number of cores if specified
            if num_cores is not None:
                try:
                    RasPlan.set_num_cores(compute_plan_path, num_cores=num_cores, ras_object=compute_ras)
                    logger.info(f"Set number of cores to {num_cores} for plan: {plan_number}")
                except Exception as e:
                    logger.error(f"Error setting number of cores for plan {plan_number}: {str(e)}")

            # Prepare the command for HEC-RAS execution
            cmd = f'"{compute_ras.ras_exe_path}" -c "{compute_prj_path}" "{compute_plan_path}"'
            logger.info("Running HEC-RAS from the Command Line:")
            logger.info(f"Running command: {cmd}")

            # Execute the HEC-RAS command
            start_time = time.time()
            try:
                subprocess.run(cmd, check=True, shell=True, capture_output=True, text=True)
                end_time = time.time()
                run_time = end_time - start_time
                logger.info(f"HEC-RAS execution completed for plan: {plan_number}")
                logger.info(f"Total run time for plan {plan_number}: {run_time:.2f} seconds")
                return True
            except subprocess.CalledProcessError as e:
                end_time = time.time()
                run_time = end_time - start_time
                logger.error(f"Error running plan: {plan_number}")
                logger.error(f"Error message: {e.output}")
                logger.info(f"Total run time for plan {plan_number}: {run_time:.2f} seconds")
                return False
        except Exception as e:
            logger.critical(f"Error in compute_plan: {str(e)}")
            return False
        finally:
            # Update the RAS object's dataframes
            if ras_obj:
                ras_obj.plan_df = ras_obj.get_plan_entries()
                ras_obj.geom_df = ras_obj.get_geom_entries()
                ras_obj.flow_df = ras_obj.get_flow_entries()
                ras_obj.unsteady_df = ras_obj.get_unsteady_entries()
    


    @staticmethod
    @log_call
    def compute_parallel(
        plan_number: Union[str, List[str], None] = None,
        max_workers: int = 2,
        num_cores: int = 2,
        clear_geompre: bool = False,
        ras_object: Optional['RasPrj'] = None,
        dest_folder: Union[str, Path, None] = None,
        overwrite_dest: bool = False
    ) -> Dict[str, bool]:
        """
        Execute multiple HEC-RAS plans in parallel using multiple worker instances.

        This method creates separate worker folders for each parallel process, runs plans
        in those folders, and then consolidates results to a final destination folder.
        It's ideal for running independent plans simultaneously to make better use of system resources.

        Args:
            plan_number (Union[str, List[str], None]): Plan number(s) to compute. 
                If None, all plans in the project are computed.
                If string, only that plan will be computed.
                If list, all specified plans will be computed.
                Recommended to use two-digit strings for plan numbers for consistency (e.g., "01" instead of 1).
            max_workers (int): Maximum number of parallel workers (separate HEC-RAS instances).
                Each worker gets a separate folder with a copy of the project.
                Optimal value depends on CPU cores and memory available.
                A good starting point is: max_workers = floor(physical_cores / num_cores).
            num_cores (int): Number of cores to use per plan computation.
                Controls computational resources allocated to each individual HEC-RAS instance.
                For parallel execution, 2-4 cores per worker often provides the best balance.
            clear_geompre (bool): Whether to clear geometry preprocessor files before computation.
                Set to True when geometry has been modified to force recomputation.
            ras_object (Optional[RasPrj]): RAS project object. If None, uses global 'ras' instance.
                Useful when working with multiple projects simultaneously.
            dest_folder (Union[str, Path, None]): Destination folder for computed results.
                If None, creates a "[Computed]" folder adjacent to the project folder.
                If string, creates folder in the project's parent directory.
                If Path, uses the exact path provided.
            overwrite_dest (bool): Whether to overwrite existing destination folder.
                Set to True to replace an existing destination folder with the same name.

        Returns:
            Dict[str, bool]: Dictionary of plan numbers and their execution success status.
                Keys are plan numbers and values are boolean success indicators.

        Raises:
            ValueError: If the destination folder already exists, is not empty, and overwrite_dest is False.
            FileNotFoundError: If project files cannot be found.
            PermissionError: If there are issues accessing or writing to folders.
            RuntimeError: If worker initialization fails.

        Examples:
            # Run all plans in parallel with default settings
            RasCmdr.compute_parallel()
            
            # Run all plans with 4 workers, 2 cores per worker
            RasCmdr.compute_parallel(max_workers=4, num_cores=2)
            
            # Run specific plans in parallel
            RasCmdr.compute_parallel(plan_number=["01", "03"], max_workers=2)
            
            # Run all plans with dynamic worker allocation based on system resources
            import psutil
            physical_cores = psutil.cpu_count(logical=False)
            cores_per_worker = 2
            max_workers = max(1, physical_cores // cores_per_worker)
            RasCmdr.compute_parallel(max_workers=max_workers, num_cores=cores_per_worker)
            
            # Run all plans in a specific destination folder
            RasCmdr.compute_parallel(dest_folder="parallel_results", overwrite_dest=True)

        Notes:
            - Worker Assignment: Plans are assigned to workers in a round-robin fashion.
              For example, with 3 workers and 5 plans, assignment would be:
              Worker 1: Plans 1 & 4, Worker 2: Plans 2 & 5, Worker 3: Plan 3.
            
            - Resource Management: Each HEC-RAS instance (worker) typically requires:
              * 2-4 GB of RAM
              * 2-4 cores for optimal performance
            
            - When to use parallel vs. sequential:
              * Parallel: For independent plans, faster overall completion
              * Sequential: For dependent plans, consistent resource usage, easier debugging
            
            - The function creates worker folders during execution and consolidates results
              to the destination folder upon completion.
              
            - This function updates the RAS object's dataframes (plan_df, geom_df, etc.) after execution.
        """
        try:
            ras_obj = ras_object or ras
            ras_obj.check_initialized()

            project_folder = Path(ras_obj.project_folder)

            if dest_folder is not None:
                dest_folder_path = Path(dest_folder)
                if dest_folder_path.exists():
                    if overwrite_dest:
                        shutil.rmtree(dest_folder_path)
                        logger.info(f"Destination folder '{dest_folder_path}' exists. Overwriting as per overwrite_dest=True.")
                    elif any(dest_folder_path.iterdir()):
                        error_msg = f"Destination folder '{dest_folder_path}' exists and is not empty. Use overwrite_dest=True to overwrite."
                        logger.error(error_msg)
                        raise ValueError(error_msg)
                dest_folder_path.mkdir(parents=True, exist_ok=True)
                shutil.copytree(project_folder, dest_folder_path, dirs_exist_ok=True)
                logger.info(f"Copied project folder to destination: {dest_folder_path}")
                project_folder = dest_folder_path

            # Store filtered plan numbers separately to ensure only these are executed
            filtered_plan_numbers = []
            
            if plan_number:
                if isinstance(plan_number, str):
                    plan_number = [plan_number]
                ras_obj.plan_df = ras_obj.plan_df[ras_obj.plan_df['plan_number'].isin(plan_number)]
                filtered_plan_numbers = list(ras_obj.plan_df['plan_number'])
                logger.info(f"Filtered plans to execute: {filtered_plan_numbers}")
            else:
                filtered_plan_numbers = list(ras_obj.plan_df['plan_number'])

            num_plans = len(ras_obj.plan_df)
            max_workers = min(max_workers, num_plans) if num_plans > 0 else 1
            logger.info(f"Adjusted max_workers to {max_workers} based on the number of plans: {num_plans}")

            worker_ras_objects = {}
            for worker_id in range(1, max_workers + 1):
                worker_folder = project_folder.parent / f"{project_folder.name} [Worker {worker_id}]"
                if worker_folder.exists():
                    shutil.rmtree(worker_folder)
                    logger.info(f"Removed existing worker folder: {worker_folder}")
                shutil.copytree(project_folder, worker_folder)
                logger.info(f"Created worker folder: {worker_folder}")

                try:
                    worker_ras = RasPrj()
                    worker_ras_object = init_ras_project(
                        ras_project_folder=worker_folder,
                        ras_version=ras_obj.ras_exe_path,
                        ras_object=worker_ras
                    )
                    worker_ras_objects[worker_id] = worker_ras_object
                except Exception as e:
                    logger.critical(f"Failed to initialize RAS project for worker {worker_id}: {str(e)}")
                    worker_ras_objects[worker_id] = None

            # Explicitly use the filtered plan numbers for assignments
            worker_cycle = cycle(range(1, max_workers + 1))
            plan_assignments = [(next(worker_cycle), plan_num) for plan_num in filtered_plan_numbers]

            execution_results: Dict[str, bool] = {}

            with ThreadPoolExecutor(max_workers=max_workers) as executor:
                futures = [
                    executor.submit(
                        RasCmdr.compute_plan,
                        plan_num, 
                        ras_object=worker_ras_objects[worker_id], 
                        clear_geompre=clear_geompre,
                        num_cores=num_cores
                    )
                    for worker_id, plan_num in plan_assignments
                ]

                for future, (worker_id, plan_num) in zip(as_completed(futures), plan_assignments):
                    try:
                        success = future.result()
                        execution_results[plan_num] = success
                        logger.info(f"Plan {plan_num} executed in worker {worker_id}: {'Successful' if success else 'Failed'}")
                    except Exception as e:
                        execution_results[plan_num] = False
                        logger.error(f"Plan {plan_num} failed in worker {worker_id}: {str(e)}")

            final_dest_folder = dest_folder_path if dest_folder is not None else project_folder.parent / f"{project_folder.name} [Computed]"
            final_dest_folder.mkdir(parents=True, exist_ok=True)
            logger.info(f"Final destination for computed results: {final_dest_folder}")

            for worker_ras in worker_ras_objects.values():
                if worker_ras is None:
                    continue
                worker_folder = Path(worker_ras.project_folder)
                try:
                    # First, close any open resources in the worker RAS object
                    worker_ras.close() if hasattr(worker_ras, 'close') else None
                    
                    # Add a small delay to ensure file handles are released
                    time.sleep(1)
                    
                    # Move files with retry mechanism
                    max_retries = 3
                    for retry in range(max_retries):
                        try:
                            for item in worker_folder.iterdir():
                                dest_path = final_dest_folder / item.name
                                if dest_path.exists():
                                    if dest_path.is_dir():
                                        shutil.rmtree(dest_path)
                                    else:
                                        dest_path.unlink()
                                # Use copy instead of move for more reliability
                                if item.is_dir():
                                    shutil.copytree(item, dest_path)
                                else:
                                    shutil.copy2(item, dest_path)
                            
                            # Add another small delay before removal
                            time.sleep(1)
                            
                            # Try to remove the worker folder
                            if worker_folder.exists():
                                shutil.rmtree(worker_folder)
                            break  # If successful, break the retry loop
                            
                        except PermissionError as pe:
                            if retry == max_retries - 1:  # If this was the last retry
                                logger.error(f"Failed to move/remove files after {max_retries} attempts: {str(pe)}")
                                raise
                            time.sleep(2 ** retry)  # Exponential backoff
                            continue
                            
                except Exception as e:
                    logger.error(f"Error moving results from {worker_folder} to {final_dest_folder}: {str(e)}")

            try:
                final_dest_folder_ras = RasPrj()
                final_dest_folder_ras_obj = init_ras_project(
                    ras_project_folder=final_dest_folder, 
                    ras_version=ras_obj.ras_exe_path,
                    ras_object=final_dest_folder_ras
                )
                final_dest_folder_ras_obj.check_initialized()
            except Exception as e:
                logger.critical(f"Failed to initialize RasPrj for final destination: {str(e)}")

            logger.info("\nExecution Results:")
            for plan_num, success in execution_results.items():
                status = 'Successful' if success else 'Failed'
                logger.info(f"Plan {plan_num}: {status}")

            ras_obj = ras_object or ras
            ras_obj.plan_df = ras_obj.get_plan_entries()
            ras_obj.geom_df = ras_obj.get_geom_entries()
            ras_obj.flow_df = ras_obj.get_flow_entries()
            ras_obj.unsteady_df = ras_obj.get_unsteady_entries()

            return execution_results

        except Exception as e:
            logger.critical(f"Error in compute_parallel: {str(e)}")
            return {}

    @staticmethod
    @log_call
    def compute_test_mode(
        plan_number=None, 
        dest_folder_suffix="[Test]", 
        clear_geompre=False, 
        num_cores=None, 
        ras_object=None,
        overwrite_dest=False
    ):
        """
        Execute HEC-RAS plans sequentially in a separate test folder.

        This function creates a separate test folder, copies the project there, and executes
        the specified plans in sequential order. It's useful for batch processing plans that 
        need to be run in a specific order or when you want to ensure consistent resource usage.

        Args:
            plan_number (str, list[str], optional): Plan number or list of plan numbers to execute. 
                If None, all plans will be executed. Default is None.
                Recommended to use two-digit strings for plan numbers for consistency (e.g., "01" instead of 1).
            dest_folder_suffix (str, optional): Suffix to append to the test folder name. 
                Defaults to "[Test]".
                The test folder is always created in the project folder's parent directory.
            clear_geompre (bool, optional): Whether to clear geometry preprocessor files.
                Defaults to False.
                Set to True when geometry has been modified to force recomputation.
            num_cores (int, optional): Number of cores to use for each plan.
                If None, the current setting in the plan file is not changed. Default is None.
                For sequential execution, 4-8 cores often provides good performance.
            ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.
                Useful when working with multiple projects simultaneously.
            overwrite_dest (bool, optional): If True, overwrite the destination folder if it exists. 
                Defaults to False.
                Set to True to replace an existing test folder with the same name.

        Returns:
            Dict[str, bool]: Dictionary of plan numbers and their execution success status.
                Keys are plan numbers and values are boolean success indicators.

        Raises:
            ValueError: If the destination folder already exists, is not empty, and overwrite_dest is False.
            FileNotFoundError: If project files cannot be found.
            PermissionError: If there are issues accessing or writing to folders.

        Examples:
            # Run all plans sequentially
            RasCmdr.compute_test_mode()
            
            # Run a specific plan
            RasCmdr.compute_test_mode(plan_number="01")
            
            # Run multiple specific plans
            RasCmdr.compute_test_mode(plan_number=["01", "03", "05"])
            
            # Run plans with a custom folder suffix
            RasCmdr.compute_test_mode(dest_folder_suffix="[SequentialRun]")
            
            # Run plans with a specific number of cores
            RasCmdr.compute_test_mode(num_cores=4)
            
            # Run specific plans with multiple options
            RasCmdr.compute_test_mode(
                plan_number=["01", "02"],
                dest_folder_suffix="[SpecificSequential]",
                clear_geompre=True,
                num_cores=6,
                overwrite_dest=True
            )

        Notes:
            - This function was created to replicate the original HEC-RAS command line -test flag,
              which does not work in recent versions of HEC-RAS.
            
            - Key differences from other compute functions:
              * compute_plan: Runs a single plan, with option for destination folder
              * compute_parallel: Runs multiple plans simultaneously in worker folders
              * compute_test_mode: Runs multiple plans sequentially in a single test folder
            
            - Use cases:
              * Running plans in a specific order
              * Ensuring consistent resource usage
              * Easier debugging (one plan at a time)
              * Isolated test environment
            
            - Performance considerations:
              * Sequential execution is generally slower overall than parallel execution
              * Each plan gets consistent resource usage
              * Execution time scales linearly with the number of plans
            
            - This function updates the RAS object's dataframes (plan_df, geom_df, etc.) after execution.
        """
        try:
            ras_obj = ras_object or ras
            ras_obj.check_initialized()
            
            logger.info("Starting the compute_test_mode...")
               
            project_folder = Path(ras_obj.project_folder)

            if not project_folder.exists():
                logger.error(f"Project folder '{project_folder}' does not exist.")
                return {}

            compute_folder = project_folder.parent / f"{project_folder.name} {dest_folder_suffix}"
            logger.info(f"Creating the test folder: {compute_folder}...")

            if compute_folder.exists():
                if overwrite_dest:
                    shutil.rmtree(compute_folder)
                    logger.info(f"Compute folder '{compute_folder}' exists. Overwriting as per overwrite_dest=True.")
                elif any(compute_folder.iterdir()):
                    error_msg = (
                        f"Compute folder '{compute_folder}' exists and is not empty. "
                        "Use overwrite_dest=True to overwrite."
                    )
                    logger.error(error_msg)
                    raise ValueError(error_msg)

            try:
                shutil.copytree(project_folder, compute_folder)
                logger.info(f"Copied project folder to compute folder: {compute_folder}")
            except Exception as e:
                logger.critical(f"Error occurred while copying project folder: {str(e)}")
                return {}

            try:
                compute_ras = RasPrj()
                compute_ras.initialize(compute_folder, ras_obj.ras_exe_path)
                compute_prj_path = compute_ras.prj_file
                logger.info(f"Initialized RAS project in compute folder: {compute_prj_path}")
            except Exception as e:
                logger.critical(f"Error initializing RAS project in compute folder: {str(e)}")
                return {}

            if not compute_prj_path:
                logger.error("Project file not found.")
                return {}

            logger.info("Getting plan entries...")
            try:
                ras_compute_plan_entries = compute_ras.plan_df
                logger.info("Retrieved plan entries successfully.")
            except Exception as e:
                logger.critical(f"Error retrieving plan entries: {str(e)}")
                return {}

            if plan_number:
                if isinstance(plan_number, str):
                    plan_number = [plan_number]
                ras_compute_plan_entries = ras_compute_plan_entries[
                    ras_compute_plan_entries['plan_number'].isin(plan_number)
                ]
                logger.info(f"Filtered plans to execute: {plan_number}")

            execution_results = {}
            logger.info("Running selected plans sequentially...")
            for _, plan in ras_compute_plan_entries.iterrows():
                plan_number = plan["plan_number"]
                start_time = time.time()
                try:
                    success = RasCmdr.compute_plan(
                        plan_number,
                        ras_object=compute_ras,
                        clear_geompre=clear_geompre,
                        num_cores=num_cores
                    )
                    execution_results[plan_number] = success
                    if success:
                        logger.info(f"Successfully computed plan {plan_number}")
                    else:
                        logger.error(f"Failed to compute plan {plan_number}")
                except Exception as e:
                    execution_results[plan_number] = False
                    logger.error(f"Error computing plan {plan_number}: {str(e)}")
                finally:
                    end_time = time.time()
                    run_time = end_time - start_time
                    logger.info(f"Total run time for plan {plan_number}: {run_time:.2f} seconds")

            logger.info("All selected plans have been executed.")
            logger.info("compute_test_mode completed.")

            logger.info("\nExecution Results:")
            for plan_num, success in execution_results.items():
                status = 'Successful' if success else 'Failed'
                logger.info(f"Plan {plan_num}: {status}")

            ras_obj.plan_df = ras_obj.get_plan_entries()
            ras_obj.geom_df = ras_obj.get_geom_entries()
            ras_obj.flow_df = ras_obj.get_flow_entries()
            ras_obj.unsteady_df = ras_obj.get_unsteady_entries()

            return execution_results

        except Exception as e:
            logger.critical(f"Error in compute_test_mode: {str(e)}")
            return {}
        






        # ------ RAS REMOTE FUNCTIONS ------


    @staticmethod
    @log_call
    def compute_parallel_remote(
        plan_number: Union[str, List[str], None],
        remote_ras_list: List[RasRemote],
        ras_object: RasPrj, # Source project object
        num_cores: int = 2,
        clear_geompre: bool = False,
        dest_folder: Union[str, Path, None] = None,
        overwrite_dest: bool = False,
        safety_prefix: str = "RAS_Remote_"
    ) -> Dict[str, bool]:
        """
        Execute HEC-RAS plans in parallel across multiple remote (or local) machines.

        Args:
            plan_number: Plan number(s) to compute (e.g., "01", ["01", "02"]). If None, all plans are computed.
            remote_ras_list: List of initialized RasRemote instances representing target machines.
            ras_object: The RasPrj instance representing the source HEC-RAS project.
            num_cores: Number of cores per HEC-RAS instance on remote machines. Default 2.
            clear_geompre: Clear geom preprocessor files before running. Default False.
            dest_folder: Local destination folder for consolidated results. If None, creates
                         a "[ComputedRemote]" folder adjacent to the source project folder.
            overwrite_dest: Overwrite the destination folder if it exists. Default False.
            safety_prefix: Prefix for worker folders created on remote machines for safe cleanup.
                           Default "RAS_Remote_".

        Returns:
            Dict[str, bool]: Dictionary mapping plan numbers to execution success status.

        Raises:
            ValueError: If no remote targets are provided or if dest_folder handling fails.
            RuntimeError: If preparation or execution steps fail critically.

        Example:
            >>> remote1 = init_remote_ras("\\\\MACHINE1\\Share\\RasRuns", remote_root_path="C:\\Temp")
            >>> remote2 = init_remote_ras("C:\\LocalRasRuns") # Local target
            >>> source_proj = init_ras_project("/path/to/source")
            >>> results = RasCmdr.compute_parallel_remote(
            ...     plan_number=["01", "02", "03"],
            ...     remote_ras_list=[remote1, remote2],
            ...     ras_object=source_proj,
            ...     dest_folder="/path/to/consolidated_results",
            ...     overwrite_dest=True
            ... )
            >>> print(results)
            {'01': True, '02': True, '03': False}
        """
        if not remote_ras_list:
            logger.error("No remote RAS targets provided for parallel remote execution.")
            raise ValueError("remote_ras_list cannot be empty.")

        ras_obj = ras_object # Use the provided source object
        ras_obj.check_initialized()
        source_project_folder = Path(ras_obj.project_folder)
        source_project_name = ras_obj.project_name

        # --- Destination Folder Handling ---
        if dest_folder is None:
            final_dest_folder = source_project_folder.parent / f"{source_project_folder.name} [ComputedRemote]"
        else:
            final_dest_folder = Path(dest_folder)

        if final_dest_folder.exists():
            if overwrite_dest:
                logger.info(f"Destination folder '{final_dest_folder}' exists. Overwriting.")
                if not RasUtils.remove_with_retry(final_dest_folder, is_folder=True):
                     raise RuntimeError(f"Failed to remove existing destination folder: {final_dest_folder}")
            elif any(final_dest_folder.iterdir()):
                error_msg = f"Destination folder '{final_dest_folder}' exists and is not empty. Use overwrite_dest=True."
                logger.error(error_msg)
                raise ValueError(error_msg)
        try:
            final_dest_folder.mkdir(parents=True, exist_ok=True)
        except Exception as e:
             raise RuntimeError(f"Failed to create destination folder: {final_dest_folder}: {e}")

        logger.info(f"Final destination for results: {final_dest_folder}")

        # --- Filter Plans ---
        if plan_number:
            if isinstance(plan_number, str):
                plans_to_run = [plan_number]
            else:
                plans_to_run = list(plan_number)
            # Ensure plans exist in the source object's dataframe
            valid_plans_df = ras_obj.plan_df[ras_obj.plan_df['plan_number'].isin(plans_to_run)]
            plans_to_run = list(valid_plans_df['plan_number']) # Use only valid plans
            logger.info(f"Filtered plans to execute: {plans_to_run}")
        else:
            plans_to_run = list(ras_obj.plan_df['plan_number'])
            logger.info(f"Executing all {len(plans_to_run)} plans in the project.")

        if not plans_to_run:
             logger.warning("No valid plans selected for execution.")
             return {}

        # --- Prepare Remote Folders ---
        logger.info("Preparing remote worker folders...")
        prep_futures = {}
        # Prepare folders in parallel across machines
        with ThreadPoolExecutor(max_workers=len(remote_ras_list)) as executor:
             for remote_instance in remote_ras_list:
                  future = executor.submit(remote_instance.prepare_remote_folders, source_project_folder, safety_prefix)
                  prep_futures[future] = remote_instance.machine_name
             preparation_successful = True
             for future in as_completed(prep_futures):
                  machine_name = prep_futures[future]
                  try:
                      if not future.result():
                           logger.error(f"Failed to prepare remote folders on {machine_name}.")
                           preparation_successful = False # Mark failure but let others finish
                  except Exception as e:
                      logger.error(f"Error during remote folder preparation on {machine_name}: {e}")
                      preparation_successful = False
        if not preparation_successful:
             raise RuntimeError("Failed to prepare one or more remote targets. Aborting.")
        logger.info("Remote worker folders prepared successfully.")

        # --- Generate Batch Files ---
        logger.info("Generating remote batch files...")
        gen_futures = {}
        with ThreadPoolExecutor(max_workers=len(remote_ras_list)) as executor:
             for remote_instance in remote_ras_list:
                  future = executor.submit(remote_instance._generate_remote_batch_files, ras_obj, safety_prefix)
                  gen_futures[future] = remote_instance.machine_name
             batch_gen_successful = True
             for future in as_completed(gen_futures):
                  machine_name = gen_futures[future]
                  try:
                      if not future.result():
                           logger.error(f"Failed to generate batch files on {machine_name}.")
                           batch_gen_successful = False # Log error but maybe continue
                  except Exception as e:
                       logger.error(f"Error during remote batch file generation on {machine_name}: {e}")
                       batch_gen_successful = False
        if not batch_gen_successful:
             logger.warning("Failed to generate batch files on one or more remote targets. Execution might fail for some plans.")
        else:
            logger.info("Remote batch file generation completed successfully.")


        # --- Distribute and Execute Plans ---
        worker_slots = [] # List of (remote_instance, worker_id) tuples
        for remote_instance in remote_ras_list:
             for i in range(1, remote_instance.worker_count_per_machine + 1):
                  worker_slots.append((remote_instance, i))

        if not worker_slots:
            raise RuntimeError("No worker slots available for execution.")

        total_slots = len(worker_slots)
        logger.info(f"Total available worker slots across all machines: {total_slots}")

        slot_cycle = cycle(worker_slots)
        plan_assignments = {} # plan_num: (remote_instance, worker_id)
        for plan_num in plans_to_run:
             remote_instance, worker_id = next(slot_cycle)
             plan_assignments[plan_num] = (remote_instance, worker_id)
             logger.debug(f"Assigning plan {plan_num} to {remote_instance.machine_name} worker {worker_id}")

        execution_results: Dict[str, bool] = {}
        execution_lock = Lock() # Lock for updating shared results safely

        # Use total slots as max workers for execution phase
        max_concurrent_workers = total_slots
        logger.info(f"Starting parallel execution with up to {max_concurrent_workers} concurrent tasks.")

        with ThreadPoolExecutor(max_workers=max_concurrent_workers) as executor:
             futures = {
                  executor.submit(
                       remote_instance.compute_plan_remote,
                       plan_num,
                       worker_id,
                       ras_obj, # Pass source object for names/paths
                       safety_prefix,
                       clear_geompre,
                       num_cores
                  ): plan_num
                  for plan_num, (remote_instance, worker_id) in plan_assignments.items()
             }

             for future in as_completed(futures):
                  plan_num = futures[future]
                  remote_instance, worker_id = plan_assignments[plan_num]
                  try:
                      success = future.result()
                      with execution_lock:
                           execution_results[plan_num] = success
                      logger.info(f"Plan {plan_num} executed on {remote_instance.machine_name} worker {worker_id}: {'Successful' if success else 'Failed'}")
                  except Exception as e:
                       with execution_lock:
                           execution_results[plan_num] = False
                       logger.error(f"Plan {plan_num} on {remote_instance.machine_name} worker {worker_id} failed: {str(e)}")

        logger.info("Parallel remote execution phase completed.")

        # --- Collect Results ---
        logger.info("Collecting results from remote machines...")
        collect_futures = {}
        with ThreadPoolExecutor(max_workers=len(remote_ras_list)) as executor:
             for remote_instance in remote_ras_list:
                  future = executor.submit(remote_instance.collect_results, final_dest_folder, safety_prefix, source_project_name)
                  collect_futures[future] = remote_instance.machine_name
             for future in as_completed(collect_futures):
                  machine_name = collect_futures[future]
                  try:
                      if not future.result():
                           logger.error(f"Failed to fully collect results from {machine_name}.")
                           # Continue collecting from others
                  except Exception as e:
                       logger.error(f"Error during results collection from {machine_name}: {e}")
        logger.info("Results collection completed.")

        # --- Cleanup Remote Folders ---
        logger.info("Cleaning up remote worker folders...")
        cleanup_futures = {}
        with ThreadPoolExecutor(max_workers=len(remote_ras_list)) as executor:
             for remote_instance in remote_ras_list:
                  future = executor.submit(remote_instance.cleanup_remote_folders, safety_prefix, source_project_name)
                  cleanup_futures[future] = remote_instance.machine_name
             for future in as_completed(cleanup_futures):
                  machine_name = cleanup_futures[future]
                  try:
                      if not future.result():
                           logger.error(f"Failed to cleanup remote folders on {machine_name}.")
                           # Log but don't halt
                  except Exception as e:
                       logger.error(f"Error during remote cleanup on {machine_name}: {e}")
        logger.info("Remote cleanup completed.")

        # --- Final Summary ---
        logger.info("\n--- Remote Parallel Execution Summary ---")
        successful_plans = [p for p, s in execution_results.items() if s]
        failed_plans = [p for p, s in execution_results.items() if not s]
        logger.info(f"Total Plans Attempted: {len(plans_to_run)}")
        logger.info(f"Successful: {len(successful_plans)}")
        logger.info(f"Failed: {len(failed_plans)}")
        if failed_plans:
            logger.warning(f"Failed plans: {', '.join(failed_plans)}")
        logger.info(f"Results consolidated to: {final_dest_folder}")
        logger.info("--- End Summary ---")

        return execution_results        

==================================================

File: c:\GH\ras-commander\ras_commander\RasExamples.py
==================================================
"""
RasExamples - Manage and load HEC-RAS example projects for testing and development

This module is part of the ras-commander library and uses a centralized logging configuration.

Logging Configuration:
- The logging is set up in the logging_config.py file.
- A @log_call decorator is available to automatically log function calls.
- Log levels: DEBUG, INFO, WARNING, ERROR, CRITICAL
- Logs are written to both console and a rotating file handler.
- The default log file is 'ras_commander.log' in the 'logs' directory.
- The default log level is INFO.

To use logging in this module:
1. Use the @log_call decorator for automatic function call logging.
2. For additional logging, use logger.[level]() calls (e.g., logger.info(), logger.debug()).
3. Obtain the logger using: logger = logging.getLogger(__name__)

Example:
    @log_call
    def my_function():
        logger = logging.getLogger(__name__)
        logger.debug("Additional debug information")
        # Function logic here
        
        
-----

All of the methods in this class are static and are designed to be used without instantiation.

List of Functions in RasExamples:   
- get_example_projects()
- list_categories()
- list_projects()
- extract_project()
- is_project_extracted()
- clean_projects_directory()
        
"""
import os
import requests
import zipfile
import pandas as pd
from pathlib import Path
import shutil
from typing import Union, List
import csv
from datetime import datetime
import logging
import re
from tqdm import tqdm
from ras_commander import get_logger
from ras_commander.LoggingConfig import log_call

logger = get_logger(__name__)

class RasExamples:
    """
    A class for quickly loading HEC-RAS example projects for testing and development of ras-commander.
    All methods are class methods, so no initialization is required.
    """
    base_url = 'https://github.com/HydrologicEngineeringCenter/hec-downloads/releases/download/'
    valid_versions = [
            "6.6", "6.5", "6.4.1", "6.3.1", "6.3", "6.2", "6.1", "6.0",
            "5.0.7", "5.0.6", "5.0.5", "5.0.4", "5.0.3", "5.0.1", "5.0",
            "4.1", "4.0", "3.1.3", "3.1.2", "3.1.1", "3.0", "2.2"
        ]
    base_dir = Path.cwd()
    examples_dir = base_dir
    projects_dir = examples_dir / 'example_projects'
    csv_file_path = examples_dir / 'example_projects.csv'

    _folder_df = None
    _zip_file_path = None

    def __init__(self):
        """Initialize RasExamples and ensure data is loaded"""
        self._ensure_initialized()

    @property
    def folder_df(self):
        """Access the folder DataFrame"""
        self._ensure_initialized()
        return self._folder_df

    def _ensure_initialized(self):
        """Ensure the class is initialized with required data"""
        self.projects_dir.mkdir(parents=True, exist_ok=True)
        if self._folder_df is None:
            self._load_project_data()

    def _load_project_data(self):
        """Load project data from CSV if up-to-date, otherwise extract from zip."""
        logger.debug("Loading project data")
        self._find_zip_file()
        
        if not self._zip_file_path:
            logger.info("No example projects zip file found. Downloading...")
            self.get_example_projects()
        
        try:
            zip_modified_time = os.path.getmtime(self._zip_file_path)
        except FileNotFoundError:
            logger.error(f"Zip file not found at {self._zip_file_path}.")
            return
        
        if self.csv_file_path.exists():
            csv_modified_time = os.path.getmtime(self.csv_file_path)
            
            if csv_modified_time >= zip_modified_time:
                logger.info("Loading project data from CSV...")
                try:
                    self._folder_df = pd.read_csv(self.csv_file_path)
                    logger.info(f"Loaded {len(self._folder_df)} projects from CSV.")
                    return
                except Exception as e:
                    logger.error(f"Failed to read CSV file: {e}")
                    self._folder_df = None

        logger.info("Extracting folder structure from zip file...")
        self._extract_folder_structure()
        self._save_to_csv()

    @classmethod
    def extract_project(cls, project_names: Union[str, List[str]]) -> Union[Path, List[Path]]:
        """Extract one or more specific HEC-RAS projects from the zip file.
        
        Args:
            project_names: Single project name as string or list of project names
            
        Returns:
            Path: Single Path object if one project extracted
            List[Path]: List of Path objects if multiple projects extracted
        """
        logger.debug(f"Extracting projects: {project_names}")
        
        # Initialize if needed
        if cls._folder_df is None:
            cls._find_zip_file()
            if not cls._zip_file_path:
                logger.info("No example projects zip file found. Downloading...")
                cls.get_example_projects()
            cls._load_project_data()
        
        if isinstance(project_names, str):
            project_names = [project_names]

        extracted_paths = []

        for project_name in project_names:
            logger.info("----- RasExamples Extracting Project -----")
            logger.info(f"Extracting project '{project_name}'")
            project_path = cls.projects_dir

            if (project_path / project_name).exists():
                logger.info(f"Project '{project_name}' already exists. Deleting existing folder...")
                try:
                    shutil.rmtree(project_path / project_name)
                    logger.info(f"Existing folder for project '{project_name}' has been deleted.")
                except Exception as e:
                    logger.error(f"Failed to delete existing project folder '{project_name}': {e}")
                    continue

            project_info = cls._folder_df[cls._folder_df['Project'] == project_name]
            if project_info.empty:
                error_msg = f"Project '{project_name}' not found in the zip file."
                logger.error(error_msg)
                raise ValueError(error_msg)

            try:
                with zipfile.ZipFile(cls._zip_file_path, 'r') as zip_ref:
                    for file in zip_ref.namelist():
                        parts = Path(file).parts
                        if len(parts) > 1 and parts[1] == project_name:
                            relative_path = Path(*parts[1:])
                            extract_path = project_path / relative_path
                            if file.endswith('/'):
                                extract_path.mkdir(parents=True, exist_ok=True)
                            else:
                                extract_path.parent.mkdir(parents=True, exist_ok=True)
                                with zip_ref.open(file) as source, open(extract_path, "wb") as target:
                                    shutil.copyfileobj(source, target)

                logger.info(f"Successfully extracted project '{project_name}' to {project_path / project_name}")
                extracted_paths.append(project_path / project_name)
            except Exception as e:
                logger.error(f"An error occurred while extracting project '{project_name}': {str(e)}")

        # Return single path if only one project was extracted, otherwise return list
        return extracted_paths[0] if len(project_names) == 1 else extracted_paths

    @classmethod
    def _find_zip_file(cls):
        """Locate the example projects zip file in the examples directory."""
        for version in cls.valid_versions:
            potential_zip = cls.examples_dir / f"Example_Projects_{version.replace('.', '_')}.zip"
            if potential_zip.exists():
                cls._zip_file_path = potential_zip
                logger.info(f"Found zip file: {cls._zip_file_path}")
                break
        else:
            logger.warning("No existing example projects zip file found.")

    @classmethod
    def get_example_projects(cls, version_number='6.6'):
        """
        Download and extract HEC-RAS example projects for a specified version.
        """
        logger.info(f"Getting example projects for version {version_number}")
        if version_number not in cls.valid_versions:
            error_msg = f"Invalid version number. Valid versions are: {', '.join(cls.valid_versions)}"
            logger.error(error_msg)
            raise ValueError(error_msg)

        zip_url = f"{cls.base_url}1.0.33/Example_Projects_{version_number.replace('.', '_')}.zip"
        
        cls.examples_dir.mkdir(parents=True, exist_ok=True)
        
        cls._zip_file_path = cls.examples_dir / f"Example_Projects_{version_number.replace('.', '_')}.zip"

        if not cls._zip_file_path.exists():
            logger.info(f"Downloading HEC-RAS Example Projects from {zip_url}. \nThe file is over 400 MB, so it may take a few minutes to download....")
            try:
                response = requests.get(zip_url, stream=True)
                response.raise_for_status()
                with open(cls._zip_file_path, 'wb') as file:
                    shutil.copyfileobj(response.raw, file)
                logger.info(f"Downloaded to {cls._zip_file_path}")
            except requests.exceptions.RequestException as e:
                logger.error(f"Failed to download the zip file: {e}")
                raise
        else:
            logger.info("HEC-RAS Example Projects zip file already exists. Skipping download.")

        cls._load_project_data()
        return cls.projects_dir

    @classmethod
    def _load_project_data(cls):
        """Load project data from CSV if up-to-date, otherwise extract from zip."""
        logger.debug("Loading project data")
        
        try:
            zip_modified_time = os.path.getmtime(cls._zip_file_path)
        except FileNotFoundError:
            logger.error(f"Zip file not found at {cls._zip_file_path}.")
            return
        
        if cls.csv_file_path.exists():
            csv_modified_time = os.path.getmtime(cls.csv_file_path)
            
            if csv_modified_time >= zip_modified_time:
                logger.info("Loading project data from CSV...")
                try:
                    cls._folder_df = pd.read_csv(cls.csv_file_path)
                    logger.info(f"Loaded {len(cls._folder_df)} projects from CSV.")
                    return
                except Exception as e:
                    logger.error(f"Failed to read CSV file: {e}")
                    cls._folder_df = None

        logger.info("Extracting folder structure from zip file...")
        cls._extract_folder_structure()
        cls._save_to_csv()

    @classmethod
    def _extract_folder_structure(cls):
        """
        Extract folder structure from the zip file.

        Populates folder_df with category and project information.
        """
        folder_data = []
        try:
            with zipfile.ZipFile(cls._zip_file_path, 'r') as zip_ref:
                for file in zip_ref.namelist():
                    parts = Path(file).parts
                    if len(parts) > 1:
                        folder_data.append({
                            'Category': parts[0],
                            'Project': parts[1]
                        })
        
            cls._folder_df = pd.DataFrame(folder_data).drop_duplicates()
            logger.info(f"Extracted {len(cls._folder_df)} projects.")
            logger.debug(f"folder_df:\n{cls._folder_df}")
        except zipfile.BadZipFile:
            logger.error(f"The file {cls._zip_file_path} is not a valid zip file.")
            cls._folder_df = pd.DataFrame(columns=['Category', 'Project'])
        except Exception as e:
            logger.error(f"An error occurred while extracting the folder structure: {str(e)}")
            cls._folder_df = pd.DataFrame(columns=['Category', 'Project'])

    @classmethod
    def _save_to_csv(cls):
        """Save the extracted folder structure to CSV file."""
        if cls._folder_df is not None and not cls._folder_df.empty:
            try:
                cls._folder_df.to_csv(cls.csv_file_path, index=False)
                logger.info(f"Saved project data to {cls.csv_file_path}")
            except Exception as e:
                logger.error(f"Failed to save project data to CSV: {e}")
        else:
            logger.warning("No folder data to save to CSV.")

    @classmethod
    def list_categories(cls):
        """
        List all categories of example projects.
        """
        if cls._folder_df is None or 'Category' not in cls._folder_df.columns:
            logger.warning("No categories available. Make sure the zip file is properly loaded.")
            return []
        categories = cls._folder_df['Category'].unique()
        logger.info(f"Available categories: {', '.join(categories)}")
        return categories.tolist()

    @classmethod
    def list_projects(cls, category=None):
        """
        List all projects or projects in a specific category.
        """
        if cls._folder_df is None:
            logger.warning("No projects available. Make sure the zip file is properly loaded.")
            return []
        if category:
            projects = cls._folder_df[cls._folder_df['Category'] == category]['Project'].unique()
            logger.info(f"Projects in category '{category}': {', '.join(projects)}")
        else:
            projects = cls._folder_df['Project'].unique()
            logger.info(f"All available projects: {', '.join(projects)}")
        return projects.tolist()

    @classmethod
    def is_project_extracted(cls, project_name):
        """
        Check if a specific project is already extracted.
        """
        project_path = cls.projects_dir / project_name
        is_extracted = project_path.exists()
        logger.info(f"Project '{project_name}' extracted: {is_extracted}")
        return is_extracted

    @classmethod
    def clean_projects_directory(cls):
        """Remove all extracted projects from the example_projects directory."""
        logger.info(f"Cleaning projects directory: {cls.projects_dir}")
        if cls.projects_dir.exists():
            try:
                shutil.rmtree(cls.projects_dir)
                logger.info("All projects have been removed.")
            except Exception as e:
                logger.error(f"Failed to remove projects directory: {e}")
        else:
            logger.warning("Projects directory does not exist.")
        cls.projects_dir.mkdir(parents=True, exist_ok=True)
        logger.info("Projects directory cleaned and recreated.")

    @classmethod
    def download_fema_ble_model(cls, huc8, output_dir=None):
        """
        Download a FEMA Base Level Engineering (BLE) model for a given HUC8.

        Args:
            huc8 (str): The 8-digit Hydrologic Unit Code (HUC) for the desired watershed.
            output_dir (str, optional): The directory to save the downloaded files. If None, uses the current working directory.

        Returns:
            str: The path to the downloaded and extracted model directory.

        Note:
            This method downloads the BLE model from the FEMA website and extracts it to the specified directory.
        """
        # Method implementation...

    @classmethod
    def _make_safe_folder_name(cls, name: str) -> str:
        """
        Convert a string to a safe folder name by replacing unsafe characters with underscores.
        """
        safe_name = re.sub(r'[^a-zA-Z0-9_\-]', '_', name)
        logger.debug(f"Converted '{name}' to safe folder name '{safe_name}'")
        return safe_name

    @classmethod
    def _download_file_with_progress(cls, url: str, dest_folder: Path, file_size: int) -> Path:
        """
        Download a file from a URL to a specified destination folder with progress bar.
        """
        local_filename = dest_folder / url.split('/')[-1]
        try:
            with requests.get(url, stream=True) as r:
                r.raise_for_status()
                with open(local_filename, 'wb') as f, tqdm(
                    desc=local_filename.name,
                    total=file_size,
                    unit='iB',
                    unit_scale=True,
                    unit_divisor=1024,
                ) as progress_bar:
                    for chunk in r.iter_content(chunk_size=8192):
                        size = f.write(chunk)
                        progress_bar.update(size)
            logger.info(f"Successfully downloaded {url} to {local_filename}")
            return local_filename
        except requests.exceptions.RequestException as e:
            logger.error(f"Request failed for {url}: {e}")
            raise
        except Exception as e:
            logger.error(f"Failed to write file {local_filename}: {e}")
            raise

    @classmethod
    def _convert_size_to_bytes(cls, size_str: str) -> int:
        """
        Convert a human-readable file size to bytes.
        """
        units = {'B': 1, 'KB': 1024, 'MB': 1024**2, 'GB': 1024**3, 'TB': 1024**4}
        size_str = size_str.upper().replace(' ', '')
        if not re.match(r'^\d+(\.\d+)?[BKMGT]B?$', size_str):
            raise ValueError(f"Invalid size string: {size_str}")
        
        number, unit = float(re.findall(r'[\d\.]+', size_str)[0]), re.findall(r'[BKMGT]B?', size_str)[0]
        return int(number * units[unit])
==================================================

File: c:\GH\ras-commander\ras_commander\RasGeo.py
==================================================
"""
RasGeo - Operations for handling geometry files in HEC-RAS projects

This module is part of the ras-commander library and uses a centralized logging configuration.

Logging Configuration:
- The logging is set up in the logging_config.py file.
- A @log_call decorator is available to automatically log function calls.
- Log levels: DEBUG, INFO, WARNING, ERROR, CRITICAL
- Logs are written to both console and a rotating file handler.
- The default log file is 'ras_commander.log' in the 'logs' directory.
- The default log level is INFO.

To use logging in this module:
1. Use the @log_call decorator for automatic function call logging.
2. For additional logging, use logger.[level]() calls (e.g., logger.info(), logger.debug()).
3. Obtain the logger using: logger = logging.getLogger(__name__)

Example:
    @log_call
    def my_function():
        logger = logging.getLogger(__name__)
        logger.debug("Additional debug information")
        # Function logic here
        
        
All of the methods in this class are static and are designed to be used without instantiation.

List of Functions in RasGeo:
- clear_geompre_files(): Clears geometry preprocessor files for specified plan files
- get_mannings_baseoverrides(): Reads base Manning's n table from a geometry file
- get_mannings_regionoverrides(): Reads Manning's n region overrides from a geometry file
- set_mannings_baseoverrides(): Writes base Manning's n values to a geometry file
- set_mannings_regionoverrides(): Writes regional Manning's n overrides to a geometry file
"""
import os
from pathlib import Path
from typing import List, Union
import pandas as pd  # Added pandas import
from .RasPlan import RasPlan
from .RasPrj import ras
from .LoggingConfig import get_logger
from .Decorators import log_call

logger = get_logger(__name__)

class RasGeo:
    """
    A class for operations on HEC-RAS geometry files.
    """
    
    @staticmethod
    @log_call
    def clear_geompre_files(
        plan_files: Union[str, Path, List[Union[str, Path]]] = None,
        ras_object = None
    ) -> None:
        """
        Clear HEC-RAS geometry preprocessor files for specified plan files.

        Geometry preprocessor files (.c* extension) contain computed hydraulic properties derived
        from the geometry. These should be cleared when the geometry changes to ensure that
        HEC-RAS recomputes all hydraulic tables with updated geometry information.

        Limitations/Future Work:
        - This function only deletes the geometry preprocessor file.
        - It does not clear the IB tables.
        - It also does not clear geometry preprocessor tables from the geometry HDF.
        - All of these features will need to be added to reliably remove geometry preprocessor 
          files for 1D and 2D projects.
        
        Parameters:
            plan_files (Union[str, Path, List[Union[str, Path]]], optional): 
                Full path(s) to the HEC-RAS plan file(s) (.p*).
                If None, clears all plan files in the project directory.
            ras_object: An optional RAS object instance.
        
        Returns:
            None: The function deletes files and updates the ras object's geometry dataframe

        Example:
            # Clone a plan and geometry
            new_plan_number = RasPlan.clone_plan("01")
            new_geom_number = RasPlan.clone_geom("01")
            
            # Set the new geometry for the cloned plan
            RasPlan.set_geom(new_plan_number, new_geom_number)
            plan_path = RasPlan.get_plan_path(new_plan_number)
            
            # Clear geometry preprocessor files to ensure clean results
            RasGeo.clear_geompre_files(plan_path)
            print(f"Cleared geometry preprocessor files for plan {new_plan_number}")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        def clear_single_file(plan_file: Union[str, Path], ras_obj) -> None:
            plan_path = Path(plan_file)
            geom_preprocessor_suffix = '.c' + ''.join(plan_path.suffixes[1:]) if plan_path.suffixes else '.c'
            geom_preprocessor_file = plan_path.with_suffix(geom_preprocessor_suffix)
            if geom_preprocessor_file.exists():
                try:
                    geom_preprocessor_file.unlink()
                    logger.info(f"Deleted geometry preprocessor file: {geom_preprocessor_file}")
                except PermissionError:
                    logger.error(f"Permission denied: Unable to delete geometry preprocessor file: {geom_preprocessor_file}")
                    raise PermissionError(f"Unable to delete geometry preprocessor file: {geom_preprocessor_file}. Permission denied.")
                except OSError as e:
                    logger.error(f"Error deleting geometry preprocessor file: {geom_preprocessor_file}. {str(e)}")
                    raise OSError(f"Error deleting geometry preprocessor file: {geom_preprocessor_file}. {str(e)}")
            else:
                logger.warning(f"No geometry preprocessor file found for: {plan_file}")
        
        if plan_files is None:
            logger.info("Clearing all geometry preprocessor files in the project directory.")
            plan_files_to_clear = list(ras_obj.project_folder.glob(r'*.p*'))
        elif isinstance(plan_files, (str, Path)):
            plan_files_to_clear = [plan_files]
            logger.info(f"Clearing geometry preprocessor file for single plan: {plan_files}")
        elif isinstance(plan_files, list):
            plan_files_to_clear = plan_files
            logger.info(f"Clearing geometry preprocessor files for multiple plans: {plan_files}")
        else:
            logger.error("Invalid input type for plan_files.")
            raise ValueError("Invalid input. Please provide a string, Path, list of paths, or None.")
        
        for plan_file in plan_files_to_clear:
            clear_single_file(plan_file, ras_obj)
        
        try:
            ras_obj.geom_df = ras_obj.get_geom_entries()
            logger.info("Geometry dataframe updated successfully.")
        except Exception as e:
            logger.error(f"Failed to update geometry dataframe: {str(e)}")
            raise

    @staticmethod
    @log_call
    def get_mannings_baseoverrides(geom_file_path):
        """
        Reads the base Manning's n table from a HEC-RAS geometry file.
        
        Parameters:
        -----------
        geom_file_path : str or Path
            Path to the geometry file (.g##)
        
        Returns:
        --------
        pandas.DataFrame
            DataFrame with Table Number, Land Cover Name, and Base Manning's n Value
            
        Example:
        --------
        >>> geom_path = RasPlan.get_geom_path("01")
        >>> mannings_df = RasGeo.get_mannings_baseoverrides(geom_path)
        >>> print(mannings_df)
        """
        import pandas as pd
        from pathlib import Path
        
        # Convert to Path object if it's a string
        if isinstance(geom_file_path, str):
            geom_file_path = Path(geom_file_path)
        
        base_table_rows = []
        table_number = None
        
        # Read the geometry file
        with open(geom_file_path, 'r') as f:
            lines = f.readlines()
        
        # Parse the file
        reading_base_table = False
        for line in lines:
            line = line.strip()
            
            # Find the table number
            if line.startswith('LCMann Table='):
                table_number = line.split('=')[1]
                reading_base_table = True
                continue
            
            # Stop reading when we hit a line without a comma or starting with LCMann
            if reading_base_table and (not ',' in line or line.startswith('LCMann')):
                reading_base_table = False
                continue
                
            # Parse data rows in base table
            if reading_base_table and ',' in line:
                # Check if there are multiple commas in the line
                parts = line.split(',')
                if len(parts) > 2:
                    # Handle case where land cover name contains commas
                    name = ','.join(parts[:-1])
                    value = parts[-1]
                else:
                    name, value = parts
                
                try:
                    base_table_rows.append([table_number, name, float(value)])
                except ValueError:
                    # Log the error and continue
                    print(f"Error parsing line: {line}")
                    continue
        
        # Create DataFrame
        if base_table_rows:
            df = pd.DataFrame(base_table_rows, columns=['Table Number', 'Land Cover Name', 'Base Manning\'s n Value'])
            return df
        else:
            return pd.DataFrame(columns=['Table Number', 'Land Cover Name', 'Base Manning\'s n Value'])


    @staticmethod
    @log_call
    def get_mannings_regionoverrides(geom_file_path):
        """
        Reads the Manning's n region overrides from a HEC-RAS geometry file.
        
        Parameters:
        -----------
        geom_file_path : str or Path
            Path to the geometry file (.g##)
        
        Returns:
        --------
        pandas.DataFrame
            DataFrame with Table Number, Land Cover Name, MainChannel value, and Region Name
            
        Example:
        --------
        >>> geom_path = RasPlan.get_geom_path("01")
        >>> region_overrides_df = RasGeo.get_mannings_regionoverrides(geom_path)
        >>> print(region_overrides_df)
        """
        import pandas as pd
        from pathlib import Path
        
        # Convert to Path object if it's a string
        if isinstance(geom_file_path, str):
            geom_file_path = Path(geom_file_path)
        
        region_rows = []
        current_region = None
        current_table = None
        
        # Read the geometry file
        with open(geom_file_path, 'r') as f:
            lines = f.readlines()
        
        # Parse the file
        reading_region_table = False
        for line in lines:
            line = line.strip()
            
            # Find region name
            if line.startswith('LCMann Region Name='):
                current_region = line.split('=')[1]
                continue
                
            # Find region table number
            if line.startswith('LCMann Region Table='):
                current_table = line.split('=')[1]
                reading_region_table = True
                continue
            
            # Stop reading when we hit a line without a comma or starting with LCMann
            if reading_region_table and (not ',' in line or line.startswith('LCMann')):
                reading_region_table = False
                continue
                
            # Parse data rows in region table
            if reading_region_table and ',' in line and current_region is not None:
                # Check if there are multiple commas in the line
                parts = line.split(',')
                if len(parts) > 2:
                    # Handle case where land cover name contains commas
                    name = ','.join(parts[:-1])
                    value = parts[-1]
                else:
                    name, value = parts
                
                try:
                    region_rows.append([current_table, name, float(value), current_region])
                except ValueError:
                    # Log the error and continue
                    print(f"Error parsing line: {line}")
                    continue
        
        # Create DataFrame
        if region_rows:
            return pd.DataFrame(region_rows, columns=['Table Number', 'Land Cover Name', 'MainChannel', 'Region Name'])
        else:
            return pd.DataFrame(columns=['Table Number', 'Land Cover Name', 'MainChannel', 'Region Name'])
        


    @staticmethod
    @log_call
    def set_mannings_baseoverrides(geom_file_path, mannings_data):
        """
        Writes base Manning's n values to a HEC-RAS geometry file.
        
        Parameters:
        -----------
        geom_file_path : str or Path
            Path to the geometry file (.g##)
        mannings_data : DataFrame
            DataFrame with columns 'Table Number', 'Land Cover Name', and 'Base Manning\'s n Value'
        
        Returns:
        --------
        bool
            True if successful
        """
        from pathlib import Path
        import shutil
        import pandas as pd
        import datetime
        
        # Convert to Path object if it's a string
        if isinstance(geom_file_path, str):
            geom_file_path = Path(geom_file_path)
        
        # Create backup
        backup_path = geom_file_path.with_suffix(geom_file_path.suffix + '.bak')
        shutil.copy2(geom_file_path, backup_path)
        
        # Read the entire file
        with open(geom_file_path, 'r') as f:
            lines = f.readlines()
        
        # Find the Manning's table section
        table_number = str(mannings_data['Table Number'].iloc[0])
        start_idx = None
        end_idx = None
        
        for i, line in enumerate(lines):
            if line.strip() == f"LCMann Table={table_number}":
                start_idx = i
                # Find the end of this table (next LCMann directive or end of file)
                for j in range(i+1, len(lines)):
                    if lines[j].strip().startswith('LCMann'):
                        end_idx = j
                        break
                if end_idx is None:  # If we reached the end of the file
                    end_idx = len(lines)
                break
        
        if start_idx is None:
            raise ValueError(f"Manning's table {table_number} not found in the geometry file")
        
        # Extract existing land cover names from the file
        existing_landcover = []
        for i in range(start_idx+1, end_idx):
            line = lines[i].strip()
            if ',' in line:
                parts = line.split(',')
                if len(parts) > 2:
                    # Handle case where land cover name contains commas
                    name = ','.join(parts[:-1])
                else:
                    name = parts[0]
                existing_landcover.append(name)
        
        # Check if all land cover names in the dataframe match the file
        df_landcover = mannings_data['Land Cover Name'].tolist()
        if set(df_landcover) != set(existing_landcover):
            missing = set(existing_landcover) - set(df_landcover)
            extra = set(df_landcover) - set(existing_landcover)
            error_msg = "Land cover names don't match between file and dataframe.\n"
            if missing:
                error_msg += f"Missing in dataframe: {missing}\n"
            if extra:
                error_msg += f"Extra in dataframe: {extra}"
            raise ValueError(error_msg)
        
        # Create new content for the table
        new_content = [f"LCMann Table={table_number}\n"]
        
        # Add base table entries
        for _, row in mannings_data.iterrows():
            new_content.append(f"{row['Land Cover Name']},{row['Base Manning\'s n Value']}\n")
        
        # Replace the section in the original file
        updated_lines = lines[:start_idx] + new_content + lines[end_idx:]
        
        # Update the time stamp
        current_time = datetime.datetime.now().strftime("%b/%d/%Y %H:%M:%S")
        for i, line in enumerate(updated_lines):
            if line.strip().startswith("LCMann Time="):
                updated_lines[i] = f"LCMann Time={current_time}\n"
                break
        
        # Write the updated file
        with open(geom_file_path, 'w') as f:
            f.writelines(updated_lines)
        
        return True







    @staticmethod
    @log_call
    def set_mannings_regionoverrides(geom_file_path, mannings_data):
        """
        Writes regional Manning's n overrides to a HEC-RAS geometry file.
        
        Parameters:
        -----------
        geom_file_path : str or Path
            Path to the geometry file (.g##)
        mannings_data : DataFrame
            DataFrame with columns 'Table Number', 'Land Cover Name', 'MainChannel', and 'Region Name'
        
        Returns:
        --------
        bool
            True if successful
        """
        from pathlib import Path
        import shutil
        import pandas as pd
        import datetime
        
        # Convert to Path object if it's a string
        if isinstance(geom_file_path, str):
            geom_file_path = Path(geom_file_path)
        
        # Create backup
        backup_path = geom_file_path.with_suffix(geom_file_path.suffix + '.bak')
        shutil.copy2(geom_file_path, backup_path)
        
        # Read the entire file
        with open(geom_file_path, 'r') as f:
            lines = f.readlines()
        
        # Group data by region
        regions = mannings_data.groupby('Region Name')
        
        # Find the Manning's region sections
        for region_name, region_data in regions:
            table_number = str(region_data['Table Number'].iloc[0])
            
            # Find the region section
            region_start_idx = None
            region_table_idx = None
            region_end_idx = None
            region_polygon_line = None
            
            for i, line in enumerate(lines):
                if line.strip() == f"LCMann Region Name={region_name}":
                    region_start_idx = i
                
                if region_start_idx is not None and line.strip() == f"LCMann Region Table={table_number}":
                    region_table_idx = i
                    
                    # Find the end of this region (next LCMann Region or end of file)
                    for j in range(i+1, len(lines)):
                        if lines[j].strip().startswith('LCMann Region Name=') or lines[j].strip().startswith('LCMann Region Polygon='):
                            if lines[j].strip().startswith('LCMann Region Polygon='):
                                region_polygon_line = lines[j]
                            region_end_idx = j
                            break
                    if region_end_idx is None:  # If we reached the end of the file
                        region_end_idx = len(lines)
                    break
            
            if region_start_idx is None or region_table_idx is None:
                raise ValueError(f"Region {region_name} with table {table_number} not found in the geometry file")
            
            # Extract existing land cover names from the file
            existing_landcover = []
            for i in range(region_table_idx+1, region_end_idx):
                line = lines[i].strip()
                if ',' in line and not line.startswith('LCMann'):
                    parts = line.split(',')
                    if len(parts) > 2:
                        # Handle case where land cover name contains commas
                        name = ','.join(parts[:-1])
                    else:
                        name = parts[0]
                    existing_landcover.append(name)
            
            # Check if all land cover names in the dataframe match the file
            df_landcover = region_data['Land Cover Name'].tolist()
            if set(df_landcover) != set(existing_landcover):
                missing = set(existing_landcover) - set(df_landcover)
                extra = set(df_landcover) - set(existing_landcover)
                error_msg = f"Land cover names for region {region_name} don't match between file and dataframe.\n"
                if missing:
                    error_msg += f"Missing in dataframe: {missing}\n"
                if extra:
                    error_msg += f"Extra in dataframe: {extra}"
                raise ValueError(error_msg)
            
            # Create new content for the region
            new_content = [
                f"LCMann Region Name={region_name}\n",
                f"LCMann Region Table={table_number}\n"
            ]
            
            # Add region table entries
            for _, row in region_data.iterrows():
                new_content.append(f"{row['Land Cover Name']},{row['MainChannel']}\n")
            
            # Add the region polygon line if it exists
            if region_polygon_line:
                new_content.append(region_polygon_line)
            
            # Replace the section in the original file
            if region_polygon_line:
                # If we have a polygon line, include it in the replacement
                updated_lines = lines[:region_start_idx] + new_content + lines[region_end_idx+1:]
            else:
                # If no polygon line, just replace up to the end index
                updated_lines = lines[:region_start_idx] + new_content + lines[region_end_idx:]
            
            # Update the lines for the next region
            lines = updated_lines
        
        # Update the time stamp
        current_time = datetime.datetime.now().strftime("%b/%d/%Y %H:%M:%S")
        for i, line in enumerate(lines):
            if line.strip().startswith("LCMann Region Time="):
                lines[i] = f"LCMann Region Time={current_time}\n"
                break
        
        # Write the updated file
        with open(geom_file_path, 'w') as f:
            f.writelines(lines)
        
        return True
==================================================

File: c:\GH\ras-commander\ras_commander\RasMap.py
==================================================
"""
RasMap - Parses HEC-RAS mapper configuration files (.rasmap)

This module provides functionality to extract and organize information from 
HEC-RAS mapper configuration files, including paths to terrain, soil, and land cover data.

This module is part of the ras-commander library and uses a centralized logging configuration.

Logging Configuration:
- The logging is set up in the logging_config.py file.
- A @log_call decorator is available to automatically log function calls.
- Log levels: DEBUG, INFO, WARNING, ERROR, CRITICAL

Classes:
    RasMap: Class for parsing and accessing HEC-RAS mapper configuration.
"""

import os
import re
import xml.etree.ElementTree as ET
from pathlib import Path
import pandas as pd
from typing import Union, Optional, Dict, List, Any

from .RasPrj import ras
from .LoggingConfig import get_logger
from .Decorators import log_call

logger = get_logger(__name__)

class RasMap:
    """
    Class for parsing and accessing information from HEC-RAS mapper configuration files (.rasmap).
    
    This class provides methods to extract paths to terrain, soil, land cover data,
    and various project settings from the .rasmap file associated with a HEC-RAS project.
    """
    
    @staticmethod
    @log_call
    def parse_rasmap(rasmap_path: Union[str, Path], ras_object=None) -> pd.DataFrame:
        """
        Parse a .rasmap file and extract relevant information.
        
        Args:
            rasmap_path (Union[str, Path]): Path to the .rasmap file.
            ras_object: Optional RAS object instance.
            
        Returns:
            pd.DataFrame: DataFrame containing extracted information from the .rasmap file.
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        rasmap_path = Path(rasmap_path)
        if not rasmap_path.exists():
            logger.error(f"RASMapper file not found: {rasmap_path}")
            # Create a single row DataFrame with all empty values
            return pd.DataFrame({
                'projection_path': [None],
                'profile_lines_path': [[]],
                'soil_layer_path': [[]],
                'infiltration_hdf_path': [[]],
                'landcover_hdf_path': [[]],
                'terrain_hdf_path': [[]],
                'current_settings': [{}]
            })
        
        try:
            # Initialize data for the DataFrame - just one row with lists
            data = {
                'projection_path': [None],
                'profile_lines_path': [[]],
                'soil_layer_path': [[]],
                'infiltration_hdf_path': [[]],
                'landcover_hdf_path': [[]],
                'terrain_hdf_path': [[]],
                'current_settings': [{}]
            }
            
            # Read the file content
            with open(rasmap_path, 'r', encoding='utf-8') as f:
                xml_content = f.read()
            
            # Check if it's a valid XML file
            if not xml_content.strip().startswith('<'):
                logger.error(f"File does not appear to be valid XML: {rasmap_path}")
                return pd.DataFrame(data)
            
            # Parse the XML file
            try:
                tree = ET.parse(rasmap_path)
                root = tree.getroot()
            except ET.ParseError as e:
                logger.error(f"Error parsing XML in {rasmap_path}: {e}")
                return pd.DataFrame(data)
            
            # Helper function to convert relative paths to absolute paths
            def to_absolute_path(relative_path: str) -> str:
                if not relative_path:
                    return None
                # Remove any leading .\ or ./
                relative_path = relative_path.lstrip('.\\').lstrip('./')
                # Convert to absolute path relative to project folder
                return str(ras_obj.project_folder / relative_path)
            
            # Extract projection path
            try:
                projection_elem = root.find(".//RASProjectionFilename")
                if projection_elem is not None and 'Filename' in projection_elem.attrib:
                    data['projection_path'][0] = to_absolute_path(projection_elem.attrib['Filename'])
            except Exception as e:
                logger.warning(f"Error extracting projection path: {e}")
            
            # Extract profile lines path
            try:
                profile_lines_elem = root.find(".//Features/Layer[@Name='Profile Lines']")
                if profile_lines_elem is not None and 'Filename' in profile_lines_elem.attrib:
                    data['profile_lines_path'][0].append(to_absolute_path(profile_lines_elem.attrib['Filename']))
            except Exception as e:
                logger.warning(f"Error extracting profile lines path: {e}")
            
            # Extract soil layer paths
            try:
                soil_layers = root.findall(".//Layer[@Name='Hydrologic Soil Groups']")
                for layer in soil_layers:
                    if 'Filename' in layer.attrib:
                        data['soil_layer_path'][0].append(to_absolute_path(layer.attrib['Filename']))
            except Exception as e:
                logger.warning(f"Error extracting soil layer paths: {e}")
            
            # Extract infiltration HDF paths
            try:
                infiltration_layers = root.findall(".//Layer[@Name='Infiltration']")
                for layer in infiltration_layers:
                    if 'Filename' in layer.attrib:
                        data['infiltration_hdf_path'][0].append(to_absolute_path(layer.attrib['Filename']))
            except Exception as e:
                logger.warning(f"Error extracting infiltration HDF paths: {e}")
            
            # Extract landcover HDF paths
            try:
                landcover_layers = root.findall(".//Layer[@Name='LandCover']")
                for layer in landcover_layers:
                    if 'Filename' in layer.attrib:
                        data['landcover_hdf_path'][0].append(to_absolute_path(layer.attrib['Filename']))
            except Exception as e:
                logger.warning(f"Error extracting landcover HDF paths: {e}")
            
            # Extract terrain HDF paths
            try:
                terrain_layers = root.findall(".//Terrains/Layer")
                for layer in terrain_layers:
                    if 'Filename' in layer.attrib:
                        data['terrain_hdf_path'][0].append(to_absolute_path(layer.attrib['Filename']))
            except Exception as e:
                logger.warning(f"Error extracting terrain HDF paths: {e}")
            
            # Extract current settings
            current_settings = {}
            try:
                settings_elem = root.find(".//CurrentSettings")
                if settings_elem is not None:
                    # Extract ProjectSettings
                    project_settings_elem = settings_elem.find("ProjectSettings")
                    if project_settings_elem is not None:
                        for child in project_settings_elem:
                            current_settings[child.tag] = child.text
                    
                    # Extract Folders
                    folders_elem = settings_elem.find("Folders")
                    if folders_elem is not None:
                        for child in folders_elem:
                            current_settings[child.tag] = child.text
                            
                data['current_settings'][0] = current_settings
            except Exception as e:
                logger.warning(f"Error extracting current settings: {e}")
            
            # Create DataFrame
            df = pd.DataFrame(data)
            logger.info(f"Successfully parsed RASMapper file: {rasmap_path}")
            return df
            
        except Exception as e:
            logger.error(f"Unexpected error processing RASMapper file {rasmap_path}: {e}")
            # Create a single row DataFrame with all empty values
            return pd.DataFrame({
                'projection_path': [None],
                'profile_lines_path': [[]],
                'soil_layer_path': [[]],
                'infiltration_hdf_path': [[]],
                'landcover_hdf_path': [[]],
                'terrain_hdf_path': [[]],
                'current_settings': [{}]
            })
    
    @staticmethod
    @log_call
    def get_rasmap_path(ras_object=None) -> Optional[Path]:
        """
        Get the path to the .rasmap file based on the current project.
        
        Args:
            ras_object: Optional RAS object instance.
            
        Returns:
            Optional[Path]: Path to the .rasmap file if found, None otherwise.
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        project_name = ras_obj.project_name
        project_folder = ras_obj.project_folder
        rasmap_path = project_folder / f"{project_name}.rasmap"
        
        if not rasmap_path.exists():
            logger.warning(f"RASMapper file not found: {rasmap_path}")
            return None
        
        return rasmap_path
    
    @staticmethod
    @log_call
    def initialize_rasmap_df(ras_object=None) -> pd.DataFrame:
        """
        Initialize the rasmap_df as part of project initialization.
        
        Args:
            ras_object: Optional RAS object instance.
            
        Returns:
            pd.DataFrame: DataFrame containing information from the .rasmap file.
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        rasmap_path = RasMap.get_rasmap_path(ras_obj)
        if rasmap_path is None:
            logger.warning("No .rasmap file found for this project. Creating empty rasmap_df.")
            # Create a single row DataFrame with all empty values
            return pd.DataFrame({
                'projection_path': [None],
                'profile_lines_path': [[]],
                'soil_layer_path': [[]],
                'infiltration_hdf_path': [[]],
                'landcover_hdf_path': [[]],
                'terrain_hdf_path': [[]],
                'current_settings': [{}]
            })
        
        return RasMap.parse_rasmap(rasmap_path, ras_obj)
==================================================

File: c:\GH\ras-commander\ras_commander\RasPlan.py
==================================================
"""
RasPlan - Operations for handling plan files in HEC-RAS projects

This module is part of the ras-commander library and uses a centralized logging configuration.

Logging Configuration:
- The logging is set up in the logging_config.py file.
- A @log_call decorator is available to automatically log function calls.
- Log levels: DEBUG, INFO, WARNING, ERROR, CRITICAL
- Logs are written to both console and a rotating file handler.
- The default log file is 'ras_commander.log' in the 'logs' directory.
- The default log level is INFO.

To use logging in this module:
1. Use the @log_call decorator for automatic function call logging.
2. For additional logging, use logger.[level]() calls (e.g., logger.info(), logger.debug()).
3. Obtain the logger using: logger = logging.getLogger(__name__)

Example:
    @log_call
    def my_function():
        logger = logging.getLogger(__name__)
        logger.debug("Additional debug information")
        # Function logic here
        
        
-----

All of the methods in this class are static and are designed to be used without instantiation.

List of Functions in RasPlan:
- set_geom(): Set the geometry for a specified plan
- set_steady(): Apply a steady flow file to a plan file
- set_unsteady(): Apply an unsteady flow file to a plan file
- set_num_cores(): Update the maximum number of cores to use
- set_geom_preprocessor(): Update geometry preprocessor settings
- clone_plan(): Create a new plan file based on a template
- clone_unsteady(): Copy unsteady flow files from a template
- clone_steady(): Copy steady flow files from a template
- clone_geom(): Copy geometry files from a template
- get_next_number(): Determine the next available number from a list
- get_plan_value(): Retrieve a specific value from a plan file
- get_results_path(): Get the results file path for a plan
- get_plan_path(): Get the full path for a plan number
- get_flow_path(): Get the full path for a flow number
- get_unsteady_path(): Get the full path for an unsteady number
- get_geom_path(): Get the full path for a geometry number
- update_run_flags(): Update various run flags in a plan file
- update_plan_intervals(): Update computation and output intervals
- update_plan_description(): Update the description in a plan file
- read_plan_description(): Read the description from a plan file
- update_simulation_date(): Update simulation start and end dates
- get_shortid(): Get the Short Identifier from a plan file
- set_shortid(): Set the Short Identifier in a plan file
- get_plan_title(): Get the Plan Title from a plan file
- set_plan_title(): Set the Plan Title in a plan file


        
"""
import os
import re
import logging
from pathlib import Path
import shutil
from typing import Union, Optional
import pandas as pd
from .RasPrj import RasPrj, ras
from .RasUtils import RasUtils
from pathlib import Path
from typing import Union, Any
from datetime import datetime

import logging
import re
from .LoggingConfig import get_logger
from .Decorators import log_call

logger = get_logger(__name__)

class RasPlan:
    """
    A class for operations on HEC-RAS plan files.
    """
    
    @staticmethod
    @log_call
    def set_geom(plan_number: Union[str, int], new_geom: Union[str, int], ras_object=None) -> pd.DataFrame:
        """
        Set the geometry for the specified plan by updating only the plan file.

        Parameters:
            plan_number (Union[str, int]): The plan number to update.
            new_geom (Union[str, int]): The new geometry number to set.
            ras_object: An optional RAS object instance.

        Returns:
            pd.DataFrame: The updated geometry DataFrame.

        Example:
            updated_geom_df = RasPlan.set_geom('02', '03')

        Note:
            This function updates the Geom File= line in the plan file and 
            updates the ras object's dataframes without modifying the PRJ file.
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        plan_number = str(plan_number).zfill(2)
        new_geom = str(new_geom).zfill(2)

        # Update all dataframes
        ras_obj.plan_df = ras_obj.get_plan_entries()
        ras_obj.geom_df = ras_obj.get_geom_entries()
        
        if new_geom not in ras_obj.geom_df['geom_number'].values:
            logger.error(f"Geometry {new_geom} not found in project.")
            raise ValueError(f"Geometry {new_geom} not found in project.")

        # Get the plan file path
        plan_file_path = ras_obj.project_folder / f"{ras_obj.project_name}.p{plan_number}"
        if not plan_file_path.exists():
            logger.error(f"Plan file not found: {plan_file_path}")
            raise ValueError(f"Plan file not found: {plan_file_path}")
        
        # Read the plan file and update the Geom File line
        try:
            with open(plan_file_path, 'r') as file:
                lines = file.readlines()
            
            for i, line in enumerate(lines):
                if line.startswith("Geom File="):
                    lines[i] = f"Geom File=g{new_geom}\n"
                    logger.info(f"Updated Geom File in plan file to g{new_geom} for plan {plan_number}")
                    break
                
            with open(plan_file_path, 'w') as file:
                file.writelines(lines)
        except Exception as e:
            logger.error(f"Error updating plan file: {e}")
            raise
        # Update the plan_df without reinitializing
        mask = ras_obj.plan_df['plan_number'] == plan_number
        ras_obj.plan_df.loc[mask, 'geom_number'] = new_geom
        ras_obj.plan_df.loc[mask, 'geometry_number'] = new_geom  # Update geometry_number column
        ras_obj.plan_df.loc[mask, 'Geom File'] = f"g{new_geom}"
        geom_path = ras_obj.project_folder / f"{ras_obj.project_name}.g{new_geom}"
        ras_obj.plan_df.loc[mask, 'Geom Path'] = str(geom_path)

        logger.info(f"Geometry for plan {plan_number} set to {new_geom}")
        logger.debug("Updated plan DataFrame:")
        logger.debug(ras_obj.plan_df)

        return ras_obj.plan_df

    @staticmethod
    @log_call
    def set_steady(plan_number: str, new_steady_flow_number: str, ras_object=None):
        """
        Apply a steady flow file to a plan file.
        
        Parameters:
        plan_number (str): Plan number (e.g., '02')
        new_steady_flow_number (str): Steady flow number to apply (e.g., '01')
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.
        
        Returns:
        None

        Raises:
        ValueError: If the specified steady flow number is not found in the project file
        FileNotFoundError: If the specified plan file is not found

        Example:
        >>> RasPlan.set_steady('02', '01')

        Note:
            This function updates the ras object's dataframes after modifying the project structure.
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
                        
        ras_obj.flow_df = ras_obj.get_flow_entries()
        
        if new_steady_flow_number not in ras_obj.flow_df['flow_number'].values:
            raise ValueError(f"Steady flow number {new_steady_flow_number} not found in project file.")
        
        plan_file_path = RasPlan.get_plan_path(plan_number, ras_obj)
        if not plan_file_path:
            raise FileNotFoundError(f"Plan file not found: {plan_number}")
        
        try:
            RasUtils.update_file(plan_file_path, RasPlan._update_steady_in_file, new_steady_flow_number)
            
            # Update all dataframes
            ras_obj.plan_df = ras_obj.get_plan_entries()
            
            # Update flow-related columns
            mask = ras_obj.plan_df['plan_number'] == plan_number
            flow_path = ras_obj.project_folder / f"{ras_obj.project_name}.f{new_steady_flow_number}"
            ras_obj.plan_df.loc[mask, 'Flow File'] = f"f{new_steady_flow_number}"
            ras_obj.plan_df.loc[mask, 'Flow Path'] = str(flow_path)
            ras_obj.plan_df.loc[mask, 'unsteady_number'] = None
            
            # Update remaining dataframes
            ras_obj.geom_df = ras_obj.get_geom_entries()
            ras_obj.flow_df = ras_obj.get_flow_entries()
            ras_obj.unsteady_df = ras_obj.get_unsteady_entries()
            
        except Exception as e:
            raise IOError(f"Failed to update steady flow file: {e}")

    @staticmethod
    def _update_steady_in_file(lines, new_steady_flow_number):
        return [f"Flow File=f{new_steady_flow_number}\n" if line.startswith("Flow File=f") else line for line in lines]

    @staticmethod
    @log_call
    def set_unsteady(plan_number: str, new_unsteady_flow_number: str, ras_object=None):
        """
        Apply an unsteady flow file to a plan file.
        
        Parameters:
        plan_number (str): Plan number (e.g., '04')
        new_unsteady_flow_number (str): Unsteady flow number to apply (e.g., '01')
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.
        
        Returns:
        None

        Raises:
        ValueError: If the specified unsteady number is not found in the project file
        FileNotFoundError: If the specified plan file is not found

        Example:
        >>> RasPlan.set_unsteady('04', '01')

        Note:
            This function updates the ras object's dataframes after modifying the project structure.
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()
        
        if new_unsteady_flow_number not in ras_obj.unsteady_df['unsteady_number'].values:
            raise ValueError(f"Unsteady number {new_unsteady_flow_number} not found in project file.")
        
        plan_file_path = RasPlan.get_plan_path(plan_number, ras_obj)
        if not plan_file_path:
            raise FileNotFoundError(f"Plan file not found: {plan_number}")
        
        try:
            # Read the plan file
            with open(plan_file_path, 'r') as f:
                lines = f.readlines()

            # Update the Flow File line
            for i, line in enumerate(lines):
                if line.startswith("Flow File="):
                    lines[i] = f"Flow File=u{new_unsteady_flow_number}\n"
                    break
            
            # Write back to the plan file
            with open(plan_file_path, 'w') as f:
                f.writelines(lines)
            
            # Update all dataframes
            ras_obj.plan_df = ras_obj.get_plan_entries()
            
            # Update flow-related columns
            mask = ras_obj.plan_df['plan_number'] == plan_number
            flow_path = ras_obj.project_folder / f"{ras_obj.project_name}.u{new_unsteady_flow_number}"
            ras_obj.plan_df.loc[mask, 'Flow File'] = f"u{new_unsteady_flow_number}"
            ras_obj.plan_df.loc[mask, 'Flow Path'] = str(flow_path)
            ras_obj.plan_df.loc[mask, 'unsteady_number'] = new_unsteady_flow_number
            
            # Update remaining dataframes
            ras_obj.geom_df = ras_obj.get_geom_entries()
            ras_obj.flow_df = ras_obj.get_flow_entries()
            ras_obj.unsteady_df = ras_obj.get_unsteady_entries()
            
        except Exception as e:
            raise IOError(f"Failed to update unsteady flow file: {e}")

    @staticmethod
    def _update_unsteady_in_file(lines, new_unsteady_flow_number):
        return [f"Unsteady File=u{new_unsteady_flow_number}\n" if line.startswith("Unsteady File=u") else line for line in lines]
    
    @staticmethod
    @log_call
    def set_num_cores(plan_number, num_cores, ras_object=None):
        """
        Update the maximum number of cores to use in the HEC-RAS plan file.
        
        Parameters:
        plan_number (str): Plan number (e.g., '02') or full path to the plan file
        num_cores (int): Maximum number of cores to use
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.
        
        Returns:
        None

        Number of cores is controlled by the following parameters in the plan file corresponding to 1D, 2D, Pipe Systems and Pump Stations:
        UNET D1 Cores=  
        UNET D2 Cores=
        PS Cores=

        Where a value of "0" is used for "All Available" cores, and values of 1 or more are used to specify the number of cores to use.
        For complex 1D/2D models with pipe systems, a more complex approach may be needed to optimize performance.  (Suggest writing a custom function based on this code).
        This function simply sets the "num_cores" parameter for ALL instances of the above parameters in the plan file.


        Notes on setting num_cores in HEC-RAS:
        The recommended setting for num_cores is 2 (most efficient) to 8 (most performant)
        More details in the HEC-Commander Repository Blog "Benchmarking is All You Need"
        https://github.com/billk-FM/HEC-Commander/blob/main/Blog/7._Benchmarking_Is_All_You_Need.md
        
        Microsoft Windows has a maximum of 64 cores that can be allocated to a single Ras.exe process. 

        Example:
        >>> # Using plan number
        >>> RasPlan.set_num_cores('02', 4)
        >>> # Using full path to plan file
        >>> RasPlan.set_num_cores('/path/to/project.p02', 4)

        Note:
            This function updates the ras object's dataframes after modifying the project structure.
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        plan_file_path = RasUtils.get_plan_path(plan_number, ras_obj)
        if not plan_file_path:
            raise FileNotFoundError(f"Plan file not found: {plan_number}. Please provide a valid plan number or path.")
        
        def update_num_cores(lines):
            updated_lines = []
            for line in lines:
                if any(param in line for param in ["UNET D1 Cores=", "UNET D2 Cores=", "PS Cores="]):
                    param_name = line.split("=")[0]
                    updated_lines.append(f"{param_name}= {num_cores}\n")
                else:
                    updated_lines.append(line)
            return updated_lines
        
        try:
            RasUtils.update_file(plan_file_path, update_num_cores)
        except Exception as e:
            raise IOError(f"Failed to update number of cores in plan file: {e}")
        
        # Update the ras object's dataframes
        ras_obj.plan_df = ras_obj.get_plan_entries()
        ras_obj.geom_df = ras_obj.get_geom_entries()
        ras_obj.flow_df = ras_obj.get_flow_entries()
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()

    @staticmethod
    @log_call
    def set_geom_preprocessor(file_path, run_htab, use_ib_tables, ras_object=None):
        """
        Update the simulation plan file to modify the `Run HTab` and `UNET Use Existing IB Tables` settings.
        
        Parameters:
        file_path (str): Path to the simulation plan file (.p06 or similar) that you want to modify.
        run_htab (int): Value for the `Run HTab` setting:
            - `0` : Do not run the geometry preprocessor, use existing geometry tables.
            - `-1` : Run the geometry preprocessor, forcing a recomputation of the geometry tables.
        use_ib_tables (int): Value for the `UNET Use Existing IB Tables` setting:
            - `0` : Use existing interpolation/boundary (IB) tables without recomputing them.
            - `-1` : Do not use existing IB tables, force a recomputation.
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.
        
        Returns:
        None

        Raises:
        ValueError: If `run_htab` or `use_ib_tables` are not integers or not within the accepted values (`0` or `-1`).
        FileNotFoundError: If the specified file does not exist.
        IOError: If there is an error reading or writing the file.

        Example:
        >>> RasPlan.set_geom_preprocessor('/path/to/project.p06', run_htab=-1, use_ib_tables=0)

        Note:
            This function updates the ras object's dataframes after modifying the project structure.
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        if run_htab not in [-1, 0]:
            raise ValueError("Invalid value for `Run HTab`. Expected `0` or `-1`.")
        if use_ib_tables not in [-1, 0]:
            raise ValueError("Invalid value for `UNET Use Existing IB Tables`. Expected `0` or `-1`.")
        
        def update_geom_preprocessor(lines, run_htab, use_ib_tables):
            updated_lines = []
            for line in lines:
                if line.lstrip().startswith("Run HTab="):
                    updated_lines.append(f"Run HTab= {run_htab} \n")
                elif line.lstrip().startswith("UNET Use Existing IB Tables="):
                    updated_lines.append(f"UNET Use Existing IB Tables= {use_ib_tables} \n")
                else:
                    updated_lines.append(line)
            return updated_lines
        
        try:
            RasUtils.update_file(file_path, update_geom_preprocessor, run_htab, use_ib_tables)
        except FileNotFoundError:
            raise FileNotFoundError(f"The file '{file_path}' does not exist.")
        except IOError as e:
            raise IOError(f"An error occurred while reading or writing the file: {e}")

        # Update the ras object's dataframes
        ras_obj.plan_df = ras_obj.get_plan_entries()
        ras_obj.geom_df = ras_obj.get_geom_entries()
        ras_obj.flow_df = ras_obj.get_flow_entries()
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()

    @staticmethod
    @log_call
    def get_results_path(plan_number: str, ras_object=None) -> Optional[str]:
        """
        Retrieve the results file path for a given HEC-RAS plan number.

        Args:
            plan_number (str): The HEC-RAS plan number for which to find the results path.
            ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.

        Returns:
            Optional[str]: The full path to the results file if found and the file exists, or None if not found.

        Raises:
            RuntimeError: If the project is not initialized.

        Example:
            >>> ras_plan = RasPlan()
            >>> results_path = ras_plan.get_results_path('01')
            >>> if results_path:
            ...     print(f"Results file found at: {results_path}")
            ... else:
            ...     print("Results file not found.")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        # Update the plan dataframe in the ras instance to ensure it is current
        ras_obj.plan_df = ras_obj.get_plan_entries()
        
        # Ensure plan_number is a string
        plan_number = str(plan_number).zfill(2)
        
        plan_entry = ras_obj.plan_df[ras_obj.plan_df['plan_number'] == plan_number]
        if not plan_entry.empty:
            results_path = plan_entry['HDF_Results_Path'].iloc[0]
            if results_path and Path(results_path).exists():
                return results_path
            else:
                return None
        else:
            return None

    @staticmethod
    @log_call
    def get_plan_path(plan_number: str, ras_object=None) -> Optional[str]:
        """
        Return the full path for a given plan number.
        
        This method ensures that the latest plan entries are included by refreshing
        the plan dataframe before searching for the requested plan number.
        
        Args:
        plan_number (str): The plan number to search for.
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.
        
        Returns:
        Optional[str]: The full path of the plan file if found, None otherwise.
        
        Raises:
        RuntimeError: If the project is not initialized.

        Example:
        >>> ras_plan = RasPlan()
        >>> plan_path = ras_plan.get_plan_path('01')
        >>> if plan_path:
        ...     print(f"Plan file found at: {plan_path}")
        ... else:
        ...     print("Plan file not found.")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        plan_df = ras_obj.get_plan_entries()
        
        plan_path = plan_df[plan_df['plan_number'] == plan_number]
        
        if not plan_path.empty:
            if 'full_path' in plan_path.columns and not pd.isna(plan_path['full_path'].iloc[0]):
                return plan_path['full_path'].iloc[0]
            else:
                # Fallback to constructing path
                return str(ras_obj.project_folder / f"{ras_obj.project_name}.p{plan_number}")
        return None

    @staticmethod
    @log_call
    def get_flow_path(flow_number: str, ras_object=None) -> Optional[str]:
        """
        Return the full path for a given flow number.

        Args:
        flow_number (str): The flow number to search for.
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.

        Returns:
        Optional[str]: The full path of the flow file if found, None otherwise.

        Raises:
        RuntimeError: If the project is not initialized.

        Example:
        >>> ras_plan = RasPlan()
        >>> flow_path = ras_plan.get_flow_path('01')
        >>> if flow_path:
        ...     print(f"Flow file found at: {flow_path}")
        ... else:
        ...     print("Flow file not found.")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        # Use updated flow dataframe
        ras_obj.flow_df = ras_obj.get_prj_entries('Flow')
        
        flow_path = ras_obj.flow_df[ras_obj.flow_df['flow_number'] == flow_number]
        if not flow_path.empty:
            full_path = flow_path['full_path'].iloc[0]
            return full_path
        else:
            return None

    @staticmethod
    @log_call
    def get_unsteady_path(unsteady_number: str, ras_object=None) -> Optional[str]:
        """
        Return the full path for a given unsteady number.

        Args:
        unsteady_number (str): The unsteady number to search for.
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.

        Returns:
        Optional[str]: The full path of the unsteady file if found, None otherwise.

        Raises:
        RuntimeError: If the project is not initialized.

        Example:
        >>> ras_plan = RasPlan()
        >>> unsteady_path = ras_plan.get_unsteady_path('01')
        >>> if unsteady_path:
        ...     print(f"Unsteady file found at: {unsteady_path}")
        ... else:
        ...     print("Unsteady file not found.")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        # Use updated unsteady dataframe
        ras_obj.unsteady_df = ras_obj.get_prj_entries('Unsteady')
        
        unsteady_path = ras_obj.unsteady_df[ras_obj.unsteady_df['unsteady_number'] == unsteady_number]
        if not unsteady_path.empty:
            full_path = unsteady_path['full_path'].iloc[0]
            return full_path
        else:
            return None

    @staticmethod
    @log_call
    def get_geom_path(geom_number: Union[str, int], ras_object=None) -> Optional[str]:
        """
        Return the full path for a given geometry number.

        Args:
        geom_number (Union[str, int]): The geometry number to search for.
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.

        Returns:
        Optional[str]: The full path of the geometry file if found, None otherwise.

        Raises:
        RuntimeError: If the project is not initialized.

        Example:
        >>> ras_plan = RasPlan()
        >>> geom_path = ras_plan.get_geom_path('01')
        >>> if geom_path:
        ...     print(f"Geometry file found at: {geom_path}")
        ... else:
        ...     print("Geometry file not found.")
        """
        logger = get_logger(__name__)
        
        if geom_number is None:
            logger.warning("Provided geometry number is None")
            return None
            
        try:
            ras_obj = ras_object or ras
            ras_obj.check_initialized()
            
            # Ensure geom_number is a string with proper formatting
            if isinstance(geom_number, int):
                geom_number = f"{geom_number:02d}"
            elif isinstance(geom_number, str):
                # Strip any leading zeros and reformat
                stripped = geom_number.lstrip('0')
                if not stripped:  # Handle case where input was '0' or '00'
                    geom_number = '00'
                else:
                    geom_number = f"{int(stripped):02d}"
            else:
                # Handle unexpected types
                logger.warning(f"Unexpected type for geom_number: {type(geom_number)}")
                return None
            
            # Use updated geom dataframe
            ras_obj.geom_df = ras_obj.get_prj_entries('Geom')
            
            # Find the geometry file path
            geom_path = ras_obj.geom_df[ras_obj.geom_df['geom_number'] == geom_number]
            if not geom_path.empty:
                if 'full_path' in geom_path.columns and pd.notna(geom_path['full_path'].iloc[0]):
                    full_path = geom_path['full_path'].iloc[0]
                    logger.info(f"Found geometry path: {full_path}")
                    return full_path
                else:
                    # Fallback to constructing path
                    constructed_path = str(ras_obj.project_folder / f"{ras_obj.project_name}.g{geom_number}")
                    logger.info(f"Constructed geometry path: {constructed_path}")
                    return constructed_path
            else:
                logger.warning(f"No geometry file found with number: {geom_number}")
                return None
        except Exception as e:
            logger.error(f"Error in get_geom_path: {str(e)}")
            return None

    # Clone Functions to copy unsteady, flow, and geometry files from templates

    @staticmethod
    @log_call
    def clone_plan(template_plan, new_plan_shortid=None, ras_object=None):
        """
        Create a new plan file based on a template and update the project file.
        
        Parameters:
        template_plan (str): Plan number to use as template (e.g., '01')
        new_plan_shortid (str, optional): New short identifier for the plan file
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.
        
        Returns:
        str: New plan number
        
        Example:
        >>> ras_plan = RasPlan()
        >>> new_plan_number = ras_plan.clone_plan('01', new_plan_shortid='New Plan')
        >>> print(f"New plan created with number: {new_plan_number}")

        Note:
            This function updates the ras object's dataframes after modifying the project structure.
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        # Update plan entries without reinitializing the entire project
        ras_obj.plan_df = ras_obj.get_prj_entries('Plan')

        new_plan_num = RasPlan.get_next_number(ras_obj.plan_df['plan_number'])
        template_plan_path = ras_obj.project_folder / f"{ras_obj.project_name}.p{template_plan}"
        new_plan_path = ras_obj.project_folder / f"{ras_obj.project_name}.p{new_plan_num}"

        def update_shortid(lines):
            shortid_pattern = re.compile(r'^Short Identifier=(.*)$', re.IGNORECASE)
            for i, line in enumerate(lines):
                match = shortid_pattern.match(line.strip())
                if match:
                    current_shortid = match.group(1)
                    if new_plan_shortid is None:
                        new_shortid = (current_shortid + "_copy")[:24]
                    else:
                        new_shortid = new_plan_shortid[:24]
                    lines[i] = f"Short Identifier={new_shortid}\n"
                    break
            return lines

        # Use RasUtils to clone the file and update the short identifier
        RasUtils.clone_file(template_plan_path, new_plan_path, update_shortid)

        # Use RasUtils to update the project file
        RasUtils.update_project_file(ras_obj.prj_file, 'Plan', new_plan_num, ras_object=ras_obj)

        # Re-initialize the ras global object
        ras_obj.initialize(ras_obj.project_folder, ras_obj.ras_exe_path)

        ras_obj.plan_df = ras_obj.get_plan_entries()
        ras_obj.geom_df = ras_obj.get_geom_entries()
        ras_obj.flow_df = ras_obj.get_flow_entries()
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()

        return new_plan_num

    @staticmethod
    @log_call
    def clone_unsteady(template_unsteady, ras_object=None):
        """
        Copy unsteady flow files from a template, find the next unsteady number,
        and update the project file accordingly.

        Parameters:
        template_unsteady (str): Unsteady flow number to be used as a template (e.g., '01')
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.

        Returns:
        str: New unsteady flow number (e.g., '03')

        Example:
        >>> ras_plan = RasPlan()
        >>> new_unsteady_num = ras_plan.clone_unsteady('01')
        >>> print(f"New unsteady flow file created: u{new_unsteady_num}")

        Note:
            This function updates the ras object's dataframes after modifying the project structure.
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        # Update unsteady entries without reinitializing the entire project
        ras_obj.unsteady_df = ras_obj.get_prj_entries('Unsteady')

        new_unsteady_num = RasPlan.get_next_number(ras_obj.unsteady_df['unsteady_number'])
        template_unsteady_path = ras_obj.project_folder / f"{ras_obj.project_name}.u{template_unsteady}"
        new_unsteady_path = ras_obj.project_folder / f"{ras_obj.project_name}.u{new_unsteady_num}"

        # Use RasUtils to clone the file
        RasUtils.clone_file(template_unsteady_path, new_unsteady_path)

        # Copy the corresponding .hdf file if it exists
        template_hdf_path = ras_obj.project_folder / f"{ras_obj.project_name}.u{template_unsteady}.hdf"
        new_hdf_path = ras_obj.project_folder / f"{ras_obj.project_name}.u{new_unsteady_num}.hdf"
        if template_hdf_path.exists():
            shutil.copy(template_hdf_path, new_hdf_path)

        # Use RasUtils to update the project file
        RasUtils.update_project_file(ras_obj.prj_file, 'Unsteady', new_unsteady_num, ras_object=ras_obj)

        # Re-initialize the ras global object
        ras_obj.initialize(ras_obj.project_folder, ras_obj.ras_exe_path)

        ras_obj.plan_df = ras_obj.get_plan_entries()
        ras_obj.geom_df = ras_obj.get_geom_entries()
        ras_obj.flow_df = ras_obj.get_flow_entries()
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()

        return new_unsteady_num


    @staticmethod
    @log_call
    def clone_steady(template_flow, ras_object=None):
        """
        Copy steady flow files from a template, find the next flow number,
        and update the project file accordingly.
        
        Parameters:
        template_flow (str): Flow number to be used as a template (e.g., '01')
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.
        
        Returns:
        str: New flow number (e.g., '03')

        Example:
        >>> ras_plan = RasPlan()
        >>> new_flow_num = ras_plan.clone_steady('01')
        >>> print(f"New steady flow file created: f{new_flow_num}")

        Note:
            This function updates the ras object's dataframes after modifying the project structure.
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        # Update flow entries without reinitializing the entire project
        ras_obj.flow_df = ras_obj.get_prj_entries('Flow')

        new_flow_num = RasPlan.get_next_number(ras_obj.flow_df['flow_number'])
        template_flow_path = ras_obj.project_folder / f"{ras_obj.project_name}.f{template_flow}"
        new_flow_path = ras_obj.project_folder / f"{ras_obj.project_name}.f{new_flow_num}"

        # Use RasUtils to clone the file
        RasUtils.clone_file(template_flow_path, new_flow_path)

        # Use RasUtils to update the project file
        RasUtils.update_project_file(ras_obj.prj_file, 'Flow', new_flow_num, ras_object=ras_obj)

        # Re-initialize the ras global object
        ras_obj.initialize(ras_obj.project_folder, ras_obj.ras_exe_path)
        
        ras_obj.plan_df = ras_obj.get_plan_entries()
        ras_obj.geom_df = ras_obj.get_geom_entries()
        ras_obj.flow_df = ras_obj.get_flow_entries()
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()
        
        return new_flow_num

    @staticmethod
    @log_call
    def clone_geom(template_geom, ras_object=None):
        """
        Copy geometry files from a template, find the next geometry number,
        and update the project file accordingly.
        
        Parameters:
        template_geom (str): Geometry number to be used as a template (e.g., '01')
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.
        
        Returns:
        str: New geometry number (e.g., '03')

        Note:
            This function updates the ras object's dataframes after modifying the project structure.
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        # Update geometry entries without reinitializing the entire project
        ras_obj.geom_df = ras_obj.get_prj_entries('Geom')

        new_geom_num = RasPlan.get_next_number(ras_obj.geom_df['geom_number'])
        template_geom_path = ras_obj.project_folder / f"{ras_obj.project_name}.g{template_geom}"
        new_geom_path = ras_obj.project_folder / f"{ras_obj.project_name}.g{new_geom_num}"

        # Use RasUtils to clone the file
        RasUtils.clone_file(template_geom_path, new_geom_path)

        # Handle HDF file copy
        template_hdf_path = ras_obj.project_folder / f"{ras_obj.project_name}.g{template_geom}.hdf"
        new_hdf_path = ras_obj.project_folder / f"{ras_obj.project_name}.g{new_geom_num}.hdf"
        if template_hdf_path.is_file():
            RasUtils.clone_file(template_hdf_path, new_hdf_path)

        # Use RasUtils to update the project file
        RasUtils.update_project_file(ras_obj.prj_file, 'Geom', new_geom_num, ras_object=ras_obj)

        # Update all dataframes in the ras object
        ras_obj.plan_df = ras_obj.get_plan_entries()
        ras_obj.geom_df = ras_obj.get_geom_entries()
        ras_obj.flow_df = ras_obj.get_flow_entries()
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()

        return new_geom_num

    @staticmethod
    @log_call
    def get_next_number(existing_numbers):
        """
        Determine the next available number from a list of existing numbers.
        
        Parameters:
        existing_numbers (list): List of existing numbers as strings
        
        Returns:
        str: Next available number as a zero-padded string
        
        Example:
        >>> existing_numbers = ['01', '02', '04']
        >>> RasPlan.get_next_number(existing_numbers)
        '03'
        >>> existing_numbers = ['01', '02', '03']
        >>> RasPlan.get_next_number(existing_numbers)
        '04'
        """
        existing_numbers = sorted(int(num) for num in existing_numbers)
        next_number = 1
        for num in existing_numbers:
            if num == next_number:
                next_number += 1
            else:
                break
        return f"{next_number:02d}"

    @staticmethod
    @log_call
    def get_plan_value(
        plan_number_or_path: Union[str, Path],
        key: str,
        ras_object=None
    ) -> Any:
        """
        Retrieve a specific value from a HEC-RAS plan file.

        Parameters:
        plan_number_or_path (Union[str, Path]): The plan number (1 to 99) or full path to the plan file
        key (str): The key to retrieve from the plan file
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.

        Returns:
        Any: The value associated with the specified key

        Raises:
        ValueError: If the plan file is not found
        IOError: If there's an error reading the plan file

        Available keys and their expected types:
        - 'Computation Interval' (str): Time value for computational time step (e.g., '5SEC', '2MIN')
        - 'DSS File' (str): Name of the DSS file used
        - 'Flow File' (str): Name of the flow input file
        - 'Friction Slope Method' (int): Method selection for friction slope (e.g., 1, 2)
        - 'Geom File' (str): Name of the geometry input file
        - 'Mapping Interval' (str): Time interval for mapping output
        - 'Plan File' (str): Name of the plan file
        - 'Plan Title' (str): Title of the simulation plan
        - 'Program Version' (str): Version number of HEC-RAS
        - 'Run HTab' (int): Flag to run HTab module (-1 or 1)
        - 'Run Post Process' (int): Flag to run post-processing (-1 or 1)
        - 'Run Sediment' (int): Flag to run sediment transport module (0 or 1)
        - 'Run UNET' (int): Flag to run unsteady network module (-1 or 1)
        - 'Run WQNET' (int): Flag to run water quality module (0 or 1)
        - 'Short Identifier' (str): Short name or ID for the plan
        - 'Simulation Date' (str): Start and end dates/times for simulation
        - 'UNET D1 Cores' (int): Number of cores used in 1D calculations
        - 'UNET D2 Cores' (int): Number of cores used in 2D calculations
        - 'PS Cores' (int): Number of cores used in parallel simulation
        - 'UNET Use Existing IB Tables' (int): Flag for using existing internal boundary tables (-1, 0, or 1)
        - 'UNET 1D Methodology' (str): 1D calculation methodology
        - 'UNET D2 Solver Type' (str): 2D solver type
        - 'UNET D2 Name' (str): Name of the 2D area
        - 'Run RASMapper' (int): Flag to run RASMapper for floodplain mapping (-1 for off, 0 for on)
        
        Note: 
        Writing Multi line keys like 'Description' are not supported by this function.

        Example:
        >>> computation_interval = RasPlan.get_plan_value("01", "Computation Interval")
        >>> print(f"Computation interval: {computation_interval}")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        supported_plan_keys = {
            'Description', 'Computation Interval', 'DSS File', 'Flow File', 'Friction Slope Method',
            'Geom File', 'Mapping Interval', 'Plan File', 'Plan Title', 'Program Version',
            'Run HTab', 'Run Post Process', 'Run Sediment', 'Run UNET', 'Run WQNET',
            'Short Identifier', 'Simulation Date', 'UNET D1 Cores', 'UNET D2 Cores', 'PS Cores',
            'UNET Use Existing IB Tables', 'UNET 1D Methodology', 'UNET D2 Solver Type', 
            'UNET D2 Name', 'Run RASMapper', 'Run HTab', 'Run UNET'
        }

        if key not in supported_plan_keys:
            logger = logging.getLogger(__name__)
            logger.warning(f"Unknown key: {key}. Valid keys are: {', '.join(supported_plan_keys)}\n Add more keys and explanations in get_plan_value() as needed.")

        plan_file_path = Path(plan_number_or_path)
        if not plan_file_path.is_file():
            plan_file_path = RasPlan.get_plan_path(plan_number_or_path, ras_object=ras_obj)
            if plan_file_path is None or not Path(plan_file_path).exists():
                raise ValueError(f"Plan file not found: {plan_file_path}")

        try:
            with open(plan_file_path, 'r') as file:
                content = file.read()
        except IOError as e:
            logger = logging.getLogger(__name__)
            logger.error(f"Error reading plan file {plan_file_path}: {e}")
            raise

        # Handle core settings specially to convert to integers
        core_keys = {'UNET D1 Cores', 'UNET D2 Cores', 'PS Cores'}
        if key in core_keys:
            pattern = f"{key}=(.*)"
            match = re.search(pattern, content)
            if match:
                try:
                    return int(match.group(1).strip())
                except ValueError:
                    logger = logging.getLogger(__name__)
                    logger.error(f"Could not convert {key} value to integer")
                    return None
            else:
                logger = logging.getLogger(__name__)
                logger.error(f"Key '{key}' not found in the plan file.")
                return None
        elif key == 'Description':
            match = re.search(r'Begin DESCRIPTION(.*?)END DESCRIPTION', content, re.DOTALL)
            return match.group(1).strip() if match else None
        else:
            pattern = f"{key}=(.*)"
            match = re.search(pattern, content)
            if match:
                return match.group(1).strip()
            else:
                logger = logging.getLogger(__name__)
                logger.error(f"Key '{key}' not found in the plan file.")
                return None





    @staticmethod
    @log_call
    def update_run_flags(
        plan_number_or_path: Union[str, Path],
        geometry_preprocessor: bool = None,
        unsteady_flow_simulation: bool = None,
        run_sediment: bool = None,
        post_processor: bool = None,
        floodplain_mapping: bool = None,
        ras_object=None
    ) -> None:
        """
        Update the run flags in a HEC-RAS plan file.

        Parameters:
        plan_number_or_path (Union[str, Path]): The plan number (1 to 99) or full path to the plan file
        geometry_preprocessor (bool, optional): Flag for Geometry Preprocessor
        unsteady_flow_simulation (bool, optional): Flag for Unsteady Flow Simulation
        run_sediment (bool, optional): Flag for run_sediment
        post_processor (bool, optional): Flag for Post Processor
        floodplain_mapping (bool, optional): Flag for Floodplain Mapping
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.

        Raises:
        ValueError: If the plan file is not found
        IOError: If there's an error reading or writing the plan file

        Example:
        >>> RasPlan.update_run_flags("01", geometry_preprocessor=True, unsteady_flow_simulation=True, run_sediment=False, post_processor=True, floodplain_mapping=False)
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        plan_file_path = Path(plan_number_or_path)
        if not plan_file_path.is_file():
            plan_file_path = RasPlan.get_plan_path(plan_number_or_path, ras_object=ras_obj)
            if plan_file_path is None or not Path(plan_file_path).exists():
                raise ValueError(f"Plan file not found: {plan_file_path}")

        flag_mapping = {
            'geometry_preprocessor': ('Run HTab', geometry_preprocessor),
            'unsteady_flow_simulation': ('Run UNet', unsteady_flow_simulation),
            'run_sediment': ('Run run_sediment', run_sediment),
            'post_processor': ('Run PostProcess', post_processor),
            'floodplain_mapping': ('Run RASMapper', floodplain_mapping)
        }

        try:
            with open(plan_file_path, 'r') as file:
                lines = file.readlines()

            for i, line in enumerate(lines):
                for key, (file_key, value) in flag_mapping.items():
                    if value is not None and line.strip().startswith(file_key):
                        lines[i] = f"{file_key}= {1 if value else 0}\n"

            with open(plan_file_path, 'w') as file:
                file.writelines(lines)

            logger = logging.getLogger(__name__)
            logger.info(f"Successfully updated run flags in plan file: {plan_file_path}")

        except IOError as e:
            logger = logging.getLogger(__name__)
            logger.error(f"Error updating run flags in plan file {plan_file_path}: {e}")
            raise



    @staticmethod
    @log_call
    def update_plan_intervals(
        plan_number_or_path: Union[str, Path],
        computation_interval: Optional[str] = None,
        output_interval: Optional[str] = None,
        instantaneous_interval: Optional[str] = None,
        mapping_interval: Optional[str] = None,
        ras_object=None
    ) -> None:
        """
        Update the computation and output intervals in a HEC-RAS plan file.

        Parameters:
        plan_number_or_path (Union[str, Path]): The plan number (1 to 99) or full path to the plan file
        computation_interval (Optional[str]): The new computation interval. Valid entries include:
            '1SEC', '2SEC', '3SEC', '4SEC', '5SEC', '6SEC', '10SEC', '15SEC', '20SEC', '30SEC',
            '1MIN', '2MIN', '3MIN', '4MIN', '5MIN', '6MIN', '10MIN', '15MIN', '20MIN', '30MIN',
            '1HOUR', '2HOUR', '3HOUR', '4HOUR', '6HOUR', '8HOUR', '12HOUR', '1DAY'
        output_interval (Optional[str]): The new output interval. Valid entries are the same as computation_interval.
        instantaneous_interval (Optional[str]): The new instantaneous interval. Valid entries are the same as computation_interval.
        mapping_interval (Optional[str]): The new mapping interval. Valid entries are the same as computation_interval.
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.

        Raises:
        ValueError: If the plan file is not found or if an invalid interval is provided
        IOError: If there's an error reading or writing the plan file

        Note: This function does not check if the intervals are equal divisors. Ensure you use valid values from HEC-RAS.

        Example:
        >>> RasPlan.update_plan_intervals("01", computation_interval="5SEC", output_interval="1MIN", instantaneous_interval="1HOUR", mapping_interval="5MIN")
        >>> RasPlan.update_plan_intervals("/path/to/plan.p01", computation_interval="10SEC", output_interval="30SEC")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        plan_file_path = Path(plan_number_or_path)
        if not plan_file_path.is_file():
            plan_file_path = RasPlan.get_plan_path(plan_number_or_path, ras_object=ras_obj)
            if plan_file_path is None or not Path(plan_file_path).exists():
                raise ValueError(f"Plan file not found: {plan_file_path}")

        valid_intervals = [
            '1SEC', '2SEC', '3SEC', '4SEC', '5SEC', '6SEC', '10SEC', '15SEC', '20SEC', '30SEC',
            '1MIN', '2MIN', '3MIN', '4MIN', '5MIN', '6MIN', '10MIN', '15MIN', '20MIN', '30MIN',
            '1HOUR', '2HOUR', '3HOUR', '4HOUR', '6HOUR', '8HOUR', '12HOUR', '1DAY'
        ]

        interval_mapping = {
            'Computation Interval': computation_interval,
            'Output Interval': output_interval,
            'Instantaneous Interval': instantaneous_interval,
            'Mapping Interval': mapping_interval
        }

        try:
            with open(plan_file_path, 'r') as file:
                lines = file.readlines()

            for i, line in enumerate(lines):
                for key, value in interval_mapping.items():
                    if value is not None:
                        if value.upper() not in valid_intervals:
                            raise ValueError(f"Invalid {key}: {value}. Must be one of {valid_intervals}")
                        if line.strip().startswith(key):
                            lines[i] = f"{key}={value.upper()}\n"

            with open(plan_file_path, 'w') as file:
                file.writelines(lines)

            logger = logging.getLogger(__name__)
            logger.info(f"Successfully updated intervals in plan file: {plan_file_path}")

        except IOError as e:
            logger = logging.getLogger(__name__)
            logger.error(f"Error updating intervals in plan file {plan_file_path}: {e}")
            raise


    @log_call
    def update_plan_description(plan_number_or_path: Union[str, Path], description: str, ras_object: Optional['RasPrj'] = None) -> None:
        """
        Update the description block in a HEC-RAS plan file.

        Args:
            plan_number_or_path (Union[str, Path]): The plan number or full path to the plan file
            description (str): The new description text to set
            ras_object (Optional[RasPrj]): Specific RAS object to use. If None, uses the global ras instance.

        Raises:
            ValueError: If the plan file is not found
            IOError: If there's an error reading or writing the plan file
        """
        logger = get_logger(__name__)
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        plan_file_path = Path(plan_number_or_path)
        if not plan_file_path.is_file():
            plan_file_path = RasUtils.get_plan_path(plan_number_or_path, ras_object)
            if not plan_file_path.exists():
                logger.error(f"Plan file not found: {plan_file_path}")
                raise ValueError(f"Plan file not found: {plan_file_path}")

        try:
            with open(plan_file_path, 'r') as file:
                content = file.read()

            # Find the description block
            desc_pattern = r'Begin DESCRIPTION.*?END DESCRIPTION'
            new_desc_block = f'Begin DESCRIPTION\n{description}\nEND DESCRIPTION'

            if re.search(desc_pattern, content, re.DOTALL):
                # Replace existing description block
                new_content = re.sub(desc_pattern, new_desc_block, content, flags=re.DOTALL)
            else:
                # Add new description block at the start of the file
                new_content = new_desc_block + '\n' + content

            # Write the updated content back to the file
            with open(plan_file_path, 'w') as file:
                file.write(new_content)

            logger.info(f"Updated description in plan file: {plan_file_path}")

            # Update the dataframes in the RAS object to reflect changes
            if ras_object:
                ras_object.plan_df = ras_object.get_plan_entries()
                ras_object.geom_df = ras_object.get_geom_entries()
                ras_object.flow_df = ras_object.get_flow_entries()
                ras_object.unsteady_df = ras_object.get_unsteady_entries()

        except IOError as e:
            logger.error(f"Error updating plan description in {plan_file_path}: {e}")
            raise
        except Exception as e:
            logger.error(f"Unexpected error updating plan description: {e}")
            raise

    @staticmethod
    @log_call
    def read_plan_description(plan_number_or_path: Union[str, Path], ras_object: Optional['RasPrj'] = None) -> str:
        """
        Read the description from the plan file.

        Args:
            plan_number_or_path (Union[str, Path]): The plan number or path to the plan file.
            ras_object (Optional[RasPrj]): The RAS project object. If None, uses the global 'ras' object.

        Returns:
            str: The description from the plan file.

        Raises:
            ValueError: If the plan file is not found.
            IOError: If there's an error reading from the plan file.
        """
        logger = logging.getLogger(__name__)

        plan_file_path = Path(plan_number_or_path)
        if not plan_file_path.is_file():
            plan_file_path = RasPlan.get_plan_path(plan_number_or_path, ras_object)
            if plan_file_path is None or not Path(plan_file_path).exists():
                raise ValueError(f"Plan file not found: {plan_file_path}")

        try:
            with open(plan_file_path, 'r') as file:
                lines = file.readlines()
        except IOError as e:
            logger.error(f"Error reading plan file {plan_file_path}: {e}")
            raise

        description_lines = []
        in_description = False
        description_found = False
        for line in lines:
            if line.strip() == "BEGIN DESCRIPTION:":
                in_description = True
                description_found = True
            elif line.strip() == "END DESCRIPTION:":
                break
            elif in_description:
                description_lines.append(line.strip())

        if not description_found:
            logger.warning(f"No description found in plan file: {plan_file_path}")
            return ""

        description = '\n'.join(description_lines)
        logger.info(f"Read description from plan file: {plan_file_path}")
        return description




    @staticmethod
    @log_call
    def update_simulation_date(plan_number_or_path: Union[str, Path], start_date: datetime, end_date: datetime, ras_object: Optional['RasPrj'] = None) -> None:
        """
        Update the simulation date for a given plan.

        Args:
            plan_number_or_path (Union[str, Path]): The plan number or path to the plan file.
            start_date (datetime): The start date and time for the simulation.
            end_date (datetime): The end date and time for the simulation.
            ras_object (Optional['RasPrj']): The RAS project object. Defaults to None.

        Raises:
            ValueError: If the plan file is not found or if there's an error updating the file.
        """

        # Get the plan file path
        plan_file_path = Path(plan_number_or_path)
        if not plan_file_path.is_file():
            plan_file_path = RasPlan.get_plan_path(plan_number_or_path, ras_object)
            if plan_file_path is None or not Path(plan_file_path).exists():
                raise ValueError(f"Plan file not found: {plan_file_path}")

        # Format the dates
        formatted_date = f"{start_date.strftime('%d%b%Y').upper()},{start_date.strftime('%H%M')},{end_date.strftime('%d%b%Y').upper()},{end_date.strftime('%H%M')}"

        try:
            # Read the file
            with open(plan_file_path, 'r') as file:
                lines = file.readlines()

            # Update the Simulation Date line
            updated = False
            for i, line in enumerate(lines):
                if line.startswith("Simulation Date="):
                    lines[i] = f"Simulation Date={formatted_date}\n"
                    updated = True
                    break

            # If Simulation Date line not found, add it at the end
            if not updated:
                lines.append(f"Simulation Date={formatted_date}\n")

            # Write the updated content back to the file
            with open(plan_file_path, 'w') as file:
                file.writelines(lines)

            logger.info(f"Updated simulation date in plan file: {plan_file_path}")

        except IOError as e:
            logger.error(f"Error updating simulation date in plan file {plan_file_path}: {e}")
            raise ValueError(f"Error updating simulation date: {e}")

        # Refresh RasPrj dataframes
        if ras_object:
            ras_object.plan_df = ras_object.get_plan_entries()
            ras_object.unsteady_df = ras_object.get_unsteady_entries()

    @staticmethod
    @log_call
    def get_shortid(plan_number_or_path: Union[str, Path], ras_object=None) -> str:
        """
        Get the Short Identifier from a HEC-RAS plan file.

        Args:
            plan_number_or_path (Union[str, Path]): The plan number or path to the plan file.
            ras_object (Optional[RasPrj]): The RAS project object. If None, uses the global 'ras' object.

        Returns:
            str: The Short Identifier from the plan file.

        Raises:
            ValueError: If the plan file is not found.
            IOError: If there's an error reading from the plan file.

        Example:
            >>> shortid = RasPlan.get_shortid('01')
            >>> print(f"Plan's Short Identifier: {shortid}")
        """
        logger = get_logger(__name__)
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        # Get the Short Identifier using get_plan_value
        shortid = RasPlan.get_plan_value(plan_number_or_path, "Short Identifier", ras_obj)
        
        if shortid is None:
            logger.warning(f"Short Identifier not found in plan: {plan_number_or_path}")
            return ""
        
        logger.info(f"Retrieved Short Identifier: {shortid}")
        return shortid

    @staticmethod
    @log_call
    def set_shortid(plan_number_or_path: Union[str, Path], new_shortid: str, ras_object=None) -> None:
        """
        Set the Short Identifier in a HEC-RAS plan file.

        Args:
            plan_number_or_path (Union[str, Path]): The plan number or path to the plan file.
            new_shortid (str): The new Short Identifier to set (max 24 characters).
            ras_object (Optional[RasPrj]): The RAS project object. If None, uses the global 'ras' object.

        Raises:
            ValueError: If the plan file is not found or if new_shortid is too long.
            IOError: If there's an error updating the plan file.

        Example:
            >>> RasPlan.set_shortid('01', 'NewShortIdentifier')
        """
        logger = get_logger(__name__)
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        # Ensure new_shortid is not too long (HEC-RAS limits short identifiers to 24 characters)
        if len(new_shortid) > 24:
            logger.warning(f"Short Identifier too long (24 char max). Truncating: {new_shortid}")
            new_shortid = new_shortid[:24]

        # Get the plan file path
        plan_file_path = Path(plan_number_or_path)
        if not plan_file_path.is_file():
            plan_file_path = RasUtils.get_plan_path(plan_number_or_path, ras_obj)
            if not plan_file_path.exists():
                logger.error(f"Plan file not found: {plan_file_path}")
                raise ValueError(f"Plan file not found: {plan_file_path}")

        try:
            # Read the file
            with open(plan_file_path, 'r') as file:
                lines = file.readlines()

            # Update the Short Identifier line
            updated = False
            for i, line in enumerate(lines):
                if line.startswith("Short Identifier="):
                    lines[i] = f"Short Identifier={new_shortid}\n"
                    updated = True
                    break

            # If Short Identifier line not found, add it after Plan Title
            if not updated:
                for i, line in enumerate(lines):
                    if line.startswith("Plan Title="):
                        lines.insert(i+1, f"Short Identifier={new_shortid}\n")
                        updated = True
                        break
                
                # If Plan Title not found either, add at the beginning
                if not updated:
                    lines.insert(0, f"Short Identifier={new_shortid}\n")

            # Write the updated content back to the file
            with open(plan_file_path, 'w') as file:
                file.writelines(lines)

            logger.info(f"Updated Short Identifier in plan file to: {new_shortid}")

        except IOError as e:
            logger.error(f"Error updating Short Identifier in plan file {plan_file_path}: {e}")
            raise ValueError(f"Error updating Short Identifier: {e}")

        # Refresh RasPrj dataframes if ras_object provided
        if ras_object:
            ras_object.plan_df = ras_object.get_plan_entries()

    @staticmethod
    @log_call
    def get_plan_title(plan_number_or_path: Union[str, Path], ras_object=None) -> str:
        """
        Get the Plan Title from a HEC-RAS plan file.

        Args:
            plan_number_or_path (Union[str, Path]): The plan number or path to the plan file.
            ras_object (Optional[RasPrj]): The RAS project object. If None, uses the global 'ras' object.

        Returns:
            str: The Plan Title from the plan file.

        Raises:
            ValueError: If the plan file is not found.
            IOError: If there's an error reading from the plan file.

        Example:
            >>> title = RasPlan.get_plan_title('01')
            >>> print(f"Plan Title: {title}")
        """
        logger = get_logger(__name__)
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        # Get the Plan Title using get_plan_value
        title = RasPlan.get_plan_value(plan_number_or_path, "Plan Title", ras_obj)
        
        if title is None:
            logger.warning(f"Plan Title not found in plan: {plan_number_or_path}")
            return ""
        
        logger.info(f"Retrieved Plan Title: {title}")
        return title

    @staticmethod
    @log_call
    def set_plan_title(plan_number_or_path: Union[str, Path], new_title: str, ras_object=None) -> None:
        """
        Set the Plan Title in a HEC-RAS plan file.

        Args:
            plan_number_or_path (Union[str, Path]): The plan number or path to the plan file.
            new_title (str): The new Plan Title to set.
            ras_object (Optional[RasPrj]): The RAS project object. If None, uses the global 'ras' object.

        Raises:
            ValueError: If the plan file is not found.
            IOError: If there's an error updating the plan file.

        Example:
            >>> RasPlan.set_plan_title('01', 'Updated Plan Scenario')
        """
        logger = get_logger(__name__)
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        # Get the plan file path
        plan_file_path = Path(plan_number_or_path)
        if not plan_file_path.is_file():
            plan_file_path = RasUtils.get_plan_path(plan_number_or_path, ras_obj)
            if not plan_file_path.exists():
                logger.error(f"Plan file not found: {plan_file_path}")
                raise ValueError(f"Plan file not found: {plan_file_path}")

        try:
            # Read the file
            with open(plan_file_path, 'r') as file:
                lines = file.readlines()

            # Update the Plan Title line
            updated = False
            for i, line in enumerate(lines):
                if line.startswith("Plan Title="):
                    lines[i] = f"Plan Title={new_title}\n"
                    updated = True
                    break

            # If Plan Title line not found, add it at the beginning
            if not updated:
                lines.insert(0, f"Plan Title={new_title}\n")

            # Write the updated content back to the file
            with open(plan_file_path, 'w') as file:
                file.writelines(lines)

            logger.info(f"Updated Plan Title in plan file to: {new_title}")

        except IOError as e:
            logger.error(f"Error updating Plan Title in plan file {plan_file_path}: {e}")
            raise ValueError(f"Error updating Plan Title: {e}")

        # Refresh RasPrj dataframes if ras_object provided
        if ras_object:
            ras_object.plan_df = ras_object.get_plan_entries()
==================================================

File: c:\GH\ras-commander\ras_commander\RasPrj.py
==================================================
"""
RasPrj.py - Manages HEC-RAS projects within the ras-commander library

This module provides a class for managing HEC-RAS projects.

Classes:
    RasPrj: A class for managing HEC-RAS projects.

Functions:
    init_ras_project: Initialize a RAS project.
    get_ras_exe: Determine the HEC-RAS executable path based on the input.

DEVELOPER NOTE:
This class is used to initialize a RAS project and is used in conjunction with the RasCmdr class to manage the execution of RAS plans.
By default, the RasPrj class is initialized with the global 'ras' object.
However, you can create multiple RasPrj instances to manage multiple projects.
Do not mix and match global 'ras' object instances and custom instances of RasPrj - it will cause errors.

This module is part of the ras-commander library and uses a centralized logging configuration.

Logging Configuration:
- The logging is set up in the logging_config.py file.
- A @log_call decorator is available to automatically log function calls.
- Log levels: DEBUG, INFO, WARNING, ERROR, CRITICAL
- Logs are written to both console and a rotating file handler.
- The default log file is 'ras_commander.log' in the 'logs' directory.
- The default log level is INFO.

To use logging in this module:
1. Use the @log_call decorator for automatic function call logging.
2. For additional logging, use logger.[level]() calls (e.g., logger.info(), logger.debug()).


Example:
    @log_call
    def my_function():
        
        logger.debug("Additional debug information")
        # Function logic here
        
-----

All of the methods in this class are class methods and are designed to be used with instances of the class.

List of Functions in RasPrj:    
- initialize()
- _load_project_data()
- _get_geom_file_for_plan()
- _parse_plan_file()
- _parse_unsteady_file()
- _get_prj_entries()
- _parse_boundary_condition()
- is_initialized (property)
- check_initialized()
- find_ras_prj()
- get_project_name()
- get_prj_entries()
- get_plan_entries()
- get_flow_entries()
- get_unsteady_entries()
- get_geom_entries()
- get_hdf_entries()
- print_data()
- get_plan_value()
- get_boundary_conditions()
        
Functions in RasPrj that are not part of the class:        
- init_ras_project()
- get_ras_exe()

        
        
        
"""
import os
import re
from pathlib import Path
import pandas as pd
from typing import Union, Any, List, Dict, Tuple
import logging
from ras_commander.LoggingConfig import get_logger
from ras_commander.Decorators import log_call

logger = get_logger(__name__)

def read_file_with_fallback_encoding(file_path, encodings=['utf-8', 'latin1', 'cp1252', 'iso-8859-1']):
    """
    Attempt to read a file using multiple encodings.
    
    Args:
        file_path (str or Path): Path to the file to read
        encodings (list): List of encodings to try, in order of preference
    
    Returns:
        tuple: (content, encoding) or (None, None) if all encodings fail
    """
    for encoding in encodings:
        try:
            with open(file_path, 'r', encoding=encoding) as file:
                content = file.read()
                return content, encoding
        except UnicodeDecodeError:
            continue
        except Exception as e:
            logger.error(f"Error reading file {file_path} with {encoding} encoding: {e}")
            continue
    
    logger.error(f"Failed to read file {file_path} with any of the attempted encodings: {encodings}")
    return None, None

class RasPrj:
    
    def __init__(self):
        self.initialized = False
        self.boundaries_df = None  # New attribute to store boundary conditions
        self.suppress_logging = False  # Add suppress_logging as instance variable

    @log_call
    def initialize(self, project_folder, ras_exe_path, suppress_logging=True):
        """
        Initialize a RasPrj instance with project folder and RAS executable path.

        IMPORTANT: External users should use init_ras_project() function instead of this method.
        This method is intended for internal use only.

        Args:
            project_folder (str or Path): Path to the HEC-RAS project folder.
            ras_exe_path (str or Path): Path to the HEC-RAS executable.
            suppress_logging (bool, default=True): If True, suppresses initialization logging messages.

        Raises:
            ValueError: If no HEC-RAS project file is found in the specified folder.

        Note:
            This method sets up the RasPrj instance by:
            1. Finding the project file (.prj)
            2. Loading project data (plans, geometries, flows)
            3. Extracting boundary conditions
            4. Setting the initialization flag
            5. Loading RASMapper data (.rasmap)
        """
        self.suppress_logging = suppress_logging  # Store suppress_logging state
        self.project_folder = Path(project_folder)
        self.prj_file = self.find_ras_prj(self.project_folder)
        if self.prj_file is None:
            logger.error(f"No HEC-RAS project file found in {self.project_folder}")
            raise ValueError(f"No HEC-RAS project file found in {self.project_folder}. Please check the path and try again.")
        self.project_name = Path(self.prj_file).stem
        self.ras_exe_path = ras_exe_path
        
        # Set initialized to True before loading project data
        self.initialized = True
        
        # Now load the project data
        self._load_project_data()
        self.boundaries_df = self.get_boundary_conditions()
        
        # Load RASMapper data if available
        try:
            # Import here to avoid circular imports
            from .RasMap import RasMap
            self.rasmap_df = RasMap.initialize_rasmap_df(self)
        except ImportError:
            logger.warning("RasMap module not available. RASMapper data will not be loaded.")
            self.rasmap_df = pd.DataFrame(columns=['projection_path', 'profile_lines_path', 'soil_layer_path', 
                                                'infiltration_hdf_path', 'landcover_hdf_path', 'terrain_hdf_path', 
                                                'current_settings'])
        except Exception as e:
            logger.error(f"Error initializing RASMapper data: {e}")
            self.rasmap_df = pd.DataFrame(columns=['projection_path', 'profile_lines_path', 'soil_layer_path', 
                                                'infiltration_hdf_path', 'landcover_hdf_path', 'terrain_hdf_path', 
                                                'current_settings'])

        if not suppress_logging:
            logger.info(f"Initialization complete for project: {self.project_name}")
            logger.info(f"Plan entries: {len(self.plan_df)}, Flow entries: {len(self.flow_df)}, "
                         f"Unsteady entries: {len(self.unsteady_df)}, Geometry entries: {len(self.geom_df)}, "
                         f"Boundary conditions: {len(self.boundaries_df)}")
            logger.info(f"Geometry HDF files found: {self.plan_df['Geom_File'].notna().sum()}")
            logger.info(f"RASMapper data loaded: {not self.rasmap_df.empty}")

    @log_call
    def _load_project_data(self):
        """
        Load project data from the HEC-RAS project file.

        This internal method:
        1. Initializes DataFrames for plan, flow, unsteady, and geometry entries
        2. Ensures all required columns are present with appropriate default values
        3. Sets file paths for all components (geometries, flows, plans)

        Raises:
            Exception: If there's an error loading or processing project data.
        """
        try:
            # Load data frames
            self.unsteady_df = self._get_prj_entries('Unsteady')
            self.plan_df = self._get_prj_entries('Plan')
            self.flow_df = self._get_prj_entries('Flow')
            self.geom_df = self.get_geom_entries()
            
            # Ensure required columns exist
            self._ensure_required_columns()
            
            # Set paths for geometry and flow files
            self._set_file_paths()
            
            # Make sure all plan paths are properly set
            self._set_plan_paths()
            
        except Exception as e:
            logger.error(f"Error loading project data: {e}")
            raise

    def _ensure_required_columns(self):
        """Ensure all required columns exist in plan_df."""
        required_columns = [
            'plan_number', 'unsteady_number', 'geometry_number',
            'Geom File', 'Geom Path', 'Flow File', 'Flow Path', 'full_path'
        ]
        
        for col in required_columns:
            if col not in self.plan_df.columns:
                self.plan_df[col] = None
        
        if not self.plan_df['full_path'].any():
            self.plan_df['full_path'] = self.plan_df['plan_number'].apply(
                lambda x: str(self.project_folder / f"{self.project_name}.p{x}")
            )

    def _set_file_paths(self):
        """Set geometry and flow paths in plan_df."""
        for idx, row in self.plan_df.iterrows():
            try:
                self._set_geom_path(idx, row)
                self._set_flow_path(idx, row)
                
                if not self.suppress_logging:
                    logger.info(f"Plan {row['plan_number']} paths set up")
            except Exception as e:
                logger.error(f"Error processing plan file {row['plan_number']}: {e}")

    def _set_geom_path(self, idx: int, row: pd.Series):
        """Set geometry path for a plan entry."""
        if pd.notna(row['Geom File']):
            geom_path = self.project_folder / f"{self.project_name}.g{row['Geom File']}"
            self.plan_df.at[idx, 'Geom Path'] = str(geom_path)

    def _set_flow_path(self, idx: int, row: pd.Series):
        """Set flow path for a plan entry."""
        if pd.notna(row['Flow File']):
            prefix = 'u' if pd.notna(row['unsteady_number']) else 'f'
            flow_path = self.project_folder / f"{self.project_name}.{prefix}{row['Flow File']}"
            self.plan_df.at[idx, 'Flow Path'] = str(flow_path)

    def _set_plan_paths(self):
        """Set full path information for plan files and their associated geometry and flow files."""
        if self.plan_df.empty:
            logger.debug("Plan DataFrame is empty, no paths to set")
            return
        
        # Ensure full path is set for all plan entries
        if 'full_path' not in self.plan_df.columns or self.plan_df['full_path'].isna().any():
            self.plan_df['full_path'] = self.plan_df['plan_number'].apply(
                lambda x: str(self.project_folder / f"{self.project_name}.p{x}")
            )
        
        # Create the Geom Path and Flow Path columns if they don't exist
        if 'Geom Path' not in self.plan_df.columns:
            self.plan_df['Geom Path'] = None
        if 'Flow Path' not in self.plan_df.columns:
            self.plan_df['Flow Path'] = None
        
        # Update paths for each plan entry
        for idx, row in self.plan_df.iterrows():
            try:
                # Set geometry path if Geom File exists and Geom Path is missing or invalid
                if pd.notna(row['Geom File']):
                    geom_path = self.project_folder / f"{self.project_name}.g{row['Geom File']}"
                    self.plan_df.at[idx, 'Geom Path'] = str(geom_path)
                
                # Set flow path if Flow File exists and Flow Path is missing or invalid
                if pd.notna(row['Flow File']):
                    # Determine the prefix (u for unsteady, f for steady flow)
                    prefix = 'u' if pd.notna(row['unsteady_number']) else 'f'
                    flow_path = self.project_folder / f"{self.project_name}.{prefix}{row['Flow File']}"
                    self.plan_df.at[idx, 'Flow Path'] = str(flow_path)
                
                if not self.suppress_logging:
                    logger.debug(f"Plan {row['plan_number']} paths set up")
            except Exception as e:
                logger.error(f"Error setting paths for plan {row.get('plan_number', idx)}: {e}")

    def _get_geom_file_for_plan(self, plan_number):
        """
        Get the geometry file path for a given plan number.
        
        Args:
            plan_number (str): The plan number to find the geometry file for.
        
        Returns:
            str: The full path to the geometry HDF file, or None if not found.
        """
        plan_file_path = self.project_folder / f"{self.project_name}.p{plan_number}"
        content, encoding = read_file_with_fallback_encoding(plan_file_path)
        
        if content is None:
            return None
        
        try:
            for line in content.splitlines():
                if line.startswith("Geom File="):
                    geom_file = line.strip().split('=')[1]
                    geom_hdf_path = self.project_folder / f"{self.project_name}.{geom_file}.hdf"
                    if geom_hdf_path.exists():
                        return str(geom_hdf_path)
                    else:
                        return None
        except Exception as e:
            logger.error(f"Error reading plan file for geometry: {e}")
        return None


    @staticmethod
    @log_call
    def get_plan_value(
        plan_number_or_path: Union[str, Path],
        key: str,
        ras_object=None
    ) -> Any:
        """
        Retrieve a specific value from a HEC-RAS plan file.

        Parameters:
        plan_number_or_path (Union[str, Path]): The plan number (1 to 99) or full path to the plan file
        key (str): The key to retrieve from the plan file
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.

        Returns:
        Any: The value associated with the specified key

        Raises:
        ValueError: If the plan file is not found
        IOError: If there's an error reading the plan file
        """
        logger = get_logger(__name__)
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        # These must exactly match the keys in supported_plan_keys from _parse_plan_file
        valid_keys = {
            'Computation Interval',
            'DSS File',
            'Flow File',
            'Friction Slope Method',
            'Geom File',
            'Mapping Interval',
            'Plan Title',
            'Program Version',
            'Run HTab',
            'Run PostProcess',
            'Run Sediment',
            'Run UNet',
            'Run WQNet',
            'Short Identifier',
            'Simulation Date',
            'UNET D1 Cores',
            'UNET D2 Cores',
            'PS Cores',
            'UNET Use Existing IB Tables',
            'UNET 1D Methodology',
            'UNET D2 SolverType',
            'UNET D2 Name',
            'description'  # Special case for description block
        }

        if key not in valid_keys:
            logger.warning(f"Unknown key: {key}. Valid keys are: {', '.join(sorted(valid_keys))}")
            return None

        plan_file_path = Path(plan_number_or_path)
        if not plan_file_path.is_file():
            plan_file_path = RasUtils.get_plan_path(plan_number_or_path, ras_object)
            if not plan_file_path.exists():
                logger.error(f"Plan file not found: {plan_file_path}")
                raise ValueError(f"Plan file not found: {plan_file_path}")

        try:
            with open(plan_file_path, 'r') as file:
                content = file.read()
        except IOError as e:
            logger.error(f"Error reading plan file {plan_file_path}: {e}")
            raise

        if key == 'description':
            match = re.search(r'Begin DESCRIPTION(.*?)END DESCRIPTION', content, re.DOTALL)
            return match.group(1).strip() if match else None
        else:
            pattern = f"{key}=(.*)"
            match = re.search(pattern, content)
            if match:
                value = match.group(1).strip()
                # Convert core values to integers
                if key in ['UNET D1 Cores', 'UNET D2 Cores', 'PS Cores']:
                    try:
                        return int(value)
                    except ValueError:
                        logger.warning(f"Could not convert {key} value '{value}' to integer")
                        return None
                return value
            
            # Use DEBUG level for missing core values, ERROR for other missing keys
            if key in ['UNET D1 Cores', 'UNET D2 Cores', 'PS Cores']:
                logger.debug(f"Core setting '{key}' not found in plan file")
            else:
                logger.error(f"Key '{key}' not found in the plan file")
            return None

    def _parse_plan_file(self, plan_file_path):
        """
        Parse a plan file and extract critical information.
        
        Args:
            plan_file_path (Path): Path to the plan file.
        
        Returns:
            dict: Dictionary containing extracted plan information.
        """
        plan_info = {}
        content, encoding = read_file_with_fallback_encoding(plan_file_path)
        
        if content is None:
            logger.error(f"Could not read plan file {plan_file_path} with any supported encoding")
            return plan_info
        
        try:
            # Extract description
            description_match = re.search(r'Begin DESCRIPTION(.*?)END DESCRIPTION', content, re.DOTALL)
            if description_match:
                plan_info['description'] = description_match.group(1).strip()
            
            # BEGIN Exception to Style Guide, this is needed to keep the key names consistent with the plan file keys.
            
            # Extract other critical information
            supported_plan_keys = {
                'Computation Interval': r'Computation Interval=(.+)',
                'DSS File': r'DSS File=(.+)',
                'Flow File': r'Flow File=(.+)',
                'Friction Slope Method': r'Friction Slope Method=(.+)',
                'Geom File': r'Geom File=(.+)',
                'Mapping Interval': r'Mapping Interval=(.+)',
                'Plan Title': r'Plan Title=(.+)',
                'Program Version': r'Program Version=(.+)',
                'Run HTab': r'Run HTab=(.+)',
                'Run PostProcess': r'Run PostProcess=(.+)',
                'Run Sediment': r'Run Sediment=(.+)',
                'Run UNet': r'Run UNet=(.+)',
                'Run WQNet': r'Run WQNet=(.+)',
                'Short Identifier': r'Short Identifier=(.+)',
                'Simulation Date': r'Simulation Date=(.+)',
                'UNET D1 Cores': r'UNET D1 Cores=(.+)',
                'UNET D2 Cores': r'UNET D2 Cores=(.+)',
                'PS Cores': r'PS Cores=(.+)',
                'UNET Use Existing IB Tables': r'UNET Use Existing IB Tables=(.+)',
                'UNET 1D Methodology': r'UNET 1D Methodology=(.+)',
                'UNET D2 SolverType': r'UNET D2 SolverType=(.+)',
                'UNET D2 Name': r'UNET D2 Name=(.+)'
            }
            
            # END Exception to Style Guide
            
            # First, explicitly set None for core values
            core_keys = ['UNET D1 Cores', 'UNET D2 Cores', 'PS Cores']
            for key in core_keys:
                plan_info[key] = None
            
            for key, pattern in supported_plan_keys.items():
                match = re.search(pattern, content)
                if match:
                    value = match.group(1).strip()
                    # Convert core values to integers if they exist
                    if key in core_keys and value:
                        try:
                            value = int(value)
                        except ValueError:
                            logger.warning(f"Could not convert {key} value '{value}' to integer in plan file {plan_file_path}")
                            value = None
                    plan_info[key] = value
                elif key in core_keys:
                    logger.debug(f"Core setting '{key}' not found in plan file {plan_file_path}")
            
            logger.debug(f"Parsed plan file: {plan_file_path} using {encoding} encoding")
        except Exception as e:
            logger.error(f"Error parsing plan file {plan_file_path}: {e}")
        
        return plan_info

    @log_call
    def _get_prj_entries(self, entry_type):
        """
        Extract entries of a specific type from the HEC-RAS project file.
        
        Args:
            entry_type (str): The type of entry to extract (e.g., 'Plan', 'Flow', 'Unsteady', 'Geom').
        
        Returns:
            pd.DataFrame: A DataFrame containing the extracted entries.
        
        Raises:
            Exception: If there's an error reading or processing the project file.
        """
        entries = []
        pattern = re.compile(rf"{entry_type} File=(\w+)")

        try:
            with open(self.prj_file, 'r', encoding='utf-8') as file:
                for line in file:
                    match = pattern.match(line.strip())
                    if match:
                        file_name = match.group(1)
                        full_path = str(self.project_folder / f"{self.project_name}.{file_name}")
                        entry_number = file_name[1:]
                        
                        entry = {
                            f'{entry_type.lower()}_number': entry_number,
                            'full_path': full_path
                        }
                        
                        # Handle Unsteady entries
                        if entry_type == 'Unsteady':
                            entry.update(self._process_unsteady_entry(entry_number, full_path))
                        else:
                            entry.update(self._process_default_entry())
                        
                        # Handle Plan entries
                        if entry_type == 'Plan':
                            entry.update(self._process_plan_entry(entry_number, full_path))
                        
                        entries.append(entry)
            
            df = pd.DataFrame(entries)
            return self._format_dataframe(df, entry_type)
        
        except Exception as e:
            logger.error(f"Error in _get_prj_entries for {entry_type}: {e}")
            raise

    def _process_unsteady_entry(self, entry_number: str, full_path: str) -> dict:
        """Process unsteady entry data."""
        entry = {'unsteady_number': entry_number}
        unsteady_info = self._parse_unsteady_file(Path(full_path))
        entry.update(unsteady_info)
        return entry

    def _process_default_entry(self) -> dict:
        """Process default entry data."""
        return {
            'unsteady_number': None,
            'geometry_number': None
        }

    def _process_plan_entry(self, entry_number: str, full_path: str) -> dict:
        """Process plan entry data."""
        entry = {}
        plan_info = self._parse_plan_file(Path(full_path))
        
        if plan_info:
            entry.update(self._process_flow_file(plan_info))
            entry.update(self._process_geom_file(plan_info))
            
            # Add remaining plan info
            for key, value in plan_info.items():
                if key not in ['Flow File', 'Geom File']:
                    entry[key] = value
            
            # Add HDF results path
            hdf_results_path = self.project_folder / f"{self.project_name}.p{entry_number}.hdf"
            entry['HDF_Results_Path'] = str(hdf_results_path) if hdf_results_path.exists() else None
        
        return entry

    def _process_flow_file(self, plan_info: dict) -> dict:
        """Process flow file information from plan info."""
        flow_file = plan_info.get('Flow File')
        if flow_file and flow_file.startswith('u'):
            return {
                'unsteady_number': flow_file[1:],
                'Flow File': flow_file[1:]
            }
        return {
            'unsteady_number': None,
            'Flow File': flow_file[1:] if flow_file and flow_file.startswith('f') else None
        }

    def _process_geom_file(self, plan_info: dict) -> dict:
        """Process geometry file information from plan info."""
        geom_file = plan_info.get('Geom File')
        if geom_file and geom_file.startswith('g'):
            return {
                'geometry_number': geom_file[1:],
                'Geom File': geom_file[1:]
            }
        return {
            'geometry_number': None,
            'Geom File': None
        }

    def _parse_unsteady_file(self, unsteady_file_path):
        """
        Parse an unsteady flow file and extract critical information.
        
        Args:
            unsteady_file_path (Path): Path to the unsteady flow file.
        
        Returns:
            dict: Dictionary containing extracted unsteady flow information.
        """
        unsteady_info = {}
        content, encoding = read_file_with_fallback_encoding(unsteady_file_path)
        
        if content is None:
            return unsteady_info
        
        try:
            # BEGIN Exception to Style Guide, this is needed to keep the key names consistent with the unsteady file keys.
            
            supported_unsteady_keys = {
                'Flow Title': r'Flow Title=(.+)',
                'Program Version': r'Program Version=(.+)',
                'Use Restart': r'Use Restart=(.+)',
                'Precipitation Mode': r'Precipitation Mode=(.+)',
                'Wind Mode': r'Wind Mode=(.+)',
                'Met BC=Precipitation|Mode': r'Met BC=Precipitation\|Mode=(.+)',
                'Met BC=Evapotranspiration|Mode': r'Met BC=Evapotranspiration\|Mode=(.+)',
                'Met BC=Precipitation|Expanded View': r'Met BC=Precipitation\|Expanded View=(.+)',
                'Met BC=Precipitation|Constant Units': r'Met BC=Precipitation\|Constant Units=(.+)',
                'Met BC=Precipitation|Gridded Source': r'Met BC=Precipitation\|Gridded Source=(.+)'
            }
            
            # END Exception to Style Guide
            
            for key, pattern in supported_unsteady_keys.items():
                match = re.search(pattern, content)
                if match:
                    unsteady_info[key] = match.group(1).strip()
        
        except Exception as e:
            logger.error(f"Error parsing unsteady file {unsteady_file_path}: {e}")
        
        return unsteady_info

    @property
    def is_initialized(self):
        """
        Check if the RasPrj instance has been initialized.

        Returns:
            bool: True if the instance has been initialized, False otherwise.
        """
        return self.initialized

    @log_call
    def check_initialized(self):
        """
        Ensure that the RasPrj instance has been initialized before operations.

        Raises:
            RuntimeError: If the project has not been initialized with init_ras_project().

        Note:
            This method is called by other methods to validate the project state before
            performing operations. Users typically don't need to call this directly.
        """
        if not self.initialized:
            raise RuntimeError("Project not initialized. Call init_ras_project() first.")

    @staticmethod
    @log_call
    def find_ras_prj(folder_path):
        """
        Find the appropriate HEC-RAS project file (.prj) in the given folder.
        
        This method uses several strategies to locate the correct project file:
        1. If only one .prj file exists, it is selected
        2. If multiple .prj files exist, it tries to match with .rasmap file names
        3. As a last resort, it scans files for "Proj Title=" content
        
        Args:
            folder_path (str or Path): Path to the folder containing HEC-RAS files.
        
        Returns:
            Path: The full path of the selected .prj file or None if no suitable file is found.
        
        Example:
            >>> project_file = RasPrj.find_ras_prj("/path/to/ras_project")
            >>> if project_file:
            ...     print(f"Found project file: {project_file}")
            ... else:
            ...     print("No project file found")
        """
        folder_path = Path(folder_path)
        prj_files = list(folder_path.glob("*.prj"))
        rasmap_files = list(folder_path.glob("*.rasmap"))
        if len(prj_files) == 1:
            return prj_files[0].resolve()
        if len(prj_files) > 1:
            if len(rasmap_files) == 1:
                base_filename = rasmap_files[0].stem
                prj_file = folder_path / f"{base_filename}.prj"
                if prj_file.exists():
                    return prj_file.resolve()
            for prj_file in prj_files:
                try:
                    with open(prj_file, 'r') as file:
                        content = file.read()
                        if "Proj Title=" in content:
                            return prj_file.resolve()
                except Exception:
                    continue
        return None


    @log_call
    def get_project_name(self):
        """
        Get the name of the HEC-RAS project (without file extension).

        Returns:
            str: The name of the project.

        Raises:
            RuntimeError: If the project has not been initialized.
        
        Example:
            >>> project_name = ras.get_project_name()
            >>> print(f"Working with project: {project_name}")
        """
        self.check_initialized()
        return self.project_name

    @log_call
    def get_prj_entries(self, entry_type):
        """
        Get entries of a specific type from the HEC-RAS project.

        This method extracts files of the specified type from the project file,
        parses their content, and returns a structured DataFrame.

        Args:
            entry_type (str): The type of entry to retrieve ('Plan', 'Flow', 'Unsteady', or 'Geom').

        Returns:
            pd.DataFrame: A DataFrame containing the requested entries with appropriate columns.

        Raises:
            RuntimeError: If the project has not been initialized.
        
        Example:
            >>> # Get all geometry files in the project
            >>> geom_entries = ras.get_prj_entries('Geom')
            >>> print(f"Project contains {len(geom_entries)} geometry files")
        
        Note:
            This is a generic method. For specific file types, use the dedicated methods:
            get_plan_entries(), get_flow_entries(), get_unsteady_entries(), get_geom_entries()
        """
        self.check_initialized()
        return self._get_prj_entries(entry_type)

    @log_call
    def get_plan_entries(self):
        """
        Get all plan entries from the HEC-RAS project.
        
        Returns a DataFrame containing all plan files (.p*) in the project
        with their associated properties, paths and settings.

        Returns:
            pd.DataFrame: A DataFrame with columns including 'plan_number', 'full_path',
                          'unsteady_number', 'geometry_number', etc.

        Raises:
            RuntimeError: If the project has not been initialized.
        
        Example:
            >>> plan_entries = ras.get_plan_entries()
            >>> print(f"Project contains {len(plan_entries)} plan files")
            >>> # Display the first plan's properties
            >>> if not plan_entries.empty:
            ...     print(plan_entries.iloc[0])
        """
        self.check_initialized()
        return self._get_prj_entries('Plan')

    @log_call
    def get_flow_entries(self):
        """
        Get all flow entries from the HEC-RAS project.
        
        Returns a DataFrame containing all flow files (.f*) in the project
        with their associated properties and paths.

        Returns:
            pd.DataFrame: A DataFrame with columns including 'flow_number', 'full_path', etc.

        Raises:
            RuntimeError: If the project has not been initialized.
        
        Example:
            >>> flow_entries = ras.get_flow_entries()
            >>> print(f"Project contains {len(flow_entries)} flow files")
            >>> # Display the first flow file's properties
            >>> if not flow_entries.empty:
            ...     print(flow_entries.iloc[0])
        """
        self.check_initialized()
        return self._get_prj_entries('Flow')

    @log_call
    def get_unsteady_entries(self):
        """
        Get all unsteady flow entries from the HEC-RAS project.
        
        Returns a DataFrame containing all unsteady flow files (.u*) in the project
        with their associated properties and paths.

        Returns:
            pd.DataFrame: A DataFrame with columns including 'unsteady_number', 'full_path', etc.

        Raises:
            RuntimeError: If the project has not been initialized.
        
        Example:
            >>> unsteady_entries = ras.get_unsteady_entries()
            >>> print(f"Project contains {len(unsteady_entries)} unsteady flow files")
            >>> # Display the first unsteady file's properties
            >>> if not unsteady_entries.empty:
            ...     print(unsteady_entries.iloc[0])
        """
        self.check_initialized()
        return self._get_prj_entries('Unsteady')

    @log_call
    def get_geom_entries(self):
        """
        Get all geometry entries from the HEC-RAS project.
        
        Returns a DataFrame containing all geometry files (.g*) in the project
        with their associated properties, paths and HDF links.

        Returns:
            pd.DataFrame: A DataFrame with columns including 'geom_number', 'full_path', 
                          'hdf_path', etc.

        Raises:
            RuntimeError: If the project has not been initialized.
        
        Example:
            >>> geom_entries = ras.get_geom_entries()
            >>> print(f"Project contains {len(geom_entries)} geometry files")
            >>> # Display the first geometry file's properties
            >>> if not geom_entries.empty:
            ...     print(geom_entries.iloc[0])
        """
        self.check_initialized()
        geom_pattern = re.compile(r'Geom File=(\w+)')
        geom_entries = []

        try:
            with open(self.prj_file, 'r') as f:
                for line in f:
                    match = geom_pattern.search(line)
                    if match:
                        geom_entries.append(match.group(1))
        
            geom_df = pd.DataFrame({'geom_file': geom_entries})
            geom_df['geom_number'] = geom_df['geom_file'].str.extract(r'(\d+)$')
            geom_df['full_path'] = geom_df['geom_file'].apply(lambda x: str(self.project_folder / f"{self.project_name}.{x}"))
            geom_df['hdf_path'] = geom_df['full_path'] + ".hdf"
            
            if not self.suppress_logging:  # Only log if suppress_logging is False
                logger.info(f"Found {len(geom_df)} geometry entries")
            return geom_df
        except Exception as e:
            logger.error(f"Error reading geometry entries from project file: {e}")
            raise
    
    @log_call
    def get_hdf_entries(self):
        """
        Get all plan entries that have associated HDF results files.
        
        This method identifies which plans have been successfully computed
        and have HDF results available for further analysis.
        
        Returns:
            pd.DataFrame: A DataFrame containing plan entries with HDF results.
                          Returns an empty DataFrame if no results are found.
        
        Raises:
            RuntimeError: If the project has not been initialized.
        
        Example:
            >>> hdf_entries = ras.get_hdf_entries()
            >>> if hdf_entries.empty:
            ...     print("No computed results found. Run simulations first.")
            ... else:
            ...     print(f"Found results for {len(hdf_entries)} plans")
        
        Note:
            This is useful for identifying which plans have been successfully computed
            and can be used for further results analysis.
        """
        self.check_initialized()
        
        hdf_entries = self.plan_df[self.plan_df['HDF_Results_Path'].notna()].copy()
        
        if hdf_entries.empty:
            return pd.DataFrame(columns=self.plan_df.columns)
        
        return hdf_entries
    
    
    @log_call
    def print_data(self):
        """
        Print a comprehensive summary of all RAS Object data for this instance.
        
        This method outputs:
        - Project information (name, folder, file paths)
        - Summary of plans, flows, geometries, and unsteady files
        - HDF results availability
        - Boundary conditions
        
        Useful for debugging, validation, and exploring project structure.

        Raises:
            RuntimeError: If the project has not been initialized.
        
        Example:
            >>> ras.print_data()  # Displays complete project overview
        """
        self.check_initialized()
        logger.info(f"--- Data for {self.project_name} ---")
        logger.info(f"Project folder: {self.project_folder}")
        logger.info(f"PRJ file: {self.prj_file}")
        logger.info(f"HEC-RAS executable: {self.ras_exe_path}")
        logger.info("Plan files:")
        logger.info(f"\n{self.plan_df}")
        logger.info("Flow files:")
        logger.info(f"\n{self.flow_df}")
        logger.info("Unsteady flow files:")
        logger.info(f"\n{self.unsteady_df}")
        logger.info("Geometry files:")
        logger.info(f"\n{self.geom_df}")
        logger.info("HDF entries:")
        logger.info(f"\n{self.get_hdf_entries()}")
        logger.info("Boundary conditions:")
        logger.info(f"\n{self.boundaries_df}")
        logger.info("----------------------------")

    @log_call
    def get_boundary_conditions(self) -> pd.DataFrame:
        """
        Extract boundary conditions from unsteady flow files into a structured DataFrame.

        This method:
        1. Parses all unsteady flow files to extract boundary condition information
        2. Creates a structured DataFrame with boundary locations, types and parameters
        3. Links boundary conditions to their respective unsteady flow files

        Supported boundary condition types include:
        - Flow Hydrograph
        - Stage Hydrograph
        - Normal Depth
        - Lateral Inflow Hydrograph
        - Uniform Lateral Inflow Hydrograph
        - Gate Opening

        Returns:
            pd.DataFrame: A DataFrame containing detailed boundary condition information.
                              Returns an empty DataFrame if no unsteady flow files are present.
        
        Example:
            >>> boundaries = ras.get_boundary_conditions()
            >>> if not boundaries.empty:
            ...     print(f"Found {len(boundaries)} boundary conditions")
            ...     # Show flow hydrographs only
            ...     flow_hydrographs = boundaries[boundaries['bc_type'] == 'Flow Hydrograph']
            ...     print(f"Project has {len(flow_hydrographs)} flow hydrographs")
        
        Note:
            To see unparsed boundary condition lines for debugging, set logging to DEBUG:
            import logging
            logging.getLogger().setLevel(logging.DEBUG)
        """
        boundary_data = []
        
        # Check if unsteady_df is empty
        if self.unsteady_df.empty:
            logger.info("No unsteady flow files found in the project.")
            return pd.DataFrame()  # Return an empty DataFrame
        
        for _, row in self.unsteady_df.iterrows():
            unsteady_file_path = row['full_path']
            unsteady_number = row['unsteady_number']
            
            try:
                with open(unsteady_file_path, 'r') as file:
                    content = file.read()
            except IOError as e:
                logger.error(f"Error reading unsteady file {unsteady_file_path}: {e}")
                continue
                
            bc_blocks = re.split(r'(?=Boundary Location=)', content)[1:]
            
            for i, block in enumerate(bc_blocks, 1):
                bc_info, unparsed_lines = self._parse_boundary_condition(block, unsteady_number, i)
                boundary_data.append(bc_info)
                
                if unparsed_lines:
                    logger.debug(f"Unparsed lines for boundary condition {i} in unsteady file {unsteady_number}:\n{unparsed_lines}")
        
        if not boundary_data:
            logger.info("No boundary conditions found in unsteady flow files.")
            return pd.DataFrame()  # Return an empty DataFrame if no boundary conditions were found
        
        boundaries_df = pd.DataFrame(boundary_data)
        
        # Merge with unsteady_df to get relevant unsteady flow file information
        merged_df = pd.merge(boundaries_df, self.unsteady_df, 
                             left_on='unsteady_number', right_on='unsteady_number', how='left')
        
        return merged_df

    def _parse_boundary_condition(self, block: str, unsteady_number: str, bc_number: int) -> Tuple[Dict, str]:
        lines = block.split('\n')
        bc_info = {
            'unsteady_number': unsteady_number,
            'boundary_condition_number': bc_number
        }
        
        parsed_lines = set()
        
        # Parse Boundary Location
        boundary_location = lines[0].split('=')[1].strip()
        fields = [field.strip() for field in boundary_location.split(',')]
        bc_info.update({
            'river_reach_name': fields[0] if len(fields) > 0 else '',
            'river_station': fields[1] if len(fields) > 1 else '',
            'storage_area_name': fields[2] if len(fields) > 2 else '',
            'pump_station_name': fields[3] if len(fields) > 3 else ''
        })
        parsed_lines.add(0)
        
        # Determine BC Type
        bc_types = {
            'Flow Hydrograph=': 'Flow Hydrograph',
            'Lateral Inflow Hydrograph=': 'Lateral Inflow Hydrograph',
            'Uniform Lateral Inflow Hydrograph=': 'Uniform Lateral Inflow Hydrograph',
            'Stage Hydrograph=': 'Stage Hydrograph',
            'Friction Slope=': 'Normal Depth',
            'Gate Name=': 'Gate Opening'
        }
        
        bc_info['bc_type'] = 'Unknown'
        bc_info['hydrograph_type'] = None
        for i, line in enumerate(lines[1:], 1):
            for key, bc_type in bc_types.items():
                if line.startswith(key):
                    bc_info['bc_type'] = bc_type
                    if 'Hydrograph' in bc_type:
                        bc_info['hydrograph_type'] = bc_type
                    parsed_lines.add(i)
                    break
            if bc_info['bc_type'] != 'Unknown':
                break
        
        # Parse other fields
        known_fields = ['Interval', 'DSS Path', 'Use DSS', 'Use Fixed Start Time', 'Fixed Start Date/Time',
                        'Is Critical Boundary', 'Critical Boundary Flow', 'DSS File']
        for i, line in enumerate(lines):
            if '=' in line:
                key, value = line.split('=', 1)
                key = key.strip()
                if key in known_fields:
                    bc_info[key] = value.strip()
                    parsed_lines.add(i)
        
        # Handle hydrograph values
        bc_info['hydrograph_num_values'] = 0
        if bc_info['hydrograph_type']:
            hydrograph_key = f"{bc_info['hydrograph_type']}="
            hydrograph_line = next((line for i, line in enumerate(lines) if line.startswith(hydrograph_key)), None)
            if hydrograph_line:
                hydrograph_index = lines.index(hydrograph_line)
                values_count = int(hydrograph_line.split('=')[1].strip())
                bc_info['hydrograph_num_values'] = values_count
                if values_count > 0:
                    values = ' '.join(lines[hydrograph_index + 1:]).split()[:values_count]
                    bc_info['hydrograph_values'] = values
                    parsed_lines.update(range(hydrograph_index, hydrograph_index + (values_count // 5) + 2))
        
        # Collect unparsed lines
        unparsed_lines = '\n'.join(line for i, line in enumerate(lines) if i not in parsed_lines and line.strip())
        
        if unparsed_lines:
            logger.debug(f"Unparsed lines for boundary condition {bc_number} in unsteady file {unsteady_number}:\n{unparsed_lines}")
        
        return bc_info, unparsed_lines

    @log_call
    def _format_dataframe(self, df, entry_type):
        """
        Format the DataFrame according to the desired column structure.
        
        Args:
            df (pd.DataFrame): The DataFrame to format.
            entry_type (str): The type of entry (e.g., 'Plan', 'Flow', 'Unsteady', 'Geom').
        
        Returns:
            pd.DataFrame: The formatted DataFrame.
        """
        if df.empty:
            return df
        
        if entry_type == 'Plan':
            # Set required column order
            first_cols = ['plan_number', 'unsteady_number', 'geometry_number']
            
            # Standard plan key columns in the exact order specified
            plan_key_cols = [
                'Plan Title', 'Program Version', 'Short Identifier', 'Simulation Date',
                'Std Step Tol', 'Computation Interval', 'Output Interval', 'Instantaneous Interval',
                'Mapping Interval', 'Run HTab', 'Run UNet', 'Run Sediment', 'Run PostProcess',
                'Run WQNet', 'Run RASMapper', 'UNET Use Existing IB Tables', 'HDF_Results_Path',
                'UNET 1D Methodology', 'Write IC File', 'Write IC File at Fixed DateTime',
                'IC Time', 'Write IC File Reoccurance', 'Write IC File at Sim End'
            ]
            
            # Additional convenience columns
            file_path_cols = ['Geom File', 'Geom Path', 'Flow File', 'Flow Path']
            
            # Special columns that must be preserved
            special_cols = ['HDF_Results_Path']
            
            # Build the final column list
            all_cols = first_cols.copy()
            
            # Add plan key columns if they exist
            for col in plan_key_cols:
                if col in df.columns and col not in all_cols and col not in special_cols:
                    all_cols.append(col)
            
            # Add any remaining columns not explicitly specified
            other_cols = [col for col in df.columns if col not in all_cols + file_path_cols + special_cols + ['full_path']]
            all_cols.extend(other_cols)
            
            # Add HDF_Results_Path if it exists (ensure it comes before file paths)
            for special_col in special_cols:
                if special_col in df.columns and special_col not in all_cols:
                    all_cols.append(special_col)
            
            # Add file path columns at the end
            all_cols.extend(file_path_cols)
            
            # Rename plan_number column
            df = df.rename(columns={f'{entry_type.lower()}_number': 'plan_number'})
            
            # Fill in missing columns with None
            for col in all_cols:
                if col not in df.columns:
                    df[col] = None
            
            # Make sure full_path column is preserved and included
            if 'full_path' in df.columns and 'full_path' not in all_cols:
                all_cols.append('full_path')
            
            # Return DataFrame with specified column order
            cols_to_return = [col for col in all_cols if col in df.columns]
            return df[cols_to_return]
        
        return df

    @log_call
    def _get_prj_entries(self, entry_type):
        """
        Extract entries of a specific type from the HEC-RAS project file.
        """
        entries = []
        pattern = re.compile(rf"{entry_type} File=(\w+)")

        try:
            with open(self.prj_file, 'r') as file:
                for line in file:
                    match = pattern.match(line.strip())
                    if match:
                        file_name = match.group(1)
                        full_path = str(self.project_folder / f"{self.project_name}.{file_name}")
                        entry = self._create_entry(entry_type, file_name, full_path)
                        entries.append(entry)
        
            return self._format_dataframe(pd.DataFrame(entries), entry_type)
        
        except Exception as e:
            logger.error(f"Error in _get_prj_entries for {entry_type}: {e}")
            raise

    def _create_entry(self, entry_type, file_name, full_path):
        """Helper method to create entry dictionary."""
        entry_number = file_name[1:]
        entry = {
            f'{entry_type.lower()}_number': entry_number,
            'full_path': full_path,
            'unsteady_number': None,
            'geometry_number': None
        }
        
        if entry_type == 'Unsteady':
            entry['unsteady_number'] = entry_number
            entry.update(self._parse_unsteady_file(Path(full_path)))
        elif entry_type == 'Plan':
            self._update_plan_entry(entry, entry_number, full_path)
        
        return entry

    def _update_plan_entry(self, entry, entry_number, full_path):
        """Helper method to update plan entry with additional information."""
        plan_info = self._parse_plan_file(Path(full_path))
        if plan_info:
            # Handle Flow File
            flow_file = plan_info.get('Flow File')
            if flow_file:
                if flow_file.startswith('u'):
                    entry.update({'unsteady_number': flow_file[1:], 'Flow File': flow_file[1:]})
                else:
                    entry['Flow File'] = flow_file[1:] if flow_file.startswith('f') else None
            
            # Handle Geom File
            geom_file = plan_info.get('Geom File')
            if geom_file and geom_file.startswith('g'):
                entry.update({'geometry_number': geom_file[1:], 'Geom File': geom_file[1:]})
            
            # Add remaining plan info
            entry.update({k: v for k, v in plan_info.items() if k not in ['Flow File', 'Geom File']})
            
            # Add HDF results path
            hdf_path = self.project_folder / f"{self.project_name}.p{entry_number}.hdf"
            entry['HDF_Results_Path'] = str(hdf_path) if hdf_path.exists() else None


# Create a global instance named 'ras'
# Defining the global instance allows the init_ras_project function to initialize the project.
# This only happens on the library initialization, not when the user calls init_ras_project.
ras = RasPrj()

# END OF CLASS DEFINITION


# START OF FUNCTION DEFINITIONS

@log_call
def init_ras_project(ras_project_folder, ras_version=None, ras_object=None):
    """
    Initialize a RAS project for use with the ras-commander library.

    This is the primary function for setting up a HEC-RAS project. It:
    1. Finds the project file (.prj) in the specified folder
    2. Identifies the appropriate HEC-RAS executable
    3. Loads project data (plans, geometries, flows)
    4. Creates dataframes containing project components

    Args:
        ras_project_folder (str or Path): The path to the RAS project folder.
        ras_version (str, optional): The version of RAS to use (e.g., "6.6").
                                    Can also be a full path to the Ras.exe file.
                                    If None, will attempt to detect from plan files.
        ras_object (RasPrj, optional): If None, updates the global 'ras' object.
                                       If a RasPrj instance, updates that instance.
                                       If any other value, creates and returns a new RasPrj instance.

    Returns:
        RasPrj: An initialized RasPrj instance.
        
    Raises:
        FileNotFoundError: If the specified project folder doesn't exist.
        ValueError: If no HEC-RAS project file is found in the folder.
        
    Example:
        >>> # Initialize using the global 'ras' object (most common)
        >>> init_ras_project("/path/to/project", "6.6")
        >>> print(f"Initialized project: {ras.project_name}")
        >>>
        >>> # Create a new RasPrj instance
        >>> my_project = init_ras_project("/path/to/project", "6.6", "new")
        >>> print(f"Created project instance: {my_project.project_name}")
    """
    project_folder = Path(ras_project_folder)
    if not project_folder.exists():
        logger.error(f"The specified RAS project folder does not exist: {project_folder}")
        raise FileNotFoundError(f"The specified RAS project folder does not exist: {project_folder}. Please check the path and try again.")

    # Determine which RasPrj instance to use
    if ras_object is None:
        # Use the global 'ras' object
        logger.debug("Initializing global 'ras' object via init_ras_project function.")
        ras_object = ras
    elif not isinstance(ras_object, RasPrj):
        # Create a new RasPrj instance
        logger.debug("Creating a new RasPrj instance.")
        ras_object = RasPrj()
    
    ras_exe_path = None
    
    # Use version specified by user if provided
    if ras_version is not None:
        ras_exe_path = get_ras_exe(ras_version)
        if ras_exe_path == "Ras.exe" and ras_version != "Ras.exe":
            logger.warning(f"HEC-RAS Version {ras_version} was not found. Running HEC-RAS will fail.")
    else:
        # No version specified, try to detect from plan files
        detected_version = None
        logger.info("No HEC-RAS Version Specified.Attempting to detect HEC-RAS version from plan files.")
        
        # Look for .pXX files in project folder
        logger.info(f"Searching for plan files in {project_folder}")
        # Search for any file with .p01 through .p99 extension, regardless of base name
        plan_files = list(project_folder.glob("*.p[0-9][0-9]"))
        
        if not plan_files:
            logger.info(f"No plan files found in {project_folder}")
        
        for plan_file in plan_files:
            logger.info(f"Found plan file: {plan_file.name}")
            content, encoding = read_file_with_fallback_encoding(plan_file)
            
            if not content:
                logger.info(f"Could not read content from {plan_file.name}")
                continue
                
            logger.info(f"Successfully read plan file with {encoding} encoding")
            
            # Look for Program Version in plan file
            for line in content.splitlines():
                if line.startswith("Program Version="):
                    version = line.split("=")[1].strip()
                    logger.info(f"Found Program Version={version} in {plan_file.name}")
                    
                    # Replace 00 in version string if present
                    if "00" in version:
                        version = version.replace("00", "0")
                    
                    # Try to get RAS executable for this version
                    test_exe_path = get_ras_exe(version)
                    logger.info(f"Checking RAS executable path: {test_exe_path}")
                    
                    if test_exe_path != "Ras.exe":
                        detected_version = version
                        ras_exe_path = test_exe_path
                        logger.debug(f"Found valid HEC-RAS version {version} in plan file {plan_file.name}")
                        break
                    else:
                        logger.info(f"Version {version} not found in default installation path")
            
            if detected_version:
                break
        
        if not detected_version:
            logger.error("No valid HEC-RAS version found in any plan files.")
            ras_exe_path = "Ras.exe"
            logger.warning("No valid HEC-RAS version was detected. Running HEC-RAS will fail.")
    
    # Initialize or re-initialize with the determined executable path
    ras_object.initialize(project_folder, ras_exe_path)
    
    # Always update the global ras object as well
    if ras_object is not ras:
        ras.initialize(project_folder, ras_exe_path)
        logger.debug("Global 'ras' object also updated to match the new project.")
    
    logger.debug(f"Project initialized. Project folder: {ras_object.project_folder}")
    logger.debug(f"Using HEC-RAS executable: {ras_exe_path}")
    return ras_object

@log_call
def get_ras_exe(ras_version=None):
    """
    Determine the HEC-RAS executable path based on the input.
    
    This function attempts to find the HEC-RAS executable in the following order:
    1. If ras_version is a valid file path to an .exe file, use that path
    2. If ras_version is a known version number, use default installation path
    3. If global 'ras' object has ras_exe_path, use that
    4. As a fallback, return "Ras.exe" but log an error
    
    Args:
        ras_version (str, optional): Either a version number or a full path to the HEC-RAS executable.
    
    Returns:
        str: The full path to the HEC-RAS executable or "Ras.exe" if not found.
    
    Note:
        - HEC-RAS version numbers include: "6.6", "6.5", "6.4.1", "6.3", etc.
        - The default installation path follows: C:/Program Files (x86)/HEC/HEC-RAS/{version}/Ras.exe
        - Returns "Ras.exe" if no valid path is found, with error logged
        - Allows the library to function even without HEC-RAS installed
    """
    if ras_version is None:
        if hasattr(ras, 'ras_exe_path') and ras.ras_exe_path:
            logger.debug(f"Using HEC-RAS executable from global 'ras' object: {ras.ras_exe_path}")
            return ras.ras_exe_path
        else:
            default_path = "Ras.exe"
            logger.debug(f"No HEC-RAS version specified and global 'ras' object not initialized or missing ras_exe_path.")
            logger.warning(f"HEC-RAS is not installed or version not specified. Running HEC-RAS will fail unless a valid installed version is specified.")
            return default_path
    
    ras_version_numbers = [
        "6.6", "6.5", "6.4.1", "6.3.1", "6.3", "6.2", "6.1", "6.0",
        "5.0.7", "5.0.6", "5.0.5", "5.0.4", "5.0.3", "5.0.1", "5.0",
        "4.1", "4.0", "3.1.3", "3.1.2", "3.1.1", "3.0", "2.2"
    ]
    
    # Check if input is a direct path to an executable
    hecras_path = Path(ras_version)
    if hecras_path.is_file() and hecras_path.suffix.lower() == '.exe':
        logger.debug(f"HEC-RAS executable found at specified path: {hecras_path}")
        return str(hecras_path)
    
    # Check known version numbers
    if str(ras_version) in ras_version_numbers:
        default_path = Path(f"C:/Program Files (x86)/HEC/HEC-RAS/{ras_version}/Ras.exe")
        if default_path.is_file():
            logger.debug(f"HEC-RAS executable found at default path: {default_path}")
            return str(default_path)
        else:
            error_msg = f"HEC-RAS Version {ras_version} is not found at expected path. Running HEC-RAS will fail unless a valid installed version is specified."
            logger.error(error_msg)
            return "Ras.exe"
    
    # Try to handle other version formats (e.g., just the number without dots)
    try:
        # First check if it's a direct version number
        version_str = str(ras_version)
        
        # Check for paths like "C:/Path/To/Ras.exe"
        if os.path.sep in version_str and version_str.lower().endswith('.exe'):
            exe_path = Path(version_str)
            if exe_path.is_file():
                logger.debug(f"HEC-RAS executable found at specified path: {exe_path}")
                return str(exe_path)
        
        # Try to find a matching version from our list
        for known_version in ras_version_numbers:
            if version_str in known_version or known_version.replace('.', '') == version_str:
                default_path = Path(f"C:/Program Files (x86)/HEC/HEC-RAS/{known_version}/Ras.exe")
                if default_path.is_file():
                    logger.debug(f"HEC-RAS executable found at default path: {default_path}")
                    return str(default_path)
        
        # Check if it's a newer version
        if '.' in version_str:
            major_version = int(version_str.split('.')[0])
            if major_version >= 6:
                default_path = Path(f"C:/Program Files (x86)/HEC/HEC-RAS/{version_str}/Ras.exe")
                if default_path.is_file():
                    logger.debug(f"HEC-RAS executable found at path for newer version: {default_path}")
                    return str(default_path)
    except Exception as e:
        logger.error(f"Error parsing version or finding path: {e}")
    
    error_msg = f"HEC-RAS Version {ras_version} is not recognized or installed. Running HEC-RAS will fail unless a valid installed version is specified."
    logger.error(error_msg)
    return "Ras.exe"

==================================================

File: c:\GH\ras-commander\ras_commander\RasRemote.py
==================================================

import os
import subprocess
import shutil
from pathlib import Path
import keyring
import getpass
import tempfile
import urllib.request
import zipfile
from urllib.error import URLError, HTTPError
import time
from concurrent.futures import ThreadPoolExecutor, as_completed
from threading import Lock
from typing import Union, List, Optional, Dict, Any, Tuple
import pandas as pd

# Internal imports - relative paths for library structure
from .RasPrj import RasPrj, ras, get_ras_exe # Assuming ras is the global default
from .RasPlan import RasPlan
from .RasUtils import RasUtils
from .LoggingConfig import get_logger
from .Decorators import log_call

logger = get_logger(__name__)

# --- Constants for Credential Management ---
USERNAME_FILE = "remote_username.txt" # Use a different name to avoid conflict if run locally
SERVICE_NAME = "ras_commander_remote_credential"

class RasRemote:
    """
    Represents a remote execution target for HEC-RAS computations.

    Manages connection details, credentials, folder paths, and execution parameters
    for a specific machine where HEC-RAS plans can be run. Instances should typically
    be created using the `init_remote_ras` factory function.

    Attributes:
        machine_name (str): Network name of the machine (e.g., "MYCOMPUTER" or "NetworkName1").
        local_share_path (Path): Path to the target execution folder *as seen from the local machine*
                                 (e.g., Path("\\\\NetworkName1\\Share\\TempRuns")).
        remote_target_base_dir (Path): Base path on the *remote* machine where worker folders will be created
                                       (e.g., Path("C:\\TempRuns")). Derived from local_share_path
                                       and remote_root_path.
        remote_root_path (Path): The root path on the remote machine corresponding to the share's root
                                 (e.g., Path("C:\\")).
        psexec_path (Path): Path to the PsExec64.exe executable.
        username (str): Username for remote access.
        password (str): Password for remote access (retrieved from keyring).
        run_in_system_account (bool): Whether to run PsExec as SYSTEM.
        session_id (int): Session ID for interactive PsExec execution (if not system).
        priority (str): PsExec priority level ('low', 'belownormal', 'normal', etc.).
        physical_cores (int): Number of physical cores available on the target machine.
        worker_count_per_machine (int): How many parallel HEC-RAS instances (copies of the project)
                                       to run on this machine.
        initialized (bool): Flag indicating if the instance is ready.
    """
    def __init__(self,
                 machine_name: str,
                 local_share_path: Path,
                 remote_target_base_dir: Path,
                 remote_root_path: Path,
                 psexec_path: Path,
                 username: str,
                 password: str,
                 run_in_system_account: bool,
                 session_id: int,
                 priority: str,
                 physical_cores: int,
                 worker_count_per_machine: int):
        """Initializes a RasRemote instance. Direct instantiation is discouraged; use init_remote_ras."""
        self.machine_name = machine_name
        self.local_share_path = local_share_path
        self.remote_target_base_dir = remote_target_base_dir
        self.remote_root_path = remote_root_path
        self.psexec_path = psexec_path
        self.username = username
        self.password = password # Stored temporarily, primarily used via _run_psexec_command
        self.run_in_system_account = run_in_system_account
        self.session_id = session_id
        self.priority = priority
        self.physical_cores = physical_cores
        self.worker_count_per_machine = worker_count_per_machine
        self.initialized = True # Mark as initialized after storing attributes

    @log_call
    def test_connection(self) -> bool:
        """
        Test the PsExec connection to the remote machine using 'ipconfig'.

        Returns:
            bool: True if the connection is successful, False otherwise.
        """
        logger.info(f"Testing connection to {self.machine_name}...")
        success = self._run_psexec_command('ipconfig')
        if success:
            logger.info(f"Successfully connected to {self.machine_name} via PsExec.")
        else:
            logger.error(f"Failed to connect to {self.machine_name} via PsExec. Check configuration and credentials.")
        return success

    def _run_psexec_command(self, command: str, target_path: Optional[Path] = None) -> bool:
        """
        Internal helper to execute a command on the remote machine via PsExec.

        Args:
            command (str): The command string to execute (e.g., 'ipconfig', '"C:\\path\\to\\script.bat"').
            target_path (Optional[Path]): If provided, sets the working directory for the command execution
                                           on the remote machine.

        Returns:
            bool: True if the command executed successfully (return code 0), False otherwise.
        """
        # Ensure target_path uses correct separators for the target OS (Windows assumed)
        cwd_path = str(target_path).replace('/', '\\') if target_path else None

        # Construct PsExec command for remote execution
        if not self.psexec_path or not self.psexec_path.exists():
             logger.error("PsExec path is not configured or invalid.")
             return False

        psexec_base = f'"{self.psexec_path}" \\\\{self.machine_name}'
        # Use stored credentials safely
        credentials = f'-u "{self.username}" -p "{self.password}"' if self.username and self.password else ''
        session_flag = f'-s' if self.run_in_system_account else f'-i {self.session_id}'
        priority_flag = f'-{self.priority}' if self.priority else ''
        working_dir_flag = f'-w "{cwd_path}"' if cwd_path else ''

        # Ensure the command path uses remote perspective backslashes
        remote_command = str(command).replace('/', '\\')
        # Quote the command if it contains spaces and isn't already quoted
        if ' ' in remote_command and not (remote_command.startswith('"') and remote_command.endswith('"')):
             remote_command = f'"{remote_command}"'

        # Using cmd /c can be more robust for executing batch files than PowerShell
        full_command = f'{psexec_base} {credentials} {session_flag} {priority_flag} {working_dir_flag} -accepteula cmd /c {remote_command}'

        obfuscated_command = full_command.replace(self.password, '********') if self.password else full_command
        logger.debug(f"Executing PsExec command: {obfuscated_command}")

        try:
            result = subprocess.run(full_command, check=True, shell=True, capture_output=True, text=True)
            logger.debug(f"PsExec stdout for '{Path(command).name}': {result.stdout[:200]}...") # Log snippet
            logger.debug(f"PsExec stderr for '{Path(command).name}': {result.stderr}")
            logger.info(f"PsExec command for '{Path(command).name}' executed successfully on {self.machine_name}.")
            return True
        except subprocess.CalledProcessError as e:
            obfuscated_error = str(e).replace(self.password, '********') if self.password else str(e)
            obfuscated_stderr = e.stderr.replace(self.password, '********') if self.password else e.stderr
            logger.error(f"PsExec command for '{Path(command).name}' failed on {self.machine_name}: {obfuscated_error}")
            logger.error(f"PsExec stderr: {obfuscated_stderr}")
            return False
        except Exception as e:
            obfuscated_error = str(e).replace(self.password, '********') if self.password else str(e)
            logger.error(f"Unexpected error during PsExec execution of '{Path(command).name}': {obfuscated_error}")
            return False

    @log_call
    def prepare_remote_folders(self, source_project_folder: Path, safety_prefix: str) -> bool:
        """
        Prepare the target directory by clearing old folders and copying the project.

        Args:
            source_project_folder (Path): The local path to the HEC-RAS project to copy.
            safety_prefix (str): Prefix used to identify folders managed by this script for safe deletion.

        Returns:
            bool: True if preparation was successful, False otherwise.
        """
        target_path = self.local_share_path # Use local path for file operations
        logger.info(f"Preparing worker folders on {self.machine_name} at {target_path}")

        # 1. Clear existing folders on the target (using local path to access share or local dir)
        if not target_path.exists():
             logger.info(f"Target directory {target_path} does not exist. Creating.")
             try:
                 target_path.mkdir(parents=True, exist_ok=True)
             except Exception as e:
                 logger.error(f"Failed to create target directory {target_path}: {e}")
                 return False
        else:
             logger.info(f"Clearing existing worker folders matching prefix '{safety_prefix}' in {target_path}...")
             items_to_remove = list(target_path.glob(f"{safety_prefix}*"))
             if not items_to_remove:
                 logger.info("No existing folders found matching the safety prefix. No deletion required.")
             else:
                 logger.info(f"Found {len(items_to_remove)} items matching prefix '{safety_prefix}*' to remove.")
                 all_removed = True
                 for item_path in items_to_remove:
                    if item_path.name.startswith(safety_prefix):
                         is_folder = item_path.is_dir()
                         if not RasUtils.remove_with_retry(item_path, is_folder=is_folder):
                             logger.error(f"Failed to remove item: {item_path}")
                             all_removed = False
                         else:
                            logger.info(f"Successfully removed {'folder' if is_folder else 'file'}: {item_path}")
                    else:
                        logger.warning(f"Skipping item {item_path.name} as it doesn't match safety prefix '{safety_prefix}'.")

                 if not all_removed:
                     logger.error("Failed to clear all existing worker folders. Aborting preparation.")
                     return False
                 logger.info("Existing worker folders cleared successfully.")

        # 2. Copy the project worker_count_per_machine times
        logger.info(f"Copying project from {source_project_folder} to {target_path} ({self.worker_count_per_machine} copies)...")
        source_name = source_project_folder.name
        copy_futures = {}
        # Limit copy threads, especially important for network shares
        with ThreadPoolExecutor(max_workers=min(4, self.worker_count_per_machine)) as executor:
            for i in range(1, self.worker_count_per_machine + 1):
                # Ensure safety prefix is applied correctly
                worker_folder_name = f"{safety_prefix}{source_name}_Worker_{i}"
                dest_path = target_path / worker_folder_name
                logger.debug(f"Submitting copy task for worker {i} to {dest_path}")
                # Use dirs_exist_ok=False to catch errors if cleanup failed, but log warning if exists
                future = executor.submit(shutil.copytree, source_project_folder, dest_path, dirs_exist_ok=False)
                copy_futures[future] = dest_path

            for future in as_completed(copy_futures):
                dest_path = copy_futures[future]
                try:
                    future.result() # Check for exceptions during copy
                    logger.info(f"Successfully copied project to {dest_path}")
                except FileExistsError:
                     logger.warning(f"Worker folder already exists (unexpected): {dest_path}. Skipping copy for this worker.")
                except Exception as e:
                    logger.error(f"Failed to copy project to {dest_path}: {e}")
                    return False # Abort if any copy fails

        logger.info(f"Successfully prepared worker folders on {self.machine_name}.")
        return True

    @log_call
    def _generate_remote_batch_files(self, source_ras_object: RasPrj, safety_prefix: str) -> bool:
        """
        Generates .bat files for all plans within each worker folder on the target machine.

        Args:
            source_ras_object (RasPrj): The RasPrj object representing the source project structure.
            safety_prefix (str): The prefix used for worker folder names.

        Returns:
            bool: True if batch files generated successfully, False otherwise.
        """
        logger.info(f"Generating batch files on {self.machine_name}...")
        all_success = True
        source_project_name = source_ras_object.project_name
        # Determine remote RAS exe path - assumes same version/path structure as source for simplicity
        # A more robust solution might require specifying remote exe path during init
        remote_ras_exe_path = get_ras_exe(source_ras_object.ras_version)
        if remote_ras_exe_path == "Ras.exe":
            logger.warning(f"Could not determine a specific HEC-RAS executable path for {self.machine_name}. Using generic 'Ras.exe'. Execution might fail if not in PATH.")

        for i in range(1, self.worker_count_per_machine + 1):
            worker_folder_name = f"{safety_prefix}{source_project_name}_Worker_{i}"
            remote_worker_path = self.remote_target_base_dir / worker_folder_name # Path ON REMOTE machine
            local_worker_path_view = self.local_share_path / worker_folder_name # Path for WRITING batch file

            logger.debug(f"Generating batch files for remote worker {i} ({remote_worker_path}) via local path {local_worker_path_view}")

            if not local_worker_path_view.is_dir():
                logger.error(f"Local view of worker folder does not exist: {local_worker_path_view}. Cannot generate batch files.")
                all_success = False
                continue

            for _, plan_row in source_ras_object.plan_df.iterrows():
                plan_number = plan_row['plan_number']
                remote_prj_path = remote_worker_path / f"{source_project_name}.prj"
                remote_plan_path = remote_worker_path / f"{source_project_name}.p{plan_number}"
                local_bat_path = local_worker_path_view / f"{source_project_name}.p{plan_number}.run.bat"

                # Use backslashes for Windows paths in the batch file command string
                cmd_prj = str(remote_prj_path).replace('/', '\\')
                cmd_plan = str(remote_plan_path).replace('/', '\\')
                cmd_exe = str(remote_ras_exe_path).replace('/', '\\')

                batch_content = f'@echo off\nchcp 65001 > nul\n"{cmd_exe}" -c "{cmd_prj}" "{cmd_plan}"\n'

                try:
                    with open(local_bat_path, 'w', encoding='utf-8') as f: # Use utf-8 for safety
                        f.write(batch_content)
                    logger.debug(f"Generated batch file: {local_bat_path}")
                except Exception as e:
                    logger.error(f"Failed to write batch file {local_bat_path}: {e}")
                    all_success = False

        if all_success:
            logger.info(f"Batch file generation complete for {self.machine_name}.")
        else:
            logger.error(f"Failed to generate some batch files on {self.machine_name}.")
        return all_success

    @log_call
    def compute_plan_remote(self, plan_number: str, worker_id: int, source_ras_object: RasPrj, safety_prefix: str, clear_geompre: bool = False, num_cores: Optional[int] = None) -> bool:
        """
        Executes a specific HEC-RAS plan in a specific worker folder on this target machine.

        Args:
            plan_number (str): The plan number to execute (e.g., "01").
            worker_id (int): The ID of the worker folder (1 to worker_count_per_machine).
            source_ras_object (RasPrj): The RasPrj object for the source project (used for names/paths).
            safety_prefix (str): The prefix used for worker folder names.
            clear_geompre (bool): Whether to clear geometry preprocessor files (.c*) before running.
            num_cores (Optional[int]): Number of cores to use (updates the plan file).

        Returns:
            bool: True if execution was successful, False otherwise.
        """
        logger.info(f"Executing plan {plan_number} in worker {worker_id} on {self.machine_name}...")

        worker_folder_name = f"{safety_prefix}{source_ras_object.project_name}_Worker_{worker_id}"
        local_worker_path = self.local_share_path / worker_folder_name # Path for local file ops
        remote_worker_path = self.remote_target_base_dir / worker_folder_name # Path on remote machine

        # 1. Prepare the specific plan file in the worker folder (optional steps via local path)
        try:
            temp_worker_ras = RasPrj()
            # Initialize temporary object with the correct remote exe path if available
            remote_ras_exe = self.psexec_path
            temp_worker_ras.initialize(local_worker_path, remote_ras_exe, suppress_logging=True)

            plan_path_local = RasPlan.get_plan_path(plan_number, ras_object=temp_worker_ras)
            if not plan_path_local or not Path(plan_path_local).exists():
                 logger.error(f"Plan file {plan_number} not found in worker folder {local_worker_path}")
                 return False

            if clear_geompre:
                from .RasGeo import RasGeo # Avoid circular import at module level
                RasGeo.clear_geompre_files(plan_path_local, ras_object=temp_worker_ras)
                logger.info(f"Cleared geompre for plan {plan_number} in worker {worker_id}")

            if num_cores is not None:
                RasPlan.set_num_cores(plan_path_local, num_cores, ras_object=temp_worker_ras)
                logger.info(f"Set cores={num_cores} for plan {plan_number} in worker {worker_id}")

        except Exception as e:
            logger.error(f"Error preparing plan {plan_number} in worker {worker_id}: {e}")
            return False

        # 2. Define the command: path to the batch file ON THE REMOTE machine
        remote_bat_path = remote_worker_path / f"{source_ras_object.project_name}.p{plan_number}.run.bat"

        # 3. Execute the command remotely using the remote worker path as CWD
        logger.info(f"Running PsExec for {remote_bat_path} on {self.machine_name}")
        success = self._run_psexec_command(str(remote_bat_path), target_path=remote_worker_path)

        if success:
            logger.info(f"Successfully executed plan {plan_number} in worker {worker_id} on {self.machine_name}.")
        else:
            logger.error(f"Failed to execute plan {plan_number} in worker {worker_id} on {self.machine_name}.")

        return success

    @log_call
    def collect_results(self, dest_folder: Path, safety_prefix: str, source_project_name: str) -> bool:
        """
        Collect result files (.hdf, .log, etc.) from all worker folders on this machine.

        Args:
            dest_folder (Path): The local directory to copy the results into.
            safety_prefix (str): The prefix used for worker folder names.
            source_project_name (str): The base name of the HEC-RAS project.

        Returns:
            bool: True if results collection was generally successful, False if major errors occurred.
        """
        target_path = self.local_share_path # Use local path for file ops
        logger.info(f"Collecting results from {self.machine_name} ({target_path}) to {dest_folder}")
        all_success = True
        copied_files_count = 0

        for i in range(1, self.worker_count_per_machine + 1):
            worker_folder_name = f"{safety_prefix}{source_project_name}_Worker_{i}"
            local_worker_path = target_path / worker_folder_name

            if not local_worker_path.is_dir():
                logger.warning(f"Worker folder not found, cannot collect results: {local_worker_path}")
                continue

            logger.debug(f"Scanning worker folder: {local_worker_path}")
            try:
                # Define patterns for result files (adapt as needed)
                result_patterns = ["*.hdf", "*.log", "*.compute_log*"]
                for pattern in result_patterns:
                    for source_file in local_worker_path.glob(pattern):
                        # Exclude geometry HDF files unless specifically needed
                        if ".g" in source_file.suffixes and ".hdf" in source_file.suffixes:
                            continue
                        # Exclude any input HDF files if named specifically
                        if "input.hdf" in source_file.name.lower(): # Example exclusion
                            continue

                        dest_file = dest_folder / source_file.name
                        try:
                            if not dest_folder.exists():
                                dest_folder.mkdir(parents=True, exist_ok=True)

                            # Copy if destination doesn't exist or source is newer
                            if not dest_file.exists() or source_file.stat().st_mtime > dest_file.stat().st_mtime:
                                shutil.copy2(source_file, dest_file)
                                logger.debug(f"Copied {source_file.name} to {dest_folder}")
                                copied_files_count += 1
                            else:
                                logger.debug(f"Skipped {source_file.name} (destination is newer or same)")
                        except Exception as copy_err:
                            logger.error(f"Failed to copy {source_file.name} from {local_worker_path}: {copy_err}")
                            all_success = False
            except Exception as e:
                logger.error(f"Error accessing or collecting results from {local_worker_path}: {e}")
                all_success = False

        logger.info(f"Collected {copied_files_count} result files from {self.machine_name}.")
        return all_success

    @log_call
    def cleanup_remote_folders(self, safety_prefix: str, source_project_name: str) -> bool:
        """
        Remove all worker folders matching the safety prefix from this target machine.

        Args:
            safety_prefix (str): The prefix used to identify worker folders.
            source_project_name (str): The base name of the HEC-RAS project.

        Returns:
            bool: True if cleanup was successful for all targeted folders, False otherwise.
        """
        target_path = self.local_share_path # Use local path for file ops
        logger.info(f"Cleaning up worker folders on {self.machine_name} at {target_path} with prefix '{safety_prefix}'")
        all_success = True

        # Use glob to find all matching folders
        pattern = f"{safety_prefix}{source_project_name}_Worker_*"
        folders_to_remove = list(target_path.glob(pattern))

        if not folders_to_remove:
            logger.info(f"No worker folders found matching '{pattern}' for cleanup.")
            return True

        logger.info(f"Found {len(folders_to_remove)} worker folders to remove.")

        for worker_path in folders_to_remove:
             if worker_path.is_dir() and worker_path.name.startswith(safety_prefix): # Double check prefix
                 logger.debug(f"Attempting to remove worker folder: {worker_path}")
                 if not RasUtils.remove_with_retry(worker_path, is_folder=True):
                     logger.error(f"Failed to remove worker folder: {worker_path}")
                     all_success = False
             elif not worker_path.is_dir():
                  logger.warning(f"Item matched pattern but is not a directory: {worker_path}. Skipping.")
             else:
                  logger.warning(f"Item {worker_path.name} does not match safety prefix. Skipping removal.")

        if all_success:
            logger.info(f"Successfully cleaned up worker folders on {self.machine_name}.")
        else:
            logger.error(f"Failed to clean up some or all worker folders on {self.machine_name}.")
        return all_success


# --- Factory Function ---

@log_call
def init_remote_ras(
    local_share_path: str,
    remote_root_path: str = "C:\\",
    psexec_run_in_system_account: bool = False,
    psexec_session_id: int = 2,
    psexec_priority: str = "low",
    physical_cores: int = 4,
    worker_count_per_machine: int = 2,
    psexec_path: Optional[str] = None,
    username: Optional[str] = None,
    password: Optional[str] = None
) -> RasRemote:
    """
    Factory function to create and initialize a RasRemote instance.

    Handles PsExec setup, credential loading, and path calculations for a remote
    HEC-RAS execution target.

    Args:
        local_share_path (str): Path to the target execution folder *as seen from the local machine*
                                (e.g., "\\\\NetworkName1\\Share\\TempRuns").
        remote_root_path (str): The root path on the *remote* machine corresponding to the share's root
                                (e.g., "C:\\" if \\\\Machine\\Share maps to C:\\Share).
                                Default "C:\\".
        psexec_run_in_system_account (bool): Run PsExec as SYSTEM account. Default False.
        psexec_session_id (int): Session ID for interactive PsExec. Default 2. Ignored if system account is used.
        psexec_priority (str): PsExec priority ('low', 'belownormal', 'normal'). Default 'low'.
        physical_cores (int): Number of physical cores on the target machine. Default 4.
        worker_count_per_machine (int): Number of parallel workers (project copies) for this machine. Default 2.
        psexec_path (Optional[str]): Explicit path to PsExec64.exe. If None, attempts download/default.
        username (Optional[str]): Username for remote connection. If None, prompts or uses stored.
        password (Optional[str]): Password for remote connection. If None, prompts or uses keyring.

    Returns:
        RasRemote: An initialized RasRemote instance ready for use.

    Raises:
        FileNotFoundError: If PsExec cannot be found or downloaded.
        ValueError: If required parameters are missing, invalid paths, or credentials missing.
        Exception: For errors during credential handling or connection testing.
    """
    logger.info(f"Initializing remote RAS target: {local_share_path}")

    local_share_path_obj = Path(local_share_path)
    remote_root_path_obj = Path(remote_root_path)

    # Determine machine name
    machine_name = ""
    remote_target_base_dir = None

    if local_share_path_obj.is_absolute() and local_share_path_obj.drive.startswith('\\\\'):
        try:
            # UNC path: \\Machine\Share\Optional\Subdirs
            machine_name = local_share_path_obj.parts[1]
            share_name = local_share_path_obj.parts[2]
            
            # If path parts > 2, it includes a share name.
            if len(local_share_path_obj.parts) > 2:
                 # Parts after the share name form the relative path
                 relative_path_parts = local_share_path_obj.parts[3:]
                 remote_target_base_dir = remote_root_path_obj.joinpath(*relative_path_parts)
            else:
                 # Path is just \\Machine\Share - implies target base is the remote root itself
                 remote_target_base_dir = remote_root_path_obj

            logger.info(f"Target path is remote: {machine_name}")
        except IndexError:
             raise ValueError(f"Invalid UNC path format: {local_share_path}. Expected \\\\MachineName\\ShareName\\...")
    else:
         raise ValueError(f"local_share_path must be a UNC path: {local_share_path}")

    logger.info(f"Remote target base directory calculated as: {remote_target_base_dir}")

    # --- PsExec Handling ---
    resolved_psexec_path = _find_or_download_psexec(psexec_path)
    if not resolved_psexec_path:
         raise FileNotFoundError("PsExec64.exe could not be found or downloaded.")

    # --- Credential Handling ---
    stored_username = None
    stored_password = None
    
    # Use provided credentials directly if both are given
    if username is not None and password is not None:
        stored_username = username
        stored_password = password
        logger.info("Using provided username and password.")
    elif username is not None and password is None:
        # Username provided, fetch/prompt for password for that specific user
        stored_username = username
        stored_password = _load_or_prompt_password(stored_username)
        if not stored_password:
             raise ValueError(f"Password required for remote user '{username}' but none provided or found.")
    elif username is None:
        # Neither provided, load/prompt for both
        stored_username, stored_password = _load_or_prompt_credentials()
        if not stored_username or not stored_password:
            raise ValueError("Username and password are required for remote execution but were not provided or found.")

    # Create the RasRemote instance
    remote_instance = RasRemote(
        machine_name=machine_name,
        local_share_path=local_share_path_obj,
        remote_target_base_dir=remote_target_base_dir,
        remote_root_path=remote_root_path_obj,
        psexec_path=resolved_psexec_path,
        username=stored_username,
        password=stored_password, # Store the loaded/provided password
        run_in_system_account=psexec_run_in_system_account,
        session_id=psexec_session_id,
        priority=psexec_priority,
        physical_cores=physical_cores,
        worker_count_per_machine=worker_count_per_machine
    )

    # Test connection immediately
    if not remote_instance.test_connection():
         # Allow initialization but warn the user connection failed
         logger.warning(f"Initial connection test failed for {machine_name}. Please check configuration.")
         # Depending on strictness, could raise ConnectionError here

    logger.info(f"Remote RAS target '{machine_name}' initialized successfully.")
    return remote_instance

# --- Helper Functions for Credential Management and PsExec ---

def _find_or_download_psexec(specified_path: Optional[str] = None) -> Optional[Path]:
    """Find PsExec64.exe or download PSTools if not found."""
    if specified_path:
        psexec_path = Path(specified_path)
        if psexec_path.is_file() and psexec_path.name.lower() == 'psexec64.exe':
            logger.info(f"Using specified PsExec path: {psexec_path}")
            return psexec_path
        else:
            logger.warning(f"Specified PsExec path is invalid: {specified_path}. Attempting default locations.")

    # Check common locations or temp directory
    possible_locations = [
        Path("C:/psexec/PsExec64.exe"),
        Path(tempfile.gettempdir()) / "psexec" / "PsExec64.exe",
        Path("./psexec/PsExec64.exe") # Relative path in CWD
    ]

    for loc in possible_locations:
        if loc.is_file():
            logger.info(f"Found PsExec at: {loc}")
            return loc

    # If not found, attempt download to temp directory
    logger.info("PsExec not found in common locations. Attempting to download PSTools...")
    download_dir = Path(tempfile.gettempdir()) / "psexec"
    download_url = 'https://download.sysinternals.com/files/PSTools.zip'
    zip_file_path = download_dir / 'PSTools.zip'
    psexec_final_path = download_dir / "PsExec64.exe"

    try:
        download_dir.mkdir(parents=True, exist_ok=True)
        if not psexec_final_path.exists():
             logger.info(f"Downloading {download_url} to {zip_file_path}")
             # Use context manager for request
             with urllib.request.urlopen(download_url) as response, open(zip_file_path, 'wb') as out_file:
                  shutil.copyfileobj(response, out_file)

             logger.info(f"Extracting PSTools.zip to {download_dir}")
             with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
                 # Extract only PsExec64.exe to minimize clutter/potential issues
                 for member in zip_ref.namelist():
                     if member.lower().endswith('psexec64.exe'):
                         zip_ref.extract(member, download_dir)
                         # Rename if extracted into a subdirectory (ZipFile might preserve paths)
                         extracted_file = download_dir / member
                         if extracted_file != psexec_final_path:
                             extracted_file.rename(psexec_final_path)
                         break
                 else:
                      logger.error("PsExec64.exe not found within the downloaded PSTools.zip")
                      return None # Explicitly return None if not found in zip

             logger.info(f"PSTools extracted.")
             # Clean up zip file
             zip_file_path.unlink()
        else:
             logger.info("PsExec64.exe already exists in temp download directory.")

        if psexec_final_path.is_file():
            logger.info(f"PsExec is now available at: {psexec_final_path}")
            return psexec_final_path
        else:
             logger.error("PsExec64.exe not found even after extraction attempt.")
             return None

    except (HTTPError, URLError) as e:
        logger.error(f"Could not download PSTools.zip due to: {e}. Please download manually and provide path if needed.")
        return None
    except Exception as e:
        logger.error(f"Error during PsExec download/extraction: {e}")
        return None

def _load_or_prompt_credentials() -> Tuple[Optional[str], Optional[str]]:
    """Load username from file and password from keyring, prompting if necessary."""
    username = None
    username_file_path = Path(USERNAME_FILE)
    if username_file_path.exists():
        try:
            with open(username_file_path, 'r') as f:
                username = f.read().strip()
            if username:
                logger.info(f"Loaded username '{username}' from {USERNAME_FILE}")
            else:
                 logger.warning(f"{USERNAME_FILE} exists but is empty. Prompting for username.")
        except Exception as e:
            logger.warning(f"Could not read username file {USERNAME_FILE}: {e}. Prompting.")

    if not username:
        # Use input instead of getpass for username visibility
        username_input = input("Enter the username for remote machines (DOMAIN\\USER, leave blank to skip): ").strip()
        if username_input:
            username = username_input
            try:
                with open(username_file_path, 'w') as f:
                    f.write(username)
            except Exception as e:
                logger.error(f"Could not write username file {USERNAME_FILE}: {e}")
        else:
            logger.warning("No username provided. Assuming local execution or anonymous access.")
            return None, None

    # Load or prompt for password only if a username was determined
    password = _load_or_prompt_password(username)
    return username, password

def _load_or_prompt_password(username: str) -> Optional[str]:
    """Load password from keyring or prompt user."""
    try:
         password = keyring.get_password(SERVICE_NAME, username)
         if password is None:
             logger.info(f"Password for '{username}' not found in keyring. Prompting.")
             # Use getpass for password to hide input
             password_input = getpass.getpass(f"Enter password for {username}: ")
             if password_input:
                  password = password_input
                  try:
                      keyring.set_password(SERVICE_NAME, username, password)
                      logger.info(f"Password for '{username}' stored securely in keyring.")
                  except Exception as e:
                      logger.error(f"Could not store password in keyring: {e}")
             else:
                  logger.warning("No password provided.")
                  return None
         else:
             logger.info(f"Loaded password for '{username}' from keyring.")
         return password
    except Exception as e:
         logger.error(f"Error accessing keyring: {e}. Cannot load/store password.")
         # Fallback to prompt without storing if keyring fails
         password_input = getpass.getpass(f"Enter password for {username} (keyring unavailable): ")
         return password_input if password_input else None
==================================================

File: c:\GH\ras-commander\ras_commander\RasUnsteady.py
==================================================
"""
RasUnsteady - Operations for handling unsteady flow files in HEC-RAS projects.

This module is part of the ras-commander library and uses a centralized logging configuration.

Logging Configuration:
- The logging is set up in the logging_config.py file.
- A @log_call decorator is available to automatically log function calls.
- Log levels: DEBUG, INFO, WARNING, ERROR, CRITICAL
- Logs are written to both console and a rotating file handler.
- The default log file is 'ras_commander.log' in the 'logs' directory.
- The default log level is INFO.

To use logging in this module:
1. Use the @log_call decorator for automatic function call logging.
2. For additional logging, use logger.[level]() calls (e.g., logger.info(), logger.debug()).


Example:
    @log_call
    def my_function():
        logger.debug("Additional debug information")
        # Function logic here
        
-----

All of the methods in this class are static and are designed to be used without instantiation.

List of Functions in RasUnsteady:
- update_flow_title()
- update_restart_settings()
- extract_boundary_and_tables()
- print_boundaries_and_tables()
- identify_tables()
- parse_fixed_width_table()
- extract_tables()
- write_table_to_file()
        
"""
import os
from pathlib import Path
from .RasPrj import ras
from .LoggingConfig import get_logger
from .Decorators import log_call
import pandas as pd
import numpy as np
import re
from typing import Union, Optional, Any, Tuple, Dict, List



logger = get_logger(__name__)

# Module code starts here

class RasUnsteady:
    """
    Class for all operations related to HEC-RAS unsteady flow files.
    """
    @staticmethod
    @log_call
    def update_flow_title(unsteady_file: str, new_title: str, ras_object: Optional[Any] = None) -> None:
        """
        Update the Flow Title in an unsteady flow file (.u*).

        The Flow Title provides a descriptive identifier for unsteady flow scenarios in HEC-RAS. 
        It appears in the HEC-RAS interface and helps differentiate between different flow files.

        Parameters:
            unsteady_file (str): Path to the unsteady flow file or unsteady flow number
            new_title (str): New flow title (max 24 characters, will be truncated if longer)
            ras_object (optional): Custom RAS object to use instead of the global one

        Returns:
            None: The function modifies the file in-place and updates the ras object's unsteady dataframe

        Example:
            # Clone an existing unsteady flow file
            new_unsteady_number = RasPlan.clone_unsteady("02")
            
            # Get path to the new unsteady flow file
            new_unsteady_file = RasPlan.get_unsteady_path(new_unsteady_number)
            
            # Update the flow title
            new_title = "Modified Flow Scenario"
            RasUnsteady.update_flow_title(new_unsteady_file, new_title)
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()
        
        unsteady_path = Path(unsteady_file)
        new_title = new_title[:24]  # Truncate to 24 characters if longer
        
        try:
            with open(unsteady_path, 'r') as f:
                lines = f.readlines()
            logger.debug(f"Successfully read unsteady flow file: {unsteady_path}")
        except FileNotFoundError:
            logger.error(f"Unsteady flow file not found: {unsteady_path}")
            raise FileNotFoundError(f"Unsteady flow file not found: {unsteady_path}")
        except PermissionError:
            logger.error(f"Permission denied when reading unsteady flow file: {unsteady_path}")
            raise PermissionError(f"Permission denied when reading unsteady flow file: {unsteady_path}")
        
        updated = False
        for i, line in enumerate(lines):
            if line.startswith("Flow Title="):
                old_title = line.strip().split('=')[1]
                lines[i] = f"Flow Title={new_title}\n"
                updated = True
                logger.info(f"Updated Flow Title from '{old_title}' to '{new_title}'")
                break
        
        if updated:
            try:
                with open(unsteady_path, 'w') as f:
                    f.writelines(lines)
                logger.debug(f"Successfully wrote modifications to unsteady flow file: {unsteady_path}")
            except PermissionError:
                logger.error(f"Permission denied when writing to unsteady flow file: {unsteady_path}")
                raise PermissionError(f"Permission denied when writing to unsteady flow file: {unsteady_path}")
            except IOError as e:
                logger.error(f"Error writing to unsteady flow file: {unsteady_path}. {str(e)}")
                raise IOError(f"Error writing to unsteady flow file: {unsteady_path}. {str(e)}")
            logger.info(f"Applied Flow Title modification to {unsteady_file}")
        else:
            logger.warning(f"Flow Title not found in {unsteady_file}")
    
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()

    @staticmethod
    @log_call
    def update_restart_settings(unsteady_file: str, use_restart: bool, restart_filename: Optional[str] = None, ras_object: Optional[Any] = None) -> None:
        """
        Update the restart file settings in an unsteady flow file.

        Restart files in HEC-RAS allow simulations to continue from a previously saved state,
        which is useful for long simulations or when making downstream changes.

        Parameters:
            unsteady_file (str): Path to the unsteady flow file
            use_restart (bool): Whether to use a restart file (True) or not (False)
            restart_filename (str, optional): Path to the restart file (.rst)
                                             Required if use_restart is True
            ras_object (optional): Custom RAS object to use instead of the global one

        Returns:
            None: The function modifies the file in-place and updates the ras object's unsteady dataframe

        Example:
            # Enable restart file for an unsteady flow
            unsteady_file = RasPlan.get_unsteady_path("03")
            RasUnsteady.update_restart_settings(
                unsteady_file, 
                use_restart=True, 
                restart_filename="model_restart.rst"
            )
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()
        
        unsteady_path = Path(unsteady_file)
        
        try:
            with open(unsteady_path, 'r') as f:
                lines = f.readlines()
            logger.debug(f"Successfully read unsteady flow file: {unsteady_path}")
        except FileNotFoundError:
            logger.error(f"Unsteady flow file not found: {unsteady_path}")
            raise FileNotFoundError(f"Unsteady flow file not found: {unsteady_path}")
        except PermissionError:
            logger.error(f"Permission denied when reading unsteady flow file: {unsteady_path}")
            raise PermissionError(f"Permission denied when reading unsteady flow file: {unsteady_path}")
        
        updated = False
        restart_line_index = None
        for i, line in enumerate(lines):
            if line.startswith("Use Restart="):
                restart_line_index = i
                old_value = line.strip().split('=')[1]
                new_value = "-1" if use_restart else "0"
                lines[i] = f"Use Restart={new_value}\n"
                updated = True
                logger.info(f"Updated Use Restart from {old_value} to {new_value}")
                break
        
        if use_restart:
            if not restart_filename:
                logger.error("Restart filename must be specified when enabling restart.")
                raise ValueError("Restart filename must be specified when enabling restart.")
            if restart_line_index is not None:
                lines.insert(restart_line_index + 1, f"Restart Filename={restart_filename}\n")
                logger.info(f"Added Restart Filename: {restart_filename}")
            else:
                logger.warning("Could not find 'Use Restart' line to insert 'Restart Filename'")
        
        if updated:
            try:
                with open(unsteady_path, 'w') as f:
                    f.writelines(lines)
                logger.debug(f"Successfully wrote modifications to unsteady flow file: {unsteady_path}")
            except PermissionError:
                logger.error(f"Permission denied when writing to unsteady flow file: {unsteady_path}")
                raise PermissionError(f"Permission denied when writing to unsteady flow file: {unsteady_path}")
            except IOError as e:
                logger.error(f"Error writing to unsteady flow file: {unsteady_path}. {str(e)}")
                raise IOError(f"Error writing to unsteady flow file: {unsteady_path}. {str(e)}")
            logger.info(f"Applied restart settings modification to {unsteady_file}")
        else:
            logger.warning(f"Use Restart setting not found in {unsteady_file}")
    
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()

    @staticmethod
    @log_call
    def extract_boundary_and_tables(unsteady_file: str, ras_object: Optional[Any] = None) -> pd.DataFrame:
        """
        Extract boundary conditions and their associated tables from an unsteady flow file.

        Boundary conditions in HEC-RAS define time-varying inputs like flow hydrographs,
        stage hydrographs, gate operations, and lateral inflows. This function parses these
        conditions and their data tables from the unsteady flow file.

        Parameters:
            unsteady_file (str): Path to the unsteady flow file
            ras_object (optional): Custom RAS object to use instead of the global one

        Returns:
            pd.DataFrame: DataFrame containing boundary conditions with the following columns:
                - River Name, Reach Name, River Station: Location information
                - DSS File: Associated DSS file path if any
                - Tables: Dictionary containing DataFrames of time-series values

        Example:
            # Get the path to unsteady flow file "02"
            unsteady_file = RasPlan.get_unsteady_path("02")
            
            # Extract boundary conditions and tables
            boundaries_df = RasUnsteady.extract_boundary_and_tables(unsteady_file)
            print(f"Extracted {len(boundaries_df)} boundary conditions from the file.")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        unsteady_path = Path(unsteady_file)
        table_types = [
            'Flow Hydrograph=', 
            'Gate Openings=', 
            'Stage Hydrograph=',
            'Uniform Lateral Inflow=', 
            'Lateral Inflow Hydrograph='
        ]
        
        try:
            with open(unsteady_path, 'r') as file:
                lines = file.readlines()
            logger.debug(f"Successfully read unsteady flow file: {unsteady_path}")
        except FileNotFoundError:
            logger.error(f"Unsteady flow file not found: {unsteady_path}")
            raise
        except PermissionError:
            logger.error(f"Permission denied when reading unsteady flow file: {unsteady_path}")
            raise
        
        # Initialize variables
        boundary_data = []
        current_boundary = None
        current_tables = {}
        current_table = None
        table_values = []
        
        i = 0
        while i < len(lines):
            line = lines[i].strip()
            
            # Check for Boundary Location line
            if line.startswith("Boundary Location="):
                # Save previous boundary if it exists
                if current_boundary is not None:
                    if current_table and table_values:
                        # Process any remaining table
                        try:
                            df = pd.DataFrame({'Value': table_values})
                            current_tables[current_table_name] = df
                        except Exception as e:
                            logger.warning(f"Error processing table {current_table_name}: {e}")
                    current_boundary['Tables'] = current_tables
                    boundary_data.append(current_boundary)
                
                # Start new boundary
                current_boundary = {
                    'Boundary Location': line.split('=', 1)[1].strip(),
                    'DSS File': '',
                    'Tables': {}
                }
                current_tables = {}
                current_table = None
                table_values = []
                
            # Check for DSS File line
            elif line.startswith("DSS File=") and current_boundary is not None:
                current_boundary['DSS File'] = line.split('=', 1)[1].strip()
                
            # Check for table headers
            elif any(line.startswith(t) for t in table_types) and current_boundary is not None:
                # If we were processing a table, save it
                if current_table and table_values:
                    try:
                        df = pd.DataFrame({'Value': table_values})
                        current_tables[current_table_name] = df
                    except Exception as e:
                        logger.warning(f"Error processing previous table: {e}")
                
                # Start new table
                try:
                    current_table = line.split('=')
                    current_table_name = current_table[0].strip()
                    num_values = int(current_table[1])
                    table_values = []
                    
                    # Read the table values
                    rows_needed = (num_values + 9) // 10  # Round up division
                    for _ in range(rows_needed):
                        i += 1
                        if i >= len(lines):
                            break
                        row = lines[i].strip()
                        # Parse fixed-width values (8 characters each)
                        j = 0
                        while j < len(row):
                            value_str = row[j:j+8].strip()
                            if value_str:
                                try:
                                    value = float(value_str)
                                    table_values.append(value)
                                except ValueError:
                                    # Try splitting merged values
                                    parts = re.findall(r'-?\d+\.?\d*', value_str)
                                    table_values.extend([float(p) for p in parts])
                            j += 8
                
                except (ValueError, IndexError) as e:
                    logger.error(f"Error processing table at line {i}: {e}")
                    current_table = None
                    
            i += 1
        
        # Add the last boundary if it exists
        if current_boundary is not None:
            if current_table and table_values:
                try:
                    df = pd.DataFrame({'Value': table_values})
                    current_tables[current_table_name] = df
                except Exception as e:
                    logger.warning(f"Error processing final table: {e}")
            current_boundary['Tables'] = current_tables
            boundary_data.append(current_boundary)
        
        # Create DataFrame
        boundaries_df = pd.DataFrame(boundary_data)
        if not boundaries_df.empty:
            # Split boundary location into components
            location_columns = ['River Name', 'Reach Name', 'River Station', 
                              'Downstream River Station', 'Storage Area Connection',
                              'Storage Area Name', 'Pump Station Name', 
                              'Blank 1', 'Blank 2']
            split_locations = boundaries_df['Boundary Location'].str.split(',', expand=True)
            # Ensure we have the right number of columns
            for i, col in enumerate(location_columns):
                if i < split_locations.shape[1]:
                    boundaries_df[col] = split_locations[i].str.strip()
                else:
                    boundaries_df[col] = ''
            boundaries_df = boundaries_df.drop(columns=['Boundary Location'])
        
        logger.info(f"Successfully extracted boundaries and tables from {unsteady_path}")
        return boundaries_df

    @staticmethod
    @log_call
    def print_boundaries_and_tables(boundaries_df: pd.DataFrame) -> None:
        """
        Print boundary conditions and their associated tables in a formatted, readable way.

        This function is useful for quickly visualizing the complex nested structure of 
        boundary conditions extracted by extract_boundary_and_tables().

        Parameters:
            boundaries_df (pd.DataFrame): DataFrame containing boundary information and 
                                         nested tables data from extract_boundary_and_tables()

        Returns:
            None: Output is printed to console

        Example:
            # Extract boundary conditions and tables
            boundaries_df = RasUnsteady.extract_boundary_and_tables(unsteady_file)
            
            # Print in a formatted way
            print("Detailed boundary conditions and tables:")
            RasUnsteady.print_boundaries_and_tables(boundaries_df)
        """
        pd.set_option('display.max_columns', None)
        pd.set_option('display.max_rows', None)
        print("\nBoundaries and Tablesin boundaries_df:")
        for idx, row in boundaries_df.iterrows():
            print(f"\nBoundary {idx+1}:")
            print(f"River Name: {row['River Name']}")
            print(f"Reach Name: {row['Reach Name']}")
            print(f"River Station: {row['River Station']}")
            print(f"DSS File: {row['DSS File']}")
            
            if row['Tables']:
                print("\nTables for this boundary:")
                for table_name, table_df in row['Tables'].items():
                    print(f"\n{table_name}:")
                    print(table_df.to_string())
            print("-" * 80)





# Additional functions from the AWS webinar where the code was developed
# Need to add examples

    @staticmethod
    @log_call
    def identify_tables(lines: List[str]) -> List[Tuple[str, int, int]]:
        """
        Identify the start and end line numbers of tables in an unsteady flow file.

        HEC-RAS unsteady flow files contain numeric tables in a fixed-width format.
        This function locates these tables within the file and provides their positions.

        Parameters:
            lines (List[str]): List of file lines (typically from file.readlines())

        Returns:
            List[Tuple[str, int, int]]: List of tuples where each tuple contains:
                - table_name (str): The type of table (e.g., 'Flow Hydrograph=')
                - start_line (int): Line number where the table data begins
                - end_line (int): Line number where the table data ends

        Example:
            # Read the unsteady flow file
            with open(new_unsteady_file, 'r') as f:
                lines = f.readlines()
                
            # Identify tables in the file
            tables = RasUnsteady.identify_tables(lines)
            print(f"Identified {len(tables)} tables in the unsteady flow file.")
        """
        table_types = [
            'Flow Hydrograph=', 
            'Gate Openings=', 
            'Stage Hydrograph=',
            'Uniform Lateral Inflow=', 
            'Lateral Inflow Hydrograph='
        ]
        tables = []
        current_table = None
        
        for i, line in enumerate(lines):
            if any(table_type in line for table_type in table_types):
                if current_table:
                    tables.append((current_table[0], current_table[1], i-1))
                table_name = line.strip().split('=')[0] + '='
                try:
                    num_values = int(line.strip().split('=')[1])
                    current_table = (table_name, i+1, num_values)
                except (ValueError, IndexError) as e:
                    logger.error(f"Error parsing table header at line {i}: {e}")
                    continue
        
        if current_table:
            tables.append((current_table[0], current_table[1], 
                          current_table[1] + (current_table[2] + 9) // 10))
        
        logger.debug(f"Identified {len(tables)} tables in the file")
        return tables

    @staticmethod
    @log_call
    def parse_fixed_width_table(lines: List[str], start: int, end: int) -> pd.DataFrame:
        """
        Parse a fixed-width table from an unsteady flow file into a pandas DataFrame.

        HEC-RAS uses a fixed-width format (8 characters per value) for numeric tables.
        This function converts this format into a DataFrame for easier manipulation.

        Parameters:
            lines (List[str]): List of file lines (from file.readlines())
            start (int): Starting line number for table data
            end (int): Ending line number for table data

        Returns:
            pd.DataFrame: DataFrame with a single column 'Value' containing the parsed numeric values

        Example:
            # Identify tables in the file
            tables = RasUnsteady.identify_tables(lines)
            
            # Parse a specific table (e.g., first flow hydrograph)
            table_name, start_line, end_line = tables[0]
            table_df = RasUnsteady.parse_fixed_width_table(lines, start_line, end_line)
        """
        data = []
        for line in lines[start:end]:
            # Skip empty lines or lines that don't contain numeric data
            if not line.strip() or not any(c.isdigit() for c in line):
                continue
                
            # Split the line into 8-character columns and process each value
            values = []
            for i in range(0, len(line.rstrip()), 8):
                value_str = line[i:i+8].strip()
                if value_str:  # Only process non-empty strings
                    try:
                        # Handle special cases where numbers are run together
                        if len(value_str) > 8:
                            # Use regex to find all numbers in the string
                            parts = re.findall(r'-?\d+\.?\d*', value_str)
                            values.extend([float(p) for p in parts])
                        else:
                            values.append(float(value_str))
                    except ValueError:
                        # If conversion fails, try to extract any valid numbers from the string
                        parts = re.findall(r'-?\d+\.?\d*', value_str)
                        if parts:
                            values.extend([float(p) for p in parts])
                        else:
                            logger.debug(f"Skipping non-numeric value: {value_str}")
                            continue
            
            # Only add to data if we found valid numeric values
            if values:
                data.extend(values)
        
        if not data:
            logger.warning("No numeric data found in table section")
            return pd.DataFrame(columns=['Value'])
            
        return pd.DataFrame(data, columns=['Value'])
    
    @staticmethod
    @log_call
    def extract_tables(unsteady_file: str, ras_object: Optional[Any] = None) -> Dict[str, pd.DataFrame]:
        """
        Extract all tables from an unsteady flow file and return them as DataFrames.

        This function combines identify_tables() and parse_fixed_width_table() to extract
        all tables from an unsteady flow file in a single operation.

        Parameters:
            unsteady_file (str): Path to the unsteady flow file
            ras_object (optional): Custom RAS object to use instead of the global one

        Returns:
            Dict[str, pd.DataFrame]: Dictionary where:
                - Keys are table names (e.g., 'Flow Hydrograph=')
                - Values are DataFrames with a 'Value' column containing numeric data

        Example:
            # Extract all tables from the unsteady flow file
            all_tables = RasUnsteady.extract_tables(new_unsteady_file)
            print(f"Extracted {len(all_tables)} tables from the file.")
            
            # Access a specific table
            flow_tables = [name for name in all_tables.keys() if 'Flow Hydrograph=' in name]
            if flow_tables:
                flow_df = all_tables[flow_tables[0]]
                print(f"Flow table has {len(flow_df)} values")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        unsteady_path = Path(unsteady_file)
        try:
            with open(unsteady_path, 'r') as file:
                lines = file.readlines()
            logger.debug(f"Successfully read unsteady flow file: {unsteady_path}")
        except FileNotFoundError:
            logger.error(f"Unsteady flow file not found: {unsteady_path}")
            raise
        except PermissionError:
            logger.error(f"Permission denied when reading unsteady flow file: {unsteady_path}")
            raise
        
        # Fix: Use RasUnsteady.identify_tables 
        tables = RasUnsteady.identify_tables(lines)
        extracted_tables = {}
        
        for table_name, start, end in tables:
            df = RasUnsteady.parse_fixed_width_table(lines, start, end)
            extracted_tables[table_name] = df
            logger.debug(f"Extracted table '{table_name}' with {len(df)} values")
        
        return extracted_tables

    @staticmethod
    @log_call
    def write_table_to_file(unsteady_file: str, table_name: str, df: pd.DataFrame, 
                           start_line: int, ras_object: Optional[Any] = None) -> None:
        """
        Write an updated table back to an unsteady flow file in the required fixed-width format.

        This function takes a modified DataFrame and writes it back to the unsteady flow file,
        preserving the 8-character fixed-width format that HEC-RAS requires.

        Parameters:
            unsteady_file (str): Path to the unsteady flow file
            table_name (str): Name of the table to update (e.g., 'Flow Hydrograph=')
            df (pd.DataFrame): DataFrame containing the updated values with a 'Value' column
            start_line (int): Line number where the table data begins in the file
            ras_object (optional): Custom RAS object to use instead of the global one

        Returns:
            None: The function modifies the file in-place

        Example:
            # Identify tables in the unsteady flow file
            tables = RasUnsteady.identify_tables(lines)
            table_name, start_line, end_line = tables[0]
            
            # Parse and modify the table
            table_df = RasUnsteady.parse_fixed_width_table(lines, start_line, end_line)
            table_df['Value'] = table_df['Value'] * 0.75  # Scale values to 75%
            
            # Write modified table back to the file
            RasUnsteady.write_table_to_file(new_unsteady_file, table_name, table_df, start_line)
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        unsteady_path = Path(unsteady_file)
        try:
            with open(unsteady_path, 'r') as file:
                lines = file.readlines()
            logger.debug(f"Successfully read unsteady flow file: {unsteady_path}")
        except FileNotFoundError:
            logger.error(f"Unsteady flow file not found: {unsteady_path}")
            raise
        except PermissionError:
            logger.error(f"Permission denied when reading unsteady flow file: {unsteady_path}")
            raise
        
        # Format values into fixed-width strings
        formatted_values = []
        for i in range(0, len(df), 10):
            row = df['Value'].iloc[i:i+10]
            formatted_row = ''.join(f'{value:8.0f}' for value in row)
            formatted_values.append(formatted_row + '\n')
        
        # Replace old table with new formatted values
        lines[start_line:start_line+len(formatted_values)] = formatted_values
        
        try:
            with open(unsteady_path, 'w') as file:
                file.writelines(lines)
            logger.info(f"Successfully updated table '{table_name}' in {unsteady_path}")
        except PermissionError:
            logger.error(f"Permission denied when writing to unsteady flow file: {unsteady_path}")
            raise
        except IOError as e:
            logger.error(f"Error writing to unsteady flow file: {unsteady_path}. {str(e)}")
            raise








'''



Flow Title=Single 2D Area with Bridges
Program Version=6.60
Use Restart= 0 
Boundary Location=                ,                ,        ,        ,                ,BaldEagleCr     ,                ,DSNormalDepth                   ,                                
Friction Slope=0.0003,0
Boundary Location=                ,                ,        ,        ,                ,BaldEagleCr     ,                ,DS2NormalD                      ,                                
Friction Slope=0.0003,0
Boundary Location=                ,                ,        ,        ,                ,BaldEagleCr     ,                ,Upstream Inflow                 ,                                
Interval=1HOUR
Flow Hydrograph= 200 
    1000    3000    6500    8000    9500   11000   12500   14000   15500   17000
   18500   20000   22000   24000   26000   28000   30000   34000   38000   42000
   46000   50000   54000   58000   62000   66000   70000   73000   76000   79000
   82000   85000   87200   89400   91600   93800   96000   96800   97600   98400
   99200  100000   99600   99200   98800   98400   98000   96400   94800   93200
   91600   90000   88500   87000   85500   84000   82500   81000   79500   78000
   76500   75000   73500   7200070666.6669333.34   6800066666.6665333.33   64000
62666.6761333.33   6000058666.6757333.33   5600054666.6753333.33   5200050666.67
49333.33   4800046666.6745333.33   4400042666.6741333.33   4000039166.6738333.33
   3750036666.6735833.33   3500034166.6733333.33   3250031666.6730833.33   30000
29166.6728333.33   2750026666.6725833.33   2500024166.6723333.33   2250021666.67
20833.33   2000019655.1719310.3518965.5218620.6918275.8617931.0417586.2117241.38
16896.5516551.72 16206.915862.0715517.2415172.4114827.5914482.7614137.93 13793.1
13448.2813103.4512758.6212413.7912068.9711724.1411379.3111034.4810689.6610344.83
   10000 9915.25 9830.51 9745.76 9661.02 9576.27 9491.53 9406.78 9322.03 9237.29
 9152.54  9067.8 8983.05 8898.31 8813.56 8728.81 8644.07 8559.32 8474.58 8389.83
 8305.09 8220.34 8135.59 8050.85  7966.1 7881.36 7796.61 7711.86 7627.12 7542.37
 7457.63 7372.88 7288.14 7203.39 7118.64  7033.9 6949.15 6864.41 6779.66 6694.92
 6610.17 6525.42 6440.68 6355.93 6271.19 6186.44  6101.7 6016.95  5932.2 5847.46
 5762.71 5677.97 5593.22 5508.48 5423.73 5338.98 5254.24 5169.49 5084.75    5000
Stage Hydrograph TW Check=0
Flow Hydrograph QMult= 0.5 
Flow Hydrograph Slope= 0.0005 
DSS Path=
Use DSS=False
Use Fixed Start Time=False
Fixed Start Date/Time=,
Is Critical Boundary=False
Critical Boundary Flow=
Boundary Location=                ,                ,        ,        ,Sayers Dam      ,                ,                ,                                ,                                
Gate Name=Gate #1     
Gate DSS Path=
Gate Use DSS=False
Gate Time Interval=1HOUR
Gate Use Fixed Start Time=False
Gate Fixed Start Date/Time=,
Gate Openings= 100 
       2       2       2       2       2       2       2       2       2       2
       2       2       2       2       2       2       2       2       2       2
       2       2       2       2       2       2       2       2       2       2
       2       2       2       2       2       2       2       2       2       2
       2       2       2       2       2       2       2       2       2       2
       2       2       2       2       2       2       2       2       2       2
       2       2       2       2       2       2       2       2       2       2
       2       2       2       2       2       2       2       2       2       2
       2       2       2       2       2       2       2       2       2       2
       2       2       2       2       2       2       2       2       2       2
Boundary Location=                ,                ,        ,        ,                ,BaldEagleCr     ,                ,DS2NormalDepth                  ,                                
Friction Slope=0.0003,0
Met Point Raster Parameters=,,,,
Precipitation Mode=Disable
Wind Mode=No Wind Forces
Air Density Mode=
Wave Mode=No Wave Forcing
Met BC=Precipitation|Expanded View=0
Met BC=Precipitation|Point Interpolation=Nearest
Met BC=Precipitation|Gridded Source=DSS
Met BC=Precipitation|Gridded Interpolation=
Met BC=Evapotranspiration|Expanded View=0
Met BC=Evapotranspiration|Point Interpolation=Nearest
Met BC=Evapotranspiration|Gridded Source=DSS
Met BC=Evapotranspiration|Gridded Interpolation=
Met BC=Wind Speed|Expanded View=0
Met BC=Wind Speed|Constant Units=ft/s
Met BC=Wind Speed|Point Interpolation=Nearest
Met BC=Wind Speed|Gridded Source=DSS
Met BC=Wind Speed|Gridded Interpolation=
Met BC=Wind Direction|Expanded View=0
Met BC=Wind Direction|Point Interpolation=Nearest
Met BC=Wind Direction|Gridded Source=DSS
Met BC=Wind Direction|Gridded Interpolation=
Met BC=Wind Velocity X|Expanded View=0
Met BC=Wind Velocity X|Constant Units=ft/s
Met BC=Wind Velocity X|Point Interpolation=Nearest
Met BC=Wind Velocity X|Gridded Source=DSS
Met BC=Wind Velocity X|Gridded Interpolation=
Met BC=Wind Velocity Y|Expanded View=0
Met BC=Wind Velocity Y|Constant Units=ft/s
Met BC=Wind Velocity Y|Point Interpolation=Nearest
Met BC=Wind Velocity Y|Gridded Source=DSS
Met BC=Wind Velocity Y|Gridded Interpolation=
Met BC=Wave Forcing X|Expanded View=0
Met BC=Wave Forcing X|Point Interpolation=Nearest
Met BC=Wave Forcing X|Gridded Source=DSS
Met BC=Wave Forcing X|Gridded Interpolation=
Met BC=Wave Forcing Y|Expanded View=0
Met BC=Wave Forcing Y|Point Interpolation=Nearest
Met BC=Wave Forcing Y|Gridded Source=DSS
Met BC=Wave Forcing Y|Gridded Interpolation=
Met BC=Air Density|Mode=Constant
Met BC=Air Density|Expanded View=0
Met BC=Air Density|Constant Value=1.225
Met BC=Air Density|Constant Units=kg/m3
Met BC=Air Density|Point Interpolation=Nearest
Met BC=Air Density|Gridded Source=DSS
Met BC=Air Density|Gridded Interpolation=
Met BC=Air Temperature|Expanded View=0
Met BC=Air Temperature|Point Interpolation=Nearest
Met BC=Air Temperature|Gridded Source=DSS
Met BC=Air Temperature|Gridded Interpolation=
Met BC=Humidity|Expanded View=0
Met BC=Humidity|Point Interpolation=Nearest
Met BC=Humidity|Gridded Source=DSS
Met BC=Humidity|Gridded Interpolation=
Met BC=Air Pressure|Mode=Constant
Met BC=Air Pressure|Expanded View=0
Met BC=Air Pressure|Constant Value=1013.2
Met BC=Air Pressure|Constant Units=mb
Met BC=Air Pressure|Point Interpolation=Nearest
Met BC=Air Pressure|Gridded Source=DSS
Met BC=Air Pressure|Gridded Interpolation=
Non-Newtonian Method= 0 , 
Non-Newtonian Constant Vol Conc=0
Non-Newtonian Yield Method= 0 , 
Non-Newtonian Yield Coef=0, 0
User Yeild=   0
Non-Newtonian Sed Visc= 0 , 
Non-Newtonian Obrian B=0
User Viscosity=0
User Viscosity Ratio=0
Herschel-Bulkley Coef=0, 0
Clastic Method= 0 , 
Coulomb Phi=0
Voellmy X=0
Non-Newtonian Hindered FV= 0 
Non-Newtonian FV K=0
Non-Newtonian ds=0
Non-Newtonian Max Cv=0
Non-Newtonian Bulking Method= 0 , 
Non-Newtonian High C Transport= 0 , 
Lava Activation= 0 
Temperature=1300,15,,15,14,980
Heat Ballance=1,1200,0.5,1,70,0.95
Viscosity=1000,,,
Yield Strength=,,,
Consistency Factor=,,,
Profile Coefficient=4,1.3,
Lava Param=,2500,




'''





==================================================

File: c:\GH\ras-commander\ras_commander\RasUtils.py
==================================================
"""
RasUtils - Utility functions for the ras-commander library

This module is part of the ras-commander library and uses a centralized logging configuration.

Logging Configuration:
- The logging is set up in the logging_config.py file.
- A @log_call decorator is available to automatically log function calls.
- Log levels: DEBUG, INFO, WARNING, ERROR, CRITICAL
- Logs are written to both console and a rotating file handler.
- The default log file is 'ras_commander.log' in the 'logs' directory.
- The default log level is INFO.

To use logging in this module:
1. Use the @log_call decorator for automatic function call logging.
2. For additional logging, use logger.[level]() calls (e.g., logger.info(), logger.debug()).

Example:
    @log_call
    def my_function():
        logger.debug("Additional debug information")
        # Function logic here
        
-----

All of the methods in this class are static and are designed to be used without instantiation.

List of Functions in RasUtils:
- create_directory()
- find_files_by_extension()
- get_file_size()
- get_file_modification_time()
- get_plan_path()
- remove_with_retry()
- update_plan_file()
- check_file_access()
- convert_to_dataframe()
- save_to_excel()
- calculate_rmse()
- calculate_percent_bias()
- calculate_error_metrics()
- update_file()
- get_next_number()
- clone_file()
- update_project_file()
- decode_byte_strings()
- perform_kdtree_query()
- find_nearest_neighbors()
- consolidate_dataframe()
- find_nearest_value()
- horizontal_distance()
    
        
"""
import os
from pathlib import Path
from .RasPrj import ras
from typing import Union, Optional, Dict, Callable, List, Tuple, Any
import pandas as pd
import numpy as np
import shutil
import re
from scipy.spatial import KDTree
import datetime
import time
import h5py
from datetime import timedelta
from .LoggingConfig import get_logger
from .Decorators import log_call


logger = get_logger(__name__)
# Module code starts here

class RasUtils:
    """
    A class containing utility functions for the ras-commander library.
    When integrating new functions that do not clearly fit into other classes, add them here.
    """

    @staticmethod
    @log_call
    def create_directory(directory_path: Path, ras_object=None) -> Path:
        """
        Ensure that a directory exists, creating it if necessary.

        Parameters:
        directory_path (Path): Path to the directory
        ras_object (RasPrj, optional): RAS object to use. If None, uses the default ras object.

        Returns:
        Path: Path to the ensured directory

        Example:
        >>> ensured_dir = RasUtils.create_directory(Path("output"))
        >>> print(f"Directory ensured: {ensured_dir}")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        path = Path(directory_path)
        try:
            path.mkdir(parents=True, exist_ok=True)
            logger.info(f"Directory ensured: {path}")
        except Exception as e:
            logger.error(f"Failed to create directory {path}: {e}")
            raise
        return path

    @staticmethod
    @log_call
    def find_files_by_extension(extension: str, ras_object=None) -> list:
        """
        List all files in the project directory with a specific extension.

        Parameters:
        extension (str): File extension to filter (e.g., '.prj')
        ras_object (RasPrj, optional): RAS object to use. If None, uses the default ras object.

        Returns:
        list: List of file paths matching the extension

        Example:
        >>> prj_files = RasUtils.find_files_by_extension('.prj')
        >>> print(f"Found {len(prj_files)} .prj files")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        try:
            files = list(ras_obj.project_folder.glob(f"*{extension}"))
            file_list = [str(file) for file in files]
            logger.info(f"Found {len(file_list)} files with extension '{extension}' in {ras_obj.project_folder}")
            return file_list
        except Exception as e:
            logger.error(f"Failed to find files with extension '{extension}': {e}")
            raise

    @staticmethod
    @log_call
    def get_file_size(file_path: Path, ras_object=None) -> Optional[int]:
        """
        Get the size of a file in bytes.

        Parameters:
        file_path (Path): Path to the file
        ras_object (RasPrj, optional): RAS object to use. If None, uses the default ras object.

        Returns:
        Optional[int]: Size of the file in bytes, or None if the file does not exist

        Example:
        >>> size = RasUtils.get_file_size(Path("project.prj"))
        >>> print(f"File size: {size} bytes")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        path = Path(file_path)
        if path.exists():
            try:
                size = path.stat().st_size
                logger.info(f"Size of {path}: {size} bytes")
                return size
            except Exception as e:
                logger.error(f"Failed to get size for {path}: {e}")
                raise
        else:
            logger.warning(f"File not found: {path}")
            return None

    @staticmethod
    @log_call
    def get_file_modification_time(file_path: Path, ras_object=None) -> Optional[float]:
        """
        Get the last modification time of a file.

        Parameters:
        file_path (Path): Path to the file
        ras_object (RasPrj, optional): RAS object to use. If None, uses the default ras object.

        Returns:
        Optional[float]: Last modification time as a timestamp, or None if the file does not exist

        Example:
        >>> mtime = RasUtils.get_file_modification_time(Path("project.prj"))
        >>> print(f"Last modified: {mtime}")
        """
        
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        path = Path(file_path)
        if path.exists():
            try:
                mtime = path.stat().st_mtime
                logger.info(f"Last modification time of {path}: {mtime}")
                return mtime
            except Exception as e:
                logger.exception(f"Failed to get modification time for {path}")
                raise
        else:
            logger.warning(f"File not found: {path}")
            return None

    @staticmethod
    @log_call
    def get_plan_path(current_plan_number_or_path: Union[str, Path], ras_object=None) -> Path:
        """
        Get the path for a plan file with a given plan number or path.

        Parameters:
        current_plan_number_or_path (Union[str, Path]): The plan number (1 to 99) or full path to the plan file
        ras_object (RasPrj, optional): RAS object to use. If None, uses the default ras object.

        Returns:
        Path: Full path to the plan file

        Raises:
        ValueError: If plan number is not between 1 and 99
        TypeError: If input type is invalid
        FileNotFoundError: If the plan file does not exist

        Example:
        >>> plan_path = RasUtils.get_plan_path(1)
        >>> print(f"Plan file path: {plan_path}")
        >>> plan_path = RasUtils.get_plan_path("path/to/plan.p01")
        >>> print(f"Plan file path: {plan_path}")
        """
        # Validate RAS object
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        # Handle direct file path input
        plan_path = Path(current_plan_number_or_path)
        if plan_path.is_file():
            logger.info(f"Using provided plan file path: {plan_path}")
            return plan_path
        
        # Handle plan number input
        try:
            plan_num = int(current_plan_number_or_path)
            if not 1 <= plan_num <= 99:
                raise ValueError(f"Plan number must be between 1 and 99, got: {plan_num}")
            current_plan_number = f"{plan_num:02d}"  # Ensure two-digit format
            logger.debug(f"Converted plan number to two-digit format: {current_plan_number}")
        except (ValueError, TypeError) as e:
            if isinstance(e, TypeError):
                logger.error(f"Invalid input type: {type(current_plan_number_or_path)}. Expected string, number, or Path.")
                raise TypeError(f"Invalid input type: {type(current_plan_number_or_path)}. Expected string, number, or Path.")
            logger.error(f"Invalid plan number: {current_plan_number_or_path}. Expected a number from 1 to 99.")
            raise ValueError(f"Invalid plan number: {current_plan_number_or_path}. Expected a number from 1 to 99.")
        
        # Construct and validate plan path
        plan_name = f"{ras_obj.project_name}.p{current_plan_number}"
        full_plan_path = ras_obj.project_folder / plan_name
        
        if not full_plan_path.exists():
            logger.error(f"Plan file does not exist: {full_plan_path}")
            raise FileNotFoundError(f"Plan file does not exist: {full_plan_path}")
        
        logger.info(f"Constructed plan file path: {full_plan_path}")
        return full_plan_path

    @staticmethod
    @log_call
    def remove_with_retry(
        path: Path,
        max_attempts: int = 5,
        initial_delay: float = 1.0,
        is_folder: bool = True,
        ras_object=None
    ) -> bool:
        """
        Attempts to remove a file or folder with retry logic and exponential backoff.

        Parameters:
        path (Path): Path to the file or folder to be removed.
        max_attempts (int): Maximum number of removal attempts.
        initial_delay (float): Initial delay between attempts in seconds.
        is_folder (bool): If True, the path is treated as a folder; if False, it's treated as a file.
        ras_object (RasPrj, optional): RAS object to use. If None, uses the default ras object.

        Returns:
        bool: True if the file or folder was successfully removed, False otherwise.

        Example:
        >>> success = RasUtils.remove_with_retry(Path("temp_folder"), is_folder=True)
        >>> print(f"Removal successful: {success}")
        """
        
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        path = Path(path)
        for attempt in range(1, max_attempts + 1):
            try:
                if path.exists():
                    if is_folder:
                        shutil.rmtree(path)
                        logger.info(f"Folder removed: {path}")
                    else:
                        path.unlink()
                        logger.info(f"File removed: {path}")
                else:
                    logger.info(f"Path does not exist, nothing to remove: {path}")
                return True
            except PermissionError as pe:
                if attempt < max_attempts:
                    delay = initial_delay * (2 ** (attempt - 1))  # Exponential backoff
                    logger.warning(
                        f"PermissionError on attempt {attempt} to remove {path}: {pe}. "
                        f"Retrying in {delay} seconds..."
                    )
                    time.sleep(delay)
                else:
                    logger.error(
                        f"Failed to remove {path} after {max_attempts} attempts due to PermissionError: {pe}. Skipping."
                    )
                    return False
            except Exception as e:
                logger.exception(f"Failed to remove {path} on attempt {attempt}")
                return False
        return False

    @staticmethod
    @log_call
    def update_plan_file(
        plan_number_or_path: Union[str, Path],
        file_type: str,
        entry_number: int,
        ras_object=None
    ) -> None:
        """
        Update a plan file with a new file reference.

        Parameters:
        plan_number_or_path (Union[str, Path]): The plan number (1 to 99) or full path to the plan file
        file_type (str): Type of file to update ('Geom', 'Flow', or 'Unsteady')
        entry_number (int): Number (from 1 to 99) to set
        ras_object (RasPrj, optional): RAS object to use. If None, uses the default ras object.

        Raises:
        ValueError: If an invalid file_type is provided
        FileNotFoundError: If the plan file doesn't exist

        Example:
        >>> RasUtils.update_plan_file(1, "Geom", 2)
        >>> RasUtils.update_plan_file("path/to/plan.p01", "Geom", 2)
        """
        
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        valid_file_types = {'Geom': 'g', 'Flow': 'f', 'Unsteady': 'u'}
        if file_type not in valid_file_types:
            logger.error(
                f"Invalid file_type '{file_type}'. Expected one of: {', '.join(valid_file_types.keys())}"
            )
            raise ValueError(
                f"Invalid file_type. Expected one of: {', '.join(valid_file_types.keys())}"
            )

        plan_file_path = Path(plan_number_or_path)
        if not plan_file_path.is_file():
            plan_file_path = RasUtils.get_plan_path(plan_number_or_path, ras_object)
            if not plan_file_path.exists():
                logger.error(f"Plan file not found: {plan_file_path}")
                raise FileNotFoundError(f"Plan file not found: {plan_file_path}")
        
        file_prefix = valid_file_types[file_type]
        search_pattern = f"{file_type} File="
        formatted_entry_number = f"{int(entry_number):02d}"  # Ensure two-digit format

        try:
            RasUtils.check_file_access(plan_file_path, 'r')
            with plan_file_path.open('r') as file:
                lines = file.readlines()
        except Exception as e:
            logger.exception(f"Failed to read plan file {plan_file_path}")
            raise

        updated = False
        for i, line in enumerate(lines):
            if line.startswith(search_pattern):
                lines[i] = f"{search_pattern}{file_prefix}{formatted_entry_number}\n"
                logger.info(
                    f"Updated {file_type} File in {plan_file_path} to {file_prefix}{formatted_entry_number}"
                )
                updated = True
                break

        if not updated:
            logger.warning(
                f"Search pattern '{search_pattern}' not found in {plan_file_path}. No update performed."
            )

        try:
            with plan_file_path.open('w') as file:
                file.writelines(lines)
            logger.info(f"Successfully updated plan file: {plan_file_path}")
        except Exception as e:
            logger.exception(f"Failed to write updates to plan file {plan_file_path}")
            raise

        # Refresh RasPrj dataframes
        try:
            ras_obj.plan_df = ras_obj.get_plan_entries()
            ras_obj.geom_df = ras_obj.get_geom_entries()
            ras_obj.flow_df = ras_obj.get_flow_entries()
            ras_obj.unsteady_df = ras_obj.get_unsteady_entries()
            logger.info("RAS object dataframes have been refreshed.")
        except Exception as e:
            logger.exception("Failed to refresh RasPrj dataframes")
            raise

    @staticmethod
    @log_call
    def check_file_access(file_path: Path, mode: str = 'r') -> None:
        """
        Check if the file can be accessed with the specified mode.

        Parameters:
        file_path (Path): Path to the file
        mode (str): Mode to check ('r' for read, 'w' for write, etc.)

        Raises:
        FileNotFoundError: If the file does not exist
        PermissionError: If the required permissions are not met
        """
        
        path = Path(file_path)
        if not path.exists():
            logger.error(f"File not found: {file_path}")
            raise FileNotFoundError(f"File not found: {file_path}")
        
        if mode in ('r', 'rb'):
            if not os.access(path, os.R_OK):
                logger.error(f"Read permission denied for file: {file_path}")
                raise PermissionError(f"Read permission denied for file: {file_path}")
            else:
                logger.debug(f"Read access granted for file: {file_path}")
        
        if mode in ('w', 'wb', 'a', 'ab'):
            parent_dir = path.parent
            if not os.access(parent_dir, os.W_OK):
                logger.error(f"Write permission denied for directory: {parent_dir}")
                raise PermissionError(f"Write permission denied for directory: {parent_dir}")
            else:
                logger.debug(f"Write access granted for directory: {parent_dir}")


    @staticmethod
    @log_call
    def convert_to_dataframe(data_source: Union[pd.DataFrame, Path], **kwargs) -> pd.DataFrame:
        """
        Converts input to a pandas DataFrame. Supports existing DataFrames or file paths (CSV, Excel, TSV, Parquet).

        Args:
            data_source (Union[pd.DataFrame, Path]): The input to convert to a DataFrame. Can be a file path or an existing DataFrame.
            **kwargs: Additional keyword arguments to pass to pandas read functions.

        Returns:
            pd.DataFrame: The resulting DataFrame.

        Raises:
            NotImplementedError: If the file type is unsupported or input type is invalid.

        Example:
            >>> df = RasUtils.convert_to_dataframe(Path("data.csv"))
            >>> print(type(df))
            <class 'pandas.core.frame.DataFrame'>
        """
        if isinstance(data_source, pd.DataFrame):
            logger.debug("Input is already a DataFrame, returning a copy.")
            return data_source.copy()
        elif isinstance(data_source, Path):
            ext = data_source.suffix.replace('.', '', 1)
            logger.info(f"Converting file with extension '{ext}' to DataFrame.")
            if ext == 'csv':
                return pd.read_csv(data_source, **kwargs)
            elif ext.startswith('x'):
                return pd.read_excel(data_source, **kwargs)
            elif ext == "tsv":
                return pd.read_csv(data_source, sep="\t", **kwargs)
            elif ext in ["parquet", "pq", "parq"]:
                return pd.read_parquet(data_source, **kwargs)
            else:
                logger.error(f"Unsupported file type: {ext}")
                raise NotImplementedError(f"Unsupported file type {ext}. Should be one of csv, tsv, parquet, or xlsx.")
        else:
            logger.error(f"Unsupported input type: {type(data_source)}")
            raise NotImplementedError(f"Unsupported type {type(data_source)}. Only file path / existing DataFrame supported at this time")

    @staticmethod
    @log_call
    def save_to_excel(dataframe: pd.DataFrame, excel_path: Path, **kwargs) -> None:
        """
        Saves a pandas DataFrame to an Excel file with retry functionality.

        Args:
            dataframe (pd.DataFrame): The DataFrame to save.
            excel_path (Path): The path to the Excel file where the DataFrame will be saved.
            **kwargs: Additional keyword arguments passed to `DataFrame.to_excel()`.

        Raises:
            IOError: If the file cannot be saved after multiple attempts.

        Example:
            >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
            >>> RasUtils.save_to_excel(df, Path('output.xlsx'))
        """
        saved = False
        max_attempts = 3
        attempt = 0

        while not saved and attempt < max_attempts:
            try:
                dataframe.to_excel(excel_path, **kwargs)
                logger.info(f'DataFrame successfully saved to {excel_path}')
                saved = True
            except IOError as e:
                attempt += 1
                if attempt < max_attempts:
                    logger.warning(f"Error saving file. Attempt {attempt} of {max_attempts}. Please close the Excel document if it's open.")
                else:
                    logger.error(f"Failed to save {excel_path} after {max_attempts} attempts.")
                    raise IOError(f"Failed to save {excel_path} after {max_attempts} attempts. Last error: {str(e)}")

    @staticmethod
    @log_call
    def calculate_rmse(observed_values: np.ndarray, predicted_values: np.ndarray, normalized: bool = True) -> float:
        """
        Calculate the Root Mean Squared Error (RMSE) between observed and predicted values.

        Args:
            observed_values (np.ndarray): Actual observations time series.
            predicted_values (np.ndarray): Estimated/predicted time series.
            normalized (bool, optional): Whether to normalize RMSE to a percentage of observed_values. Defaults to True.

        Returns:
            float: The calculated RMSE value.

        Example:
            >>> observed = np.array([1, 2, 3])
            >>> predicted = np.array([1.1, 2.2, 2.9])
            >>> RasUtils.calculate_rmse(observed, predicted)
            0.06396394
        """
        rmse = np.sqrt(np.mean((predicted_values - observed_values) ** 2))
        
        if normalized:
            rmse = rmse / np.abs(np.mean(observed_values))
        
        logger.debug(f"Calculated RMSE: {rmse}")
        return rmse

    @staticmethod
    @log_call
    def calculate_percent_bias(observed_values: np.ndarray, predicted_values: np.ndarray, as_percentage: bool = False) -> float:
        """
        Calculate the Percent Bias between observed and predicted values.

        Args:
            observed_values (np.ndarray): Actual observations time series.
            predicted_values (np.ndarray): Estimated/predicted time series.
            as_percentage (bool, optional): If True, return bias as a percentage. Defaults to False.

        Returns:
            float: The calculated Percent Bias.

        Example:
            >>> observed = np.array([1, 2, 3])
            >>> predicted = np.array([1.1, 2.2, 2.9])
            >>> RasUtils.calculate_percent_bias(observed, predicted, as_percentage=True)
            3.33333333
        """
        multiplier = 100 if as_percentage else 1
        
        percent_bias = multiplier * (np.mean(predicted_values) - np.mean(observed_values)) / np.mean(observed_values)
        
        logger.debug(f"Calculated Percent Bias: {percent_bias}")
        return percent_bias

    @staticmethod
    @log_call
    def calculate_error_metrics(observed_values: np.ndarray, predicted_values: np.ndarray) -> Dict[str, float]:
        """
        Compute a trio of error metrics: correlation, RMSE, and Percent Bias.

        Args:
            observed_values (np.ndarray): Actual observations time series.
            predicted_values (np.ndarray): Estimated/predicted time series.

        Returns:
            Dict[str, float]: A dictionary containing correlation ('cor'), RMSE ('rmse'), and Percent Bias ('pb').

        Example:
            >>> observed = np.array([1, 2, 3])
            >>> predicted = np.array([1.1, 2.2, 2.9])
            >>> RasUtils.calculate_error_metrics(observed, predicted)
            {'cor': 0.9993, 'rmse': 0.06396, 'pb': 0.03333}
        """
        correlation = np.corrcoef(observed_values, predicted_values)[0, 1]
        rmse = RasUtils.calculate_rmse(observed_values, predicted_values)
        percent_bias = RasUtils.calculate_percent_bias(observed_values, predicted_values)
        
        metrics = {'cor': correlation, 'rmse': rmse, 'pb': percent_bias}
        logger.info(f"Calculated error metrics: {metrics}")
        return metrics

    
    @staticmethod
    @log_call
    def update_file(file_path: Path, update_function: Callable, *args) -> None:
        """
        Generic method to update a file.

        Parameters:
        file_path (Path): Path to the file to be updated
        update_function (Callable): Function to update the file contents
        *args: Additional arguments to pass to the update_function

        Raises:
        Exception: If there's an error updating the file

        Example:
        >>> def update_content(lines, new_value):
        ...     lines[0] = f"New value: {new_value}\\n"
        ...     return lines
        >>> RasUtils.update_file(Path("example.txt"), update_content, "Hello")
        """
        try:
            with open(file_path, 'r') as f:
                lines = f.readlines()
            
            updated_lines = update_function(lines, *args) if args else update_function(lines)
            
            with open(file_path, 'w') as f:
                f.writelines(updated_lines)
            logger.info(f"Successfully updated file: {file_path}")
        except Exception as e:
            logger.exception(f"Failed to update file {file_path}")
            raise

    @staticmethod
    @log_call
    def get_next_number(existing_numbers: list) -> str:
        """
        Determine the next available number from a list of existing numbers.

        Parameters:
        existing_numbers (list): List of existing numbers as strings

        Returns:
        str: Next available number as a zero-padded string

        Example:
        >>> RasUtils.get_next_number(["01", "02", "04"])
        "05"
        """
        existing_numbers = sorted(int(num) for num in existing_numbers)
        next_number = max(existing_numbers, default=0) + 1
        return f"{next_number:02d}"

    @staticmethod
    @log_call
    def clone_file(template_path: Path, new_path: Path, update_function: Optional[Callable] = None, *args) -> None:
        """
        Generic method to clone a file and optionally update it.

        Parameters:
        template_path (Path): Path to the template file
        new_path (Path): Path where the new file will be created
        update_function (Optional[Callable]): Function to update the cloned file
        *args: Additional arguments to pass to the update_function

        Raises:
        FileNotFoundError: If the template file doesn't exist

        Example:
        >>> def update_content(lines, new_value):
        ...     lines[0] = f"New value: {new_value}\\n"
        ...     return lines
        >>> RasUtils.clone_file(Path("template.txt"), Path("new.txt"), update_content, "Hello")
        """
        if not template_path.exists():
            logger.error(f"Template file '{template_path}' does not exist.")
            raise FileNotFoundError(f"Template file '{template_path}' does not exist.")

        shutil.copy(template_path, new_path)
        logger.info(f"File cloned from {template_path} to {new_path}")

        if update_function:
            RasUtils.update_file(new_path, update_function, *args)
    @staticmethod
    @log_call
    def update_project_file(prj_file: Path, file_type: str, new_num: str, ras_object=None) -> None:
        """
        Update the project file with a new entry.

        Parameters:
        prj_file (Path): Path to the project file
        file_type (str): Type of file being added (e.g., 'Plan', 'Geom')
        new_num (str): Number of the new file entry
        ras_object (RasPrj, optional): RAS object to use. If None, uses the default ras object.

        Example:
        >>> RasUtils.update_project_file(Path("project.prj"), "Plan", "02")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        try:
            with open(prj_file, 'r') as f:
                lines = f.readlines()
            
            new_line = f"{file_type} File={file_type[0].lower()}{new_num}\n"
            lines.append(new_line)
            
            with open(prj_file, 'w') as f:
                f.writelines(lines)
            logger.info(f"Project file updated with new {file_type} entry: {new_num}")
        except Exception as e:
            logger.exception(f"Failed to update project file {prj_file}")
            raise
        
  
        
        
    # From FunkShuns
        
    @staticmethod
    @log_call
    def decode_byte_strings(dataframe: pd.DataFrame) -> pd.DataFrame:
        """
        Decodes byte strings in a DataFrame to regular string objects.

        This function converts columns with byte-encoded strings (e.g., b'string') into UTF-8 decoded strings.

        Args:
            dataframe (pd.DataFrame): The DataFrame containing byte-encoded string columns.

        Returns:
            pd.DataFrame: The DataFrame with byte strings decoded to regular strings.

        Example:
            >>> df = pd.DataFrame({'A': [b'hello', b'world'], 'B': [1, 2]})
            >>> decoded_df = RasUtils.decode_byte_strings(df)
            >>> print(decoded_df)
                A  B
            0  hello  1
            1  world  2
        """
        str_df = dataframe.select_dtypes(['object'])
        str_df = str_df.stack().str.decode('utf-8').unstack()
        for col in str_df:
            dataframe[col] = str_df[col]
        return dataframe

    @staticmethod
    @log_call
    def perform_kdtree_query(
        reference_points: np.ndarray,
        query_points: np.ndarray,
        max_distance: float = 2.0
    ) -> np.ndarray:
        """
        Performs a KDTree query between two datasets and returns indices with distances exceeding max_distance set to -1.

        Args:
            reference_points (np.ndarray): The reference dataset for KDTree.
            query_points (np.ndarray): The query dataset to search against KDTree of reference_points.
            max_distance (float, optional): The maximum distance threshold. Indices with distances greater than this are set to -1. Defaults to 2.0.

        Returns:
            np.ndarray: Array of indices from reference_points that are nearest to each point in query_points. 
                        Indices with distances > max_distance are set to -1.

        Example:
            >>> ref_points = np.array([[0, 0], [1, 1], [2, 2]])
            >>> query_points = np.array([[0.5, 0.5], [3, 3]])
            >>> result = RasUtils.perform_kdtree_query(ref_points, query_points)
            >>> print(result)
            array([ 0, -1])
        """
        dist, snap = KDTree(reference_points).query(query_points, distance_upper_bound=max_distance)
        snap[dist > max_distance] = -1
        return snap

    @staticmethod
    @log_call
    def find_nearest_neighbors(points: np.ndarray, max_distance: float = 2.0) -> np.ndarray:
        """
        Creates a self KDTree for dataset points and finds nearest neighbors excluding self, 
        with distances above max_distance set to -1.

        Args:
            points (np.ndarray): The dataset to build the KDTree from and query against itself.
            max_distance (float, optional): The maximum distance threshold. Indices with distances 
                                            greater than max_distance are set to -1. Defaults to 2.0.

        Returns:
            np.ndarray: Array of indices representing the nearest neighbor in points for each point in points. 
                        Indices with distances > max_distance or self-matches are set to -1.

        Example:
            >>> points = np.array([[0, 0], [1, 1], [2, 2], [10, 10]])
            >>> result = RasUtils.find_nearest_neighbors(points)
            >>> print(result)
            array([1, 0, 1, -1])
        """
        dist, snap = KDTree(points).query(points, k=2, distance_upper_bound=max_distance)
        snap[dist > max_distance] = -1
        
        snp = pd.DataFrame(snap, index=np.arange(len(snap)))
        snp = snp.replace(-1, np.nan)
        snp.loc[snp[0] == snp.index, 0] = np.nan
        snp.loc[snp[1] == snp.index, 1] = np.nan
        filled = snp[0].fillna(snp[1])
        snapped = filled.fillna(-1).astype(np.int64).to_numpy()
        return snapped

    @staticmethod
    @log_call
    def consolidate_dataframe(
        dataframe: pd.DataFrame,
        group_by: Optional[Union[str, List[str]]] = None,
        pivot_columns: Optional[Union[str, List[str]]] = None,
        level: Optional[int] = None,
        n_dimensional: bool = False,
        aggregation_method: Union[str, Callable] = 'list'
    ) -> pd.DataFrame:
        """
        Consolidate rows in a DataFrame by merging duplicate values into lists or using a specified aggregation function.

        Args:
            dataframe (pd.DataFrame): The DataFrame to consolidate.
            group_by (Optional[Union[str, List[str]]]): Columns or indices to group by.
            pivot_columns (Optional[Union[str, List[str]]]): Columns to pivot.
            level (Optional[int]): Level of multi-index to group by.
            n_dimensional (bool): If True, use a pivot table for N-Dimensional consolidation.
            aggregation_method (Union[str, Callable]): Aggregation method, e.g., 'list' to aggregate into lists.

        Returns:
            pd.DataFrame: The consolidated DataFrame.

        Example:
            >>> df = pd.DataFrame({'A': [1, 1, 2], 'B': [4, 5, 6], 'C': [7, 8, 9]})
            >>> result = RasUtils.consolidate_dataframe(df, group_by='A')
            >>> print(result)
            B         C
            A            
            1  [4, 5]  [7, 8]
            2  [6]     [9]
        """
        if aggregation_method == 'list':
            agg_func = lambda x: tuple(x)
        else:
            agg_func = aggregation_method

        if n_dimensional:
            result = dataframe.pivot_table(group_by, pivot_columns, aggfunc=agg_func)
        else:
            result = dataframe.groupby(group_by, level=level).agg(agg_func).applymap(list)

        return result

    @staticmethod
    @log_call
    def find_nearest_value(array: Union[list, np.ndarray], target_value: Union[int, float]) -> Union[int, float]:
        """
        Finds the nearest value in a NumPy array to the specified target value.

        Args:
            array (Union[list, np.ndarray]): The array to search within.
            target_value (Union[int, float]): The value to find the nearest neighbor to.

        Returns:
            Union[int, float]: The nearest value in the array to the specified target value.

        Example:
            >>> arr = np.array([1, 3, 5, 7, 9])
            >>> result = RasUtils.find_nearest_value(arr, 6)
            >>> print(result)
            5
        """
        array = np.asarray(array)
        idx = (np.abs(array - target_value)).argmin()
        return array[idx]
    
    @classmethod
    @log_call
    def horizontal_distance(cls, coord1: np.ndarray, coord2: np.ndarray) -> float:
        """
        Calculate the horizontal distance between two coordinate points.
        
        Args:
            coord1 (np.ndarray): First coordinate point [X, Y].
            coord2 (np.ndarray): Second coordinate point [X, Y].
        
        Returns:
            float: Horizontal distance.
        
        Example:
            >>> distance = RasUtils.horizontal_distance(np.array([0, 0]), np.array([3, 4]))
            >>> print(distance)
            5.0
        """
        return np.linalg.norm(coord2 - coord1)
    
    
    
    
    
==================================================

File: c:\GH\ras-commander\ras_commander\__init__.py
==================================================
"""
ras-commander: A Python library for automating HEC-RAS operations
"""

from importlib.metadata import version, PackageNotFoundError
from .LoggingConfig import setup_logging, get_logger
from .Decorators import log_call, standardize_input

try:
    __version__ = version("ras-commander")
except PackageNotFoundError:
    # package is not installed
    __version__ = "0.77.0" # Increment version appropriately

# Set up logging
setup_logging()

# Core functionality
from .RasPrj import RasPrj, init_ras_project, get_ras_exe, ras
from .RasPlan import RasPlan
from .RasGeo import RasGeo
from .RasUnsteady import RasUnsteady
from .RasUtils import RasUtils
from .RasExamples import RasExamples
from .RasCmdr import RasCmdr
from .RasMap import RasMap
from .HdfFluvialPluvial import HdfFluvialPluvial
from .RasRemote import RasRemote, init_remote_ras # Added imports

# HDF handling
from .HdfBase import HdfBase
from .HdfBndry import HdfBndry
from .HdfMesh import HdfMesh
from .HdfPlan import HdfPlan
from .HdfResultsMesh import HdfResultsMesh
from .HdfResultsPlan import HdfResultsPlan
from .HdfResultsXsec import HdfResultsXsec
from .HdfStruc import HdfStruc
from .HdfUtils import HdfUtils
from .HdfXsec import HdfXsec
from .HdfPump import HdfPump
from .HdfPipe import HdfPipe
from .HdfInfiltration import HdfInfiltration

# Plotting functionality
from .HdfPlot import HdfPlot
from .HdfResultsPlot import HdfResultsPlot

# Define __all__ to specify what should be imported when using "from ras_commander import *"
__all__ = [
    # Core functionality
    'RasPrj', 'init_ras_project', 'get_ras_exe', 'ras',
    'RasPlan', 'RasGeo', 'RasUnsteady', 'RasUtils',
    'RasExamples', 'RasCmdr', 'RasMap', 'HdfFluvialPluvial',
    'RasRemote', 'init_remote_ras', # Added new items

    # HDF handling
    'HdfBase', 'HdfBndry', 'HdfMesh', 'HdfPlan',
    'HdfResultsMesh', 'HdfResultsPlan', 'HdfResultsXsec',
    'HdfStruc', 'HdfUtils', 'HdfXsec', 'HdfPump',
    'HdfPipe', 'HdfInfiltration',

    # Plotting functionality
    'HdfPlot', 'HdfResultsPlot',

    # Utilities
    'get_logger', 'log_call', 'standardize_input',
]
==================================================

Folder: c:\GH\ras-commander\tools\1D Mannings to L-MC-R
==================================================

Folder: c:\GH\ras-commander\tools\Model Coupling Tools
==================================================

File: c:\GH\ras-commander\tools\1D Mannings to L-MC-R\1D_Mannings_to_L-MC-R.py
==================================================
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import os
import re

# Try to import tkinterdnd2 for drag and drop support
try:
    from tkinterdnd2 import DND_FILES, TkinterDnD
    HAS_DND = True
except ImportError:
    HAS_DND = False

def process_file(file_path, left_overbank, main_channel, right_overbank, progress_callback=None):
    """
    Process a HEC-RAS geometry file to convert non-standard Manning's n values to use normal subsection breaks.
    
    Args:
        file_path: Path to the input HEC-RAS geometry file
        left_overbank: Manning's n value for left overbank
        main_channel: Manning's n value for main channel
        right_overbank: Manning's n value for right overbank
        progress_callback: Function to call with progress updates
        
    Returns:
        Tuple of (list of edited cross sections, message)
    """
    try:
        with open(file_path, 'r') as f:
            lines = f.readlines()
        
        total_lines = len(lines)
        modified_lines = []
        edited_cross_sections = []
        current_cross_section = ""
        i = 0
        
        while i < len(lines):
            line = lines[i]
            modified_lines.append(line)
            
            # Update progress every 100 lines
            if progress_callback and i % 100 == 0:
                progress_callback(i, total_lines)
            
            # Check for new cross section
            if line.strip().startswith("Type RM Length L Ch R"):
                match = re.search(r'=\s*\d+\s*,([^,]+)', line)
                if match:
                    current_cross_section = match.group(1).strip()
                else:
                    current_cross_section = f"Unknown_{i}"
            
            # Check for Manning's line
            elif line.strip().startswith("#Mann="):
                mann_parts = line.strip().split(',')
                
                # Check for non-standard subsection format
                if len(mann_parts) >= 2 and mann_parts[1].strip() == '-1':
                    # Look ahead for bank stations
                    bank_line_idx = i
                    bank_line = None
                    
                    # Look for Bank Sta line within next 20 lines
                    for j in range(i+1, min(i+21, len(lines))):
                        if lines[j].strip().startswith("Bank Sta="):
                            bank_line = lines[j]
                            bank_line_idx = j
                            break
                    
                    if bank_line:
                        bank_match = re.search(r'Bank Sta=([^,]+),([^\n]+)', bank_line)
                        
                        if bank_match:
                            left_bank = bank_match.group(1).strip()
                            right_bank = bank_match.group(2).strip()
                            
                            # Replace the Manning's line
                            modified_lines[-1] = f"#Mann= 3 ,0,0\n"
                            
                            # Skip the next line which has the old Manning's values
                            i += 1
                            # Don't append the old values line
                            
                            # Add the new Manning's values line
                            modified_lines.append(f"       0    {left_overbank}       0 {left_bank}    {main_channel}       0 {right_bank}    {right_overbank}       0\n")
                            
                            edited_cross_sections.append(current_cross_section)
            i += 1
        
        # Final progress update
        if progress_callback:
            progress_callback(total_lines, total_lines)
        
        # Create a backup file with .bak extension (with incremental numbering if needed)
        base_name = file_path
        backup_num = 0
        backup_path = f"{base_name}.bak"
        
        # Check if backup already exists, increment number if needed
        while os.path.exists(backup_path):
            backup_num += 1
            backup_path = f"{base_name}.bak{backup_num}"
        
        # Create the backup
        with open(backup_path, 'w') as f:
            f.writelines(lines)
        
        # Write changes back to the original file
        with open(file_path, 'w') as f:
            f.writelines(modified_lines)
        
        return edited_cross_sections, f"Original file backed up as: {os.path.basename(backup_path)}"
    
    except Exception as e:
        import traceback
        return [], f"Error: {str(e)}\n{traceback.format_exc()}"

def create_gui():
    def update_progress(current, total):
        progress_var.set(int(current / total * 100))
        progress_label.config(text=f"Processing: {current}/{total} lines ({int(current / total * 100)}%)")
        root.update_idletasks()
    
    def on_submit():
        try:
            left_n = float(left_entry.get())
            main_n = float(main_entry.get())
            right_n = float(right_entry.get())
            
            if not file_path:
                messagebox.showerror("Error", "Please select a file first.")
                return
            
            # Validate input values
            if left_n <= 0 or main_n <= 0 or right_n <= 0:
                messagebox.showerror("Error", "Manning's n values must be positive numbers.")
                return
            
            # Show progress
            progress_frame.pack(fill=tk.X, pady=5)
            progress_var.set(0)
            progress_label.config(text="Processing: 0%")
            root.update_idletasks()
            
            # Process the file
            edited_sections, result_message = process_file(
                file_path, 
                f"{left_n:.3f}", 
                f"{main_n:.3f}", 
                f"{right_n:.3f}", 
                update_progress
            )
            
            # Hide progress
            progress_frame.pack_forget()
            
            # Show results
            result_text.delete(1.0, tk.END)
            if edited_sections:
                result_text.insert(tk.END, f"Original file has been modified.\n")
                result_text.insert(tk.END, f"{result_message}\n\n")
                result_text.insert(tk.END, f"Edited {len(edited_sections)} Cross Sections:\n")
                for section in edited_sections:
                    result_text.insert(tk.END, f"- {section}\n")
            else:
                if result_message.startswith("Error:"):
                    result_text.insert(tk.END, f"{result_message}\n")
                else:
                    result_text.insert(tk.END, "No cross sections were found that needed editing.\n")
                    result_text.insert(tk.END, "This could mean either:\n")
                    result_text.insert(tk.END, "1. All cross sections already use normal subsection breaks\n")
                    result_text.insert(tk.END, "2. The file format is different than expected\n")
        
        except ValueError:
            messagebox.showerror("Error", "Please enter valid numbers for Manning's n values.")
    
    def on_browse():
        nonlocal file_path
        file_path = filedialog.askopenfilename(
            title="Select HEC-RAS Geometry File",
            filetypes=[("All Files", "*.*"), ("Text Files", "*.txt")]
        )
        if file_path:
            file_label.config(text=os.path.basename(file_path))
    
    def on_drop(event):
        nonlocal file_path
        file_path = event.data
        if file_path:
            # Clean up the path (may contain curly braces or quotes depending on OS)
            file_path = file_path.strip('{}')
            file_path = file_path.strip('"')
            file_label.config(text=os.path.basename(file_path))
    
    # Initialize the main window
    if HAS_DND:
        root = TkinterDnD.Tk()
    else:
        root = tk.Tk()
    
    root.title("HEC-RAS Manning's n Editor")
    root.geometry("600x500")
    
    file_path = ""
    
    # Create the main frame with padding that works in all tkinter versions
    main_frame = ttk.Frame(root)
    main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
    
    # File selection section
    file_frame = ttk.LabelFrame(main_frame, text="Select HEC-RAS Geometry File")
    file_frame.pack(fill=tk.X, pady=10, padx=10)
    
    file_subframe = ttk.Frame(file_frame)
    file_subframe.pack(fill=tk.X, expand=True, padx=10, pady=10)
    
    browse_button = ttk.Button(file_subframe, text="Browse...", command=on_browse)
    browse_button.pack(side=tk.LEFT, padx=5)
    
    file_label = ttk.Label(file_subframe, text="No file selected")
    file_label.pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
    
    # Drop area setup if DND is available
    if HAS_DND:
        file_frame.drop_target_register(DND_FILES)
        file_frame.dnd_bind('<<Drop>>', on_drop)
        drag_label = ttk.Label(file_subframe, text="Drag and drop file here")
        drag_label.pack(side=tk.RIGHT, padx=5)
    
    # Manning's n values section
    values_frame = ttk.LabelFrame(main_frame, text="Manning's n Values")
    values_frame.pack(fill=tk.X, pady=10, padx=10)
    
    values_subframe = ttk.Frame(values_frame)
    values_subframe.pack(fill=tk.X, expand=True, padx=10, pady=10)
    
    # Left overbank
    ttk.Label(values_subframe, text="Left Overbank:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
    left_entry = ttk.Entry(values_subframe, width=10)
    left_entry.grid(row=0, column=1, sticky=tk.W, padx=5, pady=5)
    left_entry.insert(0, "0.11")
    
    # Main channel
    ttk.Label(values_subframe, text="Main Channel:").grid(row=1, column=0, sticky=tk.W, padx=5, pady=5)
    main_entry = ttk.Entry(values_subframe, width=10)
    main_entry.grid(row=1, column=1, sticky=tk.W, padx=5, pady=5)
    main_entry.insert(0, "0.08")
    
    # Right overbank
    ttk.Label(values_subframe, text="Right Overbank:").grid(row=2, column=0, sticky=tk.W, padx=5, pady=5)
    right_entry = ttk.Entry(values_subframe, width=10)
    right_entry.grid(row=2, column=1, sticky=tk.W, padx=5, pady=5)
    right_entry.insert(0, "0.12")
    
    # Process button
    process_button = ttk.Button(main_frame, text="Process File", command=on_submit)
    process_button.pack(pady=10)
    
    # Progress frame
    progress_frame = ttk.Frame(main_frame)
    progress_var = tk.IntVar()
    progress_bar = ttk.Progressbar(progress_frame, variable=progress_var, maximum=100)
    progress_bar.pack(fill=tk.X, padx=10, pady=5)
    progress_label = ttk.Label(progress_frame, text="Processing: 0%")
    progress_label.pack(pady=5)
    # Don't pack the progress_frame initially - it will be shown during processing
    
    # Results section
    results_frame = ttk.LabelFrame(main_frame, text="Results")
    results_frame.pack(fill=tk.BOTH, expand=True, pady=10, padx=10)
    
    results_subframe = ttk.Frame(results_frame)
    results_subframe.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
    
    result_text = tk.Text(results_subframe, height=10, wrap=tk.WORD)
    result_text.pack(fill=tk.BOTH, expand=True, side=tk.LEFT)
    
    result_scrollbar = ttk.Scrollbar(results_subframe, orient=tk.VERTICAL, command=result_text.yview)
    result_text.configure(yscrollcommand=result_scrollbar.set)
    result_scrollbar.pack(fill=tk.Y, side=tk.RIGHT)
    
    # Add some initial help text
    result_text.insert(tk.END, "Instructions:\n")
    result_text.insert(tk.END, "1. Select a HEC-RAS geometry file\n")
    result_text.insert(tk.END, "2. Set Manning's n values for each section\n")
    result_text.insert(tk.END, "3. Click 'Process File' to convert non-standard Manning's to normal subsection breaks\n\n")
    result_text.insert(tk.END, "The script will find cross sections where Manning's doesn't use normal subsection breaks\n")
    result_text.insert(tk.END, "(lines with #Mann= X ,-1,0) and convert them to use the standard format (#Mann= 3 ,0,0)\n")
    result_text.insert(tk.END, "with the specified n values for left overbank, main channel, and right overbank.\n\n")
    result_text.insert(tk.END, "Note: The original file will be backed up with .bak extension before modifications.")
    
    root.mainloop()

if __name__ == "__main__":
    create_gui()
==================================================

File: c:\GH\ras-commander\tools\1D Mannings to L-MC-R\README.md
==================================================
# HEC-RAS Manning's n Editor

## Overview
The HEC-RAS Manning's n Editor is a utility tool designed to streamline the process of configuring Manning's roughness values in 1D HEC-RAS models. It specifically addresses the common issue where HEC-RAS defaults to horizontal Manning's values (`-9999`) for every cross section, making the setup of large dendritic river systems tedious and time-consuming.

This tool was developed in response to feedback from the hydraulic modeling community regarding workflow inefficiencies when building 1D models in newer versions of HEC-RAS.

## Problem Statement
When creating 1D models in recent versions of HEC-RAS, the software automatically assigns horizontal Manning's values (indicated by `-9999`) to every cross section. This requires modelers to manually convert each cross section to use the standard Left Overbank/Main Channel/Right Overbank (L/MC/R) format before they can assign appropriate roughness values through the Tables interface.

For models with numerous cross sections, this process becomes extremely time-consuming and error-prone.

## Solution
This tool automates the conversion process by:
1. Identifying all cross sections in a HEC-RAS geometry file that use the horizontal Manning's format (`#Mann= 1 ,-1,0`)
2. Converting them to use the standard L/MC/R format (`#Mann= 3 ,0,0`) with user-specified values
3. Preserving the original bank stations from each cross section
4. Automatically creating a backup of the original geometry file before making any changes

## Features
- Simple graphical user interface
- Drag-and-drop file selection (if tkinterdnd2 is installed)
- Custom Manning's n values for left overbank, main channel, and right overbank
- Progress tracking for large files
- Detailed results reporting
- Automatic backup creation with .bak extension

## Installation

### Option 1: Run the Python Script
1. Ensure Python 3.6+ is installed on your system
2. Install required dependencies:
   ```
   pip install tkinter
   pip install tkinterdnd2  # Optional, for drag-and-drop functionality
   ```
3. Download the `1D_Mannings_to_L-MC-R.py` script
4. Run it with Python:
   ```
   python 1D_Mannings_to_L-MC-R.py
   ```

### Option 2: Use the Executable
Download and run the pre-compiled executable (`1D_Mannings_to_L-MC-R.exe`) - no Python installation required.

## Usage Instructions
1. Launch the application
2. Select a HEC-RAS geometry file using the "Browse" button or drag-and-drop
3. Enter the desired Manning's n values for:
   - Left Overbank (default: 0.11)
   - Main Channel (default: 0.08)
   - Right Overbank (default: 0.12)
4. Click "Process File" to begin conversion
5. Review the results in the text area

## How It Works
For each cross section with format `#Mann= 1 ,-1,0` and `-9999` values, the tool:
1. Reads the bank stations
2. Replaces the format with `#Mann= 3 ,0,0`
3. Creates a line with the 3 specified Manning's values assigned to the appropriate stations

Before:
```
#Mann= 1 ,-1,0
       0   -9999       0
Bank Sta=2408.322,2509.271
```

After:
```
#Mann= 3 ,0,0
       0    .11       0 2408.322    .08       0 2509.271    .12       0
Bank Sta=2408.322,2509.271
```


## Notes and Limitations
- Always review results after processing to ensure proper conversion
- The tool will not affect cross sections that already use the standard L/MC/R format
- Creates a backup of the original file with .bak extension (or .bak1, .bak2, etc. if multiple backups exist)
- Modifies the original file in place after creating the backup



## Compiling to Executable
If you wish to compile the script to an executable yourself:

1. Install PyInstaller:
   ```
   pip install pyinstaller
   ```

2. Navigate to the directory containing the script and run:
   ```
   pyinstaller --onefile --windowed 1D_Mannings_to_L-MC-R.py
   ```

3. Look for the executable in the `dist` folder that PyInstaller creates

For enhanced drag-and-drop functionality:
```
pyinstaller --onefile --windowed --add-data "C:\path\to\python\site-packages\tkinterdnd2;tkinterdnd2" 1D_Mannings_to_L-MC-R.py
```




## Acknowledgments
This tool was created in response to discussions within the HEC-RAS user community about workflow improvements for 1D modeling. Special thanks to the hydraulic modelers who identified this common pain point.

## License
This tool is provided as-is under the MIT License.
==================================================

File: c:\GH\ras-commander\tools\1D Mannings to L-MC-R\water_icon.ico
==================================================
           9     PNG

   IHDR         \rf   orNTϢw  8IDATx}t\յ̟$X+@hllJ fJxtjp @BI` /@*0Sbl `FŖe[\ԦH^m.^ߙsFwFSf̽%[u{婣:ꨣ:ct
ݍybo^aZꨣNN˛t
A=}0_!E8p<!;V|W][a=6"uԙK)pIB$L#Cp/k/!@$z	}s{g6\7ωߍq=\tA=(u磎:D`V{
ŵ.8Y.#TÄO o ¨QcEqd'$7Q] um-a#4=EBС>5PSŧv	bX,l>Xbͣ
<4e9w	B3ϩM%s	& <MYݬ.:=0}0 "t>'²YCxH&_rgA_](urK;F
|6D+O$]n%OLT:9ӻy=]\!.2xMDF?
&ybv3P'ھ!Z?DzlA	} i'	|^AG2_?IGX/LY%>QBnIZu2e%\^<if)5]½:_J3-k*Q'MOVe"}nQ8pX9O-31Qw4nB5E&
5(V:ID|^MTQg1"fiQ'ꁦp|*/C:a~8GP2hUfT-1"\7r{ZEA5PnMJI(\لXs3&mX8zэaT	KT	xdsVS۔[`U/;1W p'N\T
̯ݡ7M$+@8LY&>qz_AO%W1p3ck`v1uG]nd;
cGՓ01Y9siFN^	VHv;)wtaNAsm.B:1,s
ɲɯ-9ϫV];*.V势:uAº,:XѬ.̩-/w+"0L	i+d؍xga3^N-W_9sXP.B6q@:+K ~XbSȡyݔ+ܕEafbｺt
AWgB	Z*֨KXV9VitL].LY&LMb*ԥR0,į!2)H˭Zujh4z2l	JM2%^B)[w]SȞna'8!%ف#U`<U88	T75Cҍ͜:/,].q%l}+au*,w]#{^c	uvV?^i`	S6<W6vQXLw{C;-ݬ,í0).=MLUaTݲ6k=[JF
akeK|522i؆&"'aY߳-aE݃ J	kz
0vfPz_6ײv ?TUdxl
DL}^?PϞa/7_Z+ŕ*%h0Njjr_[H+1edc,gEk}ک>9~TC	`Es' DZٕ*`4lơ%KV{BhԱwzGle'`]3`EzcD&BAu=[?N%\jU,	>R4#բ,|!^V= `6YG\VAp,T+$x؜McDܚ`4=wg" ѡ0FXaW%,dgoT$`<V
1	d)Omi  cwaOȞ")nff6 % PtF
([׍UIo71{6ox)֞)X{)jjP6BY&(tIz#ۍuQدK%܄w+0Y/1?So^LWD7yڮ "'L+{ݞ<eO_wXqPR ]M9=x@04l.eoÛbj	k j:m<FlP86nO_t!٫8$H16vվW7'ߦ;XPeFu}N	hL	Usnb|t;,G $.dS Q%d-7݄EO#a`ov]-8?rgoV_[6j @ !x]Urſ9]lkА&@?T|#{X	B@{lUppdt7<ju^l'S2r -ln
{4^k=Yn`vLXǹJ(%;GfHȡnh*rDX.X^FqбYh"lhf[vMlkgh <E@i# mIjXVBpk|۶68X3M 'ʺD#nRŌ7+ߓpS;N]hîܒv\/A ZZKU@@|*d0`|6N/8Wu]<H[Fw֥?8]hg% «֌ 
0Մ/va#F;
ff`CCۤ
9~=@ۮً-l;6=l^/=-)x `P@o4:e"vZZeق>u1f	S6 0sK+'3n)I Q/#"aQ${
J)=7ݚ{/l
k P;v%Q&[о3*XU, ky(37UjH+N0{Lf6%($/L{A^@+2fE^]6K{2B@O lJw0d4IțYt'AHoBV =_tFD
#e"uKSp!lhRnف$ܗ	i9=6=9	8v]6w@ ddMM?ژgX:֊eͼC}-}K|Td"VJDO7eϾq@<Ж~)uxn[[5qPdrH?#	8u,44tڗf9
aTqˣԓTo =l`ܯ2)TTin.tFx % ;̕0T'ހM+ x2he`W$ Z(Sx5F	s`<ܟSL55d4!yWfx7v$	2`R- &<!7oHPgijjzHeAm5($Hjz Vp"#*jdyWihj~0xsQ	`	4tgCd[WtrI@V8ObG0Qj
@+p^E 1~KF	`Zb]Ąhm	^ۿɞ_lLԟ+2mk1OV EBS
\1*|:Hޚ&M ^"ط?LдN.g~oeŤPCi#!s`B8)#VԬ 7zZ-.`ܽ#nHg%3?GZ 6N5l w+[E_'BXdI$i\3 ;.aKhVD F0L2{}!<	d /`$g{tڂgnnf/x;r[FxUyc[@p9H`TAY*I4|-)X)6șrE	\*@#ߛ@? l\\O}d,tp5@Դa^!I fk 'c(#8.z\SR159)B :lܹ4 WXBV\n	$D  w,}mSG[w8$Y~= )Agt(.X wW$Z\ow$Ea֘uMg$%W@Z
cZ$Àˁe#Շ]KZ2O0b7Ѧ q)C0Tz/'|YG%MG=ѭhHr0)t	?n`Pavm>V۞p9, /T;73D[O
hmF_OZfT)\XG&|~|o{/|D@k~@zBs 9j^YڜebSjA{?mwm{v%lf=|"?u'ܕwKE`-hkk˥'3;7 V @J2Qy2 DE۽=6?HC;
ҍU(Yy\1	@3\\z(oku/va]+Nx5%5?ɚ={!ٶIK> 0W~!ևi{s._K{\aPGJE"ķ%E1 5[ CA;iϮ}&Rk?&$oSܽŌM|}S'@ s2eCf_|)3o}o| a]փc,ۭ=aS!jh!\_" ]h&_b16r?!W߰Dģw^IԢll	~#D n^/ի%Vfoo3m,^ {p{\Bu@V?nKYHNIvzi@ jlH@ϸp!7'0z ~߻?B!v_ _3aޝ%C h"ؗO*rO2)kl%'.djp2#X6=4^X{Ek?|$=q m|/I>_] ͅ9ơfmWrY3H	&9H _A`;Ъz0fJQػwP!RCybG~ACm˾.vei?|s!E!)<6lM&+H	Km$ I ĆA#IUo4`%ixBP,FP5d?bgo40{o/3}
b.._B 23MqA`)dka.	t@ wd ª>EMu
 +Jî0 0 }_2=)$Cr5@׊ud߷H	BH%[Ed|C=_+.'
RĊ{BB  /:yk/f}@T_-@zl'$ Lm6՛H[@+I"m'&'݊x,?ʾb9i%>Vu<V`uoeO4G=^+/2LYCh" $늫
89u|1[D!\Qk]AиXKc"ʃKX}?^x]ϩi3\8LOC >`t}m؆=\ZvDbRg)0~̭lq1<vF-|u{ Dl:2})]\]R	c+U]n@F{"IN3ne;Snώ6nY9"d;V?g%lk׵^_FZX;f6GQd[ZA:"DR}+;٩jfFLQݷ,FJujpo̮GD!0͍4Cfvݼؑ  +MrS@W3\lIWV@ڛ :Xd?7&hڀ:Rp#yA@1B83jCR&# P.ۋ:\;+ }K7tpkPD0\k" -7:l*Қ7hP_7ce_bηŢQEM1~~H_k#Xw@|=Rr/ PROhY,3Za3VC^wԚqLG
w{hE6m*J+]
x߿Y:A"k my0~Yw=fG"IU6lf~%}M~cc 
VƬB5F.AV Bb gu1D[>/܀f#y`&!{t ݟDm:tz:DC1~;9+Y2 BZY4*}}d%\$4A(ojփ_SX$h.Z&Wڞ sBѿ?o̷6M    r JC!<vH84v_޹.IސAς /fhw/N0鏘7%i'M$tCp@LrEEq__ǐ2Qym73ppQ	!?+12ݑ϶/\Tx~NQUNT {,YE`Vۅ
L0
5]<'xVa&-t#nPӐc>xD~</%~"ζebDL6tI ^2 'YwI!R~<-ځ[x0-5d|=Yq~4&6\XTDjԀ?fGkֹ Jï7'P#/L4/WxLp,[NBtqe>h `Tc8AXG`sF@tYesd_E˾SzyPϭilj~u~v?Y#	bSryOȸ=	@vEȔRFa^[o9)~6}ۈо dQK̀S Zo֕v9Li9O/~NAЪWT6qA^'uS"SgaƟ*G|?|'zⱁD߹\X$377 ,jLC}o՚򸜏'pf%O y#8!C)pc9>5{R 䗓A`1^vcP{|wIҪu#=?MGajB盹Gl0.Ŗ~瓥dU: xdo߀*BMx؁	g1oB~E2Boګ:̯g= S؁E=\Z6i)xj?Ew??AU 6ΎqX;Pԑ!F#R@@_=Q{	ܷ@g?HqwRb%^s-YEpi2cd
X!V`kHX1LZ[,12=KA%?gfc2ZD3QHXdRXD](1/@ϴ!0lC6EߏXD6OwyƆus`NUH`ܵ=naN4 xVZٖk	 n))k76GDh
r<IT
lfD9	1>n͸o
}<Q?G@kC1;7A	_X06snfE6^ޙbGYZ7n߾%dY	$ %ASP\/`f Hdv`=x\GaPpQتsRлDZ(DBfI|.`,'#)k$lJ
$ ';׬֘4I!Pv`K ՗h>eoԌoݕ:2XaH	IUP5dM9\!ek0PߗYs<	C?ڇ
34/\sR`x9os_ԁɌ"MH7ٙhNAC`uh#,	DQWοVX7gZ (Mx?*hfѶ%3Tɼ,՗@yzX,$qOu˸*D<W+M1PQ	QXd;'_(XK&*F*ȫ&~rt׮JC1Yj'YB >K,I?E:Lz=~xمѶt&/ H,Ui\'5|m\|cICCE`um n5WM2mdlH/ޤ>Ze~j(T]dn5 @ r;s	ՁE&oM!n!.VK~"d
_s9i׃OO6\d?` g=
0 -$썦n /5`5nn *:dfʃ	ߜŦaVinxJv;wIψ݀h&|$HuBw2_L
0 P(̮nd
Gہ^K-q@QhC(p7,dڲֶ[R[fg {x
̈́O| H Ekr	@ ET46= "쳣7|A9}
[F؛= k-.l鼄Gqvc{{
Qb%{/FOSȴn8Ԏ pz}
]!f	o޺B`WbfPFH(Zg:z%8f8p۷)H`A &f?r?6 3r{'(Ӟpy$+uz{vps
¥94tWY> hvّ i|IJh	KnA.c0aJ8Fe>ZbG^@t~Z[X;Ӿt+4h ҁvb~@F&6_un \@e-*F%nw[J2X4R^곲$d8/)wvYh]uLVHU m[Pq9r:j`37Y1/\D "ڮP ր@D -/aV>V.@5Q,C@½+^s@BX&IA;nR݁9C ]3
p*Iwr> _{Ƕ)߃GSܶÐݼ5`,&v &3q*IRЃQovӭYt|I,UXW!d7/8"cnC|gPO )[n ]=̾Uh_
I YEQ]S ~.?
;3oBXd׾ l~sH&ݑooFv.&|4nUvujZW22i"P_] Pe㖥ZBV+M"<V0.F<)i;7`֠0Yu0;oVpFPsNBhK9b{[Y &sV?d3~c.;
(ª7 i7#c_0Ўŕ< ֣_WbXp&%#x݂"Qg=*h[Z@ {Le $`xK[Ug d͂0vQ`,|g 7f\GI	NV
w _NjDU=bmޝ ̆Zٻx;7] %KȌnjr`A<C8d̶K5TД%80XqE\نqX;_ԧR&&;0s+އA&t|BC g[]c<+onw D*",}fV*00;%PoU}<:dXu̙D Y;:$zIFJӀq`."L Vh́Q2_ZBM|jM@D9xG7Y{rhHzf6O.	m},XW"9m  4h#UZ_u٦>
]])d,ϙKAgFͤ^g⌯>> bq&((6"Zre訐sJ<2</F}5)s6-+;ٯxM-캪VvW_/{s{
9ܛ;E(sr u!+`(TYY ¯ \6 -p/_C?Ha{$	J8*tf LÚݬnh{`~x/nzOf$)q5PwqQ4;v?Pɮ' bctTdnlMA+dϑ?J@TBw>Xż#хkdĶ%n!Coa`\Vnb@}8B4H #`No4όO%N/TGC Bm42Ed1'2?sYdVrɇ:#/(5ehMTҷ;PHN3ǖ!3~,snzqDuWdoQ9t&¾tY MykhSq~eB鷦f ~$d%(7^E+ೄY
VQoh\ZbwlAmh(6A졄܊;x)"zL1J~iS@F|_ZG@ұ˯Nj̩X
a{{<O[I%>ݗBVn9LA6A><ǅkᗞ^iJg|1J,jp_m
k*>|>ׯB#.d:]5alZNͿ2TR&G펴"49~~,ͦiudnV! `o;Xg IX]10%;[OwiA-Dy,S
z8R,zS{l5"	M	'޼>I
ӈTM$-Qe35nSݦYt{B2bɣ,6B\%Nb##DArG5,|j/,T[dC>[AG͵1rPh7%$`9-%j57e!> |YAŦt\Ȃ7SfZQ:TԘq"@dv0Ha#NL^m*|smS-|X
& Dʭ%i7h0mSk#>P%-J3Ƃ/~&"7V'dx5^Cu(,ُǎ& Ah6Lx}#B@ml-w8\vly$	8\9!IFU,akEF:4
`M6H@
7 okb%gl"b3I#@Ad-yzأd;fvr"H#2MS++g˯
~$EaEKp~͡^DxMq| pk2GVˢ`1ѦK}=e(Xe|W 
uyLPߥ$f	*%R0)6rأ\Wf
*K@{(O
Ǭ|P0_ j\T/W%($)%J'h	x#;UB.W%Iz"zٰ{h|
]O/	גE=urgPUelAKGtK%6
L	r@
Yq5;o`p0`3S0=i'`_H]G~
<ᨠwG`U\@!C#fi:Tio@QӘt.("w/UfN-س
)#q} c,$ŦuDH3M~~{z5W(K
	+aQ~I	ؤDK]r&'2- +T
.T wܗRj-p|5=D0aT	0O܁;QWbkY(}Yw*<>AB1{'l&[	pØ|	?#)w6,E:l\adp4a)!2'_GW!O>UBTdw n"W'Y"wfdhU{h5S@uRO&2FZJ𲎽"LP|uJ7i{`JJF[Nՠ/@d^h$%^$n[c9~e]d ¹A"H[GT͈l	vժN6_)6]J7/9+	E*QAr8M*N	hE((ˁR*xݼIxJQjM+3_sXj3Ez<MMNAя%YZr2Q$/xa»V~
<SHa;8}zX:81!,*-DV>T"~*+tbWý"wݍj:<%|b,o&MB{*I̫oOR"{cv?4=ޤ/,qM_Py38abл>Ixo{ZiAψ]kQaM`]/OW|C|W .g	qHwNGINX)&:8SK+bձB;&kG/=+NP3TR9uZlW0~A,!ꨣ:ꨣ:[ӍC&=    IENDB`
==================================================

File: c:\GH\ras-commander\tools\Model Coupling Tools\one way coupling tool.py
==================================================
from typing import List
import tkinter as tk
from tkinter import ttk, filedialog, scrolledtext, simpledialog
from pathlib import Path
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import logging
import threading
import queue
import re
import os
import shutil
from datetime import datetime
from typing import List, Dict, Optional, Tuple, Any

# Flexible imports for ras-commander (allow running from repo or installed)
try:
    from ras_commander import (
        init_ras_project, RasPrj, RasPlan, RasCmdr, RasUnsteady, RasUtils,
        HdfResultsXsec, HdfResultsMesh, get_ras_exe, get_logger
    )
except ImportError:
    import sys
    current_file = Path(os.getcwd()).resolve()
    rascmdr_directory = current_file.parent
    if rascmdr_directory.name == 'ras-commander': # If running from repo root
         sys.path.append(str(rascmdr_directory))
    else: # Try adding parent if in a subfolder like 'examples'
         parent_directory = rascmdr_directory.parent
         if parent_directory.name == 'ras-commander':
              sys.path.append(str(parent_directory))
         else: # Fallback if structure unknown
              print("Warning: Could not automatically find ras-commander library. Ensure it's installed or script is run from within repo.", file=sys.stderr)

    from ras_commander import (
        init_ras_project, RasPrj, RasPlan, RasCmdr, RasUnsteady, RasUtils,
        HdfResultsXsec, HdfResultsMesh, get_ras_exe, get_logger
    )

# --- Logging Setup ---
logger = get_logger('OneWay1DCouplingTool')
log_queue = queue.Queue()

# --- Helper Functions ---

def browse_folder(entry_widget):
    """Opens a dialog to select a folder and updates the entry widget."""
    folder_path = filedialog.askdirectory()
    if folder_path:
        entry_widget.delete(0, tk.END)
        entry_widget.insert(0, folder_path)

def format_hydrograph_table(values: pd.Series) -> List[str]:
    """Formats a series of flow values into HEC-RAS fixed-width table lines."""
    formatted_lines = []
    for i in range(0, len(values), 10):
        row_values = values.iloc[i:i+10]
        # Format each value to 8 characters wide, 2 decimal places
        row_line = "".join([f"{val:8.2f}" for val in row_values])
        formatted_lines.append(row_line + "\n") # Add newline character
    return formatted_lines

def update_log_widget(text_widget):
    """Updates the log text widget from the queue."""
    while not log_queue.empty():
        message = log_queue.get_nowait()
        text_widget.configure(state='normal')
        text_widget.insert(tk.END, message + '\n')
        text_widget.configure(state='disabled')
        text_widget.see(tk.END)
        text_widget.update_idletasks() # Force update
    text_widget.after(100, lambda: update_log_widget(text_widget))

def log_message(message, level=logging.INFO):
    """Logs a message and puts it in the queue for the GUI."""
    logger.log(level, message)
    log_queue.put(f"[{logging.getLevelName(level)}] {message}")

def load_upstream_boundary_conditions(project_path: str, plan_number: str, ras_version: str) -> Tuple[bool, Optional[Dict], Optional[RasPrj]]:
    """
    Loads the upstream project and extracts boundary conditions data.
    
    Args:
        project_path: Path to the upstream project folder
        plan_number: Plan number to extract boundary conditions from
        ras_version: HEC-RAS version or path to executable
        
    Returns:
        Tuple containing:
            - Success flag (bool)
            - Dictionary of boundary condition data (or None if failed)
            - RasPrj object for the upstream project (or None if failed)
    """
    try:
        log_message(f"Loading upstream project: {project_path}")
        
        # Initialize the project
        ras_upstream = init_ras_project(project_path, ras_version, ras_object=RasPrj())
        log_message(f"Initialized project: {ras_upstream.project_name}")
        
        # Get HDF path for the specified plan
        hdf_path = RasPlan.get_results_path(plan_number, ras_object=ras_upstream)
        if not hdf_path or not Path(hdf_path).exists():
            # Check if computation is needed
            log_message(f"HDF results not found for plan {plan_number}. Checking if computation is needed...")
            
            plan_path = RasPlan.get_plan_path(plan_number, ras_object=ras_upstream)
            if not plan_path:
                raise ValueError(f"Plan {plan_number} not found in project {ras_upstream.project_name}")
            
            # Ask user if they want to compute the plan
            if tk.messagebox.askyesno("Compute Plan", 
                f"No HDF results found for plan {plan_number}. Would you like to compute it now?"):
                
                log_message(f"Computing plan {plan_number}...")
                success = RasCmdr.compute_plan(plan_number, ras_object=ras_upstream)
                
                if not success:
                    raise RuntimeError(f"Plan {plan_number} computation failed")
                
                hdf_path = RasPlan.get_results_path(plan_number, ras_object=ras_upstream)
                if not hdf_path or not Path(hdf_path).exists():
                    raise FileNotFoundError(f"HDF results still not found after computation for plan {plan_number}")
            else:
                raise FileNotFoundError(f"HDF results not found for plan {plan_number}")
        
        log_message(f"Loading boundary conditions from {hdf_path}")
        
        # Get boundary conditions data from HDF
        bc_data = HdfResultsMesh.get_boundary_conditions_timeseries(hdf_path)
        
        if 'bc_name' not in bc_data.coords or len(bc_data.coords['bc_name']) == 0:
            log_message("No boundary conditions found in HDF file", logging.WARNING)
            return False, None, ras_upstream
        
        log_message(f"Found {len(bc_data.coords['bc_name'])} boundary conditions: {', '.join(bc_data.coords['bc_name'].values)}")
        
        # Return success and data
        return True, bc_data, ras_upstream
        
    except Exception as e:
        log_message(f"Error loading boundary conditions: {str(e)}", logging.ERROR)
        import traceback
        traceback.print_exc()
        return False, None, None

# --- Boundary Condition Selection Dialog ---
class BoundaryConditionSelector(tk.Toplevel):
    def __init__(self, parent, bc_data, callback):
        super().__init__(parent)
        self.title("Select Boundary Condition")
        self.geometry("900x600")
        self.transient(parent)
        self.grab_set()
        
        self.bc_data = bc_data
        self.callback = callback
        self.selected_bc = None
        
        # Create frames
        selection_frame = ttk.Frame(self, padding="10")
        selection_frame.pack(fill=tk.X, expand=False)
        
        plot_frame = ttk.Frame(self, padding="10")
        plot_frame.pack(fill=tk.BOTH, expand=True)
        
        button_frame = ttk.Frame(self, padding="10")
        button_frame.pack(fill=tk.X, expand=False)
        
        # Boundary condition selection
        bc_names = list(bc_data.coords['bc_name'].values)
        
        ttk.Label(selection_frame, text="Select Boundary Condition:").grid(row=0, column=0, sticky=tk.W)
        self.bc_combobox = ttk.Combobox(selection_frame, values=bc_names, width=30, state="readonly")
        self.bc_combobox.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=5)
        
        # If there's at least one BC, select the first one
        if bc_names:
            self.bc_combobox.current(0)
        
        self.bc_combobox.bind("<<ComboboxSelected>>", self.update_plot)
        
        # Create plot area
        self.fig, self.axs = plt.subplots(2, 1, figsize=(8, 5), sharex=True)
        self.canvas = FigureCanvasTkAgg(self.fig, master=plot_frame)
        self.canvas_widget = self.canvas.get_tk_widget()
        self.canvas_widget.pack(fill=tk.BOTH, expand=True)
        
        # Buttons
        ttk.Button(button_frame, text="Select", command=self.on_select).pack(side=tk.RIGHT, padx=5)
        ttk.Button(button_frame, text="Cancel", command=self.on_cancel).pack(side=tk.RIGHT, padx=5)
        
        # Initial plot
        self.update_plot()
        
    def update_plot(self, event=None):
        """Updates the plot with the selected boundary condition."""
        bc_name = self.bc_combobox.get()
        if not bc_name:
            return
            
        for ax in self.axs:
            ax.clear()
            
        # Extract time series data for the selected BC
        time_values = self.bc_data.coords['time'].values
        
        # Plot flow data - check if flow_per_face exists
        if 'flow_per_face' in self.bc_data.data_vars:
            # Get face IDs with valid data
            face_flow_data = self.bc_data['flow_per_face'].sel(bc_name=bc_name)
            
            # Sum flow across all faces (ignoring NaN values)
            total_flow = face_flow_data.sum(dim='face_id', skipna=True)
            
            # Plot the total flow
            self.axs[0].plot(time_values, total_flow, 'b-', label=f"Total Flow")
            
            # Format the flow axis
            self.axs[0].set_ylabel("Flow (cfs)")
            self.axs[0].set_title(f"Boundary Condition: {bc_name}")
            self.axs[0].grid(True)
            self.axs[0].legend()
        
        # Plot stage data - check if stage_per_face exists
        if 'stage_per_face' in self.bc_data.data_vars:
            # Get face IDs with valid data
            face_stage_data = self.bc_data['stage_per_face'].sel(bc_name=bc_name)
            
            # Average stage across all faces (ignoring NaN values)
            avg_stage = face_stage_data.mean(dim='face_id', skipna=True)
            
            # Plot the average stage
            self.axs[1].plot(time_values, avg_stage, 'r-', label=f"Average Stage")
            
            # Format the stage axis
            self.axs[1].set_ylabel("Stage (ft)")
            self.axs[1].set_xlabel("Time")
            self.axs[1].grid(True)
            self.axs[1].legend()
        
        self.fig.autofmt_xdate()
        self.fig.tight_layout()
        self.canvas.draw()
        
    def on_select(self):
        """Handles the selection of a boundary condition."""
        bc_name = self.bc_combobox.get()
        if bc_name:
            self.selected_bc = bc_name
            self.callback(bc_name, self.bc_data)
            self.destroy()
        else:
            tk.messagebox.showwarning("Selection Required", "Please select a boundary condition.")
            
    def on_cancel(self):
        """Cancels the selection and closes the dialog."""
        self.destroy()

# --- Core Coupling Logic ---

def run_one_way_1d_coupling(inputs):
    """Performs the one-way 1D coupling."""
    try:
        log_message("Starting One-Way 1D Coupling Process...")

        # 1. Initialization
        log_message("Initializing projects...")
        ras_A = init_ras_project(inputs['upstream_proj'], inputs['ras_version'], ras_object=RasPrj())
        ras_B = init_ras_project(inputs['downstream_proj'], inputs['ras_version'], ras_object=RasPrj())
        log_message(f"Initialized Upstream Project: {ras_A.project_name}")
        log_message(f"Initialized Downstream Project: {ras_B.project_name}")

        # --- Create Output Folder ---
        compute_folder_name = f"CoupledRun_{ras_A.project_name}_p{inputs['upstream_plan']}_to_{ras_B.project_name}_p{inputs['downstream_template']}_{inputs['run_suffix']}"
        compute_folder = Path(ras_A.project_folder).parent / compute_folder_name

        if compute_folder.exists():
            if inputs['overwrite']:
                log_message(f"Overwriting existing compute folder: {compute_folder}")
                shutil.rmtree(compute_folder)
            else:
                raise ValueError(f"Compute folder exists and overwrite is False: {compute_folder}")
        compute_folder.mkdir(parents=True)
        log_message(f"Created compute folder: {compute_folder}")

        # 2. Run Upstream Model (Model A) in compute folder
        log_message(f"Running upstream plan {inputs['upstream_plan']} in compute folder...")
        success_A = RasCmdr.compute_plan(
            plan_number=inputs['upstream_plan'],
            ras_object=ras_A,
            dest_folder=compute_folder,
            overwrite_dest=True # We already handled the top-level folder check
        )
        if not success_A:
            raise RuntimeError(f"Upstream plan {inputs['upstream_plan']} computation failed.")
        log_message("Upstream plan computation successful.")

        # --- Re-initialize ras_A for the compute folder ---
        ras_A_compute = init_ras_project(compute_folder, inputs['ras_version'], ras_object=RasPrj())

        hdf_A = RasPlan.get_results_path(inputs['upstream_plan'], ras_object=ras_A_compute)
        if not hdf_A or not Path(hdf_A).exists():
            raise FileNotFoundError(f"HDF results file not found for upstream plan: {hdf_A}")
        log_message(f"Found upstream HDF results: {hdf_A}")

        # 3. Extract Flow Hydrograph from Model A
        # If a boundary condition was selected, use it instead of river/reach/station
        if inputs.get('selected_bc') and inputs.get('bc_data'):
            log_message(f"Using selected boundary condition: {inputs['selected_bc']}")
            
            # Extract flow data for the selected boundary condition
            bc_name = inputs['selected_bc']
            bc_data = inputs['bc_data']
            
            if 'flow_per_face' in bc_data.data_vars:
                # Get face IDs with valid data
                face_flow_data = bc_data['flow_per_face'].sel(bc_name=bc_name)
                
                # Sum flow across all faces (ignoring NaN values)
                total_flow = face_flow_data.sum(dim='face_id', skipna=True)
                
                # Convert to dataframe
                flow_hydrograph_df = total_flow.to_dataframe(name='Value')
                log_message(f"Extracted flow hydrograph from boundary condition with {len(flow_hydrograph_df)} time steps.")
            else:
                raise ValueError(f"Selected boundary condition {bc_name} does not have flow data")
        else:
            # Use the traditional river/reach/station method
            log_message(f"Extracting flow from Model A at {inputs['river_A']}, {inputs['reach_A']}, {inputs['station_A']}...")
            xsec_results_A = HdfResultsXsec.get_xsec_timeseries(hdf_A)

            # Construct the cross_section identifier string
            target_xs_A_coords = {
                'River': inputs['river_A'],
                'Reach': inputs['reach_A'],
                'Station': str(inputs['station_A']) # Ensure station is string if needed
            }

            try:
                # Attempt selection using individual coordinates first
                 flow_data_A = xsec_results_A['Flow'].sel(**target_xs_A_coords)
            except KeyError as e:
                 # Fallback: Try finding matching combined cross_section name
                log_message(f"Coordinate selection failed ({e}), trying combined name matching...", logging.WARNING)
                combined_name_A = f"{inputs['river_A']:<16}{inputs['reach_A']:<16}{inputs['station_A']:<10}".strip()
                if combined_name_A in xsec_results_A['cross_section'].values:
                    flow_data_A = xsec_results_A['Flow'].sel(cross_section=combined_name_A)
                else:
                     raise ValueError(f"Could not find cross-section matching {target_xs_A_coords} or '{combined_name_A}'")

            flow_hydrograph_df = flow_data_A.to_dataframe(name='Value') # Time is index
            log_message(f"Extracted flow hydrograph with {len(flow_hydrograph_df)} time steps.")

        # 4. Prepare Downstream Model (Model B)
        log_message(f"Preparing downstream model based on template plan {inputs['downstream_template']}...")

        # --- Copy downstream project to compute folder ---
        downstream_compute_folder = compute_folder # Use the same compute folder
        # Re-initialize ras_B for the compute folder
        ras_B_compute = init_ras_project(downstream_compute_folder, inputs['ras_version'], ras_object=RasPrj())

        # --- Clone Plan ---
        plan_id = f"{inputs.get('aep_years', '')}{inputs.get('duration_hours', '')}{inputs.get('selected_bc', '')}_{inputs['run_suffix']}"
        # Ensure plan ID doesn't exceed max length
        if len(plan_id) > 24:
            plan_id = plan_id[:24]
            
        new_plan_B_num = RasPlan.clone_plan(
            inputs['downstream_template'],
            new_plan_shortid=plan_id,
            ras_object=ras_B_compute
        )
        log_message(f"Cloned downstream plan: {new_plan_B_num}")

        # --- Clone Unsteady ---
        template_unsteady_B_info = ras_B_compute.plan_df[
            ras_B_compute.plan_df['plan_number'] == new_plan_B_num # Use the *new* plan number
        ]
        if template_unsteady_B_info.empty or pd.isna(template_unsteady_B_info['unsteady_number'].iloc[0]):
             raise ValueError(f"Could not find unsteady file linked to template plan B ({inputs['downstream_template']})")
        template_unsteady_B_num = template_unsteady_B_info['unsteady_number'].iloc[0]

        new_unsteady_B_num = RasPlan.clone_unsteady(template_unsteady_B_num, ras_object=ras_B_compute)
        log_message(f"Cloned downstream unsteady file: {new_unsteady_B_num}")

        # --- Link Plan & Unsteady ---
        RasPlan.set_unsteady(new_plan_B_num, new_unsteady_B_num, ras_object=ras_B_compute)
        log_message(f"Linked Plan {new_plan_B_num} to Unsteady {new_unsteady_B_num}")

        # --- Modify Unsteady File B ---
        unsteady_B_path = RasPlan.get_unsteady_path(new_unsteady_B_num, ras_object=ras_B_compute)
        if not unsteady_B_path or not Path(unsteady_B_path).exists():
            raise FileNotFoundError(f"Cloned unsteady file not found: {unsteady_B_path}")

        # Update Title
        source_desc = f"{ras_A.project_name} p{inputs['upstream_plan']}"
        if inputs.get('selected_bc'):
            source_desc += f" BC:{inputs['selected_bc']}"
            
        RasUnsteady.update_flow_title(
            unsteady_B_path,
            f"Flow from {source_desc} - {plan_id}",
            ras_object=ras_B_compute
        )

        # Read unsteady file content
        with open(unsteady_B_path, 'r') as f:
            lines = f.readlines()

        # Find the target boundary condition block
        bc_block_start_idx = -1
        target_location_str = f"{inputs['river_B']},{inputs['reach_B']},{inputs['station_B']}"
        log_message(f"Searching for BC Location containing: '{target_location_str}' in {unsteady_B_path}")

        for i, line in enumerate(lines):
            if line.startswith("Boundary Location="):
                 # Basic check - refine if needed for exact match
                if target_location_str in line:
                    bc_block_start_idx = i
                    log_message(f"Found target BC block starting at line {i}: {line.strip()}")
                    break

        if bc_block_start_idx == -1:
            raise ValueError(f"Boundary Location '{target_location_str}' not found in unsteady file {unsteady_B_path}")

        # Find the 'Flow Hydrograph=' line within this block
        hydrograph_header_idx = -1
        hydrograph_data_start_idx = -1
        num_current_values = 0
        for i in range(bc_block_start_idx + 1, len(lines)):
            line = lines[i].strip()
            if line.startswith("Boundary Location="): # Reached next BC block
                break
            if line.startswith("Flow Hydrograph="):
                hydrograph_header_idx = i
                try:
                    num_current_values = int(line.split('=')[1].strip())
                except (IndexError, ValueError):
                     log_message(f"Could not parse existing hydrograph count: {line}", logging.WARNING)
                     num_current_values = 0 # Assume 0 if parsing fails
                hydrograph_data_start_idx = i + 1
                log_message(f"Found Flow Hydrograph header at line {i} with {num_current_values} values.")
                break

        if hydrograph_header_idx == -1:
            # Attempt to insert if not found (basic insertion - might need refinement)
            log_message(f"Flow Hydrograph header not found for BC. Inserting.", logging.WARNING)
            lines.insert(bc_block_start_idx + 1, f"Flow Hydrograph= {len(flow_hydrograph_df)}\n")
            lines[bc_block_start_idx + 2:bc_block_start_idx + 2] = format_hydrograph_table(flow_hydrograph_df['Value'])
        else:
            # Calculate end of current hydrograph data
            num_current_lines = (num_current_values + 9) // 10 # Lines needed for old data
            hydrograph_data_end_idx = hydrograph_data_start_idx + num_current_lines

            # Replace header and data
            lines[hydrograph_header_idx] = f"Flow Hydrograph= {len(flow_hydrograph_df)}\n"
            lines[hydrograph_data_start_idx:hydrograph_data_end_idx] = format_hydrograph_table(flow_hydrograph_df['Value'])
            log_message(f"Replaced flow hydrograph data ({len(flow_hydrograph_df)} values).")

        # Write modified lines back to unsteady file
        with open(unsteady_B_path, 'w') as f:
            f.writelines(lines)
        log_message(f"Modified unsteady file saved: {unsteady_B_path}")

        # Update Plan Description
        source_location = f"R={inputs['river_A']}, Re={inputs['reach_A']}, S={inputs['station_A']}"
        if inputs.get('selected_bc'):
            source_location = f"Boundary condition: {inputs['selected_bc']}"
            
        desc = (f"One-way 1D coupled run.\n"
                f"Input flow from: {ras_A.project_name} Plan {inputs['upstream_plan']}\n"
                f"Output location: {source_location}\n"
                f"Input location: R={inputs['river_B']}, Re={inputs['reach_B']}, S={inputs['station_B']}\n"
                f"Run Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}\n"
                f"Description: {inputs['run_suffix']}")
        RasPlan.update_plan_description(new_plan_B_num, desc, ras_object=ras_B_compute)
        log_message(f"Updated description for plan {new_plan_B_num}")

        # 5. Run Downstream Model (Model B)
        log_message(f"Running downstream plan {new_plan_B_num}...")
        success_B = RasCmdr.compute_plan(new_plan_B_num, ras_object=ras_B_compute) # Run in its own compute folder instance
        if not success_B:
            raise RuntimeError(f"Downstream plan {new_plan_B_num} computation failed.")
        log_message("Downstream plan computation successful.")

        # 6. Plotting & Verification (Optional - within GUI later)
        log_message("Preparing data for plotting...")
        hdf_B = RasPlan.get_results_path(new_plan_B_num, ras_object=ras_B_compute)
        if not hdf_B or not Path(hdf_B).exists():
             log_message("Could not find HDF results for downstream plan.", logging.WARNING)
             return True, flow_hydrograph_df, None, None # Success but no plot data

        # Extract stage from Model A downstream BC
        if inputs.get('selected_bc') and inputs.get('bc_data'):
            # If using boundary condition data, we already have the flow
            # We might not have stage A data
            stage_A_df = None
        else:
            # Extract stage from cross-section data
            xsec_results_A_plot = HdfResultsXsec.get_xsec_timeseries(hdf_A)
            target_xs_A_coords = {
                'River': inputs['river_A'],
                'Reach': inputs['reach_A'],
                'Station': str(inputs['station_A'])
            }
            try:
                stage_A_df = xsec_results_A_plot['Water_Surface'].sel(**target_xs_A_coords).to_dataframe(name='Stage_A')
            except Exception as e:
                log_message(f"Could not extract Model A stage data: {str(e)}", logging.WARNING)
                stage_A_df = None

        # Extract stage from Model B upstream BC
        xsec_results_B = HdfResultsXsec.get_xsec_timeseries(hdf_B)
        target_xs_B_coords = {
             'River': inputs['river_B'],
             'Reach': inputs['reach_B'],
             'Station': str(inputs['station_B'])
        }
        try:
            stage_B_df = xsec_results_B['Water_Surface'].sel(**target_xs_B_coords).to_dataframe(name='Stage_B')
        except KeyError as e:
            log_message(f"Coordinate selection failed for Model B stage ({e}), trying combined name...", logging.WARNING)
            combined_name_B = f"{inputs['river_B']:<16}{inputs['reach_B']:<16}{inputs['station_B']:<10}".strip()
            if combined_name_B in xsec_results_B['cross_section'].values:
                 stage_B_df = xsec_results_B['Water_Surface'].sel(cross_section=combined_name_B).to_dataframe(name='Stage_B')
            else:
                 log_message(f"Could not find cross-section for Model B stage plotting.", logging.WARNING)
                 stage_B_df = None

        log_message("Coupling process completed successfully.", logging.INFO)
        return True, flow_hydrograph_df, stage_A_df, stage_B_df

    except FileNotFoundError as e:
        log_message(f"Error: {e}", logging.ERROR)
        return False, None, None, None
    except ValueError as e:
        log_message(f"Error: {e}", logging.ERROR)
        return False, None, None, None
    except RuntimeError as e:
        log_message(f"Error: {e}", logging.ERROR)
        return False, None, None, None
    except Exception as e:
        log_message(f"An unexpected error occurred: {e}", logging.CRITICAL)
        import traceback
        traceback.print_exc() # Print full traceback for debugging
        return False, None, None, None

# --- GUI Class ---

class CouplingApp:
    def __init__(self, master):
        self.master = master
        master.title("1D One-Way Coupling Tool")
        master.geometry("800x750") # Increased height for plot
        
        # State variables for boundary condition selection
        self.selected_bc = None
        self.bc_data = None
        self.ras_A = None

        # --- Styling ---
        style = ttk.Style()
        style.theme_use('clam') # Or 'alt', 'default', 'classic'
        style.configure("TLabel", padding=6, font=('Helvetica', 10))
        style.configure("TButton", padding=6, font=('Helvetica', 10))
        style.configure("TEntry", padding=6, font=('Helvetica', 10))
        style.configure("TCheckbutton", padding=6, font=('Helvetica', 10))

        # --- Frames ---
        input_frame = ttk.Frame(master, padding="10")
        input_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        log_frame = ttk.Frame(master, padding="10")
        log_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        plot_frame = ttk.Frame(master, padding="10")
        plot_frame.grid(row=2, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        master.rowconfigure(0, weight=1)
        master.rowconfigure(1, weight=2) # Give more weight to log
        master.rowconfigure(2, weight=3) # Give more weight to plot
        master.columnconfigure(0, weight=1)

        # --- Inputs ---
        row_num = 0

        # HEC-RAS Version
        ttk.Label(input_frame, text="HEC-RAS Version/Path:").grid(row=row_num, column=0, sticky=tk.W)
        self.ras_version_entry = ttk.Entry(input_frame, width=50)
        self.ras_version_entry.grid(row=row_num, column=1, sticky=(tk.W, tk.E))
        self.ras_version_entry.insert(0, "6.6") # Default or last used
        ttk.Button(input_frame, text="Browse Exe", command=lambda: self.browse_exe()).grid(row=row_num, column=2)
        row_num += 1

        # Upstream Project
        ttk.Label(input_frame, text="Upstream Project Folder:").grid(row=row_num, column=0, sticky=tk.W)
        self.upstream_proj_entry = ttk.Entry(input_frame, width=50)
        self.upstream_proj_entry.grid(row=row_num, column=1, sticky=(tk.W, tk.E))
        ttk.Button(input_frame, text="Browse...", command=lambda: browse_folder(self.upstream_proj_entry)).grid(row=row_num, column=2)
        row_num += 1

        # Downstream Project
        ttk.Label(input_frame, text="Downstream Project Folder:").grid(row=row_num, column=0, sticky=tk.W)
        self.downstream_proj_entry = ttk.Entry(input_frame, width=50)
        self.downstream_proj_entry.grid(row=row_num, column=1, sticky=(tk.W, tk.E))
        ttk.Button(input_frame, text="Browse...", command=lambda: browse_folder(self.downstream_proj_entry)).grid(row=row_num, column=2)
        row_num += 1

        # Plan Numbers
        ttk.Label(input_frame, text="Upstream Plan Number:").grid(row=row_num, column=0, sticky=tk.W)
        self.upstream_plan_entry = ttk.Entry(input_frame, width=10)
        self.upstream_plan_entry.grid(row=row_num, column=1, sticky=tk.W)
        
        # Add Load Project Data button
        ttk.Button(input_frame, text="Load Project Data", command=self.load_project_data).grid(row=row_num, column=1, sticky=tk.E, padx=(0, 10))

        ttk.Label(input_frame, text="Downstream Template Plan:").grid(row=row_num, column=2, sticky=tk.W, padx=(10,0))
        self.downstream_template_entry = ttk.Entry(input_frame, width=10)
        self.downstream_template_entry.grid(row=row_num, column=3, sticky=tk.W)
        row_num += 1
        
        # Boundary Condition Display
        ttk.Label(input_frame, text="Selected Boundary Condition:").grid(row=row_num, column=0, sticky=tk.W)
        self.bc_display = ttk.Label(input_frame, text="None selected", foreground="gray")
        self.bc_display.grid(row=row_num, column=1, columnspan=3, sticky=tk.W)
        row_num += 1

        # Coupling Location A (Upstream Model Output)
        ttk.Label(input_frame, text="--- Upstream Model Output Location ---").grid(row=row_num, column=0, columnspan=4, pady=(10,0))
        row_num += 1
        ttk.Label(input_frame, text="River:").grid(row=row_num, column=0, sticky=tk.W)
        self.river_a_entry = ttk.Entry(input_frame, width=20)
        self.river_a_entry.grid(row=row_num, column=1, sticky=tk.W)
        ttk.Label(input_frame, text="Reach:").grid(row=row_num, column=2, sticky=tk.W, padx=(10,0))
        self.reach_a_entry = ttk.Entry(input_frame, width=20)
        self.reach_a_entry.grid(row=row_num, column=3, sticky=tk.W)
        row_num += 1
        ttk.Label(input_frame, text="Station ID:").grid(row=row_num, column=0, sticky=tk.W)
        self.station_a_entry = ttk.Entry(input_frame, width=20)
        self.station_a_entry.grid(row=row_num, column=1, sticky=tk.W)
        row_num += 1

        # Coupling Location B (Downstream Model Input BC)
        ttk.Label(input_frame, text="--- Downstream Model Input BC Location ---").grid(row=row_num, column=0, columnspan=4, pady=(10,0))
        row_num += 1
        ttk.Label(input_frame, text="River:").grid(row=row_num, column=0, sticky=tk.W)
        self.river_b_entry = ttk.Entry(input_frame, width=20)
        self.river_b_entry.grid(row=row_num, column=1, sticky=tk.W)
        ttk.Label(input_frame, text="Reach:").grid(row=row_num, column=2, sticky=tk.W, padx=(10,0))
        self.reach_b_entry = ttk.Entry(input_frame, width=20)
        self.reach_b_entry.grid(row=row_num, column=3, sticky=tk.W)
        row_num += 1
        ttk.Label(input_frame, text="Station ID:").grid(row=row_num, column=0, sticky=tk.W)
        self.station_b_entry = ttk.Entry(input_frame, width=20)
        self.station_b_entry.grid(row=row_num, column=1, sticky=tk.W)
        row_num += 1

        # Run Suffix & Overwrite
        ttk.Label(input_frame, text="Run Suffix:").grid(row=row_num, column=0, sticky=tk.W)
        self.run_suffix_entry = ttk.Entry(input_frame, width=20)
        self.run_suffix_entry.grid(row=row_num, column=1, sticky=tk.W)
        self.run_suffix_entry.insert(0, "Coupled")

        self.overwrite_var = tk.BooleanVar(value=False)
        ttk.Checkbutton(input_frame, text="Overwrite Compute Folder?", variable=self.overwrite_var).grid(row=row_num, column=2, columnspan=2, sticky=tk.W, padx=(10,0))
        row_num += 1

        # Run Button
        self.run_button = ttk.Button(input_frame, text="Run 1D Coupling", command=self.start_coupling_thread)
        self.run_button.grid(row=row_num, column=0, columnspan=4, pady=10)

        # --- Log Area ---
        ttk.Label(log_frame, text="Log Output:").pack(anchor=tk.W)
        self.log_text = scrolledtext.ScrolledText(log_frame, wrap=tk.WORD, height=10, state='disabled')
        self.log_text.pack(fill=tk.BOTH, expand=True)

        # Start polling the log queue
        self.master.after(100, lambda: update_log_widget(self.log_text))

        # --- Plot Area ---
        self.fig, self.axs = plt.subplots(2, 1, figsize=(7, 5), sharex=True) # Adjusted size
        self.canvas = FigureCanvasTkAgg(self.fig, master=plot_frame)
        self.canvas_widget = self.canvas.get_tk_widget()
        self.canvas_widget.pack(fill=tk.BOTH, expand=True)
        self.clear_plot() # Initialize empty plot

    def browse_exe(self):
        """Opens a dialog to select the HEC-RAS executable."""
        exe_path = filedialog.askopenfilename(
            title="Select HEC-RAS Executable (Ras.exe)",
            filetypes=[("Executable files", "*.exe"), ("All files", "*.*")]
        )
        if exe_path:
            self.ras_version_entry.delete(0, tk.END)
            self.ras_version_entry.insert(0, exe_path)
    
    def load_project_data(self):
        """Loads upstream project data and shows boundary condition selection dialog."""
        # Get inputs
        upstream_proj = self.upstream_proj_entry.get()
        upstream_plan = self.upstream_plan_entry.get()
        ras_version = self.ras_version_entry.get()
        
        if not upstream_proj or not upstream_plan or not ras_version:
            tk.messagebox.showerror("Input Error", "Please enter upstream project path, plan number, and RAS version.")
            return
            
        # Load boundary conditions
        self.run_button.config(state=tk.DISABLED, text="Loading...")
        
        # Run in a separate thread to keep UI responsive
        threading.Thread(
            target=self._load_project_data_thread,
            args=(upstream_proj, upstream_plan, ras_version),
            daemon=True
        ).start()
    
    def _load_project_data_thread(self, upstream_proj, upstream_plan, ras_version):
        """Threaded function to load project data."""
        try:
            success, bc_data, ras_A = load_upstream_boundary_conditions(
                upstream_proj, upstream_plan, ras_version
            )
            
            if success and bc_data is not None:
                # Store the RAS project object
                self.ras_A = ras_A
                
                # Show boundary condition selector dialog in the main thread
                self.master.after(0, lambda: self._show_bc_selector(bc_data))
            else:
                self.master.after(0, lambda: tk.messagebox.showerror(
                    "Error", "Failed to load boundary conditions. Check log for details."
                ))
                self.master.after(0, lambda: self.run_button.config(state=tk.NORMAL, text="Run 1D Coupling"))
        except Exception as e:
            log_message(f"Error loading project data: {str(e)}", logging.ERROR)
            self.master.after(0, lambda: tk.messagebox.showerror(
                "Error", f"An error occurred: {str(e)}"
            ))
            self.master.after(0, lambda: self.run_button.config(state=tk.NORMAL, text="Run 1D Coupling"))
    
    def _show_bc_selector(self, bc_data):
        """Shows the boundary condition selector dialog."""
        self.run_button.config(state=tk.NORMAL, text="Run 1D Coupling")
        
        # Create and show the boundary condition selector dialog
        selector = BoundaryConditionSelector(
            self.master, 
            bc_data,
            self._on_bc_selected
        )
        
    def _on_bc_selected(self, bc_name, bc_data):
        """Callback when a boundary condition is selected from the dialog."""
        self.selected_bc = bc_name
        self.bc_data = bc_data
        
        # Update the display
        self.bc_display.config(
            text=f"{bc_name} (from {self.ras_A.project_name})",
            foreground="blue"
        )
        
        log_message(f"Selected boundary condition: {bc_name}")
        
        # Plot the selected boundary condition flow data
        if bc_data is not None and 'flow_per_face' in bc_data.data_vars:
            # Get flow data
            face_flow_data = bc_data['flow_per_face'].sel(bc_name=bc_name)
            total_flow = face_flow_data.sum(dim='face_id', skipna=True)
            flow_df = total_flow.to_dataframe(name='Value')
            
            # Plot
            self.clear_plot()
            self.axs[0].plot(flow_df.index, flow_df['Value'], label=f"BC Flow: {bc_name}", color='blue')
            self.axs[0].legend(loc='best')
            self.axs[0].set_title(f"Selected Boundary Condition: {bc_name}")
            self.fig.autofmt_xdate()
            self.fig.tight_layout()
            self.canvas.draw()

    def clear_plot(self):
         """Clears the plot area."""
         for ax in self.axs:
              ax.clear()
         self.axs[0].set_ylabel("Flow (cfs)")
         self.axs[1].set_ylabel("Stage (ft)")
         self.axs[1].set_xlabel("Time")
         self.axs[0].set_title("Coupling Interface Hydrographs")
         self.axs[0].grid(True)
         self.axs[1].grid(True)
         self.fig.tight_layout()
         self.canvas.draw()

    def plot_results(self, flow_df, stage_a_df, stage_b_df, title_suffix=""):
        """Plots the flow and stage hydrographs on the GUI canvas."""
        self.clear_plot()

        if flow_df is not None and not flow_df.empty:
             self.axs[0].plot(flow_df.index, flow_df['Value'], label=f"Transferred Flow{title_suffix}", color='blue')
             self.axs[0].legend(loc='best')

        if stage_a_df is not None and not stage_a_df.empty:
             self.axs[1].plot(stage_a_df.index, stage_a_df['Stage_A'], label=f"Model A Stage{title_suffix}", color='red', linestyle='--')

        if stage_b_df is not None and not stage_b_df.empty:
             self.axs[1].plot(stage_b_df.index, stage_b_df['Stage_B'], label=f"Model B Stage{title_suffix}", color='green')

        if stage_a_df is not None or stage_b_df is not None:
             self.axs[1].legend(loc='best')

        # Formatting
        self.fig.autofmt_xdate()
        self.axs[0].set_title(f"Coupling Interface Hydrographs{title_suffix}")
        self.fig.tight_layout()
        self.canvas.draw()

    def start_coupling_thread(self):
        """Starts the coupling process in a separate thread."""
        self.run_button.config(state=tk.DISABLED, text="Running...")
        self.clear_plot() # Clear previous plot

        # Gather inputs from GUI
        inputs = {
            'upstream_proj': self.upstream_proj_entry.get(),
            'downstream_proj': self.downstream_proj_entry.get(),
            'upstream_plan': self.upstream_plan_entry.get(),
            'downstream_template': self.downstream_template_entry.get(),
            'river_A': self.river_a_entry.get(),
            'reach_A': self.reach_a_entry.get(),
            'station_A': self.station_a_entry.get(),
            'river_B': self.river_b_entry.get(),
            'reach_B': self.reach_b_entry.get(),
            'station_B': self.station_b_entry.get(),
            'run_suffix': self.run_suffix_entry.get(),
            'overwrite': self.overwrite_var.get(),
            'ras_version': self.ras_version_entry.get(),
            # Add selected boundary condition if available
            'selected_bc': self.selected_bc,
            'bc_data': self.bc_data
        }

        # Validate basic inputs
        # If boundary condition is selected, river/reach/station A is optional
        required_fields = [
            'upstream_proj', 'downstream_proj', 'upstream_plan', 'downstream_template',
            'river_B', 'reach_B', 'station_B', 'ras_version'
        ]
        
        # If no boundary condition selected, also require location A fields
        if not inputs.get('selected_bc'):
            required_fields.extend(['river_A', 'reach_A', 'station_A'])
            
        # Check if all required fields are provided
        missing_fields = [field for field in required_fields if not inputs.get(field)]
        if missing_fields:
            log_message(f"Error: Missing required fields: {', '.join(missing_fields)}", logging.ERROR)
            self.run_button.config(state=tk.NORMAL, text="Run 1D Coupling")
            return

        # Start the coupling process in a new thread
        self.coupling_thread = threading.Thread(target=self.run_coupling_in_background, args=(inputs,), daemon=True)
        self.coupling_thread.start()

    def run_coupling_in_background(self, inputs):
        """Wrapper to run the coupling logic and handle GUI updates."""
        success, flow_df, stage_a_df, stage_b_df = run_one_way_1d_coupling(inputs)

        # Update GUI after completion (use 'after' to ensure it runs in main thread)
        if success:
            self.master.after(0, lambda: log_message("One-Way 1D Coupling Finished Successfully!", logging.INFO))
            self.master.after(0, lambda: self.plot_results(flow_df, stage_a_df, stage_b_df))
        else:
            self.master.after(0, lambda: log_message("One-Way 1D Coupling Failed. Check logs.", logging.ERROR))

        self.master.after(0, lambda: self.run_button.config(state=tk.NORMAL, text="Run 1D Coupling"))

# --- Main Application ---
if __name__ == "__main__":
    root = tk.Tk()
    app = CouplingApp(root)
    root.mainloop()
==================================================

