File: c:\GH\ras-commander\.cursorrules
==================================================
# RAS Commander (ras-commander) Coding Assistant

## Overview

This Assistant helps you write efficient Python code for HEC-RAS projects using the RAS Commander library. It automates tasks, provides a Pythonic interface, supports flexible execution modes, and offers built-in examples.

**Core Concepts:** RAS Objects, Project Initialization, File Handling (pathlib.Path), Data Management (Pandas), Execution Modes, Utility Functions.

## Classes, Functions and Arguments




Certainly! I'll summarize the decorators, provide tables for each class showing the decorators used and arguments, and give a summary of each class's function.

Decorator Summaries:

1. @log_call: Logs function calls, including entry and exit times, and any exceptions raised.
2. @standardize_input: Standardizes input for HDF file operations, handling different input types and ensuring consistent file paths.
3. @hdf_operation: Handles opening and closing of HDF files, and manages error handling for HDF operations.

Now, lets go through each class:


1. RasPrj Class:

| Function Name | @log_call | @standardize_input | @hdf_operation | Arguments |
|---------------|-----------|--------------------|--------------------|-----------|
| initialize | X | | | project_folder, ras_exe_path |
| _load_project_data | X | | | |
| _get_geom_file_for_plan | X | | | plan_number |
| _parse_plan_file | X | | | plan_file_path |
| _get_prj_entries | X | | | entry_type |
| _parse_unsteady_file | X | | | unsteady_file_path |
| check_initialized | X | | | |
| find_ras_prj | X | | | folder_path |
| get_project_name | X | | | |
| get_prj_entries | X | | | entry_type |
| get_plan_entries | X | | | |
| get_flow_entries | X |
1. RasPrj Class:

| Function Name | @log_call | @standardize_input | Arguments |
|---------------|-----------|--------------------|--------------------|
| initialize | X | | project_folder, ras_exe_path |
| _load_project_data | X | | |
| _get_geom_file_for_plan | X | | plan_number |
| _parse_plan_file | X | | plan_file_path |
| _get_prj_entries | X | | entry_type |
| _parse_unsteady_file | X | | unsteady_file_path |
| check_initialized | X | | |
| find_ras_prj | X | | folder_path |
| get_project_name | X | | |
| get_prj_entries | X | | entry_type |
| get_plan_entries | X | | |
| get_flow_entries | X | | |
| get_unsteady_entries | X | | |
| get_geom_entries | X | | |
| get_hdf_entries | X | | |
| print_data | X | | |
| get_plan_value | X | X | plan_number_or_path, key, ras_object |
| get_boundary_conditions | X | | |
| _parse_boundary_condition | X | | block, unsteady_number, bc_number |

2. RasPlan Class:

| Function Name | @log_call | @standardize_input | Arguments |
|---------------|-----------|--------------------|--------------------|
| set_geom | X | | plan_number, new_geom, ras_object |
| set_steady | X | | plan_number, new_steady_flow_number, ras_object |
| set_unsteady | X | | plan_number, new_unsteady_flow_number, ras_object |
| set_num_cores | X | | plan_number, num_cores, ras_object |
| set_geom_preprocessor | X | | file_path, run_htab, use_ib_tables, ras_object |
| get_results_path | X | X | plan_number, ras_object |
| get_plan_path | X | X | plan_number, ras_object |
| get_flow_path | X | X | flow_number, ras_object |
| get_unsteady_path | X | X | unsteady_number, ras_object |
| get_geom_path | X | X | geom_number, ras_object |
| clone_plan | X | | template_plan, new_plan_shortid, ras_object |
| clone_unsteady | X | | template_unsteady, ras_object |
| clone_steady | X | | template_flow, ras_object |
| clone_geom | X | | template_geom, ras_object |
| get_next_number | X | | existing_numbers |
| get_plan_value | X | X | plan_number_or_path, key, ras_object |
| update_plan_value | X | X | plan_number_or_path, key, value, ras_object |

3. RasGeo Class:

| Function Name | @log_call | @standardize_input | Arguments |
|---------------|-----------|--------------------|--------------------|
| clear_geompre_files | X | | plan_files, ras_object |

4. RasUnsteady Class:

| Function Name | @log_call | @standardize_input | Arguments |
|---------------|-----------|--------------------|--------------------|
| update_unsteady_parameters | X | | unsteady_file, modifications, ras_object |

5. RasCmdr Class:

| Function Name | @log_call | @standardize_input | Arguments |
|---------------|-----------|--------------------|--------------------|
| compute_plan | X | | plan_number, dest_folder, ras_object, clear_geompre, num_cores, overwrite_dest |
| compute_parallel | X | | plan_number, max_workers, num_cores, clear_geompre, ras_object, dest_folder, overwrite_dest |
| compute_test_mode | X | | plan_number, dest_folder_suffix, clear_geompre, num_cores, ras_object, overwrite_dest |

6. RasUtils Class:

| Function Name | @log_call | @standardize_input | Arguments |
|---------------|-----------|--------------------|--------------------|
| create_directory | X | | directory_path, ras_object |
| find_files_by_extension | X | | extension, ras_object |
| get_file_size | X | | file_path, ras_object |
| get_file_modification_time | X | | file_path, ras_object |
| get_plan_path | X | | current_plan_number_or_path, ras_object |
| remove_with_retry | X | | path, max_attempts, initial_delay, is_folder, ras_object |
| update_plan_file | X | | plan_number_or_path, file_type, entry_number, ras_object |
| check_file_access | X | | file_path, mode |
| convert_to_dataframe | X | | data_source, **kwargs |
| save_to_excel | X | | dataframe, excel_path, **kwargs |
| calculate_rmse | X | | observed_values, predicted_values, normalized |
| calculate_percent_bias | X | | observed_values, predicted_values, as_percentage |
| calculate_error_metrics | X | | observed_values, predicted_values |
| update_file | X | | file_path, update_function, *args |
| get_next_number | X | | existing_numbers |
| clone_file | X | | template_path, new_path, update_function, *args |
| update_project_file | X | | prj_file, file_type, new_num, ras_object |
| decode_byte_strings | X | | dataframe |
| perform_kdtree_query | X | | reference_points, query_points, max_distance |
| find_nearest_neighbors | X | | points, max_distance |
| consolidate_dataframe | X | | dataframe, group_by, pivot_columns, level, n_dimensional, aggregation_method |
| find_nearest_value | X | | array, target_value |
| horizontal_distance | X | | coord1, coord2 |

7. HdfBase Class:

| Function Name | @log_call | @standardize_input | Arguments |
|---------------|-----------|--------------------|--------------------|
| _get_simulation_start_time | | | hdf_file |
| _get_unsteady_datetimes | | | hdf_file |
| _get_2d_flow_area_names_and_counts | | | hdf_file |
| _parse_ras_datetime | | | datetime_str |
| _parse_ras_simulation_window_datetime | | | datetime_str |
| _parse_duration | | | duration_str |
| _parse_ras_datetime_ms | | | datetime_str |
| _convert_ras_hdf_string | | | value |

8. HdfBndry Class:

| Function Name | @log_call | @standardize_input | Arguments |
|---------------|-----------|--------------------|--------------------|
| bc_lines | | X (plan_hdf) | hdf_path |
| breaklines | | X (plan_hdf) | hdf_path |
| refinement_regions | | X (plan_hdf) | hdf_path |
| reference_lines_names | | X (plan_hdf) | hdf_path, mesh_name |
| reference_points_names | | X (plan_hdf) | hdf_path, mesh_name |
| reference_lines | | X (plan_hdf) | hdf_path |
| reference_points | | X (plan_hdf) | hdf_path |
| get_boundary_attributes | | X (plan_hdf) | hdf_path, boundary_type |
| get_boundary_count | | X (plan_hdf) | hdf_path, boundary_type |
| get_boundary_names | | X (plan_hdf) | hdf_path, boundary_type |

9. HdfMesh Class:

| Function Name | @log_call | @standardize_input | Arguments |
|---------------|-----------|--------------------|--------------------|
| mesh_area_names | | X (plan_hdf) | hdf_path |
| mesh_areas | | X (geom_hdf) | hdf_path |
| mesh_cell_polygons | | X (geom_hdf) | hdf_path |
| mesh_cell_points | | X (plan_hdf) | hdf_path |
| mesh_cell_faces | | X (plan_hdf) | hdf_path |
| get_geom_2d_flow_area_attrs | | X (geom_hdf) | hdf_path |

10. HdfPlan Class:

| Function Name | @log_call | @standardize_input | Arguments |
|---------------|-----------|--------------------|--------------------|
| get_simulation_start_time | X | X (plan_hdf) | hdf_path |
| get_simulation_end_time | X | X (plan_hdf) | hdf_path |
| get_unsteady_datetimes | X | X (plan_hdf) | hdf_path |
| get_plan_info_attrs | X | X (plan_hdf) | hdf_path |
| get_plan_param_attrs | X | X (plan_hdf) | hdf_path |
| get_meteorology_precip_attrs | X | X (plan_hdf) | hdf_path |
| get_geom_attrs | X | X (plan_hdf) | hdf_path |

11. HdfResultsMesh Class:

| Function Name | @log_call | @standardize_input | Arguments |
|---------------|-----------|--------------------|--------------------|
| mesh_summary_output | X | X (plan_hdf) | hdf_path, var, round_to |
| mesh_timeseries_output | X | X (plan_hdf) | hdf_path, mesh_name, var, truncate |
| mesh_faces_timeseries_output | X | X (plan_hdf) | hdf_path, mesh_name |
| mesh_cells_timeseries_output | X | X (plan_hdf) | hdf_path, mesh_names, var, truncate, ras_object |
| mesh_last_iter | X | X (plan_hdf) | hdf_path |
| mesh_max_ws | X | X (plan_hdf) | hdf_path, round_to |
| mesh_min_ws | X | X (plan_hdf) | hdf_path, round_to |
| mesh_max_face_v | X | X (plan_hdf) | hdf_path, round_to |
| mesh_min_face_v | X | X (plan_hdf) | hdf_path, round_to |
| mesh_max_ws_err | X | X (plan_hdf) | hdf_path, round_to |
| mesh_max_iter | X | X (plan_hdf) | hdf_path, round_to |

12. HdfResultsPlan Class:

| Function Name | @log_call | @standardize_input | Arguments |
|---------------|-----------|--------------------|--------------------|
| get_results_unsteady_attrs | X | X (plan_hdf) | hdf_path |
| get_results_unsteady_summary_attrs | X | X (plan_hdf) | hdf_path |
| get_results_volume_accounting_attrs | X | X (plan_hdf) | hdf_path |
| get_runtime_data | | X (plan_hdf) | hdf_path |
| reference_timeseries_output | X | X (plan_hdf) | hdf_path, reftype |
| reference_lines_timeseries_output | X | X (plan_hdf) | hdf_path |
| reference_points_timeseries_output | X | X (plan_hdf) | hdf_path |
| reference_summary_output | X | X (plan_hdf) | hdf_path, reftype |

13. HdfResultsXsec Class:

| Function Name | @log_call | @standardize_input | Arguments |
|---------------|-----------|--------------------|--------------------|
| steady_profile_xs_output | | X (plan_hdf) | hdf_path, var, round_to |
| cross_sections_wsel | | X (plan_hdf) | hdf_path |
| cross_sections_flow | | X (plan_hdf) | hdf_path |
| cross_sections_energy_grade | | X (plan_hdf) | hdf_path |
| cross_sections_additional_enc_station_left | | X (plan_hdf) | hdf_path |
| cross_sections_additional_enc_station_right | | X (plan_hdf) | hdf_path |
| cross_sections_additional_area_total | | X (plan_hdf) | hdf_path |
| cross_sections_additional_velocity_total | | X (plan_hdf) | hdf_path |

14. HdfStruc Class:

| Function Name | @log_call | @standardize_input | Arguments |
|---------------|-----------|--------------------|--------------------|
| structures | X | X (geom_hdf) | hdf_path, datetime_to_str |
| get_geom_structures_attrs | X | X (geom_hdf) | hdf_path |

15. HdfUtils Class:

| Function Name | @log_call | @standardize_input | Arguments |
|---------------|-----------|--------------------|--------------------|
| get_hdf_filename | | X (plan_hdf) | hdf_input, ras_object |
| get_root_attrs | | X (plan_hdf) | hdf_path |
| get_attrs | | X (plan_hdf) | hdf_path, attr_path |
| get_hdf_paths_with_properties | | X (plan_hdf) | hdf_path |
| get_group_attributes_as_df | | X (plan_hdf) | hdf_path, group_path |
| get_2d_flow_area_names_and_counts | | X (plan_hdf) | hdf_path |
| projection | | X (plan_hdf) | hdf_path |

16. HdfXsec Class:

| Function Name | @log_call | @standardize_input | Arguments |
|---------------|-----------|--------------------|--------------------|
| cross_sections | X | X (geom_hdf) | hdf_path, datetime_to_str |
| cross_sections_elevations | X | X (geom_hdf) | hdf_path, round_to |
| river_reaches | X | X (geom_hdf) | hdf_path, datetime_to_str |

17. RasExamples Class:

| Function Name | @log_call | @standardize_input | Arguments |
|---------------|-----------|--------------------|--------------------|
| __init__ | X | | |
| get_example_projects | X | | version_number |
| _load_project_data | X | | |
| _find_zip_file | X | | |
| _extract_folder_structure | X | | |
| _save_to_csv | X | | |
| list_categories | X | | |
| list_projects | X | | category |
| extract_project | X | | project_names |
| is_project_extracted | X | | project_name |
| clean_projects_directory | X | | |
| download_fema_ble_model | X | | huc8, output_dir |
| _make_safe_folder_name | X | | name |
| _download_file_with_progress | X | | url, dest_folder, file_size |
| _convert_size_to_bytes | X | | size_str |

18. RasGpt Class:

This class is mentioned in the code but has no implemented methods yet.

19. Standalone functions:

| Function Name | @log_call | @standardize_input | Arguments |
|---------------|-----------|--------------------|--------------------|
| init_ras_project | X | | ras_project_folder, ras_version, ras_instance |
| get_ras_exe | X | | ras_version |




Overall, the ras-commander library provides a comprehensive set of tools for working with HEC-RAS projects, including project management, file operations, data extraction, and simulation execution. The library makes extensive use of logging and input standardization through decorators, ensuring consistent behavior and traceability across its various components.


## Coding Assistance Rules:

1. Use default libraries, especially pathlib for file operations.
2. Use r-strings for paths, f-strings for formatting.
3. Always use pathlib over os for file/directory operations.
4. Include comments and use logging for output.
5. Follow PEP 8 conventions.
6. Provide clear error handling and user feedback.
7. Explain RAS Commander function purposes and key arguments.
8. Use either global 'ras' object or custom instances consistently.
9. Highlight parallel execution best practices.
10. Suggest RasExamples for testing when appropriate.
11. Utilize RasHdf for HDF file operations and data extraction.
12. Use type hints for function arguments and return values.
13. Apply the @log_call decorator for automatic function logging.
14. Emphasize proper error handling and logging in all functions.
15. When working with RasHdfGeom, always use the @standardize_input decorator for methods that interact with HDF files.
16. Remember that RasHdfGeom methods often return GeoDataFrames, which combine geometric data with attribute information.
17. When dealing with cross-sections or river reaches, consider using the datetime_to_str parameter to convert datetime objects to strings if needed.
18. For methods that accept a mesh_name parameter, remember that they can return either a dictionary of lists or a single list depending on whether a specific mesh is specified.
19. Use 'union_all()' for geodataframes. For pandas >= 2.0, use pd.concat instead of append.
20. Provide full code segments or scripts with no elides.
21. When importing from the Decorators module, use:
    ```python
    from .Decorators import standardize_input, log_call
    ```
22. When importing from the LoggingConfig module, use:
    ```python
    from .LoggingConfig import setup_logging, get_logger
    ```
23. Be aware that while the code will work with capitalized module names (Decorators.py and LoggingConfig.py), it's generally recommended to stick to lowercase names for modules as per PEP 8.
24. When revising code, label planning steps as:
    ## Explicit Planning and Reasoning for Revisions

25. Always consider the implications of file renaming on import statements throughout the project.
26. When working with GeoDataFrames, remember to use appropriate geometric operations and consider spatial relationships.
27. For HDF file operations, always use the standardize_input decorator to ensure consistent handling of file paths.
28. When dealing with large datasets, consider using chunking or iterative processing to manage memory usage.
29. Utilize the RasExamples class for testing and demonstrating functionality with sample projects.
30. When working with the RasGpt class, be aware that it's mentioned but currently has no implemented methods.
==================================================

Folder: c:\GH\ras-commander\.gitignore
==================================================

Folder: c:\GH\ras-commander\examples
==================================================

File: c:\GH\ras-commander\LICENSE
==================================================
MIT License

Copyright (c) 2024 William M. Katzenmeyer

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so.

==================================================

File: c:\GH\ras-commander\pyproject.toml
==================================================
[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta:__legacy__"

==================================================

Folder: c:\GH\ras-commander\ras_commander
==================================================

File: c:\GH\ras-commander\requirements.txt
==================================================
aider-chat @ git+https://github.com/paul-gauthier/aider.git@00d5348ee6295662c78a8ece31d71632145d9746
alabaster==0.7.16
annotated-types==0.6.0
anyio==3.7.1
asttokens @ file:///home/conda/feedstock_root/build_artifacts/asttokens_1698341106958/work
attrs==23.1.0
babel==2.16.0
backoff==2.2.1
backports.tarfile==1.2.0
black==24.8.0
boto3==1.35.25
botocore==1.35.25
certifi==2023.11.17
cffi==1.16.0
charset-normalizer==3.3.2
click==8.1.7
colorama==0.4.6
comm @ file:///home/conda/feedstock_root/build_artifacts/comm_1710320294760/work
ConfigArgParse==1.7
contourpy==1.3.0
cycler==0.12.1
debugpy @ file:///D:/bld/debugpy_1725269345345/work
decorator @ file:///home/conda/feedstock_root/build_artifacts/decorator_1641555617451/work
diff-match-patch==20230430
diskcache==5.6.3
distro==1.8.0
docutils==0.20.1
exceptiongroup @ file:///home/conda/feedstock_root/build_artifacts/exceptiongroup_1720869315914/work
executing @ file:///home/conda/feedstock_root/build_artifacts/executing_1725214404607/work
flake8==7.1.1
fonttools==4.53.1
geopandas==1.0.1
gitdb==4.0.11
GitPython==3.1.40
grep-ast==0.2.4
h11==0.14.0
h5py==3.11.0
httpcore==1.0.2
idna==3.6
imagesize==1.4.1
importlib_metadata @ file:///home/conda/feedstock_root/build_artifacts/importlib-metadata_1726082825846/work
iniconfig==2.0.0
ipykernel @ file:///D:/bld/ipykernel_1719845595208/work
ipython @ file:///D:/bld/ipython_1725050320818/work
jaraco.classes==3.4.0
jaraco.context==6.0.1
jaraco.functools==4.1.0
jedi @ file:///home/conda/feedstock_root/build_artifacts/jedi_1696326070614/work
Jinja2==3.1.4
jmespath==1.0.1
jsonschema==4.20.0
jsonschema-specifications==2023.11.2
jupyter_client @ file:///home/conda/feedstock_root/build_artifacts/jupyter_client_1726610684920/work
jupyter_core @ file:///D:/bld/jupyter_core_1710257313664/work
keyring==25.4.1
kiwisolver==1.4.7
markdown-it-py==3.0.0
MarkupSafe==2.1.5
matplotlib==3.9.2
matplotlib-inline @ file:///home/conda/feedstock_root/build_artifacts/matplotlib-inline_1713250518406/work
mccabe==0.7.0
mdurl==0.1.2
more-itertools==10.5.0
mypy-extensions==1.0.0
nest_asyncio @ file:///home/conda/feedstock_root/build_artifacts/nest-asyncio_1705850609492/work
networkx==3.2.1
nh3==0.2.18
numpy==1.26.2
packaging==23.2
pandas==2.2.3
parso @ file:///home/conda/feedstock_root/build_artifacts/parso_1712320355065/work
pathlib==1.0.1
pathspec==0.11.2
pickleshare @ file:///home/conda/feedstock_root/build_artifacts/pickleshare_1602536217715/work
pillow==10.4.0
pkginfo==1.10.0
platformdirs @ file:///home/conda/feedstock_root/build_artifacts/platformdirs_1726613481435/work
pluggy==1.5.0
prompt-toolkit==3.0.41
psutil @ file:///D:/bld/psutil_1725737996000/work
pure_eval @ file:///home/conda/feedstock_root/build_artifacts/pure_eval_1721585709575/work
pycodestyle==2.12.1
pycparser==2.21
pydantic==2.5.2
pydantic_core==2.14.5
pyflakes==3.2.0
Pygments==2.17.2
pyogrio==0.9.0
pyparsing==3.1.4
pyproj==3.6.1
pytest==8.3.3
python-dateutil @ file:///home/conda/feedstock_root/build_artifacts/python-dateutil_1709299778482/work
pytz==2024.2
pywin32==306
pywin32-ctypes==0.2.3
PyYAML==6.0.1
pyzmq @ file:///D:/bld/pyzmq_1725449086441/work
readme_renderer==43.0
referencing==0.31.1
regex==2023.10.3
requests==2.32.3
requests-toolbelt==1.0.0
rfc3986==2.0.0
rich==13.7.0
rpds-py==0.13.2
s3transfer==0.10.2
scipy==1.11.4
shapely==2.0.6
six @ file:///home/conda/feedstock_root/build_artifacts/six_1620240208055/work
smmap==5.0.1
sniffio==1.3.0
snowballstemmer==2.2.0
sounddevice==0.4.6
soundfile==0.12.1
Sphinx==7.4.7
sphinx-rtd-theme==2.0.0
sphinxcontrib-applehelp==2.0.0
sphinxcontrib-devhelp==2.0.0
sphinxcontrib-htmlhelp==2.1.0
sphinxcontrib-jquery==4.1
sphinxcontrib-jsmath==1.0.1
sphinxcontrib-qthelp==2.0.0
sphinxcontrib-serializinghtml==2.0.0
stack-data @ file:///home/conda/feedstock_root/build_artifacts/stack_data_1669632077133/work
tornado @ file:///D:/bld/tornado_1724956185692/work
tqdm==4.66.1
traitlets @ file:///home/conda/feedstock_root/build_artifacts/traitlets_1713535121073/work
tree-sitter==0.20.4
tree-sitter-languages==1.8.0
twine==5.1.1
typing_extensions @ file:///home/conda/feedstock_root/build_artifacts/typing_extensions_1717802530399/work
tzdata==2024.1
urllib3==2.2.3
wcwidth==0.2.12
zipp @ file:///home/conda/feedstock_root/build_artifacts/zipp_1726248574750/work

==================================================

File: c:\GH\ras-commander\settings.db
==================================================
SQLite format 3   @                                                                     .v  n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            N)eindexix_settings_idsettingsCREATE INDEX ix_settings_id ON settings (id)VtablesettingssettingsCREATE TABLE settings (
	id VARCHAR NOT NULL, 
	anthropic_api_key TEXT, 
	openai_api_key TEXT, 
	selected_model VARCHAR, 
	context_mode VARCHAR, 
	omit_folders TEXT, 
	omit_extensions TEXT, 
	omit_files TEXT, 
	chunk_level VARCHAR, 
	initial_chunk_size INTEGER, 
	followup_chunk_size INTEGER, 
	PRIMARY KEY (id)
)/C indexsqlite_autoindex_settings_1settings                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
==================================================

File: c:\GH\ras-commander\setup.py
==================================================
from setuptools import setup, find_packages
from setuptools.command.build_py import build_py
import subprocess
from pathlib import Path

class CustomBuildPy(build_py):
    def run(self):
        # Clean up __pycache__ folders
        root_dir = Path(__file__).parent
        for pycache_dir in root_dir.rglob('__pycache__'):
            if pycache_dir.is_dir():
                for cache_file in pycache_dir.iterdir():
                    cache_file.unlink()  # Delete each file
                pycache_dir.rmdir()      # Delete the empty directory
                print(f"Cleaned up: {pycache_dir}")

        # Run the summary_knowledge_bases.py script
        script_path = Path(__file__).parent / 'ai_tools' / 'summary_knowledge_bases.py'
        subprocess.run(['python', str(script_path)], check=True)
        
        # Continue with the regular build process
        super().run()

setup(
    name="ras-commander",
    version="0.50.0",
    packages=["ras_commander"],
    include_package_data=True,
    python_requires='>=3.10',
    author="William M. Katzenmeyer",
    author_email="billk@fenstermaker.com",
    description="A Python library for automating HEC-RAS operations",
    long_description=open('README.md').read(),
    long_description_content_type="text/markdown",
    url="https://github.com/billk-FM/ras-commander",
    cmdclass={
        'build_py': CustomBuildPy,
    },
)

"""
ras-commander setup.py

This file is used to build and publish the ras-commander package to PyPI.

To build and publish this package, follow these steps:

1. Ensure you have the latest versions of setuptools, wheel, and twine installed:
   pip install --upgrade setuptools wheel twine

2. Update the version number in ras_commander/__init__.py (if not using automatic versioning)

3. Create source distribution and wheel:
   python setup.py sdist bdist_wheel

4. Check the distribution:
   twine check dist/*

5. Upload to Test PyPI (optional):
   twine upload --repository testpypi dist/*

6. Install from Test PyPI to verify (optional):
   pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple ras-commander

7. Upload to PyPI:
   twine upload dist/* --username __token__ --password <your_api_key>


8. Install from PyPI to verify:
   pip install ras-commander

Note: Ensure you have the necessary credentials and access rights to upload to PyPI.
For more information, visit: https://packaging.python.org/tutorials/packaging-projects/

"""

==================================================

Folder: c:\GH\ras-commander\tools
==================================================

File: c:\GH\ras-commander\.gitignore\.gitignore
==================================================
# Ignore the example_projects folder and all its subfolders
examples/example_projects/

# Ignore workspace, projects, and my_projects folders
workspace/
projects/
my_projects/

# Ignore FEMA BLE Models
examples/FEMA_BLE_Models/
examples/hdf_example_data/

# ignore tools/stored_map_assistant build folders
tools/stored_map_assistant/build/
tools/stored_map_assistant/dist/

# Ignore library assistant config
library_assistant/config/

# Ignore Python egg info
*.egg-info/
.eggs/

# Ignore the Example_Projects_6_5.zip file
Example_Projects_6_5.zip

# Ignore the misc folder and all its subfolders
misc/

# Ignore Python cache files
__pycache__/
*.py[cod]

# Ignore compiled Python files
*.so

# Ignore distribution / packaging
dist/
build/

# Ignore test cache
.pytest_cache/

# Ignore virtual environments
.venv/
venv/

# Ignore IDE-specific files (optional, uncomment if needed)
# .vscode/
# .idea/

# Ignore OS-specific files
.DS_Store
Thumbs.db
==================================================

File: c:\GH\ras-commander\examples\01_project_initialization.py
==================================================
# 01_project_initialization.py

#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
from pathlib import Path

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras

# Extract specific projects
ras_examples = RasExamples()
ras_examples.extract_project(["Balde Eagle Creek", "BaldEagleCrkMulti2D", "Muncie"])

#### --- START OF SCRIPT --- ####

# RAS Commander Library Notes:
# 1. This example demonstrates both the default global 'ras' object and custom ras objects.
# 2. The global 'ras' object is suitable for simple scripts working with a single project.
# 3. Custom ras objects are recommended for complex scripts or when working with multiple projects.
# 4. The init_ras_project function initializes a project and sets up the ras object.
# 5. Each ras object contains comprehensive information about its project, including plan, geometry, flow files, and boundary conditions.

# Best Practices:
# 1. For simple scripts working with a single project, using the global 'ras' object is fine.
# 2. For complex scripts or when working with multiple projects, create and use separate ras objects.
# 3. Be consistent in your approach: don't mix global and non-global ras object usage in the same script.
# 4. Use descriptive names for custom ras objects to clearly identify different projects.

def print_ras_object_data(ras_obj, project_name):
    print(f"\n{project_name} Project Data:")
    print("=" * 50)
    print(f"Project Name: {ras_obj.get_project_name()}")
    print(f"Project Folder: {ras_obj.project_folder}")
    print(f"PRJ File: {ras_obj.prj_file}")
    print(f"HEC-RAS Executable Path: {ras_obj.ras_exe_path}")
    
    print("\nPlan Files DataFrame:")
    print(ras_obj.plan_df)
    
    print("\nFlow Files DataFrame:")
    print(ras_obj.flow_df)
    
    print("\nUnsteady Flow Files DataFrame:")
    print(ras_obj.unsteady_df)
    
    print("\nGeometry Files DataFrame:")
    print(ras_obj.geom_df)
    
    print("\nHDF Entries DataFrame:")
    print(ras_obj.get_hdf_entries())
    
    print("\nBoundary Conditions DataFrame:")
    print(ras_obj.get_boundary_conditions())
    
    print("\nMeteorological Data:")
    for attr in ['precipitation_mode', 'wind_mode', 'precipitation_metadata', 'evapotranspiration_metadata']:
        if hasattr(ras_obj, attr):
            print(f"{attr.capitalize().replace('_', ' ')}: {getattr(ras_obj, attr)}")
        else:
            print(f"{attr.capitalize().replace('_', ' ')}: Not available")

def main():
    # Get the current script's directory
    current_dir = Path(__file__).parent
    
    # Define paths to example projects
    bald_eagle_path = current_dir.parent / "examples" / "example_projects" / "Balde Eagle Creek"
    multi_2d_path = current_dir.parent / "examples" / "example_projects" / "BaldEagleCrkMulti2D"
    muncie_path = current_dir.parent / "examples" / "example_projects" / "Muncie"

    print("Example Set 1: Using the default global 'ras' object")
    print("-----------------------------------------------------")

    # Initialize using the global RAS instance
    print("Step 1: Initializing with global RAS instance")
    init_ras_project(bald_eagle_path, "6.5") # This will set the global 'ras' object
    print_ras_object_data(ras, "Global RAS Instance (Bald Eagle Creek)")

    print("\nExample Set 2: Using custom ras objects")
    print("-----------------------------------------------------")

    # Initialize multiple project instances
    print("Step 1: Initializing multiple project instances")
    multi_2d_project = init_ras_project(multi_2d_path, "6.5")
    muncie_project = init_ras_project(muncie_path, "6.5")

    print_ras_object_data(multi_2d_project, "Multi2D Project")
    print_ras_object_data(muncie_project, "Muncie Project")

    print("\nExample of simplified import (not recommended for complex scripts)")
    print("-----------------------------------------------------")
    print("from ras_commander import *")
    print("# This allows you to use all functions and classes without prefixes")
    print("# For example: compute_plan() instead of RasCmdr.compute_plan()")
    print("# Note: This approach can lead to naming conflicts and is generally not recommended for larger scripts")

if __name__ == "__main__":
    main()
==================================================

File: c:\GH\ras-commander\examples\02_plan_operations.py
==================================================
# 02_plan_operations.py

#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
from pathlib import Path
import datetime

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras

# Extract specific projects
ras_examples = RasExamples()
ras_examples.extract_project(["Balde Eagle Creek"])

#### --- START OF SCRIPT --- ####

"""
This script demonstrates the process of initializing a HEC-RAS project and performing various operations on plans, geometries, and unsteady flows using the functions within the RasPlan Class.

Process Flow:
1. Project Initialization: Initialize a HEC-RAS project by specifying the project path and version.
2. Plan Cloning: Clone an existing plan, creating a new plan entry.
3. Geometry Cloning: Clone a geometry associated with the original plan, generating a new geometry entry.
4. Unsteady Flow Cloning: Clone an unsteady flow, creating a new unsteady flow entry.
5. Plan Configuration:
   a. Set the cloned geometry for the new plan.
   b. Set the cloned unsteady flow for the new plan.
   c. Update the number of cores to be used for the new plan.
   d. Configure geometry preprocessor options for the new plan.
6. Update Simulation Parameters: Modify various simulation parameters in the new plan.
7. Plan Computation: Compute the new plan and verify successful execution.
8. Results Verification: Check the HDF entries to confirm that results were written.
"""

def main():
    # Initialize the project
    current_dir = Path(__file__).parent
    project_path = current_dir / "example_projects" / "Balde Eagle Creek"
    init_ras_project(project_path, "6.6")

    print("Initial plan files:")
    print(ras.plan_df)
    print()

    # Step 1: Clone a plan
    print("Step 1: Cloning a plan")
    new_plan_number = RasPlan.clone_plan("01")
    print(f"New plan created: {new_plan_number}")
    print("Updated plan files:")
    print(ras.plan_df)
    print()
    
    # Step 2: Clone a geometry
    print("Step 2: Cloning a geometry")
    new_geo_number = RasPlan.clone_geom("01")
    print(f"New geometry created: {new_geo_number}")
    print("Updated geometry files:")
    print(ras.geom_df)
    print()
    
    # Step 3: Clone an unsteady flow
    print("Step 3: Cloning an unsteady flow")
    new_unsteady_number = RasPlan.clone_unsteady("02")
    print(f"New unsteady flow created: {new_unsteady_number}")
    print("Updated unsteady flow files:")
    print(ras.unsteady_df)
    print()

    # Step 4: Set geometry for the cloned plan
    print("Step 4: Setting geometry for a plan")
    RasPlan.set_geom(new_plan_number, new_geo_number)
    plan_path = RasPlan.get_plan_path(new_plan_number)
    print(f"Updated geometry for plan {new_plan_number}")
    print(f"Plan file path: {plan_path}")
    print()

    # Step 5: Set unsteady flow for the cloned plan
    print("Step 5: Setting unsteady flow for a plan")
    RasPlan.set_unsteady(new_plan_number, new_unsteady_number)
    print(f"Updated unsteady flow for plan {new_plan_number}")
    print()

    # Step 6: Set the number of cores for the cloned plan
    print("Step 6: Setting the number of cores for a plan")
    RasPlan.set_num_cores(new_plan_number, 2)
    print(f"Updated number of cores for plan {new_plan_number}")
    print()

    # Step 7: Set geometry preprocessor options for the cloned plan
    print("Step 7: Setting geometry preprocessor options")
    RasPlan.set_geom_preprocessor(plan_path, run_htab=-1, use_ib_tables=-1)
    print(f"Updated geometry preprocessor options for plan {new_plan_number}")
    print()

    # Step 8: Update simulation parameters
    print("Step 8: Updating simulation parameters")

    # Import the datetime module
    from datetime import datetime

    # Update simulation date
    start_date = datetime(2023, 1, 1, 0, 0)
    end_date = datetime(2023, 1, 5, 23, 59)
    RasPlan.update_simulation_date(new_plan_number, start_date, end_date)

    # Update plan intervals
    RasPlan.update_plan_intervals(
        new_plan_number,
        computation_interval="1MIN",
        output_interval="15MIN",
        mapping_interval="30MIN"
    )

    # Update run flags
    RasPlan.update_run_flags(
        new_plan_number,
        geometry_preprocessor=True,
        unsteady_flow_simulation=True,
        post_processor=True,
        floodplain_mapping=True
    )

    # Update plan description
    new_description = "Updated plan with modified simulation parameters"
    RasPlan.update_plan_description(new_plan_number, new_description)


    print("Updated simulation parameters")
    print()


    # Step 9: Compute the cloned plan
    print("Step 10: Computing the cloned plan")
    success = RasCmdr.compute_plan(new_plan_number)
    print(f"Computing plan {new_plan_number}")
    if success:
        print(f"Plan {new_plan_number} computed successfully")
    else:
        print(f"Failed to compute plan {new_plan_number}")
    print()
    
    # Step 11: Get the HDF entries for the cloned plan to prove that the results were written
    print("Step 11: Retrieving HDF entries for the cloned plan")
    # Refresh the plan entries to ensure we have the latest data
    ras.plan_df = ras.get_plan_entries()
    hdf_entries = ras.get_hdf_entries()
    if not hdf_entries.empty:
        print("HDF entries for the cloned plan:")
        print(hdf_entries)
    else:
        print("No HDF entries found. This could mean the plan hasn't been computed successfully or the results haven't been written yet.")
    
    # Display the plan entries to see if the HDF path is populated
    print("\nCurrent plan entries:")
    print(ras.plan_df)
    
if __name__ == "__main__":
    main()

==================================================

File: c:\GH\ras-commander\examples\03_geometry_operations.py
==================================================
# 03_geometry_operations.py

#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
from pathlib import Path

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras

# Extract specific projects
ras_examples = RasExamples()
ras_examples.extract_project(["Muncie"])

#### --- START OF SCRIPT --- ####

# RAS Commander Library Notes:
# 1. This example uses the default global 'ras' object for simplicity.
# 2. If you need to work with multiple projects, use separate ras objects for each project.
# 3. Once you start using non-global ras objects, stick with that approach throughout your script.
# 4. The RasGeo class provides methods for working with geometry files and preprocessor operations.

# Best Practices:
# 1. For simple scripts working with a single project, using the global 'ras' object is fine.
# 2. For complex scripts or when working with multiple projects, create and use separate ras objects.
# 3. Be consistent in your approach: don't mix global and non-global ras object usage in the same script.
# 4. Always clear geometry preprocessor files before making significant changes to ensure clean results.

def main():
    # Initialize the project
    current_dir = Path(__file__).parent
    project_path = current_dir / "example_projects" / "Muncie"
    init_ras_project(project_path, "6.6")

    print("Initial plan files:")
    print(ras.plan_df)
    print()

    # Step 1: Clone a plan
    print("Step 1: Cloning a plan")
    new_plan_number = RasPlan.clone_plan("01")
    print(f"New plan created: {new_plan_number}")
    print("Updated plan files:")
    print(ras.plan_df)
    print()

    # Step 2: Clone a geometry file and assign it to the cloned plan
    print("Step 2: Cloning a geometry file and assigning it to the cloned plan")
    new_geom_number = RasPlan.clone_geom("01")
    print(f"New geometry created: {new_geom_number}")
    print(f"Now set the new geometry to the new plan")
    RasPlan.set_geom(new_plan_number, new_geom_number)
    print(f"New geometry {new_geom_number} assigned to plan {new_plan_number}")
    print("Updated geometry files:")
    print(ras.geom_df)
    print()

    # Step 3: Clear geometry preprocessor files for the cloned plan
    print("Step 3: Clearing geometry preprocessor files for the cloned plan")
    plan_path = RasPlan.get_plan_path(new_plan_number)
    RasGeo.clear_geompre_files(plan_path)
    print(f"Cleared geometry preprocessor files for plan {new_plan_number}")
    print()

    # Step 4: Clear geometry preprocessor files for all plans
    print("Step 4: Clearing geometry preprocessor files for all plans")
    RasGeo.clear_geompre_files()
    print("Cleared geometry preprocessor files for all plans")
    print()

    # Step 5: Print the updated plan information
    print("Step 5: Updated plan information")
    plan_df = ras.get_plan_entries()
    print(plan_df)
    print()

    # Step 6: Compute the cloned plan with new geometry and core count
    print("Step 6: Computing the cloned plan")
    success = RasCmdr.compute_plan(new_plan_number)
    print(f"Computing plan {new_plan_number}")
    if success:
        print(f"Plan {new_plan_number} computed successfully")
    else:
        print(f"Failed to compute plan {new_plan_number}")
        
    # Step 7: Get and print results paths
    print("\nStep 7: Getting results paths")
    for plan_number in [new_plan_number, "01"]:  # Check both the new plan and the original plan
        results_path = RasPlan.get_results_path(plan_number)
        if results_path:
            print(f"Results for plan {plan_number} are located at: {results_path}")
        else:
            print(f"No results found for plan {plan_number}")
        

if __name__ == "__main__":
    main()
==================================================

File: c:\GH\ras-commander\examples\04_unsteady_flow_operations.py
==================================================
# 04_unsteady_flow_operations.py

#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
from pathlib import Path

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras

# Extract specific projects
ras_examples = RasExamples()
ras_examples.extract_project(["Balde Eagle Creek"])

#### --- START OF SCRIPT --- ####

"""
This script demonstrates the process of initializing a HEC-RAS project and performing various operations on unsteady flow files using the RasUnsteady class.

Process Flow:
1. Project Initialization: Initialize a HEC-RAS project by specifying the project path and version.
2. Extract Boundary and Tables: Extract boundary conditions and associated tables from an unsteady flow file.
3. Print Boundaries and Tables: Display the extracted boundary conditions and tables.
4. Update Unsteady Parameters: Modify parameters in the unsteady flow file.
5. Verify Changes: Check the updated unsteady flow file to confirm the changes.
"""

def main():
    # Initialize the project
    current_dir = Path(__file__).parent
    project_path = current_dir / "example_projects" / "Balde Eagle Creek"
    init_ras_project(project_path, "6.6")

    print("Initial unsteady flow files:")
    print(ras.unsteady_df)
    print()

    # Step 1: Extract boundary and tables
    print("Step 1: Extracting boundary conditions and tables")
    unsteady_file = RasPlan.get_unsteady_path("02")  # Using unsteady flow file "02"
    print(f"Unsteady file: {unsteady_file}")
    boundaries_df = RasUnsteady.extract_boundary_and_tables(unsteady_file)
    print("Extracted boundary conditions and tables")
    #print(boundaries_df)

    # Step 2: Print boundaries and tables
    print("Step 2: Printing boundaries and tables")
    RasUnsteady.print_boundaries_and_tables(boundaries_df)
    print()

    # Step 3: Update unsteady parameters
    #print("Step 3: Updating unsteady flow parameters")
    #modifications = {
    #    "Computation Interval": "30SEC",
    #    "Output Interval": "10MIN",
    #    "Mapping Interval": "1HOUR"
    #}
    #RasUnsteady.update_unsteady_parameters(unsteady_file, modifications)
    #print("Updated unsteady flow parameters")
    #print()

    
if __name__ == "__main__":
    main()


==================================================

File: c:\GH\ras-commander\examples\05_utility_functions.py
==================================================
# 05_utility_functions.py

#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
from pathlib import Path

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras

# Extract specific projects
ras_examples = RasExamples()
ras_examples.extract_project(["Balde Eagle Creek"])

#### --- START OF SCRIPT --- ####

# RAS Commander (ras-commander) Library Notes:
# 1. This example uses the default global 'ras' object for simplicity.
# 2. If you need to work with multiple projects, use separate ras objects for each project.
# 3. Once you start using non-global ras objects, stick with that approach throughout your script.
# 4. The RasUtils class provides various utility functions for working with HEC-RAS projects.

# Best Practices:
# 1. For simple scripts working with a single project, using the global 'ras' object is fine.
# 2. For complex scripts or when working with multiple projects, create and use separate ras objects.
# 3. Be consistent in your approach: don't mix global and non-global ras object usage in the same script.

def main():
    # Initialize the project
    current_dir = Path(__file__).parent
    project_path = current_dir / "example_projects" / "Balde Eagle Creek"
    init_ras_project(project_path, "6.6")
    plan_number = "01"

    # Example 1: Get plan path using RasUtils
    print("Example 1: Getting plan path")
    plan_path = RasUtils.get_plan_path(plan_number)
    print(f"Path for plan {plan_number} is: {plan_path}")
    
    # Example 2: Get geometry path using RasPlan
    print("\nExample 2: Getting geometry path")
    geom_number = "01"
    geom_path = RasPlan.get_geom_path(geom_number)
    print(f"Path for geometry {geom_number} is: {geom_path}")
    
    # Example 3: Get unsteady flow path using RasPlan
    print("\nExample 3: Getting unsteady flow path")
    unsteady_number = "01"
    unsteady_path = RasPlan.get_unsteady_path(unsteady_number)
    print(f"Path for unsteady flow {unsteady_number} is: {unsteady_path}")
    
    # Example 4: Get project name
    print("\nExample 4: Getting project name")
    project_name = ras.get_project_name()
    print(f"Project name: {project_name}")


if __name__ == "__main__":
    main()
==================================================

File: c:\GH\ras-commander\examples\06_single_plan_execution.py
==================================================
#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
from pathlib import Path

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras

# Define the "example_projects" folder in the same directory as the script
examples_path = Path(__file__).parent / "example_projects"

# Delete the project if it exists
if examples_path.exists():
    import shutil
    shutil.rmtree(examples_path)

# Extract specific projects
ras_examples = RasExamples()
ras_examples.extract_project(["Balde Eagle Creek"])

#### --- START OF SCRIPT --- ####

# ras-commander Library Notes:
# 1. This example uses the default global 'ras' object for simplicity.
# 2. If you need to work with multiple projects, use separate ras objects for each project.
# 3. Once you start using non-global ras objects, stick with that approach throughout your script.

# Best Practices:
# 1. For simple scripts working with a single project, using the global 'ras' object is fine.
# 2. For complex scripts or when working with multiple projects, create and use separate ras objects.
# 3. Be consistent in your approach: don't mix global and non-global ras object usage in the same script.

def main():
    # Initialize the project using the global 'ras' object
    current_dir = Path(__file__).parent
    project_path = current_dir / "example_projects" / "Balde Eagle Creek"
    init_ras_project(project_path, "6.6")

    print("Available plans:")
    print(ras.plan_df)
    print()

    # Example 1: Execute a single plan
    print("Example 1: Executing a single plan")
    plan_number = "01"
    success = RasCmdr.compute_plan(plan_number)
    if success:
        print(f"Plan {plan_number} executed successfully")
    else:
        print(f"Plan {plan_number} execution failed")
    print()
    

    # Example 2: Execute a plan in a separate destination folder
    print("Example 2: Executing a plan in a separate destination folder")
    plan_number = "02"
    dest_folder = project_path.parent / "compute_test_2"
    success = RasCmdr.compute_plan(plan_number, dest_folder=dest_folder)
    if success:
        print(f"Plan {plan_number} executed successfully in {dest_folder}")
    else:
        print(f"Plan {plan_number} execution failed in {dest_folder}")
    print()

    # Example 3: Get and print results path
    print("Example 3: Getting results path")
    results_path = RasPlan.get_results_path(plan_number)
    if results_path:
        print(f"Results for plan {plan_number} are located at: {results_path}")
    else:
        print(f"No results found for plan {plan_number}")
    print()    

    # Example 4: Execute a plan with cleared geometry preprocessor files
    print("Example 4: Executing a plan with cleared geometry preprocessor files")
    plan_number = "03"
    dest_folder = project_path.parent / "compute_test_3"
    success = RasCmdr.compute_plan(plan_number, dest_folder=dest_folder, clear_geompre=True)
    if success:
        print(f"Plan {plan_number} executed successfully with cleared geometry preprocessor files")
    else:
        print(f"Plan {plan_number} execution failed")
    print()
    

    # Example 5: Execute a plan with a specified number of cores, overwriting compute_test_3
    print("Example 5: Executing a plan with a specified number of cores, overwriting compute_test_3")
    plan_number = "01"
    num_cores = 2  # Specify the number of cores to use
    success = RasCmdr.compute_plan(plan_number, dest_folder=dest_folder, num_cores=num_cores, overwrite_dest=True)
    if success:
        print(f"Plan {plan_number} executed successfully using {num_cores} cores")
    else:
        print(f"Plan {plan_number} execution failed")
    print()
    

    # Example 6: Execute a plan with all new options combined
    print("Example 6: Executing a plan with all new options combined")
    plan_number = "02"
    dest_folder = project_path.parent / "compute_test_all_options"
    num_cores = 4
    
    success = RasCmdr.compute_plan(
        plan_number,
        dest_folder=dest_folder,
        clear_geompre=True,
        num_cores=num_cores
    )
    if success:
        print(f"Plan {plan_number} executed successfully with all options:")
        print(f"- Destination folder: {dest_folder}")
        print(f"- Cleared geometry preprocessor files")
        print(f"- Used {num_cores} cores")
    else:
        print(f"Plan {plan_number} execution failed")

if __name__ == "__main__":
    main()
==================================================

File: c:\GH\ras-commander\examples\07_sequential_plan_execution.py
==================================================
#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
from pathlib import Path

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras

# Housekeeping Note: 
# For all of the functions that do batched execution (sequential or parallel), they are careful not to overwrite existing folders
# So if you want your script to be repeatable, you need to make sure you delete the folders before running again.
# Otherwise an error will be raised to prevent overwriting any results from your previous runs.
# This will not be done by the example projects routines, which only overwrite the source folder for repeatability. 
    
import shutil
from pathlib import Path
# Define the keys to search for in folder names
# Delete example projects folder
current_file = Path(__file__).resolve()
current_dir = current_file.parent
delete_folder_path = current_dir / "example_projects"

if delete_folder_path.exists():
    print(f"Removing existing folder: {delete_folder_path}")
    shutil.rmtree(delete_folder_path)
else:
    print(f"Folder not found: {delete_folder_path}")

# Extract specific projects
ras_examples = RasExamples()
ras_examples.extract_project(["Balde Eagle Creek"])

#### --- START OF SCRIPT --- ####

# ras-commander Library Notes:
# 1. This example uses the default global 'ras' object for simplicity.
# 2. If you need to work with multiple projects, use separate ras objects for each project.
# 3. Once you start using non-global ras objects, stick with that approach throughout your script.

# Best Practices:
# 1. For simple scripts working with a single project, using the global 'ras' object is fine.
# 2. For complex scripts or when working with multiple projects, create and use separate ras objects.
# 3. Be consistent in your approach: don't mix global and non-global ras object usage in the same script.
# 4. For functions that do batched execution (sequential or parallel), they are careful not to overwrite existing folders.
# 5. If you want your script to be repeatable, make sure to delete the folders before running again.

def main():
    # Initialize the project using the global 'ras' object
    current_dir = Path(__file__).parent
    project_path = current_dir / "example_projects" / "Balde Eagle Creek"
    init_ras_project(project_path, "6.6")

    print("Available plans:")
    print(ras.plan_df)
    print()

    # Example 1: Sequential execution of all plans with overwrite_dest
    print("Example 1: Sequential execution of all plans with overwrite_dest")
    RasCmdr.compute_test_mode(
        dest_folder_suffix="[AllSequential]",
        overwrite_dest=True
    )
    print("Sequential execution of all plans completed with overwrite_dest")
    print()
    
    # Example 2: Sequential execution of specific plans with clearing geompre files and overwrite_dest
    print("Example 2: Sequential execution of specific plans with clearing geompre files and overwrite_dest")
    RasCmdr.compute_test_mode(
        plan_number=["01", "02"],
        dest_folder_suffix="[SpecificSequentialClearGeompre]",
        clear_geompre=True,
        overwrite_dest=True
    )
    print("Sequential execution of specific plans completed with clearing geompre files and overwrite_dest")
    print()

    # Example 3: Demonstrate clearing geompre files for specific plans
    print("Example 3: Clearing geompre files for specific plans")
    plan_files = [RasPlan.get_plan_path("01"), RasPlan.get_plan_path("02")]
    RasGeo.clear_geompre_files(plan_files)
    print("Geometry preprocessor files cleared for specific plans")
    print()

    # Example 4: Demonstrate clearing all geompre files
    print("Example 4: Clearing all geompre files")
    RasGeo.clear_geompre_files()
    print("All geometry preprocessor files cleared")

if __name__ == "__main__":
    main()
==================================================

File: c:\GH\ras-commander\examples\08_parallel_execution.py
==================================================
#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
from pathlib import Path
import shutil
import psutil
import math

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, RasPrj
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, RasPrj

# Extract specific projects
ras_examples = RasExamples()
ras_examples.extract_project(["Balde Eagle Creek"])

#### --- START OF SCRIPT --- ####

# ras-commander Library Notes:
# 1. This example uses separate RasPrj objects for each project/folder.
# 2. Using separate RasPrj objects allows working with multiple projects or folders.
# 3. We'll create new RasPrj objects for the original project and each output folder.
# 4. For functions that do batched execution (sequential or parallel), they are careful not to overwrite existing folders.
# 5. If you want your script to be repeatable, make sure to delete the folders before running again.

# Best Practices:
# 1. For complex scripts or when working with multiple projects/folders, create and use separate RasPrj objects.
# 2. Be consistent in your approach: use non-global RasPrj objects throughout the script.
# 3. When using parallel execution, consider the number of cores available on your machine.
# 4. Use the dest_folder argument to keep your project folder clean and organized.

def get_physical_core_count():
    return psutil.cpu_count(logical=False)

def main():
    # Initialize the project using a new RasPrj object
    current_dir = Path(__file__).parent
    project_path = current_dir / "example_projects" / "Balde Eagle Creek"
    source_project = init_ras_project(project_path, "6.6")

    print("Available plans:")
    print(source_project.plan_df)
    print()

    # Example 1: Parallel execution of all plans with overwrite_dest
    print("Example 1: Parallel execution of all plans with overwrite_dest")
    compute_folder = project_path.parent / "compute_test_parallel"
    results_all = RasCmdr.compute_parallel(
        max_workers=3,
        num_cores=2,
        dest_folder=compute_folder,
        overwrite_dest=True,
        ras_object=source_project
    )
    print("Parallel execution of all plans results:")
    for plan_number, success in results_all.items():
        print(f"Plan {plan_number}: {'Successful' if success else 'Failed'}")
    print()
    
    # Initialize a new RasPrj object for the compute_folder
    compute_source_project = init_ras_project(compute_folder, "6.6")
    print("Plan DataFrame after parallel execution of all plans:")
    print(compute_source_project.plan_df)
    print()

    # Example 2: Parallel execution of specific plans with overwrite_dest
    print("Example 2: Parallel execution of specific plans with overwrite_dest")
    specific_plans = ["01", "02"]
    specific_compute_folder = project_path.parent / "compute_test_parallel_specific"
    results_specific = RasCmdr.compute_parallel(
        plan_number=specific_plans,
        max_workers=2,
        num_cores=2,
        dest_folder=specific_compute_folder,
        overwrite_dest=True,
        ras_object=source_project
    )
    print("Parallel execution of specific plans results:")
    for plan_number, success in results_specific.items():
        print(f"Plan {plan_number}: {'Successful' if success else 'Failed'}")
    print()

    # Example 3: Parallel execution with dynamic max_workers based on physical cores
    print("Example 3: Parallel execution with dynamic max_workers")
    num_cores = 2
    physical_cores = get_physical_core_count()
    max_workers = math.floor(physical_cores / num_cores)
    
    dynamic_compute_folder = project_path.parent / "compute_test_parallel_dynamic"
    results_dynamic = RasCmdr.compute_parallel(
        max_workers=max_workers,
        num_cores=num_cores,
        dest_folder=dynamic_compute_folder,
        overwrite_dest=True,
        ras_object=source_project
    )
    print(f"Parallel execution with {max_workers} workers and {num_cores} cores per worker:")
    for plan_number, success in results_dynamic.items():
        print(f"Plan {plan_number}: {'Successful' if success else 'Failed'}")
    print()

    # Get and print results paths
    print("Results paths for dynamic execution:")
    dynamic_compute_source_project = init_ras_project(dynamic_compute_folder, "6.6")
    print(dynamic_compute_source_project.plan_df)

if __name__ == "__main__":
    main()
==================================================

File: c:\GH\ras-commander\examples\09_specifying_plans.py
==================================================
#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
from pathlib import Path

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras

# Housekeeping Note: 
# For all of the functions that do batched execution (sequential or parallel), they are careful not to overwrite existing folders
# So if you want your script to be repeatable, you need to make sure you delete the folders before running again.
# Otherwise an error will be raised to prevent overwriting any results from your previous runs.
# This will not be done by the example projects routines, which only overwrite the source folder for repeatability. 
    
import shutil
from pathlib import Path

# Delete example projects folder
current_file = Path(__file__).resolve()
current_dir = current_file.parent
delete_folder_path = current_dir / "example_projects"

if delete_folder_path.exists():
    print(f"Removing existing folder: {delete_folder_path}")
    shutil.rmtree(delete_folder_path)
else:
    print(f"Folder not found: {delete_folder_path}")

# Extract specific projects
ras_examples = RasExamples()
ras_examples.extract_project(["Balde Eagle Creek"])

#### --- START OF SCRIPT --- ####

# RAS Commander (ras-commander) Library Notes:
# 1. This example uses the default global 'ras' object for simplicity.
# 2. If you need to work with multiple projects, use separate ras objects for each project.
# 3. Once you start using non-global ras objects, stick with that approach throughout your script.
# 4. The RasCmdr class provides methods for executing plans in various ways.
# 5. You can specify individual plans or lists of plans for batch operations.

# Best Practices:
# 1. For simple scripts working with a single project, using the global 'ras' object is fine.
# 2. For complex scripts or when working with multiple projects, create and use separate ras objects.
# 3. Be consistent in your approach: don't mix global and non-global ras object usage in the same script.
# 4. When specifying plans, use plan numbers as strings (e.g., "01", "02") for consistency.
# 5. Always check the available plans in the project before specifying plan numbers for execution.

def main():
    # Initialize the project
    current_dir = Path(__file__).parent
    project_path = current_dir / "example_projects" / "Balde Eagle Creek"
    init_ras_project(project_path, "6.6")

    print("Available plans:")
    print(ras.plan_df)
    print()

    # Example 1: Sequential execution of specific plans
    print("Example 1: Sequential execution of specific plans (1 and 3)")
    RasCmdr.compute_test_mode(plan_number=["01", "03"], dest_folder_suffix="[SpecificSequential]", num_cores=6)
    print("Sequential execution of specific plans completed")
    print()

    # Example 2: Parallel execution of specific plans
    print("Example 2: Parallel execution of specific plans")
    results_specific = RasCmdr.compute_parallel(
        plan_number=["01", "02"],
        max_workers=2,
        num_cores=2
    )
    print("Parallel execution of specific plans results:")
    for plan_number, success in results_specific.items():
        print(f"Plan {plan_number}: {'Successful' if success else 'Failed'}")
    print()

    # Example 3: Execute all plans
    print("Example 3: Execute all plans")
    all_plan_numbers = ras.plan_df['plan_number'].tolist()
    RasCmdr.compute_test_mode(plan_number=all_plan_numbers, dest_folder_suffix="[AllPlans]")
    print("Execution of all plans completed")
    print()

if __name__ == "__main__":
    main()

==================================================

File: c:\GH\ras-commander\examples\10_arguments_for_compute.py
==================================================
#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
from pathlib import Path

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras

# Extract specific projects
ras_examples = RasExamples()
ras_examples.extract_project(["Balde Eagle Creek"])

#### --- START OF SCRIPT --- ####

# RAS Commander Library Notes:
# 1. This example uses the default global 'ras' object for simplicity.
# 2. If you need to work with multiple projects, use separate ras objects for each project.
# 3. Once you start using non-global ras objects, stick with that approach throughout your script.
# 4. The RasCmdr class provides various arguments for fine-tuning plan computation:
#    - plan_number: String representing the plan number to compute (e.g., "01")
#    - dest_folder: Path object specifying the destination folder for computation results
#    - clear_geompre: Boolean to clear geometry preprocessor files before computation
#    - num_cores: Integer specifying the number of cores to use
#    - overwrite_dest: Boolean to determine if existing destination folders should be overwritten

# Best Practices:
# 1. For simple scripts working with a single project, using the global 'ras' object is fine.
# 2. For complex scripts or when working with multiple projects, create and use separate ras objects.
# 3. Be consistent in your approach: don't mix global and non-global ras object usage in the same script.
# 4. Utilize the various arguments in compute functions to customize plan execution.
# 5. Always consider your system's capabilities when setting num_cores.
# 6. Use clear_geompre=True when you want to ensure a clean computation environment.
# 7. Specify dest_folder to keep your project folder organized and prevent overwriting previous results.

def main():
    # Initialize the project
    current_dir = Path(__file__).parent
    project_path = current_dir / "example_projects" / "Balde Eagle Creek"
    init_ras_project(project_path, "6.6")

    print("Available plans:")
    print(ras.plan_df)
    print()

    # Example 1: Sequential execution (compute_test_mode) with various arguments
    print("Example 1: Sequential execution with various arguments")
    for plan_number in ["01", "02"]:
        # Put dest_folder in the parent directory of the project folder (placing it horizontally with the project folder)
        # Test mode only allows dest_folder_suffix, and always creates a copy in the project folder's parent directory. 
        # So instead of building the full folder name or path, we only define the suffix. 
        dest_folder_suffix = f"_{plan_number}_[SequentialWithArgs]"
        success = RasCmdr.compute_test_mode(
            plan_number=plan_number,
            dest_folder_suffix=dest_folder_suffix,  # Test mode only allows dest_folder_suffix, and always creates a copy in the project folder's parent directory
            clear_geompre=True,
            num_cores=2,
            overwrite_dest=True
        )
        print(f"Plan {plan_number} execution: {'Successful' if success else 'Failed'}")
    print("Sequential execution completed")
    print()
    
    # This variation will fail, as the folder already exists and overwrite_dest is False.  
    # Be sure to think step by step about folder management in your multi-folder automation workflows:
    # Also, try to run the same thing with compute_parallel, but with overwrite_dest=False
    # Since we just created these folders, they are not empty, so this should generate an error message on the terminal
    # Put in Try-Except block:
    try:
        dest_folder = project_path.parent / f"{ras.project_name}_compute_test_01_[SequentialWithArgs]"
        success = RasCmdr.compute_test_mode(
            plan_number="01",
            dest_folder_suffix=dest_folder_suffix,
            clear_geompre=True,
            num_cores=2,
            overwrite_dest=False
        )
    except ValueError as e:
        print(f"If the example operates successfully (it is meant to generate an error above), you will not see this message.")

    # Example 2: Parallel execution (compute_parallel) with various arguments
    print("Example 2: Parallel execution with various arguments")
    results = RasCmdr.compute_parallel(
        plan_number=["01", "02"],
        max_workers=2,
        num_cores=2,
        dest_folder=project_path.parent / "parallel_results",
        clear_geompre=True
    )
    print("Parallel execution results:")
    for plan_number, success in results.items():
        print(f"Plan {plan_number}: {'Successful' if success else 'Failed'}")
    print()

    # Example 3: Single plan execution (compute_plan) with specific arguments
    print("Example 3: Single plan execution with specific arguments")
    plan_number = "02"
    dest_folder = project_path.parent / "compute_test_2"
    success = RasCmdr.compute_plan(plan_number, dest_folder=dest_folder, num_cores=2, clear_geompre=True, overwrite_dest=True)
    print(f"Single plan execution: {'Successful' if success else 'Failed'}")

if __name__ == "__main__":
    main()

==================================================

File: c:\GH\ras-commander\examples\12_plan_set_execution.py
==================================================
#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
from pathlib import Path

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras

# Extract specific projects
ras_examples = RasExamples()
ras_examples.extract_project(["Balde Eagle Creek"])

#### --- START OF SCRIPT --- ####

import pandas as pd


def create_plan_set(base_plan, base_geom, num_copies):
    plan_set = []
    for i in range(num_copies):
        new_plan = RasPlan.clone_plan(base_plan)
        new_geom = RasPlan.clone_geom(base_geom)
        RasPlan.set_geom(new_plan, new_geom)
        plan_set.append({
            'plan_number': new_plan,
            'geom_number': new_geom
        })
    return pd.DataFrame(plan_set)

def main():
    # Initialize the project
    current_dir = Path(__file__).parent
    project_path = current_dir / "example_projects" / "Balde Eagle Creek"
    init_ras_project(project_path, "6.6")

    print("Available plans:")
    print(ras.plan_df)
    print("\nAvailable geometries:")
    print(ras.geom_df)
    print()

    # Create a plan set
    base_plan = "01"
    base_geom = "01"
    num_copies = 5
    plan_set = create_plan_set(base_plan, base_geom, num_copies)
    
    print("Created plan set:")
    print(plan_set)
    print()

    # Placeholder for user to insert code that makes programmatic changes to the model
    # For example:
    # for index, row in plan_set.iterrows():
    #     plan_path = RasPlan.get_plan_path(row['plan_number'])
    #     geom_path = RasPlan.get_geom_path(row['geom_number'])
    #     # Make changes to the plan or geometry file here
    #     # For example, you could modify Manning's n values, cross-section data, etc.

    # Execute the plan set in parallel
    print("Executing plan set in parallel")
    results = RasCmdr.compute_parallel(
        plan_number=plan_set['plan_number'].tolist(),
        max_workers=3,
        num_cores=2
    )

    # Add execution results to the plan_set DataFrame
    plan_set['execution_success'] = plan_set['plan_number'].map(results)

    print("\nPlan set execution results:")
    print(plan_set)

    # Here you could add code to analyze the results, such as:
    # - Extracting key output values from each simulation
    # - Comparing results across different plans
    # - Creating visualizations of the results

if __name__ == "__main__":
    main()
==================================================

File: c:\GH\ras-commander\examples\13_multiple_project_operations.py
==================================================
#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
import shutil
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras

# Extract specific projects
ras_examples = RasExamples()
ras_examples.extract_project(["Balde Eagle Creek", "Muncie"])

#### --- START OF SCRIPT --- ####

def execute_plan(plan_number, ras_object, compute_folder):
    # Set the number of cores to 2 before executing the plan
    RasPlan.set_num_cores(plan_number, 2, ras_object=ras_object)
    
    # Execute the plan in the compute folder
    success = RasCmdr.compute_plan(plan_number, ras_object=ras_object, dest_folder=compute_folder)
    
    return plan_number, success

def main():
    # Initialize two projects
    current_dir = Path(__file__).parent
    bald_eagle_path = current_dir / "example_projects" / "Balde Eagle Creek"
    muncie_path = current_dir / "example_projects" / "Muncie"
    
    bald_eagle = init_ras_project(bald_eagle_path, "6.6")
    muncie = init_ras_project(muncie_path, "6.6")

    print("Available plans in Bald Eagle Creek project:")
    print(bald_eagle.plan_df)
    print("\nAvailable plans in Muncie project:")
    print(muncie.plan_df)
    print()

    # Example 1: Clone plans with custom short identifiers
    print("Example 1: Cloning plans with custom short identifiers")
    new_bald_eagle_plan = RasPlan.clone_plan("01", new_plan_shortid="BECustom", ras_object=bald_eagle)
    new_muncie_plan = RasPlan.clone_plan("01", new_plan_shortid="MunCustom", ras_object=muncie)
    print(f"Created new plan {new_bald_eagle_plan} in Bald Eagle Creek project")
    print(f"Created new plan {new_muncie_plan} in Muncie project")
    print()

    # Example 2: Set geometry for the new plans
    print("Example 2: Setting geometry for the new plans")
    RasPlan.set_geom(new_bald_eagle_plan, "01", ras_object=bald_eagle)
    RasPlan.set_geom(new_muncie_plan, "01", ras_object=muncie)
    print(f"Set geometry for plan {new_bald_eagle_plan} in Bald Eagle Creek project")
    print(f"Set geometry for plan {new_muncie_plan} in Muncie project")
    print()


    # Example 3: Execute plans for both projects simultaneously in separate compute folders
    print("Example 4: Executing plans for both projects simultaneously in separate compute folders")
    
    # Create compute folders
    bald_eagle_compute_folder = bald_eagle_path.parent / "compute_bald_eagle"
    muncie_compute_folder = muncie_path.parent / "compute_muncie"
    
    # Remove existing compute folders if they exist
    for folder in [bald_eagle_compute_folder, muncie_compute_folder]:
        if folder.exists():
            shutil.rmtree(folder)
        folder.mkdir(parents=True, exist_ok=True)
    
    with ThreadPoolExecutor(max_workers=2) as executor:
        futures = [
            executor.submit(execute_plan, new_bald_eagle_plan, bald_eagle, bald_eagle_compute_folder),
            executor.submit(execute_plan, new_muncie_plan, muncie, muncie_compute_folder)
        ]
        
        results = {}
        for future in futures:
            plan_number, success = future.result()
            results[plan_number] = success

    print("Execution results:")
    for plan_number, success in results.items():
        print(f"Plan {plan_number} execution: {'Successful' if success else 'Failed'}")
    print()

    # Example 4: Get and print results paths
    print("Example 5: Getting results paths")
    bald_eagle_results = RasPlan.get_results_path(new_bald_eagle_plan, ras_object=bald_eagle)
    muncie_results = RasPlan.get_results_path(new_muncie_plan, ras_object=muncie)

    if bald_eagle_results:
        print(f"Results for Bald Eagle Creek plan {new_bald_eagle_plan} are located at: {bald_eagle_results}")
    else:
        print(f"No results found for Bald Eagle Creek plan {new_bald_eagle_plan}")

    if muncie_results:
        print(f"Results for Muncie plan {new_muncie_plan} are located at: {muncie_results}")
    else:
        print(f"No results found for Muncie plan {new_muncie_plan}")

    print("\nNote: The original project folders can now be edited while the compute operations are running in separate folders.")

if __name__ == "__main__":
    main()
==================================================

File: c:\GH\ras-commander\examples\14_Core_Sensitivity.ipynb
==================================================
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#%pip install ras-commander pandas requests pathlib matplotlib"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 14_Core_Sensitivity.ipynb\n",
    "Testing Core Sensitivity for RAS using the Bald Eagle Creek Multi-Gage 2D project.  \n",
    "\n",
    "\n",
    "This should take around 15-45 minutes to run depending on your hardware."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "from pathlib import Path\n",
    "\n",
    "# Flexible imports to allow for development without installation\n",
    "try:\n",
    "    # Try to import from the installed package\n",
    "    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, RasHdf, ras\n",
    "except ImportError:\n",
    "    # If the import fails, add the parent directory to the Python path\n",
    "    import os\n",
    "    current_file = Path(os.getcwd()).resolve()\n",
    "    parent_directory = current_file.parent\n",
    "    sys.path.append(str(parent_directory))\n",
    "    \n",
    "    # Now try to import again\n",
    "    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, RasHdf, ras\n",
    "\n",
    "print(\"ras_commander imported successfully\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from pathlib import Path\n",
    "from ras_commander import RasExamples, init_ras_project, RasCmdr, RasPlan, RasGeo\n",
    "\n",
    "# Step 1: Initialize RasExamples and extract the BaldEagleCrkMulti2D project\n",
    "ras_examples = RasExamples()\n",
    "ras_examples.extract_project([\"BaldEagleCrkMulti2D\"])\n",
    "\n",
    "# Use Path.cwd() to get the current working directory in a Jupyter Notebook\n",
    "current_directory = Path.cwd()\n",
    "project_path = current_directory / \"example_projects\" / \"BaldEagleCrkMulti2D\"\n",
    "\n",
    "# Step 2: Initialize the Muncie Project using init_ras_project (from ras_commander)\n",
    "muncie_project = init_ras_project(project_path, \"6.6\")\n",
    "\n",
    "# Step 3: Initialize a DataFrame to store execution results\n",
    "results = []\n",
    "\n",
    "# Step 4: Run sensitivity analysis for Plan 03 with core counts 1-8\n",
    "plan_number = '03'\n",
    "print(f\"Running sensitivity analysis for Plan {plan_number}\")\n",
    "\n",
    "# Clear geompre files before running the plan\n",
    "plan_path = RasPlan.get_plan_path(plan_number)\n",
    "RasGeo.clear_geompre_files(plan_path)\n",
    "\n",
    "for cores in range(1, 9):\n",
    "    print(f\"Running with {cores} core(s)\")\n",
    "    # Set core count for this plan\n",
    "    RasPlan.set_num_cores(plan_number, cores)\n",
    "    \n",
    "    # Time the execution of the plan\n",
    "    start_time = time.time()\n",
    "    RasCmdr.compute_plan(plan_number)\n",
    "    execution_time = time.time() - start_time\n",
    "    \n",
    "    # Store the results\n",
    "    results.append({\n",
    "        \"plan_number\": plan_number,\n",
    "        \"cores\": cores,\n",
    "        \"execution_time\": execution_time\n",
    "    })\n",
    "    \n",
    "    print(f\"Execution time: {execution_time:.2f} seconds\")\n",
    "\n",
    "print(\"Sensitivity analysis complete\")\n",
    "\n",
    "# Step 5: Convert results into a DataFrame\n",
    "results_df = pd.DataFrame(results)\n",
    "\n",
    "# Optionally, save the results to a CSV file\n",
    "results_df.to_csv(\"core_sensitivity_results.csv\", index=False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "NOTES FOR REVISIONS:\n",
    "- Use HDF compute summary to show the time for each preproces/unsteady compute/postprocess step. \n",
    "- First, run preprocessor and then toggle options to only run unsteady compute and postprocess. \n",
    "- Plot each step separately. \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Optionally, load the results from a CSV file\n",
    "results_df = pd.read_csv(\"core_sensitivity_results.csv\")\n",
    "\n",
    "# Display the results dataframe for verification\n",
    "print(\"results_df DataFrame:\")\n",
    "display(results_df)\n",
    "\n",
    "# Step 6: Calculate unit runtime (based on 1 core execution time)\n",
    "results_df['unit_runtime'] = results_df.groupby('plan_number')['execution_time'].transform(lambda x: x / x.iloc[0])\n",
    "\n",
    "# Get the project name from the ras object\n",
    "project_name = ras.project_name\n",
    "\n",
    "# Step 7: Plot a line chart for unit runtime vs. cores for each plan\n",
    "plt.figure(figsize=(10, 6))\n",
    "for plan in results_df['plan_number'].unique():\n",
    "    plan_data = results_df[results_df['plan_number'] == plan]\n",
    "    plt.plot(plan_data['cores'], plan_data['unit_runtime'], label=f\"Plan {plan}\")\n",
    "\n",
    "plt.xlabel(\"Number of Cores\")\n",
    "plt.ylabel(\"Unit Runtime (Relative to 1 Core)\")\n",
    "plt.title(f\"{project_name} (HEC Example Project)\\nCore Count Sensitivity Analysis\")\n",
    "plt.legend(title=\"Plan Number\")\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    "\n",
    "# Print summary statistics\n",
    "print(\"\\nSummary Statistics:\")\n",
    "summary_stats = results_df.groupby('cores')['execution_time'].agg(['mean', 'min', 'max'])\n",
    "display(summary_stats)\n",
    "\n",
    "# Calculate and print speedup\n",
    "speedup = results_df[results_df['cores'] == 1]['execution_time'].mean() / results_df[results_df['cores'] == 8]['execution_time'].mean()\n",
    "print(f\"\\nAverage speedup from 1 to 8 cores: {speedup:.2f}x\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "releasecmdr311",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

==================================================

File: c:\GH\ras-commander\examples\15_plan_key_operations.py
==================================================
# 15_plan_key_operations.py

#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
from pathlib import Path
from datetime import datetime, timedelta

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras

# Extract specific projects
ras_examples = RasExamples()
ras_examples.extract_project(["Balde Eagle Creek"])

#### --- START OF SCRIPT --- ####

def main():
    # Initialize the project
    current_dir = Path(__file__).parent
    project_path = current_dir / "example_projects" / "Balde Eagle Creek"
    ras_obj = init_ras_project(project_path, "6.6")

    print("Example 15: Plan Key Operations")
    print("------------------------------------------")

    # Get the first plan number
    plan_number = ras_obj.plan_df['plan_number'].iloc[0]
    print(f"Working with Plan: {plan_number}")

    # 1. Get and print initial plan values
    keys_to_check = ['Computation Interval', 'Simulation Date', 'Short Identifier', 'UNET D1 Cores']
    print("\n1. Initial Plan Values:")
    for key in keys_to_check:
        value = RasPlan.get_plan_value(plan_number, key, ras_object=ras_obj)
        print(f"  {key}: {value}")

    # 2. Update run flags
    print("\n2. Updating Run Flags:")
    RasPlan.update_run_flags(
        plan_number,
        geometry_preprocessor=True,
        unsteady_flow_simulation=True,
        run_sediment=False,
        post_processor=True,
        floodplain_mapping=False,
        ras_object=ras_obj
    )
    print("  Run flags updated.")

    # 3. Update plan intervals
    print("\n3. Updating Plan Intervals:")
    RasPlan.update_plan_intervals(
        plan_number,
        computation_interval="5SEC",
        output_interval="1MIN",
        instantaneous_interval="5MIN",
        mapping_interval="15MIN",
        ras_object=ras_obj
    )
    print("  Plan intervals updated.")

    # 4. Update plan description
    
    print("\n4. Current Plan Description:")
    current_description = RasPlan.read_plan_description(plan_number, ras_object=ras_obj)
    print(f"  {current_description}")    
    print("\n4. Updating Plan Description:")
    new_description = "This is an updated plan description for testing purposes."
    RasPlan.update_plan_description(plan_number, new_description, ras_object=ras_obj)
    print("  Plan description updated.")

    # 5. Update simulation date
    print("\n5. Updating Simulation Date:")
    start_date = datetime.now()
    end_date = start_date + timedelta(days=1)
    RasPlan.update_simulation_date(plan_number, start_date, end_date, ras_object=ras_obj)
    print(f"  Simulation date updated to: {start_date} - {end_date}")

    # 6. Get and print updated plan values
    print("\n6. Updated Plan Values:")
    for key in keys_to_check:
        value = RasPlan.get_plan_value(plan_number, key, ras_object=ras_obj)
        print(f"  {key}: {value}")

    # 7. Get updated description
    print("\n7. Updated Plan Description:")
    updated_description = RasPlan.read_plan_description(plan_number, ras_object=ras_obj)
    print(f"  {updated_description}")

    print("\nExample 15 completed.")

if __name__ == "__main__":
    main()

==================================================

File: c:\GH\ras-commander\examples\16_scanning_ras_project_info.py
==================================================
import sys
from pathlib import Path

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    from ras_commander import init_ras_project, RasPrj, RasExamples
except ImportError:
    sys.path.append(str(parent_directory))
    from ras_commander import init_ras_project, RasPrj, RasExamples

import logging

def generate_category_summary(category_path):
    summary = []
    summary.append(f"RAS-Commander Example Projects Summary for Category: {category_path.name}\n")
    summary.append("=" * 80 + "\n\n")

    for project_path in category_path.iterdir():
        if project_path.is_dir():
            summary.append(f"Project Folder: {project_path.name}")
            summary.append(f"Full Path: {project_path.resolve()}\n")

            try:
                ras_project = init_ras_project(project_path, "6.6", ras_instance=RasPrj())
                
                summary.append(f"Project Name: {ras_project.get_project_name()}")
                summary.append(f"PRJ File: {ras_project.prj_file}")
                summary.append(f"RAS Executable: {ras_project.ras_exe_path}\n")

                summary.append("Plan Files:")
                summary.append(ras_project.plan_df.to_string())
                summary.append("\n")

                summary.append("Flow Files:")
                summary.append(ras_project.flow_df.to_string())
                summary.append("\n")

                summary.append("Geometry Files:")
                summary.append(ras_project.geom_df.to_string())
                summary.append("\n")

                summary.append("Unsteady Flow Files:")
                summary.append(ras_project.unsteady_df.to_string())
                summary.append("\n")

                summary.append("Boundary Conditions:")
                summary.append(ras_project.boundaries_df.to_string())
                summary.append("\n")

                # Add unparsed lines for each boundary condition
                summary.append("Unparsed Boundary Condition Lines:")
                for _, row in ras_project.boundaries_df.iterrows():
                    bc_number = row['boundary_condition_number']
                    unsteady_number = row['unsteady_number']
                    unparsed_lines = ras_project._parse_boundary_condition(
                        ras_project._get_boundary_condition_block(unsteady_number, bc_number),
                        unsteady_number,
                        bc_number
                    )[1]
                    if unparsed_lines:
                        summary.append(f"BC {bc_number} in Unsteady File {unsteady_number}:")
                        summary.append(unparsed_lines)
                        summary.append("\n")
                summary.append("\n")

            except Exception as e:
                summary.append(f"Error initializing RAS project: {str(e)}\n")

            summary.append("-" * 80 + "\n\n")

    return "\n".join(summary)

def main():
    # Set logging level to DEBUG to capture unparsed lines
    logging.getLogger().setLevel(logging.DEBUG)

    ras_examples = RasExamples()
    selected_categories = ["1D Unsteady Flow Hydraulics", "2D Unsteady Flow Hydraulics"]

    base_dir = Path.cwd() / "ras_example_categories"
    base_dir.mkdir(exist_ok=True)

    for category in selected_categories:
        category_dir = base_dir / category
        category_dir.mkdir(exist_ok=True)

        projects = ras_examples.list_projects(category)
        extracted_paths = ras_examples.extract_project(projects)

        # Move extracted projects to the category directory
        for path in extracted_paths:
            new_path = category_dir / path.name
            path.rename(new_path)

        # Generate and save summary for this category
        summary_text = generate_category_summary(category_dir)
        output_file = base_dir / f"ras-commander {category} summary.txt"
        with open(output_file, "w") as f:
            f.write(summary_text)

        print(f"Summary for category '{category}' has been written to: {output_file}")

    print("All category summaries have been generated.")

    # Clean up extracted projects
    ras_examples.clean_projects_directory()
    print("Cleaned up original extracted example projects.")

if __name__ == "__main__":
    main()
==================================================

File: c:\GH\ras-commander\examples\17_parallel_execution_ble.py
==================================================
#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
from pathlib import Path
import shutil
import psutil
import math
import logging

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, RasPrj
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, RasPrj

# Configure logging
logging.basicConfig(
    level=logging.INFO,  # Set the logging level to INFO
    format='%(asctime)s - %(levelname)s - %(message)s',  # Log message format
    handlers=[
        logging.StreamHandler()  # Log to stderr
    ]
)

# Initialize RasExamples
ras_examples = RasExamples()

#### --- START OF SCRIPT --- ####

# ras-commander Library Notes:
# 1. This example uses separate RasPrj objects for each project/folder.
# 2. Using separate RasPrj objects allows working with multiple projects or folders.
# 3. We'll create new RasPrj objects for the original project and each output folder.
# 4. For functions that do batched execution (sequential or parallel), they are careful not to overwrite existing folders.
# 5. If you want your script to be repeatable, make sure to delete the folders before running again.

# Best Practices:
# 1. For complex scripts or when working with multiple projects/folders, create and use separate RasPrj objects.
# 2. Be consistent in your approach: use non-global RasPrj objects throughout the script.
# 3. When using parallel execution, consider the number of cores available on your machine.
# 4. Use the dest_folder argument to keep your project folder clean and organized.

##  WHISKY CHITTO DOES NOT WORK - BLE MODEL IS BROKEN AND REQUIRED FIXING BEFORE RUNNING

def get_physical_core_count():
    return psutil.cpu_count(logical=False)

def main():
    # Define paths
    current_dir = Path(__file__).parent
    csv_directory = current_dir / "FEMA_BLE_Models"
    csv_file = csv_directory / "08080204_WhiskyChitto_DownloadIndex.csv"
    
    # Download FEMA BLE Models (specifically WhiskyChitto)
    ras_examples.download_fema_ble_model(csv_file=csv_file)
    
    
    # Initialize the RasPrj object for WhiskyChitto
    project_path = csv_directory / "WhiskyChitto" / "HECRAS_Models" / "Model" / "Input"
    logging.info(f"Initializing RasPrj for project at: {project_path}")
    whisky_project = init_ras_project(project_path, "5.0.7")
    
    print("Available plans:")
    print(whisky_project.plan_df)
    print()
    
    # Example 1: Parallel execution of all plans with overwrite_dest
    print("Example 1: Parallel execution of all plans with overwrite_dest")
    compute_folder = project_path.parent / "compute_test_parallel_whisky"
    results_all = RasCmdr.compute_parallel(
        max_workers=2,
        num_cores=2,
        dest_folder=compute_folder,
        overwrite_dest=True,
        ras_object=whisky_project
    )
    print("Parallel execution of all plans results:")
    for plan_number, success in results_all.items():
        print(f"Plan {plan_number}: {'Successful' if success else 'Failed'}")
    print()
    
    # Initialize a new RasPrj object for the compute_folder
    compute_source_project = init_ras_project(compute_folder, "6.6")
    print("Plan DataFrame after parallel execution of all plans:")
    print(compute_source_project.plan_df)
    print()
    
    # Example 2: Parallel execution of specific plans with overwrite_dest
    print("Example 2: Parallel execution of specific plans with overwrite_dest")
    specific_plans = ["01", "02"]
    specific_compute_folder = project_path.parent / "compute_test_parallel_specific_whisky"
    results_specific = RasCmdr.compute_parallel(
        plan_number=specific_plans,
        max_workers=2,
        num_cores=2,
        dest_folder=specific_compute_folder,
        overwrite_dest=True,
        ras_object=whisky_project
    )
    print("Parallel execution of specific plans results:")
    for plan_number, success in results_specific.items():
        print(f"Plan {plan_number}: {'Successful' if success else 'Failed'}")
    print()
    
    # Example 3: Parallel execution with dynamic max_workers based on physical cores
    print("Example 3: Parallel execution with dynamic max_workers")
    num_cores = 2
    physical_cores = get_physical_core_count()
    max_workers = math.floor(physical_cores / num_cores) if num_cores > 0 else 1
    
    dynamic_compute_folder = project_path.parent / "compute_test_parallel_dynamic_whisky"
    results_dynamic = RasCmdr.compute_parallel(
        max_workers=max_workers,
        num_cores=num_cores,
        dest_folder=dynamic_compute_folder,
        overwrite_dest=True,
        ras_object=whisky_project
    )
    print(f"Parallel execution with {max_workers} workers and {num_cores} cores per worker:")
    for plan_number, success in results_dynamic.items():
        print(f"Plan {plan_number}: {'Successful' if success else 'Failed'}")
    print()
    
    # Get and print results paths
    print("Results paths for dynamic execution:")
    dynamic_compute_source_project = init_ras_project(dynamic_compute_folder, "6.6")
    print(dynamic_compute_source_project.plan_df)

if __name__ == "__main__":
    main()


==================================================

File: c:\GH\ras-commander\examples\18_benchmarking_version_6.6.ipynb
==================================================
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "from pathlib import Path\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from concurrent.futures import ThreadPoolExecutor, as_completed\n",
    "from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasHdf, RasUtils"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define versions to compare\n",
    "versions = ['6.6', '6.5', '6.4.1', '6.3.1', '6.2', '6.1', '5.0.7']\n",
    "\n",
    "# Extract BaldEagleCrkMulti2D project\n",
    "ras_examples = RasExamples()\n",
    "project_path = ras_examples.extract_project([\"BaldEagleCrkMulti2D\"])[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get all plan numbers\n",
    "ras_project = init_ras_project(project_path, \"6.5\")\n",
    "print(ras_project)\n",
    "plan_numbers = ras_project.plan_df['plan_number'].tolist()\n",
    "print(plan_numbers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "from ras_commander import RasGeo\n",
    "\n",
    "def run_simulation(version, plan_number):\n",
    "    # Initialize project for the specific version\n",
    "    ras_project = init_ras_project(project_path, str(version))\n",
    "    \n",
    "    # Clear geometry preprocessor files\n",
    "    plan_path = RasPlan.get_plan_path(plan_number, ras_object=ras_project)\n",
    "    RasGeo.clear_geompre_files(plan_path, ras_object=ras_project)\n",
    "    \n",
    "    # Set number of cores to 6\n",
    "    RasPlan.set_num_cores(plan_number, \"6\", ras_object=ras_project)\n",
    "    \n",
    "    # Ensure geometry preprocessing is done\n",
    "    RasPlan.update_plan_value(plan_number, \"Run HTab\", 1, ras_object=ras_project)\n",
    "    \n",
    "    # Compute the plan\n",
    "    start_time = time.time()\n",
    "    success = RasCmdr.compute_plan(plan_number, ras_object=ras_project)\n",
    "    total_time = time.time() - start_time\n",
    "    \n",
    "    if success:\n",
    "        # Get HDF file path\n",
    "        hdf_path = RasPlan.get_results_path(plan_number, ras_object=ras_project)\n",
    "        \n",
    "        # Extract data from HDF file\n",
    "        runtime_data = RasHdf.get_runtime_data(hdf_path, ras_object=ras_project)\n",
    "        \n",
    "        # Extract required information\n",
    "        preprocessor_time = runtime_data['Preprocessing Geometry (hr)'].values[0]\n",
    "        unsteady_compute_time = runtime_data['Unsteady Flow Computations (hr)'].values[0]\n",
    "        \n",
    "        # Get volume accounting data\n",
    "        volume_accounting = RasHdf.get_group_attributes_as_df(hdf_path, \"Results/Unsteady/Summary/Volume Accounting/Volume Accounting 2D\", ras_object=ras_project)\n",
    "        volume_error = volume_accounting['Volume Error (%)'].values[0]\n",
    "        \n",
    "        return {\n",
    "            'Version': version,\n",
    "            'Plan': plan_number,\n",
    "            'Preprocessor Time (hr)': preprocessor_time,\n",
    "            'Unsteady Compute Time (hr)': unsteady_compute_time,\n",
    "            'Volume Error (%)': volume_error,\n",
    "            'Total Time (hr)': total_time / 3600  # Convert seconds to hours\n",
    "        }\n",
    "    else:\n",
    "        return None\n",
    "\n",
    "\n",
    "# Run simulations for all versions and plans sequentially\n",
    "results = []\n",
    "for version in versions:\n",
    "    for plan in plan_numbers:\n",
    "        print(f\"Running simulation for Version {version}, Plan {plan}\")\n",
    "        result = run_simulation(version, plan)\n",
    "        if result:\n",
    "            results.append(result)\n",
    "            print(f\"Completed: Version {version}, Plan {plan}\")\n",
    "        else:\n",
    "            print(f\"Failed: Version {version}, Plan {plan}\")\n",
    "\n",
    "# Create DataFrame from results\n",
    "df = pd.DataFrame(results)\n",
    "\n",
    "# Save initial results to CSV\n",
    "df.to_csv('save_initial_results.csv', index=False)\n",
    "\n",
    "print(\"Initial results saved to 'save_initial_results.csv'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate averages across plans for each version\n",
    "df_avg = df.groupby('Version').mean().reset_index()\n",
    "\n",
    "# Create line graphs\n",
    "plt.figure(figsize=(12, 6))\n",
    "\n",
    "# Unsteady Runtime vs Version\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(df_avg['Version'], df_avg['Unsteady Compute Time (hr)'], marker='o')\n",
    "plt.title('Average Unsteady Runtime vs HEC-RAS Version')\n",
    "plt.xlabel('HEC-RAS Version')\n",
    "plt.ylabel('Unsteady Runtime (hours)')\n",
    "\n",
    "# Volume Error vs Version\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(df_avg['Version'], df_avg['Volume Error (%)'], marker='o')\n",
    "plt.title('Average Volume Error vs HEC-RAS Version')\n",
    "plt.xlabel('HEC-RAS Version')\n",
    "plt.ylabel('Volume Error (%)')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Save results to CSV\n",
    "df.to_csv('hecras_version_comparison.csv', index=False)\n",
    "df_avg.to_csv('hecras_version_comparison_averages.csv', index=False)\n",
    "\n",
    "print(\"Results saved to 'hecras_version_comparison.csv' and 'hecras_version_comparison_averages.csv'\")\n",
    "print(\"Graphs have been displayed. Please check the output.\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "fffff",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

==================================================

File: c:\GH\ras-commander\examples\19_1d_hdf_data_extraction.ipynb
==================================================
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# HEC-RAS 1D HDF Data Analysis Notebook\n",
    "\n",
    "This notebook demonstrates how to manipulate and analyze HEC-RAS 2D HDF data using the ras-commander library. It leverages the HdfBase, HdfUtils, HdfStruc, HdfMesh, HdfXsec, HdfBndry, HdfPlan, HdfResultsPlan, HdfResultsMesh, and HdfResultsXsec classes to streamline data extraction, processing, and visualization.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ras-commander not found. Installing...\n"
     ]
    }
   ],
   "source": [
    "# Import required Libraries\n",
    "import subprocess\n",
    "import sys\n",
    "import os\n",
    "from pathlib import Path\n",
    "\n",
    "def install_module(module_name):\n",
    "    try:\n",
    "        __import__(module_name)\n",
    "    except ImportError:\n",
    "        print(f\"{module_name} not found. Installing...\")\n",
    "        subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", \"-U\", module_name])\n",
    "\n",
    "# List of modules to check and install if necessary\n",
    "modules = ['h5py', 'numpy', 'requests', 'geopandas', 'matplotlib', 'pandas', 'pyproj', 'shapely', 'xarray','rtree', 'rasterstats', 'tqdm', 'ras-commander']\n",
    "for module in modules:\n",
    "    install_module(module)\n",
    "\n",
    "# Import the rest of the required libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import geopandas as gpd\n",
    "import matplotlib.pyplot as plt\n",
    "import pyproj\n",
    "from shapely.geometry import Point, LineString, Polygon\n",
    "import xarray as xr\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Install ras-commander if you are not in a dev environment. \n",
    "# install_module(ras-commander)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Importing ras-commander flexibly (from package or local dev copy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ras_commander imported successfully\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "from pathlib import Path\n",
    "\n",
    "# Flexible imports to allow for development without installation \n",
    "#  ** Use this version with Jupyter Notebooks **\n",
    "try:\n",
    "    # Try to import from the installed package\n",
    "    from ras_commander import (init_ras_project, HdfBase, HdfUtils, HdfFluvialPluvial, HdfStruc, HdfMesh, HdfXsec, HdfBndry, HdfPlan, HdfResultsPlan, HdfResultsMesh, HdfResultsXsec, HdfPipe, HdfPump, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, RasPrj, RasGpt, ras)\n",
    "    from ras_commander.Decorators import standardize_input, log_call\n",
    "    from ras_commander.LoggingConfig import setup_logging, get_logger\n",
    "except ImportError:\n",
    "    # If the import fails, add the parent directory to the Python path\n",
    "    print(\"Using Local ras-commander dev libraries\")\n",
    "    import os\n",
    "    current_file = Path(os.getcwd()).resolve()\n",
    "    parent_directory = current_file.parent\n",
    "    sys.path.append(str(parent_directory))\n",
    "    \n",
    "    # Now try to import again\n",
    "    from ras_commander import (init_ras_project, HdfBase, HdfUtils, HdfFluvialPluvial, HdfStruc, HdfMesh, HdfXsec, HdfBndry, HdfPlan, HdfResultsPlan, HdfResultsMesh, HdfResultsXsec, HdfPipe, HdfPump, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, RasPrj, RasGpt, ras)\n",
    "    from ras_commander.Decorators import standardize_input, log_call\n",
    "    from ras_commander.LoggingConfig import setup_logging, get_logger\n",
    "\n",
    "print(\"ras_commander imported successfully\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:56:30,375 - ras_commander.RasExamples - INFO - Example projects folder: c:\\GH\\ras-commander\\examples\\example_projects\n",
      "2024-11-15 07:56:30,378 - ras_commander.RasExamples - WARNING - No existing example projects zip file found.\n",
      "2024-11-15 07:56:30,379 - ras_commander.RasExamples - INFO - No example projects zip file found. Downloading...\n",
      "2024-11-15 07:56:30,379 - ras_commander.RasExamples - INFO - Getting example projects for version 6.6\n",
      "2024-11-15 07:56:30,381 - ras_commander.RasExamples - INFO - Downloading HEC-RAS Example Projects from https://github.com/HydrologicEngineeringCenter/hec-downloads/releases/download/1.0.33/Example_Projects_6_6.zip. \n",
      "The file is over 400 MB, so it may take a few minutes to download....\n",
      "2024-11-15 07:56:39,274 - ras_commander.RasExamples - INFO - Downloaded to c:\\GH\\ras-commander\\examples\\Example_Projects_6_6.zip\n",
      "2024-11-15 07:56:39,275 - ras_commander.RasExamples - INFO - Found zip file: c:\\GH\\ras-commander\\examples\\Example_Projects_6_6.zip\n",
      "2024-11-15 07:56:39,277 - ras_commander.RasExamples - INFO - Extracting folder structure from zip file...\n",
      "2024-11-15 07:56:39,309 - ras_commander.RasExamples - INFO - Extracted 68 projects.\n",
      "2024-11-15 07:56:39,322 - ras_commander.RasExamples - INFO - Saved project data to c:\\GH\\ras-commander\\examples\\example_projects.csv\n",
      "2024-11-15 07:56:39,325 - ras_commander.RasExamples - INFO - Loading project data from CSV...\n",
      "2024-11-15 07:56:39,330 - ras_commander.RasExamples - INFO - Loaded 68 projects from CSV. Use list_categories() and list_projects() to explore them.\n",
      "2024-11-15 07:56:39,331 - ras_commander.RasExamples - INFO - ----- RasExamples Extracting Project -----\n",
      "2024-11-15 07:56:39,331 - ras_commander.RasExamples - INFO - Extracting project 'Balde Eagle Creek'\n",
      "2024-11-15 07:56:39,437 - ras_commander.RasExamples - INFO - Successfully extracted project 'Balde Eagle Creek' to c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n",
      "2024-11-15 07:56:39,439 - ras_commander.RasExamples - INFO - ----- RasExamples Extraction Complete -----\n",
      "2024-11-15 07:56:39,441 - ras_commander.RasPrj - INFO - Calling init_ras_project\n",
      "2024-11-15 07:56:39,442 - ras_commander.RasPrj - INFO - Calling get_ras_exe\n",
      "2024-11-15 07:56:39,444 - ras_commander.RasPrj - INFO - HEC-RAS executable found at default path: C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\n",
      "2024-11-15 07:56:39,444 - ras_commander.RasPrj - INFO - Finished get_ras_exe\n",
      "2024-11-15 07:56:39,445 - ras_commander.RasPrj - INFO - Calling initialize\n",
      "2024-11-15 07:56:39,446 - ras_commander.RasPrj - INFO - Calling find_ras_prj\n",
      "2024-11-15 07:56:39,451 - ras_commander.RasPrj - INFO - Finished find_ras_prj\n",
      "2024-11-15 07:56:39,452 - ras_commander.RasPrj - INFO - Calling _load_project_data\n",
      "2024-11-15 07:56:39,465 - ras_commander.RasPrj - INFO - Calling get_geom_entries\n",
      "2024-11-15 07:56:39,472 - ras_commander.RasPrj - INFO - Found 1 geometry entries\n",
      "2024-11-15 07:56:39,473 - ras_commander.RasPrj - INFO - Finished get_geom_entries\n",
      "2024-11-15 07:56:39,477 - ras_commander.RasPrj - INFO - Finished _load_project_data\n",
      "2024-11-15 07:56:39,478 - ras_commander.RasPrj - INFO - Calling get_boundary_conditions\n",
      "2024-11-15 07:56:39,487 - ras_commander.RasPrj - INFO - Finished get_boundary_conditions\n",
      "2024-11-15 07:56:39,488 - ras_commander.RasPrj - INFO - Initialization complete for project: BaldEagle\n",
      "2024-11-15 07:56:39,489 - ras_commander.RasPrj - INFO - Plan entries: 2, Flow entries: 2, Unsteady entries: 1, Geometry entries: 1, Boundary conditions: 3\n",
      "2024-11-15 07:56:39,491 - ras_commander.RasPrj - INFO - Geometry HDF files found: 2\n",
      "2024-11-15 07:56:39,492 - ras_commander.RasPrj - INFO - Finished initialize\n",
      "2024-11-15 07:56:39,493 - ras_commander.RasPrj - INFO - Project initialized. ras_instance project folder: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n",
      "2024-11-15 07:56:39,493 - ras_commander.RasPrj - INFO - Finished init_ras_project\n",
      "2024-11-15 07:56:39,494 - root - INFO - Balde Eagle project initialized with folder: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n",
      "2024-11-15 07:56:39,495 - root - INFO - Balde Eagle object id: 2668679124240\n",
      "2024-11-15 07:56:39,496 - ras_commander.RasCmdr - INFO - Calling compute_plan\n",
      "2024-11-15 07:56:39,497 - ras_commander.RasCmdr - INFO - Using ras_object with project folder: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\n",
      "2024-11-15 07:56:39,498 - ras_commander.RasPrj - INFO - Calling check_initialized\n",
      "2024-11-15 07:56:39,499 - ras_commander.RasPrj - INFO - Finished check_initialized\n",
      "2024-11-15 07:56:39,500 - ras_commander.RasPlan - INFO - Calling get_plan_path\n",
      "2024-11-15 07:56:39,501 - ras_commander.RasPrj - INFO - Calling check_initialized\n",
      "2024-11-15 07:56:39,502 - ras_commander.RasPrj - INFO - Finished check_initialized\n",
      "2024-11-15 07:56:39,503 - ras_commander.RasPrj - INFO - Calling get_plan_entries\n",
      "2024-11-15 07:56:39,505 - ras_commander.RasPrj - INFO - Calling check_initialized\n",
      "2024-11-15 07:56:39,506 - ras_commander.RasPrj - INFO - Finished check_initialized\n",
      "2024-11-15 07:56:39,513 - ras_commander.RasPrj - INFO - Finished get_plan_entries\n",
      "2024-11-15 07:56:39,515 - ras_commander.RasPlan - INFO - Finished get_plan_path\n",
      "2024-11-15 07:56:39,517 - ras_commander.RasCmdr - INFO - Running HEC-RAS from the Command Line:\n",
      "2024-11-15 07:56:39,518 - ras_commander.RasCmdr - INFO - Running command: \"C:\\Program Files (x86)\\HEC\\HEC-RAS\\6.6\\Ras.exe\" -c \"C:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.prj\" \"c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01\"\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Executing Plan 01 for the Bald Eagle Creek project...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:42,598 - ras_commander.RasCmdr - INFO - HEC-RAS execution completed for plan: 01\n",
      "2024-11-15 07:59:42,599 - ras_commander.RasCmdr - INFO - Total run time for plan 01: 183.08 seconds\n",
      "2024-11-15 07:59:42,600 - ras_commander.RasPrj - INFO - Calling get_plan_entries\n",
      "2024-11-15 07:59:42,600 - ras_commander.RasPrj - INFO - Calling check_initialized\n",
      "2024-11-15 07:59:42,601 - ras_commander.RasPrj - INFO - Finished check_initialized\n",
      "2024-11-15 07:59:42,604 - ras_commander.RasPrj - INFO - Finished get_plan_entries\n",
      "2024-11-15 07:59:42,605 - ras_commander.RasPrj - INFO - Calling get_geom_entries\n",
      "2024-11-15 07:59:42,607 - ras_commander.RasPrj - INFO - Found 1 geometry entries\n",
      "2024-11-15 07:59:42,608 - ras_commander.RasPrj - INFO - Finished get_geom_entries\n",
      "2024-11-15 07:59:42,608 - ras_commander.RasPrj - INFO - Calling get_flow_entries\n",
      "2024-11-15 07:59:42,609 - ras_commander.RasPrj - INFO - Calling check_initialized\n",
      "2024-11-15 07:59:42,609 - ras_commander.RasPrj - INFO - Finished check_initialized\n",
      "2024-11-15 07:59:42,611 - ras_commander.RasPrj - INFO - Finished get_flow_entries\n",
      "2024-11-15 07:59:42,611 - ras_commander.RasPrj - INFO - Calling get_unsteady_entries\n",
      "2024-11-15 07:59:42,612 - ras_commander.RasPrj - INFO - Calling check_initialized\n",
      "2024-11-15 07:59:42,612 - ras_commander.RasPrj - INFO - Finished check_initialized\n",
      "2024-11-15 07:59:42,615 - ras_commander.RasPrj - INFO - Finished get_unsteady_entries\n",
      "2024-11-15 07:59:42,616 - ras_commander.RasCmdr - INFO - Finished compute_plan\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Plan 01 executed successfully for Bald Eagle.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Download the BaldEagleCrkMulti2D project from HEC and run plan 01\n",
    "\n",
    "# Define the path to the BaldEagleCrkMulti2D project\n",
    "current_dir = Path.cwd()  # Adjust if your notebook is in a different directory\n",
    "bald_eagle_path = current_dir / \"example_projects\" / \"Balde Eagle Creek\"\n",
    "import logging\n",
    "\n",
    "# Check if BaldEagleCrkMulti2D.p06.hdf exists (so we don't have to re-run the simulation when re-running or debugging)\n",
    "hdf_file = bald_eagle_path / \"BaldEagle.p01.hdf\"\n",
    "\n",
    "if not hdf_file.exists():\n",
    "    # Initialize RasExamples and extract the BaldEagleCrkMulti2D project\n",
    "    ras_examples = RasExamples()\n",
    "    ras_examples.extract_project([\"Balde Eagle Creek\"])\n",
    "\n",
    "    # Initialize custom Ras object\n",
    "    bald_eagle = RasPrj()\n",
    "\n",
    "    # Initialize the RAS project using the custom ras object\n",
    "    bald_eagle = init_ras_project(bald_eagle_path, \"6.6\", ras_instance=bald_eagle)\n",
    "    logging.info(f\"Balde Eagle project initialized with folder: {bald_eagle.project_folder}\")\n",
    "    \n",
    "    logging.info(f\"Balde Eagle object id: {id(bald_eagle)}\")\n",
    "    \n",
    "    # Define the plan number to execute\n",
    "    plan_number = \"01\"\n",
    "\n",
    "    # Execute Plan 06 using RasCmdr for Bald Eagle\n",
    "    print(f\"Executing Plan {plan_number} for the Bald Eagle Creek project...\")\n",
    "    success_bald_eagle = RasCmdr.compute_plan(plan_number, ras_object=bald_eagle)\n",
    "    if success_bald_eagle:\n",
    "        print(f\"Plan {plan_number} executed successfully for Bald Eagle.\\n\")\n",
    "    else:\n",
    "        print(f\"Plan {plan_number} execution failed for Bald Eagle.\\n\")\n",
    "else:\n",
    "    print(\"BaldEagle.p01.hdf already exists. Skipping project extraction and plan execution.\")\n",
    "    # Initialize the RAS project using the custom ras object\n",
    "    bald_eagle = RasPrj()\n",
    "    bald_eagle = init_ras_project(bald_eagle_path, \"6.6\", ras_instance=bald_eagle)\n",
    "    plan_number = \"01\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Plan DataFrame for bald_eagle project:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>plan_number</th>\n",
       "      <th>full_path</th>\n",
       "      <th>Computation Interval</th>\n",
       "      <th>DSS File</th>\n",
       "      <th>Flow File</th>\n",
       "      <th>Friction Slope Method</th>\n",
       "      <th>Geom File</th>\n",
       "      <th>Mapping Interval</th>\n",
       "      <th>Plan Title</th>\n",
       "      <th>Program Version</th>\n",
       "      <th>Run HTab</th>\n",
       "      <th>Run PostProcess</th>\n",
       "      <th>Run Sediment</th>\n",
       "      <th>Run UNet</th>\n",
       "      <th>Run WQNet</th>\n",
       "      <th>Short Identifier</th>\n",
       "      <th>Simulation Date</th>\n",
       "      <th>UNET D1 Cores</th>\n",
       "      <th>UNET Use Existing IB Tables</th>\n",
       "      <th>HDF_Results_Path</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>01</td>\n",
       "      <td>c:\\GH\\ras-commander\\examples\\example_projects\\...</td>\n",
       "      <td>2MIN</td>\n",
       "      <td>dss</td>\n",
       "      <td>u02</td>\n",
       "      <td>2</td>\n",
       "      <td>g01</td>\n",
       "      <td>1HOUR</td>\n",
       "      <td>Unsteady with Bridges and Dam</td>\n",
       "      <td>5.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>UnsteadyFlow</td>\n",
       "      <td>18FEB1999,0000,24FEB1999,0500</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>c:\\GH\\ras-commander\\examples\\example_projects\\...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>02</td>\n",
       "      <td>c:\\GH\\ras-commander\\examples\\example_projects\\...</td>\n",
       "      <td>2MIN</td>\n",
       "      <td>dss</td>\n",
       "      <td>f02</td>\n",
       "      <td>1</td>\n",
       "      <td>g01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Steady Flow Run</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>SteadyRun</td>\n",
       "      <td>02/18/1999,0000,02/24/1999,0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  plan_number                                          full_path  \\\n",
       "0          01  c:\\GH\\ras-commander\\examples\\example_projects\\...   \n",
       "1          02  c:\\GH\\ras-commander\\examples\\example_projects\\...   \n",
       "\n",
       "  Computation Interval DSS File Flow File Friction Slope Method Geom File  \\\n",
       "0                 2MIN      dss       u02                     2       g01   \n",
       "1                 2MIN      dss       f02                     1       g01   \n",
       "\n",
       "  Mapping Interval                     Plan Title Program Version Run HTab  \\\n",
       "0            1HOUR  Unsteady with Bridges and Dam            5.00        1   \n",
       "1              NaN                Steady Flow Run             NaN        1   \n",
       "\n",
       "  Run PostProcess Run Sediment Run UNet Run WQNet Short Identifier  \\\n",
       "0               1            0        1         0     UnsteadyFlow   \n",
       "1               1          NaN        1       NaN        SteadyRun   \n",
       "\n",
       "                   Simulation Date UNET D1 Cores UNET Use Existing IB Tables  \\\n",
       "0    18FEB1999,0000,24FEB1999,0500             0                          -1   \n",
       "1  02/18/1999,0000,02/24/1999,0500           NaN                         NaN   \n",
       "\n",
       "                                    HDF_Results_Path  \n",
       "0  c:\\GH\\ras-commander\\examples\\example_projects\\...  \n",
       "1                                               None  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Geometry DataFrame for bald_eagle project:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>geom_file</th>\n",
       "      <th>geom_number</th>\n",
       "      <th>full_path</th>\n",
       "      <th>hdf_path</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>g01</td>\n",
       "      <td>01</td>\n",
       "      <td>c:\\GH\\ras-commander\\examples\\example_projects\\...</td>\n",
       "      <td>c:\\GH\\ras-commander\\examples\\example_projects\\...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  geom_file geom_number                                          full_path  \\\n",
       "0       g01          01  c:\\GH\\ras-commander\\examples\\example_projects\\...   \n",
       "\n",
       "                                            hdf_path  \n",
       "0  c:\\GH\\ras-commander\\examples\\example_projects\\...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Plan HDF path for Plan 01: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n",
      "Geometry HDF path for Plan 01: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n"
     ]
    }
   ],
   "source": [
    "# Load Plan and Geometry Dataframes and find Plan and Geometry HDF Paths\n",
    "\n",
    "# Display plan_df for bald_eagle project\n",
    "print(\"Plan DataFrame for bald_eagle project:\")\n",
    "display(bald_eagle.plan_df)\n",
    "\n",
    "# Display geom_df for bald_eagle project\n",
    "print(\"\\nGeometry DataFrame for bald_eagle project:\")\n",
    "display(bald_eagle.geom_df)\n",
    "\n",
    "# Get the plan HDF path\n",
    "plan_number = \"01\"  # Assuming we're using plan 01 as in the previous code\n",
    "plan_hdf_path = bald_eagle.plan_df.loc[bald_eagle.plan_df['plan_number'] == plan_number, 'HDF_Results_Path'].values[0]\n",
    "\n",
    "# Get the geometry file number from the plan DataFrame\n",
    "geom_file = bald_eagle.plan_df.loc[bald_eagle.plan_df['plan_number'] == plan_number, 'Geom File'].values[0]\n",
    "geom_number = geom_file[1:]  # Remove the 'g' prefix\n",
    "\n",
    "# Get the geometry HDF path\n",
    "geom_hdf_path = bald_eagle.geom_df.loc[bald_eagle.geom_df['geom_number'] == geom_number, 'hdf_path'].values[0]\n",
    "\n",
    "print(f\"\\nPlan HDF path for Plan {plan_number}: {plan_hdf_path}\")\n",
    "print(f\"Geometry HDF path for Plan {plan_number}: {geom_hdf_path}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-----"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "RasHdfUtils\n",
    "| Method Name | Description |\n",
    "|-------------|-------------|\n",
    "| get_attrs | Converts attributes from a HEC-RAS HDF file into a Python dictionary for a given attribute path |\n",
    "| get_root_attrs | Returns attributes at root level of HEC-RAS HDF file |\n",
    "| get_hdf_paths_with_properties | Gets all paths in the HDF file with their properties |\n",
    "| get_group_attributes_as_df | Gets attributes of a group in the HDF file as a DataFrame |\n",
    "| get_hdf_filename | Gets the HDF filename from various input types |\n",
    "| get_runtime_data | Extracts runtime and compute time data from a single HDF file |\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:42,656 - ras_commander.HdfBase - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Exploring group: /Geometry\n",
      "\n",
      "\n",
      "    Group: /Geometry/Cross Section Interpolation Surfaces\n",
      "    Attributes for /Geometry/Cross Section Interpolation Surfaces:\n",
      "        Source Data Hash: [ 46 112  52  16   5 200 220 211  87  93 123 191 139  18 138 156 167   1\n",
      "   2 140 201  58 178 145 110  17 213 166 178 174  73 200]\n",
      "        Dataset: /Geometry/Cross Section Interpolation Surfaces/Areas\n",
      "            Shape: (177,)\n",
      "            Dtype: float32\n",
      "        Dataset: /Geometry/Cross Section Interpolation Surfaces/Bounding Lines\n",
      "            Shape: (177, 4)\n",
      "            Dtype: int32\n",
      "    Attributes for /Geometry/Cross Section Interpolation Surfaces/Bounding Lines:\n",
      "        Column: [b'Left Bankline FID' b'Right Bankline FID' b'Left Edgeline FID'\n",
      " b'Right Edgeline FID']\n",
      "        Row: b'Feature'\n",
      "        Dataset: /Geometry/Cross Section Interpolation Surfaces/Orthogonal Vectors\n",
      "            Shape: (177, 2)\n",
      "            Dtype: float32\n",
      "        Dataset: /Geometry/Cross Section Interpolation Surfaces/TIN Info\n",
      "            Shape: (177, 4)\n",
      "            Dtype: int32\n",
      "    Attributes for /Geometry/Cross Section Interpolation Surfaces/TIN Info:\n",
      "        Column: [b'Point Starting Index' b'Point Count' b'Triangle Starting Index'\n",
      " b'Triangle Count']\n",
      "        Feature Type: b'TIN'\n",
      "        Row: b'Feature'\n",
      "        Dataset: /Geometry/Cross Section Interpolation Surfaces/TIN Points\n",
      "            Shape: (8614, 4)\n",
      "            Dtype: float64\n",
      "    Attributes for /Geometry/Cross Section Interpolation Surfaces/TIN Points:\n",
      "        Column: [b'X' b'Y' b'Z' b'M']\n",
      "        Row: b'Points'\n",
      "        Dataset: /Geometry/Cross Section Interpolation Surfaces/TIN Triangles\n",
      "            Shape: (12751, 3)\n",
      "            Dtype: int32\n",
      "    Attributes for /Geometry/Cross Section Interpolation Surfaces/TIN Triangles:\n",
      "        Column: [b'Index0' b'Index1' b'Index2']\n",
      "        Row: b'Row'\n",
      "        Dataset: /Geometry/Cross Section Interpolation Surfaces/XSIDs\n",
      "            Shape: (177, 2)\n",
      "            Dtype: int32\n",
      "    Attributes for /Geometry/Cross Section Interpolation Surfaces/XSIDs:\n",
      "        Column: [b'USXSID' b'DSXSID']\n",
      "        Row: b'Feature'\n",
      "\n",
      "    Group: /Geometry/Cross Sections\n",
      "        Dataset: /Geometry/Cross Sections/Attributes\n",
      "            Shape: (178,)\n",
      "            Dtype: [('River', 'S16'), ('Reach', 'S16'), ('RS', 'S8'), ('Name', 'S16'), ('Description', 'S512'), ('Len Left', '<f4'), ('Len Channel', '<f4'), ('Len Right', '<f4'), ('Left Bank', '<f4'), ('Right Bank', '<f4'), ('Friction Mode', 'S32'), ('Contr', '<f4'), ('Expan', '<f4'), ('Left Levee Sta', '<f4'), ('Left Levee Elev', '<f4'), ('Right Levee Sta', '<f4'), ('Right Levee Elev', '<f4'), ('HP Count', '<i4'), ('HP Start Elev', '<f4'), ('HP Vert Incr', '<f4'), ('HP LOB Slices', '<i4'), ('HP Chan Slices', '<i4'), ('HP ROB Slices', '<i4'), ('Ineff Block Mode', 'u1'), ('Obstr Block Mode', 'u1'), ('Default Centerline', 'u1'), ('Last Edited', 'S18')]\n",
      "        Group: /Geometry/Cross Sections/Flow Distribution\n",
      "            Dataset: /Geometry/Cross Sections/Flow Distribution/Flow Normalized Shear Factor\n",
      "                Shape: (10942, 23)\n",
      "                Dtype: float32\n",
      "    Attributes for /Geometry/Cross Sections/Flow Distribution/Flow Normalized Shear Factor:\n",
      "        Fraction Shear: b'Multiply by Total Q^2 for Shear'\n",
      "        Units: b'lbf*s^2/ft^8'\n",
      "            Dataset: /Geometry/Cross Sections/Flow Distribution/Flow Normalized Velocity Factor\n",
      "                Shape: (10942, 23)\n",
      "                Dtype: float32\n",
      "    Attributes for /Geometry/Cross Sections/Flow Distribution/Flow Normalized Velocity Factor:\n",
      "        Fraction Velocity: b'Multiply by Total Q for Velocity'\n",
      "        Units: b'1/ft^2'\n",
      "            Dataset: /Geometry/Cross Sections/Flow Distribution/Info\n",
      "                Shape: (178, 3)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/Cross Sections/Flow Distribution/Stations\n",
      "                Shape: (178, 24)\n",
      "                Dtype: float32\n",
      "    Attributes for /Geometry/Cross Sections/Flow Distribution/Stations:\n",
      "        Flow Distribution Stations: b'Flow Distribution station for XSEC'\n",
      "            Dataset: /Geometry/Cross Sections/Flow Distribution/Water Surface\n",
      "                Shape: (10942, 3)\n",
      "                Dtype: float32\n",
      "    Attributes for /Geometry/Cross Sections/Flow Distribution/Water Surface:\n",
      "        Column 1: b'Water Surface Elevation'\n",
      "        Column 2: b'Starting WSEL station for XSEC'\n",
      "        Column 3: b'Ending WSEL station for XSEC'\n",
      "        Dataset: /Geometry/Cross Sections/Ineffective Blocks\n",
      "            Shape: (32,)\n",
      "            Dtype: [('Left Sta', '<f4'), ('Right Sta', '<f4'), ('Elevation', '<f4'), ('Permanent', 'u1')]\n",
      "        Dataset: /Geometry/Cross Sections/Ineffective Info\n",
      "            Shape: (178, 2)\n",
      "            Dtype: int32\n",
      "    Attributes for /Geometry/Cross Sections/Ineffective Info:\n",
      "        Column: [b'Starting Index' b'Count']\n",
      "        Row: b'Feature'\n",
      "        Dataset: /Geometry/Cross Sections/Manning's n Info\n",
      "            Shape: (178, 2)\n",
      "            Dtype: int32\n",
      "    Attributes for /Geometry/Cross Sections/Manning's n Info:\n",
      "        Column: [b'Starting Index' b'Count']\n",
      "        Row: b'Feature'\n",
      "        Dataset: /Geometry/Cross Sections/Manning's n Values\n",
      "            Shape: (534, 2)\n",
      "            Dtype: float32\n",
      "    Attributes for /Geometry/Cross Sections/Manning's n Values:\n",
      "        Column: [b'Station' b'Mann n']\n",
      "        Row: b'Values'\n",
      "        Dataset: /Geometry/Cross Sections/Orthogonal Vectors\n",
      "            Shape: (178, 2)\n",
      "            Dtype: float32\n",
      "        Dataset: /Geometry/Cross Sections/Polyline Info\n",
      "            Shape: (178, 4)\n",
      "            Dtype: int32\n",
      "    Attributes for /Geometry/Cross Sections/Polyline Info:\n",
      "        Column: [b'Point Starting Index' b'Point Count' b'Part Starting Index'\n",
      " b'Part Count']\n",
      "        Feature Type: b'Polyline'\n",
      "        Row: b'Feature'\n",
      "        Dataset: /Geometry/Cross Sections/Polyline Parts\n",
      "            Shape: (178, 2)\n",
      "            Dtype: int32\n",
      "    Attributes for /Geometry/Cross Sections/Polyline Parts:\n",
      "        Column: [b'Point Starting Index' b'Point Count']\n",
      "        Row: b'Part'\n",
      "        Dataset: /Geometry/Cross Sections/Polyline Points\n",
      "            Shape: (536, 2)\n",
      "            Dtype: float64\n",
      "    Attributes for /Geometry/Cross Sections/Polyline Points:\n",
      "        Column: [b'X' b'Y']\n",
      "        Row: b'Points'\n",
      "        Group: /Geometry/Cross Sections/Property Tables\n",
      "            Dataset: /Geometry/Cross Sections/Property Tables/Cell Info\n",
      "                Shape: (178, 2)\n",
      "                Dtype: int32\n",
      "    Attributes for /Geometry/Cross Sections/Property Tables/Cell Info:\n",
      "        Column=: [b'Starting Index' b'Count']\n",
      "            Dataset: /Geometry/Cross Sections/Property Tables/Cell Value\n",
      "                Shape: (11940, 3)\n",
      "                Dtype: float32\n",
      "    Attributes for /Geometry/Cross Sections/Property Tables/Cell Value:\n",
      "        Variables: [[b'Elevation' b'ft']\n",
      " [b'Volume' b'ft^2']\n",
      " [b'Area' b'ft^2']]\n",
      "            Dataset: /Geometry/Cross Sections/Property Tables/XSEC Info\n",
      "                Shape: (179, 3)\n",
      "                Dtype: int32\n",
      "    Attributes for /Geometry/Cross Sections/Property Tables/XSEC Info:\n",
      "        Column=: [b'Starting Index' b'Count' b'DS Cell']\n",
      "            Dataset: /Geometry/Cross Sections/Property Tables/XSEC Value\n",
      "                Shape: (11221, 23)\n",
      "                Dtype: float32\n",
      "    Attributes for /Geometry/Cross Sections/Property Tables/XSEC Value:\n",
      "        Variables: [[b'Elevation' b'ft']\n",
      " [b'Area LOB' b'ft^2']\n",
      " [b'Area Chan' b'ft^2']\n",
      " [b'Area ROB' b'ft^2']\n",
      " [b'Area Ineff LOB' b'ft^2']\n",
      " [b'Area Ineff Chan' b'ft^2']\n",
      " [b'Area Ineff ROB' b'ft^2']\n",
      " [b'Conv LOB' b'cfs']\n",
      " [b'Conv Chan' b'cfs']\n",
      " [b'Conv ROB' b'cfs']\n",
      " [b'WP LOB' b'ft']\n",
      " [b'WP Chan' b'ft']\n",
      " [b'WP ROB' b'ft']\n",
      " [b'Mann N LOB' b'']\n",
      " [b'Mann N Chan' b'']\n",
      " [b'Mann N ROB' b'']\n",
      " [b'Top Width' b'ft']\n",
      " [b'Top Width LOB' b'ft']\n",
      " [b'Top Width Chan' b'ft']\n",
      " [b'Top Width ROB' b'ft']\n",
      " [b'Alpha' b'']\n",
      " [b'Storage Area' b'ft^2']\n",
      " [b'Beta' b'']]\n",
      "        Dataset: /Geometry/Cross Sections/Station Elevation Info\n",
      "            Shape: (178, 2)\n",
      "            Dtype: int32\n",
      "    Attributes for /Geometry/Cross Sections/Station Elevation Info:\n",
      "        Column: [b'Starting Index' b'Count']\n",
      "        Row: b'Feature'\n",
      "        Dataset: /Geometry/Cross Sections/Station Elevation Values\n",
      "            Shape: (24851, 2)\n",
      "            Dtype: float32\n",
      "    Attributes for /Geometry/Cross Sections/Station Elevation Values:\n",
      "        Column: [b'Station' b'Elevation']\n",
      "        Row: b'Points'\n",
      "\n",
      "    Group: /Geometry/GeomPreprocess\n",
      "        Group: /Geometry/GeomPreprocess/IBC_CON\n",
      "    Attributes for /Geometry/GeomPreprocess/IBC_CON:\n",
      "        MSP: 1\n",
      "        NIBC: 11\n",
      "            Dataset: /Geometry/GeomPreprocess/IBC_CON/APART\n",
      "                Shape: (11,)\n",
      "                Dtype: |S18\n",
      "            Dataset: /Geometry/GeomPreprocess/IBC_CON/BPART\n",
      "                Shape: (11,)\n",
      "                Dtype: |S17\n",
      "            Dataset: /Geometry/GeomPreprocess/IBC_CON/CIBCTYP\n",
      "                Shape: (11,)\n",
      "                Dtype: |S2\n",
      "            Dataset: /Geometry/GeomPreprocess/IBC_CON/I1IBC\n",
      "                Shape: (11,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/IBC_CON/IBCIX\n",
      "                Shape: (11,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/IBC_CON/IBCTYP\n",
      "                Shape: (11,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/IBC_CON/N1IBC\n",
      "                Shape: (11,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/IBC_CON/N2IBC\n",
      "                Shape: (11,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/IBC_CON/NLSCON\n",
      "                Shape: (11,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/IBC_CON/snet_hc_pt\n",
      "                Shape: (11,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/IBC_CON/snet_node_pt\n",
      "                Shape: (11,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/IBC_CON/snet_node_type\n",
      "                Shape: (11,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/IBC_CON/snet_type_pt\n",
      "                Shape: (11,)\n",
      "                Dtype: int32\n",
      "        Group: /Geometry/GeomPreprocess/NODE2ICS\n",
      "    Attributes for /Geometry/GeomPreprocess/NODE2ICS:\n",
      "        NUM: 189\n",
      "            Dataset: /Geometry/GeomPreprocess/NODE2ICS/ICS2NODE\n",
      "                Shape: (189,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/NODE2ICS/NODE2IBC\n",
      "                Shape: (189,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/NODE2ICS/NODE2ICS\n",
      "                Shape: (189,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/NODE2ICS/NODE2NRC\n",
      "                Shape: (189,)\n",
      "                Dtype: int32\n",
      "        Group: /Geometry/GeomPreprocess/Node Info\n",
      "            Dataset: /Geometry/GeomPreprocess/Node Info/Node Attributes\n",
      "                Shape: (189,)\n",
      "                Dtype: [('River', 'S16'), ('Reach', 'S16'), ('Station', 'S8'), ('Name', 'S16'), ('Type', 'S16'), ('Snet Type', '<i4')]\n",
      "        Group: /Geometry/GeomPreprocess/Property Tables\n",
      "            Dataset: /Geometry/GeomPreprocess/Property Tables/Cell Info\n",
      "                Shape: (178, 2)\n",
      "                Dtype: int32\n",
      "    Attributes for /Geometry/GeomPreprocess/Property Tables/Cell Info:\n",
      "        Column=: [b'Starting Index' b'Count']\n",
      "            Dataset: /Geometry/GeomPreprocess/Property Tables/Cell Value\n",
      "                Shape: (11940, 3)\n",
      "                Dtype: float32\n",
      "    Attributes for /Geometry/GeomPreprocess/Property Tables/Cell Value:\n",
      "        Variables: [[b'Elevation' b'ft']\n",
      " [b'Volume' b'ft^2']\n",
      " [b'Area' b'ft^2']]\n",
      "            Dataset: /Geometry/GeomPreprocess/Property Tables/XSEC Info\n",
      "                Shape: (179, 3)\n",
      "                Dtype: int32\n",
      "    Attributes for /Geometry/GeomPreprocess/Property Tables/XSEC Info:\n",
      "        Column=: [b'Starting Index' b'Count' b'DS Cell']\n",
      "            Dataset: /Geometry/GeomPreprocess/Property Tables/XSEC Value\n",
      "                Shape: (11221, 23)\n",
      "                Dtype: float32\n",
      "    Attributes for /Geometry/GeomPreprocess/Property Tables/XSEC Value:\n",
      "        Variables: [[b'Elevation' b'ft']\n",
      " [b'Area LOB' b'ft^2']\n",
      " [b'Area Chan' b'ft^2']\n",
      " [b'Area ROB' b'ft^2']\n",
      " [b'Area Ineff LOB' b'ft^2']\n",
      " [b'Area Ineff Chan' b'ft^2']\n",
      " [b'Area Ineff ROB' b'ft^2']\n",
      " [b'Conv LOB' b'cfs']\n",
      " [b'Conv Chan' b'cfs']\n",
      " [b'Conv ROB' b'cfs']\n",
      " [b'WP LOB' b'ft']\n",
      " [b'WP Chan' b'ft']\n",
      " [b'WP ROB' b'ft']\n",
      " [b'Mann N LOB' b'']\n",
      " [b'Mann N Chan' b'']\n",
      " [b'Mann N ROB' b'']\n",
      " [b'Top Width' b'ft']\n",
      " [b'Top Width LOB' b'ft']\n",
      " [b'Top Width Chan' b'ft']\n",
      " [b'Top Width ROB' b'ft']\n",
      " [b'Alpha' b'']\n",
      " [b'Storage Area' b'ft^2']\n",
      " [b'Beta' b'']]\n",
      "        Group: /Geometry/GeomPreprocess/Reach Connections\n",
      "    Attributes for /Geometry/GeomPreprocess/Reach Connections:\n",
      "        NRCH: 1\n",
      "        NROW: 356\n",
      "            Dataset: /Geometry/GeomPreprocess/Reach Connections/ICSD\n",
      "                Shape: (1,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/Reach Connections/ICSU\n",
      "                Shape: (1,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/Reach Connections/IDSTYP\n",
      "                Shape: (1,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/Reach Connections/IRDCON\n",
      "                Shape: (1, 5)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/Reach Connections/IRUCON\n",
      "                Shape: (1, 5)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/Reach Connections/IUSTYP\n",
      "                Shape: (1,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/Reach Connections/NDCON\n",
      "                Shape: (1, 5)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/Reach Connections/NNDCON\n",
      "                Shape: (1,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/Reach Connections/NNUCON\n",
      "                Shape: (1,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/Reach Connections/NUCON\n",
      "                Shape: (1, 5)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/Reach Connections/QSIGND\n",
      "                Shape: (1, 5)\n",
      "                Dtype: float32\n",
      "            Dataset: /Geometry/GeomPreprocess/Reach Connections/QSIGNU\n",
      "                Shape: (1, 5)\n",
      "                Dtype: float32\n",
      "        Group: /Geometry/GeomPreprocess/Skyline\n",
      "    Attributes for /Geometry/GeomPreprocess/Skyline:\n",
      "        NROW: 356\n",
      "            Dataset: /Geometry/GeomPreprocess/Skyline/ICIDX\n",
      "                Shape: (3,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/Skyline/ICSP\n",
      "                Shape: (3,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/Skyline/ICSPRW\n",
      "                Shape: (356,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/Skyline/IDIA\n",
      "                Shape: (356,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/Skyline/IHIGH\n",
      "                Shape: (356,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/Skyline/ILEFT\n",
      "                Shape: (356,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/Skyline/IRIGHT\n",
      "                Shape: (356,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/Skyline/IROWZ\n",
      "                Shape: (178,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/Skyline/IROWZSA\n",
      "                Shape: (0,)\n",
      "                Dtype: int32\n",
      "        Group: /Geometry/GeomPreprocess/XSEC Properties\n",
      "    Attributes for /Geometry/GeomPreprocess/XSEC Properties:\n",
      "        ICS: 178\n",
      "            Dataset: /Geometry/GeomPreprocess/XSEC Properties/ELV\n",
      "                Shape: (178,)\n",
      "                Dtype: float32\n",
      "            Dataset: /Geometry/GeomPreprocess/XSEC Properties/Manning Flow Table\n",
      "                Shape: (178,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/XSEC Properties/Manning Seasonal Table\n",
      "                Shape: (178,)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/GeomPreprocess/XSEC Properties/Priessman Elevation\n",
      "                Shape: (178,)\n",
      "                Dtype: float32\n",
      "            Dataset: /Geometry/GeomPreprocess/XSEC Properties/Priessman Width\n",
      "                Shape: (178,)\n",
      "                Dtype: float32\n",
      "            Dataset: /Geometry/GeomPreprocess/XSEC Properties/SLGCH\n",
      "                Shape: (178,)\n",
      "                Dtype: float32\n",
      "            Dataset: /Geometry/GeomPreprocess/XSEC Properties/SLGV\n",
      "                Shape: (178,)\n",
      "                Dtype: float32\n",
      "            Dataset: /Geometry/GeomPreprocess/XSEC Properties/Top of Pilot Channel\n",
      "                Shape: (178,)\n",
      "                Dtype: float32\n",
      "            Dataset: /Geometry/GeomPreprocess/XSEC Properties/ZINC\n",
      "                Shape: (178,)\n",
      "                Dtype: float32\n",
      "            Dataset: /Geometry/GeomPreprocess/XSEC Properties/ZMN\n",
      "                Shape: (178,)\n",
      "                Dtype: float32\n",
      "            Dataset: /Geometry/GeomPreprocess/XSEC Properties/ZSTRT\n",
      "                Shape: (178,)\n",
      "                Dtype: float32\n",
      "            Dataset: /Geometry/GeomPreprocess/XSEC Properties/Z_OB_Store\n",
      "                Shape: (178,)\n",
      "                Dtype: float32\n",
      "\n",
      "    Group: /Geometry/Land Cover (Manning's n)\n",
      "        Dataset: /Geometry/Land Cover (Manning's n)/Calibration Table\n",
      "            Shape: (1,)\n",
      "            Dtype: [('Land Cover Name', 'S32'), (\"Base Manning's n Value\", '<f4')]\n",
      "\n",
      "    Group: /Geometry/River Bank Lines\n",
      "        Dataset: /Geometry/River Bank Lines/Polyline Info\n",
      "            Shape: (2, 4)\n",
      "            Dtype: int32\n",
      "    Attributes for /Geometry/River Bank Lines/Polyline Info:\n",
      "        Column: [b'Point Starting Index' b'Point Count' b'Part Starting Index'\n",
      " b'Part Count']\n",
      "        Feature Type: b'Polyline'\n",
      "        Row: b'Feature'\n",
      "        Dataset: /Geometry/River Bank Lines/Polyline Parts\n",
      "            Shape: (2, 2)\n",
      "            Dtype: int32\n",
      "    Attributes for /Geometry/River Bank Lines/Polyline Parts:\n",
      "        Column: [b'Point Starting Index' b'Point Count']\n",
      "        Row: b'Part'\n",
      "        Dataset: /Geometry/River Bank Lines/Polyline Points\n",
      "            Shape: (1822, 2)\n",
      "            Dtype: float64\n",
      "    Attributes for /Geometry/River Bank Lines/Polyline Points:\n",
      "        Column: [b'X' b'Y']\n",
      "        Row: b'Points'\n",
      "\n",
      "    Group: /Geometry/River Centerlines\n",
      "        Dataset: /Geometry/River Centerlines/Attributes\n",
      "            Shape: (1,)\n",
      "            Dtype: [('River Name', 'S16'), ('Reach Name', 'S16'), ('US Type', 'S12'), ('US Name', 'S16'), ('DS Type', 'S12'), ('DS Name', 'S16'), ('Junction to US XS', '<f4'), ('DS XS to Junction', '<f4')]\n",
      "        Dataset: /Geometry/River Centerlines/Polyline Info\n",
      "            Shape: (1, 4)\n",
      "            Dtype: int32\n",
      "    Attributes for /Geometry/River Centerlines/Polyline Info:\n",
      "        Column: [b'Point Starting Index' b'Point Count' b'Part Starting Index'\n",
      " b'Part Count']\n",
      "        Feature Type: b'Polyline'\n",
      "        Row: b'Feature'\n",
      "        Dataset: /Geometry/River Centerlines/Polyline Parts\n",
      "            Shape: (1, 2)\n",
      "            Dtype: int32\n",
      "    Attributes for /Geometry/River Centerlines/Polyline Parts:\n",
      "        Column: [b'Point Starting Index' b'Point Count']\n",
      "        Row: b'Part'\n",
      "        Dataset: /Geometry/River Centerlines/Polyline Points\n",
      "            Shape: (591, 2)\n",
      "            Dtype: float64\n",
      "    Attributes for /Geometry/River Centerlines/Polyline Points:\n",
      "        Column: [b'X' b'Y']\n",
      "        Row: b'Points'\n",
      "\n",
      "    Group: /Geometry/River Edge Lines\n",
      "    Attributes for /Geometry/River Edge Lines:\n",
      "        Source Data Hash: [ 71 129 134 101 104 229 182 244  41  18 171  39 109 110   8  42 190 254\n",
      " 112 218 109 108 103 135 102 181  50   2 194  60 207 222]\n",
      "        Dataset: /Geometry/River Edge Lines/Polyline Info\n",
      "            Shape: (2, 4)\n",
      "            Dtype: int32\n",
      "    Attributes for /Geometry/River Edge Lines/Polyline Info:\n",
      "        Column: [b'Point Starting Index' b'Point Count' b'Part Starting Index'\n",
      " b'Part Count']\n",
      "        Feature Type: b'Polyline'\n",
      "        Row: b'Feature'\n",
      "        Dataset: /Geometry/River Edge Lines/Polyline Parts\n",
      "            Shape: (2, 2)\n",
      "            Dtype: int32\n",
      "    Attributes for /Geometry/River Edge Lines/Polyline Parts:\n",
      "        Column: [b'Point Starting Index' b'Point Count']\n",
      "        Row: b'Part'\n",
      "        Dataset: /Geometry/River Edge Lines/Polyline Points\n",
      "            Shape: (644, 2)\n",
      "            Dtype: float64\n",
      "    Attributes for /Geometry/River Edge Lines/Polyline Points:\n",
      "        Column: [b'X' b'Y']\n",
      "        Row: b'Points'\n",
      "\n",
      "    Group: /Geometry/Structures\n",
      "    Attributes for /Geometry/Structures:\n",
      "        Bridge/Culvert Count: 10\n",
      "        Connection Count: 0\n",
      "        Has Bridge Opening (2D): 0\n",
      "        Inline Structure Count: 1\n",
      "        Lateral Structure Count: 0\n",
      "        Dataset: /Geometry/Structures/Abutment Attributes\n",
      "            Shape: (2,)\n",
      "            Dtype: [('Structure ID', '<i4'), ('US Profile (Index)', '<i4'), ('US Profile (Count)', '<i4'), ('DS Profile (Index)', '<i4'), ('DS Profile (Count)', '<i4')]\n",
      "        Dataset: /Geometry/Structures/Abutment Data\n",
      "            Shape: (8, 2)\n",
      "            Dtype: float32\n",
      "        Dataset: /Geometry/Structures/Attributes\n",
      "            Shape: (11,)\n",
      "            Dtype: [('Type', 'S16'), ('Mode', 'S16'), ('River', 'S16'), ('Reach', 'S16'), ('RS', 'S8'), ('Connection', 'S16'), ('Groupname', 'S45'), ('US Type', 'S16'), ('US River', 'S16'), ('US Reach', 'S16'), ('US RS', 'S8'), ('US SA/2D', 'S16'), ('DS Type', 'S16'), ('DS River', 'S16'), ('DS Reach', 'S16'), ('DS RS', 'S8'), ('DS SA/2D', 'S16'), ('Node Name', 'S16'), ('Description', 'S512'), ('Last Edited', 'S18'), ('Upstream Distance', '<f4'), ('Weir Width', '<f4'), ('Weir Max Submergence', '<f4'), ('Weir Min Elevation', '<f4'), ('Weir Coef', '<f4'), ('Weir Shape', 'S16'), ('Weir Design EG Head', '<f4'), ('Weir Design Spillway HT', '<f4'), ('Weir US Slope', '<f4'), ('Weir DS Slope', '<f4'), ('Linear Routing Positive Coef', '<f4'), ('Linear Routing Negative Coef', '<f4'), ('Linear Routing Elevation', '<f4'), ('LW HW Position', '<i4'), ('LW TW Position', '<i4'), ('LW HW Distance', '<f4'), ('LW TW Distance', '<f4'), ('LW Span Multiple', 'u1'), ('Use 2D for Overflow', 'u1'), ('Use Velocity into 2D', 'u1'), ('Hagers Weir Coef', '<f4'), ('Hagers Height', '<f4'), ('Hagers Slope', '<f4'), ('Hagers Angle', '<f4'), ('Hagers Radius', '<f4'), ('Use WS for Weir Reference', 'u1'), ('Pilot Flow', '<f4'), ('Culvert Groups', '<i4'), ('Culverts Flap Gates', '<i4'), ('Gate Groups', '<i4'), ('HTAB FF Points', '<i4'), ('HTAB RC Count', '<i4'), ('HTAB RC Points', '<i4'), ('HTAB HW Max', '<f4'), ('HTAB TW Max', '<f4'), ('HTAB Max Flow', '<f4'), ('Cell Spacing Near', '<f4'), ('Cell Spacing Far', '<f4'), ('Near Repeats', '<i4'), ('Protection Radius', 'u1'), ('Use Friction in Momentum', 'u1'), ('Use Weight in Momentum', 'u1'), ('Use Critical US', 'u1'), ('Use EG for Pressure Criteria', 'u1'), ('Ice Option', '<i4'), ('Weir Skew', '<f4'), ('Pier Skew', '<f4'), ('BR Contraction', '<f4'), ('BR Expansion', '<f4'), ('BR Pier K', '<f4'), ('BR Pier Elev', '<f4'), ('BR Struct K', '<f4'), ('BR Struct Elev', '<f4'), ('BR Struct Mann', '<f4'), ('BR US Left Bank', '<f4'), ('BR US Right Bank', '<f4'), ('BR DS Left Bank', '<f4'), ('BR DS Right Bank', '<f4'), ('XS US Left Bank', '<f4'), ('XS US Right Bank', '<f4'), ('XS DS Left Bank', '<f4'), ('XS DS Right Bank', '<f4'), ('US Ineff Left Sta', '<f4'), ('US Ineff Left Elev', '<f4'), ('US Ineff Right Sta', '<f4'), ('US Ineff Right Elev', '<f4'), ('DS Ineff Left Sta', '<f4'), ('DS Ineff Left Elev', '<f4'), ('DS Ineff Right Sta', '<f4'), ('DS Ineff Right Elev', '<f4'), ('Use Override HW Connectivity', 'u1'), ('Use Override TW Connectivity', 'u1'), ('Use RC Family', 'u1'), ('Use Override HTabIBCurves', 'u1'), ('SNN ID', '<i4'), ('Default Centerline', 'u1')]\n",
      "        Dataset: /Geometry/Structures/Bridge Coefficient Attributes\n",
      "            Shape: (10,)\n",
      "            Dtype: [('Structure ID', '<i4'), ('Method', '<i4'), ('Low Standard Step', 'u1'), ('Use Momentum', 'u1'), ('Momentum Cd', '<f4'), ('Use Yarnell', 'u1'), ('Yarnell K', '<f4'), ('Use WSPro', 'u1'), ('WSPro El Top L', '<f4'), ('WSPro El Top R', '<f4'), ('WSPro El Toe L', '<f4'), ('WSPro El Toe R', '<f4'), ('WSPro Type', '<i4'), ('WSPro Slope', '<f4'), ('WSPro Width', '<f4'), ('WSPro Centroid Sta', '<f4'), ('WSPro Wing Wall Type', '<i4'), ('WSPro Wing Wall Width', '<f4'), ('WSPro Wing Wall Angle', '<f4'), ('WSPro Wing Wall Radius', '<f4'), ('WSPro Guide Banks Type', '<i4'), ('WSPro Guide Banks Length', '<f4'), ('WSPro Guide Banks Offset', '<f4'), ('WSPro Guide Banks Angle', '<f4'), ('WSPro Piers Continuous', 'u1'), ('WSPro Sf Geom Mean', 'u1'), ('WSPro Use Tables', 'u1'), ('WSPro Use C/E Approach', 'u1'), ('WSPro Use C/E Guide Banks', 'u1'), ('WSPro Use C/E US XS', 'u1'), ('WSPro Use C/E US BR', 'u1'), ('WSPro Use C/E DS BR', 'u1'), ('Use High Standard Step', 'u1'), ('Submerged Inlet Cd', '<f4'), ('Submerged Inlet-Outlet Cd', '<f4'), ('Low Cord Weir Check', '<f4')]\n",
      "        Dataset: /Geometry/Structures/Centerline Info\n",
      "            Shape: (11, 4)\n",
      "            Dtype: int32\n",
      "    Attributes for /Geometry/Structures/Centerline Info:\n",
      "        Column: [b'Point Starting Index' b'Point Count' b'Part Starting Index'\n",
      " b'Part Count']\n",
      "        Feature Type: b'Polyline'\n",
      "        Row: b'Feature'\n",
      "        Dataset: /Geometry/Structures/Centerline Parts\n",
      "            Shape: (11, 2)\n",
      "            Dtype: int32\n",
      "    Attributes for /Geometry/Structures/Centerline Parts:\n",
      "        Column: [b'Point Starting Index' b'Point Count']\n",
      "        Row: b'Part'\n",
      "        Dataset: /Geometry/Structures/Centerline Points\n",
      "            Shape: (60, 2)\n",
      "            Dtype: float64\n",
      "    Attributes for /Geometry/Structures/Centerline Points:\n",
      "        Column: [b'X' b'Y']\n",
      "        Row: b'Points'\n",
      "        Group: /Geometry/Structures/Gate Groups\n",
      "            Dataset: /Geometry/Structures/Gate Groups/Attributes\n",
      "                Shape: (1,)\n",
      "                Dtype: [('Structure ID', '<i4'), ('Name', 'S12'), ('Width', '<f4'), ('Height', '<f4'), ('Invert', '<f4'), ('Method', '<i4'), ('Sluice Coef', '<f4'), ('Radial Coef', '<f4'), ('Trunion Exponent', '<f4'), ('Open Exponent', '<f4'), ('Head Exponent', '<f4'), ('Trunion Height', '<f4'), ('Orifice Coef', '<f4'), ('Head Reference', '<i4'), ('Spillway Shape', 'S16'), ('Weir Coef', '<f4'), ('Design Head', '<f4'), ('Design Height', '<f4'), ('Use Rehbok', 'u1'), ('Use Kindsvater Carter', 'u1'), ('Kindsvater Carter Method', '<i4'), ('User Curve Set', 'S64'), ('Openings', '<i4')]\n",
      "            Group: /Geometry/Structures/Gate Groups/Openings\n",
      "    Attributes for /Geometry/Structures/Gate Groups/Openings:\n",
      "        Bridge/Culvert Count: 0\n",
      "        Connection Count: 0\n",
      "        Inline Structure Count: 2\n",
      "        Lateral Structure Count: 0\n",
      "                Dataset: /Geometry/Structures/Gate Groups/Openings/Attributes\n",
      "                    Shape: (2,)\n",
      "                    Dtype: [('Structure ID', '<i4'), ('Gate Group ID', '<i4'), ('Name', 'S32'), ('Station', '<f4'), ('Default Centerline', 'u1')]\n",
      "        Dataset: /Geometry/Structures/Pier Attributes\n",
      "            Shape: (32,)\n",
      "            Dtype: [('Structure ID', '<i4'), ('US Station', '<f4'), ('DS Station', '<f4'), ('Use Debris', 'u1'), ('Debris Width', '<f4'), ('Debris Height', '<f4'), ('US Profile (Index)', '<i4'), ('US Profile (Count)', '<i4'), ('DS Profile (Index)', '<i4'), ('DS Profile (Count)', '<i4')]\n",
      "        Dataset: /Geometry/Structures/Pier Data\n",
      "            Shape: (144, 2)\n",
      "            Dtype: float32\n",
      "        Dataset: /Geometry/Structures/Profile Data\n",
      "            Shape: (378, 2)\n",
      "            Dtype: float32\n",
      "        Group: /Geometry/Structures/Property Tables\n",
      "    Attributes for /Geometry/Structures/Property Tables:\n",
      "        NRCF: 10\n",
      "            Group: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (103245)\n",
      "    Attributes for /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (103245):\n",
      "        Edited Date/Time: b'04Dec2002 16:03:49'\n",
      "        Encroachment: b'False'\n",
      "        Free Flow points: 51\n",
      "        Friction Slope Method: b'Average Conveyance'\n",
      "        IB Curve Number: 1\n",
      "        Max number Submerged points: 21\n",
      "        Number Curves: 51\n",
      "        SSN ID: 57\n",
      "        Total number points: 851\n",
      "                Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (103245)/Info\n",
      "                    Shape: (51, 2)\n",
      "                    Dtype: int32\n",
      "                Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (103245)/Values\n",
      "                    Shape: (851, 2)\n",
      "                    Dtype: float32\n",
      "            Group: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (11985)\n",
      "    Attributes for /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (11985):\n",
      "        Edited Date/Time: b'04Dec2002 16:04:28'\n",
      "        Encroachment: b'False'\n",
      "        Free Flow points: 51\n",
      "        Friction Slope Method: b'Average Conveyance'\n",
      "        IB Curve Number: 8\n",
      "        Max number Submerged points: 26\n",
      "        Number Curves: 51\n",
      "        SSN ID: 169\n",
      "        Total number points: 780\n",
      "                Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (11985)/Info\n",
      "                    Shape: (51, 2)\n",
      "                    Dtype: int32\n",
      "                Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (11985)/Values\n",
      "                    Shape: (780, 2)\n",
      "                    Dtype: float32\n",
      "            Group: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (15100)\n",
      "    Attributes for /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (15100):\n",
      "        Edited Date/Time: b'04Dec2002 16:04:22'\n",
      "        Encroachment: b'False'\n",
      "        Free Flow points: 51\n",
      "        Friction Slope Method: b'Average Conveyance'\n",
      "        IB Curve Number: 7\n",
      "        Max number Submerged points: 24\n",
      "        Number Curves: 51\n",
      "        SSN ID: 165\n",
      "        Total number points: 835\n",
      "                Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (15100)/Info\n",
      "                    Shape: (51, 2)\n",
      "                    Dtype: int32\n",
      "                Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (15100)/Values\n",
      "                    Shape: (835, 2)\n",
      "                    Dtype: float32\n",
      "            Group: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (21241)\n",
      "    Attributes for /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (21241):\n",
      "        Edited Date/Time: b'08Nov2002 14:00:07'\n",
      "        Encroachment: b'False'\n",
      "        Free Flow points: 50\n",
      "        Friction Slope Method: b'Average Conveyance'\n",
      "        IB Curve Number: 6\n",
      "        Max number Submerged points: 28\n",
      "        Number Curves: 51\n",
      "        SSN ID: 157\n",
      "        Total number points: 838\n",
      "                Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (21241)/Info\n",
      "                    Shape: (51, 2)\n",
      "                    Dtype: int32\n",
      "                Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (21241)/Values\n",
      "                    Shape: (838, 2)\n",
      "                    Dtype: float32\n",
      "            Group: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (23828)\n",
      "    Attributes for /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (23828):\n",
      "        Edited Date/Time: b'08Nov2002 13:59:53'\n",
      "        Encroachment: b'False'\n",
      "        Free Flow points: 50\n",
      "        Friction Slope Method: b'Average Conveyance'\n",
      "        IB Curve Number: 5\n",
      "        Max number Submerged points: 27\n",
      "        Number Curves: 51\n",
      "        SSN ID: 151\n",
      "        Total number points: 969\n",
      "                Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (23828)/Info\n",
      "                    Shape: (51, 2)\n",
      "                    Dtype: int32\n",
      "                Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (23828)/Values\n",
      "                    Shape: (969, 2)\n",
      "                    Dtype: float32\n",
      "            Group: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (2436)\n",
      "    Attributes for /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (2436):\n",
      "        Edited Date/Time: b'08Nov2002 14:00:57'\n",
      "        Encroachment: b'False'\n",
      "        Free Flow points: 51\n",
      "        Friction Slope Method: b'Average Conveyance'\n",
      "        IB Curve Number: 10\n",
      "        Max number Submerged points: 29\n",
      "        Number Curves: 51\n",
      "        SSN ID: 185\n",
      "        Total number points: 964\n",
      "                Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (2436)/Info\n",
      "                    Shape: (51, 2)\n",
      "                    Dtype: int32\n",
      "                Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (2436)/Values\n",
      "                    Shape: (964, 2)\n",
      "                    Dtype: float32\n",
      "            Group: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (2920)\n",
      "    Attributes for /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (2920):\n",
      "        Edited Date/Time: b'08Nov2002 14:00:47'\n",
      "        Encroachment: b'False'\n",
      "        Free Flow points: 51\n",
      "        Friction Slope Method: b'Average Conveyance'\n",
      "        IB Curve Number: 9\n",
      "        Max number Submerged points: 21\n",
      "        Number Curves: 51\n",
      "        SSN ID: 182\n",
      "        Total number points: 745\n",
      "                Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (2920)/Info\n",
      "                    Shape: (51, 2)\n",
      "                    Dtype: int32\n",
      "                Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (2920)/Values\n",
      "                    Shape: (745, 2)\n",
      "                    Dtype: float32\n",
      "            Group: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (36713)\n",
      "    Attributes for /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (36713):\n",
      "        Edited Date/Time: b'08Nov2002 13:59:41'\n",
      "        Encroachment: b'False'\n",
      "        Free Flow points: 44\n",
      "        Friction Slope Method: b'Average Conveyance'\n",
      "        IB Curve Number: 4\n",
      "        Max number Submerged points: 25\n",
      "        Number Curves: 51\n",
      "        SSN ID: 136\n",
      "        Total number points: 801\n",
      "                Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (36713)/Info\n",
      "                    Shape: (51, 2)\n",
      "                    Dtype: int32\n",
      "                Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (36713)/Values\n",
      "                    Shape: (801, 2)\n",
      "                    Dtype: float32\n",
      "            Group: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (58780)\n",
      "    Attributes for /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (58780):\n",
      "        Edited Date/Time: b'08Nov2002 13:59:27'\n",
      "        Encroachment: b'False'\n",
      "        Free Flow points: 50\n",
      "        Friction Slope Method: b'Average Conveyance'\n",
      "        IB Curve Number: 3\n",
      "        Max number Submerged points: 21\n",
      "        Number Curves: 51\n",
      "        SSN ID: 105\n",
      "        Total number points: 779\n",
      "                Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (58780)/Info\n",
      "                    Shape: (51, 2)\n",
      "                    Dtype: int32\n",
      "                Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (58780)/Values\n",
      "                    Shape: (779, 2)\n",
      "                    Dtype: float32\n",
      "            Group: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (75960)\n",
      "    Attributes for /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (75960):\n",
      "        Edited Date/Time: b'08Nov2002 13:58:01'\n",
      "        Encroachment: b'False'\n",
      "        Free Flow points: 51\n",
      "        Friction Slope Method: b'Average Conveyance'\n",
      "        IB Curve Number: 2\n",
      "        Max number Submerged points: 30\n",
      "        Number Curves: 51\n",
      "        SSN ID: 85\n",
      "        Total number points: 892\n",
      "                Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (75960)/Info\n",
      "                    Shape: (51, 2)\n",
      "                    Dtype: int32\n",
      "                Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (75960)/Values\n",
      "                    Shape: (892, 2)\n",
      "                    Dtype: float32\n",
      "        Dataset: /Geometry/Structures/Table Info\n",
      "            Shape: (11,)\n",
      "            Dtype: [('Centerline Profile (Index)', '<i4'), ('Centerline Profile (Count)', '<i4'), ('US XS Profile (Index)', '<i4'), ('US XS Profile (Count)', '<i4'), ('US BR Profile (Index)', '<i4'), ('US BR Profile (Count)', '<i4'), ('US BR Weir Profile (Index)', '<i4'), ('US BR Weir Profile (Count)', '<i4'), ('US BR Lid Profile (Index)', '<i4'), ('US BR Lid Profile (Count)', '<i4'), ('DS XS Profile (Index)', '<i4'), ('DS XS Profile (Count)', '<i4'), ('DS BR Profile (Index)', '<i4'), ('DS BR Profile (Count)', '<i4'), ('DS BR Weir Profile (Index)', '<i4'), ('DS BR Weir Profile (Count)', '<i4'), ('DS BR Lid Profile (Index)', '<i4'), ('DS BR Lid Profile (Count)', '<i4'), ('US XS Mann (Index)', '<i4'), ('US XS Mann (Count)', '<i4'), ('US BR Mann (Index)', '<i4'), ('US BR Mann (Count)', '<i4'), ('DS XS Mann (Index)', '<i4'), ('DS XS Mann (Count)', '<i4'), ('DS BR Mann (Index)', '<i4'), ('DS BR Mann (Count)', '<i4'), ('RC (Index)', '<i4'), ('RC (Count)', '<i4')]\n"
     ]
    }
   ],
   "source": [
    "# Get HDF Paths with Properties (For Exploring HDF Files)\n",
    "HdfBase.get_dataset_info(plan_number, ras_object=bald_eagle, group_path=\"/Geometry\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:42,721 - ras_commander.HdfPlan - INFO - Calling get_geometry_information\n",
      "2024-11-15 07:59:42,722 - ras_commander.HdfPlan - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
      "2024-11-15 07:59:42,727 - ras_commander.HdfPlan - INFO - Finished get_geometry_information\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Example: Extracting Base Geometry Attributes\n",
      "Getting geometry attributes from c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
      "Checking for Geometry group in c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
      "Getting root level geometry attributes\n",
      "Successfully extracted root level geometry attributes\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Complete Geometry</th>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Extents</th>\n",
       "      <td>[1966632.2513, 2066299.3787, 287473.1387, 3540...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Geometry Time</th>\n",
       "      <td>2024-11-15 07:56:39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Title</th>\n",
       "      <td>Existing Conditions - GIS Data</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Version</th>\n",
       "      <td>1.0.20 (20Sep2024)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                               Value\n",
       "Complete Geometry                                               True\n",
       "Extents            [1966632.2513, 2066299.3787, 287473.1387, 3540...\n",
       "Geometry Time                                    2024-11-15 07:56:39\n",
       "Title                                 Existing Conditions - GIS Data\n",
       "Version                                           1.0.20 (20Sep2024)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Use HdfPlan for geometry-related operations\n",
    "print(\"\\nExample: Extracting Base Geometry Attributes\")\n",
    "geom_attrs = HdfPlan.get_geometry_information(geom_hdf_path, ras_object=bald_eagle)\n",
    "display(geom_attrs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:42,742 - ras_commander.HdfResultsPlan - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n",
      "2024-11-15 07:59:42,743 - ras_commander.HdfResultsPlan - INFO - Extracting Plan Information from: BaldEagle.p01.hdf\n",
      "2024-11-15 07:59:42,745 - ras_commander.HdfResultsPlan - INFO - Plan Name: Unsteady with Bridges and Dam\n",
      "2024-11-15 07:59:42,746 - ras_commander.HdfResultsPlan - INFO - Simulation Start Time: 18Feb1999 00:00:00\n",
      "2024-11-15 07:59:42,747 - ras_commander.HdfResultsPlan - INFO - Simulation End Time: 24Feb1999 05:00:00\n",
      "2024-11-15 07:59:42,747 - ras_commander.HdfResultsPlan - INFO - Simulation Duration (hours): 149.0\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Example 2: Extracting runtime and compute time data\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Plan Name</th>\n",
       "      <th>File Name</th>\n",
       "      <th>Simulation Start Time</th>\n",
       "      <th>Simulation End Time</th>\n",
       "      <th>Simulation Duration (s)</th>\n",
       "      <th>Simulation Time (hr)</th>\n",
       "      <th>Completing Geometry (hr)</th>\n",
       "      <th>Preprocessing Geometry (hr)</th>\n",
       "      <th>Completing Event Conditions (hr)</th>\n",
       "      <th>Unsteady Flow Computations (hr)</th>\n",
       "      <th>Complete Process (hr)</th>\n",
       "      <th>Unsteady Flow Speed (hr/hr)</th>\n",
       "      <th>Complete Process Speed (hr/hr)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Unsteady with Bridges and Dam</td>\n",
       "      <td>BaldEagle.p01.hdf</td>\n",
       "      <td>18Feb1999 00:00:00</td>\n",
       "      <td>24Feb1999 05:00:00</td>\n",
       "      <td>536400.0</td>\n",
       "      <td>149.0</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.04168</td>\n",
       "      <td>N/A</td>\n",
       "      <td>0.001923</td>\n",
       "      <td>0.049345</td>\n",
       "      <td>77492.05432</td>\n",
       "      <td>3019.573184</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Plan Name          File Name Simulation Start Time  \\\n",
       "0  Unsteady with Bridges and Dam  BaldEagle.p01.hdf    18Feb1999 00:00:00   \n",
       "\n",
       "  Simulation End Time  Simulation Duration (s)  Simulation Time (hr)  \\\n",
       "0  24Feb1999 05:00:00                 536400.0                 149.0   \n",
       "\n",
       "  Completing Geometry (hr)  Preprocessing Geometry (hr)  \\\n",
       "0                      N/A                      0.04168   \n",
       "\n",
       "  Completing Event Conditions (hr)  Unsteady Flow Computations (hr)  \\\n",
       "0                              N/A                         0.001923   \n",
       "\n",
       "   Complete Process (hr)  Unsteady Flow Speed (hr/hr)  \\\n",
       "0               0.049345                  77492.05432   \n",
       "\n",
       "   Complete Process Speed (hr/hr)  \n",
       "0                     3019.573184  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Example: Extract runtime and compute time data\n",
    "print(\"\\nExample 2: Extracting runtime and compute time data\")\n",
    "runtime_df = HdfResultsPlan.get_runtime_data(hdf_input=plan_number, ras_object=bald_eagle)\n",
    "if runtime_df is not None:\n",
    "    display(runtime_df)\n",
    "else:\n",
    "    print(\"No runtime data found.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Table of all the functions in the RasGeomHdf class from the ras_commander/RasGeomHdf.py file:\n",
    "\n",
    "| Function Name | Description |\n",
    "|---------------|-------------|\n",
    "| projection | Returns the projection of the RAS geometry as a pyproj.CRS object |\n",
    "| get_geom_attrs | Returns base geometry attributes from a HEC-RAS HDF file |\n",
    "\n",
    "| mesh_area_names | Returns a list of the 2D mesh area names of the RAS geometry |\n",
    "| get_geom_2d_flow_area_attrs | Returns geometry 2d flow area attributes from a HEC-RAS HDF file |\n",
    "| mesh_areas | Returns 2D flow area perimeter polygons |\n",
    "| mesh_cell_polygons | Returns 2D flow mesh cell polygons |\n",
    "| mesh_cell_points | Returns 2D flow mesh cell points |\n",
    "| mesh_cell_faces | Returns 2D flow mesh cell faces |\n",
    "\n",
    "| get_geom_structures_attrs | Returns geometry structures attributes from a HEC-RAS HDF file |\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "| bc_lines | Returns 2D mesh area boundary condition lines |\n",
    "| breaklines | Returns 2D mesh area breaklines |\n",
    "\n",
    "\n",
    "\n",
    "| refinement_regions | Returns 2D mesh area refinement regions |\n",
    "| structures | Returns the model structures |\n",
    "| reference_lines_names | Returns reference line names |\n",
    "| reference_points_names | Returns reference point names |\n",
    "| reference_lines | Returns the reference lines geometry and attributes |\n",
    "| reference_points | Returns the reference points geometry and attributes |\n",
    "| cross_sections | Returns the model 1D cross sections |\n",
    "| river_reaches | Returns the model 1D river reach lines |\n",
    "| cross_sections_elevations | Returns the model cross section elevation information |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n"
     ]
    }
   ],
   "source": [
    "# For all of the RasGeomHdf Class Functions, we will use geom_hdf_path\n",
    "print(geom_hdf_path)\n",
    "\n",
    "# For the example project, plan 06 is associated with geometry 09\n",
    "# If you want to call the geometry by number, call RasHdfGeom functions with a number\n",
    "# Otherwise, if you want to look up geometry hdf path by plan number, follow the logic in the previous code cells"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:42,780 - ras_commander.HdfBase - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Extracting Projection from HDF\n",
      "No projection information found.  This attribute is only included if a RASMapper projection is defined.\n"
     ]
    }
   ],
   "source": [
    "# Use HdfUtils for extracting projection\n",
    "print(\"\\nExtracting Projection from HDF\")\n",
    "projection = HdfBase.get_projection(hdf_path=geom_hdf_path)\n",
    "if projection:\n",
    "    print(f\"Projection: {projection}\")\n",
    "else:\n",
    "    print(\"No projection information found.  This attribute is only included if a RASMapper projection is defined.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:42,790 - ras_commander.HdfPlan - INFO - Calling get_geometry_information\n",
      "2024-11-15 07:59:42,791 - ras_commander.HdfPlan - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
      "2024-11-15 07:59:42,794 - ras_commander.HdfPlan - INFO - Finished get_geometry_information\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Example: Extracting Base Geometry Attributes\n",
      "Getting geometry attributes from c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
      "Checking for Geometry group in c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
      "Getting root level geometry attributes\n",
      "Successfully extracted root level geometry attributes\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Complete Geometry</th>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Extents</th>\n",
       "      <td>[1966632.2513, 2066299.3787, 287473.1387, 3540...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Geometry Time</th>\n",
       "      <td>2024-11-15 07:56:39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Title</th>\n",
       "      <td>Existing Conditions - GIS Data</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Version</th>\n",
       "      <td>1.0.20 (20Sep2024)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                               Value\n",
       "Complete Geometry                                               True\n",
       "Extents            [1966632.2513, 2066299.3787, 287473.1387, 3540...\n",
       "Geometry Time                                    2024-11-15 07:56:39\n",
       "Title                                 Existing Conditions - GIS Data\n",
       "Version                                           1.0.20 (20Sep2024)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Use HdfPlan for geometry-related operations\n",
    "print(\"\\nExample: Extracting Base Geometry Attributes\")\n",
    "geom_attrs = HdfPlan.get_geometry_information(geom_hdf_path)\n",
    "display(geom_attrs)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:42,807 - ras_commander.HdfStruc - INFO - Calling get_geom_structures_attrs\n",
      "2024-11-15 07:59:42,808 - ras_commander.HdfStruc - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
      "2024-11-15 07:59:42,810 - ras_commander.HdfStruc - ERROR - Error reading geometry structures attributes: type object 'HdfUtils' has no attribute 'hdf5_attrs_to_dict'\n",
      "2024-11-15 07:59:42,811 - ras_commander.HdfStruc - INFO - Finished get_geom_structures_attrs\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Getting geometry structures attributes\n",
      "No geometry structures attributes found.\n"
     ]
    }
   ],
   "source": [
    "# Get geometry structures attributes\n",
    "print(\"\\nGetting geometry structures attributes\")\n",
    "geom_structures_attrs = HdfStruc.get_geom_structures_attrs(geom_hdf_path, ras_object=bald_eagle)\n",
    "if geom_structures_attrs:\n",
    "    print(\"Geometry structures attributes:\")\n",
    "    for key, value in geom_structures_attrs.items():\n",
    "        print(f\"{key}: {value}\")\n",
    "else:\n",
    "    print(\"No geometry structures attributes found.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### NEED TO EDIT THIS TO SHOW BC LINES WITH RIVERS AND CROSS SECTIONS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Example: Extract Boundary Condition Lines and Plot with 2D Flow Area Perimeter Polygons\n",
    "print(\"\\nExample 7: Extracting Boundary Condition Lines and Plotting with 2D Flow Area Perimeter Polygons\")\n",
    "bc_lines_df = HdfBndry.bc_lines(geom_hdf_path, ras_object=bald_eagle)\n",
    "if not bc_lines_df.empty:\n",
    "    display(bc_lines_df.head())\n",
    "else:\n",
    "    print(\"No Boundary Condition Lines found.\")\n",
    "\n",
    "# Plot if data exists\n",
    "if not bc_lines_df.empty or not mesh_areas.empty:\n",
    "    fig, ax = plt.subplots(figsize=(12, 8))\n",
    "    \n",
    "    # Plot 2D Flow Area Perimeter Polygons\n",
    "    if not mesh_areas.empty:\n",
    "        mesh_areas.plot(ax=ax, edgecolor='black', facecolor='none', alpha=0.7, label='2D Flow Area')\n",
    "        \n",
    "        # Add labels for each polygon\n",
    "        for idx, row in mesh_areas.iterrows():\n",
    "            centroid = row.geometry.centroid\n",
    "            label = row.get('Name', f'Area {idx}')\n",
    "            ax.annotate(label, (centroid.x, centroid.y), ha='center', va='center')\n",
    "    \n",
    "    # Plot boundary condition lines\n",
    "    if not bc_lines_df.empty:\n",
    "        bc_lines_df.plot(ax=ax, color='red', linewidth=2, label='Boundary Condition Lines')\n",
    "    \n",
    "    # Set labels and title\n",
    "    ax.set_xlabel('Easting')\n",
    "    ax.set_ylabel('Northing')\n",
    "    ax.set_title('2D Flow Area Perimeter Polygons and Boundary Condition Lines')\n",
    "    \n",
    "    # Add grid and legend\n",
    "    ax.grid(True)\n",
    "    ax.legend()\n",
    "    \n",
    "    # Adjust layout and display\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "else:\n",
    "    print(\"No data available for plotting.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# INSTEAD OF hdf_input, USE plan_hdf_path or geom_hdf_path as appropriate "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:42,827 - ras_commander.HdfStruc - INFO - Calling get_structures\n",
      "2024-11-15 07:59:42,828 - ras_commander.HdfStruc - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
      "2024-11-15 07:59:42,830 - ras_commander.HdfBase - ERROR - Error getting attributes from Geometry/Structures: type object 'HdfUtils' has no attribute 'hdf5_attrs_to_dict'\n",
      "2024-11-15 07:59:42,847 - ras_commander.HdfBase - INFO - Using existing HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
      "2024-11-15 07:59:42,869 - ras_commander.HdfStruc - INFO - Successfully extracted structures GeoDataFrame.\n",
      "2024-11-15 07:59:42,870 - ras_commander.HdfStruc - INFO - Successfully extracted structures GeoDataFrame with attributes.\n",
      "2024-11-15 07:59:42,871 - ras_commander.HdfStruc - INFO - Finished get_structures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Structures:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Type</th>\n",
       "      <th>Mode</th>\n",
       "      <th>River</th>\n",
       "      <th>Reach</th>\n",
       "      <th>RS</th>\n",
       "      <th>Connection</th>\n",
       "      <th>Groupname</th>\n",
       "      <th>US Type</th>\n",
       "      <th>US River</th>\n",
       "      <th>US Reach</th>\n",
       "      <th>...</th>\n",
       "      <th>US XS Mann (Count)</th>\n",
       "      <th>US BR Mann (Index)</th>\n",
       "      <th>US BR Mann (Count)</th>\n",
       "      <th>DS XS Mann (Index)</th>\n",
       "      <th>DS XS Mann (Count)</th>\n",
       "      <th>DS BR Mann (Index)</th>\n",
       "      <th>DS BR Mann (Count)</th>\n",
       "      <th>RC (Index)</th>\n",
       "      <th>RC (Count)</th>\n",
       "      <th>Profile_Data</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bridge</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>103245</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle, Loc Hav (103245)</td>\n",
       "      <td>XS</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Inline</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>81500</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle, Loc Hav (81500)</td>\n",
       "      <td>XS</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>[{'Station': 0.0, 'Elevation': 683.0}, {'Stati...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Bridge</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>75960</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle, Loc Hav (75960)</td>\n",
       "      <td>XS</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Bridge</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>58780</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle, Loc Hav (58780)</td>\n",
       "      <td>XS</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Bridge</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>36713</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle, Loc Hav (36713)</td>\n",
       "      <td>XS</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 162 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Type Mode       River    Reach      RS Connection  \\\n",
       "0  Bridge       Bald Eagle  Loc Hav  103245              \n",
       "1  Inline       Bald Eagle  Loc Hav   81500              \n",
       "2  Bridge       Bald Eagle  Loc Hav   75960              \n",
       "3  Bridge       Bald Eagle  Loc Hav   58780              \n",
       "4  Bridge       Bald Eagle  Loc Hav   36713              \n",
       "\n",
       "                      Groupname US Type    US River US Reach  ...  \\\n",
       "0  Bald Eagle, Loc Hav (103245)      XS  Bald Eagle  Loc Hav  ...   \n",
       "1   Bald Eagle, Loc Hav (81500)      XS  Bald Eagle  Loc Hav  ...   \n",
       "2   Bald Eagle, Loc Hav (75960)      XS  Bald Eagle  Loc Hav  ...   \n",
       "3   Bald Eagle, Loc Hav (58780)      XS  Bald Eagle  Loc Hav  ...   \n",
       "4   Bald Eagle, Loc Hav (36713)      XS  Bald Eagle  Loc Hav  ...   \n",
       "\n",
       "  US XS Mann (Count) US BR Mann (Index) US BR Mann (Count) DS XS Mann (Index)  \\\n",
       "0                  0                  0                  0                  0   \n",
       "1                  0                  0                  0                  0   \n",
       "2                  0                  0                  0                  0   \n",
       "3                  0                  0                  0                  0   \n",
       "4                  0                  0                  0                  0   \n",
       "\n",
       "  DS XS Mann (Count) DS BR Mann (Index) DS BR Mann (Count) RC (Index)  \\\n",
       "0                  0                  0                  0          0   \n",
       "1                  0                  0                  0          0   \n",
       "2                  0                  0                  0          0   \n",
       "3                  0                  0                  0          0   \n",
       "4                  0                  0                  0          0   \n",
       "\n",
       "  RC (Count)                                       Profile_Data  \n",
       "0          0                                                 []  \n",
       "1          0  [{'Station': 0.0, 'Elevation': 683.0}, {'Stati...  \n",
       "2          0                                                 []  \n",
       "3          0                                                 []  \n",
       "4          0                                                 []  \n",
       "\n",
       "[5 rows x 162 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Example: Get structures\n",
    "structures_gdf = HdfStruc.get_structures(geom_hdf_path)\n",
    "print(\"Structures:\")\n",
    "if not structures_gdf.empty:\n",
    "    display(structures_gdf.head())\n",
    "else:\n",
    "    print(\"No structures found in the geometry file.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:42,899 - ras_commander.HdfBndry - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Reference Lines:\n",
      "No reference lines found in the geometry file.\n"
     ]
    }
   ],
   "source": [
    "# Example: Get reference lines\n",
    "ref_lines_gdf = HdfBndry.get_reference_lines(geom_hdf_path, ras_object=bald_eagle)\n",
    "print(\"\\nReference Lines:\")\n",
    "if not ref_lines_gdf.empty:\n",
    "    display(ref_lines_gdf.head())\n",
    "else:\n",
    "    print(\"No reference lines found in the geometry file.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:42,913 - ras_commander.HdfBndry - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Reference Points:\n",
      "No reference points found in the geometry file.\n"
     ]
    }
   ],
   "source": [
    "# Example: Get reference points\n",
    "ref_points_gdf = HdfBndry.get_reference_points(geom_hdf_path, ras_object=bald_eagle)\n",
    "print(\"\\nReference Points:\")\n",
    "if not ref_points_gdf.empty:\n",
    "    display(ref_points_gdf.head())\n",
    "else:\n",
    "    print(\"No reference points found in the geometry file.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:42,927 - ras_commander.HdfBase - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Exploring Cross Sections structure in geometry file:\n",
      "HDF Base Path: /Geometry/Cross Sections \n",
      "\n",
      "Exploring group: /Geometry/Cross Sections\n",
      "\n",
      "\n",
      "    Dataset: /Geometry/Cross Sections/Attributes\n",
      "        Shape: (178,)\n",
      "        Dtype: [('River', 'S16'), ('Reach', 'S16'), ('RS', 'S8'), ('Name', 'S16'), ('Description', 'S512'), ('Len Left', '<f4'), ('Len Channel', '<f4'), ('Len Right', '<f4'), ('Left Bank', '<f4'), ('Right Bank', '<f4'), ('Friction Mode', 'S32'), ('Contr', '<f4'), ('Expan', '<f4'), ('Left Levee Sta', '<f4'), ('Left Levee Elev', '<f4'), ('Right Levee Sta', '<f4'), ('Right Levee Elev', '<f4'), ('HP Count', '<i4'), ('HP Start Elev', '<f4'), ('HP Vert Incr', '<f4'), ('HP LOB Slices', '<i4'), ('HP Chan Slices', '<i4'), ('HP ROB Slices', '<i4'), ('Ineff Block Mode', 'u1'), ('Obstr Block Mode', 'u1'), ('Default Centerline', 'u1'), ('Last Edited', 'S18')]\n",
      "\n",
      "    Group: /Geometry/Cross Sections/Flow Distribution\n",
      "        Dataset: /Geometry/Cross Sections/Flow Distribution/Flow Normalized Shear Factor\n",
      "            Shape: (10942, 23)\n",
      "            Dtype: float32\n",
      "    Attributes for /Geometry/Cross Sections/Flow Distribution/Flow Normalized Shear Factor:\n",
      "        Fraction Shear: b'Multiply by Total Q^2 for Shear'\n",
      "        Units: b'lbf*s^2/ft^8'\n",
      "        Dataset: /Geometry/Cross Sections/Flow Distribution/Flow Normalized Velocity Factor\n",
      "            Shape: (10942, 23)\n",
      "            Dtype: float32\n",
      "    Attributes for /Geometry/Cross Sections/Flow Distribution/Flow Normalized Velocity Factor:\n",
      "        Fraction Velocity: b'Multiply by Total Q for Velocity'\n",
      "        Units: b'1/ft^2'\n",
      "        Dataset: /Geometry/Cross Sections/Flow Distribution/Info\n",
      "            Shape: (178, 3)\n",
      "            Dtype: int32\n",
      "        Dataset: /Geometry/Cross Sections/Flow Distribution/Stations\n",
      "            Shape: (178, 24)\n",
      "            Dtype: float32\n",
      "    Attributes for /Geometry/Cross Sections/Flow Distribution/Stations:\n",
      "        Flow Distribution Stations: b'Flow Distribution station for XSEC'\n",
      "        Dataset: /Geometry/Cross Sections/Flow Distribution/Water Surface\n",
      "            Shape: (10942, 3)\n",
      "            Dtype: float32\n",
      "    Attributes for /Geometry/Cross Sections/Flow Distribution/Water Surface:\n",
      "        Column 1: b'Water Surface Elevation'\n",
      "        Column 2: b'Starting WSEL station for XSEC'\n",
      "        Column 3: b'Ending WSEL station for XSEC'\n",
      "\n",
      "    Dataset: /Geometry/Cross Sections/Ineffective Blocks\n",
      "        Shape: (32,)\n",
      "        Dtype: [('Left Sta', '<f4'), ('Right Sta', '<f4'), ('Elevation', '<f4'), ('Permanent', 'u1')]\n",
      "\n",
      "    Dataset: /Geometry/Cross Sections/Ineffective Info\n",
      "        Shape: (178, 2)\n",
      "        Dtype: int32\n",
      "    Attributes for /Geometry/Cross Sections/Ineffective Info:\n",
      "        Column: [b'Starting Index' b'Count']\n",
      "        Row: b'Feature'\n",
      "\n",
      "    Dataset: /Geometry/Cross Sections/Manning's n Info\n",
      "        Shape: (178, 2)\n",
      "        Dtype: int32\n",
      "    Attributes for /Geometry/Cross Sections/Manning's n Info:\n",
      "        Column: [b'Starting Index' b'Count']\n",
      "        Row: b'Feature'\n",
      "\n",
      "    Dataset: /Geometry/Cross Sections/Manning's n Values\n",
      "        Shape: (534, 2)\n",
      "        Dtype: float32\n",
      "    Attributes for /Geometry/Cross Sections/Manning's n Values:\n",
      "        Column: [b'Station' b'Mann n']\n",
      "        Row: b'Values'\n",
      "\n",
      "    Dataset: /Geometry/Cross Sections/Orthogonal Vectors\n",
      "        Shape: (178, 2)\n",
      "        Dtype: float32\n",
      "\n",
      "    Dataset: /Geometry/Cross Sections/Polyline Info\n",
      "        Shape: (178, 4)\n",
      "        Dtype: int32\n",
      "    Attributes for /Geometry/Cross Sections/Polyline Info:\n",
      "        Column: [b'Point Starting Index' b'Point Count' b'Part Starting Index'\n",
      " b'Part Count']\n",
      "        Feature Type: b'Polyline'\n",
      "        Row: b'Feature'\n",
      "\n",
      "    Dataset: /Geometry/Cross Sections/Polyline Parts\n",
      "        Shape: (178, 2)\n",
      "        Dtype: int32\n",
      "    Attributes for /Geometry/Cross Sections/Polyline Parts:\n",
      "        Column: [b'Point Starting Index' b'Point Count']\n",
      "        Row: b'Part'\n",
      "\n",
      "    Dataset: /Geometry/Cross Sections/Polyline Points\n",
      "        Shape: (536, 2)\n",
      "        Dtype: float64\n",
      "    Attributes for /Geometry/Cross Sections/Polyline Points:\n",
      "        Column: [b'X' b'Y']\n",
      "        Row: b'Points'\n",
      "\n",
      "    Group: /Geometry/Cross Sections/Property Tables\n",
      "        Dataset: /Geometry/Cross Sections/Property Tables/Cell Info\n",
      "            Shape: (178, 2)\n",
      "            Dtype: int32\n",
      "    Attributes for /Geometry/Cross Sections/Property Tables/Cell Info:\n",
      "        Column=: [b'Starting Index' b'Count']\n",
      "        Dataset: /Geometry/Cross Sections/Property Tables/Cell Value\n",
      "            Shape: (11940, 3)\n",
      "            Dtype: float32\n",
      "    Attributes for /Geometry/Cross Sections/Property Tables/Cell Value:\n",
      "        Variables: [[b'Elevation' b'ft']\n",
      " [b'Volume' b'ft^2']\n",
      " [b'Area' b'ft^2']]\n",
      "        Dataset: /Geometry/Cross Sections/Property Tables/XSEC Info\n",
      "            Shape: (179, 3)\n",
      "            Dtype: int32\n",
      "    Attributes for /Geometry/Cross Sections/Property Tables/XSEC Info:\n",
      "        Column=: [b'Starting Index' b'Count' b'DS Cell']\n",
      "        Dataset: /Geometry/Cross Sections/Property Tables/XSEC Value\n",
      "            Shape: (11221, 23)\n",
      "            Dtype: float32\n",
      "    Attributes for /Geometry/Cross Sections/Property Tables/XSEC Value:\n",
      "        Variables: [[b'Elevation' b'ft']\n",
      " [b'Area LOB' b'ft^2']\n",
      " [b'Area Chan' b'ft^2']\n",
      " [b'Area ROB' b'ft^2']\n",
      " [b'Area Ineff LOB' b'ft^2']\n",
      " [b'Area Ineff Chan' b'ft^2']\n",
      " [b'Area Ineff ROB' b'ft^2']\n",
      " [b'Conv LOB' b'cfs']\n",
      " [b'Conv Chan' b'cfs']\n",
      " [b'Conv ROB' b'cfs']\n",
      " [b'WP LOB' b'ft']\n",
      " [b'WP Chan' b'ft']\n",
      " [b'WP ROB' b'ft']\n",
      " [b'Mann N LOB' b'']\n",
      " [b'Mann N Chan' b'']\n",
      " [b'Mann N ROB' b'']\n",
      " [b'Top Width' b'ft']\n",
      " [b'Top Width LOB' b'ft']\n",
      " [b'Top Width Chan' b'ft']\n",
      " [b'Top Width ROB' b'ft']\n",
      " [b'Alpha' b'']\n",
      " [b'Storage Area' b'ft^2']\n",
      " [b'Beta' b'']]\n",
      "\n",
      "    Dataset: /Geometry/Cross Sections/Station Elevation Info\n",
      "        Shape: (178, 2)\n",
      "        Dtype: int32\n",
      "    Attributes for /Geometry/Cross Sections/Station Elevation Info:\n",
      "        Column: [b'Starting Index' b'Count']\n",
      "        Row: b'Feature'\n",
      "\n",
      "    Dataset: /Geometry/Cross Sections/Station Elevation Values\n",
      "        Shape: (24851, 2)\n",
      "        Dtype: float32\n",
      "    Attributes for /Geometry/Cross Sections/Station Elevation Values:\n",
      "        Column: [b'Station' b'Elevation']\n",
      "        Row: b'Points'\n"
     ]
    }
   ],
   "source": [
    "# Use the get_hdf5_dataset_info function from HdfUtils to explore the Cross Sections structure in the geometry HDF file\n",
    "\n",
    "print(\"\\nExploring Cross Sections structure in geometry file:\")\n",
    "print(\"HDF Base Path: /Geometry/Cross Sections \")\n",
    "HdfBase.get_dataset_info(geom_hdf_path, group_path='/Geometry/Cross Sections')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:42,949 - ras_commander.HdfXsec - INFO - Calling get_cross_sections\n",
      "2024-11-15 07:59:42,967 - ras_commander.HdfXsec - INFO - Finished get_cross_sections\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>geometry</th>\n",
       "      <th>station_elevation</th>\n",
       "      <th>mannings_n</th>\n",
       "      <th>ineffective_blocks</th>\n",
       "      <th>River</th>\n",
       "      <th>Reach</th>\n",
       "      <th>RS</th>\n",
       "      <th>Name</th>\n",
       "      <th>Description</th>\n",
       "      <th>Len Left</th>\n",
       "      <th>Len Channel</th>\n",
       "      <th>Len Right</th>\n",
       "      <th>Left Bank</th>\n",
       "      <th>Right Bank</th>\n",
       "      <th>Friction Mode</th>\n",
       "      <th>Contr</th>\n",
       "      <th>Expan</th>\n",
       "      <th>Left Levee Sta</th>\n",
       "      <th>Left Levee Elev</th>\n",
       "      <th>Right Levee Sta</th>\n",
       "      <th>Right Levee Elev</th>\n",
       "      <th>HP Count</th>\n",
       "      <th>HP Start Elev</th>\n",
       "      <th>HP Vert Incr</th>\n",
       "      <th>HP LOB Slices</th>\n",
       "      <th>HP Chan Slices</th>\n",
       "      <th>HP ROB Slices</th>\n",
       "      <th>Ineff Block Mode</th>\n",
       "      <th>Obstr Block Mode</th>\n",
       "      <th>Default Centerline</th>\n",
       "      <th>Last Edited</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>LINESTRING (1968668.17 290166.79, 1969067.87 2...</td>\n",
       "      <td>[[0.0, 660.41], [5.0, 660.61], [40.0, 659.85],...</td>\n",
       "      <td>{'Station': [0.0, 190.0, 375.0], 'Mann n': [0....</td>\n",
       "      <td>[]</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>138154.4</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>358.429993</td>\n",
       "      <td>463.640015</td>\n",
       "      <td>517.640015</td>\n",
       "      <td>190.000000</td>\n",
       "      <td>375.000000</td>\n",
       "      <td>Basic Mann n</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>49</td>\n",
       "      <td>656.799988</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18Sep2000 09:10:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>LINESTRING (1968627.02 290584.12, 1969009.09 2...</td>\n",
       "      <td>[[0.0, 664.28], [50.0, 661.73], [55.0, 661.54]...</td>\n",
       "      <td>{'Station': [0.0, 535.0, 672.5599975585938], '...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>137690.8</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>305.709991</td>\n",
       "      <td>363.839996</td>\n",
       "      <td>382.829987</td>\n",
       "      <td>535.000000</td>\n",
       "      <td>672.559998</td>\n",
       "      <td>Basic Mann n</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>65</td>\n",
       "      <td>654.229980</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18Sep2000 09:10:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>LINESTRING (1968585.88 290854.5, 1968868.02 29...</td>\n",
       "      <td>[[0.0, 662.72], [20.0, 665.5], [25.0, 666.48],...</td>\n",
       "      <td>{'Station': [0.0, 580.0, 717.239990234375], 'M...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>137327.0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>732.929993</td>\n",
       "      <td>762.020020</td>\n",
       "      <td>765.359985</td>\n",
       "      <td>580.000000</td>\n",
       "      <td>717.239990</td>\n",
       "      <td>Basic Mann n</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>66</td>\n",
       "      <td>653.900024</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18Sep2000 09:10:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>LINESTRING (1968521.22 291524.58, 1968903.29 2...</td>\n",
       "      <td>[[0.0, 663.72], [40.0, 669.65], [45.0, 670.46]...</td>\n",
       "      <td>{'Station': [0.0, 530.010009765625, 700.460021...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>136564.9</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>349.609985</td>\n",
       "      <td>362.640015</td>\n",
       "      <td>370.750000</td>\n",
       "      <td>530.010010</td>\n",
       "      <td>700.460022</td>\n",
       "      <td>Basic Mann n</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>38</td>\n",
       "      <td>653.919983</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18Sep2000 09:10:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>LINESTRING (1968468.32 291918.4, 1968715.19 29...</td>\n",
       "      <td>[[0.0, 657.88], [10.0, 657.64], [20.0, 657.23]...</td>\n",
       "      <td>{'Station': [0.0, 539.8900146484375, 714.84002...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>136202.3</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>590.500000</td>\n",
       "      <td>610.859985</td>\n",
       "      <td>647.380005</td>\n",
       "      <td>539.890015</td>\n",
       "      <td>714.840027</td>\n",
       "      <td>Basic Mann n</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>39</td>\n",
       "      <td>653.969971</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18Sep2000 09:10:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>173</th>\n",
       "      <td>LINESTRING (2061688.97 352001.74, 2063053.69 3...</td>\n",
       "      <td>[[90.0, 556.52], [100.5, 557.67], [107.5, 557....</td>\n",
       "      <td>{'Station': [90.0, 923.010009765625, 1364.0100...</td>\n",
       "      <td>[{'Left Sta': 90.0, 'Right Sta': 995.0, 'Eleva...</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>2501.017</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>118.410004</td>\n",
       "      <td>129.190002</td>\n",
       "      <td>86.959999</td>\n",
       "      <td>923.010010</td>\n",
       "      <td>1364.010010</td>\n",
       "      <td>Basic Mann n</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>51</td>\n",
       "      <td>532.210022</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18Sep2000 09:10:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>174</th>\n",
       "      <td>LINESTRING (2061670.21 352090.84, 2063025.55 3...</td>\n",
       "      <td>[[0.0, 551.6], [91.0, 551.38], [129.51, 551.74...</td>\n",
       "      <td>{'Station': [0.0, 934.5, 1358.0], 'Mann n': [0...</td>\n",
       "      <td>[{'Left Sta': 0.0, 'Right Sta': 995.0, 'Elevat...</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>2371.827</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>876.880005</td>\n",
       "      <td>679.190002</td>\n",
       "      <td>422.709991</td>\n",
       "      <td>934.500000</td>\n",
       "      <td>1358.000000</td>\n",
       "      <td>Basic Mann n</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>52</td>\n",
       "      <td>531.530029</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18Sep2000 09:10:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>175</th>\n",
       "      <td>LINESTRING (2063077.13 352972.51, 2063714.94 3...</td>\n",
       "      <td>[[0.0, 548.4], [130.0, 547.37], [215.0, 546.24...</td>\n",
       "      <td>{'Station': [0.0, 750.0, 1060.010009765625], '...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>1692.633</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>576.940002</td>\n",
       "      <td>479.779999</td>\n",
       "      <td>449.200012</td>\n",
       "      <td>750.000000</td>\n",
       "      <td>1060.010010</td>\n",
       "      <td>Basic Mann n</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>58</td>\n",
       "      <td>528.669983</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18Sep2000 09:10:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176</th>\n",
       "      <td>LINESTRING (2063956.46 353190.59, 2064617.71 3...</td>\n",
       "      <td>[[0.0, 547.93], [75.0, 547.5], [145.01, 547.76...</td>\n",
       "      <td>{'Station': [0.0, 350.3800048828125, 650.0], '...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>1212.855</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>526.270020</td>\n",
       "      <td>552.909973</td>\n",
       "      <td>604.830017</td>\n",
       "      <td>350.380005</td>\n",
       "      <td>650.000000</td>\n",
       "      <td>Basic Mann n</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>49</td>\n",
       "      <td>529.250000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18Sep2000 09:10:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>177</th>\n",
       "      <td>LINESTRING (2064505.16 353331.28, 2065091.38 3...</td>\n",
       "      <td>[[0.0, 539.78], [5.0, 539.74], [40.0, 539.28],...</td>\n",
       "      <td>{'Station': [0.0, 216.1300048828125, 595.0], '...</td>\n",
       "      <td>[]</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>659.942</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>259.470001</td>\n",
       "      <td>659.940002</td>\n",
       "      <td>675.309998</td>\n",
       "      <td>216.130005</td>\n",
       "      <td>595.000000</td>\n",
       "      <td>Basic Mann n</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>49</td>\n",
       "      <td>529.650024</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18Sep2000 09:10:52</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>178 rows × 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              geometry  \\\n",
       "0    LINESTRING (1968668.17 290166.79, 1969067.87 2...   \n",
       "1    LINESTRING (1968627.02 290584.12, 1969009.09 2...   \n",
       "2    LINESTRING (1968585.88 290854.5, 1968868.02 29...   \n",
       "3    LINESTRING (1968521.22 291524.58, 1968903.29 2...   \n",
       "4    LINESTRING (1968468.32 291918.4, 1968715.19 29...   \n",
       "..                                                 ...   \n",
       "173  LINESTRING (2061688.97 352001.74, 2063053.69 3...   \n",
       "174  LINESTRING (2061670.21 352090.84, 2063025.55 3...   \n",
       "175  LINESTRING (2063077.13 352972.51, 2063714.94 3...   \n",
       "176  LINESTRING (2063956.46 353190.59, 2064617.71 3...   \n",
       "177  LINESTRING (2064505.16 353331.28, 2065091.38 3...   \n",
       "\n",
       "                                     station_elevation  \\\n",
       "0    [[0.0, 660.41], [5.0, 660.61], [40.0, 659.85],...   \n",
       "1    [[0.0, 664.28], [50.0, 661.73], [55.0, 661.54]...   \n",
       "2    [[0.0, 662.72], [20.0, 665.5], [25.0, 666.48],...   \n",
       "3    [[0.0, 663.72], [40.0, 669.65], [45.0, 670.46]...   \n",
       "4    [[0.0, 657.88], [10.0, 657.64], [20.0, 657.23]...   \n",
       "..                                                 ...   \n",
       "173  [[90.0, 556.52], [100.5, 557.67], [107.5, 557....   \n",
       "174  [[0.0, 551.6], [91.0, 551.38], [129.51, 551.74...   \n",
       "175  [[0.0, 548.4], [130.0, 547.37], [215.0, 546.24...   \n",
       "176  [[0.0, 547.93], [75.0, 547.5], [145.01, 547.76...   \n",
       "177  [[0.0, 539.78], [5.0, 539.74], [40.0, 539.28],...   \n",
       "\n",
       "                                            mannings_n  \\\n",
       "0    {'Station': [0.0, 190.0, 375.0], 'Mann n': [0....   \n",
       "1    {'Station': [0.0, 535.0, 672.5599975585938], '...   \n",
       "2    {'Station': [0.0, 580.0, 717.239990234375], 'M...   \n",
       "3    {'Station': [0.0, 530.010009765625, 700.460021...   \n",
       "4    {'Station': [0.0, 539.8900146484375, 714.84002...   \n",
       "..                                                 ...   \n",
       "173  {'Station': [90.0, 923.010009765625, 1364.0100...   \n",
       "174  {'Station': [0.0, 934.5, 1358.0], 'Mann n': [0...   \n",
       "175  {'Station': [0.0, 750.0, 1060.010009765625], '...   \n",
       "176  {'Station': [0.0, 350.3800048828125, 650.0], '...   \n",
       "177  {'Station': [0.0, 216.1300048828125, 595.0], '...   \n",
       "\n",
       "                                    ineffective_blocks       River    Reach  \\\n",
       "0                                                   []  Bald Eagle  Loc Hav   \n",
       "1                                                   []  Bald Eagle  Loc Hav   \n",
       "2                                                   []  Bald Eagle  Loc Hav   \n",
       "3                                                   []  Bald Eagle  Loc Hav   \n",
       "4                                                   []  Bald Eagle  Loc Hav   \n",
       "..                                                 ...         ...      ...   \n",
       "173  [{'Left Sta': 90.0, 'Right Sta': 995.0, 'Eleva...  Bald Eagle  Loc Hav   \n",
       "174  [{'Left Sta': 0.0, 'Right Sta': 995.0, 'Elevat...  Bald Eagle  Loc Hav   \n",
       "175                                                 []  Bald Eagle  Loc Hav   \n",
       "176                                                 []  Bald Eagle  Loc Hav   \n",
       "177                                                 []  Bald Eagle  Loc Hav   \n",
       "\n",
       "           RS Name Description    Len Left  Len Channel   Len Right  \\\n",
       "0    138154.4                   358.429993   463.640015  517.640015   \n",
       "1    137690.8                   305.709991   363.839996  382.829987   \n",
       "2    137327.0                   732.929993   762.020020  765.359985   \n",
       "3    136564.9                   349.609985   362.640015  370.750000   \n",
       "4    136202.3                   590.500000   610.859985  647.380005   \n",
       "..        ...  ...         ...         ...          ...         ...   \n",
       "173  2501.017                   118.410004   129.190002   86.959999   \n",
       "174  2371.827                   876.880005   679.190002  422.709991   \n",
       "175  1692.633                   576.940002   479.779999  449.200012   \n",
       "176  1212.855                   526.270020   552.909973  604.830017   \n",
       "177   659.942                   259.470001   659.940002  675.309998   \n",
       "\n",
       "      Left Bank   Right Bank Friction Mode  Contr  Expan  Left Levee Sta  \\\n",
       "0    190.000000   375.000000  Basic Mann n    0.1    0.3             NaN   \n",
       "1    535.000000   672.559998  Basic Mann n    0.1    0.3             NaN   \n",
       "2    580.000000   717.239990  Basic Mann n    0.1    0.3             NaN   \n",
       "3    530.010010   700.460022  Basic Mann n    0.1    0.3             NaN   \n",
       "4    539.890015   714.840027  Basic Mann n    0.1    0.3             NaN   \n",
       "..          ...          ...           ...    ...    ...             ...   \n",
       "173  923.010010  1364.010010  Basic Mann n    0.1    0.3             NaN   \n",
       "174  934.500000  1358.000000  Basic Mann n    0.1    0.3             NaN   \n",
       "175  750.000000  1060.010010  Basic Mann n    0.1    0.3             NaN   \n",
       "176  350.380005   650.000000  Basic Mann n    0.1    0.3             NaN   \n",
       "177  216.130005   595.000000  Basic Mann n    0.1    0.3             NaN   \n",
       "\n",
       "     Left Levee Elev  Right Levee Sta  Right Levee Elev  HP Count  \\\n",
       "0                NaN              NaN               NaN        49   \n",
       "1                NaN              NaN               NaN        65   \n",
       "2                NaN              NaN               NaN        66   \n",
       "3                NaN              NaN               NaN        38   \n",
       "4                NaN              NaN               NaN        39   \n",
       "..               ...              ...               ...       ...   \n",
       "173              NaN              NaN               NaN        51   \n",
       "174              NaN              NaN               NaN        52   \n",
       "175              NaN              NaN               NaN        58   \n",
       "176              NaN              NaN               NaN        49   \n",
       "177              NaN              NaN               NaN        49   \n",
       "\n",
       "     HP Start Elev  HP Vert Incr  HP LOB Slices  HP Chan Slices  \\\n",
       "0       656.799988           1.0              5               5   \n",
       "1       654.229980           1.0              5               5   \n",
       "2       653.900024           1.0              5               5   \n",
       "3       653.919983           1.0              5               5   \n",
       "4       653.969971           1.0              5               5   \n",
       "..             ...           ...            ...             ...   \n",
       "173     532.210022           1.0              5               5   \n",
       "174     531.530029           1.0              5               5   \n",
       "175     528.669983           1.0              5               5   \n",
       "176     529.250000           1.0              5               5   \n",
       "177     529.650024           1.0              5               5   \n",
       "\n",
       "     HP ROB Slices  Ineff Block Mode  Obstr Block Mode  Default Centerline  \\\n",
       "0                5                 0                 0                   0   \n",
       "1                5                 0                 0                   0   \n",
       "2                5                 0                 0                   0   \n",
       "3                5                 0                 0                   0   \n",
       "4                5                 0                 0                   0   \n",
       "..             ...               ...               ...                 ...   \n",
       "173              5                 0                 0                   0   \n",
       "174              5                 0                 0                   0   \n",
       "175              5                 0                 0                   0   \n",
       "176              5                 0                 0                   0   \n",
       "177              5                 0                 0                   0   \n",
       "\n",
       "            Last Edited  \n",
       "0    18Sep2000 09:10:52  \n",
       "1    18Sep2000 09:10:52  \n",
       "2    18Sep2000 09:10:52  \n",
       "3    18Sep2000 09:10:52  \n",
       "4    18Sep2000 09:10:52  \n",
       "..                  ...  \n",
       "173  18Sep2000 09:10:52  \n",
       "174  18Sep2000 09:10:52  \n",
       "175  18Sep2000 09:10:52  \n",
       "176  18Sep2000 09:10:52  \n",
       "177  18Sep2000 09:10:52  \n",
       "\n",
       "[178 rows x 31 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Example: Get cross section geodataframe\n",
    "cross_sections_gdf = HdfXsec.get_cross_sections(geom_hdf_path, ras_object=bald_eagle)\n",
    "with pd.option_context('display.max_columns', None):  # Show all columns\n",
    "    display(cross_sections_gdf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "cross_sections_gdf: \n",
    "\n",
    "| geometry | station_elevation | mannings_n | ineffective_blocks | River | Reach | RS | Name | Description | Len Left | Len Channel | Len Right | Left Bank | Right Bank | Friction Mode | Contr | Expan | Left Levee Sta | Left Levee Elev | Right Levee Sta | Right Levee Elev | HP Count | HP Start Elev | HP Vert Incr | HP LOB Slices | HP Chan Slices | HP ROB Slices | Ineff Block Mode | Obstr Block Mode | Default Centerline | Last Edited |\n",
    "|-----------|-------------------|------------|--------------------|-------|-------|----|------|-------------|----------|-------------|-----------|-----------|------------|----------------|-------|-------|----------------|-----------------|----------------|------------------|----------|----------------|---------------|----------------|----------------|----------------|------------------|------------------|-------------------|--------------|\n",
    "| 0         | LINESTRING (1968668.17 290166.79, 1969067.87 2... | [[0.0, 660.41], [5.0, 660.61], [40.0, 659.85],... | {'Station': [0.0, 190.0, 375.0], 'Mann n': [0.... | []    | Bald Eagle | Loc Hav | 138154.4 |             | 358.429993 | 463.640015 | 517.640015 | 190.000000 | 375.000000 | Basic Mann n | 0.1   | 0.3   | NaN            | NaN             | NaN            | NaN              | 49       | 656.799988      | 1.0           | 5              | 5              | 5              | 0                | 0                | 0                 | 18Sep2000 09:10:52 |\n",
    "| 1         | LINESTRING (1968627.02 290584.12, 1969009.09 2... | [[0.0, 664.28], [50.0, 661.73], [55.0, 661.54]... | {'Station': [0.0, 535.0, 672.5599975585938], '... | []    | Bald Eagle | Loc Hav | 137690.8 |             | 305.709991 | 363.839996 | 382.829987 | 535.000000 | 672.559998 | Basic Mann n | 0.1   | 0.3   | NaN            | NaN             | NaN            | NaN              | 65       | 654.229980      | 1.0           | 5              | 5              | 5              | 0                | 0                | 0                 | 18Sep2000 09:10:52 |\n",
    "| 2         | LINESTRING (1968585.88 290854.5, 1968868.02 29... | [[0.0, 662.72], [20.0, 665.5], [25.0, 666.48],... | {'Station': [0.0, 580.0, 717.239990234375], 'M... | []    | Bald Eagle | Loc Hav | 137327.0 |             | 732.929993 | 762.020020 | 765.359985 | 580.000000 | 717.239990 | Basic Mann n | 0.1   | 0.3   | NaN            | NaN             | NaN            | NaN              | 66       | 653.900024      | 1.0           | 5              | 5              | 5              | 0                | 0                | 0                 | 18Sep2000 09:10:52 |\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Cross Sections with Ineffective Flow Areas:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>geometry</th>\n",
       "      <th>station_elevation</th>\n",
       "      <th>mannings_n</th>\n",
       "      <th>ineffective_blocks</th>\n",
       "      <th>River</th>\n",
       "      <th>Reach</th>\n",
       "      <th>RS</th>\n",
       "      <th>Name</th>\n",
       "      <th>Description</th>\n",
       "      <th>Len Left</th>\n",
       "      <th>...</th>\n",
       "      <th>HP Count</th>\n",
       "      <th>HP Start Elev</th>\n",
       "      <th>HP Vert Incr</th>\n",
       "      <th>HP LOB Slices</th>\n",
       "      <th>HP Chan Slices</th>\n",
       "      <th>HP ROB Slices</th>\n",
       "      <th>Ineff Block Mode</th>\n",
       "      <th>Obstr Block Mode</th>\n",
       "      <th>Default Centerline</th>\n",
       "      <th>Last Edited</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>LINESTRING (2009787.46 325935.78, 2010709.8 32...</td>\n",
       "      <td>[[0.0, 603.79], [2.0, 603.17], [4.0, 602.65], ...</td>\n",
       "      <td>{'Station': [0.0, 1434.0, 1680.0], 'Mann n': [...</td>\n",
       "      <td>[{'Left Sta': 0.0, 'Right Sta': 1400.0, 'Eleva...</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>76002.96</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>76.320000</td>\n",
       "      <td>...</td>\n",
       "      <td>24</td>\n",
       "      <td>579.500000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18Sep2000 09:10:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>LINESTRING (2009989.76 325990.64, 2010493.79 3...</td>\n",
       "      <td>[[0.0, 611.14], [6.0, 611.11], [8.0, 611.06], ...</td>\n",
       "      <td>{'Station': [0.0, 1302.0, 1554.0], 'Mann n': [...</td>\n",
       "      <td>[{'Left Sta': 0.0, 'Right Sta': 1280.0, 'Eleva...</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>75917.82</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>335.799988</td>\n",
       "      <td>...</td>\n",
       "      <td>32</td>\n",
       "      <td>579.179993</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18Sep2000 09:10:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>LINESTRING (2022341.9 333784.25, 2023231.41 33...</td>\n",
       "      <td>[[0.0, 600.93], [5.0, 601.88], [35.0, 601.2], ...</td>\n",
       "      <td>{'Station': [0.0, 1390.0, 1600.0], 'Mann n': [...</td>\n",
       "      <td>[{'Left Sta': 0.0, 'Right Sta': 1340.0, 'Eleva...</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>58836.23</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>147.380005</td>\n",
       "      <td>...</td>\n",
       "      <td>63</td>\n",
       "      <td>563.330017</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18Sep2000 09:10:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101</th>\n",
       "      <td>LINESTRING (2022468.97 333892.63, 2023291.21 3...</td>\n",
       "      <td>[[0.0, 593.67], [5.0, 596.7], [9.99, 599.47], ...</td>\n",
       "      <td>{'Station': [0.0, 1290.0, 1540.0], 'Mann n': [...</td>\n",
       "      <td>[{'Left Sta': 0.0, 'Right Sta': 1240.0, 'Eleva...</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>58708.54</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>910.330017</td>\n",
       "      <td>...</td>\n",
       "      <td>60</td>\n",
       "      <td>563.119995</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18Sep2000 09:10:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>130</th>\n",
       "      <td>LINESTRING (2036144.8 344604.68, 2036560.51 34...</td>\n",
       "      <td>[[0.0, 590.5], [5.0, 590.06], [10.0, 589.0], [...</td>\n",
       "      <td>{'Station': [0.0, 810.0, 1035.010009765625], '...</td>\n",
       "      <td>[{'Left Sta': 0.0, 'Right Sta': 803.0, 'Elevat...</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>36769.88</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>195.360001</td>\n",
       "      <td>...</td>\n",
       "      <td>40</td>\n",
       "      <td>550.500000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18Sep2000 09:10:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>131</th>\n",
       "      <td>LINESTRING (2036129.12 344828.22, 2036917.4 34...</td>\n",
       "      <td>[[0.0, 568.29], [5.0, 568.16], [9.99, 567.99],...</td>\n",
       "      <td>{'Station': [0.0, 849.989990234375, 1070.0], '...</td>\n",
       "      <td>[{'Left Sta': 0.0, 'Right Sta': 853.0, 'Elevat...</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>36663.76</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>287.579987</td>\n",
       "      <td>...</td>\n",
       "      <td>23</td>\n",
       "      <td>550.200012</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18Sep2000 09:10:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>144</th>\n",
       "      <td>LINESTRING (2044859.02 348471.56, 2044733.53 3...</td>\n",
       "      <td>[[0.0, 577.16], [14.99, 577.18], [24.99, 577.3...</td>\n",
       "      <td>{'Station': [0.0, 314.989990234375, 878.030029...</td>\n",
       "      <td>[{'Left Sta': 0.0, 'Right Sta': 625.0, 'Elevat...</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>23872.06</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>81.400002</td>\n",
       "      <td>...</td>\n",
       "      <td>33</td>\n",
       "      <td>544.729980</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18Sep2000 09:10:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>LINESTRING (2044913.93 348471.56, 2044811.96 3...</td>\n",
       "      <td>[[0.0, 580.11], [5.0, 580.06], [55.0, 579.05],...</td>\n",
       "      <td>{'Station': [0.0, 634.989990234375, 895.0], 'M...</td>\n",
       "      <td>[{'Left Sta': 0.0, 'Right Sta': 634.9899902343...</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>23783.65</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>346.299988</td>\n",
       "      <td>...</td>\n",
       "      <td>38</td>\n",
       "      <td>542.570007</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18Sep2000 09:10:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>LINESTRING (2047357.2 346922.46, 2046863.06 34...</td>\n",
       "      <td>[[0.0, 572.53], [50.0, 572.02], [55.0, 572.0],...</td>\n",
       "      <td>{'Station': [0.0, 510.0, 825.0], 'Mann n': [0....</td>\n",
       "      <td>[{'Left Sta': 0.0, 'Right Sta': 510.0, 'Elevat...</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>21283.34</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>87.330002</td>\n",
       "      <td>...</td>\n",
       "      <td>37</td>\n",
       "      <td>538.590027</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18Sep2000 09:10:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150</th>\n",
       "      <td>LINESTRING (2047388.58 346844.02, 2046902.28 3...</td>\n",
       "      <td>[[0.0, 563.73], [5.0, 564.17], [10.0, 563.98],...</td>\n",
       "      <td>{'Station': [0.0, 520.010009765625, 815.0], 'M...</td>\n",
       "      <td>[{'Left Sta': 0.0, 'Right Sta': 520.0100097656...</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>21199.93</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>553.090027</td>\n",
       "      <td>...</td>\n",
       "      <td>38</td>\n",
       "      <td>538.229980</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18Sep2000 09:10:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>156</th>\n",
       "      <td>LINESTRING (2052757.51 348942.18, 2052028.06 3...</td>\n",
       "      <td>[[0.0, 554.07], [5.0, 554.08], [7.5, 554.02], ...</td>\n",
       "      <td>{'Station': [0.0, 440.0, 820.0], 'Mann n': [0....</td>\n",
       "      <td>[{'Left Sta': 0.0, 'Right Sta': 200.0, 'Elevat...</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>15407.88</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>407.829987</td>\n",
       "      <td>...</td>\n",
       "      <td>53</td>\n",
       "      <td>531.799988</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18Sep2000 09:10:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>157</th>\n",
       "      <td>LINESTRING (2053149.69 349099.05, 2052710.45 3...</td>\n",
       "      <td>[[0.0, 564.15], [2.5, 563.83], [22.5, 561.94],...</td>\n",
       "      <td>{'Station': [0.0, 340.0, 720.0], 'Mann n': [0....</td>\n",
       "      <td>[{'Left Sta': 0.0, 'Right Sta': 200.0, 'Elevat...</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>14814.34</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>1187.400024</td>\n",
       "      <td>...</td>\n",
       "      <td>60</td>\n",
       "      <td>531.799988</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18Sep2000 09:10:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>159</th>\n",
       "      <td>LINESTRING (2054094.84 350248.13, 2055294.91 3...</td>\n",
       "      <td>[[0.0, 577.16], [40.0, 579.5], [45.0, 579.9], ...</td>\n",
       "      <td>{'Station': [0.0, 1210.0, 1694.0], 'Mann n': [...</td>\n",
       "      <td>[{'Left Sta': 0.0, 'Right Sta': 1160.0, 'Eleva...</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>12035.22</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>205.199997</td>\n",
       "      <td>...</td>\n",
       "      <td>96</td>\n",
       "      <td>535.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18Sep2000 09:10:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>160</th>\n",
       "      <td>LINESTRING (2054283.09 350389.32, 2055114.51 3...</td>\n",
       "      <td>[[0.0, 574.48], [40.0, 574.08], [45.0, 574.31]...</td>\n",
       "      <td>{'Station': [0.0, 1210.0, 1694.0], 'Mann n': [...</td>\n",
       "      <td>[{'Left Sta': 0.0, 'Right Sta': 1160.0, 'Eleva...</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>11865.80</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>812.440002</td>\n",
       "      <td>...</td>\n",
       "      <td>97</td>\n",
       "      <td>535.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18Sep2000 09:10:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>173</th>\n",
       "      <td>LINESTRING (2061688.97 352001.74, 2063053.69 3...</td>\n",
       "      <td>[[90.0, 556.52], [100.5, 557.67], [107.5, 557....</td>\n",
       "      <td>{'Station': [90.0, 923.010009765625, 1364.0100...</td>\n",
       "      <td>[{'Left Sta': 90.0, 'Right Sta': 995.0, 'Eleva...</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>2501.017</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>118.410004</td>\n",
       "      <td>...</td>\n",
       "      <td>51</td>\n",
       "      <td>532.210022</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18Sep2000 09:10:52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>174</th>\n",
       "      <td>LINESTRING (2061670.21 352090.84, 2063025.55 3...</td>\n",
       "      <td>[[0.0, 551.6], [91.0, 551.38], [129.51, 551.74...</td>\n",
       "      <td>{'Station': [0.0, 934.5, 1358.0], 'Mann n': [0...</td>\n",
       "      <td>[{'Left Sta': 0.0, 'Right Sta': 995.0, 'Elevat...</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>2371.827</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>876.880005</td>\n",
       "      <td>...</td>\n",
       "      <td>52</td>\n",
       "      <td>531.530029</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18Sep2000 09:10:52</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>16 rows × 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              geometry  \\\n",
       "81   LINESTRING (2009787.46 325935.78, 2010709.8 32...   \n",
       "82   LINESTRING (2009989.76 325990.64, 2010493.79 3...   \n",
       "100  LINESTRING (2022341.9 333784.25, 2023231.41 33...   \n",
       "101  LINESTRING (2022468.97 333892.63, 2023291.21 3...   \n",
       "130  LINESTRING (2036144.8 344604.68, 2036560.51 34...   \n",
       "131  LINESTRING (2036129.12 344828.22, 2036917.4 34...   \n",
       "144  LINESTRING (2044859.02 348471.56, 2044733.53 3...   \n",
       "145  LINESTRING (2044913.93 348471.56, 2044811.96 3...   \n",
       "149  LINESTRING (2047357.2 346922.46, 2046863.06 34...   \n",
       "150  LINESTRING (2047388.58 346844.02, 2046902.28 3...   \n",
       "156  LINESTRING (2052757.51 348942.18, 2052028.06 3...   \n",
       "157  LINESTRING (2053149.69 349099.05, 2052710.45 3...   \n",
       "159  LINESTRING (2054094.84 350248.13, 2055294.91 3...   \n",
       "160  LINESTRING (2054283.09 350389.32, 2055114.51 3...   \n",
       "173  LINESTRING (2061688.97 352001.74, 2063053.69 3...   \n",
       "174  LINESTRING (2061670.21 352090.84, 2063025.55 3...   \n",
       "\n",
       "                                     station_elevation  \\\n",
       "81   [[0.0, 603.79], [2.0, 603.17], [4.0, 602.65], ...   \n",
       "82   [[0.0, 611.14], [6.0, 611.11], [8.0, 611.06], ...   \n",
       "100  [[0.0, 600.93], [5.0, 601.88], [35.0, 601.2], ...   \n",
       "101  [[0.0, 593.67], [5.0, 596.7], [9.99, 599.47], ...   \n",
       "130  [[0.0, 590.5], [5.0, 590.06], [10.0, 589.0], [...   \n",
       "131  [[0.0, 568.29], [5.0, 568.16], [9.99, 567.99],...   \n",
       "144  [[0.0, 577.16], [14.99, 577.18], [24.99, 577.3...   \n",
       "145  [[0.0, 580.11], [5.0, 580.06], [55.0, 579.05],...   \n",
       "149  [[0.0, 572.53], [50.0, 572.02], [55.0, 572.0],...   \n",
       "150  [[0.0, 563.73], [5.0, 564.17], [10.0, 563.98],...   \n",
       "156  [[0.0, 554.07], [5.0, 554.08], [7.5, 554.02], ...   \n",
       "157  [[0.0, 564.15], [2.5, 563.83], [22.5, 561.94],...   \n",
       "159  [[0.0, 577.16], [40.0, 579.5], [45.0, 579.9], ...   \n",
       "160  [[0.0, 574.48], [40.0, 574.08], [45.0, 574.31]...   \n",
       "173  [[90.0, 556.52], [100.5, 557.67], [107.5, 557....   \n",
       "174  [[0.0, 551.6], [91.0, 551.38], [129.51, 551.74...   \n",
       "\n",
       "                                            mannings_n  \\\n",
       "81   {'Station': [0.0, 1434.0, 1680.0], 'Mann n': [...   \n",
       "82   {'Station': [0.0, 1302.0, 1554.0], 'Mann n': [...   \n",
       "100  {'Station': [0.0, 1390.0, 1600.0], 'Mann n': [...   \n",
       "101  {'Station': [0.0, 1290.0, 1540.0], 'Mann n': [...   \n",
       "130  {'Station': [0.0, 810.0, 1035.010009765625], '...   \n",
       "131  {'Station': [0.0, 849.989990234375, 1070.0], '...   \n",
       "144  {'Station': [0.0, 314.989990234375, 878.030029...   \n",
       "145  {'Station': [0.0, 634.989990234375, 895.0], 'M...   \n",
       "149  {'Station': [0.0, 510.0, 825.0], 'Mann n': [0....   \n",
       "150  {'Station': [0.0, 520.010009765625, 815.0], 'M...   \n",
       "156  {'Station': [0.0, 440.0, 820.0], 'Mann n': [0....   \n",
       "157  {'Station': [0.0, 340.0, 720.0], 'Mann n': [0....   \n",
       "159  {'Station': [0.0, 1210.0, 1694.0], 'Mann n': [...   \n",
       "160  {'Station': [0.0, 1210.0, 1694.0], 'Mann n': [...   \n",
       "173  {'Station': [90.0, 923.010009765625, 1364.0100...   \n",
       "174  {'Station': [0.0, 934.5, 1358.0], 'Mann n': [0...   \n",
       "\n",
       "                                    ineffective_blocks       River    Reach  \\\n",
       "81   [{'Left Sta': 0.0, 'Right Sta': 1400.0, 'Eleva...  Bald Eagle  Loc Hav   \n",
       "82   [{'Left Sta': 0.0, 'Right Sta': 1280.0, 'Eleva...  Bald Eagle  Loc Hav   \n",
       "100  [{'Left Sta': 0.0, 'Right Sta': 1340.0, 'Eleva...  Bald Eagle  Loc Hav   \n",
       "101  [{'Left Sta': 0.0, 'Right Sta': 1240.0, 'Eleva...  Bald Eagle  Loc Hav   \n",
       "130  [{'Left Sta': 0.0, 'Right Sta': 803.0, 'Elevat...  Bald Eagle  Loc Hav   \n",
       "131  [{'Left Sta': 0.0, 'Right Sta': 853.0, 'Elevat...  Bald Eagle  Loc Hav   \n",
       "144  [{'Left Sta': 0.0, 'Right Sta': 625.0, 'Elevat...  Bald Eagle  Loc Hav   \n",
       "145  [{'Left Sta': 0.0, 'Right Sta': 634.9899902343...  Bald Eagle  Loc Hav   \n",
       "149  [{'Left Sta': 0.0, 'Right Sta': 510.0, 'Elevat...  Bald Eagle  Loc Hav   \n",
       "150  [{'Left Sta': 0.0, 'Right Sta': 520.0100097656...  Bald Eagle  Loc Hav   \n",
       "156  [{'Left Sta': 0.0, 'Right Sta': 200.0, 'Elevat...  Bald Eagle  Loc Hav   \n",
       "157  [{'Left Sta': 0.0, 'Right Sta': 200.0, 'Elevat...  Bald Eagle  Loc Hav   \n",
       "159  [{'Left Sta': 0.0, 'Right Sta': 1160.0, 'Eleva...  Bald Eagle  Loc Hav   \n",
       "160  [{'Left Sta': 0.0, 'Right Sta': 1160.0, 'Eleva...  Bald Eagle  Loc Hav   \n",
       "173  [{'Left Sta': 90.0, 'Right Sta': 995.0, 'Eleva...  Bald Eagle  Loc Hav   \n",
       "174  [{'Left Sta': 0.0, 'Right Sta': 995.0, 'Elevat...  Bald Eagle  Loc Hav   \n",
       "\n",
       "           RS Name Description     Len Left  ...  HP Count  HP Start Elev  \\\n",
       "81   76002.96                     76.320000  ...        24     579.500000   \n",
       "82   75917.82                    335.799988  ...        32     579.179993   \n",
       "100  58836.23                    147.380005  ...        63     563.330017   \n",
       "101  58708.54                    910.330017  ...        60     563.119995   \n",
       "130  36769.88                    195.360001  ...        40     550.500000   \n",
       "131  36663.76                    287.579987  ...        23     550.200012   \n",
       "144  23872.06                     81.400002  ...        33     544.729980   \n",
       "145  23783.65                    346.299988  ...        38     542.570007   \n",
       "149  21283.34                     87.330002  ...        37     538.590027   \n",
       "150  21199.93                    553.090027  ...        38     538.229980   \n",
       "156  15407.88                    407.829987  ...        53     531.799988   \n",
       "157  14814.34                   1187.400024  ...        60     531.799988   \n",
       "159  12035.22                    205.199997  ...        96     535.000000   \n",
       "160  11865.80                    812.440002  ...        97     535.000000   \n",
       "173  2501.017                    118.410004  ...        51     532.210022   \n",
       "174  2371.827                    876.880005  ...        52     531.530029   \n",
       "\n",
       "     HP Vert Incr  HP LOB Slices HP Chan Slices  HP ROB Slices  \\\n",
       "81            1.0              5              5              5   \n",
       "82            1.0              5              5              5   \n",
       "100           1.0              5              5              5   \n",
       "101           1.0              5              5              5   \n",
       "130           1.0              5              5              5   \n",
       "131           1.0              5              5              5   \n",
       "144           1.0              5              5              5   \n",
       "145           1.0              5              5              5   \n",
       "149           1.0              5              5              5   \n",
       "150           1.0              5              5              5   \n",
       "156           1.0              5              5              5   \n",
       "157           1.0              5              5              5   \n",
       "159           1.0              5              5              5   \n",
       "160           1.0              5              5              5   \n",
       "173           1.0              5              5              5   \n",
       "174           1.0              5              5              5   \n",
       "\n",
       "     Ineff Block Mode  Obstr Block Mode  Default Centerline  \\\n",
       "81                  0                 0                   0   \n",
       "82                  0                 0                   0   \n",
       "100                 0                 0                   0   \n",
       "101                 0                 0                   0   \n",
       "130                 0                 0                   0   \n",
       "131                 0                 0                   0   \n",
       "144                 0                 0                   0   \n",
       "145                 0                 0                   0   \n",
       "149                 0                 0                   0   \n",
       "150                 0                 0                   0   \n",
       "156                 0                 0                   0   \n",
       "157                 0                 0                   0   \n",
       "159                 0                 0                   0   \n",
       "160                 0                 0                   0   \n",
       "173                 0                 0                   0   \n",
       "174                 0                 0                   0   \n",
       "\n",
       "            Last Edited  \n",
       "81   18Sep2000 09:10:52  \n",
       "82   18Sep2000 09:10:52  \n",
       "100  18Sep2000 09:10:52  \n",
       "101  18Sep2000 09:10:52  \n",
       "130  18Sep2000 09:10:52  \n",
       "131  18Sep2000 09:10:52  \n",
       "144  18Sep2000 09:10:52  \n",
       "145  18Sep2000 09:10:52  \n",
       "149  18Sep2000 09:10:52  \n",
       "150  18Sep2000 09:10:52  \n",
       "156  18Sep2000 09:10:52  \n",
       "157  18Sep2000 09:10:52  \n",
       "159  18Sep2000 09:10:52  \n",
       "160  18Sep2000 09:10:52  \n",
       "173  18Sep2000 09:10:52  \n",
       "174  18Sep2000 09:10:52  \n",
       "\n",
       "[16 rows x 31 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "# Filter rows where ineffective_blocks is not empty\n",
    "ineffective_xs = cross_sections_gdf[cross_sections_gdf['ineffective_blocks'].apply(len) > 0]\n",
    "\n",
    "print(\"\\nCross Sections with Ineffective Flow Areas:\")\n",
    "display(ineffective_xs)\n",
    "\n",
    "# Print a message if no cross sections with ineffective flow areas are found\n",
    "print(\"\\nNo cross sections found with ineffective flow areas.\" if ineffective_xs.empty else \"\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Cross Section Information:\n",
      "\n",
      "Cross Section 1:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1968668.17 290166.79, 1969067.87 289778.85)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     660.41         9     190.00     660.21        17     330.00     660.95        25     410.00     671.32        33     480.00     695.50    \n",
      "     2       5.00     660.61        10     195.00     658.98        18     340.00     659.56        26     415.00     672.91        34     485.00     696.55    \n",
      "     3      40.00     659.85        11     197.96     657.39        19     345.00     658.84        27     430.00     678.12        35     514.99     701.46    \n",
      "     4      55.00     659.39        12     200.00     656.30        20     350.00     658.28        28     440.00     683.19        36     520.00     702.14    \n",
      "     5      60.00     659.21        13     305.00     657.15        21     361.39     662.03        29     445.00     685.60        37     525.00     702.64    \n",
      "     6      90.00     658.45        14     310.00     657.68        22     375.00     666.52        30     455.00     688.70        38     530.00     703.31    \n",
      "     7      95.00     658.48        15     320.00     660.58        23     380.00     667.51        31     460.00     689.95        39     535.00     703.91    \n",
      "     8     130.00     659.60        16     324.99     661.39        24     385.00     668.12        32     475.00     694.17        40     557.01     706.27    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 2:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1968627.02 290584.12, 1969009.09 290343.13, 1969273.59 290290.23, 1969408.78 290290.23)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     664.28         9     295.00     659.39        17     460.01     660.06        25     565.00     654.38        33     735.00     694.24    \n",
      "     2      50.00     661.73        10     305.00     659.09        18     465.00     660.27        26     570.00     653.73        34     765.00     700.36    \n",
      "     3      55.00     661.54        11     310.00     659.11        19     510.00     659.64        27     650.00     655.99        35     770.00     701.23    \n",
      "     4     160.00     658.65        12     330.01     659.32        20     520.00     659.96        28     655.00     656.16        36     785.00     703.53    \n",
      "     5     165.00     658.65        13     335.00     659.33        21     525.01     660.29        29     660.00     658.06        37     790.00     704.42    \n",
      "     6     180.01     658.79        14     395.00     659.03        22     530.00     660.72        30     672.56     664.59        38     856.65     719.10    \n",
      "     7     250.00     658.98        15     450.00     659.45        23     535.00     660.79        31     705.00     681.46    \n",
      "     8     290.01     659.45        16     451.72     659.56        24     539.95     659.73        32     721.46     689.01    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 3:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1968585.88 290854.5, 1968868.02 290736.95, 1969085.5 290672.29, 1969391.15 290672.29)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     662.72         9     305.65     659.33        17     515.00     659.58        25     584.22     658.51        33     745.00     681.14    \n",
      "     2      20.00     665.50        10     385.00     659.68        18     520.00     659.38        26     585.00     658.36        34     750.00     684.43    \n",
      "     3      25.00     666.48        11     390.00     659.67        19     524.99     658.80        27     590.00     656.91        35     770.00     697.71    \n",
      "     4      59.99     664.56        12     420.00     659.08        20     530.00     658.50        28     600.00     653.66        36     795.00     711.50    \n",
      "     5      65.00     664.33        13     455.00     659.67        21     532.54     658.45        29     605.00     653.40        37     800.00     714.13    \n",
      "     6     250.00     659.04        14     460.00     659.72        22     550.00     658.12        30     705.00     656.01        38     815.00     716.88    \n",
      "     7     254.99     658.93        15     465.00     659.69        23     555.00     658.23        31     710.00     659.27        39     820.00     717.76    \n",
      "     8     295.00     659.31        16     485.00     659.78        24     580.00     659.30        32     717.24     663.79        40     838.19     719.88    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 4:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1968521.22 291524.58, 1968903.29 291424.66, 1969291.23 291430.54)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     663.72         8     215.01     666.57        15     465.00     658.84        22     680.00     657.03        29     745.00     687.30    \n",
      "     2      40.00     669.65         9     265.00     663.38        16     500.00     659.32        23     685.00     659.22        30     755.00     688.84    \n",
      "     3      45.00     670.46        10     270.00     662.78        17     530.01     659.56        24     700.00     667.37        31     760.00     689.50    \n",
      "     4      50.01     671.71        11     340.00     659.16        18     534.80     657.07        25     700.46     667.61        32     765.00     690.11    \n",
      "     5      55.00     671.42        12     390.00     658.75        19     535.01     656.96        26     715.00     675.36        33     775.00     691.22    \n",
      "     6      60.00     671.18        13     394.92     658.68        20     540.00     653.42        27     720.00     677.43        34     780.00     691.60    \n",
      "     7     210.00     666.85        14     420.00     658.46        21     675.00     655.83        28     735.00     683.26        35     782.90     691.71    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 5:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1968468.32 291918.4, 1968715.19 291753.82, 1969255.96 291800.84)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     657.88        15     165.00     667.24        29     360.00     655.61        43     525.00     656.70        57     714.84     663.86    \n",
      "     2      10.00     657.64        16     200.00     656.24        30     365.00     656.53        44     530.00     656.78        58     765.00     684.05    \n",
      "     3      20.00     657.23        17     205.00     655.79        31     390.00     657.64        45     535.00     656.89        59     770.00     685.79    \n",
      "     4      30.00     658.54        18     240.00     657.03        32     395.00     657.76        46     539.89     657.03        60     775.00     686.34    \n",
      "     5      35.00     659.00        19     245.00     657.12        33     410.00     657.39        47     540.01     657.03        61     780.00     686.92    \n",
      "     6      50.00     659.66        20     255.00     657.01        34     415.01     657.42        48     545.00     656.56        62     810.00     690.98    \n",
      "     7      90.00     657.38        21     280.00     656.52        35     430.00     658.08        49     550.00     654.30        63     825.00     692.86    \n",
      "     8      95.00     657.17        22     285.01     656.50        36     435.00     658.10        50     555.00     653.47        64     830.01     692.34    \n",
      "     9     125.00     665.26        23     296.70     656.66        37     445.00     657.95        51     670.00     654.48        65     835.00     691.78    \n",
      "    10     130.00     666.37        24     330.01     657.03        38     480.00     657.92        52     690.00     654.75        66     839.51     691.35    \n",
      "    11     140.00     668.18        25     335.01     656.85        39     485.00     657.80        53     695.00     655.55    \n",
      "    12     145.00     669.24        26     340.00     656.28        40     505.00     656.92        54     700.00     657.67    \n",
      "    13     150.00     671.49        27     350.00     655.05        41     510.00     656.77        55     705.01     659.87    \n",
      "    14     155.00     671.14        28     355.00     654.61        42     515.00     656.69        56     710.00     661.91    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 6:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1968485.96 292294.59, 1968820.99 292335.73, 1969114.89 292423.9, 1969355.88 292429.78)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     658.40        18     249.99     656.55        35     395.00     652.54        52     567.13     672.19        69     759.99     653.86    \n",
      "     2       9.99     658.49        19     265.00     657.44        36     399.99     652.34        53     570.00     672.59        70     764.99     656.19    \n",
      "     3      14.99     658.23        20     268.29     657.66        37     419.99     652.34        54     574.99     672.85        71     769.99     656.47    \n",
      "     4      20.00     657.69        21     269.99     657.78        38     425.00     652.59        55     610.00     668.46        72     775.00     656.71    \n",
      "     5      25.00     657.38        22     285.00     656.93        39     435.00     653.68        56     615.00     667.32        73     789.99     657.55    \n",
      "     6     155.00     657.37        23     289.99     655.71        40     440.00     653.81        57     625.00     664.96        74     794.99     657.33    \n",
      "     7     170.00     657.21        24     295.00     654.01        41     445.00     652.07        58     629.99     663.53        75     820.00     654.38    \n",
      "     8     174.99     657.62        25     300.00     652.21        42     495.00     653.51        59     634.99     662.03        76     824.99     653.91    \n",
      "     9     179.99     658.28        26     304.99     651.77        43     500.00     653.75        60     639.99     660.27        77     829.99     654.07    \n",
      "    10     185.00     659.13        27     337.55     651.82        44     505.00     654.78        61     644.39     658.87        78     834.99     654.32    \n",
      "    11     190.00     659.73        28     349.99     651.83        45     510.00     654.69        62     650.00     656.73        79     840.00     655.33    \n",
      "    12     194.99     659.81        29     354.99     652.61        46     514.99     653.79        63     654.99     656.10        80     845.00     655.83    \n",
      "    13     199.99     659.36        30     359.99     654.39        47     519.99     652.70        64     685.00     655.76        81     850.00     656.37    \n",
      "    14     205.00     658.86        31     364.99     654.36        48     524.99     652.74        65     689.99     655.43        82     855.00     657.02    \n",
      "    15     210.00     658.18        32     375.00     653.95        49     529.99     652.84        66     694.99     653.61        83     859.99     658.72    \n",
      "    16     225.00     655.88        33     380.00     653.77        50     560.00     666.11        67     699.99     652.34        84     885.45     671.04    \n",
      "    17     245.00     656.36        34     385.00     653.51        51     565.00     671.90        68     754.99     652.34    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 7:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1968177.37 293091.04, 1969106.07 292785.39, 1969394.09 292814.78)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     664.93        16     410.00     658.11        31     749.99     652.93        46    1025.00     654.38        61    1185.00     654.63    \n",
      "     2      14.99     665.03        17     450.00     656.38        32     754.99     652.36        47    1029.99     654.52        62    1190.00     653.63    \n",
      "     3      94.99     663.25        18     454.99     656.20        33     800.00     652.98        48    1035.00     653.93        63    1205.00     653.63    \n",
      "     4     119.99     662.84        19     475.00     656.19        34     864.99     653.24        49    1040.00     652.47        64    1209.99     654.37    \n",
      "     5     135.00     662.37        20     500.00     654.86        35     870.00     653.32        50    1044.99     652.01        65    1215.00     658.01    \n",
      "     6     179.99     661.48        21     504.99     654.63        36     875.00     653.78        51    1065.00     652.01        66    1220.00     662.80    \n",
      "     7     230.00     660.95        22     509.99     654.55        37     890.00     655.28        52    1070.00     652.75        67    1224.99     669.49    \n",
      "     8     259.99     660.18        23     655.00     654.37        38     894.78     655.57        53    1075.00     654.40        68    1230.00     671.45    \n",
      "     9     274.99     659.70        24     674.99     654.47        39     895.00     655.58        54    1079.99     655.52        69    1234.99     673.10    \n",
      "    10     279.99     659.60        25     684.99     654.36        40     929.99     656.58        55    1100.00     655.57        70    1240.00     673.71    \n",
      "    11     320.00     659.30        26     689.99     654.33        41     950.00     656.18        56    1104.99     655.61        71    1259.99     671.09    \n",
      "    12     325.00     659.23        27     730.00     654.93        42     960.00     656.08        57    1149.99     656.41        72    1265.00     670.52    \n",
      "    13     364.99     657.77        28     735.00     655.44        43     977.70     655.62        58    1160.00     656.43        73    1267.22     670.33    \n",
      "    14     370.00     657.80        29     740.00     656.09        44    1015.00     654.51        59    1174.99     656.53    \n",
      "    15     405.00     658.19        30     743.22     655.07        45    1019.99     654.43        60    1180.00     655.78    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 8:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1968594.7 293702.34, 1969164.85 293402.57, 1969564.55 293055.77)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     669.08        15     319.99     656.93        29     675.00     655.00        43     910.00     652.70        57    1120.00     657.10    \n",
      "     2       5.00     669.03        16     374.99     655.44        30     679.99     654.99        44     914.99     653.51        58    1124.99     657.17    \n",
      "     3      10.00     667.24        17     419.99     655.68        31     685.00     655.03        45     923.53     654.18        59    1130.00     657.35    \n",
      "     4      20.00     663.53        18     425.00     655.76        32     711.74     655.40        46     925.00     654.30        60    1135.00     657.59    \n",
      "     5      24.99     661.37        19     430.00     655.71        33     730.00     655.66        47     929.99     654.65        61    1139.99     657.97    \n",
      "     6      30.00     661.34        20     460.00     655.10        34     735.00     654.77        48    1015.00     655.69        62    1154.99     667.81    \n",
      "     7      50.00     661.64        21     464.99     654.96        35     745.00     652.30        49    1019.99     655.80        63    1160.00     670.70    \n",
      "     8      69.99     661.80        22     469.99     654.86        36     750.00     651.20        50    1034.99     656.93        64    1164.99     673.15    \n",
      "     9      75.00     661.80        23     480.00     654.73        37     869.99     651.06        51    1040.00     655.91        65    1169.99     675.43    \n",
      "    10     125.00     660.22        24     520.00     655.04        38     880.00     651.28        52    1049.99     653.69        66    1173.33     675.19    \n",
      "    11     170.00     658.50        25     600.00     655.07        39     889.99     651.13        53    1055.00     653.37    \n",
      "    12     244.99     657.51        26     634.99     655.41        40     895.00     651.12        54    1070.00     654.40    \n",
      "    13     264.99     656.86        27     640.00     655.43        41     899.99     651.36        55    1075.00     655.04    \n",
      "    14     270.00     656.82        28     644.15     655.39        42     904.99     652.01        56    1094.99     657.01    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 9:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1969135.46 294207.84, 1969670.35 293696.46, 1969993.63 293461.35)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     665.68        12     280.00     654.45        23     655.00     652.94        34     820.00     649.65        45    1030.00     652.89    \n",
      "     2      15.00     660.13        13     285.00     654.42        24     715.00     652.94        35     820.27     649.65        46    1035.00     652.36    \n",
      "     3      20.00     658.03        14     325.00     653.61        25     735.00     652.76        36     955.00     649.40        47    1040.00     653.23    \n",
      "     4      25.00     656.71        15     330.00     653.64        26     740.01     652.46        37     960.01     650.33        48    1045.00     654.16    \n",
      "     5      50.00     655.30        16     375.00     654.63        27     745.00     651.96        38     965.00     651.61        49    1050.00     655.20    \n",
      "     6      55.01     654.97        17     380.00     654.61        28     750.00     652.01        39     970.00     652.56        50    1075.00     657.68    \n",
      "     7      70.00     653.89        18     435.00     653.87        29     780.00     654.02        40     985.00     653.23        51    1100.00     660.60    \n",
      "     8      75.00     653.65        19     475.01     653.48        30     785.00     654.43        41     986.79     653.35        52    1105.00     661.76    \n",
      "     9     120.01     654.39        20     530.00     653.84        31     805.00     656.31        42     990.01     653.56        53    1120.00     667.92    \n",
      "    10     150.00     654.15        21     560.00     653.80        32     810.00     652.82        43    1010.00     657.05        54    1135.00     673.88    \n",
      "    11     195.00     654.50        22     615.00     653.36        33     815.01     649.69        44    1015.01     656.19        55    1139.74     675.02    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 10:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1969546.91 294507.61, 1969934.85 294043.26, 1970205.24 293825.78, 1970287.53 293620.05)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     664.63        17     170.00     653.10        33     620.00     651.26        49     830.00     650.14        65     952.08     667.84    \n",
      "     2       5.00     664.98        18     185.00     652.95        34     625.01     651.21        50     835.00     650.52        66     970.01     668.96    \n",
      "     3      10.00     663.97        19     190.00     652.87        35     635.00     651.34        51     845.00     653.74        67     995.01     670.19    \n",
      "     4      15.00     662.32        20     225.00     652.05        36     650.01     651.74        52     846.56     654.23        68    1005.00     670.53    \n",
      "     5      20.01     661.29        21     230.01     651.96        37     655.00     651.90        53     850.00     655.31        69    1010.01     670.62    \n",
      "     6      25.00     660.23        22     275.00     653.33        38     670.00     652.61        54     860.00     658.21        70    1035.01     670.63    \n",
      "     7      40.00     654.97        23     430.00     652.97        39     685.00     652.71        55     865.00     657.41        71    1090.00     671.78    \n",
      "     8      45.00     653.36        24     445.00     652.82        40     690.01     652.81        56     880.00     653.50        72    1095.01     671.92    \n",
      "     9      50.00     653.39        25     485.00     652.78        41     705.00     653.21        57     885.00     653.10        73    1100.01     672.09    \n",
      "    10      60.00     653.18        26     510.00     652.86        42     710.00     652.74        58     895.00     655.04        74    1105.00     672.34    \n",
      "    11      65.00     653.10        27     515.00     652.84        43     725.00     650.33        59     900.00     655.94        75    1135.00     674.73    \n",
      "    12      70.00     653.07        28     555.00     652.17        44     726.26     650.10        60     905.01     656.70        76    1140.01     675.10    \n",
      "    13      80.00     652.89        29     560.00     652.13        45     735.00     648.51        61     910.00     658.31        77    1170.00     677.06    \n",
      "    14     110.00     652.70        30     585.00     652.08        46     740.00     648.49        62     915.01     659.99        78    1173.65     677.09    \n",
      "    15     115.00     652.73        31     590.00     652.00        47     810.00     649.44        63     935.00     666.13    \n",
      "    16     145.00     653.19        32     605.08     651.61        48     815.00     649.57        64     940.01     667.24    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 11:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1969843.75 294798.57, 1970208.18 294410.63, 1970502.07 294199.02, 1970784.21 293693.52)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     660.19        31     185.00     655.31        61     400.00     652.12        91     640.00     651.03       121    1030.00     655.16    \n",
      "     2       5.00     660.17        32     200.00     655.22        62     405.00     650.96        92     644.99     649.59       122    1045.00     655.16    \n",
      "     3      10.00     660.07        33     205.01     655.16        63     410.00     651.57        93     645.31     649.50       123    1050.00     655.19    \n",
      "     4      15.01     659.92        34     220.00     654.86        64     415.00     652.47        94     650.00     648.24       124    1060.00     655.18    \n",
      "     5      20.00     659.59        35     225.00     654.72        65     420.00     653.20        95     774.99     648.34       125    1064.99     655.24    \n",
      "     6      24.99     658.90        36     245.00     654.61        66     425.00     653.25        96     780.00     648.55       126    1075.00     655.59    \n",
      "     7      35.00     658.72        37     250.00     654.54        67     430.00     653.40        97     785.00     650.55       127    1080.00     655.68    \n",
      "     8      40.00     659.04        38     255.00     654.29        68     435.00     653.43        98     790.00     651.53       128    1085.00     655.65    \n",
      "     9      45.00     659.42        39     260.00     653.76        69     445.00     653.22        99     805.00     651.97       129    1089.99     654.99    \n",
      "    10      50.00     659.73        40     265.00     653.33        70     470.00     652.16       100     810.00     652.01       130    1095.00     654.48    \n",
      "    11      55.00     660.66        41     275.00     652.58        71     475.00     652.04       101     820.00     651.98       131    1104.99     656.38    \n",
      "    12      60.00     662.46        42     280.00     652.42        72     495.00     653.01       102     822.11     652.00       132    1110.00     657.18    \n",
      "    13      65.00     663.48        43     285.00     652.83        73     500.01     653.20       103     839.99     652.17       133    1115.00     657.33    \n",
      "    14      75.00     665.38        44     290.00     653.16        74     505.00     653.27       104     845.00     652.16       134    1120.00     657.42    \n",
      "    15      80.00     666.13        45     300.00     653.24        75     532.27     652.99       105     890.00     651.78       135    1130.00     655.21    \n",
      "    16     110.00     664.97        46     305.00     652.65        76     535.00     652.69       106     894.41     651.70       136    1135.00     654.22    \n",
      "    17     115.00     664.01        47     310.01     652.48        77     540.00     651.39       107     900.00     651.68       137    1139.99     654.61    \n",
      "    18     120.00     662.94        48     315.00     652.53        78     545.00     650.47       108     920.00     651.44       138    1230.00     662.46    \n",
      "    19     125.00     658.81        49     330.00     652.57        79     550.00     649.95       109     925.00     651.35       139    1355.00     670.80    \n",
      "    20     130.00     656.75        50     335.00     652.61        80     570.00     649.95       110     930.00     651.44       140    1360.00     671.24    \n",
      "    21     135.00     658.30        51     340.00     653.23        81     575.00     650.83       111     950.00     651.58       141    1370.00     672.28    \n",
      "    22     140.00     656.68        52     345.00     654.11        82     579.99     652.92       112     964.99     651.92       142    1380.00     674.16    \n",
      "    23     145.01     656.56        53     350.00     654.65        83     585.00     652.43       113     979.99     652.45       143    1385.00     674.75    \n",
      "    24     150.00     656.65        54     355.00     654.59        84     590.00     651.75       114     985.00     652.81       144    1430.00     673.86    \n",
      "    25     155.00     656.79        55     360.00     654.25        85     595.00     651.25       115     990.00     653.11       145    1465.00     672.37    \n",
      "    26     160.00     656.90        56     365.00     653.72        86     605.00     651.00       116     995.00     652.28       146    1470.00     672.49    \n",
      "    27     165.00     656.77        57     370.00     653.47        87     610.00     650.82       117    1005.00     651.15       147    1473.32     672.70    \n",
      "    28     170.00     656.42        58     375.00     653.36        88     615.00     650.69       118    1010.00     652.39    \n",
      "    29     175.00     656.02        59     385.00     653.07        89     630.00     651.49       119    1020.00     654.73    \n",
      "    30     180.00     655.47        60     395.00     652.90        90     635.00     651.81       120    1025.00     655.37    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 12:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1970366.88 295115.97, 1970602 294845.59, 1970919.4 294645.74, 1971225.05 294298.95, 1971336.73 293993.3)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     753.43        25     270.00     651.56        49     605.00     654.25        73     779.99     657.47        97    1134.99     660.77    \n",
      "     2       5.00     747.81        26     294.99     650.73        50     609.99     654.20        74     784.99     657.30        98    1170.00     663.17    \n",
      "     3       9.99     742.53        27     300.00     650.63        51     614.99     653.19        75     800.00     657.05        99    1175.00     663.68    \n",
      "     4      35.00     724.59        28     335.00     650.63        52     620.00     652.39        76     805.00     656.88       100    1195.65     665.94    \n",
      "     5      40.00     720.86        29     340.00     650.66        53     625.00     651.74        77     824.99     655.95       101    1199.99     666.56    \n",
      "     6      45.00     716.83        30     358.31     651.19        54     640.00     650.43        78     829.99     655.75       102    1220.00     667.86    \n",
      "     7      50.00     712.67        31     385.00     651.89        55     644.99     650.02        79     845.00     655.60       103    1224.99     668.52    \n",
      "     8      74.99     691.14        32     389.99     652.09        56     654.99     650.66        80     849.99     655.58       104    1260.00     673.65    \n",
      "     9      79.99     686.96        33     399.99     652.54        57     680.00     652.56        81     899.99     656.86       105    1264.99     674.32    \n",
      "    10      85.00     683.83        34     405.00     652.51        58     684.99     652.90        82     905.00     656.79       106    1270.00     674.58    \n",
      "    11     110.00     667.87        35     410.00     652.30        59     690.00     653.17        83     945.00     655.75       107    1319.99     675.81    \n",
      "    12     115.00     665.13        36     416.92     651.31        60     705.00     652.47        84     969.99     654.90       108    1324.99     675.90    \n",
      "    13     120.00     664.68        37     444.99     647.29        61     710.00     652.28        85     974.99     654.83       109    1330.00     675.13    \n",
      "    14     124.99     663.18        38     450.00     646.86        62     715.00     651.65        86    1019.99     654.38       110    1334.99     673.98    \n",
      "    15     129.99     660.83        39     455.00     647.04        63     725.00     650.24        87    1024.99     654.93       111    1340.00     673.27    \n",
      "    16     135.00     660.91        40     464.99     647.71        64     729.99     651.18        88    1030.00     655.86       112    1380.00     672.03    \n",
      "    17     139.99     662.04        41     470.00     647.93        65     733.39     652.19        89    1034.99     657.07       113    1419.99     669.64    \n",
      "    18     155.00     662.89        42     474.99     647.57        66     734.99     652.61        90    1040.00     657.64       114    1425.00     669.50    \n",
      "    19     180.00     663.70        43     490.00     645.25        67     740.00     653.76        91    1045.00     656.52       115    1520.00     668.94    \n",
      "    20     185.00     663.23        44     569.99     646.80        68     745.00     655.35        92    1099.99     653.02       116    1521.06     668.98    \n",
      "    21     200.00     659.01        45     574.99     647.50        69     750.00     657.19        93    1104.99     653.04    \n",
      "    22     220.00     653.77        46     585.00     651.98        70     755.00     657.72        94    1109.99     653.90    \n",
      "    23     225.00     652.75        47     590.00     653.22        71     759.99     658.21        95    1114.99     655.96    \n",
      "    24     260.00     651.73        48     591.39     653.32        72     764.99     658.08        96    1130.00     660.26    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 13:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1971113.37 295433.38, 1971589.48 294522.31, 1971565.97 293958.03)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     723.08        17     135.00     663.69        33     375.00     647.88        49     795.00     652.41        65    1250.01     652.06    \n",
      "     2      15.00     724.58        18     140.00     663.66        34     380.00     647.96        50     805.00     652.95        66    1285.00     658.44    \n",
      "     3      20.00     723.91        19     145.00     663.58        35     400.00     647.95        51     810.00     653.15        67    1320.00     664.34    \n",
      "     4      25.00     720.01        20     165.00     662.68        36     425.00     647.52        52     860.00     654.05        68    1325.00     664.84    \n",
      "     5      30.00     715.83        21     170.00     662.07        37     430.00     648.24        53     865.00     653.37        69    1335.00     665.67    \n",
      "     6      35.00     711.40        22     185.00     655.53        38     440.00     650.51        54     875.00     651.75        70    1340.00     665.98    \n",
      "     7      50.00     695.21        23     240.00     652.45        39     445.00     651.78        55     880.01     651.00        71    1375.00     667.89    \n",
      "     8      55.01     689.71        24     255.00     651.92        40     449.15     652.86        56     885.00     650.92        72    1380.00     668.11    \n",
      "     9      65.00     678.15        25     258.82     650.90        41     450.00     653.08        57     945.00     650.63        73    1395.00     668.65    \n",
      "    10      70.00     672.12        26     260.00     650.59        42     455.01     652.95        58     950.01     650.64        74    1400.01     668.78    \n",
      "    11      75.00     665.95        27     265.00     649.43        43     485.00     652.76        59     975.00     650.85        75    1485.00     670.64    \n",
      "    12      80.00     660.09        28     310.00     645.89        44     530.00     652.68        60     990.00     651.03        76    1550.01     673.69    \n",
      "    13     100.00     659.60        29     315.00     645.71        45     570.00     652.15        61    1027.97     650.44        77    1555.00     673.98    \n",
      "    14     105.00     659.39        30     350.00     646.54        46     650.00     652.32        62    1045.00     650.21        78    1560.00     674.07    \n",
      "    15     110.00     659.57        31     360.00     646.92        47     720.00     652.06        63    1185.00     650.49        79    1565.00     674.01    \n",
      "    16     130.00     663.28        32     365.00     647.20        48     790.00     652.19        64    1245.00     651.50        80    1592.74     673.49    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 14:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1971777.57 295686.13, 1972094.98 295027.81, 1972218.41 293758.18)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     729.25        19     155.00     654.19        37     525.00     650.58        55     870.01     649.44        73    1850.01     648.73    \n",
      "     2       5.00     726.03        20     190.00     652.15        38     530.00     650.53        56     920.00     649.23        74    1860.00     649.34    \n",
      "     3      15.00     718.92        21     210.00     650.53        39     535.00     650.72        57    1010.00     649.67        75    1870.00     650.11    \n",
      "     4      20.01     715.55        22     215.01     650.15        40     540.00     651.16        58    1065.00     650.26        76    1875.00     651.00    \n",
      "     5      35.00     705.56        23     220.00     649.74        41     590.00     653.56        59    1120.00     650.08        77    1880.01     651.80    \n",
      "     6      40.00     701.99        24     225.00     647.86        42     595.00     653.46        60    1155.01     649.51        78    1915.00     654.81    \n",
      "     7      45.01     698.32        25     230.00     646.13        43     605.00     651.76        61    1175.00     649.38        79    1920.01     655.82    \n",
      "     8      50.00     694.58        26     233.15     645.41        44     610.00     650.84        62    1230.01     649.81        80    1930.00     657.90    \n",
      "     9      70.00     677.69        27     235.00     644.98        45     615.00     650.69        63    1260.00     649.91        81    1945.00     660.80    \n",
      "    10      75.01     673.62        28     380.00     645.49        46     625.00     651.05        64    1360.01     649.50        82    1975.00     667.64    \n",
      "    11      90.00     665.73        29     385.01     645.98        47     630.01     651.20        65    1440.00     649.82        83    1980.01     668.63    \n",
      "    12      95.00     665.04        30     390.00     646.61        48     645.01     651.45        66    1495.00     649.20        84    1990.00     668.88    \n",
      "    13     100.00     665.05        31     395.00     646.55        49     650.00     651.50        67    1520.00     649.43        85    1995.01     669.06    \n",
      "    14     110.01     665.40        32     400.00     646.55        50     730.84     650.66        68    1545.01     649.21        86    2000.00     669.28    \n",
      "    15     115.00     664.28        33     405.00     647.56        51     740.01     650.58        69    1615.00     649.05        87    2006.46     668.89    \n",
      "    16     135.00     659.54        34     413.13     648.52        52     815.00     650.58        70    1725.00     648.15    \n",
      "    17     140.01     658.21        35     435.00     651.10        53     835.00     650.28        71    1800.00     647.91    \n",
      "    18     150.01     655.08        36     480.00     651.29        54     865.00     649.53        72    1845.00     648.55    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 15:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1972453.53 295991.78, 1972735.67 294681.01, 1972647.5 293552.45)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     659.66        24     195.00     650.98        47     645.00     651.25        70    1210.00     647.36        93    2305.00     653.15    \n",
      "     2       5.00     660.36        25     220.00     650.49        48     650.00     651.31        71    1285.00     647.73        94    2335.00     653.90    \n",
      "     3      10.00     665.65        26     270.28     649.85        49     710.00     653.30        72    1290.00     647.70        95    2340.00     654.21    \n",
      "     4      15.00     664.59        27     275.00     649.79        50     715.00     653.31        73    1325.00     647.21        96    2345.00     654.98    \n",
      "     5      20.00     658.82        28     280.00     649.44        51     725.00     653.17        74    1340.79     647.29        97    2350.00     655.87    \n",
      "     6      25.00     658.25        29     285.00     648.05        52     735.00     652.93        75    1530.01     648.35        98    2365.00     658.68    \n",
      "     7      55.00     655.83        30     290.00     646.48        53     795.00     651.85        76    1600.00     648.05        99    2370.00     659.96    \n",
      "     8      60.00     655.84        31     300.00     642.94        54     880.00     651.26        77    1615.00     648.28       100    2375.00     663.32    \n",
      "     9      65.01     656.48        32     305.00     642.71        55     885.01     651.20        78    1695.00     648.56       101    2380.00     666.44    \n",
      "    10      70.00     657.41        33     350.00     642.88        56     965.00     649.60        79    1755.00     648.31       102    2405.00     673.37    \n",
      "    11      95.00     664.84        34     440.00     644.00        57     975.00     649.19        80    1800.00     647.75       103    2410.00     673.82    \n",
      "    12     100.00     666.83        35     445.00     644.98        58     980.00     648.73        81    1835.00     647.67       104    2415.01     674.06    \n",
      "    13     105.00     666.71        36     455.00     646.19        59     985.00     648.18        82    1845.00     647.59       105    2420.00     671.83    \n",
      "    14     110.00     666.10        37     460.00     647.34        60     990.00     648.15        83    1855.00     647.61       106    2440.00     662.54    \n",
      "    15     115.00     665.38        38     465.00     649.13        61     995.00     648.24        84    2055.00     646.92       107    2445.01     661.05    \n",
      "    16     150.00     660.07        39     470.00     650.88        62    1000.00     648.42        85    2115.00     647.30       108    2455.01     660.74    \n",
      "    17     155.00     658.47        40     479.72     650.73        63    1005.00     649.01        86    2120.00     647.36       109    2465.00     660.90    \n",
      "    18     160.00     656.74        41     540.00     649.80        64    1010.00     649.05        87    2145.00     647.88       110    2470.00     661.30    \n",
      "    19     165.00     655.99        42     560.00     650.02        65    1060.00     648.86        88    2185.01     648.22       111    2472.79     661.54    \n",
      "    20     170.00     655.10        43     565.00     650.12        66    1080.00     648.96        89    2190.00     648.29    \n",
      "    21     175.00     653.14        44     585.00     650.66        67    1125.00     648.56        90    2235.00     649.17    \n",
      "    22     180.00     651.88        45     635.00     651.69        68    1195.00     647.57        91    2240.00     649.41    \n",
      "    23     190.00     651.22        46     640.00     651.67        69    1205.00     647.38        92    2300.01     652.79    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 16:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1973135.37 296256.28, 1973252.92 295838.95, 1973211.78 295403.99, 1973058.95 294681.01, 1972994.3 293540.7)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     663.96        25     300.00     650.84        49     699.99     644.21        73    1460.00     646.40        97    2370.00     645.70    \n",
      "     2       9.99     664.69        26     384.99     650.86        50     705.00     643.01        74    1490.00     646.43        98    2409.99     646.29    \n",
      "     3      14.99     666.10        27     390.00     650.94        51     795.00     642.66        75    1594.99     647.10        99    2445.00     646.57    \n",
      "     4      34.99     673.46        28     404.99     651.41        52     800.00     642.83        76    1609.43     647.08       100    2520.00     647.92    \n",
      "     5      49.99     678.53        29     410.00     651.40        53     804.99     643.17        77    1715.00     647.09       101    2525.00     648.10    \n",
      "     6      55.00     680.57        30     419.99     651.22        54     824.99     643.73        78    1729.99     646.92       102    2529.99     648.32    \n",
      "     7      60.00     683.09        31     433.57     650.87        55     829.99     643.79        79    1794.99     646.65       103    2609.99     652.38    \n",
      "     8      64.99     683.74        32     440.00     650.85        56     870.47     643.94        80    1810.00     646.98       104    2614.99     652.67    \n",
      "     9      75.00     683.20        33     444.99     650.72        57     874.99     643.98        81    1815.00     646.99       105    2625.00     653.44    \n",
      "    10      80.00     682.75        34     449.99     650.64        58     910.00     644.52        82    1820.00     646.93       106    2634.99     654.07    \n",
      "    11     110.00     678.05        35     474.99     652.00        59     935.00     645.18        83    1824.99     646.74       107    2639.99     656.41    \n",
      "    12     115.00     677.21        36     480.00     652.23        60     963.87     646.59        84    1829.99     646.92       108    2654.99     665.23    \n",
      "    13     144.99     663.52        37     544.99     652.91        61     979.99     647.38        85    1840.00     647.06       109    2659.99     668.14    \n",
      "    14     150.00     661.35        38     599.99     652.84        62     985.00     647.55        86    1844.99     646.78       110    2664.99     670.37    \n",
      "    15     170.00     652.41        39     604.99     652.54        63    1035.00     648.18        87    1849.99     646.69       111    2670.00     669.86    \n",
      "    16     174.99     650.70        40     609.99     652.28        64    1040.00     648.20        88    1854.99     647.29       112    2695.00     670.75    \n",
      "    17     185.00     649.11        41     624.99     651.82        65    1104.99     647.64        89    1865.00     647.07       113    2700.00     670.33    \n",
      "    18     190.00     648.97        42     669.99     649.99        66    1124.99     647.41        90    1904.99     646.61       114    2709.99     667.01    \n",
      "    19     194.99     649.47        43     670.01     649.99        67    1179.99     648.10        91    1999.99     646.50       115    2714.99     666.11    \n",
      "    20     199.99     649.66        44     674.99     649.54        68    1204.99     648.20        92    2054.99     647.35       116    2720.00     665.53    \n",
      "    21     205.00     649.56        45     679.99     648.92        69    1280.00     647.01        93    2104.99     647.30       117    2725.00     664.92    \n",
      "    22     219.99     650.07        46     685.00     647.52        70    1284.99     646.88        94    2124.99     646.87       118    2729.99     664.35    \n",
      "    23     280.00     650.63        47     689.99     646.07        71    1289.99     646.70        95    2234.99     646.64       119    2751.57     665.40    \n",
      "    24     289.99     650.67        48     694.99     645.56        72    1380.00     646.81        96    2309.99     645.82    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 17:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1974043.5 296329.76, 1973996.48 295242.35, 1973490.98 294466.47, 1973396.93 294078.53, 1973396.93 293543.64)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     684.59        28     525.00     646.89        55    1220.00     645.87        82    1800.00     645.20       109    2585.01     644.24    \n",
      "     2      60.01     679.18        29     580.00     646.56        56    1240.00     645.89        83    1835.00     645.99       110    2590.01     644.27    \n",
      "     3      65.00     678.79        30     615.00     648.02        57    1245.00     645.76        84    1840.00     646.04       111    2615.01     644.64    \n",
      "     4      75.00     678.35        31     620.00     647.91        58    1250.00     645.59        85    1850.01     646.09       112    2740.01     648.15    \n",
      "     5      90.00     677.08        32     635.00     646.91        59    1255.00     645.51        86    1855.01     645.22       113    2790.01     650.08    \n",
      "     6     120.00     675.61        33     640.00     646.71        60    1295.00     645.16        87    1860.01     644.13       114    2815.01     651.19    \n",
      "     7     125.01     675.16        34     670.01     646.31        61    1300.00     645.32        88    1865.00     643.10       115    2820.01     651.58    \n",
      "     8     150.00     671.90        35     745.01     646.40        62    1335.00     645.23        89    1870.00     642.52       116    2825.01     652.03    \n",
      "     9     170.00     669.45        36     840.00     646.88        63    1340.00     645.25        90    1875.00     642.44       117    2840.01     653.66    \n",
      "    10     175.00     668.89        37     850.00     646.84        64    1397.89     644.02        91    1880.00     643.69       118    2845.01     655.22    \n",
      "    11     190.00     669.15        38     925.00     645.86        65    1400.01     643.98        92    1890.00     645.65       119    2850.01     657.74    \n",
      "    12     195.00     667.10        39     975.00     645.70        66    1445.00     643.33        93    1895.00     646.31       120    2855.01     660.19    \n",
      "    13     200.01     662.88        40    1030.00     645.77        67    1485.01     642.44        94    1900.01     646.01       121    2875.01     668.31    \n",
      "    14     205.00     658.53        41    1050.00     645.66        68    1490.00     642.14        95    1905.01     645.79       122    2880.01     669.36    \n",
      "    15     210.01     653.85        42    1055.01     645.58        69    1495.01     640.95        96    1925.00     645.33       123    2895.01     669.88    \n",
      "    16     215.00     652.41        43    1070.00     644.97        70    1500.00     640.93        97    1970.00     644.43       124    2900.01     670.20    \n",
      "    17     230.00     650.77        44    1088.43     644.39        71    1565.01     642.43        98    2014.45     644.59       125    2905.01     669.39    \n",
      "    18     235.00     650.42        45    1110.01     643.91        72    1570.00     644.38        99    2025.01     644.56       126    2910.01     667.31    \n",
      "    19     250.00     649.65        46    1115.01     643.74        73    1575.00     646.05       100    2045.00     644.65       127    2915.01     664.75    \n",
      "    20     275.01     647.95        47    1120.01     644.03        74    1580.00     646.00       101    2100.00     644.59       128    2920.01     661.83    \n",
      "    21     290.00     646.55        48    1130.01     644.88        75    1584.53     646.05       102    2180.00     644.98       129    2925.01     661.31    \n",
      "    22     295.01     646.46        49    1135.00     645.09        76    1625.01     645.47       103    2265.00     646.12       130    2930.01     661.40    \n",
      "    23     325.00     647.52        50    1175.00     645.54        77    1630.01     645.48       104    2270.00     646.16       131    2940.01     661.84    \n",
      "    24     330.00     647.53        51    1190.01     645.90        78    1665.00     645.80       105    2380.00     645.79       132    2948.52     661.49    \n",
      "    25     370.01     646.25        52    1195.01     645.90        79    1700.01     645.03       106    2390.00     645.67    \n",
      "    26     375.00     646.14        53    1200.01     645.97        80    1705.01     644.99       107    2413.63     645.26    \n",
      "    27     480.00     646.40        54    1205.00     646.00        81    1785.01     645.06       108    2440.01     644.71    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 18:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1975001.6 296153.42, 1974948.69 295765.48, 1973996.48 294384.18, 1973867.16 294078.53, 1973826.02 293573.03)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     665.64        23     300.00     650.37        45    1000.00     643.98        67    1650.00     644.89        89    2401.12     643.30    \n",
      "     2      20.00     665.20        24     305.00     649.91        46    1075.00     643.87        68    1695.00     645.45        90    2490.00     643.12    \n",
      "     3     110.00     661.35        25     310.00     649.20        47    1125.00     643.36        69    1700.00     645.47        91    2495.00     643.15    \n",
      "     4     140.00     659.94        26     315.00     648.39        48    1155.00     643.33        70    1705.00     645.46        92    2560.00     643.90    \n",
      "     5     145.00     659.51        27     325.00     646.63        49    1184.99     642.99        71    1710.00     645.37        93    2605.00     643.56    \n",
      "     6     165.00     657.62        28     330.00     646.44        50    1190.00     642.99        72    1763.88     643.64        94    2610.00     643.61    \n",
      "     7     170.00     657.39        29     345.00     646.46        51    1214.99     643.20        73    1775.00     643.28        95    2710.00     645.28    \n",
      "     8     205.00     656.32        30     350.00     646.04        52    1240.00     642.90        74    1785.00     643.08        96    2720.00     645.68    \n",
      "     9     230.00     654.45        31     360.00     643.89        53    1265.00     643.22        75    1790.00     642.45        97    2785.00     649.07    \n",
      "    10     235.00     654.26        32     365.00     643.19        54    1270.00     643.24        76    1795.00     641.69        98    2790.00     649.41    \n",
      "    11     240.00     654.19        33     385.00     642.68        55    1280.00     643.15        77    1800.00     641.05        99    2835.00     668.45    \n",
      "    12     245.00     654.05        34     390.00     642.45        56    1285.00     643.14        78    1900.00     641.52       100    2839.99     668.69    \n",
      "    13     250.00     653.87        35     391.53     642.37        57    1349.99     643.87        79    1905.00     643.11       101    2865.00     668.79    \n",
      "    14     255.00     653.33        36     395.00     642.18        58    1359.99     643.88        80    1909.99     644.98       102    2869.99     668.16    \n",
      "    15     259.99     652.23        37     399.99     642.08        59    1404.99     644.29        81    1919.47     645.02       103    2875.00     667.39    \n",
      "    16     265.00     651.96        38     415.00     641.89        60    1415.00     644.46        82    1945.00     645.13       104    2880.00     666.59    \n",
      "    17     270.00     652.01        39     485.00     643.72        61    1419.99     644.49        83    1985.00     644.46       105    2885.00     665.75    \n",
      "    18     275.00     652.18        40     499.99     643.70        62    1460.00     644.36        84    2069.24     644.28       106    2890.00     665.14    \n",
      "    19     280.00     652.21        41     565.00     643.02        63    1494.99     644.83        85    2125.00     644.08       107    2908.29     665.50    \n",
      "    20     285.00     651.67        42     724.99     644.67        64    1539.99     644.95        86    2249.99     644.36    \n",
      "    21     290.00     650.71        43     904.99     644.70        65    1570.00     644.71        87    2340.00     643.21    \n",
      "    22     295.00     650.42        44     955.00     644.21        66    1615.00     645.07        88    2355.00     643.11    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 19:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1975301.37 296088.76, 1975342.51 295548, 1974931.06 294566.39, 1974837.01 293708.22)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     662.35        32     229.99     650.50        63     625.00     641.69        94    1785.00     643.54       125    2074.99     654.17    \n",
      "     2      20.00     661.92        33     239.99     650.25        64     630.00     641.54        95    1790.00     643.49       126    2084.99     653.77    \n",
      "     3      34.99     661.26        34     245.00     650.51        65     649.99     640.82        96    1800.00     642.76       127    2089.99     653.43    \n",
      "     4      39.99     661.07        35     260.00     650.15        66     654.99     640.77        97    1805.00     642.75       128    2099.99     652.60    \n",
      "     5      45.00     661.27        36     264.99     649.90        67     680.00     640.88        98    1817.17     643.02       129    2104.99     652.36    \n",
      "     6      49.99     661.43        37     270.00     649.75        68     699.99     640.82        99    1825.00     643.20       130    2129.99     652.86    \n",
      "     7      55.00     661.20        38     280.00     649.76        69     705.00     641.24       100    1830.00     643.35       131    2170.00     653.83    \n",
      "     8      59.99     661.11        39     284.99     649.61        70     709.99     641.79       101    1835.00     643.19       132    2200.00     653.85    \n",
      "     9      65.00     661.13        40     295.00     649.19        71     724.99     643.57       102    1844.99     641.69       133    2210.00     654.00    \n",
      "    10      69.99     661.08        41     299.99     648.79        72     729.99     644.06       103    1864.99     639.65       134    2215.00     654.02    \n",
      "    11      75.00     660.83        42     305.00     648.46        73     740.00     643.21       104    1869.99     639.31       135    2259.99     654.86    \n",
      "    12      80.00     660.48        43     309.99     648.42        74     745.00     642.76       105    1919.99     639.31       136    2264.99     654.81    \n",
      "    13      85.00     660.10        44     315.00     648.47        75     750.00     642.35       106    1924.99     639.49       137    2299.99     653.28    \n",
      "    14     104.99     658.85        45     319.99     648.58        76     769.99     640.91       107    1939.99     640.46       138    2304.99     653.53    \n",
      "    15     110.00     658.36        46     335.00     648.74        77     774.99     640.73       108    1944.99     640.48       139    2319.99     654.65    \n",
      "    16     120.00     657.15        47     340.00     649.15        78     849.99     641.58       109    1954.99     640.38       140    2324.99     655.82    \n",
      "    17     129.99     656.34        48     350.00     650.14        79     870.00     641.61       110    1959.99     640.82       141    2344.99     663.44    \n",
      "    18     135.00     656.17        49     354.99     650.69        80     929.99     641.46       111    1965.00     640.94       142    2349.99     664.14    \n",
      "    19     139.99     656.12        50     360.00     650.74        81     935.00     641.38       112    1970.00     641.09       143    2375.00     660.46    \n",
      "    20     149.99     655.82        51     374.99     651.23        82    1025.00     640.91       113    1975.00     640.81       144    2390.00     657.97    \n",
      "    21     155.00     655.41        52     380.00     651.25        83    1034.99     641.07       114    1980.00     639.46       145    2395.00     656.83    \n",
      "    22     159.99     654.75        53     399.99     651.22        84    1100.00     641.38       115    1985.00     639.37       146    2400.00     655.13    \n",
      "    23     174.99     653.14        54     405.00     650.95        85    1205.00     642.39       116    2020.00     639.75       147    2405.00     654.97    \n",
      "    24     180.00     652.64        55     409.99     650.26        86    1304.99     642.28       117    2025.00     640.18       148    2410.00     654.94    \n",
      "    25     184.99     652.17        56     430.00     645.47        87    1309.99     642.36       118    2030.00     640.42       149    2415.00     654.86    \n",
      "    26     190.00     651.73        57     434.99     644.80        88    1464.99     642.88       119    2040.00     640.56       150    2420.00     654.84    \n",
      "    27     194.99     651.49        58     542.32     642.13        89    1606.68     642.85       120    2045.00     640.60       151    2445.00     655.04    \n",
      "    28     200.00     651.35        59     550.00     641.93        90    1640.00     642.87       121    2050.00     641.56       152    2460.00     655.26    \n",
      "    29     204.99     651.33        60     555.00     641.86        91    1659.99     642.65       122    2055.00     644.49       153    2464.99     655.72    \n",
      "    30     210.00     651.26        61     599.99     642.03        92    1689.99     643.17       123    2060.71     647.51       154    2469.99     657.49    \n",
      "    31     225.00     650.67        62     604.99     642.01        93    1754.99     643.19       124    2069.99     652.43    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 20:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1975868.58 295827.2, 1975727.52 295333.46, 1975545.3 294751.54, 1975533.54 293875.74)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     660.64        27     320.00     654.87        53     575.00     641.21        79    1055.00     639.99       105    1570.00     648.41    \n",
      "     2      25.00     658.61        28     355.00     653.36        54     580.01     641.13        80    1080.00     640.40       106    1575.00     648.46    \n",
      "     3      30.00     658.28        29     360.00     653.18        55     620.00     641.03        81    1085.00     640.44       107    1620.00     648.66    \n",
      "     4      45.00     657.38        30     405.00     652.85        56     645.00     640.52        82    1123.28     640.43       108    1670.00     650.05    \n",
      "     5      50.00     657.12        31     415.00     653.03        57     650.00     640.54        83    1150.00     640.26       109    1675.00     650.12    \n",
      "     6      55.01     656.80        32     425.00     653.09        58     700.00     641.79        84    1155.00     640.27       110    1690.00     650.13    \n",
      "     7      60.00     656.61        33     430.00     653.08        59     725.00     640.94        85    1200.00     641.46       111    1740.00     649.49    \n",
      "     8      85.00     656.06        34     435.00     653.01        60     730.00     640.88        86    1205.01     641.51       112    1745.00     649.48    \n",
      "     9      90.00     656.15        35     445.00     651.67        61     740.01     641.00        87    1260.00     640.96       113    1775.00     649.70    \n",
      "    10      95.00     656.19        36     450.00     650.92        62     745.00     640.63        88    1270.00     640.93       114    1820.00     649.78    \n",
      "    11     100.00     656.26        37     455.00     650.29        63     750.00     640.35        89    1315.01     641.18       115    1860.00     649.59    \n",
      "    12     110.00     656.35        38     460.00     649.73        64     755.00     640.27        90    1365.00     642.03       116    1865.01     649.45    \n",
      "    13     115.00     656.42        39     465.00     648.81        65     760.00     640.38        91    1367.42     642.09       117    1870.01     649.35    \n",
      "    14     125.00     656.30        40     475.01     645.93        66     765.00     640.56        92    1385.00     642.50       118    1875.01     649.97    \n",
      "    15     130.00     656.42        41     485.00     643.35        67     770.00     640.77        93    1395.00     642.66       119    1905.00     658.80    \n",
      "    16     145.00     656.94        42     490.00     642.12        68     775.01     641.06        94    1400.00     642.50       120    1910.00     660.31    \n",
      "    17     150.00     657.08        43     495.00     641.92        69     780.00     641.22        95    1405.00     640.12       121    1915.00     661.54    \n",
      "    18     155.00     657.03        44     500.00     641.81        70     785.00     640.84        96    1410.00     638.23       122    1930.00     662.21    \n",
      "    19     160.00     656.92        45     513.50     641.85        71     820.00     639.88        97    1415.00     637.54       123    1935.00     662.40    \n",
      "    20     180.01     656.32        46     515.00     641.85        72     835.00     640.41        98    1510.00     636.88       124    1940.00     662.19    \n",
      "    21     195.00     655.98        47     520.00     641.80        73     840.00     640.36        99    1515.00     636.99       125    1945.00     661.32    \n",
      "    22     225.00     655.61        48     545.01     641.41        74     875.00     639.38       100    1540.01     646.36       126    1950.00     660.51    \n",
      "    23     250.00     654.99        49     550.00     641.38        75     880.00     639.40       101    1545.00     647.47       127    1955.00     659.87    \n",
      "    24     255.00     654.91        50     555.00     641.43        76     915.00     640.10       102    1554.14     647.87       128    1990.00     657.08    \n",
      "    25     300.00     655.27        51     560.00     641.45        77     920.00     640.16       103    1560.00     648.12       129    1999.16     656.61    \n",
      "    26     305.01     655.22        52     565.00     641.43        78    1050.00     639.94       104    1565.00     648.28    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 21:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1975986.14 295245.29, 1975909.73 294916.13, 1975786.29 294140.24, 1975792.17 293899.25)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     673.87        21     235.01     658.46        41     500.01     639.92        61     730.00     640.07        81    1045.00     646.22    \n",
      "     2       5.00     674.06        22     255.00     650.77        42     505.00     640.20        62     770.00     640.65        82    1060.00     646.56    \n",
      "     3      10.00     674.46        23     260.00     649.30        43     510.00     639.97        63     810.01     641.42        83    1075.01     647.66    \n",
      "     4      15.00     674.98        24     270.00     647.67        44     535.00     638.98        64     810.72     641.43        84    1123.56     649.70    \n",
      "     5      20.00     675.68        25     275.00     646.97        45     540.00     639.22        65     815.00     641.47        85    1155.00     651.20    \n",
      "     6      45.00     679.61        26     280.00     646.33        46     545.00     639.60        66     820.00     641.42        86    1160.00     651.37    \n",
      "     7      50.00     679.94        27     285.00     645.72        47     550.01     639.46        67     840.00     637.63        87    1175.01     651.25    \n",
      "     8      90.00     680.38        28     290.00     645.08        48     595.01     639.34        68     845.00     637.05        88    1180.01     651.31    \n",
      "     9      95.00     680.88        29     305.00     642.04        49     600.00     639.17        69     935.00     637.69        89    1185.00     651.77    \n",
      "    10     115.00     685.09        30     310.00     641.08        50     605.00     638.92        70     940.00     639.01        90    1230.00     657.00    \n",
      "    11     120.00     685.88        31     315.00     640.20        51     610.00     638.71        71     945.00     640.88        91    1260.00     660.08    \n",
      "    12     135.01     684.22        32     335.01     638.02        52     625.00     639.20        72     962.47     641.98        92    1265.00     660.49    \n",
      "    13     140.01     683.58        33     337.91     637.82        53     630.00     639.28        73     965.00     642.14        93    1285.00     661.76    \n",
      "    14     170.00     678.47        34     390.00     637.44        54     645.01     639.39        74     970.00     642.38        94    1290.00     661.98    \n",
      "    15     175.00     677.77        35     395.00     637.60        55     650.00     639.35        75     975.01     642.55        95    1295.00     661.68    \n",
      "    16     180.00     677.14        36     415.00     638.36        56     655.00     639.18        76     980.01     642.79        96    1310.01     659.34    \n",
      "    17     185.00     676.02        37     425.00     638.87        57     660.00     639.12        77     995.00     643.95        97    1350.01     658.87    \n",
      "    18     200.00     670.81        38     430.01     639.05        58     685.00     639.00        78    1015.00     645.61        98    1355.00     658.84    \n",
      "    19     205.00     668.74        39     450.00     638.79        59     690.01     639.08        79    1025.01     645.64        99    1360.00     658.84    \n",
      "    20     210.00     666.79        40     455.01     638.79        60     695.00     639.24        80    1030.00     645.68       100    1364.62     658.77    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 22:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1976238.89 295210.02, 1976244.77 294498.8, 1976133.09 293934.52)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     669.90        20     305.00     639.36        39     445.01     639.56        58     825.00     639.60        77    1095.00     648.01    \n",
      "     2      90.00     673.23        21     310.00     639.95        40     460.00     638.70        59     835.00     639.50        78    1100.00     648.82    \n",
      "     3      95.00     673.37        22     315.00     640.81        41     510.00     638.72        60     840.00     639.41        79    1125.00     654.53    \n",
      "     4     105.00     672.64        23     320.00     642.23        42     535.00     638.59        61     845.00     639.28        80    1140.00     657.85    \n",
      "     5     110.00     672.08        24     325.00     641.74        43     540.00     638.60        62     850.00     639.10        81    1145.00     658.87    \n",
      "     6     120.00     670.76        25     340.00     638.18        44     570.00     638.89        63     860.00     639.23        82    1150.00     658.51    \n",
      "     7     155.01     665.90        26     345.00     637.14        45     625.00     639.09        64     865.00     639.42        83    1170.00     655.92    \n",
      "     8     160.00     665.06        27     355.00     638.02        46     630.00     639.14        65     865.28     639.40        84    1175.00     654.88    \n",
      "     9     165.00     664.15        28     360.00     637.87        47     635.00     639.16        66     870.00     639.01        85    1180.00     654.82    \n",
      "    10     170.00     663.58        29     365.00     636.33        48     711.24     640.05        67     875.00     637.92        86    1185.00     655.53    \n",
      "    11     185.00     662.18        30     370.00     635.84        49     715.00     640.10        68     880.00     636.72        87    1210.00     659.33    \n",
      "    12     200.00     660.58        31     395.00     637.89        50     745.00     640.11        69     885.00     635.25        88    1215.00     659.04    \n",
      "    13     205.00     660.11        32     400.00     638.34        51     775.00     640.46        70     995.00     636.51        89    1245.00     657.07    \n",
      "    14     230.00     659.94        33     405.00     638.72        52     780.00     640.55        71    1000.00     636.81        90    1250.00     656.60    \n",
      "    15     235.00     659.21        34     420.00     639.30        53     785.00     640.67        72    1007.56     641.00        91    1255.00     656.29    \n",
      "    16     260.00     645.19        35     425.00     639.92        54     795.00     641.05        73    1015.00     645.13        92    1260.00     656.31    \n",
      "    17     265.00     642.76        36     430.00     640.70        55     800.00     641.12        74    1020.00     645.99        93    1286.47     656.68    \n",
      "    18     270.00     640.40        37     435.00     640.33        56     805.00     641.02        75    1065.00     645.72    \n",
      "    19     275.00     638.25        38     440.00     639.93        57     810.00     640.70        76    1070.00     645.89    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 23:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1976485.76 295251.17, 1976550.42 294345.97, 1976562.18 293987.42)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     665.39        16     290.01     638.14        31     435.01     639.07        46     963.74     641.64        61    1145.00     650.26    \n",
      "     2      35.01     665.20        17     295.01     637.13        32     520.00     639.67        47     965.01     641.71        62    1160.00     654.22    \n",
      "     3      80.00     662.54        18     315.00     637.01        33     530.01     639.57        48     970.01     640.74        63    1165.00     655.19    \n",
      "     4      85.01     662.13        19     345.01     636.64        34     620.01     638.03        49     975.00     639.54        64    1175.01     656.80    \n",
      "     5      90.01     661.83        20     350.01     636.54        35     625.01     637.97        50     985.01     636.57        65    1180.00     657.64    \n",
      "     6     110.01     661.03        21     370.00     635.58        36     705.00     638.33        51     990.00     635.50        66    1195.00     660.46    \n",
      "     7     170.00     657.55        22     375.00     635.92        37     715.01     638.15        52    1065.00     635.50        67    1200.00     660.69    \n",
      "     8     175.00     655.37        23     385.01     636.78        38     720.01     638.09        53    1070.00     636.61        68    1205.01     660.32    \n",
      "     9     180.01     653.29        24     390.00     637.32        39     855.00     638.72        54    1090.00     649.16        69    1245.01     654.78    \n",
      "    10     210.00     641.12        25     400.01     640.33        40     880.01     638.64        55    1095.01     652.46        70    1250.00     654.64    \n",
      "    11     215.01     639.26        26     405.01     641.60        41     907.51     639.20        56    1100.01     654.63        71    1255.00     654.59    \n",
      "    12     250.01     640.73        27     410.00     641.50        42     915.00     639.39        57    1101.26     654.79        72    1260.01     654.59    \n",
      "    13     255.01     641.87        28     415.00     641.13        43     950.01     640.70        58    1105.00     655.27        73    1266.25     654.72    \n",
      "    14     260.00     643.48        29     420.01     640.66        44     955.00     641.04        59    1135.01     654.53    \n",
      "    15     265.00     643.81        30     430.00     639.56        45     960.00     641.43        60    1140.00     652.50    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 24:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1976662.1 295374.6, 1976932.48 294904.37, 1977255.77 294099.1)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     664.05        24     259.99     642.69        47     475.00     636.93        70     939.99     637.04        93    1235.00     657.43    \n",
      "     2      25.00     661.74        25     265.00     641.37        48     485.00     637.08        71    1005.00     639.51        94    1240.00     657.21    \n",
      "     3      30.00     661.31        26     275.00     639.81        49     490.00     637.03        72    1009.99     639.74        95    1255.00     654.57    \n",
      "     4      35.00     660.80        27     280.00     639.38        50     505.00     636.75        73    1014.99     639.72        96    1260.00     654.15    \n",
      "     5      75.00     656.58        28     285.00     639.42        51     510.00     636.75        74    1020.00     638.78        97    1280.00     656.05    \n",
      "     6      85.00     655.45        29     290.00     639.27        52     525.01     637.72        75    1024.99     638.02        98    1305.00     658.25    \n",
      "     7      90.00     654.85        30     295.00     638.37        53     530.00     637.90        76    1025.89     637.78        99    1310.00     658.78    \n",
      "     8      95.00     654.06        31     305.00     636.39        54     534.99     638.00        77    1029.99     636.71       100    1315.00     659.74    \n",
      "     9     100.00     653.35        32     310.00     636.78        55     542.42     638.38        78    1035.00     635.28       101    1320.00     661.24    \n",
      "    10     125.00     649.91        33     315.00     637.04        56     545.00     638.53        79    1039.99     634.55       102    1325.00     661.87    \n",
      "    11     130.00     649.59        34     320.00     637.24        57     550.00     638.69        80    1145.00     635.43       103    1330.00     661.19    \n",
      "    12     150.00     648.59        35     330.00     637.52        58     560.00     638.55        81    1150.00     637.60       104    1345.00     658.86    \n",
      "    13     159.99     648.21        36     335.00     637.63        59     565.00     638.45        82    1155.00     641.38       105    1350.00     658.85    \n",
      "    14     165.00     648.21        37     365.00     637.47        60     570.00     638.23        83    1160.00     645.11       106    1360.00     660.75    \n",
      "    15     185.00     648.44        38     369.99     637.54        61     575.00     637.95        84    1165.00     646.99       107    1365.00     662.00    \n",
      "    16     195.00     648.48        39     375.00     637.94        62     620.00     636.52        85    1172.97     647.46       108    1370.00     663.82    \n",
      "    17     200.00     647.54        40     380.00     638.02        63     625.00     636.53        86    1190.00     648.46       109    1375.00     664.54    \n",
      "    18     210.00     643.60        41     410.00     638.02        64     655.00     636.98        87    1195.00     648.81       110    1380.00     664.34    \n",
      "    19     215.00     641.78        42     415.00     637.89        65     780.00     638.31        88    1200.00     649.29       111    1385.00     663.11    \n",
      "    20     220.00     640.04        43     425.00     637.49        66     785.00     638.32        89    1205.00     650.68       112    1390.00     661.91    \n",
      "    21     225.00     639.70        44     430.00     637.42        67     830.00     637.79        90    1210.00     652.49       113    1410.16     663.42    \n",
      "    22     240.00     640.97        45     434.99     637.48        68     919.99     637.16        91    1225.00     656.42    \n",
      "    23     255.00     642.34        46     455.00     637.11        69     935.00     636.88        92    1230.00     657.08    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 25:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1976859.01 295589.14, 1977323.36 295001.35, 1977693.67 294366.54)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     664.71        24     440.00     638.60        47     690.00     637.46        70    1030.00     639.30        93    1319.99     635.37    \n",
      "     2      30.00     660.97        25     455.00     637.16        48     715.00     637.31        71    1060.00     637.55        94    1324.99     638.65    \n",
      "     3      75.00     655.11        26     460.00     637.27        49     739.99     636.96        72    1064.99     637.36        95    1339.99     648.04    \n",
      "     4      80.00     654.66        27     475.00     638.42        50     749.08     637.09        73    1069.99     637.28        96    1345.00     649.90    \n",
      "     5     134.99     650.12        28     485.00     638.71        51     759.99     637.28        74    1085.00     636.93        97    1354.60     653.12    \n",
      "     6     139.99     649.83        29     490.00     638.51        52     800.00     637.57        75    1090.00     636.91        98    1360.00     654.93    \n",
      "     7     184.99     647.52        30     494.99     637.76        53     830.00     638.08        76    1094.99     637.44        99    1365.00     655.23    \n",
      "     8     190.00     647.33        31     500.00     636.86        54     834.99     638.19        77    1099.99     637.83       100    1369.99     655.47    \n",
      "     9     210.00     646.25        32     505.00     636.65        55     839.99     637.54        78    1109.14     637.84       101    1374.99     655.60    \n",
      "    10     215.00     645.40        33     515.00     636.75        56     860.00     634.40        79    1125.00     637.85       102    1379.99     656.22    \n",
      "    11     230.00     642.50        34     520.00     636.85        57     865.00     633.94        80    1130.00     637.70       103    1384.99     657.26    \n",
      "    12     235.00     641.75        35     525.00     637.00        58     869.99     634.28        81    1135.00     637.27       104    1389.99     657.86    \n",
      "    13     250.00     640.70        36     534.99     636.98        59     874.99     634.59        82    1149.99     636.81       105    1424.99     660.09    \n",
      "    14     270.00     639.48        37     549.99     637.32        60     919.99     636.92        83    1154.99     636.13       106    1430.00     659.91    \n",
      "    15     300.00     638.07        38     555.00     636.76        61     929.99     637.34        84    1159.99     635.50       107    1450.00     657.27    \n",
      "    16     304.99     637.89        39     570.00     635.47        62     935.00     637.20        85    1189.99     634.03       108    1464.99     655.43    \n",
      "    17     320.00     637.44        40     575.00     635.08        63     980.00     635.79        86    1205.00     633.44       109    1469.99     654.88    \n",
      "    18     325.00     637.33        41     580.00     635.46        64     985.00     635.89        87    1210.00     633.28       110    1474.99     655.23    \n",
      "    19     380.00     637.12        42     590.00     636.39        65     995.00     636.91        88    1215.00     633.20       111    1479.99     656.10    \n",
      "    20     385.00     637.18        43     595.00     636.76        66    1000.00     637.37        89    1255.00     633.03       112    1484.00     656.96    \n",
      "    21     390.00     637.46        44     630.00     636.39        67    1004.99     637.69        90    1260.00     633.15    \n",
      "    22     395.00     637.67        45     634.99     636.45        68    1019.99     638.52        91    1265.00     633.33    \n",
      "    23     434.99     638.91        46     684.99     637.43        69    1025.00     638.94        92    1315.00     634.73    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 26:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1977035.35 295812.5, 1977834.74 295048.38, 1978228.56 294848.53)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     664.32        20     399.99     638.18        39     639.99     635.40        58    1080.00     635.91        77    1349.99     635.19    \n",
      "     2      54.99     659.98        21     404.99     638.25        40     645.00     635.21        59    1105.85     636.24        78    1384.99     654.76    \n",
      "     3      64.99     659.09        22     419.99     638.09        41     659.99     635.97        60    1119.99     636.29        79    1387.62     655.85    \n",
      "     4      70.00     658.59        23     470.00     637.13        42     679.99     636.37        61    1125.00     636.35        80    1389.99     656.84    \n",
      "     5      99.99     655.44        24     474.99     636.91        43     684.99     636.43        62    1135.00     636.75        81    1399.99     656.45    \n",
      "     6     105.00     654.95        25     479.99     636.21        44     759.99     636.03        63    1140.00     636.72        82    1404.99     656.32    \n",
      "     7     154.99     652.29        26     484.99     635.56        45     764.99     635.86        64    1145.00     636.61        83    1410.00     656.38    \n",
      "     8     209.99     648.91        27     489.99     635.23        46     785.00     634.48        65    1184.99     636.44        84    1415.00     657.11    \n",
      "     9     224.99     647.27        28     524.99     636.07        47     789.99     635.65        66    1193.72     636.54        85    1445.00     662.18    \n",
      "    10     255.00     644.45        29     530.00     636.16        48     795.00     637.29        67    1194.99     636.55        86    1450.00     661.97    \n",
      "    11     265.00     643.40        30     534.99     636.21        49     799.99     638.78        68    1199.99     636.72        87    1455.00     661.13    \n",
      "    12     284.99     642.09        31     540.00     636.31        50    1024.99     636.24        69    1204.99     637.21        88    1459.99     660.17    \n",
      "    13     315.00     640.35        32     544.99     637.28        51    1029.99     636.12        70    1209.99     637.57        89    1469.99     658.90    \n",
      "    14     319.99     640.12        33     550.00     638.29        52    1034.99     635.77        71    1214.99     637.73        90    1509.99     671.11    \n",
      "    15     345.00     639.31        34     554.99     639.41        53    1044.99     634.90        72    1224.99     635.70        91    1514.99     671.01    \n",
      "    16     349.99     639.07        35     559.99     639.53        54    1055.00     634.15        73    1229.99     634.60        92    1519.99     668.84    \n",
      "    17     374.99     637.59        36     575.00     639.39        55    1060.00     633.82        74    1234.99     633.82        93    1524.99     667.61    \n",
      "    18     380.00     637.56        37     620.00     638.59        56    1070.00     634.84        75    1329.99     633.87        94    1529.99     667.85    \n",
      "    19     394.99     638.05        38     624.99     638.06        57    1074.99     635.46        76    1344.99     634.05        95    1547.48     668.98    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 27:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1977382.14 296218.08, 1978563.6 295154.18)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     663.98        24     470.00     635.77        47     880.00     637.20        70    1100.00     634.45        93    1435.00     656.48    \n",
      "     2      55.00     655.58        25     515.00     636.65        48     895.00     634.51        71    1105.00     634.38        94    1455.00     660.41    \n",
      "     3      60.00     654.91        26     570.00     637.09        49     900.00     634.11        72    1110.00     634.41        95    1460.00     661.30    \n",
      "     4     130.00     649.74        27     600.00     637.92        50     915.00     635.35        73    1165.00     635.77        96    1470.00     662.38    \n",
      "     5     135.00     649.42        28     625.00     637.92        51     920.00     635.63        74    1170.00     635.32        97    1475.01     662.40    \n",
      "     6     140.01     649.16        29     645.01     638.04        52     940.00     636.25        75    1187.17     633.18        98    1480.00     661.82    \n",
      "     7     180.00     647.31        30     650.00     638.00        53     945.00     636.35        76    1190.00     632.83        99    1485.00     660.91    \n",
      "     8     235.00     643.80        31     705.00     637.19        54     960.00     636.58        77    1195.00     632.59       100    1490.00     659.57    \n",
      "     9     240.00     643.58        32     720.00     637.18        55     965.00     636.61        78    1310.00     631.32       101    1495.00     658.69    \n",
      "    10     245.00     643.52        33     725.01     636.86        56     970.01     636.07        79    1315.00     635.03       102    1500.01     659.92    \n",
      "    11     270.00     642.94        34     730.00     636.25        57     975.00     635.64        80    1320.01     637.86       103    1515.00     666.60    \n",
      "    12     305.00     642.46        35     735.00     635.44        58     995.01     634.87        81    1324.06     639.31       104    1520.00     668.26    \n",
      "    13     310.00     642.28        36     745.00     633.47        59    1000.00     635.87        82    1325.00     639.65       105    1530.00     671.44    \n",
      "    14     330.01     641.44        37     750.00     634.14        60    1025.00     635.13        83    1345.00     644.65       106    1535.00     672.39    \n",
      "    15     345.00     640.27        38     760.00     637.21        61    1035.00     634.77        84    1350.00     645.94       107    1540.00     671.77    \n",
      "    16     350.00     639.85        39     765.00     637.68        62    1045.00     635.04        85    1355.00     647.40       108    1545.01     670.57    \n",
      "    17     370.00     637.38        40     770.00     637.51        63    1050.00     635.11        86    1360.00     648.61       109    1550.00     668.67    \n",
      "    18     375.00     636.69        41     775.00     637.37        64    1055.00     635.09        87    1385.00     652.19       110    1555.00     666.63    \n",
      "    19     380.00     635.95        42     815.01     636.68        65    1060.00     634.77        88    1390.00     653.10       111    1560.00     664.78    \n",
      "    20     385.00     635.80        43     820.00     636.68        66    1065.00     634.18        89    1395.00     654.18       112    1589.88     666.85    \n",
      "    21     410.00     635.69        44     860.01     637.87        67    1070.00     634.28        90    1400.00     655.44    \n",
      "    22     420.00     636.02        45     865.00     637.98        68    1080.00     634.54        91    1405.00     656.88    \n",
      "    23     465.01     635.74        46     875.00     637.80        69    1085.01     634.91        92    1430.00     655.91    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 28:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1977752.45 296435.56, 1978869.25 295371.66)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     663.06        24     354.99     635.45        47     765.00     633.93        70    1010.00     635.91        93    1320.00     656.89    \n",
      "     2       5.00     661.83        25     385.00     634.60        48     770.00     633.74        71    1015.00     635.73        94    1325.00     657.33    \n",
      "     3      30.00     655.46        26     415.00     634.48        49     789.99     635.29        72    1020.00     635.47        95    1330.00     658.23    \n",
      "     4      35.00     654.71        27     440.00     634.66        50     795.00     635.64        73    1033.44     634.39        96    1350.00     661.61    \n",
      "     5      55.00     652.86        28     465.00     635.16        51     800.00     635.94        74    1045.00     633.46        97    1355.00     662.31    \n",
      "     6      90.00     648.74        29     504.99     636.36        52     825.00     636.00        75    1050.00     632.91        98    1380.00     659.85    \n",
      "     7      95.00     648.19        30     530.00     636.78        53     830.00     635.91        76    1055.00     632.60        99    1384.99     659.28    \n",
      "     8     115.00     646.55        31     535.00     636.65        54     850.00     635.31        77    1060.00     631.81       100    1389.99     658.40    \n",
      "     9     120.00     646.17        32     549.99     636.09        55     855.00     635.09        78    1065.00     630.93       101    1394.99     657.99    \n",
      "    10     165.00     643.17        33     575.00     635.65        56     870.00     634.26        79    1070.00     630.09       102    1400.00     659.32    \n",
      "    11     170.00     642.79        34     580.01     635.67        57     885.00     633.91        80    1205.00     630.46       103    1405.00     659.78    \n",
      "    12     175.00     642.46        35     605.00     636.18        58     890.00     633.99        81    1210.00     631.91       104    1415.00     659.72    \n",
      "    13     185.00     642.25        36     630.00     637.01        59     915.00     635.32        82    1220.00     635.05       105    1420.00     660.17    \n",
      "    14     245.00     640.50        37     635.00     636.83        60     925.00     635.75        83    1225.00     636.27       106    1424.99     661.49    \n",
      "    15     250.00     640.14        38     670.00     635.40        61     930.00     635.93        84    1230.87     636.98       107    1430.00     662.73    \n",
      "    16     260.00     639.17        39     675.00     635.43        62     935.00     636.03        85    1255.00     639.89       108    1435.00     662.54    \n",
      "    17     265.00     638.80        40     680.00     635.68        63     960.00     636.29        86    1260.00     641.02       109    1440.00     663.06    \n",
      "    18     295.00     637.00        41     695.00     636.73        64     965.00     636.30        87    1265.00     643.06       110    1445.00     663.37    \n",
      "    19     304.99     636.19        42     715.00     633.66        65     970.00     635.73        88    1270.00     644.38       111    1450.00     663.42    \n",
      "    20     309.99     635.26        43     720.00     633.69        66     984.99     633.74        89    1290.00     649.14       112    1455.00     663.32    \n",
      "    21     315.00     634.25        44     725.00     635.14        67     989.99     633.20        90    1295.00     650.42       113    1460.00     662.53    \n",
      "    22     330.00     634.56        45     730.00     636.52        68     994.99     634.30        91    1300.00     653.72       114    1542.44     668.33    \n",
      "    23     349.99     635.33        46     735.00     636.38        69    1005.00     636.00        92    1305.00     655.70    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 29:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1978043.4 296779.42, 1979166.08 295650.86)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     665.39        21     350.00     637.81        41     720.01     635.64        61    1285.01     630.46        81    1445.01     664.96    \n",
      "     2      10.01     665.25        22     390.00     635.72        42     760.01     634.07        62    1290.01     632.77        82    1450.01     666.36    \n",
      "     3      15.00     665.01        23     395.01     634.91        43     765.01     633.98        63    1293.56     634.69        83    1455.00     667.37    \n",
      "     4      50.01     655.72        24     400.00     633.40        44     805.01     633.79        64    1300.01     638.19        84    1460.00     668.32    \n",
      "     5      55.01     654.62        25     405.00     632.96        45     850.00     634.07        65    1310.00     644.11        85    1465.01     669.07    \n",
      "     6     100.01     646.94        26     420.00     633.12        46     855.01     634.06        66    1315.00     646.84        86    1470.00     669.65    \n",
      "     7     105.01     646.67        27     460.00     632.96        47     940.01     633.06        67    1330.01     654.19        87    1475.01     669.43    \n",
      "     8     115.00     646.19        28     490.01     633.19        48     945.00     633.03        68    1335.00     655.50        88    1480.01     669.81    \n",
      "     9     155.01     644.77        29     525.00     633.75        49    1040.00     633.94        69    1340.01     655.53        89    1485.01     669.28    \n",
      "    10     175.00     643.77        30     565.00     635.04        50    1045.01     633.95        70    1345.01     655.70        90    1490.01     668.62    \n",
      "    11     200.00     642.66        31     570.01     635.16        51    1050.00     633.87        71    1360.00     656.51        91    1510.00     664.44    \n",
      "    12     205.01     642.39        32     600.00     635.19        52    1115.01     633.98        72    1365.00     656.93        92    1515.00     663.89    \n",
      "    13     245.01     638.97        33     610.00     635.40        53    1118.13     633.97        73    1380.01     660.18        93    1530.01     662.65    \n",
      "    14     260.00     637.81        34     635.01     635.60        54    1120.00     633.96        74    1385.01     661.19        94    1535.00     662.36    \n",
      "    15     310.00     639.45        35     640.00     635.67        55    1125.00     634.11        75    1390.01     661.63        95    1540.01     662.49    \n",
      "    16     315.00     639.53        36     650.00     635.90        56    1135.00     634.47        76    1415.00     661.62        96    1545.01     662.66    \n",
      "    17     330.01     639.39        37     655.01     635.99        57    1140.01     633.50        77    1420.00     661.40        97    1591.87     665.98    \n",
      "    18     335.00     639.31        38     700.00     636.02        58    1145.00     632.34        78    1425.01     660.11    \n",
      "    19     340.01     638.92        39     705.00     635.96        59    1150.01     631.07        79    1430.00     660.37    \n",
      "    20     345.01     638.16        40     715.00     635.78        60    1155.01     629.92        80    1440.01     663.49    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 30:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1978357.87 297099.76, 1979545.2 296000.6)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     663.72        24     415.00     636.54        47     760.00     633.54        70    1065.00     631.04        93    1370.00     656.43    \n",
      "     2       5.00     662.53        25     420.00     636.28        48     765.00     633.58        71    1149.99     629.07        94    1375.00     658.31    \n",
      "     3      15.00     660.58        26     470.00     634.04        49     795.00     633.39        72    1155.00     629.99        95    1385.00     660.11    \n",
      "     4      30.00     656.94        27     475.00     633.93        50     800.00     633.32        73    1160.00     631.06        96    1400.00     663.02    \n",
      "     5      35.00     655.25        28     520.00     634.25        51     815.00     632.88        74    1170.00     633.00        97    1405.00     662.95    \n",
      "     6      40.00     654.16        29     525.00     634.14        52     820.00     632.91        75    1175.00     633.40        98    1410.00     662.28    \n",
      "     7      75.00     647.32        30     540.00     633.59        53     865.00     633.51        76    1180.00     631.59        99    1415.00     662.04    \n",
      "     8      80.00     646.87        31     545.00     633.46        54     870.00     633.89        77    1185.00     629.68       100    1420.01     661.94    \n",
      "     9     125.00     642.96        32     564.99     633.19        55     885.00     635.21        78    1190.00     629.05       101    1424.99     662.08    \n",
      "    10     130.00     642.63        33     590.00     633.18        56     890.00     635.21        79    1265.00     630.33       102    1450.00     665.25    \n",
      "    11     135.00     642.40        34     610.00     633.64        57     900.00     634.20        80    1270.00     632.44       103    1455.00     666.20    \n",
      "    12     190.00     640.50        35     615.00     633.62        58     905.00     633.75        81    1283.23     640.53       104    1475.00     674.01    \n",
      "    13     210.00     640.18        36     620.00     633.52        59     915.00     633.34        82    1295.00     647.73       105    1480.01     676.02    \n",
      "    14     250.00     638.75        37     624.99     633.55        60     920.00     633.16        83    1300.01     650.76       106    1485.00     676.61    \n",
      "    15     290.00     637.63        38     650.00     634.14        61     965.00     632.62        84    1315.00     653.88       107    1490.00     675.60    \n",
      "    16     295.00     637.52        39     655.00     634.01        62     969.99     632.63        85    1320.00     654.61       108    1530.00     667.26    \n",
      "    17     330.00     637.27        40     660.00     634.21        63     975.00     632.68        86    1325.00     654.54       109    1535.00     666.35    \n",
      "    18     335.00     637.33        41     665.00     634.53        64    1029.04     633.87        87    1330.00     655.39       110    1585.00     662.23    \n",
      "    19     365.00     637.88        42     669.99     634.59        65    1029.99     633.89        88    1335.00     655.75       111    1590.00     662.25    \n",
      "    20     370.00     637.89        43     685.00     634.16        66    1035.00     634.03        89    1340.00     655.57       112    1605.00     662.64    \n",
      "    21     400.00     636.67        44     690.00     634.07        67    1050.00     634.73        90    1345.00     655.29       113    1610.00     662.80    \n",
      "    22     405.00     636.56        45     750.00     633.44        68    1055.00     633.04        91    1360.01     653.37       114    1617.99     663.36    \n",
      "    23     410.00     636.60        46     755.00     633.44        69    1060.00     631.75        92    1365.00     654.77    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 31:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1978660.58 297349.57, 1979906.69 296285.67)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     672.86        21     310.00     636.99        41     935.00     632.24        61    1235.00     644.66        81    1400.00     661.41    \n",
      "     2       5.00     671.67        22     355.00     636.49        42     980.00     633.00        62    1240.00     645.97        82    1404.99     661.90    \n",
      "     3      10.00     670.38        23     360.00     636.46        43     982.61     633.08        63    1245.00     647.49        83    1410.00     662.84    \n",
      "     4      30.00     665.49        24     365.00     636.39        44     985.00     633.16        64    1250.00     648.87        84    1415.00     663.95    \n",
      "     5      35.00     663.98        25     385.00     634.35        45    1005.00     633.94        65    1255.01     649.41        85    1445.00     672.39    \n",
      "     6      45.01     660.86        26     390.00     634.54        46    1020.00     634.34        66    1260.00     650.06        86    1450.00     673.46    \n",
      "     7      50.00     659.36        27     405.00     636.26        47    1025.00     632.80        67    1280.00     653.81        87    1455.00     673.85    \n",
      "     8      85.00     649.33        28     410.01     636.45        48    1030.00     630.86        68    1285.00     654.28        88    1460.00     674.92    \n",
      "     9      90.00     648.27        29     415.00     635.89        49    1035.00     629.34        69    1295.00     653.15        89    1465.00     675.14    \n",
      "    10      95.00     647.46        30     440.00     632.96        50    1039.99     628.61        70    1300.00     652.84        90    1475.00     675.84    \n",
      "    11     115.00     642.85        31     460.00     632.93        51    1045.00     627.93        71    1320.00     652.70        91    1480.00     675.77    \n",
      "    12     120.00     642.49        32     525.01     632.36        52    1100.00     628.23        72    1325.00     653.27        92    1515.00     668.51    \n",
      "    13     135.00     641.67        33     535.00     632.24        53    1185.00     629.78        73    1330.00     654.37        93    1519.99     668.04    \n",
      "    14     140.00     641.30        34     665.00     632.24        54    1190.00     630.12        74    1335.00     656.11        94    1590.00     662.30    \n",
      "    15     155.00     639.63        35     790.00     631.77        55    1200.00     631.52        75    1340.00     658.09        95    1595.00     662.02    \n",
      "    16     160.01     639.41        36     795.00     631.68        56    1205.00     633.26        76    1344.99     658.83        96    1625.00     662.79    \n",
      "    17     235.00     637.49        37     835.01     629.86        57    1215.00     637.53        77    1380.00     662.15        97    1630.00     662.96    \n",
      "    18     260.00     636.97        38     840.00     629.76        58    1223.63     641.38        78    1385.00     661.79        98    1638.50     663.56    \n",
      "    19     265.00     636.92        39     885.00     630.79        59    1225.00     641.99        79    1390.00     661.01    \n",
      "    20     305.00     637.01        40     905.00     631.50        60    1230.00     643.62        80    1395.00     661.08    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 32:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1978977.99 297555.3, 1980159.44 296538.42)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     680.61        22     235.00     634.09        43     805.00     629.47        64    1150.00     639.13        85    1335.00     663.53    \n",
      "     2      10.00     678.89        23     260.00     634.38        44     810.00     629.45        65    1151.80     639.87        86    1360.00     669.72    \n",
      "     3      15.00     677.08        24     265.00     634.56        45     865.00     631.58        66    1155.00     641.18        87    1365.00     670.60    \n",
      "     4      20.00     675.22        25     270.01     635.04        46     870.00     631.73        67    1160.00     642.60        88    1374.99     671.40    \n",
      "     5      45.00     667.37        26     275.00     635.13        47     880.00     631.91        68    1170.00     645.96        89    1380.00     671.76    \n",
      "     6      50.00     665.28        27     285.00     632.77        48     936.06     633.47        69    1175.00     647.02        90    1385.00     671.92    \n",
      "     7      75.00     653.74        28     290.00     632.51        49     945.01     633.72        70    1190.00     649.85        91    1390.00     672.40    \n",
      "     8      80.00     651.84        29     295.00     632.07        50     950.00     633.25        71    1195.00     650.61        92    1395.00     673.26    \n",
      "     9     105.00     646.20        30     305.00     632.33        51     955.00     631.52        72    1220.00     653.91        93    1405.00     674.26    \n",
      "    10     110.00     644.98        31     310.00     632.75        52     964.99     628.28        73    1225.00     654.30        94    1410.00     674.33    \n",
      "    11     120.00     642.44        32     315.00     632.98        53     970.00     627.59        74    1245.00     656.45        95    1415.00     674.26    \n",
      "    12     125.00     641.20        33     340.00     633.01        54     975.00     627.47        75    1250.00     657.51        96    1420.00     674.61    \n",
      "    13     135.00     638.97        34     350.00     632.30        55     980.00     627.32        76    1260.00     658.38        97    1425.00     674.78    \n",
      "    14     140.00     638.63        35     355.00     632.26        56     985.00     627.20        77    1265.00     658.99        98    1445.00     670.63    \n",
      "    15     150.00     638.59        36     370.00     632.27        57    1005.00     627.28        78    1275.00     660.58        99    1450.00     669.82    \n",
      "    16     160.01     638.60        37     445.00     631.81        58    1070.00     628.07        79    1300.00     663.52       100    1545.00     662.02    \n",
      "    17     165.00     638.37        38     485.00     631.39        59    1080.00     628.31        80    1305.00     662.75       101    1550.00     661.94    \n",
      "    18     170.00     638.08        39     490.00     631.39        60    1130.00     628.92        81    1310.00     661.77       102    1558.80     662.16    \n",
      "    19     220.00     634.39        40     530.00     631.70        61    1135.00     630.77        82    1315.00     661.87    \n",
      "    20     225.00     634.05        41     585.00     632.47        62    1140.00     634.20        83    1325.00     662.15    \n",
      "    21     230.00     633.98        42     760.00     630.96        63    1145.00     636.87        84    1330.00     662.34    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 33:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1979260.13 297960.87, 1979700.97 297484.76, 1980653.19 297020.41)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     687.39        25     370.00     633.03        49     825.00     630.59        73    1160.00     631.53        97    1425.00     659.84    \n",
      "     2      10.00     685.78        26     380.00     633.29        50     875.00     629.17        74    1174.99     631.48        98    1429.99     659.50    \n",
      "     3      14.99     685.16        27     385.00     633.56        51     880.00     628.95        75    1180.00     632.18        99    1444.99     660.76    \n",
      "     4      35.00     683.05        28     394.99     634.64        52     884.99     628.70        76    1184.99     633.45       100    1450.00     659.89    \n",
      "     5      40.00     682.32        29     399.99     634.80        53     890.00     628.94        77    1205.00     640.49       101    1454.99     659.54    \n",
      "     6      45.00     680.89        30     409.99     634.41        54     905.00     630.47        78    1209.99     642.94       102    1464.99     662.73    \n",
      "     7      50.00     679.14        31     430.00     634.25        55     910.00     630.87        79    1214.07     645.20       103    1479.99     667.01    \n",
      "     8      54.99     677.17        32     434.99     634.32        56     915.00     630.99        80    1220.00     648.48       104    1485.00     668.09    \n",
      "     9      65.00     669.91        33     440.00     634.60        57     969.99     631.78        81    1224.99     650.63       105    1515.00     671.75    \n",
      "    10      95.00     663.50        34     444.99     634.59        58     975.00     631.91        82    1265.00     653.53       106    1520.00     672.39    \n",
      "    11     100.00     661.66        35     450.00     634.47        59     989.99     632.76        83    1295.00     656.12       107    1525.00     672.82    \n",
      "    12     130.00     649.97        36     470.00     632.73        60     995.00     632.85        84    1300.00     655.71       108    1529.99     672.96    \n",
      "    13     135.00     648.21        37     475.00     632.33        61     997.46     632.42        85    1320.00     653.44       109    1550.00     672.62    \n",
      "    14     139.99     646.56        38     479.99     632.20        62    1000.00     631.98        86    1325.00     652.66       110    1564.99     672.98    \n",
      "    15     160.00     640.91        39     514.99     632.43        63    1004.99     630.61        87    1330.00     652.00       111    1570.00     673.04    \n",
      "    16     165.00     640.02        40     648.86     632.42        64    1010.00     629.11        88    1334.99     652.83       112    1575.00     672.73    \n",
      "    17     215.00     635.98        41     650.00     632.42        65    1014.99     628.71        89    1360.00     651.61       113    1585.00     672.85    \n",
      "    18     279.99     633.24        42     655.00     632.31        66    1045.00     627.58        90    1365.00     652.28       114    1589.99     673.31    \n",
      "    19     285.00     633.15        43     705.00     630.93        67    1050.00     627.45        91    1375.00     657.62       115    1595.00     674.07    \n",
      "    20     295.00     633.12        44     710.00     630.82        68    1135.00     627.50        92    1380.00     659.03       116    1599.99     673.82    \n",
      "    21     300.00     633.03        45     720.00     630.65        69    1139.99     627.57        93    1385.00     659.67       117    1605.00     673.13    \n",
      "    22     305.00     632.91        46     799.99     630.72        70    1145.00     628.02        94    1390.00     660.22       118    1610.00     672.63    \n",
      "    23     309.99     632.82        47     805.00     630.88        71    1149.99     629.51        95    1400.00     661.19       119    1708.27     665.16    \n",
      "    24     359.99     632.82        48     810.00     630.83        72    1155.00     631.34        96    1404.99     661.51    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 34:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1979601.04 298237.13, 1980188.83 297737.51, 1980952.96 297331.94)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     685.46        27     280.00     635.09        53     665.00     630.25        79     985.00     630.63       105    1360.00     663.84    \n",
      "     2       5.00     683.82        28     330.00     634.31        54     685.00     630.62        80    1000.00     640.05       106    1365.00     664.21    \n",
      "     3      10.00     682.60        29     335.00     634.33        55     690.00     630.39        81    1004.83     643.05       107    1370.00     663.96    \n",
      "     4      35.00     679.69        30     350.00     634.47        56     700.00     628.94        82    1005.01     643.16       108    1390.00     661.48    \n",
      "     5      40.00     678.61        31     365.00     634.12        57     705.00     628.02        83    1010.00     644.75       109    1395.00     661.74    \n",
      "     6      65.00     668.77        32     370.00     634.03        58     710.00     627.07        84    1015.00     645.41       110    1405.00     665.17    \n",
      "     7      70.00     666.75        33     375.00     633.88        59     715.00     626.56        85    1020.01     645.93       111    1410.00     666.92    \n",
      "     8      85.00     660.12        34     380.00     633.80        60     720.00     626.56        86    1055.00     648.49       112    1430.01     674.04    \n",
      "     9      90.01     657.68        35     395.00     633.72        61     730.00     626.65        87    1065.00     649.37       113    1450.00     681.06    \n",
      "    10     120.01     642.58        36     400.00     633.41        62     745.01     626.56        88    1070.00     649.72       114    1455.01     682.06    \n",
      "    11     125.00     642.53        37     415.00     632.22        63     750.00     626.56        89    1085.00     650.67       115    1460.00     682.70    \n",
      "    12     130.00     642.54        38     420.00     631.70        64     770.01     626.97        90    1125.00     653.50       116    1475.00     684.44    \n",
      "    13     135.00     642.48        39     425.00     630.69        65     771.44     627.05        91    1145.00     655.88       117    1480.00     684.54    \n",
      "    14     150.00     637.49        40     430.01     630.79        66     775.00     627.24        92    1185.01     660.29       118    1485.00     684.39    \n",
      "    15     155.00     636.99        41     435.00     631.95        67     780.00     627.57        93    1220.00     663.15       119    1495.00     683.72    \n",
      "    16     175.00     636.05        42     440.00     632.57        68     785.00     628.66        94    1225.00     663.09       120    1505.00     682.86    \n",
      "    17     185.00     635.91        43     450.00     632.83        69     790.00     629.80        95    1240.00     662.01       121    1510.00     682.55    \n",
      "    18     195.00     635.54        44     455.01     633.01        70     795.00     630.85        96    1245.01     661.82       122    1560.00     680.00    \n",
      "    19     200.00     635.32        45     460.01     633.11        71     810.00     630.96        97    1265.00     662.35       123    1565.00     679.60    \n",
      "    20     205.00     634.95        46     490.00     631.01        72     840.00     631.05        98    1270.01     661.16       124    1585.01     675.97    \n",
      "    21     210.00     635.01        47     495.00     630.71        73     845.00     631.47        99    1290.00     656.19       125    1610.01     670.29    \n",
      "    22     220.00     635.57        48     500.00     630.53        74     849.03     631.65       100    1295.00     655.44       126    1615.00     670.32    \n",
      "    23     235.00     635.34        49     580.00     630.03        75     850.01     631.69       101    1300.00     655.39       127    1620.00     670.23    \n",
      "    24     250.00     634.93        50     585.00     629.97        76     880.00     627.43       102    1305.00     655.43       128    1636.53     668.96    \n",
      "    25     270.00     635.02        51     620.00     629.88        77     885.00     626.96       103    1320.00     656.54    \n",
      "    26     275.00     635.07        52     635.00     629.93        78     980.00     627.61       104    1325.00     657.38    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 35:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1979886.12 298486.94, 1980720.78 297963.81, 1981191.01 297581.75)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     678.25        26     195.00     629.43        51     545.00     628.56        76     885.01     639.88       101    1345.00     661.81    \n",
      "     2       5.00     675.69        27     225.00     629.18        52     555.00     628.75        77     895.00     639.89       102    1365.00     664.17    \n",
      "     3      10.00     676.30        28     235.00     629.02        53     560.00     628.75        78     900.00     640.16       103    1370.01     664.85    \n",
      "     4      15.00     676.94        29     240.00     629.06        54     565.00     628.53        79     905.00     640.46       104    1395.00     668.77    \n",
      "     5      20.00     676.89        30     245.00     629.25        55     570.00     628.35        80     985.05     645.87       105    1400.00     669.62    \n",
      "     6      24.99     676.79        31     250.00     629.53        56     605.00     626.09        81     990.00     646.26       106    1430.00     675.75    \n",
      "     7      30.00     676.57        32     255.00     629.72        57     610.00     625.92        82    1065.00     652.39       107    1434.99     676.70    \n",
      "     8      35.00     674.71        33     260.01     629.95        58     615.00     626.17        83    1070.00     652.70       108    1440.00     677.40    \n",
      "     9      40.00     674.19        34     275.00     630.09        59     620.00     626.37        84    1125.00     655.40       109    1460.00     681.58    \n",
      "    10      45.00     673.76        35     345.00     631.52        60     645.00     627.22        85    1195.00     660.12       110    1465.00     682.58    \n",
      "    11      50.00     672.73        36     350.00     631.59        61     649.99     627.69        86    1200.00     660.58       111    1475.00     683.25    \n",
      "    12      55.00     670.53        37     405.00     631.52        62     655.00     627.98        87    1205.00     661.13       112    1480.00     683.68    \n",
      "    13      69.99     662.97        38     430.00     631.02        63     670.00     629.03        88    1210.00     661.61       113    1490.00     684.71    \n",
      "    14      85.00     655.49        39     435.00     630.98        64     675.00     628.96        89    1215.00     662.06       114    1500.00     685.08    \n",
      "    15      90.00     653.11        40     455.00     631.43        65     680.00     628.76        90    1220.00     661.68       115    1505.00     685.37    \n",
      "    16      95.00     650.96        41     460.00     631.50        66     683.62     628.65        91    1235.00     656.78       116    1515.00     686.05    \n",
      "    17     120.00     640.06        42     475.00     631.16        67     690.00     628.46        92    1260.00     651.45       117    1519.99     686.20    \n",
      "    18     125.00     637.93        43     480.00     631.27        68     695.00     627.83        93    1264.99     651.92       118    1525.00     686.25    \n",
      "    19     130.00     636.59        44     490.00     632.73        69     700.00     626.57        94    1285.01     656.62       119    1530.00     686.11    \n",
      "    20     135.00     635.58        45     495.00     632.41        70     705.00     625.86        95    1290.00     657.60       120    1540.01     685.55    \n",
      "    21     155.00     631.78        46     499.99     631.30        71     850.00     626.79        96    1295.00     658.32       121    1545.00     685.15    \n",
      "    22     160.00     631.01        47     510.00     629.01        72     855.00     628.69        97    1315.00     659.64       122    1575.00     679.38    \n",
      "    23     165.00     630.85        48     515.00     628.20        73     874.99     636.97        98    1330.00     660.93       123    1580.00     678.38    \n",
      "    24     185.00     630.09        49     520.00     628.24        74     880.00     639.11        99    1334.99     661.30       124    1590.93     675.74    \n",
      "    25     190.00     629.81        50     525.00     628.35        75     882.49     639.49       100    1340.00     661.45    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 36:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1980238.79 298839.62, 1981655.37 297910.91)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     653.57        26     290.00     630.03        51     565.00     629.90        76     970.00     642.02       101    1465.01     663.22    \n",
      "     2       5.01     653.19        27     295.01     630.13        52     575.01     629.88        77    1035.00     645.36       102    1485.01     665.35    \n",
      "     3      10.01     651.70        28     300.00     630.27        53     580.01     629.91        78    1040.00     645.57       103    1490.01     664.91    \n",
      "     4      30.00     644.71        29     305.01     630.29        54     585.01     630.07        79    1100.01     647.80       104    1500.01     663.83    \n",
      "     5      35.01     643.00        30     330.01     629.96        55     595.01     630.16        80    1110.00     648.28       105    1505.00     663.38    \n",
      "     6      50.01     638.28        31     335.00     629.86        56     625.01     630.20        81    1195.01     651.84       106    1510.00     662.97    \n",
      "     7      55.01     636.93        32     340.01     629.66        57     630.01     630.13        82    1200.01     652.10       107    1515.00     662.73    \n",
      "     8      65.00     635.18        33     350.01     629.41        58     640.00     631.01        83    1220.01     654.44       108    1520.01     662.71    \n",
      "     9      70.01     634.40        34     355.00     629.36        59     660.01     632.01        84    1225.01     653.95       109    1530.01     662.81    \n",
      "    10      75.01     634.11        35     400.00     630.22        60     665.01     632.14        85    1250.01     655.74       110    1535.01     663.23    \n",
      "    11      80.01     633.52        36     415.01     630.60        61     670.00     631.95        86    1255.01     656.58       111    1540.00     663.83    \n",
      "    12     100.00     631.03        37     420.01     630.05        62     675.00     631.26        87    1265.00     658.45       112    1545.00     664.53    \n",
      "    13     105.01     631.00        38     425.00     629.34        63     695.01     626.19        88    1270.01     659.22       113    1550.00     664.90    \n",
      "    14     115.01     631.65        39     435.00     627.86        64     696.52     626.11        89    1300.00     652.60       114    1570.01     666.04    \n",
      "    15     130.00     632.77        40     440.01     627.39        65     700.01     625.94        90    1305.01     652.21       115    1575.00     666.40    \n",
      "    16     135.00     632.54        41     445.01     627.58        66     835.01     627.44        91    1340.01     654.09       116    1615.00     668.85    \n",
      "    17     155.01     631.51        42     455.01     628.44        67     840.00     628.11        92    1345.00     654.51       117    1620.01     669.05    \n",
      "    18     160.01     631.17        43     460.00     628.47        68     850.01     635.71        93    1350.01     655.37       118    1635.01     668.84    \n",
      "    19     170.01     630.80        44     465.00     628.43        69     855.01     637.38        94    1355.01     655.72       119    1640.01     669.10    \n",
      "    20     175.01     630.69        45     470.00     628.66        70     860.00     638.09        95    1390.01     659.21       120    1645.00     669.47    \n",
      "    21     225.01     630.18        46     475.01     629.25        71     867.77     638.35        96    1435.00     662.32       121    1655.01     670.80    \n",
      "    22     245.01     630.37        47     480.01     629.81        72     905.01     639.61        97    1440.00     662.43       122    1660.01     671.78    \n",
      "    23     250.01     630.32        48     515.01     629.87        73     930.00     640.84        98    1450.00     662.52       123    1665.01     673.53    \n",
      "    24     275.01     629.94        49     535.00     630.09        74     935.00     641.01        99    1455.01     662.54       124    1670.01     673.16    \n",
      "    25     280.01     629.94        50     540.00     630.10        75     965.00     641.82       100    1460.01     662.74       125    1693.87     667.55    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 37:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1980632.61 299262.82, 1981373.23 298774.96, 1981925.75 298210.68)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     657.74        27     395.01     627.39        53     835.00     626.26        79    1015.00     636.37       105    1435.00     650.22    \n",
      "     2      50.00     655.73        28     400.00     627.39        54     840.00     626.68        80    1060.00     636.93       106    1440.00     651.09    \n",
      "     3      95.00     653.07        29     405.00     627.85        55     845.00     627.88        81    1065.00     636.96       107    1460.00     648.30    \n",
      "     4     100.00     652.44        30     410.00     628.53        56     855.00     628.64        82    1075.00     636.95       108    1470.00     647.08    \n",
      "     5     105.00     651.59        31     415.00     629.12        57     860.00     629.11        83    1080.00     636.98       109    1475.00     646.99    \n",
      "     6     110.00     650.79        32     425.00     630.57        58     875.00     630.44        84    1130.00     637.60       110    1500.01     648.64    \n",
      "     7     155.00     644.00        33     430.00     631.25        59     880.00     630.67        85    1135.00     637.71       111    1505.00     648.94    \n",
      "     8     160.00     642.99        34     435.00     631.22        60     885.00     630.70        86    1235.00     640.43       112    1515.00     648.96    \n",
      "     9     180.00     638.40        35     455.00     630.99        61     886.86     630.65        87    1260.00     640.85       113    1525.01     648.92    \n",
      "    10     205.00     632.15        36     460.00     631.00        62     890.00     630.63        88    1270.00     640.53       114    1530.00     648.83    \n",
      "    11     210.00     631.40        37     475.00     631.56        63     905.00     631.47        89    1285.01     641.00       115    1545.00     648.28    \n",
      "    12     225.00     630.87        38     480.00     631.21        64     910.00     631.57        90    1290.00     640.41       116    1550.00     648.43    \n",
      "    13     235.00     630.26        39     485.01     630.72        65     915.00     631.43        91    1295.00     639.73       117    1555.00     649.33    \n",
      "    14     255.00     630.28        40     510.00     628.58        66     920.00     631.21        92    1305.01     640.29       118    1560.00     650.42    \n",
      "    15     280.00     630.01        41     520.00     628.03        67     925.00     630.81        93    1310.00     640.54       119    1600.01     660.44    \n",
      "    16     295.01     629.96        42     530.00     627.95        68     930.00     630.35        94    1320.00     640.67       120    1605.01     661.72    \n",
      "    17     300.00     629.98        43     580.00     628.63        69     945.00     628.51        95    1325.00     641.05       121    1610.00     662.27    \n",
      "    18     310.00     630.19        44     585.00     628.62        70     950.00     628.32        96    1340.00     642.72       122    1620.00     662.87    \n",
      "    19     325.00     629.74        45     630.00     627.97        71     975.00     628.79        97    1345.00     643.11       123    1645.00     665.46    \n",
      "    20     330.00     629.33        46     635.00     627.98        72     980.00     629.01        98    1355.00     643.42       124    1660.00     663.78    \n",
      "    21     335.00     628.81        47     635.43     627.98        73     985.00     632.25        99    1360.00     643.55       125    1665.00     663.17    \n",
      "    22     350.00     628.62        48     640.00     628.02        74     988.19     634.15       100    1365.01     643.65       126    1670.00     662.94    \n",
      "    23     370.00     628.58        49     645.00     627.27        75     990.01     635.23       101    1370.00     643.69       127    1676.60     662.87    \n",
      "    24     380.00     628.64        50     650.00     625.99        76     995.00     635.32       102    1410.00     643.66    \n",
      "    25     385.01     628.19        51     655.00     625.61        77    1000.00     635.46       103    1415.00     643.86    \n",
      "    26     390.00     627.59        52     660.00     625.45        78    1005.00     635.92       104    1420.00     645.40    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 38:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1981155.75 299697.79, 1981843.46 299139.39, 1982369 298471)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     670.18        25     315.00     633.63        49     550.00     623.52        73     925.00     631.10        97    1455.00     638.84    \n",
      "     2       5.00     670.19        26     320.00     633.22        50     610.00     622.94        74     955.00     631.38        98    1460.00     639.67    \n",
      "     3      15.00     670.41        27     325.00     632.70        51     615.00     622.95        75     960.00     631.39        99    1475.00     645.66    \n",
      "     4      20.00     670.61        28     330.00     632.35        52     655.00     624.31        76    1000.00     632.05       100    1479.99     647.60    \n",
      "     5      24.99     672.47        29     335.00     632.14        53     660.00     624.57        77    1005.00     632.39       101    1485.00     648.49    \n",
      "     6      30.00     674.68        30     355.00     631.47        54     670.00     625.17        78    1024.99     634.09       102    1490.00     648.92    \n",
      "     7      40.00     679.24        31     360.00     631.26        55     675.00     625.44        79    1030.00     633.98       103    1500.00     646.70    \n",
      "     8      45.00     679.62        32     365.00     631.15        56     695.00     625.38        80    1035.00     633.78       104    1505.00     646.14    \n",
      "     9      50.00     679.16        33     370.00     631.36        57     735.00     625.08        81    1045.00     633.46       105    1524.99     644.11    \n",
      "    10      80.00     676.21        34     374.99     631.74        58     740.00     625.08        82    1070.00     628.56       106    1530.00     643.50    \n",
      "    11      85.00     675.85        35     380.00     630.93        59     784.99     624.92        83    1075.00     628.25       107    1545.00     640.60    \n",
      "    12     115.00     675.63        36     395.00     625.46        60     790.00     625.00        84    1085.00     628.22       108    1550.00     640.71    \n",
      "    13     129.38     675.64        37     400.00     625.13        61     795.00     625.18        85    1095.00     627.94       109    1554.99     641.93    \n",
      "    14     135.00     675.64        38     404.99     625.17        62     800.00     624.73        86    1100.00     629.92       110    1565.00     644.48    \n",
      "    15     140.00     675.47        39     415.00     625.30        63     810.00     623.71        87    1105.00     633.38       111    1570.00     645.56    \n",
      "    16     195.00     666.91        40     445.00     626.07        64     814.99     623.37        88    1120.74     633.60       112    1584.99     648.25    \n",
      "    17     200.00     665.79        41     455.00     626.12        65     855.00     622.56        89    1159.99     634.14       113    1590.00     648.93    \n",
      "    18     250.00     656.77        42     460.00     626.22        66     860.00     624.38        90    1165.00     634.18       114    1600.00     647.00    \n",
      "    19     255.00     654.43        43     464.99     626.16        67     874.99     630.32        91    1245.00     634.27       115    1605.00     645.98    \n",
      "    20     265.00     649.53        44     480.00     625.82        68     879.99     630.71        92    1250.00     634.33       116    1615.00     643.85    \n",
      "    21     269.99     647.22        45     485.00     625.45        69     885.86     630.74        93    1350.00     636.52       117    1620.00     644.51    \n",
      "    22     285.00     641.31        46     494.99     624.65        70     900.00     630.68        94    1425.00     637.38       118    1629.45     646.19    \n",
      "    23     290.00     639.60        47     499.99     624.43        71     910.00     630.84        95    1430.00     637.48       119    1760.00     662.00    \n",
      "    24     310.00     634.12        48     510.00     624.33        72     919.99     630.89        96    1435.00     637.83    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 39:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1981499.6 300082.79, 1982034.49 299653.7, 1982328.38 299271.64, 1982698.69 298719.12)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     728.39        25     450.00     635.64        49     730.00     623.02        73    1245.00     630.02        97    1610.00     645.80    \n",
      "     2       5.00     729.08        26     460.00     631.00        50     735.00     622.97        74    1250.00     629.78        98    1615.01     645.75    \n",
      "     3      10.00     729.81        27     465.00     628.07        51     745.00     623.08        75    1260.00     629.07        99    1635.00     640.14    \n",
      "     4      65.00     739.41        28     470.01     625.66        52     775.00     622.70        76    1265.00     629.09       100    1640.00     638.86    \n",
      "     5      70.00     741.05        29     495.00     625.28        53     800.00     622.72        77    1280.01     629.65       101    1655.00     635.35    \n",
      "     6      85.00     751.07        30     500.00     625.09        54     885.00     623.16        78    1285.00     630.28       102    1660.00     635.49    \n",
      "     7      90.00     753.42        31     505.00     624.49        55     890.00     623.32        79    1290.00     631.91       103    1665.00     635.75    \n",
      "     8      90.73     753.32        32     550.00     623.71        56     895.00     625.05        80    1295.00     632.32       104    1675.00     636.21    \n",
      "     9     105.00     751.31        33     555.00     623.79        57     910.00     630.62        81    1300.07     632.37       105    1695.00     637.45    \n",
      "    10     110.00     750.70        34     560.00     624.01        58     915.00     630.95        82    1330.00     632.64       106    1710.00     638.29    \n",
      "    11     135.01     748.59        35     565.00     623.93        59     925.00     630.94        83    1335.00     632.65       107    1715.00     639.13    \n",
      "    12     140.00     748.11        36     570.00     623.29        60     945.00     631.00        84    1409.99     632.11       108    1735.00     643.85    \n",
      "    13     145.00     747.66        37     575.00     622.73        61     955.00     630.81        85    1425.00     632.29       109    1745.00     645.72    \n",
      "    14     205.00     744.11        38     580.00     622.47        62    1020.00     630.70        86    1470.01     632.39       110    1750.00     646.26    \n",
      "    15     210.01     743.58        39     625.00     622.84        63    1065.00     630.33        87    1475.00     632.34       111    1755.00     645.87    \n",
      "    16     270.00     734.88        40     630.00     622.95        64    1125.00     629.58        88    1485.00     632.18       112    1770.00     643.52    \n",
      "    17     275.00     733.74        41     655.00     622.73        65    1130.00     629.61        89    1490.00     632.20       113    1775.00     643.64    \n",
      "    18     330.00     717.06        42     660.00     622.73        66    1140.01     629.74        90    1555.00     633.02       114    1790.01     645.36    \n",
      "    19     340.00     714.19        43     680.00     623.03        67    1167.75     629.88        91    1560.01     633.13       115    1795.00     646.35    \n",
      "    20     345.00     710.75        44     685.73     623.17        68    1210.01     630.14        92    1565.00     633.19       116    1820.01     651.64    \n",
      "    21     370.00     692.34        45     695.00     623.55        69    1215.00     630.20        93    1575.00     633.24       117    1825.00     652.61    \n",
      "    22     395.00     673.76        46     700.00     623.65        70    1230.00     630.89        94    1580.00     634.93       118    1830.00     653.84    \n",
      "    23     405.00     666.56        47     705.00     623.63        71    1235.00     630.90        95    1590.00     639.37       119    1832.89     654.57    \n",
      "    24     445.00     638.61        48     710.00     623.55        72    1240.00     630.31        96    1595.00     641.26    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 40:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1981828.76 300511.88, 1982551.74 299947.6, 1983174.8 299048.28)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     725.33        30     520.01     626.20        59    1295.01     627.74        88    1610.01     632.15       117    1825.01     645.76    \n",
      "     2      85.00     735.35        31     525.01     625.80        60    1375.01     628.15        89    1620.01     632.03       118    1830.01     644.94    \n",
      "     3      90.00     736.71        32     550.01     624.19        61    1385.01     628.60        90    1625.00     631.94       119    1835.01     643.44    \n",
      "     4      95.01     736.88        33     565.00     623.10        62    1390.00     628.87        91    1650.01     632.20       120    1840.00     641.65    \n",
      "     5     100.01     737.36        34     570.00     622.97        63    1405.01     629.85        92    1655.01     632.32       121    1855.01     636.03    \n",
      "     6     105.01     737.99        35     575.01     622.89        64    1410.00     629.97        93    1665.00     631.78       122    1860.00     635.24    \n",
      "     7     125.00     741.16        36     580.01     622.85        65    1445.01     629.62        94    1670.01     632.02       123    1880.00     635.45    \n",
      "     8     126.91     741.28        37     630.01     622.76        66    1450.00     629.77        95    1675.01     632.34       124    1885.01     636.27    \n",
      "     9     130.00     741.48        38     645.01     622.81        67    1490.00     630.51        96    1680.01     632.69       125    1890.01     638.36    \n",
      "    10     135.01     741.12        39     650.01     622.80        68    1495.01     630.48        97    1685.00     632.85       126    1895.01     640.37    \n",
      "    11     145.01     740.34        40     675.01     622.53        69    1500.01     630.37        98    1690.01     632.96       127    1900.00     642.29    \n",
      "    12     150.01     739.65        41     685.01     621.65        70    1505.01     630.29        99    1695.01     633.01       128    1905.01     643.70    \n",
      "    13     185.00     734.12        42     690.00     621.18        71    1510.01     629.62       100    1705.00     632.87       129    1915.01     644.84    \n",
      "    14     190.01     733.39        43     695.00     621.17        72    1515.01     628.79       101    1710.01     632.87       130    1920.00     645.46    \n",
      "    15     235.01     728.13        44     845.01     622.15        73    1520.01     628.05       102    1715.01     632.99       131    1925.01     645.17    \n",
      "    16     240.01     727.49        45     850.00     622.33        74    1525.01     629.02       103    1720.01     633.07       132    1930.01     643.73    \n",
      "    17     255.00     724.34        46     855.00     624.11        75    1530.01     629.53       104    1730.01     633.47       133    1940.00     641.29    \n",
      "    18     260.01     723.03        47     870.01     629.55        76    1535.01     630.45       105    1735.01     633.74       134    1945.01     640.15    \n",
      "    19     315.00     706.16        48     875.01     631.09        77    1540.01     629.40       106    1740.01     633.93       135    1950.01     641.45    \n",
      "    20     320.00     704.47        49     880.00     631.06        78    1545.01     629.09       107    1755.01     634.18       136    1975.01     652.51    \n",
      "    21     340.01     696.18        50     890.00     630.88        79    1550.01     628.72       108    1765.01     634.49       137    1980.01     656.68    \n",
      "    22     410.01     666.81        51     917.12     630.73        80    1555.01     629.16       109    1770.01     634.03       138    1985.01     659.03    \n",
      "    23     415.00     664.34        52     935.01     630.67        81    1560.01     629.89       110    1780.01     632.51       139    2000.01     660.33    \n",
      "    24     435.01     653.16        53     950.01     630.37        82    1565.00     630.72       111    1785.01     632.21       140    2005.01     660.60    \n",
      "    25     440.00     650.41        54     985.01     630.02        83    1568.52     631.26       112    1790.01     632.08       141    2011.19     660.82    \n",
      "    26     460.01     640.04        55    1090.01     628.50        84    1570.01     631.48       113    1795.01     632.41    \n",
      "    27     465.01     637.94        56    1115.00     628.53        85    1585.00     631.67       114    1800.00     632.97    \n",
      "    28     505.01     629.36        57    1230.01     628.23        86    1595.01     631.85       115    1805.01     635.60    \n",
      "    29     515.01     626.68        58    1290.01     627.81        87    1605.00     632.18       116    1820.00     643.86    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 41:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1982316.63 301117.3, 1983257.09 300364.93, 1984002 299506)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     734.86        24     385.00     694.04        47     920.00     627.22        70    1810.01     627.90        93    2075.00     637.39    \n",
      "     2      35.00     738.33        25     390.00     691.49        48     925.00     627.29        71    1815.00     628.11        94    2080.00     635.97    \n",
      "     3      40.00     739.47        26     415.00     678.45        49    1015.00     627.97        72    1820.00     628.05        95    2095.00     631.34    \n",
      "     4      45.00     740.88        27     435.00     668.64        50    1020.00     627.94        73    1840.00     627.60        96    2100.01     630.58    \n",
      "     5      85.00     751.87        28     440.00     666.28        51    1050.00     627.60        74    1845.00     627.32        97    2110.00     631.48    \n",
      "     6      90.00     753.39        29     460.00     659.37        52    1075.00     627.16        75    1855.00     627.63        98    2115.00     631.90    \n",
      "     7     100.00     756.66        30     465.00     657.36        53    1204.38     627.33        76    1860.00     628.04        99    2120.00     632.15    \n",
      "     8     105.00     758.39        31     525.00     630.30        54    1335.00     627.21        77    1910.00     627.88       100    2160.00     633.93    \n",
      "     9     116.95     762.76        32     530.00     628.24        55    1460.00     626.92        78    1915.00     627.90       101    2190.00     635.02    \n",
      "    10     120.00     763.87        33     535.00     626.49        56    1470.00     626.76        79    1940.00     628.63       102    2195.00     635.33    \n",
      "    11     125.00     764.67        34     540.00     624.94        57    1510.00     625.82        80    1945.00     628.84       103    2200.00     636.30    \n",
      "    12     140.00     766.27        35     545.00     624.33        58    1515.00     625.85        81    1950.00     630.53       104    2205.00     637.03    \n",
      "    13     144.99     766.90        36     550.00     623.81        59    1595.00     626.73        82    1965.00     643.01       105    2220.00     642.37    \n",
      "    14     150.00     767.58        37     570.00     621.94        60    1685.00     626.58        83    1969.99     644.31       106    2225.00     644.18    \n",
      "    15     155.00     767.73        38     575.00     621.65        61    1730.00     626.25        84    1974.64     644.17       107    2230.00     645.89    \n",
      "    16     180.01     760.83        39     580.00     621.59        62    1735.00     626.16        85    1975.00     644.16       108    2245.00     649.44    \n",
      "    17     200.00     755.89        40     765.00     621.19        63    1740.00     625.94        86    1990.00     641.57       109    2250.00     649.94    \n",
      "    18     205.00     754.62        41     770.00     621.27        64    1750.00     626.14        87    1994.99     639.90       110    2253.38     650.25    \n",
      "    19     225.00     748.53        42     775.00     622.86        65    1755.00     626.50        88    2015.00     630.86       111    2363.00     662.00    \n",
      "    20     230.00     747.10        43     780.00     624.36        66    1760.00     627.08        89    2020.00     628.74    \n",
      "    21     275.00     735.98        44     805.00     624.73        67    1765.00     627.56        90    2060.00     636.97    \n",
      "    22     335.00     718.06        45     820.00     625.10        68    1785.00     627.71        91    2065.00     638.04    \n",
      "    23     340.00     716.03        46     915.00     627.09        69    1805.00     627.72        92    2070.00     638.75    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 42:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1982933.81 301763.87, 1984603.13 300041.64)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     720.63        25     305.00     720.29        49     725.00     624.98        73    1525.01     625.71        97    2090.00     642.83    \n",
      "     2      20.01     722.62        26     315.00     717.00        50     730.00     625.00        74    1620.00     626.66        98    2095.00     643.99    \n",
      "     3      25.01     722.85        27     325.00     713.76        51     750.00     624.89        75    1700.00     626.40        99    2100.00     645.47    \n",
      "     4      90.00     725.24        28     330.00     711.98        52     825.00     625.90        76    1820.00     627.11       100    2105.00     647.01    \n",
      "     5      95.00     725.68        29     345.00     705.89        53     945.00     626.20        77    1840.00     627.12       101    2110.00     647.83    \n",
      "     6     100.00     722.36        30     350.00     703.76        54    1050.00     625.73        78    1845.00     627.24       102    2150.00     650.63    \n",
      "     7     105.00     719.27        31     410.00     672.86        55    1150.00     624.52        79    1930.00     630.79       103    2155.00     651.11    \n",
      "     8     110.00     718.31        32     414.99     670.45        56    1155.00     624.51        80    1940.00     631.10       104    2200.00     655.97    \n",
      "     9     125.00     718.12        33     445.00     656.88        57    1245.00     625.63        81    1945.00     631.86       105    2220.00     657.92    \n",
      "    10     130.00     718.28        34     450.00     654.31        58    1250.01     625.65        82    1950.00     632.71       106    2255.00     661.08    \n",
      "    11     140.00     719.73        35     470.00     643.81        59    1300.00     625.57        83    1960.00     634.64       107    2260.00     661.76    \n",
      "    12     145.00     720.16        36     490.00     637.24        60    1330.00     625.62        84    1965.00     635.75       108    2275.00     663.99    \n",
      "    13     150.00     719.72        37     495.00     635.36        61    1370.00     625.40        85    1965.55     635.99       109    2280.00     664.59    \n",
      "    14     155.00     719.08        38     510.00     625.23        62    1425.00     625.60        86    1970.00     637.91       110    2290.00     665.62    \n",
      "    15     155.18     719.06        39     515.00     621.80        63    1430.00     625.26        87    1990.00     643.21       111    2295.00     667.15    \n",
      "    16     160.00     718.55        40     555.00     621.84        64    1435.00     624.63        88    1995.00     643.83       112    2310.00     672.14    \n",
      "    17     165.00     720.03        41     560.00     621.82        65    1440.00     623.85        89    2000.00     643.75       113    2330.00     678.60    \n",
      "    18     175.00     723.10        42     575.00     621.68        66    1445.00     624.46        90    2005.00     642.57       114    2335.00     678.97    \n",
      "    19     180.00     723.39        43     660.00     621.84        67    1450.00     625.17        91    2020.00     639.62       115    2355.00     680.21    \n",
      "    20     185.00     723.16        44     665.00     622.21        68    1455.01     625.36        92    2025.00     638.69       116    2375.00     681.07    \n",
      "    21     190.00     723.14        45     670.00     623.09        69    1465.01     625.80        93    2060.00     641.62       117    2380.00     680.92    \n",
      "    22     225.01     722.67        46     675.00     623.76        70    1470.01     625.95        94    2065.00     642.07       118    2398.48     675.35    \n",
      "    23     270.01     721.74        47     680.00     623.81        71    1475.01     625.89        95    2070.00     642.39    \n",
      "    24     300.00     720.76        48     715.00     624.77        72    1520.01     625.70        96    2085.00     642.21    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 43:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1983409.92 302228.22, 1985167.41 300523.63)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     715.49        28     359.99     712.66        55    1184.99     624.68        82    1735.00     626.80       109    2105.00     640.28    \n",
      "     2       5.00     715.88        29     364.99     709.95        56    1189.99     624.63        83    1740.00     627.00       110    2140.00     642.18    \n",
      "     3      14.99     716.72        30     400.00     689.33        57    1200.00     624.34        84    1745.00     627.62       111    2145.00     642.48    \n",
      "     4      20.00     717.09        31     405.00     686.45        58    1205.00     624.27        85    1755.00     628.40       112    2150.01     642.72    \n",
      "     5      55.00     718.78        32     424.99     675.17        59    1255.00     623.92        86    1760.00     628.38       113    2155.00     642.85    \n",
      "     6      70.00     720.47        33     430.00     672.20        60    1270.00     624.15        87    1765.00     628.32       114    2160.00     642.85    \n",
      "     7      75.00     720.36        34     460.00     653.86        61    1275.00     624.13        88    1780.00     628.59       115    2165.00     643.00    \n",
      "     8      80.00     719.93        35     465.00     650.75        62    1280.00     624.02        89    1790.00     628.45       116    2195.00     644.25    \n",
      "     9      85.00     719.39        36     480.00     640.62        63    1284.99     623.88        90    1795.00     628.41       117    2210.00     644.75    \n",
      "    10      90.00     719.29        37     485.00     638.15        64    1290.00     623.98        91    1820.00     628.33       118    2235.00     645.97    \n",
      "    11     100.00     720.75        38     505.00     628.69        65    1295.00     624.48        92    1824.99     628.53       119    2255.00     647.05    \n",
      "    12     105.00     721.44        39     510.00     625.90        66    1399.99     624.62        93    1895.00     632.44       120    2279.99     648.52    \n",
      "    13     120.70     723.07        40     515.00     623.08        67    1560.00     625.80        94    1900.00     632.67       121    2285.00     649.07    \n",
      "    14     125.00     723.51        41     520.00     622.01        68    1595.00     625.73        95    1920.00     636.40       122    2300.00     651.09    \n",
      "    15     130.00     724.08        42     665.00     621.46        69    1600.00     625.84        96    1925.00     636.96       123    2305.00     651.66    \n",
      "    16     165.00     728.46        43     670.00     622.65        70    1615.00     625.57        97    1970.00     641.42       124    2315.00     653.01    \n",
      "    17     170.00     728.57        44     675.00     624.20        71    1620.00     625.61        98    1980.71     642.36       125    2340.00     656.04    \n",
      "    18     175.00     728.53        45     680.00     625.11        72    1625.00     625.71        99    1985.00     642.73       126    2350.00     657.52    \n",
      "    19     220.00     724.75        46     735.00     625.51        73    1630.00     625.84       100    1990.00     643.08       127    2375.00     660.45    \n",
      "    20     225.00     724.29        47     764.99     625.17        74    1644.99     626.57       101    2005.00     640.71       128    2385.00     661.96    \n",
      "    21     239.99     722.62        48     769.99     625.16        75    1650.00     626.66       102    2010.00     640.03       129    2390.00     662.42    \n",
      "    22     244.99     722.09        49     795.00     625.29        76    1675.00     627.37       103    2020.00     639.27       130    2400.00     663.21    \n",
      "    23     265.00     720.51        50     800.00     625.29        77    1680.00     627.19       104    2025.00     638.94       131    2405.00     663.17    \n",
      "    24     335.00     716.29        51     840.00     625.06        78    1685.00     626.89       105    2030.00     638.71       132    2415.00     662.91    \n",
      "    25     340.00     716.18        52     845.00     625.06        79    1700.00     625.88       106    2035.00     638.59       133    2440.00     662.02    \n",
      "    26     350.00     716.27        53     950.00     625.51        80    1705.00     625.82       107    2070.00     639.14       134    2445.00     661.81    \n",
      "    27     355.00     715.00        54    1179.99     624.67        81    1730.00     626.70       108    2099.99     640.04       135    2448.35     661.61    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 44:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1983983.01 302918.87, 1985952.1 301108.48)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     700.02        23     505.00     664.40        45    1490.00     621.74        67    1845.00     639.72        89    2155.00     644.92    \n",
      "     2      55.00     704.06        24     510.00     660.63        46    1494.99     621.58        68    1855.00     640.30        90    2163.42     644.99    \n",
      "     3      89.99     706.88        25     525.00     649.03        47    1535.00     621.58        69    1860.00     640.52        91    2165.00     645.00    \n",
      "     4     120.00     708.71        26     540.00     638.51        48    1540.00     621.70        70    1885.00     641.05        92    2170.00     644.93    \n",
      "     5     130.00     709.45        27     544.99     635.53        49    1545.00     621.96        71    1925.00     640.99        93    2195.00     644.05    \n",
      "     6     150.00     711.24        28     565.00     623.88        50    1565.00     623.14        72    1930.00     641.02        94    2205.00     643.40    \n",
      "     7     155.00     711.29        29     570.01     621.33        51    1570.00     623.30        73    1935.00     641.00        95    2220.00     643.67    \n",
      "     8     168.78     711.02        30     720.00     621.30        52    1625.00     623.67        74    2020.00     641.47        96    2305.01     645.59    \n",
      "     9     224.99     709.90        31     725.00     622.80        53    1629.99     623.94        75    2025.00     641.03        97    2375.00     647.45    \n",
      "    10     305.00     707.65        32     730.00     623.29        54    1665.00     626.92        76    2030.00     640.93        98    2405.00     648.52    \n",
      "    11     310.00     707.59        33     735.00     623.49        55    1670.00     626.55        77    2050.00     640.84        99    2410.00     648.82    \n",
      "    12     400.00     705.39        34     895.00     622.82        56    1675.00     626.03        78    2055.00     640.95       100    2515.00     656.24    \n",
      "    13     405.00     705.24        35     955.00     623.37        57    1680.00     625.82        79    2065.00     641.43       101    2580.00     660.24    \n",
      "    14     420.00     703.40        36    1220.00     623.54        58    1685.00     625.74        80    2070.00     641.57       102    2585.00     660.58    \n",
      "    15     425.00     702.96        37    1230.00     623.59        59    1690.00     625.71        81    2075.00     641.22       103    2590.00     661.12    \n",
      "    16     430.00     702.70        38    1335.00     623.42        60    1740.00     628.78        82    2085.00     640.97       104    2620.00     664.94    \n",
      "    17     435.00     702.52        39    1370.00     623.09        61    1745.00     629.74        83    2110.01     639.94       105    2625.00     665.13    \n",
      "    18     440.00     700.18        40    1420.00     623.09        62    1750.00     631.79        84    2115.00     640.46       106    2635.01     665.13    \n",
      "    19     455.00     692.18        41    1440.00     622.23        63    1755.00     632.56        85    2135.00     643.47       107    2650.00     665.02    \n",
      "    20     460.00     689.69        42    1445.00     622.10        64    1800.00     635.99        86    2140.00     644.19       108    2655.00     665.15    \n",
      "    21     475.00     682.61        43    1475.00     622.44        65    1810.00     637.13        87    2145.00     644.84       109    2674.85     666.13    \n",
      "    22     480.00     680.15        44    1480.00     622.28        66    1814.99     637.63        88    2150.00     644.95    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 45:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1984888.21 303536.05, 1986951.34 301878.48)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     671.47        21     385.00     669.53        41    1249.99     621.18        61    1875.00     635.44        81    2429.99     652.33    \n",
      "     2      15.00     674.17        22     390.00     667.13        42    1450.00     621.54        62    1880.00     635.25        82    2465.00     654.19    \n",
      "     3      20.00     675.47        23     439.99     640.31        43    1470.00     621.71        63    1890.00     635.31        83    2470.00     654.51    \n",
      "     4      55.00     686.83        24     449.99     635.06        44    1495.00     621.46        64    1894.99     635.68        84    2474.99     654.99    \n",
      "     5      60.00     687.73        25     455.00     632.31        45    1545.00     621.38        65    1901.79     636.33        85    2480.00     655.34    \n",
      "     6      80.00     690.11        26     460.00     629.49        46    1555.00     621.82        66    1919.99     638.08        86    2515.00     657.45    \n",
      "     7     130.00     701.37        27     464.99     626.61        47    1585.00     623.43        67    1924.99     638.59        87    2519.99     657.97    \n",
      "     8     135.00     702.42        28     470.00     625.45        48    1590.00     623.81        68    1930.00     638.57        88    2564.99     667.98    \n",
      "     9     139.99     702.00        29     490.00     621.67        49    1594.99     624.65        69    1949.99     637.56        89    2580.00     670.64    \n",
      "    10     167.79     699.37        30     495.00     621.30        50    1625.00     628.79        70    1955.00     637.47        90    2590.00     672.21    \n",
      "    11     194.99     696.80        31     699.99     621.30        51    1660.00     632.04        71    1985.00     637.12        91    2595.00     672.92    \n",
      "    12     199.99     696.53        32     705.00     621.54        52    1664.99     632.66        72    1989.99     637.14        92    2605.00     673.89    \n",
      "    13     220.00     696.16        33     710.00     622.11        53    1669.99     632.83        73    2070.00     638.85        93    2610.00     674.31    \n",
      "    14     225.00     695.88        34     775.00     622.37        54    1734.99     633.22        74    2075.00     638.99        94    2614.99     674.61    \n",
      "    15     315.00     687.75        35     800.00     622.33        55    1739.99     633.28        75    2160.00     642.52        95    2620.00     674.58    \n",
      "    16     320.00     687.17        36     840.00     621.72        56    1755.00     633.84        76    2174.99     643.00        96    2639.99     670.60    \n",
      "    17     345.00     681.60        37     900.00     622.31        57    1805.00     634.69        77    2260.00     644.74        97    2646.52     669.39    \n",
      "    18     349.99     680.57        38    1005.00     622.23        58    1810.00     634.85        78    2289.99     645.49    \n",
      "    19     354.99     679.32        39    1060.00     621.77        59    1840.00     639.93        79    2400.00     651.23    \n",
      "    20     380.00     671.22        40    1155.00     622.01        60    1845.00     639.85        80    2405.00     651.44    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 46:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1985537.71 304273.72, 1986460.54 303227.46, 1987630.24 302475.09)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     676.02        25     340.00     666.45        49    1205.00     621.79        73    1865.00     630.65        97    2225.00     637.98    \n",
      "     2      10.00     677.02        26     380.00     654.18        50    1210.00     621.91        74    1875.00     630.70        98    2245.00     639.24    \n",
      "     3      25.00     677.63        27     385.00     652.34        51    1215.00     622.41        75    1880.00     630.70        99    2249.99     639.50    \n",
      "     4      45.00     678.84        28     415.00     638.37        52    1220.00     622.43        76    1900.00     630.15       100    2330.00     642.79    \n",
      "     5      50.00     679.08        29     420.00     636.00        53    1345.00     621.52        77    1905.00     630.95       101    2354.99     643.46    \n",
      "     6      70.00     679.83        30     425.00     633.36        54    1390.00     621.46        78    1914.99     632.70       102    2425.00     645.68    \n",
      "     7      74.99     679.98        31     440.00     626.25        55    1395.09     621.40        79    1920.00     633.67       103    2509.99     649.43    \n",
      "     8     110.00     680.78        32     445.00     623.50        56    1400.00     621.31        80    1925.00     634.68       104    2515.00     649.68    \n",
      "     9     161.30     682.33        33     450.00     621.30        57    1634.99     621.30        81    1930.00     635.58       105    2555.00     652.23    \n",
      "    10     175.00     682.74        34     760.00     621.30        58    1640.00     621.39        82    1935.00     635.62       106    2560.00     652.50    \n",
      "    11     180.00     682.52        35     765.00     621.59        59    1650.00     623.67        83    1940.00     635.46       107    2610.00     654.33    \n",
      "    12     210.00     679.39        36     770.00     622.07        60    1700.00     623.24        84    1945.00     634.51       108    2614.99     654.56    \n",
      "    13     225.00     677.91        37     774.99     622.36        61    1715.00     623.43        85    1949.27     633.85       109    2695.00     659.26    \n",
      "    14     230.00     677.31        38     780.00     622.37        62    1730.00     624.18        86    1950.00     633.74       110    2700.00     659.58    \n",
      "    15     260.00     673.42        39     820.00     622.12        63    1735.00     624.20        87    1960.00     632.43       111    2710.00     660.30    \n",
      "    16     265.00     672.73        40     900.00     622.22        64    1739.99     624.48        88    1965.00     632.01       112    2735.00     662.42    \n",
      "    17     274.99     671.07        41    1020.00     621.96        65    1745.00     624.98        89    2015.00     632.87       113    2745.00     662.89    \n",
      "    18     280.00     670.52        42    1095.00     622.17        66    1749.99     625.19        90    2090.00     633.48       114    2750.00     663.33    \n",
      "    19     284.99     670.02        43    1099.99     622.13        67    1755.00     625.34        91    2095.00     633.45       115    2765.00     666.06    \n",
      "    20     295.00     668.92        44    1115.00     621.89        68    1759.99     625.44        92    2100.00     633.54       116    2770.00     666.63    \n",
      "    21     304.99     667.91        45    1120.00     621.78        69    1800.00     627.93        93    2115.00     633.93       117    2775.00     666.77    \n",
      "    22     309.99     667.54        46    1130.00     621.45        70    1815.00     629.02        94    2140.00     634.48       118    2785.87     666.75    \n",
      "    23     330.00     666.81        47    1134.99     621.32        71    1825.00     630.08        95    2195.00     636.33    \n",
      "    24     335.00     666.67        48    1150.00     621.30        72    1830.00     630.27        96    2200.00     636.56    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 47:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1986342.98 305031.97, 1988476.66 303098.15)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     676.38        28     485.00     662.07        55    1060.00     619.72        82    1640.00     621.05       109    1935.00     627.03    \n",
      "     2      85.00     677.70        29     530.00     658.44        56    1080.00     619.62        83    1644.99     621.24       110    1970.00     627.77    \n",
      "     3     105.00     677.43        30     535.00     657.26        57    1100.00     619.73        84    1650.00     621.70       111    2005.00     628.26    \n",
      "     4     110.00     677.24        31     550.00     652.24        58    1130.00     620.23        85    1670.00     623.79       112    2085.00     630.37    \n",
      "     5     115.00     676.95        32     555.00     650.12        59    1135.00     620.28        86    1675.00     624.39       113    2185.00     631.75    \n",
      "     6     120.00     676.74        33     600.00     625.62        60    1150.00     620.28        87    1680.00     625.13       114    2190.00     631.76    \n",
      "     7     139.66     676.36        34     605.00     622.96        61    1170.00     620.51        88    1690.00     626.17       115    2280.00     632.64    \n",
      "     8     160.01     675.96        35     610.01     621.17        62    1190.00     620.61        89    1695.00     627.30       116    2380.00     634.18    \n",
      "     9     200.00     675.48        36     630.01     619.79        63    1205.00     620.62        90    1710.01     631.29       117    2480.00     636.36    \n",
      "    10     205.00     675.46        37     645.00     618.68        64    1260.01     620.37        91    1715.00     631.90       118    2485.00     636.53    \n",
      "    11     215.00     676.05        38     650.00     618.37        65    1270.00     620.41        92    1720.00     631.72       119    2540.00     639.00    \n",
      "    12     220.00     675.79        39     670.00     617.84        66    1335.00     620.31        93    1730.01     631.28       120    2544.99     639.19    \n",
      "    13     235.00     673.16        40     675.00     617.68        67    1370.00     620.40        94    1735.00     630.89       121    2555.00     639.43    \n",
      "    14     240.00     672.17        41     740.00     614.19        68    1390.00     620.30        95    1740.00     630.31       122    2560.00     639.58    \n",
      "    15     245.00     672.13        42     745.00     613.98        69    1410.00     620.31        96    1755.00     628.07       123    2620.00     643.45    \n",
      "    16     260.00     671.40        43     775.00     613.22        70    1430.00     620.41        97    1759.99     627.45       124    2625.00     643.91    \n",
      "    17     265.00     671.22        44     780.00     613.12        71    1475.00     620.43        98    1765.00     626.72       125    2700.00     652.93    \n",
      "    18     270.00     671.33        45     845.00     618.74        72    1490.00     620.29        99    1770.00     625.18       126    2705.00     653.45    \n",
      "    19     300.00     673.54        46     850.01     618.84        73    1515.00     620.39       100    1775.00     624.24       127    2715.00     654.20    \n",
      "    20     320.00     673.80        47     865.00     618.66        74    1530.00     620.29       101    1775.87     624.26       128    2815.00     662.86    \n",
      "    21     360.00     675.23        48     900.00     618.64        75    1540.00     620.34       102    1779.99     624.37       129    2820.00     663.32    \n",
      "    22     365.00     674.86        49     905.00     618.74        76    1585.00     619.76       103    1785.00     624.97       130    2870.00     668.51    \n",
      "    23     435.00     666.98        50     915.00     619.06        77    1590.00     619.85       104    1790.00     625.30       131    2875.00     668.49    \n",
      "    24     440.00     666.38        51     985.00     619.56        78    1610.00     620.33       105    1840.00     626.22       132    2879.63     666.67    \n",
      "    25     455.00     664.50        52    1010.00     619.59        79    1615.00     620.52       106    1845.01     626.34    \n",
      "    26     465.00     663.61        53    1025.00     619.75        80    1630.00     620.90       107    1880.00     626.21    \n",
      "    27     470.00     663.20        54    1045.00     619.64        81    1635.00     620.82       108    1885.00     626.25    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 48:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1987160.01 305713.81, 1987724.29 305131.9, 1989170 303638)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     670.74        33     760.00     619.87        65    1395.00     618.29        97    1630.00     623.42       129    2265.00     628.27    \n",
      "     2     105.00     670.35        34     765.00     619.62        66    1405.00     617.30        98    1640.00     624.38       130    2270.00     628.43    \n",
      "     3     120.00     670.20        35     805.00     616.37        67    1410.00     617.03        99    1645.00     624.56       131    2275.00     628.46    \n",
      "     4     125.00     670.05        36     810.57     616.05        68    1425.00     617.92       100    1660.01     624.49       132    2295.00     628.70    \n",
      "     5     144.35     669.22        37     830.00     615.93        69    1430.00     618.11       101    1665.00     624.38       133    2300.00     628.72    \n",
      "     6     180.00     667.70        38     835.00     616.27        70    1445.00     618.31       102    1670.00     623.72       134    2310.00     629.08    \n",
      "     7     185.00     667.70        39     845.00     617.16        71    1450.00     618.50       103    1685.01     621.64       135    2315.01     629.23    \n",
      "     8     225.00     668.02        40     850.00     617.77        72    1465.00     618.78       104    1690.00     621.33       136    2325.00     629.64    \n",
      "     9     230.00     668.32        41     855.00     618.42        73    1470.00     618.99       105    1720.01     621.33       137    2330.00     629.82    \n",
      "    10     240.00     669.18        42     860.00     618.87        74    1485.00     619.74       106    1785.00     622.57       138    2335.00     629.95    \n",
      "    11     280.00     673.45        43     870.00     618.88        75    1490.00     620.14       107    1795.01     622.89       139    2345.00     630.37    \n",
      "    12     315.00     674.74        44     875.01     618.82        76    1495.00     620.43       108    1805.01     622.86       140    2350.01     630.52    \n",
      "    13     335.00     675.30        45     915.00     617.98        77    1500.00     620.43       109    1815.01     622.90       141    2360.00     630.72    \n",
      "    14     340.00     674.55        46     970.01     617.03        78    1505.01     620.50       110    1920.00     623.79       142    2370.00     630.82    \n",
      "    15     355.00     671.95        47     990.00     616.86        79    1525.00     621.17       111    1955.00     624.51       143    2375.01     630.93    \n",
      "    16     395.00     667.42        48     995.01     617.01        80    1530.00     621.57       112    1960.00     624.57       144    2465.00     633.75    \n",
      "    17     400.00     667.11        49    1030.01     617.28        81    1540.00     624.29       113    2005.00     624.68       145    2495.00     635.42    \n",
      "    18     475.00     663.12        50    1035.00     617.25        82    1545.00     625.90       114    2010.00     624.73       146    2500.00     635.67    \n",
      "    19     480.00     662.75        51    1050.00     617.26        83    1550.00     627.59       115    2025.00     625.35       147    2530.00     636.93    \n",
      "    20     530.00     657.67        52    1070.00     617.60        84    1570.00     633.46       116    2095.00     626.14       148    2535.00     637.06    \n",
      "    21     545.00     655.98        53    1095.00     618.13        85    1575.00     633.87       117    2100.00     626.11       149    2545.00     637.13    \n",
      "    22     550.00     655.14        54    1105.01     618.27        86    1580.00     633.87       118    2120.00     625.84       150    2555.00     638.15    \n",
      "    23     605.00     645.52        55    1205.00     618.80        87    1585.00     633.93       119    2125.00     625.92       151    2560.00     638.60    \n",
      "    24     610.00     644.70        56    1225.00     618.78        88    1590.01     632.57       120    2135.00     626.18       152    2590.00     639.21    \n",
      "    25     665.01     636.69        57    1240.00     618.68        89    1595.00     629.09       121    2140.00     626.28       153    2630.00     640.69    \n",
      "    26     670.01     635.85        58    1245.00     618.69        90    1600.00     626.69       122    2170.00     626.52       154    2690.00     643.41    \n",
      "    27     675.00     634.86        59    1280.00     618.40        91    1604.68     625.41       123    2180.00     626.73       155    2695.00     643.72    \n",
      "    28     720.00     625.35        60    1335.00     618.76        92    1605.00     625.32       124    2190.00     626.84       156    2765.00     648.40    \n",
      "    29     740.00     621.95        61    1365.00     619.06        93    1610.00     624.14       125    2245.00     627.80       157    2795.00     649.27    \n",
      "    30     745.00     621.04        62    1370.00     619.06        94    1615.00     622.78       126    2250.00     627.85       158    2797.56     649.18    \n",
      "    31     750.00     620.00        63    1380.00     618.80        95    1620.00     622.77       127    2255.01     627.87       159    2907.00     662.00    \n",
      "    32     755.00     619.87        64    1390.00     618.44        96    1625.01     623.04       128    2260.00     627.97    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 49:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1988009.36 306292.78, 1990080 304330)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     671.88        29     425.00     640.71        57     845.00     611.60        85    1195.00     618.82       113    2430.00     633.39    \n",
      "     2      15.01     671.53        30     460.00     634.28        58     865.01     611.51        86    1205.00     619.40       114    2445.00     633.50    \n",
      "     3      20.00     671.63        31     465.00     633.23        59     870.01     611.35        87    1210.00     619.51       115    2450.01     633.50    \n",
      "     4      40.00     672.60        32     475.00     631.07        60     890.00     610.54        88    1220.01     619.46       116    2475.00     634.63    \n",
      "     5      45.01     672.76        33     480.01     630.02        61     910.00     609.49        89    1225.00     619.57       117    2540.00     638.34    \n",
      "     6      90.00     673.10        34     520.01     623.53        62     915.00     609.77        90    1275.00     621.25       118    2545.01     638.58    \n",
      "     7      95.00     672.87        35     535.01     622.22        63     930.00     610.16        91    1280.00     622.29       119    2550.00     638.73    \n",
      "     8     114.06     669.86        36     540.00     621.85        64     935.01     610.83        92    1295.00     626.56       120    2555.01     638.80    \n",
      "     9     115.00     669.71        37     550.00     621.43        65     950.00     613.97        93    1300.01     627.23       121    2575.01     638.62    \n",
      "    10     120.01     669.95        38     555.01     621.26        66     955.01     614.90        94    1315.00     628.50       122    2580.00     639.08    \n",
      "    11     125.00     672.11        39     560.00     620.88        67     970.01     617.08        95    1320.01     629.01       123    2590.01     640.22    \n",
      "    12     130.00     676.92        40     570.00     619.67        68     975.01     617.73        96    1325.01     628.28       124    2595.00     640.41    \n",
      "    13     135.00     677.06        41     580.00     619.19        69    1005.00     618.22        97    1335.05     626.13       125    2600.00     639.95    \n",
      "    14     150.01     677.15        42     585.01     619.04        70    1050.01     617.88        98    1355.00     621.85       126    2605.00     639.16    \n",
      "    15     170.01     676.72        43     595.01     618.93        71    1060.01     618.01        99    1360.00     621.30       127    2625.01     635.61    \n",
      "    16     215.00     674.84        44     605.01     619.00        72    1065.00     617.94       100    1405.01     621.30       128    2630.01     634.77    \n",
      "    17     220.00     674.59        45     610.00     618.86        73    1080.00     617.64       101    1410.01     621.34       129    2635.00     635.15    \n",
      "    18     235.00     672.11        46     620.01     618.42        74    1085.00     617.64       102    1415.00     621.30       130    2695.01     642.25    \n",
      "    19     240.00     671.39        47     635.00     618.34        75    1090.00     617.74       103    1770.01     621.36       131    2700.00     642.58    \n",
      "    20     290.01     665.85        48     700.01     617.22        76    1095.01     617.77       104    1790.00     621.47       132    2750.01     647.18    \n",
      "    21     295.00     665.37        49     710.01     616.96        77    1110.00     616.93       105    1870.00     622.39       133    2755.01     647.71    \n",
      "    22     315.00     663.88        50     740.00     616.76        78    1115.01     616.69       106    1910.01     622.65       134    2760.00     648.48    \n",
      "    23     320.00     663.39        51     770.00     615.96        79    1130.00     616.23       107    2160.00     626.96       135    2765.00     649.29    \n",
      "    24     360.00     657.09        52     775.00     615.77        80    1145.01     616.28       108    2170.00     627.08       136    2780.00     651.31    \n",
      "    25     365.00     655.98        53     785.01     615.23        81    1150.00     616.33       109    2275.00     629.91       137    2781.94     651.46    \n",
      "    26     395.01     648.82        54     800.00     614.31        82    1175.00     617.31       110    2280.01     630.00       138    2850.00     662.00    \n",
      "    27     400.00     647.47        55     820.00     611.97        83    1180.01     617.58       111    2320.00     630.47    \n",
      "    28     420.00     641.79        56     825.00     611.85        84    1190.00     618.45       112    2335.01     630.57    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 50:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1988949.83 307174.46, 1991083.5 305076.06)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     674.91        29     774.99     612.86        57    1224.99     621.28        85    1840.00     620.81       113    2455.00     631.78    \n",
      "     2      14.99     675.07        30     779.99     613.20        58    1255.41     620.67        86    1845.00     620.72       114    2549.99     635.97    \n",
      "     3      20.00     674.39        31     784.99     613.40        59    1260.00     620.58        87    1850.00     620.28       115    2555.00     636.11    \n",
      "     4      25.00     673.62        32     790.00     613.44        60    1269.99     620.52        88    1860.00     619.26       116    2630.00     635.47    \n",
      "     5      60.00     670.41        33     794.99     613.71        61    1279.99     620.35        89    1865.00     619.45       117    2635.00     635.37    \n",
      "     6      89.99     667.46        34     800.00     614.61        62    1289.99     620.33        90    1929.99     619.81       118    2640.00     635.23    \n",
      "     7     116.71     666.46        35     804.99     615.34        63    1480.00     617.40        91    1940.00     619.81       119    2644.99     635.43    \n",
      "     8     155.00     665.02        36     810.00     615.32        64    1484.99     617.35        92    1950.00     620.29       120    2655.00     635.71    \n",
      "     9     164.99     664.16        37     815.00     615.40        65    1495.00     617.35        93    1954.99     620.36       121    2660.00     635.80    \n",
      "    10     189.99     661.64        38     820.00     615.89        66    1500.00     617.38        94    1964.99     620.40       122    2694.99     636.22    \n",
      "    11     195.00     661.11        39     825.00     616.27        67    1620.00     617.05        95    1975.00     620.66       123    2700.00     636.36    \n",
      "    12     225.00     654.56        40     854.99     616.49        68    1630.00     617.11        96    1980.00     620.73       124    2710.00     637.08    \n",
      "    13     239.99     651.22        41     865.00     616.49        69    1650.00     617.11        97    1990.00     620.76       125    2715.00     637.54    \n",
      "    14     245.00     650.37        42     890.00     616.27        70    1725.00     617.56        98    2010.00     620.69       126    2750.00     640.92    \n",
      "    15     265.00     647.14        43     899.99     616.11        71    1730.00     617.62        99    2050.00     620.85       127    2754.99     641.33    \n",
      "    16     380.00     632.83        44     904.99     616.12        72    1735.00     617.65       100    2059.99     620.95       128    2775.00     642.82    \n",
      "    17     384.99     632.54        45    1139.99     621.14        73    1749.99     617.67       101    2125.00     621.30       129    2865.00     650.06    \n",
      "    18     409.99     631.60        46    1144.99     621.28        74    1765.00     617.90       102    2135.00     621.32       130    2890.00     651.89    \n",
      "    19     414.99     630.76        47    1150.00     621.66        75    1775.00     618.00       103    2225.00     621.95       131    2895.00     652.29    \n",
      "    20     450.00     623.97        48    1154.99     622.07        76    1779.99     618.08       104    2264.99     623.01       132    2939.99     656.55    \n",
      "    21     460.00     621.90        49    1160.00     622.56        77    1785.00     618.20       105    2270.00     623.18       133    2950.00     657.69    \n",
      "    22     465.00     621.27        50    1164.99     622.63        78    1795.00     618.31       106    2324.99     625.50       134    2955.00     658.74    \n",
      "    23     549.99     620.07        51    1170.00     622.67        79    1800.00     618.47       107    2330.00     625.74       135    2960.00     658.51    \n",
      "    24     565.00     619.94        52    1185.00     622.88        80    1809.99     619.06       108    2384.99     628.97       136    2965.00     658.41    \n",
      "    25     569.99     619.93        53    1190.00     622.89        81    1815.00     619.60       109    2390.00     629.32       137    2969.99     660.45    \n",
      "    26     575.00     619.79        54    1210.00     622.79        82    1819.99     619.58       110    2395.00     630.02       138    2975.00     661.79    \n",
      "    27     740.00     612.86        55    1214.99     622.32        83    1825.00     619.87       111    2400.00     630.19       139    2979.99     662.13    \n",
      "    28     770.00     612.67        56    1220.00     621.66        84    1835.00     620.85       112    2440.00     631.26       140    2992.63     662.70    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 51:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1989481.78 307782.82, 1991856.44 305737.32)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     674.15        34     565.00     611.21        67    1155.00     620.96       100    1589.99     617.68       133    2529.99     627.08    \n",
      "     2      29.99     673.81        35     570.00     611.41        68    1159.99     621.46       101    1629.99     617.73       134    2534.99     627.14    \n",
      "     3      34.99     673.63        36     604.99     616.48        69    1164.99     621.72       102    1635.00     617.77       135    2570.00     627.68    \n",
      "     4      74.99     671.96        37     609.99     616.70        70    1170.00     621.94       103    1749.99     617.69       136    2589.99     628.25    \n",
      "     5     115.00     669.83        38     619.99     616.88        71    1200.00     622.91       104    1765.00     617.85       137    2600.00     628.16    \n",
      "     6     164.99     667.76        39     660.00     616.78        72    1204.99     622.75       105    1779.99     617.86       138    2619.99     628.16    \n",
      "     7     175.00     667.14        40     679.99     616.56        73    1215.00     621.58       106    1814.99     618.16       139    2624.99     628.21    \n",
      "     8     180.00     667.05        41     714.99     616.38        74    1220.00     621.16       107    1829.99     618.41       140    2635.00     628.45    \n",
      "     9     218.77     667.30        42     729.99     616.38        75    1239.99     620.07       108    1855.00     618.56       141    2639.99     628.30    \n",
      "    10     235.00     667.41        43     744.99     616.29        76    1245.00     619.93       109    1904.99     618.79       142    2660.00     626.85    \n",
      "    11     240.00     667.15        44     765.00     616.28        77    1250.00     620.20       110    1915.00     618.95       143    2665.00     626.95    \n",
      "    12     274.99     664.87        45     780.00     616.10        78    1255.00     620.44       111    1930.00     619.05       144    2684.99     629.94    \n",
      "    13     280.00     664.72        46     800.00     616.08        79    1280.00     619.83       112    1945.00     619.04       145    2689.99     630.36    \n",
      "    14     284.99     664.03        47     834.99     615.82        80    1285.33     619.00       113    1960.00     619.20       146    2734.99     631.99    \n",
      "    15     289.99     662.09        48     869.99     615.69        81    1294.99     617.49       114    1979.99     619.20       147    2750.00     632.39    \n",
      "    16     294.99     659.98        49     944.99     615.75        82    1299.99     617.22       115    2044.99     619.80       148    2759.99     632.69    \n",
      "    17     379.99     622.33        50     994.99     615.46        83    1324.99     616.74       116    2060.00     619.82       149    2764.99     632.92    \n",
      "    18     384.99     619.92        51     999.99     615.59        84    1329.99     616.61       117    2095.00     620.14       150    2770.00     633.07    \n",
      "    19     394.99     614.49        52    1024.99     616.39        85    1334.99     616.39       118    2104.99     620.13       151    2775.00     633.25    \n",
      "    20     399.99     613.09        53    1054.99     616.26        86    1340.00     616.20       119    2109.99     620.17       152    2905.00     640.15    \n",
      "    21     405.00     612.53        54    1059.99     616.42        87    1375.00     616.18       120    2125.00     620.36       153    2909.99     640.46    \n",
      "    22     410.00     612.09        55    1064.99     616.45        88    1389.99     616.24       121    2134.99     620.42       154    2979.99     645.24    \n",
      "    23     424.99     611.35        56    1075.00     616.36        89    1409.99     615.66       122    2155.00     620.68       155    2984.99     645.87    \n",
      "    24     429.99     610.89        57    1080.00     616.61        90    1444.99     615.85       123    2164.99     620.67       156    2990.00     646.43    \n",
      "    25     434.99     610.38        58    1094.99     616.67        91    1459.99     616.26       124    2180.00     620.95       157    3005.00     646.89    \n",
      "    26     454.99     609.91        59    1105.00     617.38        92    1465.00     616.34       125    2185.00     621.01       158    3009.99     647.15    \n",
      "    27     459.99     609.63        60    1110.00     617.55        93    1484.99     616.79       126    2199.99     621.31       159    3059.99     651.28    \n",
      "    28     470.00     609.48        61    1114.99     617.59        94    1499.99     617.26       127    2225.00     621.47       160    3079.99     653.32    \n",
      "    29     475.00     609.48        62    1120.00     617.68        95    1504.99     617.33       128    2264.99     622.59       161    3119.99     659.45    \n",
      "    30     479.99     609.61        63    1134.99     619.14        96    1519.99     617.62       129    2344.99     623.32       162    3124.99     659.30    \n",
      "    31     530.00     611.31        64    1140.00     619.55        97    1559.99     617.78       130    2445.00     625.55       163    3130.00     661.73    \n",
      "    32     540.00     611.19        65    1144.99     619.64        98    1575.00     617.76       131    2450.00     625.69       164    3134.18     664.24    \n",
      "    33     549.99     611.16        66    1149.99     619.83        99    1584.99     617.69       132    2459.99     625.79    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 52:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1988945.95 309213.35, 1993084.92 307095.11)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     660.23        28    1216.00     628.76        55    2242.00     614.79        82    2998.00     614.05       109    3996.00     636.02    \n",
      "     2      40.00     658.58        29    1273.99     626.26        56    2256.00     614.95        83    3004.00     614.06       110    4005.99     638.47    \n",
      "     3      56.00     657.82        30    1346.00     624.69        57    2280.00     614.87        84    3046.00     614.37       111    4012.00     639.00    \n",
      "     4      95.99     655.72        31    1373.99     623.17        58    2288.00     614.91        85    3058.00     614.94       112    4018.00     639.42    \n",
      "     5     110.00     654.01        32    1402.00     621.32        59    2324.00     614.98        86    3072.00     615.07       113    4024.00     639.80    \n",
      "     6     116.00     653.68        33    1716.14     621.30        60    2332.00     614.94        87    3077.99     615.89       114    4030.00     640.06    \n",
      "     7     126.00     654.49        34    1752.00     621.30        61    2368.00     614.84        88    3083.99     616.45       115    4055.99     641.45    \n",
      "     8     135.99     653.99        35    1778.00     620.16        62    2588.00     621.05        89    3090.00     616.02       116    4086.00     643.46    \n",
      "     9     176.00     651.50        36    1784.00     620.62        63    2594.00     621.27        90    3096.00     615.91       117    4092.00     643.66    \n",
      "    10     182.00     651.36        37    1836.00     609.63        64    2604.00     621.83        91    3266.00     620.44       118    4111.99     644.00    \n",
      "    11     226.00     650.73        38    1841.99     608.98        65    2609.99     622.23        92    3272.00     619.78       119    4118.00     644.16    \n",
      "    12     262.00     649.39        39    1876.00     608.95        66    2615.99     622.15        93    3278.00     619.79       120    4126.00     644.72    \n",
      "    13     268.00     649.26        40    1882.00     608.85        67    2621.99     621.90        94    3340.00     620.31       121    4174.00     645.73    \n",
      "    14     382.00     647.48        41    2045.99     612.20        68    2634.00     621.29        95    3348.00     620.50       122    4259.99     647.11    \n",
      "    15     402.00     646.69        42    2062.00     614.19        69    2640.00     621.06        96    3354.00     620.57       123    4328.00     648.58    \n",
      "    16     450.54     645.24        43    2070.00     614.54        70    2694.00     619.15        97    3364.00     620.60       124    4378.00     649.06    \n",
      "    17     455.99     645.08        44    2088.00     614.81        71    2700.00     619.13        98    3370.00     620.70       125    4392.00     649.45    \n",
      "    18     547.99     643.80        45    2095.99     614.86        72    2706.00     618.97        99    3376.00     620.93       126    4398.00     649.46    \n",
      "    19     568.00     643.37        46    2112.00     615.09        73    2713.99     619.44       100    3387.99     621.26       127    4405.99     649.96    \n",
      "    20     574.00     643.74        47    2120.00     615.03        74    2760.00     618.55       101    3616.00     621.30       128    4480.00     653.56    \n",
      "    21     580.00     644.29        48    2132.00     615.08        75    2769.99     619.82       102    3693.99     622.79       129    4564.00     657.07    \n",
      "    22     594.00     644.46        49    2138.00     615.01        76    2780.00     619.69       103    3742.00     624.49       130    4582.00     658.61    \n",
      "    23     658.00     641.06        50    2145.99     615.00        77    2790.00     619.06       104    3822.00     625.30       131    4588.00     659.22    \n",
      "    24     940.00     635.15        51    2154.00     615.03        78    2804.00     618.07       105    3897.99     629.81       132    4611.99     661.83    \n",
      "    25    1038.00     633.92        52    2164.00     614.94        79    2827.99     618.03       106    3918.00     630.83       133    4638.00     664.51    \n",
      "    26    1142.00     631.40        53    2174.00     614.94        80    2950.00     613.99       107    3984.00     635.14       134    4649.52     664.97    \n",
      "    27    1202.00     629.53        54    2218.00     614.73        81    2981.99     613.92       108    3990.00     635.40    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 53:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1989218.58 309514.68, 1991509.65 308517.56, 1992503.01 308023.82)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     662.46        21     538.00     640.49        41    1616.00     624.32        61    2498.65     618.31        81    3151.99     621.26    \n",
      "     2      30.01     662.16        22     546.00     640.51        42    1624.00     623.63        62    2538.00     619.52        82    3160.00     622.04    \n",
      "     3      38.00     662.02        23     552.00     640.97        43    1654.00     621.33        63    2556.01     619.87        83    3180.00     624.39    \n",
      "     4      90.00     660.51        24     618.00     639.71        44    1670.00     620.55        64    2562.00     619.85        84    3191.99     625.68    \n",
      "     5     146.00     659.38        25     632.00     639.31        45    1922.00     611.94        65    2568.00     619.87        85    3204.00     626.77    \n",
      "     6     186.00     657.43        26     714.00     638.53        46    1930.00     611.91        66    2590.00     620.38        86    3210.00     627.48    \n",
      "     7     212.01     655.87        27     776.00     638.35        47    1941.99     612.22        67    2598.00     620.39        87    3246.00     632.03    \n",
      "     8     257.99     651.47        28     804.00     638.04        48    1952.00     612.20        68    2630.00     621.30        88    3292.00     636.96    \n",
      "     9     296.00     649.85        29     814.00     638.13        49    1962.00     614.33        69    2672.00     621.30        89    3397.99     651.11    \n",
      "    10     304.00     649.65        30     924.00     637.70        50    1968.00     614.60        70    2714.00     620.11        90    3470.00     662.09    \n",
      "    11     309.99     649.20        31     936.00     637.72        51    1982.00     614.68        71    2984.00     618.43        91    3488.00     667.00    \n",
      "    12     316.00     648.86        32    1052.00     636.77        52    1992.00     614.83        72    3010.00     618.90        92    3496.00     667.00    \n",
      "    13     338.00     648.00        33    1154.00     636.97        53    2022.00     614.75        73    3022.00     618.95        93    3506.00     661.98    \n",
      "    14     408.00     644.80        34    1190.00     636.84        54    2048.23     614.48        74    3050.00     619.42        94    3522.00     659.94    \n",
      "    15     429.99     643.62        35    1392.00     634.56        55    2054.00     614.42        75    3056.00     620.17        95    3560.00     650.23    \n",
      "    16     448.00     642.81        36    1408.00     634.05        56    2128.00     614.38        76    3064.00     620.80        96    3566.00     649.33    \n",
      "    17     471.92     642.04        37    1434.00     633.60        57    2138.00     614.47        77    3092.01     620.97        97    3572.00     648.22    \n",
      "    18     520.00     640.49        38    1498.00     631.50        58    2148.00     614.47        78    3098.00     620.84        98    3582.00     646.47    \n",
      "    19     526.00     640.22        39    1580.00     626.10        59    2170.00     614.32        79    3104.00     620.35        99    3607.95     642.28    \n",
      "    20     532.00     640.02        40    1610.00     624.52        60    2354.00     613.87        80    3146.00     621.12    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 54:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1989476.86 309916.45, 1992361.94 308617.49)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     659.42        28     780.00     633.02        55    1610.00     609.33        82    2124.00     613.26       109    2454.00     613.46    \n",
      "     2       8.00     659.51        29     864.00     630.78        56    1618.00     607.76        83    2138.00     613.21       110    2694.00     620.99    \n",
      "     3      38.00     658.23        30     880.00     630.91        57    1640.00     607.41        84    2144.00     613.12       111    2706.00     621.28    \n",
      "     4      70.00     656.43        31     884.66     630.04        58    1652.00     607.35        85    2174.00     613.01       112    2712.00     621.73    \n",
      "     5      78.00     656.31        32     890.00     629.05        59    1668.00     607.36        86    2180.00     612.92       113    2718.01     621.85    \n",
      "     6      88.00     656.27        33     900.00     628.59        60    1682.00     607.95        87    2226.00     612.88       114    2726.00     622.21    \n",
      "     7     134.00     654.96        34     906.00     628.37        61    1696.00     610.47        88    2232.00     612.91       115    2732.00     621.42    \n",
      "     8     154.00     654.24        35     936.00     626.97        62    1712.00     611.85        89    2254.00     612.86       116    2736.24     621.41    \n",
      "     9     170.00     653.85        36    1000.00     625.31        63    1718.00     612.03        90    2260.00     612.89       117    2822.00     621.30    \n",
      "    10     210.00     654.17        37    1150.00     621.94        64    1734.00     612.14        91    2274.00     612.83       118    2838.00     623.20    \n",
      "    11     220.00     654.43        38    1210.00     621.30        65    1742.00     612.57        92    2282.00     612.90       119    2844.00     624.02    \n",
      "    12     258.00     651.63        39    1298.00     621.04        66    1748.00     613.16        93    2298.00     612.85       120    2850.00     624.88    \n",
      "    13     270.00     651.22        40    1306.01     620.94        67    1756.00     613.35        94    2304.00     612.96       121    2856.00     625.84    \n",
      "    14     276.00     650.79        41    1490.00     619.59        68    1764.00     613.42        95    2310.00     613.24       122    2866.01     627.36    \n",
      "    15     282.00     650.39        42    1504.00     619.35        69    1798.00     614.23        96    2324.00     613.06       123    2890.00     631.50    \n",
      "    16     340.01     647.42        43    1512.00     619.12        70    1814.00     614.38        97    2330.00     614.29       124    2918.00     636.09    \n",
      "    17     374.00     645.40        44    1518.00     619.03        71    1826.00     614.34        98    2360.00     614.55       125    2986.00     648.44    \n",
      "    18     384.00     645.37        45    1526.00     618.42        72    1840.00     614.40        99    2366.00     614.92       126    2994.00     649.82    \n",
      "    19     390.00     645.12        46    1532.00     618.02        73    1974.00     613.94       100    2374.00     614.76       127    3000.00     651.13    \n",
      "    20     488.00     639.62        47    1546.00     617.63        74    1988.00     613.80       101    2386.00     614.77       128    3006.00     652.64    \n",
      "    21     494.00     639.37        48    1552.00     617.18        75    2012.00     613.80       102    2394.00     613.86       129    3026.00     656.53    \n",
      "    22     532.00     637.99        49    1558.00     616.04        76    2026.00     613.69       103    2400.00     613.69       130    3068.00     667.00    \n",
      "    23     544.00     637.69        50    1574.00     614.71        77    2040.00     613.70       104    2410.00     613.71       131    3074.00     667.00    \n",
      "    24     610.00     636.67        51    1580.00     614.17        78    2060.00     613.51       105    2416.00     613.33       132    3102.00     655.34    \n",
      "    25     615.99     636.63        52    1586.00     613.07        79    2074.00     613.63       106    2422.00     613.29       133    3108.00     653.22    \n",
      "    26     628.00     636.21        53    1596.00     610.86        80    2104.00     613.36       107    2430.01     613.31       134    3132.00     645.83    \n",
      "    27     686.00     634.54        54    1602.00     610.58        81    2116.00     613.38       108    2438.00     613.14       135    3164.01     637.06    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 55:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1989690.44 310566.01, 1990971.82 309578.52, 1992605.87 308902.56)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     668.06        38    1610.01     618.39        75    2270.00     611.52       112    2625.00     614.13       149    2965.00     625.76    \n",
      "     2      55.01     669.33        39    1617.74     618.27        76    2275.00     611.50       113    2630.00     613.95       150    2975.00     625.48    \n",
      "     3     175.01     663.71        40    1625.01     618.16        77    2290.00     611.24       114    2645.00     614.14       151    2980.00     625.37    \n",
      "     4     180.01     663.54        41    1630.01     617.98        78    2305.00     611.16       115    2660.01     613.91       152    2985.00     625.38    \n",
      "     5     200.01     663.05        42    1645.01     616.77        79    2330.01     611.18       116    2665.01     613.76       153    2987.20     625.44    \n",
      "     6     275.00     660.47        43    1665.01     615.42        80    2350.01     611.33       117    2670.01     613.77       154    2990.00     625.52    \n",
      "     7     315.00     658.23        44    1670.01     615.05        81    2365.01     611.35       118    2695.01     613.99       155    3045.01     629.36    \n",
      "     8     320.01     658.01        45    1685.00     613.82        82    2380.01     611.47       119    2700.01     613.91       156    3065.01     631.64    \n",
      "     9     425.01     655.82        46    1700.01     610.38        83    2385.01     611.55       120    2705.01     613.47       157    3070.01     632.24    \n",
      "    10     495.00     653.88        47    1705.00     609.71        84    2410.01     613.01       121    2710.01     613.13       158    3080.01     633.11    \n",
      "    11     560.01     651.52        48    1720.00     608.31        85    2415.00     613.27       122    2735.01     613.47       159    3085.01     633.72    \n",
      "    12     565.01     651.24        49    1725.00     608.12        86    2430.00     613.57       123    2740.01     613.18       160    3110.00     637.55    \n",
      "    13     615.00     647.79        50    1730.00     608.03        87    2435.00     613.72       124    2745.00     612.81       161    3115.01     638.26    \n",
      "    14     655.00     644.68        51    1735.00     607.97        88    2440.00     614.16       125    2750.00     612.69       162    3150.00     642.39    \n",
      "    15     660.01     644.39        52    1740.00     607.94        89    2450.00     614.42       126    2760.01     612.69       163    3155.00     643.04    \n",
      "    16     760.00     640.55        53    1755.00     608.13        90    2455.00     614.60       127    2770.00     612.83       164    3165.00     644.43    \n",
      "    17     845.00     637.82        54    1755.35     608.13        91    2465.00     615.16       128    2780.00     612.92       165    3170.00     645.19    \n",
      "    18     865.00     637.02        55    1790.01     608.28        92    2470.00     615.74       129    2795.00     613.21       166    3210.00     651.51    \n",
      "    19     925.01     635.31        56    1795.01     608.39        93    2480.00     617.93       130    2805.00     613.50       167    3215.00     652.33    \n",
      "    20    1030.01     630.97        57    1805.01     608.66        94    2485.01     618.63       131    2810.00     613.67       168    3230.00     654.87    \n",
      "    21    1035.00     630.72        58    1810.01     608.83        95    2495.01     619.33       132    2820.00     614.32       169    3235.00     655.93    \n",
      "    22    1040.00     630.01        59    1845.00     611.11        96    2500.01     619.36       133    2825.00     614.70       170    3245.00     658.70    \n",
      "    23    1045.01     629.26        60    1850.00     611.38        97    2505.01     619.21       134    2850.01     617.05       171    3250.00     659.56    \n",
      "    24    1065.00     628.05        61    1855.01     611.58        98    2510.01     618.82       135    2855.01     617.42       172    3255.00     660.15    \n",
      "    25    1075.00     627.36        62    1860.01     612.08        99    2520.01     617.30       136    2860.01     617.70       173    3260.00     661.01    \n",
      "    26    1080.00     627.15        63    1865.01     612.51       100    2530.01     616.55       137    2865.01     618.02       174    3285.00     667.00    \n",
      "    27    1185.00     623.83        64    1880.00     612.58       101    2540.01     616.24       138    2870.01     618.46       175    3290.00     667.00    \n",
      "    28    1195.00     623.72        65    1945.00     613.89       102    2545.01     616.02       139    2875.01     618.98       176    3295.00     663.21    \n",
      "    29    1335.00     621.30        66    1950.00     613.88       103    2550.01     615.70       140    2880.01     619.67       177    3300.00     661.96    \n",
      "    30    1360.00     621.28        67    2065.00     613.34       104    2555.00     615.50       141    2885.01     620.20       178    3315.01     658.30    \n",
      "    31    1375.01     621.17        68    2080.00     613.18       105    2565.01     615.23       142    2890.01     620.62       179    3360.01     646.25    \n",
      "    32    1390.01     621.17        69    2120.00     613.12       106    2570.01     614.97       143    2895.01     621.08       180    3365.01     645.71    \n",
      "    33    1400.00     621.07        70    2145.01     612.85       107    2575.01     614.81       144    2900.01     621.72       181    3386.08     646.36    \n",
      "    34    1460.00     620.72        71    2160.01     612.78       108    2600.01     614.65       145    2905.01     622.50    \n",
      "    35    1525.00     619.90        72    2195.01     612.42       109    2605.00     614.51       146    2935.01     625.52    \n",
      "    36    1545.00     619.52        73    2200.00     612.41       110    2610.00     614.31       147    2940.00     626.29    \n",
      "    37    1590.00     618.94        74    2235.00     612.07       111    2620.00     614.23       148    2950.00     626.33    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 56:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1990466.32 311759.22, 1991236.33 310142.8, 1991630.15 309725.47, 1992882.14 309125.92)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     642.88        45     675.00     637.50        89    1785.00     615.98       133    2530.00     626.25       177    3165.00     646.09    \n",
      "     2      15.00     643.07        46     680.01     637.29        90    1790.45     615.74       134    2535.00     626.72       178    3184.99     645.71    \n",
      "     3      45.01     643.74        47     690.00     637.10        91    1795.00     615.27       135    2545.00     627.14       179    3189.99     646.02    \n",
      "     4      50.00     643.82        48     695.01     636.87        92    1820.00     614.92       136    2555.00     627.74       180    3204.99     647.20    \n",
      "     5      55.01     643.85        49     740.00     634.31        93    1825.00     614.66       137    2560.00     627.92       181    3212.81     644.16    \n",
      "     6      60.00     643.99        50     750.00     634.51        94    1900.00     613.87       138    2630.00     629.99       182    3220.00     641.36    \n",
      "     7      75.00     645.25        51     755.01     634.44        95    1905.00     613.58       139    2635.00     630.20       183    3225.00     639.49    \n",
      "     8      80.01     645.73        52     835.00     633.82        96    1910.01     612.92       140    2665.00     631.85       184    3240.00     640.64    \n",
      "     9      90.00     647.15        53     890.00     633.80        97    1915.01     612.60       141    2670.00     632.06       185    3245.00     640.95    \n",
      "    10      95.01     648.01        54     945.00     633.25        98    1935.00     611.94       142    2675.00     632.21       186    3260.00     641.26    \n",
      "    11     125.00     653.47        55    1065.00     631.41        99    1940.00     611.73       143    2680.00     632.60       187    3265.00     641.63    \n",
      "    12     130.01     654.03        56    1145.00     630.66       100    1945.00     611.56       144    2695.00     634.01       188    3275.00     642.85    \n",
      "    13     135.00     654.53        57    1150.00     630.55       101    1950.00     611.50       145    2700.00     634.32       189    3280.00     643.18    \n",
      "    14     140.00     655.94        58    1220.01     627.55       102    1955.00     611.38       146    2750.00     634.59       190    3290.00     643.66    \n",
      "    15     145.00     657.44        59    1225.00     627.55       103    1960.00     611.20       147    2755.00     634.29       191    3295.00     643.82    \n",
      "    16     150.00     659.20        60    1240.00     627.79       104    2020.00     607.60       148    2760.00     634.35       192    3304.99     644.04    \n",
      "    17     155.01     661.08        61    1245.01     627.67       105    2025.00     607.37       149    2765.00     634.47       193    3324.99     644.73    \n",
      "    18     160.00     662.01        62    1295.00     625.97       106    2035.00     607.67       150    2790.00     635.40       194    3330.00     644.79    \n",
      "    19     170.00     662.34        63    1300.00     625.48       107    2045.00     608.16       151    2795.00     635.55       195    3490.00     647.57    \n",
      "    20     175.00     662.46        64    1310.00     624.35       108    2050.00     608.58       152    2800.00     635.65       196    3495.00     647.57    \n",
      "    21     195.00     662.79        65    1315.00     623.36       109    2080.00     611.64       153    2830.00     636.68       197    3500.00     647.54    \n",
      "    22     200.00     663.21        66    1320.00     622.30       110    2085.00     612.11       154    2835.00     636.89       198    3545.00     648.10    \n",
      "    23     205.00     663.52        67    1325.00     621.77       111    2090.00     611.60       155    2865.00     638.35       199    3550.00     648.63    \n",
      "    24     210.00     662.28        68    1330.00     621.30       112    2100.01     612.10       156    2870.00     638.54       200    3554.99     649.22    \n",
      "    25     215.00     660.69        69    1355.01     621.28       113    2105.00     612.28       157    2885.00     638.19       201    3559.99     649.90    \n",
      "    26     223.27     659.57        70    1380.01     621.10       114    2125.00     611.77       158    2915.00     639.06       202    3564.99     650.72    \n",
      "    27     230.01     658.66        71    1415.00     621.02       115    2145.00     611.60       159    2945.00     640.47       203    3570.00     651.62    \n",
      "    28     235.00     660.26        72    1435.00     620.86       116    2340.00     611.43       160    2950.00     640.64       204    3585.00     654.69    \n",
      "    29     275.00     659.26        73    1450.00     620.87       117    2345.00     611.50       161    2985.00     640.88       205    3590.00     655.88    \n",
      "    30     285.00     659.06        74    1470.00     620.74       118    2364.26     612.64       162    3000.00     640.35       206    3594.99     657.35    \n",
      "    31     310.00     657.97        75    1480.01     620.75       119    2385.00     613.92       163    3010.00     639.92       207    3615.00     667.00    \n",
      "    32     395.01     654.82        76    1580.01     620.34       120    2390.00     614.17       164    3015.00     639.86       208    3620.00     667.00    \n",
      "    33     400.00     654.60        77    1615.00     620.01       121    2400.00     614.28       165    3050.00     639.71       209    3625.00     660.82    \n",
      "    34     465.00     652.95        78    1645.00     619.88       122    2405.00     614.40       166    3055.00     639.54       210    3630.00     659.80    \n",
      "    35     495.00     651.90        79    1650.00     619.78       123    2435.00     617.63       167    3060.00     639.27       211    3670.00     658.01    \n",
      "    36     500.00     651.77        80    1675.00     618.81       124    2439.99     618.20       168    3065.00     639.16       212    3675.00     657.00    \n",
      "    37     555.01     651.02        81    1680.01     618.65       125    2455.00     620.36       169    3069.99     639.38       213    3690.00     653.14    \n",
      "    38     560.00     650.77        82    1685.00     618.52       126    2460.00     621.04       170    3079.99     642.90       214    3695.00     652.85    \n",
      "    39     565.00     649.91        83    1715.00     617.13       127    2465.00     621.57       171    3084.99     644.17       215    3709.99     653.80    \n",
      "    40     585.00     646.97        84    1720.01     617.13       128    2475.00     622.57       172    3140.00     644.22       216    3724.99     654.66    \n",
      "    41     590.00     646.32        85    1725.00     617.07       129    2480.00     623.03       173    3145.00     644.32       217    3730.00     655.02    \n",
      "    42     615.00     643.71        86    1755.01     616.47       130    2490.00     623.69       174    3150.00     645.20       218    3735.00     655.32    \n",
      "    43     645.00     640.05        87    1760.00     616.42       131    2520.00     625.39       175    3155.00     646.01       219    3740.00     655.50    \n",
      "    44     650.00     639.47        88    1780.01     616.10       132    2525.00     625.74       176    3160.00     646.07       220    3752.40     655.71    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 57:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1990677.93 311941.43, 1991359.76 310689.44, 1991553.73 310166.31, 1991800.6 309901.8, 1992964.43 309314.01)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     637.64        43     625.00     629.02        85    1695.00     616.87       127    2535.00     618.38       169    3045.00     634.27    \n",
      "     2      15.00     637.65        44     630.00     628.90        86    1705.00     617.72       128    2540.00     618.42       170    3050.00     635.19    \n",
      "     3      19.99     637.75        45     700.00     628.70        87    1709.99     618.19       129    2575.00     619.02       171    3051.83     635.55    \n",
      "     4      24.99     638.25        46     705.00     628.89        88    1714.99     618.06       130    2579.99     619.07       172    3055.00     636.17    \n",
      "     5      40.00     638.32        47     710.00     628.80        89    1775.00     614.50       131    2585.00     619.09       173    3060.00     637.04    \n",
      "     6      45.00     639.23        48     715.00     628.57        90    1780.00     614.29       132    2610.00     619.34       174    3070.00     638.15    \n",
      "     7      59.99     643.80        49     719.99     628.38        91    1785.00     614.13       133    2620.00     619.67       175    3110.00     643.11    \n",
      "     8     119.33     662.31        50     779.99     630.20        92    1789.99     614.11       134    2640.00     619.96       176    3115.00     643.58    \n",
      "     9     119.99     662.52        51     784.99     630.24        93    1819.99     614.52       135    2645.00     620.08       177    3120.00     643.88    \n",
      "    10     124.99     663.09        52     789.99     630.21        94    1825.00     614.33       136    2650.00     620.24       178    3135.00     644.41    \n",
      "    11     130.00     663.15        53     845.00     627.17        95    1830.00     614.11       137    2655.00     620.36       179    3165.00     645.79    \n",
      "    12     135.00     663.18        54     850.00     627.03        96    1835.00     614.13       138    2670.00     620.39       180    3170.00     645.80    \n",
      "    13     150.00     662.89        55     864.99     627.01        97    1874.99     614.77       139    2675.00     620.63       181    3175.00     645.59    \n",
      "    14     155.00     662.03        56     870.00     626.96        98    1880.00     614.70       140    2680.00     621.00       182    3179.99     645.56    \n",
      "    15     164.99     659.35        57     979.99     627.58        99    1885.00     614.57       141    2685.00     621.20       183    3205.00     645.77    \n",
      "    16     195.00     648.57        58    1009.99     627.12       100    1890.00     614.52       142    2780.00     621.23       184    3230.00     646.12    \n",
      "    17     200.00     647.17        59    1024.99     627.13       101    1894.99     614.60       143    2785.00     621.30       185    3245.00     646.60    \n",
      "    18     215.00     643.07        60    1030.00     626.97       102    1930.00     615.33       144    2810.00     621.31       186    3255.00     647.05    \n",
      "    19     235.00     637.81        61    1125.00     625.92       103    1940.00     615.13       145    2825.00     621.88       187    3280.00     648.39    \n",
      "    20     240.00     636.61        62    1130.00     625.92       104    1983.54     613.51       146    2830.00     622.01       188    3300.00     649.69    \n",
      "    21     245.00     635.88        63    1135.00     625.78       105    2000.00     611.91       147    2835.00     622.07       189    3305.00     649.64    \n",
      "    22     275.00     636.29        64    1145.00     625.30       106    2005.00     611.34       148    2855.00     622.47       190    3325.00     649.06    \n",
      "    23     295.00     636.74        65    1150.00     625.03       107    2010.00     610.74       149    2860.00     622.47       191    3345.00     648.75    \n",
      "    24     304.99     637.30        66    1154.99     624.92       108    2014.99     610.58       150    2875.00     622.37       192    3350.00     648.70    \n",
      "    25     309.99     637.53        67    1180.00     624.57       109    2225.00     610.67       151    2895.00     622.44       193    3400.00     649.26    \n",
      "    26     314.99     637.66        68    1259.99     623.82       110    2230.00     610.91       152    2900.00     622.53       194    3425.00     648.92    \n",
      "    27     320.00     637.54        69    1264.99     623.74       111    2320.00     615.93       153    2910.00     622.89       195    3450.00     648.98    \n",
      "    28     349.99     636.05        70    1299.99     622.96       112    2345.36     618.67       154    2915.00     623.17       196    3520.00     650.29    \n",
      "    29     375.00     634.97        71    1320.00     622.39       113    2360.00     618.46       155    2919.99     623.67       197    3534.99     650.64    \n",
      "    30     380.00     634.67        72    1335.00     622.07       114    2365.00     618.44       156    2925.00     624.01       198    3550.00     651.23    \n",
      "    31     420.00     632.65        73    1339.99     621.88       115    2369.99     618.70       157    2930.00     624.30       199    3555.00     651.39    \n",
      "    32     425.00     632.64        74    1345.00     621.57       116    2380.00     618.70       158    2940.00     624.67       200    3560.00     651.48    \n",
      "    33     430.00     632.68        75    1350.00     621.30       117    2400.00     620.42       159    2945.00     624.88       201    3565.00     652.45    \n",
      "    34     485.00     631.92        76    1410.00     621.23       118    2415.00     620.81       160    2950.00     625.35       202    3605.00     661.14    \n",
      "    35     490.00     632.09        77    1415.00     621.17       119    2420.00     620.66       161    2955.00     626.09       203    3630.00     667.00    \n",
      "    36     515.00     633.30        78    1425.61     620.77       120    2435.00     619.98       162    2969.99     626.09       204    3635.00     667.00    \n",
      "    37     555.00     631.84        79    1639.99     613.91       121    2440.00     619.79       163    2975.00     626.63       205    3640.00     663.64    \n",
      "    38     585.00     630.24        80    1645.00     613.98       122    2465.00     618.95       164    2995.00     629.37       206    3645.00     662.28    \n",
      "    39     590.00     630.03        81    1650.00     614.42       123    2485.00     618.44       165    3000.00     629.39       207    3649.20     661.48    \n",
      "    40     605.00     629.29        82    1654.99     614.82       124    2490.00     618.34       166    3005.00     629.27    \n",
      "    41     610.00     629.16        83    1670.00     615.11       125    2495.00     618.27       167    3015.00     629.11    \n",
      "    42     620.00     629.03        84    1675.00     615.33       126    2529.99     618.08       168    3020.00     630.03    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 58:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1990942.43 312482.2, 1992746.94 311283.11, 1993957.79 310136.92)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     678.87        35     510.00     628.81        69    1430.01     615.34       103    1780.01     611.67       137    2560.01     640.39    \n",
      "     2      30.01     680.08        36     565.00     627.04        70    1435.00     615.22       104    1820.00     611.59       138    2640.00     642.59    \n",
      "     3      50.01     681.21        37     570.01     626.91        71    1445.00     615.21       105    1860.00     611.44       139    2750.00     645.01    \n",
      "     4      55.00     681.12        38     645.00     624.91        72    1450.00     614.75       106    1870.00     611.32       140    2755.00     645.09    \n",
      "     5      65.01     680.54        39     695.01     624.11        73    1460.00     613.37       107    1875.01     611.32       141    2820.00     645.63    \n",
      "     6      70.00     680.28        40     700.00     623.98        74    1465.00     613.07       108    1885.00     611.37       142    2860.00     646.61    \n",
      "     7     135.00     677.53        41     705.00     623.92        75    1475.01     612.71       109    1945.00     611.07       143    2865.01     646.69    \n",
      "     8     140.01     677.28        42     710.00     623.90        76    1525.00     612.06       110    1950.01     611.07       144    2975.00     647.37    \n",
      "     9     145.00     676.91        43     890.00     622.29        77    1530.00     611.97       111    1960.00     611.17       145    2985.00     647.38    \n",
      "    10     170.00     674.36        44     935.01     621.50        78    1545.01     611.90       112    1970.00     611.07       146    3085.01     648.86    \n",
      "    11     175.01     673.70        45     940.00     621.45        79    1550.00     611.76       113    2025.00     610.91       147    3095.00     648.90    \n",
      "    12     225.00     665.71        46     995.00     621.44        80    1555.00     611.65       114    2045.00     610.65       148    3195.00     648.31    \n",
      "    13     230.00     665.04        47    1030.00     621.21        81    1570.01     611.46       115    2050.00     610.62       149    3230.00     648.34    \n",
      "    14     235.00     664.09        48    1075.00     620.67        82    1585.00     611.58       116    2055.01     610.62       150    3290.00     648.01    \n",
      "    15     240.00     663.82        49    1085.00     620.62        83    1590.00     611.50       117    2070.00     610.50       151    3325.00     648.13    \n",
      "    16     250.00     663.68        50    1115.01     620.19        84    1630.00     611.36       118    2080.00     610.49       152    3330.00     648.12    \n",
      "    17     255.00     663.75        51    1125.01     620.16        85    1635.01     611.53       119    2090.00     610.44       153    3345.01     647.10    \n",
      "    18     267.99     664.25        52    1140.00     619.99        86    1640.00     611.54       120    2110.01     610.58       154    3380.00     645.44    \n",
      "    19     285.00     664.90        53    1155.00     619.91        87    1645.00     611.51       121    2140.00     610.63       155    3385.00     645.67    \n",
      "    20     290.00     664.06        54    1175.00     619.72        88    1650.00     611.56       122    2145.01     610.57       156    3440.00     649.02    \n",
      "    21     330.00     651.91        55    1180.00     619.70        89    1655.00     612.16       123    2150.00     610.48       157    3470.01     649.56    \n",
      "    22     335.01     650.34        56    1205.01     619.86        90    1660.01     612.30       124    2155.00     610.59       158    3480.00     649.61    \n",
      "    23     365.00     641.25        57    1215.01     619.75        91    1670.00     612.41       125    2166.58     611.12       159    3575.00     648.73    \n",
      "    24     370.00     639.91        58    1220.00     619.63        92    1690.01     612.28       126    2365.00     619.81       160    3665.00     648.49    \n",
      "    25     375.00     638.71        59    1230.00     619.32        93    1700.00     612.28       127    2390.01     621.05       161    3670.00     648.52    \n",
      "    26     380.00     637.95        60    1310.00     618.09        94    1705.00     612.21       128    2395.01     621.35       162    3685.00     648.73    \n",
      "    27     395.00     636.77        61    1335.00     617.92        95    1710.00     611.97       129    2405.00     626.45       163    3690.01     649.52    \n",
      "    28     415.00     634.87        62    1355.00     617.95        96    1715.00     611.88       130    2415.73     631.99       164    3795.00     667.00    \n",
      "    29     445.00     632.36        63    1360.00     617.91        97    1720.00     611.82       131    2420.00     634.19       165    3800.00     667.00    \n",
      "    30     470.00     630.68        64    1375.00     618.25        98    1725.01     611.79       132    2425.00     635.36       166    3833.89     656.93    \n",
      "    31     475.00     630.54        65    1380.00     617.85        99    1740.00     611.79       133    2445.00     637.30    \n",
      "    32     490.00     630.55        66    1410.00     616.59       100    1760.00     611.67       134    2450.00     637.63    \n",
      "    33     495.00     630.58        67    1415.00     616.41       101    1770.00     611.72       135    2455.01     637.81    \n",
      "    34     500.00     630.57        68    1420.01     616.13       102    1775.00     611.72       136    2490.01     638.79    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 59:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1991609.57 313119.95, 1993337.67 311744.52, 1994301.65 310427.87)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     695.80        37     475.00     641.44        73    1250.00     611.43       109    1895.00     609.54       145    2210.00     629.81    \n",
      "     2      25.00     691.75        38     490.00     639.09        74    1255.00     611.34       110    1900.01     609.39       146    2270.00     630.64    \n",
      "     3      55.00     686.46        39     495.00     638.24        75    1260.00     611.48       111    1910.00     608.55       147    2275.00     630.74    \n",
      "     4      60.01     685.68        40     520.00     633.73        76    1265.01     611.53       112    1915.00     608.36       148    2280.00     630.79    \n",
      "     5     115.00     677.48        41     525.00     632.75        77    1270.00     611.44       113    1920.00     608.31       149    2400.00     630.76    \n",
      "     6     120.00     676.49        42     530.01     631.43        78    1275.00     611.38       114    1930.00     608.07       150    2405.00     630.79    \n",
      "     7     125.00     675.77        43     535.00     629.34        79    1280.01     611.35       115    1935.00     607.88       151    2520.01     632.66    \n",
      "     8     130.01     675.38        44     540.00     627.17        80    1285.01     611.28       116    1940.01     607.53       152    2525.00     632.79    \n",
      "     9     135.00     674.81        45     545.00     626.65        81    1290.00     611.15       117    1945.00     606.79       153    2660.00     634.34    \n",
      "    10     145.00     672.50        46     600.01     622.23        82    1295.00     611.06       118    1950.01     606.75       154    2795.00     636.80    \n",
      "    11     160.00     669.21        47     605.00     621.97        83    1305.00     611.02       119    1960.00     606.78       155    2855.01     638.25    \n",
      "    12     165.00     668.56        48     640.00     621.36        84    1335.01     611.09       120    1965.01     606.62       156    3045.00     636.29    \n",
      "    13     192.02     668.59        49     815.00     617.53        85    1345.00     611.05       121    1970.00     606.57       157    3050.00     636.29    \n",
      "    14     195.00     668.59        50     860.00     616.79        86    1415.00     611.28       122    1980.00     606.53       158    3150.01     636.89    \n",
      "    15     200.00     668.53        51     890.01     616.44        87    1455.01     611.27       123    1985.00     606.55       159    3265.00     636.85    \n",
      "    16     210.00     668.12        52     920.00     616.17        88    1485.00     611.21       124    2000.00     606.82       160    3275.01     636.77    \n",
      "    17     220.01     668.01        53     940.00     615.98        89    1500.00     611.28       125    2005.00     606.83       161    3385.00     639.01    \n",
      "    18     230.00     667.97        54    1050.00     615.03        90    1525.00     611.25       126    2010.00     607.09       162    3425.01     640.06    \n",
      "    19     235.00     667.06        55    1070.01     614.81        91    1590.01     611.34       127    2020.00     607.80       163    3430.00     640.16    \n",
      "    20     245.00     663.65        56    1075.00     614.81        92    1600.00     611.29       128    2025.00     608.04       164    3530.01     641.65    \n",
      "    21     255.00     660.37        57    1090.00     614.67        93    1620.00     611.32       129    2035.01     608.43       165    3545.00     641.97    \n",
      "    22     260.00     658.86        58    1115.00     614.47        94    1695.00     611.10       130    2040.00     608.56       166    3665.00     645.48    \n",
      "    23     275.01     657.34        59    1135.00     614.42        95    1700.00     611.06       131    2045.00     609.09       167    3670.00     645.70    \n",
      "    24     300.01     654.20        60    1145.01     614.30        96    1710.01     610.92       132    2090.00     620.45       168    3675.00     646.04    \n",
      "    25     305.00     653.66        61    1155.00     613.63        97    1730.00     610.91       133    2095.00     621.88       169    3690.00     647.17    \n",
      "    26     310.00     653.28        62    1165.01     613.64        98    1750.00     610.68       134    2100.00     623.10       170    3695.00     647.67    \n",
      "    27     340.01     651.22        63    1175.00     613.22        99    1760.00     610.62       135    2110.01     625.30       171    3735.00     655.44    \n",
      "    28     345.00     651.02        64    1185.00     613.12       100    1785.00     610.54       136    2115.00     625.86       172    3740.00     656.38    \n",
      "    29     355.00     650.79        65    1195.00     612.91       101    1800.00     610.59       137    2117.25     625.91       173    3800.00     667.00    \n",
      "    30     360.00     650.54        66    1205.00     612.58       102    1820.00     610.55       138    2140.00     626.39       174    3805.00     666.05    \n",
      "    31     390.00     648.88        67    1210.00     612.52       103    1855.01     610.76       139    2150.00     626.53       175    3820.00     660.76    \n",
      "    32     410.01     647.99        68    1215.01     612.43       104    1860.00     610.70       140    2155.01     626.66       176    3840.47     653.44    \n",
      "    33     415.00     647.63        69    1225.00     612.11       105    1870.01     610.47       141    2195.00     629.19    \n",
      "    34     440.00     645.67        70    1230.00     612.12       106    1875.00     610.44       142    2200.00     629.47    \n",
      "    35     445.00     645.15        71    1235.00     612.05       107    1880.00     610.31       143    2205.01     629.72    \n",
      "    36     470.00     642.08        72    1245.00     611.57       108    1890.00     609.64       144    2208.65     629.80    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 60:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1993516.95 314327.85, 1993916.64 311247.84, 1994469.17 310495.47)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     662.87        33     595.00     628.16        65    1624.99     608.92        97    2085.00     612.24       129    3024.99     635.32    \n",
      "     2      14.99     659.16        34     600.00     627.74        66    1629.99     608.90        98    2090.00     612.49       130    3030.00     635.15    \n",
      "     3      20.00     658.25        35     625.00     625.90        67    1649.99     609.65        99    2094.99     612.56       131    3065.00     635.32    \n",
      "     4     224.99     666.86        36     630.00     625.36        68    1654.99     609.68       100    2110.00     613.97       132    3105.84     635.27    \n",
      "     5     229.99     666.92        37     655.00     622.45        69    1675.00     610.10       101    2120.00     614.09       133    3120.00     634.99    \n",
      "     6     264.99     665.07        38     660.00     621.84        70    1680.00     610.17       102    2129.99     614.60       134    3170.00     633.25    \n",
      "     7     269.99     664.84        39     665.00     621.26        71    1710.00     610.22       103    2134.99     614.81       135    3210.00     632.28    \n",
      "     8     275.00     665.39        40     669.99     620.84        72    1754.99     610.11       104    2155.00     614.95       136    3215.00     632.26    \n",
      "     9     280.00     665.75        41     685.00     619.88        73    1760.00     610.16       105    2159.99     615.16       137    3290.00     633.51    \n",
      "    10     305.00     666.28        42     690.00     619.59        74    1784.99     610.09       106    2164.99     615.61       138    3295.00     633.52    \n",
      "    11     315.00     666.69        43     744.99     615.98        75    1789.99     610.34       107    2169.99     615.79       139    3305.00     633.49    \n",
      "    12     357.88     668.11        44     815.00     612.21        76    1795.00     610.37       108    2180.00     615.90       140    3569.99     638.03    \n",
      "    13     364.99     668.35        45     834.99     611.30        77    1814.99     610.30       109    2185.00     616.25       141    3624.99     639.34    \n",
      "    14     370.00     668.30        46     839.99     611.17        78    1819.99     610.33       110    2189.99     617.00       142    3679.99     641.31    \n",
      "    15     389.99     666.87        47     845.00     611.10        79    1839.99     610.18       111    2194.99     617.22       143    3755.00     643.64    \n",
      "    16     400.00     666.06        48     864.99     610.58        80    1865.00     610.19       112    2205.00     617.32       144    3830.00     645.64    \n",
      "    17     405.00     665.69        49     869.99     610.50        81    1890.00     610.39       113    2210.00     617.42       145    3835.00     646.32    \n",
      "    18     429.99     664.28        50     894.99     610.26        82    1909.99     610.66       114    2215.00     617.76       146    3885.00     654.88    \n",
      "    19     435.00     663.42        51    1135.00     610.38        83    1939.99     610.83       115    2220.00     618.00       147    3890.00     655.87    \n",
      "    20     509.99     649.03        52    1160.00     610.18        84    1944.99     610.81       116    2234.99     618.42       148    3925.00     663.14    \n",
      "    21     514.99     648.10        53    1300.00     609.68        85    1965.00     610.61       117    2310.00     621.33       149    3930.00     664.21    \n",
      "    22     519.99     647.22        54    1349.99     610.18        86    1969.99     610.67       118    2370.00     624.28       150    3940.00     666.52    \n",
      "    23     539.99     643.84        55    1404.99     610.00        87    1974.99     610.70       119    2379.99     624.66       151    3945.00     667.00    \n",
      "    24     544.99     642.60        56    1434.99     609.67        88    1979.99     610.76       120    2409.04     626.22       152    3960.00     663.15    \n",
      "    25     549.99     640.43        57    1464.99     608.75        89    2004.99     610.68       121    2495.00     630.83       153    3965.00     661.57    \n",
      "    26     554.99     638.20        58    1485.00     607.83        90    2009.99     610.72       122    2500.00     631.06       154    4005.00     648.72    \n",
      "    27     560.00     635.82        59    1490.00     607.71        91    2039.99     610.69       123    2664.99     637.16       155    4010.00     648.39    \n",
      "    28     565.00     635.58        60    1515.00     607.55        92    2055.00     610.87       124    2669.99     637.28       156    4039.30     648.57    \n",
      "    29     574.99     635.24        61    1575.00     607.68        93    2060.00     610.89       125    2834.99     639.21    \n",
      "    30     579.99     635.11        62    1594.99     608.07        94    2064.99     610.85       126    2840.00     639.16    \n",
      "    31     584.99     633.00        63    1599.99     608.11        95    2069.99     610.90       127    2875.00     637.75    \n",
      "    32     590.00     629.46        64    1619.99     608.80        96    2074.99     611.32       128    2954.99     638.87    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 61:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1995115.73 314598.24, 1994974.66 312964.18, 1994610.23 311800.36, 1994727.79 310718.83)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     649.73        43     530.00     624.73        85    1325.00     610.60       127    1915.00     608.66       169    2670.00     619.26    \n",
      "     2       5.00     649.80        44     545.00     624.76        86    1340.01     610.93       128    1920.01     608.65       170    2675.00     619.38    \n",
      "     3      10.00     650.02        45     550.00     624.72        87    1345.00     611.01       129    1935.00     608.52       171    2820.00     620.93    \n",
      "     4      35.00     650.84        46     560.00     624.00        88    1370.01     611.00       130    1960.00     608.72       172    2825.00     621.02    \n",
      "     5      45.01     651.05        47     585.00     622.08        89    1385.00     611.08       131    1980.00     609.06       173    2840.00     621.15    \n",
      "     6      50.01     651.19        48     590.01     621.96        90    1400.00     611.53       132    2005.00     609.39       174    2859.68     621.22    \n",
      "     7      55.00     651.41        49     595.00     621.89        91    1405.01     611.63       133    2020.00     609.39       175    2990.00     621.30    \n",
      "     8      65.00     651.94        50     620.00     621.33        92    1410.00     611.60       134    2025.00     609.46       176    3060.00     621.96    \n",
      "     9      70.00     652.16        51     625.01     621.06        93    1425.00     612.03       135    2045.00     609.63       177    3080.00     622.31    \n",
      "    10      75.00     652.34        52     630.00     620.73        94    1460.00     612.70       136    2050.00     609.78       178    3180.01     624.60    \n",
      "    11      80.01     652.42        53     660.01     618.96        95    1490.00     612.89       137    2065.00     610.70       179    3240.00     625.45    \n",
      "    12      90.00     652.49        54     665.00     618.80        96    1495.00     612.85       138    2070.00     610.84       180    3245.00     625.55    \n",
      "    13      95.00     652.87        55     675.00     618.56        97    1500.00     612.76       139    2080.01     610.91       181    3288.34     626.64    \n",
      "    14     100.00     653.18        56     830.01     611.84        98    1505.00     612.75       140    2095.00     612.03       182    3325.01     627.56    \n",
      "    15     120.00     654.10        57     835.00     611.70        99    1520.00     612.81       141    2100.00     612.21       183    3425.00     631.68    \n",
      "    16     145.00     654.96        58     855.00     611.57       100    1535.00     612.80       142    2110.00     612.22       184    3430.00     631.86    \n",
      "    17     150.01     655.04        59     875.00     611.36       101    1545.00     612.66       143    2115.00     612.29       185    3540.00     634.96    \n",
      "    18     165.01     654.83        60     880.00     611.26       102    1560.00     612.73       144    2130.00     612.62       186    3665.01     636.50    \n",
      "    19     185.01     654.56        61     900.01     611.15       103    1580.00     612.49       145    2155.00     612.81       187    3670.01     636.60    \n",
      "    20     195.00     654.59        62     905.00     611.07       104    1595.00     612.52       146    2170.00     613.05       188    3690.00     638.63    \n",
      "    21     200.00     654.39        63     920.00     610.93       105    1600.00     612.37       147    2185.00     613.17       189    3740.01     645.95    \n",
      "    22     205.00     654.26        64     925.00     610.83       106    1635.00     609.48       148    2200.00     613.20       190    3745.00     646.72    \n",
      "    23     250.01     653.37        65     945.00     610.71       107    1640.14     609.22       149    2235.00     613.65       191    3755.00     648.58    \n",
      "    24     255.00     653.24        66     950.00     610.60       108    1655.00     609.16       150    2245.01     613.72       192    3760.00     649.45    \n",
      "    25     260.00     652.94        67     975.00     610.34       109    1660.00     609.31       151    2280.00     614.33       193    3770.00     650.85    \n",
      "    26     270.00     651.93        68    1005.00     610.21       110    1675.00     609.11       152    2305.00     614.56       194    3775.00     651.66    \n",
      "    27     280.00     651.14        69    1020.00     610.01       111    1680.00     609.16       153    2310.00     614.66       195    3795.00     655.62    \n",
      "    28     285.01     650.68        70    1070.01     609.39       112    1685.00     609.16       154    2325.00     614.78       196    3835.00     663.25    \n",
      "    29     310.00     647.76        71    1090.00     609.31       113    1700.00     609.04       155    2340.00     615.06       197    3840.00     664.23    \n",
      "    30     330.00     644.70        72    1095.00     609.25       114    1705.00     609.15       156    2390.00     615.43       198    3850.00     667.00    \n",
      "    31     345.00     643.90        73    1115.00     608.60       115    1730.00     609.05       157    2400.00     615.56       199    3855.00     667.00    \n",
      "    32     350.00     643.59        74    1140.00     607.99       116    1740.00     608.93       158    2470.00     616.20       200    3900.00     654.18    \n",
      "    33     420.01     636.92        75    1165.00     607.70       117    1780.00     608.74       159    2480.00     616.34       201    3905.00     652.86    \n",
      "    34     435.00     635.66        76    1185.00     607.82       118    1795.00     608.80       160    2495.00     616.49       202    3930.00     646.74    \n",
      "    35     440.00     635.29        77    1210.00     608.13       119    1800.00     608.79       161    2515.00     616.77       203    3935.00     645.33    \n",
      "    36     480.00     632.66        78    1235.01     608.28       120    1805.00     608.70       162    2520.00     616.91       204    3940.01     643.87    \n",
      "    37     485.00     631.52        79    1255.00     608.50       121    1810.00     608.67       163    2525.00     616.98       205    3945.01     643.57    \n",
      "    38     495.00     628.33        80    1275.00     608.85       122    1830.00     608.65       164    2535.00     617.06       206    3947.58     643.51    \n",
      "    39     500.00     626.82        81    1280.00     608.90       123    1835.00     608.68       165    2545.00     617.30    \n",
      "    40     505.00     626.30        82    1285.00     609.05       124    1870.00     608.54       166    2565.01     617.55    \n",
      "    41     520.00     625.04        83    1305.01     609.79       125    1880.00     608.62       167    2570.00     617.68    \n",
      "    42     525.01     624.79        84    1320.00     610.42       126    1910.00     608.62       168    2655.00     619.09    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 62:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1995809.32 313669.53, 1995174.51 311671.05, 1994939.4 310660.05)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     656.48        32     665.00     644.53        63    1200.00     607.22        94    1640.00     611.40       125    2295.00     625.15    \n",
      "     2      14.99     656.69        33     675.00     644.01        64    1230.00     607.63        95    1644.99     611.40       126    2335.00     625.70    \n",
      "     3      30.00     657.66        34     680.00     643.72        65    1270.00     607.89        96    1650.00     611.36       127    2475.00     626.28    \n",
      "     4      35.00     657.57        35     739.99     638.73        66    1275.00     607.96        97    1654.99     611.55       128    2480.00     626.34    \n",
      "     5      49.99     656.51        36     745.00     638.37        67    1295.00     608.33        98    1660.00     611.83       129    2525.00     627.12    \n",
      "     6      55.00     656.53        37     749.99     638.04        68    1315.00     608.54        99    1665.00     611.97       130    2554.60     627.96    \n",
      "     7      65.00     656.49        38     755.00     637.60        69    1325.00     608.70       100    1670.00     612.05       131    2650.00     630.67    \n",
      "     8      69.99     656.44        39     790.00     633.70        70    1345.00     608.80       101    1675.00     612.20       132    2675.00     631.11    \n",
      "     9      79.99     656.22        40     800.00     632.76        71    1365.00     608.86       102    1794.99     617.43       133    2680.00     631.31    \n",
      "    10     130.00     654.85        41     804.99     632.03        72    1370.00     608.91       103    1800.00     617.52       134    2724.99     638.40    \n",
      "    11     135.00     654.84        42     855.00     621.51        73    1405.00     608.99       104    1805.00     617.57       135    2759.99     644.19    \n",
      "    12     140.00     654.99        43     860.00     621.17        74    1410.00     609.04       105    1830.00     618.16       136    2814.99     654.42    \n",
      "    13     144.99     655.06        44     885.00     619.86        75    1415.00     609.05       106    1914.99     619.73       137    2819.99     655.51    \n",
      "    14     150.00     655.07        45     890.00     619.70        76    1435.00     609.03       107    1920.00     619.85       138    2825.00     656.82    \n",
      "    15     180.00     654.05        46     895.00     619.57        77    1445.00     609.10       108    1924.99     620.00       139    2865.00     667.00    \n",
      "    16     185.00     654.01        47     910.00     618.87        78    1465.00     609.10       109    1930.00     620.12       140    2869.99     665.38    \n",
      "    17     205.00     655.01        48     920.00     618.74        79    1475.00     609.19       110    1955.00     620.54       141    2885.00     660.01    \n",
      "    18     209.99     655.11        49     925.00     618.53        80    1480.00     609.30       111    1960.00     620.65       142    2894.99     655.87    \n",
      "    19     230.00     655.22        50     935.00     618.07        81    1485.00     609.44       112    1999.99     621.25       143    2899.99     654.28    \n",
      "    20     235.00     655.06        51     940.00     617.96        82    1490.00     609.65       113    2010.00     621.37       144    2969.99     636.02    \n",
      "    21     248.28     654.48        52     974.99     616.38        83    1494.99     609.80       114    2025.00     621.96       145    2974.99     635.13    \n",
      "    22     250.00     654.41        53     980.00     616.21        84    1504.99     609.82       115    2050.00     622.11       146    3009.99     634.78    \n",
      "    23     254.99     654.33        54     985.00     616.11        85    1525.00     610.31       116    2055.00     622.20       147    3045.00     634.79    \n",
      "    24     270.00     654.41        55    1130.00     606.63        86    1549.99     610.48       117    2090.00     623.10       148    3050.00     634.86    \n",
      "    25     274.99     654.34        56    1135.00     606.47        87    1560.00     610.64       118    2095.00     623.09       149    3115.00     636.72    \n",
      "    26     310.00     653.33        57    1140.00     606.69        88    1570.00     610.75       119    2096.88     623.07       150    3120.00     636.90    \n",
      "    27     315.00     653.26        58    1145.00     606.86        89    1589.99     611.09       120    2105.00     623.13       151    3134.86     637.53    \n",
      "    28     335.00     652.70        59    1155.00     606.81        90    1600.00     611.15       121    2165.00     624.08    \n",
      "    29     430.00     650.79        60    1165.00     607.06        91    1620.00     611.58       122    2170.00     624.23    \n",
      "    30     585.00     647.43        61    1185.00     607.22        92    1630.00     611.24       123    2175.00     624.33    \n",
      "    31     635.00     645.81        62    1195.00     607.20        93    1635.00     611.29       124    2245.00     625.11    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 63:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1996873.22 314028.08, 1996673.37 312358.76, 1996226.65 310854.02, 1995850.47 309948.83)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     648.95        50     890.00     621.90        99    1889.99     606.04       148    2980.00     619.36       197    3770.00     638.43    \n",
      "     2       4.99     648.97        51     895.00     621.29       100    1904.99     606.63       149    2999.99     619.47       198    3785.00     638.23    \n",
      "     3      10.00     649.65        52     919.99     620.45       101    1934.99     607.05       150    3005.00     619.44       199    3790.00     638.24    \n",
      "     4      25.00     650.58        53     925.00     620.31       102    1949.99     607.11       151    3029.99     619.71       200    3795.00     638.22    \n",
      "     5      55.00     647.55        54     929.99     620.11       103    1955.00     607.22       152    3044.99     620.07       201    3814.99     638.32    \n",
      "     6      65.00     646.92        55    1125.00     609.07       104    1960.00     607.42       153    3075.00     620.57       202    3820.00     638.24    \n",
      "     7     115.00     644.21        56    1149.99     609.16       105    1979.99     607.51       154    3079.99     620.69       203    3830.00     637.86    \n",
      "     8     125.00     643.81        57    1155.00     609.12       106    2000.00     607.68       155    3094.99     621.26       204    3834.99     637.72    \n",
      "     9     135.00     643.50        58    1159.99     608.94       107    2035.00     607.81       156    3100.00     621.32       205    3840.00     637.62    \n",
      "    10     170.00     642.72        59    1165.00     608.87       108    2095.00     608.48       157    3190.00     622.06       206    3845.00     637.62    \n",
      "    11     175.00     642.58        60    1175.00     608.89       109    2119.99     608.61       158    3250.89     623.63       207    3855.00     637.82    \n",
      "    12     210.00     640.80        61    1180.00     608.71       110    2164.99     609.09       159    3335.00     625.88       208    3860.00     637.86    \n",
      "    13     214.99     641.13        62    1200.00     607.66       111    2190.00     609.50       160    3370.00     628.47       209    3870.00     637.88    \n",
      "    14     220.00     642.16        63    1204.99     607.53       112    2250.00     610.04       161    3374.99     629.22       210    3875.00     637.95    \n",
      "    15     230.00     644.78        64    1220.00     607.24       113    2255.00     610.12       162    3379.99     630.01       211    3880.00     639.44    \n",
      "    16     235.00     645.93        65    1224.99     607.17       114    2274.99     610.13       163    3385.00     630.76       212    3895.00     645.16    \n",
      "    17     249.99     646.14        66    1230.00     607.15       115    2320.00     610.42       164    3390.00     630.04       213    3905.00     646.69    \n",
      "    18     255.00     646.15        67    1245.00     607.18       116    2325.00     610.48       165    3394.99     629.24       214    3910.00     648.09    \n",
      "    19     269.99     645.71        68    1265.00     607.17       117    2395.00     610.89       166    3414.99     628.40       215    3915.00     649.71    \n",
      "    20     279.99     645.33        69    1280.00     607.34       118    2420.00     611.13       167    3420.00     628.22       216    3919.99     651.18    \n",
      "    21     285.00     645.09        70    1310.00     607.25       119    2425.00     611.21       168    3425.00     628.11       217    3945.00     655.94    \n",
      "    22     295.00     644.55        71    1314.99     607.26       120    2495.00     611.64       169    3429.99     628.15       218    3950.00     656.38    \n",
      "    23     314.99     643.63        72    1330.00     607.38       121    2519.99     611.99       170    3435.00     628.30       219    3955.00     656.79    \n",
      "    24     375.00     641.37        73    1335.00     607.39       122    2539.99     612.18       171    3455.00     629.19       220    3960.00     657.23    \n",
      "    25     385.00     641.30        74    1359.99     607.30       123    2560.00     612.53       172    3460.00     629.54       221    3970.00     658.17    \n",
      "    26     390.00     641.20        75    1400.00     607.41       124    2625.00     613.21       173    3470.00     629.87       222    3974.99     658.47    \n",
      "    27     444.99     639.73        76    1414.99     607.53       125    2724.99     614.78       174    3475.00     630.08       223    3989.99     659.14    \n",
      "    28     489.99     638.33        77    1440.00     607.53       126    2780.00     616.03       175    3479.99     630.19       224    3995.00     659.47    \n",
      "    29     495.00     638.22        78    1444.99     607.56       127    2784.99     616.18       176    3514.99     631.07       225    4009.99     660.69    \n",
      "    30     499.99     638.02        79    1465.00     607.49       128    2810.00     617.19       177    3519.99     631.02       226    4015.00     660.85    \n",
      "    31     503.08     637.85        80    1485.00     607.64       129    2814.99     617.42       178    3520.73     630.98       227    4030.00     661.11    \n",
      "    32     505.00     637.74        81    1620.00     607.99       130    2829.99     618.48       179    3525.00     630.72       228    4035.00     661.24    \n",
      "    33     510.00     637.60        82    1664.99     607.84       131    2835.00     618.76       180    3545.00     629.71       229    4065.00     662.86    \n",
      "    34     515.00     637.33        83    1681.24     607.68       132    2844.99     619.37       181    3549.99     629.52       230    4070.00     663.82    \n",
      "    35     520.00     637.03        84    1689.99     607.61       133    2850.00     619.64       182    3554.99     629.56       231    4105.00     671.59    \n",
      "    36     524.99     636.87        85    1695.00     607.31       134    2859.99     620.10       183    3560.00     629.51       232    4120.00     675.02    \n",
      "    37     530.00     636.63        86    1710.00     606.14       135    2864.99     620.29       184    3565.00     629.40       233    4125.00     676.54    \n",
      "    38     585.00     634.37        87    1714.99     605.90       136    2890.00     620.23       185    3569.99     629.32       234    4130.00     677.49    \n",
      "    39     644.99     632.96        88    1730.00     604.87       137    2894.99     620.30       186    3595.00     629.51       235    4145.00     677.49    \n",
      "    40     665.00     632.57        89    1734.99     604.58       138    2900.00     620.44       187    3630.00     630.88       236    4170.00     677.12    \n",
      "    41     705.00     629.81        90    1755.00     603.91       139    2905.00     620.22       188    3635.00     631.04       237    4175.00     676.96    \n",
      "    42     709.99     629.51        91    1770.00     603.56       140    2909.99     619.94       189    3670.00     631.82       238    4190.00     676.08    \n",
      "    43     719.99     628.83        92    1794.99     603.16       141    2915.00     619.85       190    3674.99     632.02       239    4195.00     675.88    \n",
      "    44     745.00     627.57        93    1835.00     603.38       142    2924.99     619.90       191    3690.00     633.08       240    4230.00     677.66    \n",
      "    45     750.00     627.35        94    1840.00     603.35       143    2930.00     619.82       192    3695.00     634.08       241    4231.14     677.70    \n",
      "    46     815.00     625.25        95    1859.99     603.92       144    2945.00     619.73       193    3705.00     636.54    \n",
      "    47     845.00     625.04        96    1865.00     604.11       145    2950.00     619.58       194    3715.00     638.92    \n",
      "    48     874.99     624.64        97    1880.00     605.57       146    2954.99     619.50       195    3720.00     639.23    \n",
      "    49     880.00     624.25        98    1884.99     605.88       147    2975.00     619.44       196    3760.00     638.65    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 64:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1997543.3 313992.81, 1998848.19 310654.17)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     653.47        56     870.00     620.67       111    1519.99     602.85       166    2124.99     602.20       221    2755.00     606.65    \n",
      "     2       4.99     653.57        57     875.00     620.22       112    1530.00     602.58       167    2144.99     601.99       222    2760.00     606.76    \n",
      "     3      10.00     653.63        58     984.99     621.28       113    1535.00     602.63       168    2155.00     601.57       223    2764.99     606.82    \n",
      "     4      15.00     653.28        59    1020.00     621.30       114    1545.00     602.89       169    2159.99     601.55       224    2790.00     606.98    \n",
      "     5      19.99     652.09        60    1025.00     621.47       115    1550.00     602.59       170    2165.00     601.59       225    2799.99     607.22    \n",
      "     6      34.99     650.21        61    1034.99     622.11       116    1555.00     602.51       171    2170.00     601.40       226    2809.99     607.34    \n",
      "     7      39.99     649.84        62    1040.00     622.00       117    1584.99     602.67       172    2174.99     600.96       227    2814.99     607.57    \n",
      "     8      45.00     649.80        63    1084.99     622.37       118    1590.00     603.14       173    2179.99     600.58       228    2940.00     616.52    \n",
      "     9      49.99     649.70        64    1094.99     622.51       119    1600.00     604.64       174    2185.00     600.31       229    2944.99     616.69    \n",
      "    10      60.00     649.59        65    1125.00     622.51       120    1605.00     605.18       175    2189.99     600.19       230    2950.00     616.91    \n",
      "    11      65.00     649.59        66    1129.99     622.57       121    1610.00     605.23       176    2194.99     600.67       231    3000.00     621.04    \n",
      "    12      80.00     649.91        67    1134.99     622.74       122    1619.99     605.14       177    2200.00     601.05       232    3005.00     621.67    \n",
      "    13      84.99     649.99        68    1140.00     622.86       123    1630.00     605.24       178    2209.99     600.77       233    3009.99     622.91    \n",
      "    14     105.00     649.87        69    1165.00     623.29       124    1645.00     604.71       179    2220.00     600.98       234    3015.00     623.99    \n",
      "    15     110.00     649.59        70    1170.00     623.22       125    1650.00     604.43       180    2230.00     600.91       235    3020.00     624.79    \n",
      "    16     114.99     649.94        71    1180.00     623.36       126    1665.00     604.36       181    2235.00     600.99       236    3024.99     625.21    \n",
      "    17     164.99     648.76        72    1185.00     623.40       127    1669.99     604.17       182    2239.99     601.10       237    3029.99     625.58    \n",
      "    18     170.00     648.73        73    1190.00     623.40       128    1684.99     604.30       183    2250.00     601.24       238    3035.00     625.86    \n",
      "    19     199.99     648.91        74    1209.99     623.13       129    1705.00     604.28       184    2254.99     601.55       239    3050.00     626.55    \n",
      "    20     205.00     648.68        75    1215.00     622.52       130    1710.00     604.24       185    2270.00     603.04       240    3054.99     626.83    \n",
      "    21     220.00     647.82        76    1220.00     621.85       131    1725.00     604.22       186    2275.00     603.46       241    3084.89     629.03    \n",
      "    22     225.00     647.84        77    1225.00     621.00       132    1730.00     604.16       187    2285.00     604.10       242    3094.99     629.77    \n",
      "    23     245.00     648.56        78    1235.00     618.44       133    1749.99     604.03       188    2304.99     603.92       243    3100.00     630.72    \n",
      "    24     264.99     648.32        79    1240.00     617.43       134    1760.00     603.81       189    2310.00     603.96       244    3104.99     631.91    \n",
      "    25     270.00     648.21        80    1250.00     616.63       135    1764.99     603.74       190    2315.00     604.07       245    3109.99     632.83    \n",
      "    26     305.00     646.42        81    1255.00     615.62       136    1775.00     603.79       191    2319.99     604.12       246    3114.99     633.71    \n",
      "    27     310.00     646.26        82    1259.99     614.80       137    1784.99     603.66       192    2324.99     604.12       247    3129.99     635.64    \n",
      "    28     325.00     645.89        83    1270.00     613.26       138    1845.00     603.42       193    2330.00     604.19       248    3135.00     636.19    \n",
      "    29     344.99     645.76        84    1274.99     612.83       139    1849.99     603.24       194    2335.00     604.91       249    3194.99     641.73    \n",
      "    30     349.99     645.67        85    1294.99     611.42       140    1855.00     603.16       195    2339.99     605.41       250    3200.00     642.33    \n",
      "    31     385.00     644.72        86    1300.00     611.17       141    1865.00     603.14       196    2350.00     605.48       251    3259.99     649.75    \n",
      "    32     449.99     642.15        87    1315.00     609.09       142    1870.00     602.94       197    2354.99     605.60       252    3264.99     650.40    \n",
      "    33     455.00     641.89        88    1320.00     609.31       143    1875.00     602.85       198    2360.00     605.75       253    3354.99     663.14    \n",
      "    34     459.99     641.58        89    1324.99     609.08       144    1895.00     602.79       199    2365.00     605.77       254    3424.99     672.31    \n",
      "    35     465.00     641.22        90    1350.00     607.73       145    1905.00     602.88       200    2369.99     605.75       255    3460.00     678.08    \n",
      "    36     470.00     641.04        91    1359.99     608.94       146    1925.00     602.82       201    2374.99     605.70       256    3464.99     679.45    \n",
      "    37     495.00     640.65        92    1370.00     610.03       147    1935.00     602.87       202    2380.00     605.62       257    3469.99     680.92    \n",
      "    38     565.00     638.92        93    1374.99     611.29       148    1944.99     602.85       203    2385.00     605.61       258    3474.99     682.16    \n",
      "    39     570.00     638.87        94    1385.00     614.80       149    1955.00     603.04       204    2395.00     605.68       259    3489.99     684.17    \n",
      "    40     595.00     639.42        95    1389.99     616.17       150    1965.00     603.02       205    2404.99     605.70       260    3499.99     683.66    \n",
      "    41     600.00     639.26        96    1400.00     617.96       151    1970.00     603.12       206    2415.00     605.78       261    3504.99     683.25    \n",
      "    42     620.00     638.29        97    1405.00     618.79       152    1975.00     603.25       207    2465.00     605.86       262    3509.99     682.29    \n",
      "    43     628.74     637.65        98    1420.00     620.73       153    1990.00     603.22       208    2495.00     605.82       263    3514.99     681.36    \n",
      "    44     654.99     635.73        99    1424.99     621.25       154    1994.99     603.18       209    2509.99     605.87       264    3519.99     682.16    \n",
      "    45     659.99     635.41       100    1439.99     621.21       155    2000.00     603.20       210    2530.00     605.81       265    3549.99     684.69    \n",
      "    46     674.99     634.92       101    1445.00     620.97       156    2005.00     603.32       211    2554.99     605.90       266    3554.99     684.44    \n",
      "    47     739.99     632.23       102    1454.99     620.18       157    2009.99     603.36       212    2559.99     605.87       267    3564.99     683.53    \n",
      "    48     800.00     630.46       103    1459.99     620.07       158    2020.00     603.31       213    2640.00     606.04       268    3569.99     684.19    \n",
      "    49     804.99     630.34       104    1465.00     618.75       159    2030.00     603.37       214    2649.99     606.12       269    3574.99     685.41    \n",
      "    50     810.00     629.77       105    1474.99     615.50       160    2050.00     603.25       215    2679.99     606.21       270    3579.99     684.85    \n",
      "    51     815.00     629.10       106    1480.00     614.40       161    2059.99     603.30       216    2690.00     606.18       271    3584.58     686.12    \n",
      "    52     840.00     625.87       107    1495.00     609.42       162    2065.00     603.26       217    2699.99     606.23    \n",
      "    53     845.00     625.17       108    1500.00     607.90       163    2094.99     602.82       218    2720.00     606.45    \n",
      "    54     860.00     622.13       109    1509.99     604.98       164    2105.00     602.61       219    2729.99     606.51    \n",
      "    55     865.00     621.23       110    1515.00     603.14       165    2115.00     602.47       220    2740.00     606.64    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 65:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1998472.01 314227.93, 1999929.73 311430.06)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     659.54        37     840.00     637.54        73    1420.00     602.13       109    2400.00     604.88       145    2660.00     624.71    \n",
      "     2     125.00     655.33        38     845.00     637.25        74    1425.00     601.96       110    2410.00     604.41       146    2665.00     625.51    \n",
      "     3     155.00     654.57        39     850.00     637.21        75    1439.99     602.05       111    2415.00     604.00       147    2672.15     626.45    \n",
      "     4     260.00     650.84        40     855.00     637.03        76    1445.00     602.04       112    2425.00     602.91       148    2725.00     633.41    \n",
      "     5     315.00     649.40        41     860.00     636.47        77    1460.00     602.19       113    2430.00     602.73       149    2729.99     634.10    \n",
      "     6     320.00     649.34        42     895.00     632.82        78    1465.00     601.88       114    2435.00     603.03       150    2800.00     644.97    \n",
      "     7     345.00     649.18        43     905.00     631.91        79    1480.00     600.57       115    2450.00     601.45       151    2805.00     645.53    \n",
      "     8     350.00     649.08        44     915.00     629.95        80    1485.00     600.27       116    2465.00     600.57       152    2814.99     646.58    \n",
      "     9     420.00     647.24        45     920.00     629.24        81    1500.00     599.16       117    2470.00     600.97       153    2820.00     647.23    \n",
      "    10     435.00     646.92        46     925.00     628.70        82    1505.00     598.94       118    2474.99     601.28       154    2835.00     649.47    \n",
      "    11     455.00     646.16        47     930.00     628.39        83    1519.99     598.73       119    2485.00     601.25       155    2839.99     650.13    \n",
      "    12     460.00     646.00        48     934.99     628.26        84    1525.00     598.84       120    2490.00     601.44       156    2904.99     658.15    \n",
      "    13     500.00     644.96        49     940.00     628.28        85    1555.00     601.81       121    2495.00     601.93       157    2950.00     664.25    \n",
      "    14     505.00     644.65        50     950.00     628.09        86    1560.00     602.45       122    2505.00     602.39       158    2955.00     664.90    \n",
      "    15     510.00     644.40        51     960.00     627.86        87    1565.00     602.61       123    2509.99     602.92       159    2970.00     666.77    \n",
      "    16     515.00     644.21        52     969.99     627.78        88    1595.00     603.01       124    2519.99     605.23       160    2975.00     667.51    \n",
      "    17     520.00     644.27        53     995.00     626.82        89    1600.00     603.04       125    2525.00     606.27       161    2979.99     668.34    \n",
      "    18     525.00     644.50        54    1010.00     626.16        90    1760.00     602.96       126    2530.00     606.98       162    2985.00     669.50    \n",
      "    19     530.00     644.52        55    1045.00     625.50        91    1769.99     603.01       127    2535.00     608.53       163    3010.00     676.33    \n",
      "    20     535.00     644.51        56    1050.00     625.35        92    1804.99     602.83       128    2544.99     611.88       164    3014.99     677.91    \n",
      "    21     540.00     644.36        57    1065.00     624.49        93    2004.99     603.18       129    2550.00     612.79       165    3024.99     681.66    \n",
      "    22     561.56     643.36        58    1080.00     623.54        94    2025.00     603.29       130    2560.00     614.03       166    3030.00     682.38    \n",
      "    23     585.00     642.27        59    1085.00     623.19        95    2045.00     603.20       131    2570.00     615.10       167    3045.00     682.70    \n",
      "    24     604.99     642.09        60    1105.00     621.59        96    2065.00     603.29       132    2575.00     615.52       168    3049.99     682.91    \n",
      "    25     625.00     641.67        61    1109.99     621.16        97    2140.00     603.01       133    2579.99     615.89       169    3055.00     682.73    \n",
      "    26     685.00     642.07        62    1130.00     619.01        98    2160.00     602.82       134    2585.00     616.36       170    3059.99     682.10    \n",
      "    27     690.00     642.06        63    1134.99     618.58        99    2230.00     602.55       135    2590.00     617.05       171    3065.00     681.76    \n",
      "    28     700.00     641.74        64    1140.00     618.27       100    2255.00     602.58       136    2595.00     617.57       172    3074.99     681.35    \n",
      "    29     760.00     639.52        65    1150.00     617.74       101    2300.00     602.32       137    2600.00     618.06       173    3080.00     681.92    \n",
      "    30     769.99     639.12        66    1290.00     607.81       102    2315.00     602.48       138    2604.99     618.60       174    3084.99     682.62    \n",
      "    31     780.00     638.97        67    1334.99     606.50       103    2330.00     602.40       139    2610.00     619.30       175    3100.00     685.21    \n",
      "    32     800.00     638.53        68    1360.00     605.91       104    2335.00     602.66       140    2620.00     620.98       176    3140.00     692.30    \n",
      "    33     804.99     638.56        69    1370.00     605.73       105    2360.00     604.68       141    2625.00     621.72       177    3144.99     693.15    \n",
      "    34     820.00     639.25        70    1375.00     605.32       106    2365.00     604.84       142    2630.00     623.44       178    3150.00     693.93    \n",
      "    35     825.00     639.37        71    1385.00     604.37       107    2389.99     604.90       143    2639.99     624.44       179    3154.84     694.53    \n",
      "    36     830.01     638.82        72    1390.00     604.11       108    2395.00     604.95       144    2645.00     624.62    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 66:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1999106.82 314627.63, 2000305.91 313569.61, 2001187.59 312664.41)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     663.23        43     950.00     626.01        85    1400.00     600.98       127    1930.00     600.26       169    2379.24     619.95    \n",
      "     2      35.01     662.23        44     955.00     625.61        86    1405.00     600.81       128    1955.01     600.00       170    2380.01     619.98    \n",
      "     3     210.00     654.40        45     960.01     625.34        87    1415.00     600.76       129    1970.00     599.35       171    2390.00     620.43    \n",
      "     4     230.00     653.67        46     965.00     625.30        88    1420.00     600.70       130    1975.00     598.94       172    2395.00     620.62    \n",
      "     5     290.00     651.12        47     985.00     625.28        89    1425.00     600.47       131    1985.00     597.68       173    2400.00     620.77    \n",
      "     6     295.00     650.88        48     990.00     626.41        90    1430.00     600.40       132    1990.00     597.08       174    2405.01     621.06    \n",
      "     7     330.01     648.91        49     995.01     627.32        91    1445.01     600.39       133    2010.00     596.53       175    2410.01     621.41    \n",
      "     8     335.01     648.82        50    1000.00     627.61        92    1450.00     600.44       134    2015.00     596.43       176    2420.01     622.77    \n",
      "     9     360.00     648.66        51    1005.00     627.32        93    1465.00     600.30       135    2030.00     596.27       177    2425.00     623.41    \n",
      "    10     365.00     648.67        52    1010.00     626.83        94    1470.00     600.47       136    2035.00     596.12       178    2430.00     624.02    \n",
      "    11     370.00     649.40        53    1025.00     623.72        95    1485.00     600.42       137    2050.00     595.89       179    2470.00     629.16    \n",
      "    12     375.00     650.08        54    1030.00     623.38        96    1490.00     600.67       138    2055.00     595.44       180    2490.01     631.83    \n",
      "    13     400.00     648.91        55    1035.00     623.14        97    1495.00     600.70       139    2060.01     595.40       181    2495.01     632.44    \n",
      "    14     402.50     648.68        56    1040.00     622.95        98    1505.00     600.61       140    2070.01     595.44       182    2525.01     635.61    \n",
      "    15     405.01     648.45        57    1080.00     621.97        99    1510.00     600.51       141    2075.00     595.38       183    2550.01     638.57    \n",
      "    16     425.00     646.34        58    1085.00     621.89       100    1520.00     600.22       142    2080.00     595.39       184    2560.00     640.98    \n",
      "    17     450.00     645.19        59    1095.00     621.78       101    1525.00     599.92       143    2095.00     595.60       185    2565.00     641.80    \n",
      "    18     455.00     645.01        60    1115.00     621.26       102    1535.00     598.97       144    2110.00     596.63       186    2575.01     643.29    \n",
      "    19     515.01     644.01        61    1120.00     621.10       103    1540.00     598.57       145    2115.00     596.91       187    2595.00     646.91    \n",
      "    20     570.01     641.85        62    1125.01     620.75       104    1545.00     598.82       146    2120.00     597.22       188    2600.00     647.63    \n",
      "    21     630.00     638.75        63    1135.00     620.32       105    1560.00     599.03       147    2135.00     598.99       189    2625.00     650.87    \n",
      "    22     635.00     638.57        64    1140.00     618.87       106    1565.00     599.07       148    2155.00     599.90       190    2640.01     652.94    \n",
      "    23     645.01     638.69        65    1145.01     618.41       107    1580.00     600.86       149    2160.00     600.01       191    2645.01     653.75    \n",
      "    24     650.01     638.72        66    1150.00     617.73       108    1585.00     600.96       150    2175.01     600.65       192    2655.00     655.94    \n",
      "    25     685.00     638.27        67    1155.00     616.89       109    1599.13     600.89       151    2180.01     601.04       193    2660.00     657.33    \n",
      "    26     690.00     638.07        68    1160.00     616.78       110    1605.01     600.86       152    2255.00     607.92       194    2700.00     669.76    \n",
      "    27     695.00     637.78        69    1170.00     616.64       111    1640.01     600.85       153    2260.01     608.51       195    2705.00     671.43    \n",
      "    28     725.00     636.31        70    1175.00     616.17       112    1645.01     600.88       154    2275.00     609.35       196    2715.00     674.93    \n",
      "    29     730.00     636.16        71    1190.00     614.19       113    1660.00     601.07       155    2285.00     610.04       197    2720.01     676.49    \n",
      "    30     785.00     635.24        72    1285.00     602.59       114    1670.00     601.11       156    2290.01     610.46       198    2740.00     682.30    \n",
      "    31     795.00     635.00        73    1290.00     602.39       115    1685.00     601.27       157    2295.01     611.08       199    2745.00     683.37    \n",
      "    32     835.01     634.35        74    1300.00     602.35       116    1690.00     601.28       158    2305.00     612.59       200    2750.01     682.52    \n",
      "    33     840.00     634.22        75    1310.00     602.24       117    1705.00     601.41       159    2310.00     613.18       201    2755.01     681.33    \n",
      "    34     880.00     632.16        76    1325.00     602.16       118    1730.00     601.50       160    2330.00     614.94       202    2760.01     680.21    \n",
      "    35     885.01     631.87        77    1330.01     602.05       119    1810.00     601.31       161    2335.00     615.69       203    2780.01     676.42    \n",
      "    36     890.01     631.50        78    1335.00     601.91       120    1820.00     601.21       162    2340.00     616.53       204    2785.01     677.82    \n",
      "    37     895.00     631.16        79    1340.00     601.86       121    1835.01     600.94       163    2345.00     617.14       205    2815.00     687.10    \n",
      "    38     900.00     630.78        80    1355.00     601.78       122    1840.00     600.88       164    2350.00     617.51       206    2820.00     687.75    \n",
      "    39     905.00     630.17        81    1375.00     601.45       123    1855.00     600.45       165    2355.00     618.34       207    2830.00     688.59    \n",
      "    40     910.00     629.51        82    1380.00     601.27       124    1880.00     600.24       166    2360.00     619.25       208    2845.01     690.23    \n",
      "    41     920.00     628.61        83    1385.01     601.15       125    1885.00     600.23       167    2365.00     619.52       209    2850.00     691.02    \n",
      "    42     930.00     627.83        84    1395.00     601.06       126    1905.00     600.30       168    2370.00     619.59       210    2862.76     694.24    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 67:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1996947 317722, 2001916.45 313452.05)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     670.00        40    4260.00     635.42        79    5075.00     600.36       118    5475.00     600.58       157    6020.00     631.36    \n",
      "     2    1490.00     650.00        41    4265.00     634.95        80    5090.01     600.37       119    5485.00     600.64       158    6025.00     632.06    \n",
      "     3    2030.00     678.00        42    4275.00     633.93        81    5095.00     600.25       120    5500.00     600.65       159    6050.00     635.26    \n",
      "     4    3650.00     662.14        43    4300.00     631.79        82    5110.00     600.24       121    5505.00     600.68       160    6055.00     635.98    \n",
      "     5    3655.00     662.20        44    4305.00     631.47        83    5120.00     599.39       122    5540.00     600.35       161    6074.99     639.03    \n",
      "     6    3665.00     662.75        45    4320.00     630.95        84    5125.00     599.29       123    5545.00     600.35       162    6085.00     640.47    \n",
      "     7    3670.00     663.52        46    4325.00     630.81        85    5135.00     599.26       124    5585.00     600.09       163    6100.00     642.47    \n",
      "     8    3680.00     663.17        47    4350.00     630.72        86    5140.00     599.44       125    5600.00     599.90       164    6105.00     643.17    \n",
      "     9    3720.00     660.62        48    4355.00     630.77        87    5145.00     599.84       126    5615.00     599.61       165    6120.00     645.43    \n",
      "    10    3725.00     660.35        49    4360.00     630.90        88    5150.00     600.21       127    5620.00     599.61       166    6140.00     648.30    \n",
      "    11    3735.00     659.96        50    4380.00     631.22        89    5155.00     600.32       128    5635.00     599.47       167    6160.00     651.43    \n",
      "    12    3740.00     659.65        51    4400.00     631.14        90    5165.00     600.45       129    5640.00     599.16       168    6170.00     653.08    \n",
      "    13    3795.00     654.89        52    4435.00     631.27        91    5170.00     600.56       130    5645.00     598.91       169    6225.00     660.90    \n",
      "    14    3800.00     654.38        53    4440.00     631.20        92    5175.00     600.62       131    5655.00     598.60       170    6230.00     661.72    \n",
      "    15    3805.00     654.04        54    4445.00     631.04        93    5180.00     600.62       132    5660.00     598.32       171    6240.00     663.43    \n",
      "    16    3810.00     653.81        55    4455.00     630.66        94    5195.00     600.50       133    5680.00     596.36       172    6280.00     669.42    \n",
      "    17    3815.00     653.51        56    4460.00     630.07        95    5205.00     600.48       134    5695.01     595.83       173    6285.00     670.59    \n",
      "    18    3855.00     651.86        57    4465.00     629.14        96    5210.00     599.91       135    5700.00     596.19       174    6315.00     682.42    \n",
      "    19    3860.00     652.13        58    4470.00     628.45        97    5219.99     598.44       136    5845.00     610.99       175    6320.00     683.28    \n",
      "    20    3875.00     654.22        59    4525.00     627.28        98    5225.00     598.26       137    5850.00     611.04       176    6324.99     683.28    \n",
      "    21    3876.58     654.26        60    4535.00     627.19        99    5230.01     598.25       138    5855.00     610.76       177    6330.00     683.10    \n",
      "    22    3880.00     654.34        61    4545.00     627.00       100    5240.00     598.15       139    5860.00     611.54       178    6335.00     682.37    \n",
      "    23    3885.00     654.36        62    4550.00     626.88       101    5245.00     598.13       140    5865.00     612.11       179    6355.00     679.69    \n",
      "    24    3895.00     654.27        63    4555.00     626.80       102    5250.00     598.14       141    5870.00     612.00       180    6360.00     679.99    \n",
      "    25    3899.99     654.18        64    4605.00     626.28       103    5255.00     598.20       142    5875.00     611.96       181    6379.99     681.70    \n",
      "    26    3905.00     653.73        65    4610.00     626.04       104    5270.00     598.77       143    5880.00     612.24       182    6385.00     682.30    \n",
      "    27    3915.00     651.49        66    4625.00     624.92       105    5275.00     598.72       144    5915.00     618.63       183    6420.00     687.65    \n",
      "    28    3920.00     650.26        67    4690.00     621.44       106    5279.99     598.70       145    5920.00     618.92       184    6425.00     688.32    \n",
      "    29    3925.00     649.86        68    4694.99     621.10       107    5285.00     598.86       146    5925.00     619.98       185    6445.00     690.80    \n",
      "    30    3950.00     648.24        69    4715.00     619.38       108    5295.00     599.31       147    5930.00     621.12       186    6455.00     692.36    \n",
      "    31    3970.00     647.21        70    4720.00     619.01       109    5300.00     599.35       148    5935.00     621.30       187    6459.99     693.42    \n",
      "    32    4025.00     643.94        71    4725.00     618.75       110    5305.00     599.52       149    5939.99     621.66       188    6485.00     699.10    \n",
      "    33    4070.00     641.78        72    4955.00     600.41       111    5315.00     600.22       150    5943.96     622.05       189    6500.00     703.79    \n",
      "    34    4105.00     640.28        73    4960.00     600.19       112    5320.00     600.35       151    5945.01     622.15       190    6505.00     704.29    \n",
      "    35    4140.00     638.67        74    4980.00     600.22       113    5335.00     600.47       152    5960.00     623.82       191    6525.36     705.58    \n",
      "    36    4149.99     638.28        75    4985.00     600.19       114    5340.00     600.47       153    5965.00     624.42    \n",
      "    37    4200.00     636.59        76    5035.01     600.11       115    5350.00     600.37       154    5980.00     626.68    \n",
      "    38    4220.00     636.03        77    5055.00     600.24       116    5355.00     600.35       155    6000.00     629.15    \n",
      "    39    4250.00     635.51        78    5060.00     600.24       117    5375.00     600.33       156    6015.00     630.73    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 68:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1997530.8 318341.6, 2002563.02 314192.66)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     670.00        39    4303.00     620.97        77    5028.00     599.55       115    5498.00     599.34       153    5908.00     616.52    \n",
      "     2    1533.00     636.00        40    4503.00     612.57        78    5033.00     599.44       116    5503.00     599.26       154    5913.00     617.43    \n",
      "     3    1733.00     636.00        41    4508.00     612.41        79    5048.00     599.38       117    5518.00     598.83       155    5918.00     618.50    \n",
      "     4    2247.00     674.00        42    4518.00     612.27        80    5068.00     599.14       118    5523.00     598.40       156    5927.99     620.79    \n",
      "     5    3583.00     669.13        43    4523.01     612.17        81    5073.00     598.58       119    5538.00     596.84       157    5933.00     621.30    \n",
      "     6    3613.00     668.99        44    4528.00     611.79        82    5078.00     598.53       120    5543.00     596.56       158    5970.83     621.30    \n",
      "     7    3628.00     667.42        45    4533.00     611.52        83    5088.00     598.54       121    5548.00     596.34       159    5983.00     621.30    \n",
      "     8    3683.00     660.89        46    4543.01     611.43        84    5093.00     598.57       122    5563.00     595.56       160    5988.00     621.82    \n",
      "     9    3723.00     655.81        47    4548.00     611.33        85    5098.00     598.69       123    5568.00     595.55       161    6012.99     625.04    \n",
      "    10    3750.58     653.02        48    4553.00     611.06        86    5113.00     598.70       124    5583.00     595.62       162    6043.00     629.59    \n",
      "    11    3753.00     652.78        49    4558.00     610.96        87    5118.00     598.91       125    5588.00     595.77       163    6103.00     637.46    \n",
      "    12    3758.00     652.44        50    4573.00     610.74        88    5133.00     598.77       126    5603.00     595.79       164    6123.00     639.92    \n",
      "    13    3763.00     652.19        51    4578.00     610.74        89    5138.00     598.89       127    5608.00     595.54       165    6158.00     644.54    \n",
      "    14    3768.01     651.73        52    4583.01     610.67        90    5143.00     598.88       128    5613.00     595.48       166    6193.00     650.18    \n",
      "    15    3778.00     650.35        53    4598.00     610.25        91    5158.00     598.22       129    5633.00     595.51       167    6213.00     653.84    \n",
      "    16    3783.00     649.74        54    4613.00     609.90        92    5163.00     598.16       130    5638.01     595.75       168    6243.00     658.38    \n",
      "    17    3788.00     650.01        55    4618.00     609.97        93    5168.00     597.72       131    5653.00     595.78       169    6248.00     659.28    \n",
      "    18    3793.00     650.24        56    4623.00     610.01        94    5178.00     596.73       132    5658.00     596.01       170    6253.00     660.72    \n",
      "    19    3803.00     650.45        57    4653.00     608.00        95    5183.00     596.40       133    5678.00     596.02       171    6268.00     666.74    \n",
      "    20    3813.00     650.26        58    4657.99     607.76        96    5203.00     596.12       134    5683.00     596.39       172    6308.00     682.00    \n",
      "    21    3822.99     649.94        59    4663.00     607.04        97    5208.00     596.13       135    5732.99     601.27       173    6313.00     682.98    \n",
      "    22    3828.00     649.32        60    4673.00     604.71        98    5213.00     596.45       136    5738.00     601.33       174    6318.00     682.98    \n",
      "    23    3848.00     647.93        61    4678.00     603.66        99    5228.00     598.96       137    5752.99     601.43       175    6323.00     682.72    \n",
      "    24    3862.99     646.74        62    4683.00     603.37       100    5233.00     599.26       138    5758.00     601.91       176    6358.00     675.64    \n",
      "    25    3873.00     646.08        63    4698.00     600.80       101    5253.00     599.34       139    5773.00     603.58       177    6363.00     675.02    \n",
      "    26    3988.00     639.07        64    4703.00     600.64       102    5273.00     599.15       140    5778.00     604.01       178    6413.01     683.97    \n",
      "    27    4013.00     637.86        65    4708.00     600.57       103    5333.00     599.57       141    5793.00     604.29       179    6438.00     688.57    \n",
      "    28    4073.00     633.68        66    4723.00     599.96       104    5338.01     599.56       142    5803.00     604.20       180    6443.00     689.41    \n",
      "    29    4078.00     633.41        67    4728.00     599.91       105    5358.01     599.40       143    5808.00     604.21       181    6493.00     696.64    \n",
      "    30    4118.00     631.99        68    4743.00     599.58       106    5363.00     599.39       144    5823.00     606.32       182    6498.00     697.46    \n",
      "    31    4123.00     631.77        69    4768.00     599.40       107    5368.00     599.43       145    5828.00     606.70       183    6518.00     701.01    \n",
      "    32    4128.00     631.59        70    4788.00     599.33       108    5388.00     599.35       146    5838.00     606.82       184    6523.00     701.26    \n",
      "    33    4173.00     630.55        71    4853.00     599.30       109    5432.99     599.76       147    5848.00     606.82       185    6533.00     703.35    \n",
      "    34    4183.00     629.59        72    4858.00     599.33       110    5438.00     599.75       148    5853.00     606.85       186    6538.00     704.35    \n",
      "    35    4188.00     629.21        73    4893.00     599.34       111    5452.99     599.82       149    5863.00     607.77       187    6543.00     704.50    \n",
      "    36    4238.00     625.86        74    4923.00     599.51       112    5458.00     599.71       150    5868.00     608.53       188    6547.99     704.20    \n",
      "    37    4293.00     621.38        75    4968.00     599.53       113    5478.00     599.63       151    5898.00     614.67       189    6563.00     702.87    \n",
      "    38    4298.00     621.15        76    4988.00     599.61       114    5483.00     599.41       152    5903.00     615.77       190    6564.80     702.72    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 69:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1997761 318597, 2001969.35 315961.91, 2003133.18 315021.45)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     664.00        40    4190.00     621.34        79    4720.00     598.08       118    5475.00     595.00       157    5945.00     629.15    \n",
      "     2    1617.00     628.00        41    4195.00     621.08        80    4755.00     598.10       119    5495.01     595.44       158    6000.00     638.24    \n",
      "     3    2305.00     664.00        42    4220.00     620.28        81    4765.00     598.15       120    5500.01     595.26       159    6005.00     639.12    \n",
      "     4    3380.00     664.10        43    4225.01     620.03        82    4790.01     598.03       121    5515.00     594.51       160    6065.00     650.62    \n",
      "     5    3580.00     662.73        44    4230.00     619.75        83    4875.01     598.07       122    5520.00     594.45       161    6090.00     654.24    \n",
      "     6    3585.00     662.42        45    4240.00     619.42        84    4885.00     598.02       123    5525.00     594.36       162    6135.00     661.16    \n",
      "     7    3620.01     661.21        46    4245.00     619.17        85    4890.00     598.02       124    5540.01     593.87       163    6175.01     667.64    \n",
      "     8    3635.00     660.89        47    4250.00     618.88        86    4910.01     598.23       125    5560.00     593.69       164    6220.01     675.14    \n",
      "     9    3640.01     660.10        48    4255.00     618.63        87    4925.00     598.25       126    5565.00     593.87       165    6225.01     676.00    \n",
      "    10    3645.00     659.72        49    4260.00     618.35        88    4930.01     598.30       127    5580.00     594.61       166    6260.00     682.21    \n",
      "    11    3646.69     659.61        50    4265.01     618.04        89    4952.64     598.32       128    5585.00     594.97       167    6265.01     682.75    \n",
      "    12    3650.00     659.38        51    4270.00     617.70        90    5095.00     598.48       129    5615.00     598.37       168    6270.01     682.75    \n",
      "    13    3655.00     659.38        52    4275.01     617.30        91    5105.00     598.42       130    5620.00     598.86       169    6275.01     682.79    \n",
      "    14    3665.00     659.71        53    4280.00     616.98        92    5140.00     598.42       131    5625.00     599.25       170    6280.00     681.75    \n",
      "    15    3670.00     659.71        54    4305.00     615.56        93    5145.00     598.38       132    5690.01     606.00       171    6290.00     679.62    \n",
      "    16    3675.00     659.57        55    4315.00     614.60        94    5165.00     598.31       133    5715.00     608.10       172    6295.00     679.02    \n",
      "    17    3680.01     659.50        56    4320.00     613.95        95    5180.00     598.10       134    5720.00     608.61       173    6310.01     683.42    \n",
      "    18    3685.00     659.39        57    4325.01     613.10        96    5185.00     598.08       135    5730.01     609.78       174    6315.01     684.19    \n",
      "    19    3690.01     659.13        58    4330.01     612.21        97    5225.00     598.21       136    5735.01     610.31       175    6320.01     686.07    \n",
      "    20    3705.00     657.43        59    4340.00     609.76        98    5245.01     598.10       137    5745.00     611.31       176    6335.00     692.52    \n",
      "    21    3725.00     655.48        60    4345.01     609.16        99    5255.00     598.10       138    5750.00     611.71       177    6340.01     694.79    \n",
      "    22    3730.00     655.03        61    4350.00     608.69       100    5270.00     597.97       139    5755.00     612.03       178    6345.01     695.22    \n",
      "    23    3805.00     648.73        62    4360.00     607.27       101    5295.00     597.95       140    5775.00     613.55       179    6350.00     694.70    \n",
      "    24    3820.00     647.23        63    4365.00     606.71       102    5320.00     597.86       141    5780.00     613.99       180    6355.00     694.70    \n",
      "    25    3845.00     644.51        64    4390.00     606.56       103    5325.00     597.87       142    5785.01     614.49       181    6360.01     695.64    \n",
      "    26    3880.00     640.46        65    4395.00     606.35       104    5340.01     597.80       143    5795.00     615.66       182    6365.01     696.27    \n",
      "    27    3915.00     637.19        66    4400.01     605.91       105    5345.01     597.71       144    5800.00     616.13       183    6370.01     695.58    \n",
      "    28    3920.01     636.79        67    4405.00     605.68       106    5360.00     597.30       145    5805.00     616.54       184    6380.00     693.93    \n",
      "    29    3935.00     635.78        68    4420.00     605.65       107    5365.00     597.28       146    5820.01     617.97       185    6385.00     693.34    \n",
      "    30    3985.00     633.42        69    4430.00     605.55       108    5370.00     596.71       147    5825.01     618.42       186    6390.00     692.99    \n",
      "    31    3990.00     633.13        70    4435.00     605.40       109    5385.00     594.62       148    5830.01     618.81       187    6395.00     693.02    \n",
      "    32    4000.00     632.47        71    4445.00     604.62       110    5390.00     594.54       149    5835.01     619.30       188    6425.00     692.02    \n",
      "    33    4025.00     631.27        72    4450.01     604.15       111    5410.00     593.98       150    5855.00     621.34       189    6430.00     692.06    \n",
      "    34    4035.01     630.87        73    4515.00     597.65       112    5425.00     593.89       151    5885.01     623.73       190    6435.00     692.39    \n",
      "    35    4040.00     630.70        74    4520.00     597.27       113    5430.00     593.96       152    5905.00     624.88       191    6440.01     693.30    \n",
      "    36    4070.00     630.07        75    4540.00     597.46       114    5445.00     594.28       153    5910.00     625.20       192    6445.01     693.83    \n",
      "    37    4075.00     629.25        76    4600.00     597.65       115    5450.00     593.92       154    5915.00     625.58       193    6448.96     693.91    \n",
      "    38    4080.00     628.50        77    4605.00     597.73       116    5455.00     593.98       155    5925.01     626.69    \n",
      "    39    4145.00     624.49        78    4640.00     597.65       117    5470.00     595.02       156    5930.92     627.42    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 70:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1998928 319764, 2003932.57 315973.66)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     664.00        48    3670.00     644.45        95    4209.99     595.73       142    5035.00     597.28       189    5444.99     594.86    \n",
      "     2    1074.00     622.00        49    3715.00     637.78        96    4215.00     595.74       143    5044.99     597.49       190    5450.00     595.30    \n",
      "     3    1428.00     622.00        50    3720.00     637.12        97    4225.00     595.84       144    5050.00     597.29       191    5680.00     620.60    \n",
      "     4    3000.00     743.31        51    3729.99     635.73        98    4235.00     595.86       145    5055.00     596.94       192    5685.00     621.09    \n",
      "     5    3045.00     731.73        52    3735.00     635.29        99    4264.99     596.13       146    5059.99     596.72       193    5690.00     621.93    \n",
      "     6    3050.00     731.13        53    3750.00     633.71       100    4270.00     596.13       147    5065.00     596.56       194    5710.00     622.13    \n",
      "     7    3084.99     727.98        54    3770.00     631.37       101    4295.00     596.38       148    5075.00     596.65       195    5714.99     621.75    \n",
      "     8    3090.00     727.49        55    3775.00     630.59       102    4300.00     596.37       149    5090.00     596.99       196    5720.00     621.30    \n",
      "     9    3094.99     726.96        56    3780.00     628.96       103    4315.00     596.44       150    5095.00     597.03       197    5759.93     621.30    \n",
      "    10    3099.99     726.25        57    3785.00     627.95       104    4329.99     596.61       151    5110.00     597.08       198    5805.00     621.30    \n",
      "    11    3135.00     720.42        58    3819.99     625.09       105    4350.00     596.41       152    5120.00     597.00       199    5810.00     621.45    \n",
      "    12    3164.99     714.92        59    3875.00     621.28       106    4360.00     596.48       153    5124.99     597.01       200    5839.99     625.46    \n",
      "    13    3229.99     699.35        60    3885.00     620.74       107    4410.00     596.44       154    5130.00     597.06       201    5860.00     628.66    \n",
      "    14    3235.00     698.25        61    3890.00     620.43       108    4415.00     596.47       155    5135.00     597.04       202    5880.00     631.93    \n",
      "    15    3265.00     695.84        62    3900.00     619.91       109    4450.00     596.34       156    5150.00     596.91       203    5915.00     638.03    \n",
      "    16    3270.00     695.41        63    3905.00     619.61       110    4454.99     596.35       157    5160.00     596.93       204    5920.00     638.86    \n",
      "    17    3274.99     694.88        64    3910.00     619.22       111    4500.00     596.55       158    5165.00     596.90       205    5940.00     642.06    \n",
      "    18    3310.00     691.40        65    3915.00     618.90       112    4565.00     596.55       159    5169.99     596.81       206    5945.00     642.70    \n",
      "    19    3359.99     685.99        66    3920.00     618.46       113    4579.99     596.60       160    5175.00     596.77       207    5950.00     643.38    \n",
      "    20    3365.00     685.35        67    3930.00     617.36       114    4610.00     596.86       161    5215.00     596.63       208    5954.99     644.28    \n",
      "    21    3370.00     683.35        68    3934.99     616.75       115    4655.00     596.87       162    5225.00     596.53       209    5960.00     645.05    \n",
      "    22    3375.00     682.61        69    3944.99     615.44       116    4675.00     596.97       163    5245.00     596.51       210    5985.00     648.57    \n",
      "    23    3385.00     681.70        70    3949.99     614.65       117    4695.00     596.90       164    5249.99     596.54       211    5990.00     649.23    \n",
      "    24    3390.00     681.02        71    3955.00     613.68       118    4725.00     596.99       165    5255.00     596.53       212    6019.99     652.71    \n",
      "    25    3399.37     679.14        72    3960.00     612.90       119    4745.00     596.95       166    5265.00     596.41       213    6030.00     653.99    \n",
      "    26    3399.99     679.01        73    3975.00     611.42       120    4755.00     597.05       167    5270.00     596.32       214    6040.00     655.51    \n",
      "    27    3405.00     678.26        74    3980.00     610.98       121    4784.99     597.02       168    5295.00     596.05       215    6070.00     660.48    \n",
      "    28    3414.99     674.81        75    3995.00     609.81       122    4790.00     597.07       169    5300.00     596.03       216    6075.00     661.35    \n",
      "    29    3420.00     674.52        76    4000.00     608.67       123    4794.99     597.15       170    5310.00     596.06       217    6089.99     664.09    \n",
      "    30    3435.00     675.08        77    4004.99     607.29       124    4799.99     597.20       171    5315.00     595.83       218    6095.00     664.94    \n",
      "    31    3440.00     675.46        78    4010.00     606.14       125    4820.00     597.26       172    5319.99     595.51       219    6115.00     668.11    \n",
      "    32    3450.00     675.63        79    4014.99     605.76       126    4840.00     597.14       173    5325.00     595.28       220    6135.00     671.52    \n",
      "    33    3455.00     675.63        80    4020.00     604.98       127    4845.00     597.16       174    5330.00     595.11       221    6150.00     673.72    \n",
      "    34    3460.00     675.54        81    4025.00     604.12       128    4850.00     597.22       175    5335.00     594.88       222    6155.00     674.72    \n",
      "    35    3465.00     674.48        82    4030.00     603.36       129    4875.00     597.29       176    5340.00     594.60       223    6165.00     677.31    \n",
      "    36    3490.00     665.62        83    4035.00     602.94       130    4895.00     597.43       177    5345.00     594.09       224    6175.00     680.09    \n",
      "    37    3494.99     664.62        84    4045.00     602.18       131    4915.00     597.27       178    5350.00     593.41       225    6180.00     681.71    \n",
      "    38    3510.00     661.80        85    4050.00     602.14       132    4930.00     597.46       179    5355.00     593.23       226    6185.00     682.88    \n",
      "    39    3515.00     661.10        86    4055.00     602.14       133    4945.00     597.47       180    5360.00     593.14       227    6190.00     682.88    \n",
      "    40    3520.00     660.37        87    4059.99     601.79       134    4955.00     597.36       181    5380.00     592.34       228    6195.00     682.81    \n",
      "    41    3549.99     655.13        88    4065.00     601.70       135    4960.00     597.38       182    5384.99     592.31       229    6205.00     681.03    \n",
      "    42    3555.00     654.47        89    4069.99     601.82       136    4965.00     597.37       183    5405.00     592.62       230    6210.00     680.94    \n",
      "    43    3580.00     652.65        90    4075.00     601.87       137    4975.00     597.21       184    5415.00     592.25       231    6235.00     681.56    \n",
      "    44    3595.00     651.86        91    4135.00     596.06       138    4985.00     597.15       185    5420.00     592.14       232    6240.00     682.05    \n",
      "    45    3600.00     651.56        92    4139.99     595.73       139    5000.00     597.19       186    5425.00     592.07       233    6245.00     683.35    \n",
      "    46    3614.99     650.18        93    4160.00     595.84       140    5015.00     597.35       187    5435.00     594.38       234    6268.13     687.57    \n",
      "    47    3665.00     644.90        94    4194.99     595.57       141    5025.00     597.28       188    5440.00     594.82    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 71:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (1999805 320604, 2004532.11 316549.7)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     662.00        44    3498.00     648.10        87    4023.01     595.99       130    4908.01     596.34       173    5513.01     612.51    \n",
      "     2     823.00     626.00        45    3503.01     647.39        88    4063.01     595.97       131    4943.01     596.55       174    5518.00     613.33    \n",
      "     3    1563.00     620.00        46    3523.00     646.14        89    4083.01     596.06       132    4963.00     596.55       175    5523.00     614.20    \n",
      "     4    2963.00     721.59        47    3528.01     645.49        90    4123.01     595.83       133    4988.01     596.41       176    5558.00     619.31    \n",
      "     5    2973.01     720.13        48    3543.00     643.37        91    4138.00     595.67       134    4993.01     596.45       177    5568.01     620.68    \n",
      "     6    2993.00     718.26        49    3548.00     642.57        92    4153.01     595.42       135    5023.00     596.27       178    5573.00     621.44    \n",
      "     7    3043.01     714.02        50    3583.00     635.09        93    4173.00     595.43       136    5028.01     596.27       179    5593.01     626.08    \n",
      "     8    3048.00     713.54        51    3588.01     633.96        94    4193.00     595.23       137    5038.00     596.33       180    5598.00     625.52    \n",
      "     9    3058.01     712.50        52    3593.00     632.21        95    4213.01     595.16       138    5043.01     596.21       181    5613.00     622.46    \n",
      "    10    3073.00     710.80        53    3603.01     628.48        96    4228.00     595.37       139    5058.00     596.27       182    5618.01     621.87    \n",
      "    11    3138.00     702.91        54    3608.00     627.07        97    4248.01     595.49       140    5068.00     596.21       183    5621.80     622.09    \n",
      "    12    3143.01     702.26        55    3618.00     624.35        98    4253.00     595.49       141    5078.01     596.20       184    5633.00     622.74    \n",
      "    13    3173.01     697.98        56    3628.00     621.77        99    4338.00     594.74       142    5083.01     596.11       185    5638.00     623.47    \n",
      "    14    3188.01     695.76        57    3633.01     619.62       100    4353.01     594.97       143    5113.00     596.25       186    5658.00     626.20    \n",
      "    15    3193.00     695.11        58    3643.00     614.77       101    4358.01     595.01       144    5128.00     596.42       187    5663.01     626.80    \n",
      "    16    3198.00     694.58        59    3648.01     612.91       102    4378.00     595.01       145    5148.00     596.43       188    5688.01     629.30    \n",
      "    17    3218.00     692.83        60    3658.00     610.30       103    4393.01     595.32       146    5158.01     596.75       189    5693.00     629.85    \n",
      "    18    3223.00     692.36        61    3663.01     609.08       104    4398.00     595.37       147    5163.00     596.87       190    5738.01     635.04    \n",
      "    19    3228.01     691.82        62    3673.01     607.20       105    4413.01     595.62       148    5168.01     596.73       191    5743.00     635.65    \n",
      "    20    3243.01     687.03        63    3678.00     606.06       106    4433.00     595.69       149    5178.01     596.56       192    5803.00     643.31    \n",
      "    21    3248.00     685.36        64    3683.00     604.84       107    4443.01     595.64       150    5183.00     596.30       193    5818.00     645.33    \n",
      "    22    3253.00     685.27        65    3693.01     602.95       108    4448.01     595.65       151    5188.00     595.56       194    5823.01     645.90    \n",
      "    23    3258.01     685.35        66    3698.01     601.78       109    4468.01     595.77       152    5198.00     593.12       195    5838.00     647.51    \n",
      "    24    3263.01     685.23        67    3713.00     599.83       110    4483.01     595.77       153    5203.01     592.67       196    5843.00     648.08    \n",
      "    25    3268.01     684.51        68    3718.01     599.13       111    4503.00     595.88       154    5213.00     592.56       197    5958.00     662.22    \n",
      "    26    3273.00     683.50        69    3733.00     597.40       112    4568.01     595.65       155    5218.01     592.26       198    6013.00     669.66    \n",
      "    27    3293.01     680.73        70    3738.00     596.89       113    4583.01     595.73       156    5223.00     592.43       199    6063.01     676.81    \n",
      "    28    3298.00     679.72        71    3743.00     596.52       114    4618.01     595.73       157    5228.01     592.80       200    6108.01     682.75    \n",
      "    29    3323.00     674.19        72    3748.01     596.55       115    4633.00     595.97       158    5233.00     593.14       201    6113.01     682.85    \n",
      "    30    3325.81     673.45        73    3753.01     596.55       116    4683.01     596.27       159    5243.00     593.13       202    6118.00     683.10    \n",
      "    31    3328.01     672.87        74    3758.00     596.19       117    4713.00     595.88       160    5248.00     593.06       203    6143.00     682.88    \n",
      "    32    3333.00     670.34        75    3773.00     596.11       118    4718.00     595.84       161    5253.01     592.80       204    6153.00     682.88    \n",
      "    33    3348.00     665.16        76    3778.01     596.15       119    4733.01     595.91       162    5263.01     591.91       205    6158.01     682.36    \n",
      "    34    3353.01     664.77        77    3793.00     596.38       120    4738.00     595.87       163    5268.00     591.63       206    6168.00     680.50    \n",
      "    35    3378.01     665.10        78    3813.01     596.47       121    4763.00     595.92       164    5278.01     591.23       207    6173.01     680.05    \n",
      "    36    3383.00     665.04        79    3863.01     595.98       122    4783.01     595.83       165    5283.00     591.16       208    6178.00     681.00    \n",
      "    37    3403.01     661.58        80    3878.00     596.06       123    4803.01     595.97       166    5293.00     590.94       209    6193.00     686.31    \n",
      "    38    3408.01     660.69        81    3883.00     596.06       124    4813.01     595.88       167    5298.00     590.88       210    6198.01     686.58    \n",
      "    39    3428.00     656.99        82    3898.01     595.98       125    4818.01     595.87       168    5313.01     591.15       211    6208.21     687.08    \n",
      "    40    3433.01     656.47        83    3918.00     595.97       126    4858.00     596.07       169    5338.01     591.32    \n",
      "    41    3463.01     653.74        84    3933.00     596.14       127    4868.00     596.07       170    5343.00     591.38    \n",
      "    42    3468.01     653.26        85    3973.00     596.34       128    4888.00     596.27       171    5348.00     591.87    \n",
      "    43    3488.01     649.73        86    4018.00     596.05       129    4903.01     596.28       172    5508.01     612.24    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 72:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2000372 321187, 2004731.96 318266.04, 2005531.35 317454.89)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     664.00        46    3385.01     630.12        91    4230.00     595.19       136    5255.00     594.58       181    5820.00     627.84    \n",
      "     2     682.00     626.00        47    3390.00     630.89        92    4245.00     595.05       137    5260.00     594.36       182    5825.00     628.62    \n",
      "     3    2100.00     610.00        48    3395.00     631.12        93    4270.00     595.03       138    5275.01     592.17       183    5830.00     629.24    \n",
      "     4    2850.00     660.25        49    3400.00     631.21        94    4290.00     595.20       139    5280.01     591.50       184    5855.00     628.52    \n",
      "     5    2885.00     658.51        50    3415.00     631.36        95    4305.00     595.20       140    5295.00     590.48       185    5855.97     628.46    \n",
      "     6    2890.00     658.39        51    3420.00     631.38        96    4320.00     595.41       141    5300.00     589.86       186    5860.00     628.21    \n",
      "     7    2939.99     658.47        52    3425.00     630.03        97    4370.01     594.99       142    5320.00     589.21       187    5870.00     628.34    \n",
      "     8    2950.00     658.56        53    3435.00     626.91        98    4390.00     594.68       143    5325.00     589.08       188    5880.00     628.55    \n",
      "     9    2975.00     659.83        54    3440.00     624.72        99    4395.00     594.72       144    5330.00     589.09       189    5885.00     628.72    \n",
      "    10    2980.00     659.96        55    3445.00     622.43       100    4410.00     594.94       145    5370.00     589.02       190    5890.00     628.97    \n",
      "    11    3005.00     660.44        56    3450.00     621.06       101    4415.00     594.96       146    5385.00     589.09       191    5900.00     629.26    \n",
      "    12    3015.00     660.74        57    3480.00     618.40       102    4420.00     594.94       147    5390.00     589.22       192    5905.00     629.63    \n",
      "    13    3020.00     660.78        58    3485.00     618.20       103    4435.00     594.74       148    5405.00     590.29       193    5910.00     630.12    \n",
      "    14    3040.00     660.05        59    3700.00     597.55       104    4440.00     594.70       149    5410.00     590.49       194    5935.00     632.19    \n",
      "    15    3045.00     659.74        60    3705.00     597.50       105    4465.00     594.92       150    5415.00     591.30       195    5940.00     632.65    \n",
      "    16    3060.00     658.56        61    3710.00     597.50       106    4560.01     594.62       151    5429.99     595.33       196    5985.00     635.77    \n",
      "    17    3080.00     657.14        62    3715.00     597.43       107    4615.00     594.89       152    5434.99     596.36       197    6025.00     639.07    \n",
      "    18    3085.00     656.51        63    3725.00     597.11       108    4635.00     594.70       153    5450.00     598.34       198    6030.00     639.60    \n",
      "    19    3100.00     654.55        64    3730.00     596.98       109    4680.00     594.48       154    5455.00     599.98       199    6050.00     643.16    \n",
      "    20    3125.00     652.43        65    3740.00     596.94       110    4705.00     594.76       155    5470.00     600.68       200    6055.00     643.99    \n",
      "    21    3145.01     650.48        66    3745.01     596.84       111    4725.00     594.84       156    5475.00     601.40       201    6070.00     645.91    \n",
      "    22    3155.01     649.57        67    3750.00     596.68       112    4745.01     594.73       157    5495.00     604.36       202    6080.00     647.10    \n",
      "    23    3190.00     646.00        68    3755.01     596.59       113    4835.00     594.92       158    5500.00     604.59       203    6110.00     650.33    \n",
      "    24    3195.00     645.15        69    3760.01     596.60       114    4865.00     594.85       159    5520.00     607.92       204    6120.00     651.48    \n",
      "    25    3200.00     644.02        70    3780.00     596.87       115    4885.00     594.91       160    5570.00     610.47       205    6125.00     651.98    \n",
      "    26    3220.00     639.87        71    3800.01     596.97       116    4905.00     594.78       161    5580.00     611.06       206    6140.00     653.34    \n",
      "    27    3225.00     638.78        72    3805.00     596.96       117    4910.00     594.88       162    5585.00     611.38       207    6154.99     654.59    \n",
      "    28    3230.00     638.78        73    3825.00     596.65       118    4930.00     594.53       163    5600.00     612.53       208    6160.00     655.04    \n",
      "    29    3270.00     639.99        74    3830.00     596.60       119    4985.01     594.10       164    5615.00     613.51       209    6180.00     657.21    \n",
      "    30    3275.00     639.61        75    3845.00     596.58       120    5015.00     593.99       165    5625.00     614.10       210    6185.00     657.32    \n",
      "    31    3280.00     638.45        76    3880.00     596.31       121    5040.00     594.21       166    5635.00     614.26       211    6190.00     657.30    \n",
      "    32    3285.00     637.25        77    3885.00     596.34       122    5055.00     594.54       167    5640.00     614.38       212    6200.00     657.15    \n",
      "    33    3290.00     636.12        78    3935.00     596.07       123    5080.00     594.91       168    5670.00     615.83       213    6205.00     657.33    \n",
      "    34    3295.00     635.25        79    3960.01     596.07       124    5105.00     595.04       169    5680.01     616.39       214    6220.00     658.91    \n",
      "    35    3300.00     634.45        80    3980.00     595.94       125    5125.00     595.04       170    5685.00     616.64       215    6225.00     660.09    \n",
      "    36    3305.00     634.02        81    4010.00     595.95       126    5130.00     595.01       171    5695.00     617.07       216    6230.00     661.51    \n",
      "    37    3310.00     633.68        82    4030.00     595.80       127    5145.01     594.79       172    5709.99     617.93       217    6260.00     670.94    \n",
      "    38    3330.00     632.52        83    4065.00     595.71       128    5150.00     594.79       173    5720.00     618.61       218    6264.99     672.68    \n",
      "    39    3335.00     631.89        84    4080.00     595.77       129    5170.01     594.62       174    5735.00     619.73       219    6290.00     682.01    \n",
      "    40    3345.01     630.48        85    4085.00     595.70       130    5175.00     594.66       175    5755.00     620.66       220    6295.00     682.88    \n",
      "    41    3350.00     629.86        86    4120.00     595.67       131    5215.00     594.55       176    5760.00     620.79       221    6300.00     682.88    \n",
      "    42    3363.17     628.96        87    4145.01     595.48       132    5220.00     594.47       177    5765.00     621.10       222    6305.00     682.79    \n",
      "    43    3370.01     628.50        88    4150.00     595.51       133    5223.62     594.52       178    5770.00     621.51       223    6340.00     675.96    \n",
      "    44    3375.00     628.72        89    4210.00     595.40       134    5235.01     594.67       179    5795.00     624.39       224    6345.00     676.11    \n",
      "    45    3380.00     629.32        90    4225.00     595.21       135    5240.00     594.71       180    5800.00     625.05       225    6362.47     677.71    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 73:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2001392 322151, 2006207.31 318083.83)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     674.00        53    3385.00     619.08       105    4340.01     594.17       157    5105.01     594.02       209    5690.01     615.84    \n",
      "     2    1310.00     622.00        54    3390.00     618.65       106    4350.00     594.08       158    5110.00     593.86       210    5695.00     616.02    \n",
      "     3    1840.00     620.00        55    3400.00     618.39       107    4440.01     594.04       159    5125.01     594.00       211    5705.01     616.55    \n",
      "     4    2740.00     719.29        56    3405.00     618.02       108    4445.00     594.01       160    5130.01     593.64       212    5730.01     618.01    \n",
      "     5    2745.01     719.69        57    3450.00     614.42       109    4465.01     593.96       161    5145.01     593.71       213    5740.01     618.68    \n",
      "     6    2765.00     721.48        58    3485.00     612.03       110    4480.01     594.06       162    5150.00     593.00       214    5745.01     618.84    \n",
      "     7    2770.00     721.77        59    3490.01     611.95       111    4500.00     593.96       163    5155.01     592.56       215    5750.00     619.20    \n",
      "     8    2775.01     721.97        60    3500.01     611.90       112    4530.00     594.06       164    5165.01     592.13       216    5765.00     620.43    \n",
      "     9    2805.00     724.53        61    3505.01     611.83       113    4570.01     593.99       165    5170.01     591.53       217    5770.01     620.74    \n",
      "    10    2810.00     725.00        62    3510.00     611.57       114    4580.01     594.04       166    5180.01     589.92       218    5775.00     621.19    \n",
      "    11    2815.01     725.55        63    3535.01     609.92       115    4585.01     594.04       167    5185.01     589.40       219    5785.01     622.23    \n",
      "    12    2820.00     725.91        64    3665.00     595.67       116    4590.00     594.01       168    5190.00     589.32       220    5800.00     623.97    \n",
      "    13    2835.00     722.57        65    3670.00     595.45       117    4600.01     594.01       169    5205.00     589.32       221    5805.00     624.61    \n",
      "    14    2875.00     713.36        66    3675.00     595.27       118    4610.01     594.06       170    5210.01     589.24       222    5810.01     625.34    \n",
      "    15    2880.00     712.67        67    3685.00     595.21       119    4615.00     594.05       171    5230.00     589.37       223    5820.00     626.75    \n",
      "    16    2925.00     707.50        68    3695.00     594.88       120    4635.01     593.93       172    5260.00     589.28       224    5825.01     627.50    \n",
      "    17    2930.00     706.96        69    3705.00     594.82       121    4665.01     593.86       173    5280.00     589.01       225    5830.00     627.77    \n",
      "    18    2940.00     705.97        70    3715.00     594.69       122    4675.01     593.91       174    5285.00     589.33       226    5840.00     627.37    \n",
      "    19    2945.01     705.58        71    3755.01     594.51       123    4685.00     593.73       175    5290.01     590.06       227    5845.00     627.13    \n",
      "    20    2995.00     703.77        72    3765.00     594.56       124    4720.01     593.85       176    5300.00     589.95       228    5855.00     626.10    \n",
      "    21    3020.00     703.12        73    3785.01     594.59       125    4730.00     593.80       177    5305.01     590.11       229    5860.00     625.80    \n",
      "    22    3065.00     701.58        74    3795.01     594.54       126    4740.00     593.67       178    5310.00     592.93       230    5865.01     625.97    \n",
      "    23    3070.01     701.38        75    3805.00     594.59       127    4750.00     593.58       179    5315.00     593.99       231    5875.39     626.41    \n",
      "    24    3075.00     700.71        76    3855.01     594.61       128    4755.00     593.50       180    5330.00     594.07       232    5895.00     627.24    \n",
      "    25    3110.01     694.91        77    3865.01     594.56       129    4785.00     592.73       181    5335.00     594.88       233    5940.00     629.91    \n",
      "    26    3120.00     693.43        78    3875.00     594.59       130    4790.00     592.66       182    5345.00     596.55       234    5945.00     630.52    \n",
      "    27    3125.00     692.63        79    3885.00     594.54       131    4795.00     592.63       183    5350.00     597.10       235    5950.00     631.22    \n",
      "    28    3155.00     687.05        80    3915.00     594.58       132    4805.00     592.40       184    5355.00     597.24       236    6005.01     639.44    \n",
      "    29    3160.00     686.29        81    3925.00     594.71       133    4810.00     592.47       185    5360.00     597.47       237    6010.01     640.05    \n",
      "    30    3165.00     685.62        82    3945.00     594.46       134    4815.00     593.10       186    5375.00     598.42       238    6030.00     642.02    \n",
      "    31    3195.00     677.30        83    3995.00     594.54       135    4820.00     593.20       187    5380.01     600.07       239    6035.01     642.79    \n",
      "    32    3200.01     674.78        84    4025.01     594.44       136    4825.01     593.20       188    5390.00     604.23       240    6055.00     646.26    \n",
      "    33    3250.01     648.67        85    4045.00     594.53       137    4835.01     593.11       189    5395.01     605.90       241    6060.01     647.07    \n",
      "    34    3255.01     646.49        86    4055.01     594.42       138    4850.01     593.16       190    5400.00     606.15       242    6085.00     649.38    \n",
      "    35    3275.00     638.22        87    4070.00     594.34       139    4860.01     593.05       191    5415.00     607.03       243    6090.01     649.94    \n",
      "    36    3280.01     636.05        88    4075.01     594.28       140    4865.01     593.06       192    5420.01     607.23       244    6100.00     651.28    \n",
      "    37    3283.13     634.62        89    4085.00     594.22       141    4875.01     593.24       193    5440.00     607.93       245    6115.00     653.19    \n",
      "    38    3285.00     633.76        90    4095.01     594.25       142    4880.01     593.27       194    5445.01     608.08       246    6120.00     653.88    \n",
      "    39    3290.01     631.87        91    4105.01     594.20       143    4885.01     593.26       195    5550.00     612.13       247    6135.00     656.28    \n",
      "    40    3295.01     631.97        92    4125.00     594.19       144    4900.01     593.44       196    5555.00     612.36       248    6140.00     657.50    \n",
      "    41    3300.00     632.02        93    4130.01     594.16       145    4905.01     593.44       197    5565.00     613.07       249    6190.00     670.18    \n",
      "    42    3305.01     631.99        94    4145.01     594.17       146    4920.01     593.57       198    5570.01     613.32       250    6195.00     671.97    \n",
      "    43    3310.01     631.90        95    4150.00     594.08       147    4930.01     593.69       199    5580.00     613.75       251    6220.00     682.20    \n",
      "    44    3315.00     631.29        96    4155.00     594.08       148    4955.01     593.87       200    5585.01     613.74       252    6225.00     682.88    \n",
      "    45    3330.00     627.37        97    4160.01     594.14       149    4970.01     593.81       201    5605.00     613.61       253    6230.00     682.88    \n",
      "    46    3335.01     626.22        98    4180.00     594.19       150    4975.00     593.87       202    5620.00     613.59       254    6235.00     682.64    \n",
      "    47    3340.00     625.48        99    4190.00     594.14       151    4980.00     593.90       203    5630.00     613.52       255    6260.01     677.05    \n",
      "    48    3345.00     624.49       100    4220.00     594.19       152    4995.00     593.76       204    5640.00     613.58       256    6265.00     675.89    \n",
      "    49    3355.00     622.25       101    4230.00     594.14       153    5040.01     593.96       205    5645.00     613.75       257    6270.00     675.37    \n",
      "    50    3360.01     621.21       102    4280.01     594.13       154    5050.00     594.04       206    5675.00     615.23       258    6285.22     676.59    \n",
      "    51    3370.00     620.43       103    4300.01     594.03       155    5090.01     593.98       207    5680.00     615.54    \n",
      "    52    3375.01     620.00       104    4310.00     594.13       156    5100.00     594.03       208    5685.00     615.74    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 74:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2002317 323046, 2007006.71 318789.17)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     688.00        47    3465.00     637.70        93    4270.01     592.15       139    5145.00     593.06       185    5810.01     607.94    \n",
      "     2    1560.00     622.00        48    3505.01     631.23        94    4275.00     592.12       140    5165.01     593.06       186    5815.00     608.60    \n",
      "     3    1854.00     622.00        49    3510.00     630.27        95    4345.00     592.40       141    5185.00     593.25       187    5830.00     610.37    \n",
      "     4    2680.00     675.52        50    3515.00     629.16        96    4350.00     592.39       142    5190.00     593.14       188    5835.00     611.07    \n",
      "     5    2700.00     676.11        51    3535.01     624.43        97    4370.00     592.55       143    5205.01     592.58       189    5850.01     613.44    \n",
      "     6    2705.00     676.22        52    3540.00     623.47        98    4375.00     592.55       144    5210.00     592.43       190    5855.01     615.00    \n",
      "     7    2750.00     676.80        53    3550.00     621.78        99    4395.00     592.46       145    5250.00     590.76       191    5870.01     620.11    \n",
      "     8    2805.00     677.92        54    3555.00     620.79       100    4420.00     592.68       146    5270.00     589.08       192    5875.00     621.44    \n",
      "     9    2810.00     678.06        55    3560.00     619.59       101    4440.00     592.69       147    5275.01     588.83       193    5900.01     622.77    \n",
      "    10    2875.00     680.46        56    3575.01     616.35       102    4465.00     592.90       148    5295.01     588.61       194    5904.47     622.97    \n",
      "    11    2880.00     680.72        57    3580.00     615.62       103    4480.00     592.90       149    5315.00     589.27       195    5905.00     622.99    \n",
      "    12    2920.01     682.47        58    3585.00     614.80       104    4500.00     593.08       150    5320.00     589.92       196    5920.00     623.90    \n",
      "    13    2955.00     687.03        59    3600.00     612.00       105    4525.00     593.10       151    5325.00     590.92       197    5925.01     624.29    \n",
      "    14    2985.00     690.53        60    3605.01     611.17       106    4565.00     593.35       152    5330.00     591.49       198    5945.00     626.23    \n",
      "    15    2990.01     691.03        61    3610.00     610.80       107    4585.00     593.27       153    5335.00     591.02       199    5980.00     629.94    \n",
      "    16    3030.01     697.63        62    3615.00     610.49       108    4605.00     593.34       154    5340.01     590.62       200    6015.01     635.41    \n",
      "    17    3050.00     701.83        63    3620.00     610.40       109    4610.00     593.32       155    5350.00     590.84       201    6050.00     640.17    \n",
      "    18    3055.00     702.78        64    3625.01     610.16       110    4615.00     593.19       156    5355.00     591.02       202    6060.01     641.42    \n",
      "    19    3090.00     708.94        65    3645.00     607.07       111    4635.00     592.74       157    5400.01     593.06       203    6065.01     642.19    \n",
      "    20    3095.01     709.27        66    3650.00     606.64       112    4640.00     592.78       158    5405.00     593.18       204    6070.00     642.99    \n",
      "    21    3110.00     710.09        67    3660.00     605.91       113    4660.01     592.43       159    5425.00     592.91       205    6110.00     649.71    \n",
      "    22    3115.00     709.67        68    3670.00     605.10       114    4705.00     592.06       160    5475.00     592.89       206    6115.01     650.52    \n",
      "    23    3130.00     707.29        69    3675.00     604.87       115    4790.00     592.07       161    5490.00     592.82       207    6170.00     657.56    \n",
      "    24    3135.00     706.46        70    3685.00     604.61       116    4810.00     592.34       162    5510.00     592.92       208    6180.00     659.14    \n",
      "    25    3140.00     705.48        71    3690.00     604.04       117    4855.01     592.73       163    5515.01     592.92       209    6215.00     664.51    \n",
      "    26    3145.00     704.40        72    3700.00     602.68       118    4860.00     592.72       164    5535.00     592.46       210    6220.01     665.88    \n",
      "    27    3160.00     701.07        73    3705.00     602.03       119    4880.00     592.81       165    5540.00     591.70       211    6230.01     669.14    \n",
      "    28    3165.01     699.77        74    3720.00     601.68       120    4885.01     592.76       166    5555.00     589.00       212    6250.01     676.56    \n",
      "    29    3190.00     692.72        75    3735.00     601.59       121    4905.00     592.39       167    5560.00     588.41       213    6260.01     680.06    \n",
      "    30    3195.01     691.45        76    3740.01     601.05       122    4920.00     591.88       168    5565.00     588.50       214    6265.01     681.65    \n",
      "    31    3230.00     683.39        77    3815.00     592.15       123    4925.00     591.78       169    5585.01     588.24       215    6270.01     681.45    \n",
      "    32    3235.01     681.49        78    3820.00     591.76       124    4945.00     591.53       170    5590.00     588.34       216    6275.00     680.90    \n",
      "    33    3240.00     680.34        79    3865.00     591.37       125    4950.00     591.57       171    5610.00     588.50       217    6285.00     679.89    \n",
      "    34    3245.00     679.91        80    3885.00     591.45       126    4965.00     591.57       172    5615.01     588.70       218    6290.01     679.45    \n",
      "    35    3250.00     679.01        81    3930.00     591.27       127    4970.01     591.61       173    5635.01     589.00       219    6300.01     679.27    \n",
      "    36    3255.00     677.66        82    3950.00     591.28       128    4990.01     591.86       174    5660.00     589.78       220    6305.01     679.14    \n",
      "    37    3270.00     673.09        83    3955.00     591.33       129    5010.00     591.94       175    5665.01     590.31       221    6310.01     678.94    \n",
      "    38    3270.64     673.01        84    3970.00     591.65       130    5030.01     592.13       176    5680.01     592.56       222    6315.00     678.95    \n",
      "    39    3275.00     672.45        85    3975.01     591.72       131    5050.00     592.71       177    5685.01     593.28       223    6335.01     681.16    \n",
      "    40    3310.00     672.97        86    3990.00     591.72       132    5055.00     592.82       178    5720.01     596.35       224    6340.00     680.14    \n",
      "    41    3315.00     672.08        87    3995.00     591.76       133    5075.00     593.39       179    5725.00     597.02       225    6345.00     678.74    \n",
      "    42    3370.01     656.20        88    4065.01     591.76       134    5095.00     593.68       180    5740.00     598.37       226    6350.85     678.50    \n",
      "    43    3375.00     655.03        89    4090.00     591.94       135    5100.00     593.71       181    5745.00     598.88    \n",
      "    44    3380.00     653.95        90    4135.00     592.02       136    5120.00     593.44       182    5760.00     600.52    \n",
      "    45    3435.01     643.00        91    4155.00     592.19       137    5125.00     593.40       183    5785.00     604.21    \n",
      "    46    3440.01     642.04        92    4180.01     592.19       138    5140.00     593.11       184    5790.01     605.09    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 75:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2003757.3 323220.8, 2007676.78 319423.98)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     683.00        56    2620.01     642.10       111    3330.00     591.12       166    4150.00     592.18       221    4815.00     603.67    \n",
      "     2     120.00     652.00        57    2690.00     632.36       112    3335.00     591.02       167    4165.00     593.38       222    4820.00     604.01    \n",
      "     3     530.00     632.00        58    2695.01     631.83       113    3340.00     590.99       168    4170.00     593.67       223    4840.00     605.78    \n",
      "     4    1080.00     632.00        59    2705.00     631.05       114    3380.00     590.93       169    4175.01     593.32       224    4845.00     606.10    \n",
      "     5    1680.00     662.52        60    2710.01     630.01       115    3390.01     590.97       170    4190.01     591.66       225    4875.00     607.50    \n",
      "     6    1695.00     663.32        61    2715.01     628.70       116    3445.00     590.82       171    4195.00     591.50       226    4880.00     607.76    \n",
      "     7    1735.00     665.30        62    2720.00     627.96       117    3460.00     590.68       172    4210.00     592.06       227    4910.00     610.87    \n",
      "     8    1945.01     678.91        63    2735.00     626.68       118    3465.00     590.68       173    4215.00     591.99       228    4915.00     611.28    \n",
      "     9    1955.01     679.65        64    2740.01     626.18       119    3470.00     590.71       174    4220.01     591.44       229    4925.00     611.60    \n",
      "    10    1960.01     680.12        65    2755.01     623.87       120    3475.00     590.71       175    4230.00     590.18       230    4930.00     612.15    \n",
      "    11    1970.01     681.11        66    2760.01     623.32       121    3490.00     590.56       176    4235.00     589.70       231    4940.00     613.43    \n",
      "    12    1975.01     681.52        67    2770.01     622.34       122    3495.00     590.44       177    4240.00     589.29       232    4945.01     613.65    \n",
      "    13    2015.00     682.34        68    2780.00     621.44       123    3510.00     590.78       178    4255.00     587.56       233    4950.00     613.81    \n",
      "    14    2030.00     682.77        69    2785.00     620.93       124    3515.01     590.60       179    4260.00     587.48       234    4980.00     616.47    \n",
      "    15    2055.00     683.24        70    2790.01     620.28       125    3540.00     590.40       180    4265.00     587.37       235    4985.00     617.44    \n",
      "    16    2060.00     683.55        71    2810.00     617.79       126    3560.01     590.39       181    4275.00     587.02       236    4990.01     618.24    \n",
      "    17    2065.00     683.89        72    2815.00     616.99       127    3575.01     590.25       182    4280.00     586.91       237    4995.00     619.27    \n",
      "    18    2150.00     689.34        73    2820.01     616.24       128    3580.00     590.32       183    4300.01     587.00       238    5000.00     620.92    \n",
      "    19    2185.00     691.88        74    2830.00     614.81       129    3595.00     590.32       184    4305.00     587.05       239    5005.01     621.66    \n",
      "    20    2190.00     692.18        75    2835.00     614.27       130    3600.00     590.37       185    4320.00     586.93       240    5010.00     622.49    \n",
      "    21    2220.00     692.72        76    2845.00     613.47       131    3610.01     590.41       186    4325.00     586.92       241    5015.00     623.00    \n",
      "    22    2235.00     693.22        77    2850.00     612.83       132    3630.00     590.62       187    4380.00     586.28       242    5023.21     623.66    \n",
      "    23    2240.00     693.35        78    2860.00     611.48       133    3635.00     590.77       188    4395.01     585.96       243    5035.01     624.60    \n",
      "    24    2265.00     692.69        79    2865.00     610.87       134    3650.00     590.77       189    4400.00     585.88       244    5040.00     625.42    \n",
      "    25    2270.00     692.53        80    2870.00     610.37       135    3655.01     590.84       190    4405.01     585.77       245    5050.01     627.36    \n",
      "    26    2285.00     691.77        81    2875.00     609.97       136    3675.00     591.32       191    4410.01     585.14       246    5055.01     628.25    \n",
      "    27    2305.00     690.38        82    2880.00     609.66       137    3680.00     591.39       192    4425.01     585.06       247    5065.01     629.89    \n",
      "    28    2325.00     687.58        83    2885.00     609.42       138    3685.00     591.21       193    4430.00     585.13       248    5075.00     631.60    \n",
      "    29    2330.00     686.76        84    2890.00     609.26       139    3695.00     590.80       194    4435.01     585.31       249    5110.00     637.15    \n",
      "    30    2340.00     685.74        85    2895.00     608.90       140    3700.00     590.66       195    4450.00     585.43       250    5115.01     637.85    \n",
      "    31    2345.00     685.11        86    3030.00     594.10       141    3715.00     590.59       196    4455.01     585.76       251    5170.00     644.99    \n",
      "    32    2348.57     684.61        87    3035.00     593.69       142    3720.00     590.67       197    4460.00     585.90       252    5175.01     645.81    \n",
      "    33    2355.00     683.71        88    3040.00     593.66       143    3735.00     591.94       198    4475.00     586.03       253    5200.00     650.11    \n",
      "    34    2360.00     683.10        89    3055.00     593.39       144    3740.00     592.13       199    4485.01     585.91       254    5205.01     650.90    \n",
      "    35    2370.01     683.30        90    3060.00     593.45       145    3745.00     592.15       200    4500.01     585.86       255    5230.00     654.59    \n",
      "    36    2385.01     683.00        91    3065.00     593.43       146    3760.00     592.50       201    4505.01     585.81       256    5235.01     655.39    \n",
      "    37    2390.00     682.37        92    3085.00     593.24       147    3800.00     592.26       202    4520.01     588.48       257    5270.01     661.80    \n",
      "    38    2420.00     677.78        93    3100.00     593.17       148    3815.00     592.26       203    4525.00     589.12       258    5295.00     665.98    \n",
      "    39    2425.00     676.14        94    3105.00     593.29       149    3850.00     591.86       204    4530.00     589.42       259    5300.01     666.79    \n",
      "    40    2440.00     672.31        95    3120.00     593.36       150    3855.00     591.83       205    4545.00     592.78       260    5320.01     669.70    \n",
      "    41    2445.00     670.91        96    3125.00     593.41       151    3875.00     591.89       206    4550.00     593.48       261    5360.01     674.93    \n",
      "    42    2460.00     666.47        97    3140.00     593.14       152    3905.00     591.86       207    4565.00     594.37       262    5400.00     680.52    \n",
      "    43    2465.00     665.03        98    3145.00     593.11       153    3925.00     592.03       208    4570.00     594.47       263    5405.00     681.02    \n",
      "    44    2470.00     663.94        99    3150.00     592.85       154    3930.00     592.04       209    4660.00     595.00       264    5420.00     682.41    \n",
      "    45    2475.00     663.17       100    3160.00     592.22       155    3970.00     591.98       210    4690.00     595.40       265    5425.00     682.84    \n",
      "    46    2515.00     658.20       101    3165.00     592.01       156    4040.00     592.08       211    4695.00     595.41       266    5435.00     682.84    \n",
      "    47    2520.00     657.10       102    3170.00     591.94       157    4080.00     591.77       212    4700.00     594.67       267    5440.00     683.28    \n",
      "    48    2530.00     652.28       103    3185.00     591.67       158    4085.00     591.70       213    4715.00     594.97       268    5445.00     684.10    \n",
      "    49    2535.00     650.68       104    3200.00     591.53       159    4095.00     591.51       214    4720.00     595.02       269    5450.00     684.78    \n",
      "    50    2540.01     650.59       105    3210.00     591.58       160    4100.00     591.45       215    4725.00     595.34       270    5465.00     685.52    \n",
      "    51    2550.00     650.49       106    3215.00     591.56       161    4105.00     591.44       216    4770.00     601.46       271    5470.00     686.42    \n",
      "    52    2555.01     650.30       107    3225.00     591.46       162    4120.00     591.03       217    4775.00     602.00       272    5480.00     689.72    \n",
      "    53    2565.00     649.17       108    3250.00     591.37       163    4125.00     591.05       218    4780.00     602.46       273    5489.49     690.87    \n",
      "    54    2570.01     648.51       109    3275.00     591.40       164    4140.00     592.09       219    4785.00     602.65    \n",
      "    55    2580.00     647.09       110    3280.01     591.35       165    4145.00     592.20       220    4800.00     603.09    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 76:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2003806.8 323246.23, 2005413.34 322734.52, 2008364.61 319652.35)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     682.78        77    1416.00     638.68       153    2811.01     641.87       229    4095.00     606.84       305    4806.00     612.22    \n",
      "     2      12.01     682.78        78    1419.00     638.56       154    2814.00     641.65       230    4107.01     607.13       306    4818.01     612.19    \n",
      "     3      15.01     682.33        79    1437.00     638.00       155    2823.01     640.93       231    4110.01     607.17       307    4830.00     612.22    \n",
      "     4      48.00     673.51        80    1440.00     637.94       156    2826.00     640.74       232    4131.00     607.30       308    4845.00     612.17    \n",
      "     5      75.01     666.69        81    1461.00     639.32       157    2859.01     639.24       233    4134.00     607.34       309    4848.00     612.20    \n",
      "     6      78.00     666.03        82    1464.00     639.37       158    2871.00     638.75       234    4155.00     607.33       310    4857.00     612.35    \n",
      "     7     102.00     661.46        83    1470.01     639.42       159    2874.00     638.52       235    4170.00     608.29       311    4863.00     612.38    \n",
      "     8     105.00     660.95        84    1524.00     640.37       160    2877.01     638.35       236    4185.00     608.69       312    4875.00     612.39    \n",
      "     9     120.00     658.49        85    1527.01     640.40       161    2880.00     638.27       237    4191.00     608.75       313    4902.00     612.22    \n",
      "    10     123.00     657.93        86    1602.00     640.72       162    2928.00     635.48       238    4206.00     609.03       314    4914.00     612.07    \n",
      "    11     135.01     655.49        87    1644.00     641.05       163    2937.00     635.44       239    4209.00     609.06       315    4926.01     612.18    \n",
      "    12     138.00     655.00        88    1686.07     641.69       164    2940.01     635.32       240    4212.00     609.11       316    4944.01     612.13    \n",
      "    13     141.00     654.94        89    1722.00     642.55       165    3021.01     631.53       241    4224.00     609.36       317    4953.00     612.22    \n",
      "    14     168.00     654.12        90    1734.00     642.93       166    3054.00     630.17       242    4227.00     609.38       318    4956.00     612.23    \n",
      "    15     171.01     653.96        91    1776.00     644.17       167    3057.00     630.10       243    4236.00     609.34       319    4965.00     612.17    \n",
      "    16     198.00     651.77        92    1779.01     644.30       168    3090.00     630.00       244    4239.00     609.36       320    4980.01     612.15    \n",
      "    17     213.00     650.71        93    1833.00     647.21       169    3093.00     629.89       245    4248.00     609.46       321    4998.00     611.93    \n",
      "    18     216.01     650.53        94    1839.00     647.42       170    3096.01     629.81       246    4251.01     609.51       322    5001.00     611.95    \n",
      "    19     246.00     649.90        95    1878.00     649.68       171    3099.00     629.81       247    4266.00     609.92       323    5007.00     612.10    \n",
      "    20     249.00     649.76        96    1887.00     650.13       172    3132.00     629.38       248    4278.00     609.91       324    5010.00     612.13    \n",
      "    21     279.00     647.46        97    1890.00     650.26       173    3162.00     629.18       249    4299.00     609.78       325    5034.00     612.23    \n",
      "    22     282.00     647.26        98    1956.00     652.16       174    3195.00     629.16       250    4302.00     609.74       326    5037.00     612.42    \n",
      "    23     288.00     647.04        99    1959.00     652.28       175    3213.00     629.24       251    4305.00     609.67       327    5148.00     621.25    \n",
      "    24     291.01     646.97       100    1968.01     652.73       176    3264.01     628.69       252    4308.01     609.56       328    5151.00     621.30    \n",
      "    25     336.01     646.12       101    2049.00     657.59       177    3279.00     628.39       253    4311.01     609.49       329    5154.00     621.32    \n",
      "    26     363.00     646.36       102    2070.00     659.10       178    3324.01     626.74       254    4323.00     609.69       330    5184.00     625.77    \n",
      "    27     393.01     646.53       103    2079.01     659.90       179    3339.01     626.38       255    4326.01     609.68       331    5208.00     628.74    \n",
      "    28     423.00     646.90       104    2091.01     660.85       180    3366.00     626.18       256    4329.01     609.58       332    5217.00     629.78    \n",
      "    29     441.00     646.93       105    2112.01     662.66       181    3384.00     625.31       257    4332.00     609.52       333    5241.00     633.61    \n",
      "    30     489.00     647.58       106    2127.00     663.68       182    3387.00     625.22       258    4344.01     609.77       334    5271.00     639.09    \n",
      "    31     495.01     647.61       107    2154.01     665.81       183    3435.01     624.57       259    4347.01     609.79       335    5274.00     639.60    \n",
      "    32     498.00     647.52       108    2157.00     666.12       184    3441.00     624.45       260    4353.00     609.61       336    5325.01     647.36    \n",
      "    33     537.00     646.89       109    2193.00     670.22       185    3516.00     623.24       261    4359.00     609.53       337    5328.00     647.85    \n",
      "    34     540.00     646.86       110    2196.00     670.60       186    3552.01     622.99       262    4374.00     609.46       338    5331.00     648.32    \n",
      "    35     597.00     646.97       111    2232.00     675.75       187    3612.00     622.26       263    4380.00     609.36       339    5337.00     649.17    \n",
      "    36     609.00     646.85       112    2235.01     676.15       188    3639.00     622.32       264    4386.00     609.32       340    5397.00     656.85    \n",
      "    37     636.01     646.43       113    2238.00     676.47       189    3720.01     622.02       265    4389.00     609.36       341    5412.00     658.84    \n",
      "    38     684.00     646.03       114    2280.01     680.53       190    3723.01     621.98       266    4401.01     609.61       342    5415.00     659.26    \n",
      "    39     699.00     646.00       115    2283.00     681.00       191    3732.01     621.71       267    4413.01     609.76       343    5427.00     661.06    \n",
      "    40     702.00     646.03       116    2295.00     683.00       192    3735.00     621.64       268    4419.01     609.73       344    5430.00     661.49    \n",
      "    41     720.00     646.42       117    2298.01     683.00       193    3753.00     621.46       269    4437.00     609.89       345    5460.00     665.10    \n",
      "    42     735.01     646.49       118    2304.00     683.00       194    3762.00     621.32       270    4443.00     609.92       346    5484.00     668.45    \n",
      "    43     756.01     646.73       119    2307.00     683.00       195    3765.00     621.04       271    4455.00     610.04       347    5487.00     668.78    \n",
      "    44     774.01     646.74       120    2313.00     683.00       196    3771.00     620.29       272    4461.00     610.05       348    5514.00     671.56    \n",
      "    45     801.00     646.88       121    2316.01     683.00       197    3774.00     620.11       273    4464.00     610.07       349    5517.00     672.04    \n",
      "    46     843.00     646.80       122    2319.01     683.00       198    3860.00     590.00       274    4497.00     610.45       350    5520.00     672.54    \n",
      "    47     870.00     646.95       123    2322.00     683.00       199    3880.00     590.00       275    4503.00     610.54       351    5523.01     673.13    \n",
      "    48     873.01     646.95       124    2325.00     683.00       200    3882.01     592.81       276    4515.00     610.58       352    5550.00     679.61    \n",
      "    49     885.00     646.83       125    2331.00     683.00       201    3897.00     599.98       277    4521.00     610.66       353    5553.00     680.35    \n",
      "    50     960.00     647.36       126    2373.01     678.82       202    3900.00     601.05       278    4524.00     610.68       354    5565.00     683.43    \n",
      "    51     975.01     647.34       127    2376.00     678.54       203    3903.01     602.17       279    4554.00     610.71       355    5568.00     683.55    \n",
      "    52    1059.00     647.82       128    2388.00     677.52       204    3918.00     608.87       280    4557.01     610.75       356    5589.00     682.85    \n",
      "    53    1080.00     647.87       129    2391.01     677.45       205    3921.01     608.95       281    4569.00     610.98       357    5592.00     682.70    \n",
      "    54    1116.00     647.65       130    2445.00     678.03       206    3924.00     609.15       282    4575.01     611.17       358    5601.00     682.18    \n",
      "    55    1119.00     647.60       131    2451.00     678.14       207    3936.00     612.86       283    4584.00     611.48       359    5604.00     682.10    \n",
      "    56    1164.00     645.72       132    2475.00     677.88       208    3939.01     613.77       284    4617.00     612.12       360    5607.00     682.10    \n",
      "    57    1167.00     645.67       133    2478.01     677.73       209    3942.00     613.80       285    4620.00     612.22       361    5609.99     681.80    \n",
      "    58    1170.01     645.64       134    2481.01     677.34       210    3945.01     613.81       286    4629.00     612.58       362    5613.00     681.22    \n",
      "    59    1173.01     645.56       135    2484.01     676.77       211    3948.00     613.79       287    4632.01     612.63       363    5616.00     680.97    \n",
      "    60    1176.00     645.39       136    2508.00     670.35       212    3951.01     613.53       288    4638.00     612.60       364    5628.00     682.08    \n",
      "    61    1197.00     643.91       137    2511.00     669.82       213    3966.00     611.28       289    4650.01     612.65       365    5631.00     682.74    \n",
      "    62    1212.00     642.72       138    2553.01     664.55       214    3969.01     611.17       290    4656.00     612.63       366    5643.00     686.04    \n",
      "    63    1218.00     642.29       139    2559.00     663.68       215    3978.01     611.19       291    4659.00     612.60       367    5646.00     687.45    \n",
      "    64    1221.00     642.09       140    2598.00     658.29       216    3981.00     611.03       292    4680.00     612.26       368    5649.00     689.05    \n",
      "    65    1236.00     641.29       141    2616.00     655.95       217    3993.00     608.49       293    4689.01     612.17       369    5652.00     690.20    \n",
      "    66    1239.00     641.16       142    2622.01     655.30       218    3996.01     607.88       294    4692.00     612.17       370    5655.00     690.86    \n",
      "    67    1248.00     641.33       143    2667.01     653.96       219    3999.00     607.87       295    4698.00     612.22       371    5658.00     691.91    \n",
      "    68    1257.00     641.23       144    2670.00     653.83       220    4002.00     607.83       296    4710.00     612.07       372    5661.00     692.11    \n",
      "    69    1287.00     641.21       145    2682.00     653.16       221    4017.01     607.39       297    4725.01     612.12       373    5697.00     693.27    \n",
      "    70    1305.00     640.99       146    2685.01     652.88       222    4020.00     607.35       298    4737.01     612.43       374    5739.00     693.67    \n",
      "    71    1341.00     640.70       147    2694.00     651.76       223    4026.01     607.31       299    4740.00     612.45       375    5742.01     693.46    \n",
      "    72    1347.00     640.63       148    2697.01     651.41       224    4041.00     606.95       300    4746.01     612.44       376    5877.00     674.60    \n",
      "    73    1350.01     640.57       149    2742.00     646.88       225    4071.01     606.63       301    4758.00     612.60       377    5880.00     674.38    \n",
      "    74    1359.00     640.34       150    2745.00     646.54       226    4074.01     606.64       302    4767.00     612.47       378    5953.35     671.29    \n",
      "    75    1407.01     639.16       151    2748.00     646.29       227    4089.01     606.78       303    4785.00     612.46    \n",
      "    76    1413.01     638.85       152    2778.01     644.01       228    4092.01     606.79       304    4800.01     612.31    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 77:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2006160.29 323021.25, 2009005.19 320117.58)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     658.99        48    1635.00     620.22        95    2020.00     607.71       142    2570.00     588.82       189    3110.00     613.04    \n",
      "     2      50.00     663.81        49    1640.00     620.17        96    2025.00     607.72       143    2575.00     588.74       190    3115.00     615.80    \n",
      "     3      54.99     664.42        50    1645.00     620.02        97    2075.00     605.59       144    2580.00     589.10       191    3120.00     616.87    \n",
      "     4     115.00     672.09        51    1649.99     618.86        98    2080.00     605.28       145    2585.00     589.53       192    3140.00     617.44    \n",
      "     5     135.00     673.50        52    1659.99     616.05        99    2089.99     604.31       146    2589.99     589.93       193    3170.00     618.79    \n",
      "     6     165.00     674.66        53    1665.00     614.82       100    2125.00     601.29       147    2615.00     589.69       194    3175.00     619.13    \n",
      "     7     205.00     675.13        54    1670.00     613.84       101    2130.00     600.78       148    2630.00     589.81       195    3180.00     619.99    \n",
      "     8     224.99     675.19        55    1675.00     612.56       102    2135.00     599.90       149    2635.00     589.90       196    3205.00     624.83    \n",
      "     9     279.99     674.69        56    1685.00     612.54       103    2140.00     598.88       150    2649.99     590.44       197    3210.00     625.85    \n",
      "    10     339.99     673.35        57    1690.00     613.42       104    2145.00     597.92       151    2654.99     590.52       198    3260.00     636.93    \n",
      "    11     385.00     673.69        58    1700.00     615.67       105    2149.99     597.04       152    2680.00     590.86       199    3265.01     637.91    \n",
      "    12     390.00     673.70        59    1705.00     617.28       106    2165.00     594.94       153    2685.00     590.87       200    3310.00     646.28    \n",
      "    13     400.00     673.88        60    1710.00     619.06       107    2170.00     594.45       154    2705.00     590.75       201    3330.00     650.70    \n",
      "    14     405.00     673.86        61    1714.99     619.28       108    2180.00     593.58       155    2710.00     590.75       202    3335.01     651.65    \n",
      "    15     409.99     673.76        62    1724.99     619.45       109    2190.00     593.20       156    2740.00     590.34       203    3365.00     657.19    \n",
      "    16     414.99     673.39        63    1730.00     619.48       110    2205.00     592.50       157    2810.00     589.95       204    3410.00     666.26    \n",
      "    17     419.99     672.82        64    1735.00     619.26       111    2224.99     592.40       158    2830.01     589.95       205    3415.00     667.06    \n",
      "    18     460.00     667.70        65    1765.00     617.48       112    2245.00     592.01       159    2865.00     590.09       206    3440.00     669.46    \n",
      "    19     515.00     660.29        66    1770.00     617.10       113    2250.00     591.96       160    2870.00     590.07       207    3445.00     670.00    \n",
      "    20     520.00     659.59        67    1774.99     616.79       114    2260.00     591.41       161    2880.00     589.97       208    3460.00     671.71    \n",
      "    21     524.99     659.05        68    1789.99     615.97       115    2265.00     591.42       162    2885.00     589.86       209    3490.00     675.54    \n",
      "    22     550.00     657.33        69    1800.00     615.49       116    2275.00     591.71       163    2900.00     589.05       210    3495.00     675.69    \n",
      "    23     589.99     652.49        70    1805.00     614.41       117    2280.00     591.96       164    2905.00     588.85       211    3500.00     675.90    \n",
      "    24     595.00     651.91        71    1815.00     611.80       118    2284.99     592.36       165    2915.00     588.87       212    3515.00     677.80    \n",
      "    25     649.99     646.15        72    1820.00     610.47       119    2289.99     592.70       166    2925.00     588.69       213    3520.00     678.76    \n",
      "    26     654.99     645.68        73    1825.00     609.10       120    2305.00     593.41       167    2930.00     588.73       214    3524.99     680.02    \n",
      "    27     670.00     644.59        74    1830.00     607.11       121    2310.00     593.45       168    2945.00     589.24       215    3529.99     680.92    \n",
      "    28     700.00     643.17        75    1854.99     595.98       122    2315.00     593.41       169    2950.00     589.23       216    3550.00     683.54    \n",
      "    29     724.99     642.48        76    1857.33     595.83       123    2325.00     593.23       170    2955.00     589.57       217    3560.00     684.94    \n",
      "    30     730.00     642.09        77    1859.99     595.66       124    2345.00     592.70       171    2960.00     590.18       218    3565.00     685.61    \n",
      "    31     760.00     639.18        78    1870.00     595.93       125    2350.00     592.06       172    2965.00     589.79       219    3600.00     675.00    \n",
      "    32     789.99     638.49        79    1875.00     595.88       126    2370.00     591.49       173    2970.00     589.88       220    3605.00     675.28    \n",
      "    33     815.00     637.99        80    1880.00     595.95       127    2375.00     591.48       174    2975.00     590.04       221    3610.00     675.69    \n",
      "    34     835.00     638.01        81    1890.00     595.78       128    2390.00     591.22       175    2980.00     590.59       222    3625.00     677.73    \n",
      "    35     950.00     636.94        82    1895.00     584.54       129    2395.00     591.19       176    2985.00     591.19       223    3630.00     678.46    \n",
      "    36    1120.00     634.92        83    1900.00     583.84       130    2400.00     591.20       177    2990.00     591.69       224    3635.00     679.30    \n",
      "    37    1124.99     634.96        84    1940.00     583.84       131    2440.00     591.04       178    3005.00     593.41       225    3640.00     679.89    \n",
      "    38    1145.00     635.54        85    1945.00     591.80       132    2475.00     590.69       179    3010.00     593.95       226    3720.00     684.07    \n",
      "    39    1149.99     635.57        86    1950.00     594.31       133    2495.00     590.73       180    3029.99     595.81       227    3725.00     684.52    \n",
      "    40    1230.00     633.93        87    1965.00     594.37       134    2500.00     590.78       181    3040.00     596.59       228    3855.00     688.73    \n",
      "    41    1250.00     633.63        88    1970.00     594.34       135    2510.00     590.77       182    3050.00     597.31       229    3860.00     688.84    \n",
      "    42    1300.00     632.63        89    1980.00     594.03       136    2515.00     590.86       183    3055.00     597.70       230    3895.00     689.17    \n",
      "    43    1385.00     629.46        90    1985.00     594.41       137    2530.00     590.69       184    3080.00     599.90       231    3900.00     688.96    \n",
      "    44    1480.00     626.96        91    1994.99     597.92       138    2535.00     590.67       185    3085.00     601.82       232    4024.99     671.53    \n",
      "    45    1495.00     626.46        92    2000.00     599.74       139    2545.00     590.76       186    3089.99     603.89       233    4029.99     671.29    \n",
      "    46    1605.00     621.63        93    2012.21     604.56       140    2550.00     590.51       187    3094.99     606.00       234    4065.07     669.81    \n",
      "    47    1615.00     621.24        94    2015.00     605.66       141    2565.00     589.18       188    3105.00     610.32    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 78:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2007012.58 323203.47, 2008117.63 321816.29, 2009081.6 320922.85)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     655.51        40     585.00     624.75        79    1345.00     606.16       118    1690.00     600.74       157    2665.01     623.16    \n",
      "     2       5.00     654.68        41     590.01     624.43        80    1350.01     606.07       119    1760.01     598.18       158    2670.01     622.81    \n",
      "     3      65.00     645.48        42     595.00     624.19        81    1355.00     605.71       120    1765.00     597.97       159    2680.00     622.81    \n",
      "     4      70.00     644.57        43     605.00     623.31        82    1370.00     605.43       121    1773.53     597.46       160    2685.00     623.45    \n",
      "     5      95.00     639.22        44     610.00     622.69        83    1395.01     604.29       122    1780.00     597.05       161    2700.00     627.29    \n",
      "     6     100.00     638.25        45     615.01     622.33        84    1400.01     604.26       123    1850.00     590.67       162    2705.01     628.48    \n",
      "     7     105.01     637.11        46     620.00     621.76        85    1405.01     603.92       124    1855.00     590.26       163    2710.00     629.39    \n",
      "     8     115.01     634.96        47     625.00     621.11        86    1430.00     598.52       125    1925.00     585.79       164    2745.00     632.93    \n",
      "     9     120.00     634.04        48     630.00     620.90        87    1432.15     598.31       126    1930.00     585.22       165    2750.00     633.52    \n",
      "    10     135.00     631.99        49     635.00     620.79        88    1435.00     598.04       127    1935.01     584.12       166    2765.00     635.43    \n",
      "    11     140.01     631.24        50     645.01     620.67        89    1450.00     597.73       128    1940.00     583.25       167    2770.00     636.01    \n",
      "    12     145.01     630.23        51     690.00     619.70        90    1455.01     595.93       129    2200.01     583.28       168    2790.01     636.76    \n",
      "    13     150.00     629.37        52     695.00     619.69        91    1460.01     592.26       130    2205.00     584.06       169    2805.00     640.06    \n",
      "    14     155.01     628.84        53     715.00     619.97        92    1470.01     586.85       131    2220.00     586.71       170    2810.00     641.58    \n",
      "    15     195.00     624.03        54     820.00     619.29        93    1475.00     584.65       132    2225.00     587.72       171    2815.00     643.23    \n",
      "    16     200.00     623.74        55     855.00     618.47        94    1480.01     583.47       133    2230.00     588.89       172    2820.00     644.75    \n",
      "    17     215.00     623.48        56     860.00     618.38        95    1485.00     582.15       134    2235.01     589.04       173    2835.00     646.36    \n",
      "    18     230.00     623.45        57     955.01     618.92        96    1490.00     581.41       135    2330.00     590.04       174    2840.01     646.93    \n",
      "    19     245.00     623.68        58     970.01     619.10        97    1515.00     580.90       136    2410.01     590.19       175    2855.00     648.80    \n",
      "    20     250.00     623.71        59     975.00     618.90        98    1535.01     580.88       137    2415.00     590.14       176    2860.00     649.54    \n",
      "    21     280.00     623.74        60     995.00     617.56        99    1545.01     581.67       138    2440.00     589.67       177    2865.01     650.32    \n",
      "    22     310.00     623.22        61    1000.00     617.33       100    1550.00     583.10       139    2475.00     588.37       178    2880.01     652.44    \n",
      "    23     315.00     623.50        62    1020.01     616.84       101    1555.00     586.20       140    2480.01     588.21       179    2885.00     653.22    \n",
      "    24     340.01     628.42        63    1045.00     616.53       102    1560.00     588.96       141    2505.00     587.91       180    2900.01     655.69    \n",
      "    25     345.00     628.94        64    1050.00     616.38       103    1565.00     591.66       142    2510.00     587.76       181    2905.00     656.61    \n",
      "    26     365.01     629.12        65    1090.01     615.58       104    1570.00     594.43       143    2515.00     588.11       182    2910.00     657.57    \n",
      "    27     370.00     629.12        66    1105.00     615.08       105    1575.01     597.44       144    2525.00     593.09       183    2930.00     661.87    \n",
      "    28     400.00     628.55        67    1140.01     614.22       106    1579.75     598.07       145    2530.01     595.51       184    2935.00     663.57    \n",
      "    29     405.01     628.39        68    1180.00     612.77       107    1580.00     598.10       146    2535.00     597.57       185    2940.00     664.26    \n",
      "    30     430.01     627.41        69    1185.00     612.54       108    1590.01     598.22       147    2580.01     608.60       186    2945.00     664.78    \n",
      "    31     435.00     627.28        70    1200.01     612.02       109    1595.00     603.28       148    2585.01     609.98       187    3015.00     673.06    \n",
      "    32     445.00     627.33        71    1220.01     611.20       110    1600.01     612.67       149    2590.00     611.42       188    3020.00     673.92    \n",
      "    33     470.01     627.15        72    1245.00     609.93       111    1615.00     635.28       150    2595.00     612.53       189    3025.01     673.53    \n",
      "    34     520.01     627.44        73    1255.00     609.73       112    1620.00     637.81       151    2625.00     616.66       190    3050.01     664.42    \n",
      "    35     535.01     627.63        74    1260.00     609.51       113    1630.00     637.17       152    2640.00     618.87       191    3055.01     662.80    \n",
      "    36     550.01     627.92        75    1280.00     608.00       114    1635.00     635.12       153    2645.00     620.77       192    3060.00     663.03    \n",
      "    37     555.00     627.72        76    1285.01     607.70       115    1665.01     605.36       154    2650.00     623.41       193    3065.00     662.73    \n",
      "    38     570.00     626.52        77    1295.01     607.65       116    1670.00     601.06       155    2655.01     623.97       194    3070.00     662.93    \n",
      "    39     575.01     625.96        78    1340.01     606.20       117    1685.00     600.88       156    2660.00     623.58       195    3087.86     663.84    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 79:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2007756.12 323740.33, 2008450.66 322588.21, 2009406.68 321525.98)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     626.05        33    1030.00     610.63        65    1500.00     594.29        97    1775.00     589.30       129    2495.00     603.57    \n",
      "     2      30.00     624.82        34    1050.00     609.80        66    1510.00     594.19        98    1780.00     589.32       130    2500.00     604.38    \n",
      "     3      39.99     624.48        35    1055.00     609.70        67    1515.00     594.18        99    1788.08     589.41       131    2510.00     605.72    \n",
      "     4      45.00     623.85        36    1065.00     609.58        68    1520.00     594.03       100    1855.00     590.16       132    2515.00     605.91    \n",
      "     5     100.00     615.16        37    1070.00     609.49        69    1535.00     592.28       101    1860.00     590.10       133    2520.00     606.71    \n",
      "     6     130.00     610.08        38    1105.00     608.48        70    1540.01     591.64       102    1870.00     588.90       134    2540.00     609.47    \n",
      "     7     135.00     609.17        39    1109.99     608.19        71    1550.00     590.11       103    1875.00     589.16       135    2545.01     610.59    \n",
      "     8     150.00     606.35        40    1130.00     606.91        72    1555.00     589.58       104    1890.00     589.72       136    2565.00     621.44    \n",
      "     9     155.00     606.03        41    1135.00     606.47        73    1570.00     589.53       105    1895.00     589.96       137    2570.00     623.22    \n",
      "    10     220.00     606.16        42    1155.00     604.85        74    1595.00     589.60       106    1900.00     590.28       138    2580.00     626.61    \n",
      "    11     245.00     606.09        43    1165.00     603.97        75    1598.31     589.63       107    1930.00     590.07       139    2585.00     628.19    \n",
      "    12     300.00     605.43        44    1170.00     603.58        76    1625.01     589.84       108    1945.00     589.78       140    2590.00     629.35    \n",
      "    13     305.00     605.34        45    1175.00     603.10        77    1630.00     589.84       109    1950.00     589.72       141    2595.00     629.73    \n",
      "    14     330.01     604.47        46    1185.00     601.96        78    1639.99     589.92       110    1965.01     589.66       142    2600.00     629.96    \n",
      "    15     469.99     608.44        47    1190.00     601.47        79    1645.00     586.36       111    2030.00     589.91       143    2605.00     630.24    \n",
      "    16     564.99     611.82        48    1205.00     600.15        80    1650.00     583.43       112    2085.00     589.74       144    2610.00     631.86    \n",
      "    17     655.00     614.38        49    1210.00     599.67        81    1660.00     581.13       113    2250.00     589.84       145    2615.00     633.07    \n",
      "    18     670.00     615.25        50    1225.00     598.54        82    1665.00     580.56       114    2260.00     589.74       146    2635.00     636.62    \n",
      "    19     675.00     615.48        51    1230.00     598.49        83    1670.00     580.48       115    2320.00     589.58       147    2640.00     637.37    \n",
      "    20     680.00     615.66        52    1240.00     598.81        84    1675.00     580.32       116    2325.00     589.38       148    2655.00     639.54    \n",
      "    21     685.01     615.95        53    1255.00     599.20        85    1685.00     579.60       117    2330.00     589.00       149    2660.00     639.99    \n",
      "    22     715.00     619.67        54    1260.00     599.06        86    1700.00     579.21       118    2335.00     588.73       150    2665.00     640.34    \n",
      "    23     720.00     620.19        55    1320.00     596.94        87    1705.00     579.22       119    2340.00     588.75       151    2695.00     642.10    \n",
      "    24     730.00     619.79        56    1324.99     596.80        88    1720.00     579.37       120    2385.00     590.60       152    2740.00     647.43    \n",
      "    25     840.00     615.73        57    1340.00     596.58        89    1725.00     579.55       121    2415.00     592.27       153    2745.00     648.22    \n",
      "    26     915.00     613.94        58    1345.28     596.44        90    1730.00     579.84       122    2420.00     592.61       154    2755.00     649.94    \n",
      "    27     960.00     612.64        59    1390.00     595.03        91    1735.00     580.27       123    2425.00     593.05       155    2760.00     650.67    \n",
      "    28     985.00     611.59        60    1395.00     594.96        92    1745.00     581.43       124    2430.01     593.64       156    2765.00     651.18    \n",
      "    29     990.00     611.43        61    1405.00     594.94        93    1750.00     582.78       125    2435.00     594.29       157    2770.00     650.04    \n",
      "    30    1000.00     611.35        62    1450.00     595.08        94    1755.00     587.01       126    2440.00     594.97       158    2774.37     648.49    \n",
      "    31    1005.00     611.25        63    1460.00     595.02        95    1760.00     589.70       127    2470.00     599.30    \n",
      "    32    1015.00     610.95        64    1495.00     594.31        96    1765.00     589.61       128    2475.01     600.11    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 80:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2008385.29 324230.6, 2009161.54 323429.83, 2009921.45 322375.77)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     623.04        22     830.00     595.05        43    1660.00     581.07        64    1830.00     583.40        85    2215.01     591.48    \n",
      "     2      60.01     618.18        23     835.00     595.00        44    1665.01     580.35        65    1845.00     588.70        86    2245.00     596.68    \n",
      "     3      65.01     617.65        24     915.00     593.69        45    1670.01     580.01        66    1850.01     590.12        87    2250.01     597.50    \n",
      "     4      70.01     616.81        25    1060.01     592.25        46    1675.01     579.86        67    1861.24     590.64        88    2260.00     598.99    \n",
      "     5      75.01     615.87        26    1115.26     591.14        47    1685.00     579.71        68    1870.00     591.05        89    2265.01     599.71    \n",
      "     6     110.01     608.07        27    1130.01     590.84        48    1710.00     579.68        69    1875.01     590.52        90    2280.00     601.79    \n",
      "     7     115.01     607.10        28    1150.00     589.98        49    1715.01     579.70        70    1885.00     588.06        91    2285.00     602.26    \n",
      "     8     165.01     600.82        29    1160.01     589.66        50    1725.01     580.52        71    1890.01     586.97        92    2295.00     602.53    \n",
      "     9     170.01     600.27        30    1230.01     588.25        51    1730.01     580.82        72    1895.00     587.08        93    2300.01     603.13    \n",
      "    10     245.01     599.86        31    1235.00     588.21        52    1740.01     581.10        73    1900.01     587.22        94    2315.01     605.16    \n",
      "    11     270.01     599.00        32    1275.00     588.33        53    1745.00     581.04        74    1930.00     587.74        95    2325.01     606.58    \n",
      "    12     275.01     598.87        33    1385.00     589.26        54    1755.01     580.61        75    1935.00     588.02        96    2330.00     607.22    \n",
      "    13     360.01     597.34        34    1540.00     588.16        55    1760.00     580.53        76    1965.00     587.55        97    2335.00     607.71    \n",
      "    14     475.01     594.66        35    1560.01     588.11        56    1770.00     580.43        77    1970.00     587.54        98    2355.00     609.19    \n",
      "    15     555.00     593.66        36    1625.01     586.35        57    1775.01     580.79        78    1980.00     587.63        99    2360.00     609.22    \n",
      "    16     560.00     593.74        37    1629.67     586.04        58    1780.01     581.18        79    2035.01     587.89       100    2365.00     608.79    \n",
      "    17     590.00     596.17        38    1630.01     586.02        59    1785.00     581.28        80    2135.00     587.65       101    2370.00     609.00    \n",
      "    18     595.00     596.27        39    1640.01     583.36        60    1790.01     581.12        81    2185.00     588.00       102    2385.01     609.90    \n",
      "    19     635.00     596.05        40    1645.01     583.57        61    1795.00     581.16        82    2190.01     588.43       103    2390.00     610.53    \n",
      "    20     650.00     596.07        41    1650.01     584.04        62    1805.01     581.56        83    2205.01     590.17       104    2414.68     614.72    \n",
      "    21     730.01     595.31        42    1655.01     583.16        63    1825.01     582.23        84    2210.00     590.79    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 81:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2008708 324863.84, 2010554.75 324471.66, 2011494.38 323997.72)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     613.99        29     140.00     599.64        57     448.00     590.38        85    2154.00     581.89       113    2298.00     586.08    \n",
      "     2       4.00     613.57        30     150.00     599.24        58     486.00     589.33        86    2156.00     581.88       114    2308.00     583.98    \n",
      "     3       6.00     613.40        31     151.99     599.15        59     719.99     588.82        87    2158.00     581.62       115    2310.00     583.65    \n",
      "     4       8.00     613.26        32     168.00     598.51        60     756.00     588.56        88    2160.00     581.33       116    2320.00     583.65    \n",
      "     5      10.00     613.11        33     170.00     598.42        61    1374.00     587.44        89    2164.00     580.34       117    2322.00     583.78    \n",
      "     6      13.99     612.83        34     180.00     598.02        62    1376.00     587.45        90    2166.00     579.99       118    2340.00     591.89    \n",
      "     7      16.00     612.61        35     217.99     595.96        63    1380.00     587.45        91    2168.00     579.65       119    2352.00     597.81    \n",
      "     8      18.00     612.37        36     252.00     594.69        64    1572.00     587.33        92    2170.00     579.67       120    2354.00     598.25    \n",
      "     9      22.00     611.87        37     258.00     594.51        65    1574.00     587.29        93    2172.00     579.82       121    2382.00     599.11    \n",
      "    10      24.00     611.63        38     260.00     594.46        66    1580.00     587.20        94    2173.99     579.98       122    2388.01     599.20    \n",
      "    11      28.00     611.13        39     261.99     594.40        67    1812.00     586.20        95    2176.00     580.09       123    2392.00     599.28    \n",
      "    12      35.99     610.19        40     334.00     592.40        68    1859.99     586.29        96    2178.00     579.92       124    2394.00     599.33    \n",
      "    13      38.00     609.98        41     336.00     592.36        69    1887.93     586.19        97    2180.00     579.54       125    2446.00     601.18    \n",
      "    14      40.00     609.82        42     342.00     592.30        70    1994.00     586.05        98    2182.00     579.23       126    2448.00     601.18    \n",
      "    15      42.00     609.65        43     344.00     592.26        71    1998.00     585.98        99    2184.00     579.10       127    2474.00     601.26    \n",
      "    16      54.00     608.66        44     346.00     592.21        72    2056.00     585.68       100    2198.00     579.10       128    2576.00     599.36    \n",
      "    17      56.00     608.36        45     348.00     592.17        73    2058.00     585.62       101    2200.00     579.12       129    2644.01     597.59    \n",
      "    18      62.00     605.71        46     352.00     592.07        74    2117.99     583.11       102    2201.99     579.19       130    2646.00     597.56    \n",
      "    19      64.00     604.94        47     354.00     592.03        75    2120.00     583.57       103    2256.00     581.83       131    2648.00     597.55    \n",
      "    20      68.00     603.62        48     358.00     591.93        76    2122.00     584.06       104    2258.00     582.42       132    2650.00     597.53    \n",
      "    21      70.00     603.20        49     360.00     591.89        77    2124.00     584.56       105    2260.00     582.98       133    2652.00     597.52    \n",
      "    22      72.00     602.92        50     364.00     591.79        78    2126.00     585.05       106    2262.00     583.67       134    2858.00     595.99    \n",
      "    23      82.00     601.96        51     366.00     591.75        79    2128.00     585.55       107    2266.00     585.41       135    2860.00     595.95    \n",
      "    24      84.00     601.52        52     371.99     591.60        80    2130.00     586.04       108    2267.99     586.29       136    2906.00     594.46    \n",
      "    25      86.00     601.44        53     374.00     591.56        81    2132.00     586.47       109    2276.00     589.78       137    2908.00     594.33    \n",
      "    26     102.00     601.26        54     378.00     591.46        82    2145.99     582.08       110    2278.00     590.66       138    2940.32     591.99    \n",
      "    27     104.00     601.30        55     380.00     591.42        83    2148.00     581.79       111    2280.00     590.63    \n",
      "    28     106.00     601.22        56     412.00     590.67        84    2152.00     581.79       112    2295.99     586.55    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 82:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2009787.46 325935.78, 2010709.8 325157.45, 2011837.87 324406.55)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     603.79        42    1136.00     586.81        83    1436.00     584.16       124    1630.00     579.16       165    1928.01     596.98    \n",
      "     2       2.00     603.17        43    1138.00     586.76        84    1438.00     584.13       125    1632.01     579.29       166    1930.00     597.12    \n",
      "     3       4.00     602.65        44    1140.00     586.79        85    1440.01     583.20       126    1636.00     579.51       167    1932.00     597.25    \n",
      "     4       6.00     602.17        45    1156.00     586.50        86    1444.00     581.10       127    1638.00     579.64       168    1934.00     597.39    \n",
      "     5       8.00     601.64        46    1160.00     586.47        87    1446.00     580.43       128    1668.00     581.55       169    1936.01     597.52    \n",
      "     6      16.00     599.42        47    1166.01     586.50        88    1448.00     580.45       129    1670.00     581.88       170    1938.00     597.66    \n",
      "     7      36.01     593.99        48    1196.00     586.77        89    1480.00     580.82       130    1672.00     582.81       171    1940.00     597.79    \n",
      "     8      38.00     593.67        49    1198.00     586.77        90    1482.00     580.95       131    1678.01     585.53       172    1942.00     597.93    \n",
      "     9      42.00     593.32        50    1204.01     586.67        91    1486.00     581.27       132    1680.00     585.89       173    1944.00     598.06    \n",
      "    10      44.00     593.08        51    1206.86     586.68        92    1494.00     582.02       133    1682.00     586.17       174    1946.00     598.20    \n",
      "    11      48.00     592.44        52    1224.00     586.87        93    1496.00     582.12       134    1684.00     586.46       175    1948.01     598.33    \n",
      "    12      49.99     592.11        53    1226.01     586.88        94    1502.00     582.19       135    1688.00     587.02       176    1950.00     598.56    \n",
      "    13      52.00     591.79        54    1264.00     586.49        95    1504.00     582.20       136    1690.01     587.42       177    1952.00     599.15    \n",
      "    14      54.00     591.37        55    1288.00     586.53        96    1514.00     582.20       137    1700.00     592.21       178    1954.00     599.10    \n",
      "    15      60.00     589.96        56    1292.01     586.48        97    1516.00     582.19       138    1702.01     593.16       179    1958.00     598.52    \n",
      "    16      62.00     589.75        57    1294.00     586.50        98    1540.00     582.23       139    1704.00     594.01       180    1960.01     598.33    \n",
      "    17      70.00     589.22        58    1302.00     586.70        99    1544.00     582.26       140    1710.01     594.37       181    1982.00     598.55    \n",
      "    18      92.00     587.97        59    1304.01     586.70       100    1546.00     582.25       141    1726.00     595.35       182    1984.00     598.58    \n",
      "    19     118.00     587.59        60    1306.00     586.63       101    1548.00     582.18       142    1728.00     595.37       183    2006.01     598.80    \n",
      "    20     136.00     587.56        61    1308.00     586.57       102    1550.01     582.03       143    1730.00     594.56       184    2008.00     598.83    \n",
      "    21     150.00     587.39        62    1310.00     586.50       103    1552.00     581.87       144    1744.00     588.75       185    2030.01     599.05    \n",
      "    22     216.00     587.24        63    1312.01     586.44       104    1554.01     581.72       145    1746.00     587.99       186    2032.00     599.08    \n",
      "    23     228.00     587.34        64    1316.00     586.30       105    1556.00     581.56       146    1752.00     588.37       187    2054.00     599.30    \n",
      "    24     296.00     587.09        65    1318.00     586.24       106    1558.00     581.41       147    1756.01     588.68       188    2150.00     600.30    \n",
      "    25     432.01     587.66        66    1320.00     586.15       107    1560.00     581.29       148    1764.00     589.34       189    2152.00     600.27    \n",
      "    26     672.01     587.86        67    1332.00     585.52       108    1568.00     580.95       149    1768.01     589.58       190    2188.00     599.23    \n",
      "    27     798.00     586.98        68    1334.00     585.45       109    1570.00     580.85       150    1780.01     590.32       191    2190.00     599.24    \n",
      "    28     806.01     586.86        69    1342.00     585.13       110    1572.00     580.84       151    1804.01     591.94       192    2192.00     599.26    \n",
      "    29     874.00     586.60        70    1362.01     584.71       111    1580.00     580.89       152    1806.00     592.04       193    2226.00     599.53    \n",
      "    30     888.00     586.41        71    1368.00     584.51       112    1582.00     580.49       153    1808.01     592.12       194    2228.00     599.53    \n",
      "    31     908.00     586.38        72    1370.01     584.47       113    1584.00     580.20       154    1810.00     592.30       195    2234.00     599.56    \n",
      "    32     926.01     586.19        73    1372.00     584.46       114    1586.00     580.39       155    1812.00     592.57       196    2236.00     599.56    \n",
      "    33     982.00     586.01        74    1378.00     584.47       115    1588.01     580.57       156    1814.00     592.83       197    2242.00     599.59    \n",
      "    34    1048.00     586.24        75    1380.00     584.49       116    1590.00     580.52       157    1820.00     593.66       198    2258.00     599.54    \n",
      "    35    1056.00     586.19        76    1382.01     584.50       117    1592.00     580.48       158    1824.00     594.24       199    2278.00     599.72    \n",
      "    36    1078.00     586.26        77    1410.00     584.68       118    1594.00     580.32       159    1826.01     594.44       200    2280.00     599.71    \n",
      "    37    1082.00     586.20        78    1412.00     584.63       119    1602.00     579.59       160    1870.01     595.33       201    2350.00     598.36    \n",
      "    38    1096.00     586.28        79    1420.00     584.34       120    1604.00     580.75       161    1872.00     595.36       202    2400.00     597.01    \n",
      "    39    1108.00     586.58        80    1426.00     584.28       121    1624.00     579.61       162    1888.00     595.52       203    2402.00     596.98    \n",
      "    40    1110.00     586.67        81    1428.00     584.27       122    1626.00     579.20       163    1922.00     596.68       204    2562.00     595.75    \n",
      "    41    1134.00     586.82        82    1434.00     584.18       123    1628.00     579.00       164    1926.00     596.85    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 83:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2009989.76 325990.64, 2010493.79 325431.75, 2010668.66 325267.17, 2011008.11 325061.44, 2011885.88 324464.84)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     611.14        55     554.00     588.71       109     778.00     587.27       163    1404.00     582.64       217    1607.99     593.25    \n",
      "     2       6.00     611.11        56     560.00     589.67       110     780.00     587.25       164    1408.01     582.62       218    1614.01     593.68    \n",
      "     3       8.00     611.06        57     562.00     589.86       111     784.00     587.23       165    1436.00     582.42       219    1616.00     593.80    \n",
      "     4      40.00     609.90        58     588.01     590.15       112     786.00     587.21       166    1438.00     582.38       220    1617.99     593.78    \n",
      "     5      44.00     609.80        59     590.00     590.15       113     790.00     587.19       167    1440.00     582.54       221    1620.00     593.77    \n",
      "     6      72.00     609.84        60     592.00     589.89       114     792.00     587.17       168    1446.00     583.44       222    1622.00     593.75    \n",
      "     7      74.00     609.79        61     598.00     588.61       115     796.00     587.15       169    1448.00     583.09       223    1624.00     593.75    \n",
      "     8      76.00     609.75        62     600.00     588.39       116     798.00     587.08       170    1456.00     581.25       224    1626.00     593.78    \n",
      "     9      78.00     609.70        63     604.00     588.15       117     800.00     587.06       171    1458.00     581.39       225    1628.01     593.80    \n",
      "    10      88.00     609.54        64     606.00     588.02       118     802.00     587.10       172    1464.00     581.84       226    1631.99     593.90    \n",
      "    11      90.00     609.52        65     608.00     587.92       119     816.00     586.96       173    1466.00     581.92       227    1656.00     594.44    \n",
      "    12      93.99     609.46        66     610.00     588.07       120     818.00     586.95       174    1470.00     581.96       228    1662.00     594.63    \n",
      "    13     100.00     609.24        67     612.00     588.21       121     822.00     586.90       175    1472.00     581.88       229    1666.00     594.85    \n",
      "    14     101.99     609.19        68     614.00     588.36       122     823.99     586.90       176    1480.00     579.62       230    1676.00     595.38    \n",
      "    15     104.00     609.16        69     616.00     588.50       123     842.00     586.68       177    1482.00     579.32       231    1678.00     595.28    \n",
      "    16     106.00     608.89        70     618.00     588.65       124     854.00     586.67       178    1488.00     579.71       232    1692.00     594.09    \n",
      "    17     131.99     603.46        71     638.00     589.99       125     856.00     586.68       179    1490.00     579.61       233    1694.00     594.05    \n",
      "    18     158.00     601.15        72     640.00     590.15       126     866.00     586.81       180    1492.00     579.33       234    1696.00     594.11    \n",
      "    19     164.00     600.68        73     642.00     590.34       127     868.00     586.82       181    1494.00     579.04       235    1700.00     594.21    \n",
      "    20     165.99     600.50        74     644.00     590.36       128     968.01     586.45       182    1496.00     578.76       236    1702.00     594.25    \n",
      "    21     168.00     600.28        75     654.00     590.32       129     972.00     586.39       183    1498.00     579.01       237    1704.00     594.30    \n",
      "    22     170.00     599.98        76     656.00     590.30       130     974.00     586.35       184    1502.00     579.65       238    1720.00     594.73    \n",
      "    23     172.00     599.64        77     658.00     590.29       131     976.00     586.32       185    1504.00     579.57       239    1722.00     594.82    \n",
      "    24     180.00     598.24        78     660.00     590.27       132     992.74     586.31       186    1509.99     579.24       240    1736.01     595.54    \n",
      "    25     214.00     592.25        79     662.00     590.26       133     994.00     586.25       187    1512.00     579.14       241    1738.00     595.66    \n",
      "    26     216.00     591.88        80     663.99     590.24       134     998.00     586.21       188    1518.00     578.81       242    1739.99     595.77    \n",
      "    27     218.00     591.49        81     666.00     590.23       135    1006.00     586.00       189    1520.00     578.68       243    1754.00     596.31    \n",
      "    28     220.00     591.09        82     667.99     590.21       136    1008.00     585.98       190    1522.00     578.90       244    1760.01     596.48    \n",
      "    29     222.00     590.72        83     670.00     590.26       137    1016.00     585.98       191    1524.00     579.13       245    1788.00     596.75    \n",
      "    30     224.00     590.60        84     671.99     590.46       138    1017.99     585.99       192    1526.00     579.35       246    1790.00     596.74    \n",
      "    31     226.00     590.49        85     674.00     590.49       139    1200.00     585.91       193    1544.00     581.38       247    1818.00     596.42    \n",
      "    32     230.00     590.25        86     678.00     590.45       140    1202.00     585.94       194    1546.00     581.63       248    1820.00     596.41    \n",
      "    33     232.00     590.05        87     694.00     590.32       141    1216.00     585.94       195    1548.00     584.24       249    1826.00     596.54    \n",
      "    34     234.00     589.81        88     696.00     590.22       142    1276.01     585.92       196    1550.00     584.94       250    1828.00     596.63    \n",
      "    35     235.99     589.56        89     708.00     589.69       143    1278.00     585.99       197    1552.00     585.87       251    1832.00     596.85    \n",
      "    36     238.00     589.32        90     710.00     589.57       144    1284.00     586.29       198    1554.00     587.08       252    1834.00     597.32    \n",
      "    37     240.00     589.04        91     712.00     589.42       145    1286.00     586.35       199    1556.00     588.28       253    1836.00     597.66    \n",
      "    38     246.00     587.96        92     716.00     589.10       146    1294.00     586.29       200    1558.00     589.49       254    2064.00     600.05    \n",
      "    39     248.00     587.74        93     718.00     589.09       147    1298.00     586.23       201    1560.00     590.69       255    2098.00     599.06    \n",
      "    40     252.00     587.68        94     724.00     589.11       148    1302.00     586.20       202    1562.00     591.90       256    2100.00     599.02    \n",
      "    41     300.00     586.92        95     726.00     589.07       149    1306.00     586.19       203    1564.00     592.63       257    2138.00     599.32    \n",
      "    42     302.00     586.90        96     732.00     588.49       150    1308.00     586.04       204    1566.00     592.74       258    2154.00     599.36    \n",
      "    43     304.00     586.91        97     734.00     588.32       151    1316.00     585.26       205    1568.00     592.86       259    2168.00     599.31    \n",
      "    44     344.00     586.91        98     742.00     588.39       152    1318.00     585.03       206    1570.00     592.96       260    2192.00     599.52    \n",
      "    45     345.99     586.92        99     744.00     588.32       153    1320.00     584.58       207    1578.00     592.68       261    2194.00     599.49    \n",
      "    46     380.00     586.92       100     746.00     588.26       154    1322.00     583.59       208    1582.00     592.56       262    2218.00     598.95    \n",
      "    47     384.00     586.96       101     748.00     588.12       155    1323.99     582.78       209    1584.00     592.65       263    2220.00     598.92    \n",
      "    48     386.00     586.97       102     750.00     587.96       156    1326.00     581.98       210    1590.00     593.26       264    2222.00     598.88    \n",
      "    49     388.00     586.99       103     752.60     587.82       157    1330.00     580.36       211    1592.00     593.26       265    2224.01     598.85    \n",
      "    50     390.00     587.00       104     758.00     587.89       158    1332.00     580.26       212    1594.00     593.23       266    2260.00     598.21    \n",
      "    51     392.00     587.02       105     768.00     587.42       159    1342.00     580.61       213    1596.00     593.23       267    2264.00     598.11    \n",
      "    52     525.99     588.00       106     769.99     587.29       160    1388.00     581.40       214    1598.00     593.42       268    2308.00     596.91    \n",
      "    53     528.00     588.03       107     772.00     587.18       161    1389.66     581.48       215    1600.00     593.31       269    2310.00     596.89    \n",
      "    54     552.00     588.57       108     774.00     587.28       162    1402.00     582.56       216    1606.00     593.22       270    2450.99     595.81    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 84:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2010195.18 326408.18, 2010848.87 325493.02, 2011951.96 324839.34)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     645.28        24     390.00     610.82        47    1124.65     587.15        70    1615.00     578.23        93    1830.00     591.40    \n",
      "     2       5.00     645.40        25     455.00     602.51        48    1245.00     586.78        71    1620.00     578.51        94    1850.01     592.31    \n",
      "     3      10.01     645.49        26     460.00     602.11        49    1385.00     587.20        72    1625.00     581.25        95    1885.00     593.46    \n",
      "     4      15.00     645.53        27     475.00     601.31        50    1485.00     586.61        73    1630.00     584.96        96    1905.00     594.21    \n",
      "     5      40.00     645.42        28     500.00     598.51        51    1490.00     586.55        74    1635.00     584.74        97    1910.00     594.28    \n",
      "     6      45.00     644.84        29     510.00     597.31        52    1495.00     584.53        75    1650.00     580.94        98    1935.00     594.29    \n",
      "     7      49.99     643.97        30     545.00     592.96        53    1500.00     583.60        76    1655.00     579.65        99    1940.00     594.32    \n",
      "     8      55.00     643.16        31     550.00     593.08        54    1515.61     584.26        77    1660.00     581.97       100    1945.01     594.47    \n",
      "     9      60.00     643.33        32     555.00     593.46        55    1520.00     584.44        78    1670.00     586.85       101    1950.01     594.90    \n",
      "    10      65.00     643.36        33     560.00     593.59        56    1525.00     585.08        79    1675.00     589.22       102    1955.01     595.70    \n",
      "    11      70.00     643.26        34     565.00     593.56        57    1530.00     584.66        80    1680.00     588.80       103    1960.00     595.81    \n",
      "    12      80.00     642.81        35     570.00     593.42        58    1535.01     582.31        81    1690.00     586.77       104    1965.00     596.04    \n",
      "    13      89.99     642.42        36     580.00     591.23        59    1540.00     580.31        82    1695.00     585.95       105    2030.00     598.10    \n",
      "    14     115.00     640.58        37     585.00     590.25        60    1545.00     578.73        83    1700.00     585.41       106    2060.00     596.87    \n",
      "    15     215.00     635.16        38     660.00     587.29        61    1550.00     577.94        84    1705.00     584.57       107    2065.00     596.71    \n",
      "    16     230.00     634.25        39     725.00     586.02        62    1555.00     577.56        85    1710.00     584.55       108    2075.00     596.98    \n",
      "    17     235.00     633.90        40     735.00     585.90        63    1560.00     577.46        86    1720.00     584.97       109    2130.00     597.11    \n",
      "    18     274.99     630.80        41     835.01     586.01        64    1570.00     577.31        87    1725.00     586.07       110    2310.00     598.91    \n",
      "    19     280.00     630.37        42     875.00     586.25        65    1585.00     577.36        88    1735.00     588.73       111    2315.00     598.83    \n",
      "    20     285.00     629.77        43     915.00     586.19        66    1590.00     577.26        89    1740.01     589.27       112    2340.00     598.13    \n",
      "    21     300.00     627.02        44     945.00     586.34        67    1595.00     577.38        90    1740.65     589.29       113    2380.00     598.39    \n",
      "    22     345.00     619.02        45    1025.00     587.06        68    1600.00     577.42        91    1775.00     590.09       114    2405.00     598.29    \n",
      "    23     385.00     611.68        46    1105.00     587.22        69    1605.00     577.54        92    1795.00     590.40       115    2406.87     598.31    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 85:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2011167.54 326849.42, 2012491.25 325264.23)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     641.89        23     555.00     598.81        45    1155.00     586.18        67    1324.99     583.51        89    1685.00     590.80    \n",
      "     2      10.00     642.07        24     570.00     595.62        46    1160.00     582.44        68    1330.00     583.59        90    1690.00     590.79    \n",
      "     3      14.99     642.07        25     575.00     594.23        47    1165.00     579.28        69    1335.00     583.55        91    1695.00     590.90    \n",
      "     4      60.01     641.55        26     590.00     589.12        48    1170.00     576.99        70    1375.00     584.05        92    1720.00     591.86    \n",
      "     5      90.00     641.00        27     595.00     587.25        49    1175.00     576.53        71    1425.00     585.07        93    1730.00     592.29    \n",
      "     6     130.00     640.59        28     600.00     586.39        50    1180.00     576.20        72    1435.00     584.91        94    1740.00     592.82    \n",
      "     7     135.00     640.44        29     640.00     582.46        51    1185.00     576.07        73    1490.00     584.37        95    1745.00     592.95    \n",
      "     8     145.00     640.08        30     645.00     582.17        52    1200.00     576.20        74    1550.00     584.16        96    1750.00     592.99    \n",
      "     9     180.00     639.38        31     649.99     582.76        53    1205.00     576.07        75    1555.01     584.27        97    1755.00     592.81    \n",
      "    10     190.00     639.05        32     660.00     584.45        54    1210.00     576.32        76    1585.00     585.21        98    1760.00     593.08    \n",
      "    11     195.00     638.76        33     665.00     584.48        55    1229.99     576.55        77    1590.00     585.09        99    1770.00     594.12    \n",
      "    12     200.00     638.31        34     990.00     584.53        56    1235.00     576.71        78    1595.00     583.55       100    1775.00     594.50    \n",
      "    13     330.00     628.16        35     995.01     584.57        57    1250.00     577.49        79    1600.00     582.06       101    1780.00     594.51    \n",
      "    14     335.00     627.72        36    1005.00     584.72        58    1255.00     578.25        80    1640.00     583.48       102    1810.00     595.43    \n",
      "    15     395.00     621.19        37    1115.00     585.46        59    1260.00     579.77        81    1645.00     583.86       103    1815.00     595.48    \n",
      "    16     410.00     619.75        38    1118.30     585.69        60    1265.00     579.48        82    1650.01     584.99       104    1965.00     595.94    \n",
      "    17     415.00     619.24        39    1125.00     586.15        61    1270.00     578.58        83    1655.00     585.96       105    2025.00     596.67    \n",
      "    18     465.00     613.67        40    1130.00     585.65        62    1275.01     579.27        84    1660.00     586.90       106    2030.00     596.69    \n",
      "    19     485.00     611.87        41    1135.00     582.49        63    1280.00     580.94        85    1665.00     587.99       107    2035.00     596.53    \n",
      "    20     490.00     611.33        42    1140.00     578.95        64    1285.00     582.18        86    1670.01     589.13       108    2040.00     596.40    \n",
      "    21     500.00     610.14        43    1145.00     578.89        65    1301.28     582.67        87    1675.00     590.23       109    2055.00     596.52    \n",
      "    22     504.99     609.24        44    1150.00     582.57        66    1320.00     583.23        88    1680.00     590.55       110    2065.20     596.49    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 86:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2011625.12 327110.89, 2012867.12 325394.97)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     629.91        26     389.99     612.30        51    1030.00     585.55        76    1185.00     580.15       101    1735.00     584.65    \n",
      "     2       5.00     629.74        27     415.00     610.19        52    1035.00     584.78        77    1190.00     580.22       102    1740.00     586.65    \n",
      "     3      10.00     629.73        28     420.00     609.48        53    1040.00     579.98        78    1205.00     580.90       103    1755.00     592.43    \n",
      "     4      74.99     630.48        29     440.00     606.40        54    1045.00     578.22        79    1210.00     581.96       104    1760.00     593.40    \n",
      "     5     135.00     628.72        30     450.00     604.95        55    1055.00     583.41        80    1215.00     583.60       105    1765.00     593.72    \n",
      "     6     219.99     626.66        31     455.00     604.12        56    1059.99     585.44        81    1220.00     585.19       106    1780.00     594.51    \n",
      "     7     224.99     626.51        32     460.00     602.43        57    1064.99     583.99        82    1225.00     585.34       107    1785.00     594.74    \n",
      "     8     235.00     626.00        33     480.00     596.93        58    1070.00     580.17        83    1229.22     585.13       108    1825.00     595.58    \n",
      "     9     239.99     625.59        34     485.00     595.81        59    1075.00     577.83        84    1264.99     583.36       109    1829.99     595.72    \n",
      "    10     249.99     624.62        35     510.00     590.73        60    1080.00     576.31        85    1269.99     583.26       110    1875.00     597.49    \n",
      "    11     254.99     623.23        36     514.99     589.81        61    1089.99     575.71        86    1359.99     584.76       111    1880.00     597.66    \n",
      "    12     260.00     621.34        37     530.00     587.69        62    1094.99     575.68        87    1389.99     584.74       112    1885.00     597.50    \n",
      "    13     265.00     620.77        38     570.00     582.31        63    1100.00     575.72        88    1530.00     583.02       113    1890.00     597.04    \n",
      "    14     270.00     621.07        39     575.00     582.00        64    1105.00     575.66        89    1605.00     583.80       114    1895.00     596.39    \n",
      "    15     275.00     620.32        40     590.00     585.13        65    1109.99     575.86        90    1615.00     583.82       115    1900.00     595.89    \n",
      "    16     280.00     620.33        41     595.00     585.23        66    1135.00     576.34        91    1620.00     583.86       116    1905.00     595.42    \n",
      "    17     290.00     620.99        42     625.00     584.66        67    1140.00     576.55        92    1659.99     584.51       117    1910.00     595.17    \n",
      "    18     295.00     620.75        43     630.00     584.62        68    1145.00     576.84        93    1670.00     584.60       118    1965.00     595.36    \n",
      "    19     315.00     619.64        44     735.00     584.29        69    1150.00     577.17        94    1679.99     584.85       119    1979.99     595.54    \n",
      "    20     320.00     619.31        45     745.00     584.36        70    1155.00     577.54        95    1684.99     584.37       120    1984.99     595.49    \n",
      "    21     330.00     618.32        46     845.00     584.00        71    1160.00     579.08        96    1689.99     583.77       121    2030.00     595.36    \n",
      "    22     335.00     617.85        47     870.00     583.72        72    1165.00     578.19        97    1700.00     583.10       122    2095.00     596.03    \n",
      "    23     360.00     616.00        48     875.00     583.75        73    1170.00     578.16        98    1704.99     582.82       123    2100.00     596.02    \n",
      "    24     364.99     615.56        49    1020.00     585.53        74    1175.00     580.05        99    1725.00     582.52       124    2110.00     595.82    \n",
      "    25     385.00     612.76        50    1027.56     585.55        75    1180.00     580.14       100    1730.00     582.51       125    2118.24     595.60    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 87:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2011592.43 328753.28, 2013153.11 326081.34, 2013447.26 325452.17)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     601.94        28    1720.01     591.26        55    2490.01     585.32        82    2637.82     581.07       109    3335.00     584.22    \n",
      "     2     305.00     600.01        29    1815.00     589.04        56    2495.01     583.94        83    2655.00     580.67       110    3340.00     583.38    \n",
      "     3     420.01     600.14        30    1820.01     588.79        57    2497.63     581.91        84    2660.00     580.59       111    3365.01     585.98    \n",
      "     4     515.00     599.89        31    1825.01     588.15        58    2505.00     576.20        85    2665.00     580.31       112    3370.01     586.42    \n",
      "     5     550.00     599.57        32    1830.00     588.08        59    2510.01     577.70        86    2670.00     580.16       113    3375.01     585.51    \n",
      "     6     555.01     599.55        33    1835.00     588.34        60    2525.00     583.17        87    2675.00     580.05       114    3385.00     583.75    \n",
      "     7     640.01     600.21        34    1840.01     588.57        61    2530.00     585.11        88    2680.00     579.59       115    3390.00     583.23    \n",
      "     8     690.00     601.06        35    1845.01     588.67        62    2535.01     584.20        89    2685.01     579.26       116    3400.00     583.76    \n",
      "     9     695.01     601.07        36    1855.01     588.55        63    2540.00     580.29        90    2690.01     579.96       117    3410.00     584.18    \n",
      "    10     725.01     600.67        37    1860.01     588.07        64    2545.01     577.72        91    2705.01     582.29       118    3415.00     585.12    \n",
      "    11     830.01     599.98        38    1875.01     586.25        65    2550.01     575.87        92    2710.01     582.46       119    3420.00     586.96    \n",
      "    12     840.01     600.11        39    1880.01     585.88        66    2555.01     575.43        93    2720.00     582.62       120    3425.00     588.72    \n",
      "    13     845.00     600.13        40    1925.01     583.18        67    2560.00     575.17        94    2725.00     582.88       121    3455.01     591.09    \n",
      "    14     925.00     599.75        41    1930.01     582.91        68    2565.01     574.99        95    2730.01     584.15       122    3460.01     591.36    \n",
      "    15     930.00     599.70        42    1935.01     582.78        69    2570.01     575.03        96    2740.00     584.18       123    3480.00     592.14    \n",
      "    16    1005.00     598.24        43    1940.01     582.36        70    2575.01     575.12        97    2765.01     583.84       124    3485.00     592.27    \n",
      "    17    1060.01     597.68        44    1945.01     582.04        71    2580.00     575.24        98    2785.01     583.93       125    3510.00     592.32    \n",
      "    18    1140.00     597.32        45    1950.00     582.18        72    2585.00     575.43        99    2955.00     583.32       126    3515.01     592.50    \n",
      "    19    1200.00     596.74        46    1980.01     583.80        73    2595.00     575.72       100    2990.00     583.45       127    3520.01     592.56    \n",
      "    20    1235.01     596.75        47    1985.01     583.91        74    2600.00     575.90       101    3094.35     583.16       128    3530.01     592.42    \n",
      "    21    1285.00     596.18        48    2025.00     583.46        75    2605.00     576.12       102    3140.00     582.46       129    3540.01     592.14    \n",
      "    22    1290.01     596.16        49    2085.00     583.35        76    2610.01     576.49       103    3160.00     582.44       130    3555.00     592.41    \n",
      "    23    1315.01     596.20        50    2150.01     583.73        77    2615.00     576.91       104    3170.00     582.20       131    3570.00     592.79    \n",
      "    24    1450.01     595.59        51    2345.01     583.40        78    2620.00     577.45       105    3220.00     582.21       132    3600.01     593.33    \n",
      "    25    1565.01     593.16        52    2375.01     583.65        79    2625.01     579.24       106    3275.01     582.84       133    3640.00     593.75    \n",
      "    26    1680.00     591.64        53    2460.00     584.79        80    2630.01     581.18       107    3310.00     582.92       134    3645.00     593.74    \n",
      "    27    1715.01     591.33        54    2470.01     584.88        81    2635.00     581.13       108    3330.00     584.26       135    3788.88     592.68    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 88:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2013304.27 328226.24, 2013868.07 327302.91, 2014276.63 325578.82)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     589.14        30     315.00     591.06        59    1109.99     594.43        88    1375.00     578.49       117    2415.00     580.02    \n",
      "     2       5.00     589.34        31     360.00     594.18        60    1115.00     594.60        89    1380.00     578.97       118    2419.99     580.06    \n",
      "     3      10.00     589.63        32     365.00     594.59        61    1210.00     593.80        90    1384.99     579.66       119    2425.00     579.90    \n",
      "     4      15.00     589.87        33     370.00     594.74        62    1214.99     592.58        91    1388.61     580.83       120    2429.99     579.66    \n",
      "     5      20.00     590.07        34     430.00     595.20        63    1231.94     585.01        92    1390.00     581.28       121    2455.00     577.56    \n",
      "     6      25.00     590.23        35     445.00     595.20        64    1235.00     583.64        93    1394.99     582.31       122    2460.00     576.81    \n",
      "     7      35.00     590.62        36     490.00     595.58        65    1240.00     581.78        94    1450.00     582.54       123    2465.00     576.89    \n",
      "     8      40.00     590.78        37     495.00     595.47        66    1250.00     579.85        95    1570.00     582.09       124    2470.00     578.68    \n",
      "     9      44.99     590.86        38     519.99     594.74        67    1255.00     578.35        96    1655.00     582.96       125    2485.00     583.61    \n",
      "    10      50.00     590.80        39     615.00     594.92        68    1260.00     576.82        97    1665.00     582.99       126    2490.00     583.47    \n",
      "    11      55.00     590.60        40     700.00     594.59        69    1265.00     577.04        98    1905.00     581.53       127    2504.99     581.88    \n",
      "    12      75.00     589.60        41     745.00     594.83        70    1270.00     576.57        99    1980.00     582.40       128    2510.00     581.69    \n",
      "    13      85.00     589.49        42     750.00     594.90        71    1275.00     575.83       100    2055.00     582.63       129    2520.00     581.48    \n",
      "    14      90.00     589.67        43     755.00     595.02        72    1279.99     575.36       101    2094.99     582.01       130    2524.99     581.42    \n",
      "    15      95.00     590.38        44     770.00     595.63        73    1285.00     574.97       102    2100.00     582.03       131    2565.00     581.61    \n",
      "    16     100.00     590.72        45     775.00     595.79        74    1305.00     574.09       103    2180.00     582.83       132    2570.00     581.70    \n",
      "    17     110.00     590.98        46     785.00     595.82        75    1309.99     573.99       104    2220.00     582.86       133    2609.99     582.65    \n",
      "    18     115.00     590.63        47     790.00     595.81        76    1315.00     574.01       105    2265.00     582.39       134    2615.00     582.74    \n",
      "    19     130.00     591.14        48     800.00     595.48        77    1320.00     574.11       106    2290.00     581.95       135    2619.99     582.94    \n",
      "    20     135.00     591.22        49     830.00     595.18        78    1325.00     574.26       107    2314.99     583.19       136    2625.00     583.17    \n",
      "    21     155.00     591.05        50     880.00     594.39        79    1330.00     574.45       108    2324.99     583.99       137    2629.99     583.14    \n",
      "    22     175.00     591.22        51     905.00     594.55        80    1335.00     574.68       109    2330.00     583.92       138    2645.00     581.81    \n",
      "    23     180.00     591.13        52    1010.00     593.67        81    1340.00     574.95       110    2350.00     581.77       139    2650.00     581.65    \n",
      "    24     200.00     590.49        53    1020.00     593.64        82    1345.00     575.26       111    2365.00     580.24       140    2670.00     581.67    \n",
      "    25     205.00     590.46        54    1065.00     593.96        83    1350.00     575.64       112    2370.00     579.99       141    2674.99     581.95    \n",
      "    26     240.00     590.92        55    1070.00     593.95        84    1354.99     576.18       113    2380.00     579.73       142    2680.00     583.74    \n",
      "    27     255.00     590.92        56    1081.85     593.74        85    1360.00     578.61       114    2385.00     579.72       143    2685.00     584.64    \n",
      "    28     260.00     590.89        57    1089.99     593.64        86    1364.99     581.19       115    2390.00     579.78       144    2730.00     585.62    \n",
      "    29     309.99     590.81        58    1095.00     593.62        87    1370.00     580.27       116    2395.00     579.98       145    2853.69     587.24    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 89:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2014677.01 328095.5, 2014652.49 326461.29, 2014562.61 325497.11)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     585.88        20     209.99     589.61        39    1220.00     593.34        58    1454.99     574.66        77    1659.99     581.56    \n",
      "     2       4.99     583.94        21     214.99     590.61        40    1225.00     593.34        59    1459.99     574.56        78    1835.00     582.35    \n",
      "     3       9.99     583.78        22     225.00     591.18        41    1230.00     593.30        60    1475.00     574.04        79    1879.99     582.10    \n",
      "     4      19.99     583.70        23     235.00     591.62        42    1235.00     592.41        61    1490.00     573.27        80    1944.99     582.54    \n",
      "     5      24.99     583.87        24     284.99     591.30        43    1274.99     581.67        62    1500.00     573.25        81    2039.99     582.22    \n",
      "     6      29.99     584.20        25     299.99     591.02        44    1279.99     581.54        63    1505.00     573.42        82    2120.00     580.99    \n",
      "     7      34.99     585.36        26     355.00     590.84        45    1344.99     582.33        64    1510.00     573.62        83    2124.99     581.05    \n",
      "     8      45.00     588.46        27     530.00     591.06        46    1349.99     582.47        65    1514.99     573.95        84    2175.00     582.59    \n",
      "     9      50.00     588.40        28     534.99     591.10        47    1374.99     582.74        66    1519.99     574.44        85    2180.00     582.68    \n",
      "    10      65.00     586.96        29     539.99     591.10        48    1390.00     582.96        67    1524.99     575.14        86    2235.00     582.63    \n",
      "    11      70.00     586.53        30     714.99     590.94        49    1395.00     582.21        68    1529.99     576.72        87    2254.99     583.00    \n",
      "    12     104.99     585.64        31     829.99     591.69        50    1397.42     581.81        69    1534.99     580.81        88    2259.99     583.02    \n",
      "    13     135.00     585.28        32     935.00     592.86        51    1405.00     580.54        70    1539.99     581.19        89    2294.99     582.60    \n",
      "    14     140.00     585.26        33     940.00     592.81        52    1410.00     580.22        71    1544.99     581.52        90    2324.99     581.99    \n",
      "    15     145.00     585.44        34     975.00     592.20        53    1420.00     580.14        72    1554.99     580.53        91    2330.00     582.01    \n",
      "    16     175.00     585.72        35     999.99     591.55        54    1424.99     580.51        73    1559.57     581.62        92    2374.99     582.51    \n",
      "    17     179.99     585.80        36    1004.99     591.50        55    1429.99     579.24        74    1560.00     581.72        93    2390.00     582.97    \n",
      "    18     199.99     587.64        37    1025.00     591.42        56    1439.99     574.99        75    1575.00     581.64        94    2395.00     583.09    \n",
      "    19     204.99     588.46        38    1145.00     592.36        57    1444.99     574.80        76    1634.39     581.58        95    2602.75     586.32    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 90:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2015575.82 327948.43, 2015232.64 325341.86)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     585.05        19    1180.01     588.06        37    1465.00     574.19        55    1595.01     579.96        73    2120.00     582.02    \n",
      "     2      80.00     584.10        20    1280.00     587.90        38    1470.01     573.95        56    1600.00     581.01        74    2125.00     582.03    \n",
      "     3     265.01     584.03        21    1305.00     587.69        39    1475.00     573.83        57    1670.01     581.01        75    2140.00     582.23    \n",
      "     4     360.00     588.95        22    1320.00     587.46        40    1480.00     573.79        58    1675.00     580.97        76    2145.00     582.27    \n",
      "     5     365.00     589.18        23    1325.01     586.41        41    1485.01     573.67        59    1680.01     580.88        77    2275.00     582.47    \n",
      "     6     435.00     591.95        24    1350.00     580.57        42    1500.00     573.08        60    1750.00     578.63        78    2345.00     581.00    \n",
      "     7     440.00     592.10        25    1355.00     579.97        43    1510.00     572.62        61    1755.01     578.58        79    2360.00     580.75    \n",
      "     8     470.00     592.50        26    1370.00     579.74        44    1515.00     572.45        62    1770.00     579.42        80    2365.01     580.79    \n",
      "     9     565.00     591.65        27    1375.00     579.73        45    1520.01     572.45        63    1775.01     579.57        81    2380.00     581.32    \n",
      "    10     570.01     591.65        28    1415.01     580.38        46    1525.01     572.55        64    1815.00     579.92        82    2385.01     581.30    \n",
      "    11     580.00     591.59        29    1420.00     580.53        47    1535.00     572.83        65    1845.01     580.52        83    2390.00     581.22    \n",
      "    12     675.01     591.54        30    1427.58     580.97        48    1550.00     574.48        66    1950.00     582.04        84    2410.00     580.71    \n",
      "    13     720.00     591.01        31    1430.00     581.11        49    1555.01     578.17        67    1960.00     582.06        85    2435.00     580.64    \n",
      "    14     875.01     590.50        32    1440.00     581.60        50    1560.01     580.50        68    2020.00     581.40        86    2560.00     582.54    \n",
      "    15     930.01     590.55        33    1445.00     579.15        51    1570.00     579.06        69    2025.01     581.46        87    2629.06     582.21    \n",
      "    16     990.00     590.10        34    1450.01     575.73        52    1575.01     578.39        70    2050.00     582.13    \n",
      "    17    1065.00     589.82        35    1455.00     575.04        53    1590.00     578.59        71    2055.00     582.20    \n",
      "    18    1175.00     588.11        36    1460.00     574.52        54    1591.11     578.89        72    2065.01     582.29    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 91:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2016531.84 327825.86, 2016204.99 325227.46)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     583.50        24    1145.00     588.73        47    1875.00     574.16        70    2085.00     581.89        93    2465.00     584.29    \n",
      "     2      10.00     583.51        25    1150.00     588.70        48    1880.00     573.10        71    2255.00     581.12        94    2470.00     584.88    \n",
      "     3     280.00     582.30        26    1265.00     587.07        49    1885.00     572.78        72    2260.00     581.19        95    2475.00     584.88    \n",
      "     4     350.00     580.93        27    1270.00     587.08        50    1895.00     572.55        73    2315.00     582.48        96    2480.00     585.74    \n",
      "     5     390.00     580.65        28    1370.00     588.50        51    1900.01     572.50        74    2320.00     582.53        97    2485.00     585.86    \n",
      "     6     440.00     579.86        29    1405.01     588.82        52    1905.00     572.41        75    2325.00     582.55        98    2510.00     589.88    \n",
      "     7     445.00     579.82        30    1535.00     589.05        53    1935.00     571.21        76    2330.00     582.54        99    2515.00     589.87    \n",
      "     8     490.00     579.93        31    1655.00     585.42        54    1950.00     571.36        77    2345.01     582.38       100    2520.00     589.76    \n",
      "     9     635.00     579.45        32    1700.00     581.47        55    1955.01     571.57        78    2350.00     582.28       101    2525.00     590.14    \n",
      "    10     660.00     579.58        33    1710.00     580.52        56    1970.00     573.02        79    2355.00     582.03       102    2530.00     590.15    \n",
      "    11     685.00     579.55        34    1715.00     580.37        57    1975.00     574.79        80    2360.00     581.70       103    2535.00     590.01    \n",
      "    12     690.01     579.57        35    1740.00     580.22        58    1980.00     576.22        81    2365.00     581.72       104    2540.00     590.11    \n",
      "    13     740.00     580.01        36    1745.00     580.22        59    1985.00     576.74        82    2370.00     582.01       105    2545.00     590.28    \n",
      "    14     745.00     580.00        37    1795.00     580.65        60    1990.00     577.45        83    2375.00     582.58       106    2550.00     590.60    \n",
      "    15     835.00     578.45        38    1800.00     580.72        61    2005.00     580.26        84    2390.00     584.47       107    2570.00     592.95    \n",
      "    16     840.00     578.83        39    1820.00     581.30        62    2010.01     581.42        85    2395.00     585.25       108    2575.00     592.85    \n",
      "    17     845.00     580.06        40    1840.00     582.07        63    2011.82     581.53        86    2400.00     585.22       109    2580.00     595.93    \n",
      "    18     875.00     587.19        41    1845.01     581.96        64    2015.01     581.72        87    2425.00     581.08       110    2585.00     600.01    \n",
      "    19     880.00     587.51        42    1854.69     581.18        65    2020.00     581.59        88    2430.00     580.97       111    2600.00     610.08    \n",
      "    20     955.00     587.95        43    1855.00     581.15        66    2025.00     581.49        89    2445.00     581.28       112    2605.00     613.09    \n",
      "    21     990.00     587.91        44    1860.00     581.02        67    2035.00     581.40        90    2450.00     581.61       113    2618.88     614.30    \n",
      "    22    1050.00     588.09        45    1865.00     580.02        68    2040.00     581.41        91    2455.00     582.49    \n",
      "    23    1090.00     587.97        46    1870.00     575.65        69    2080.00     581.89        92    2460.00     583.31    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 92:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2016960.82 327740.06, 2017034.36 326195.73, 2017320.34 325648.27)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     580.23        27     719.99     578.34        53    1249.99     584.51        79    1784.00     580.00       105    1959.99     600.00    \n",
      "     2      25.00     579.99        28     725.00     578.30        54    1284.99     584.10        80    1784.99     580.09       106    1967.27     603.57    \n",
      "     3      29.99     580.07        29     730.00     578.10        55    1290.00     583.94        81    1789.99     580.15       107    1989.99     614.72    \n",
      "     4      35.00     580.24        30     734.99     577.93        56    1295.00     583.67        82    1795.00     579.62       108    2000.00     613.46    \n",
      "     5      40.00     580.44        31     779.99     576.79        57    1379.99     580.67        83    1800.00     576.67       109    2005.00     614.70    \n",
      "     6      60.00     581.51        32     785.00     576.70        58    1385.00     580.55        84    1804.99     574.89       110    2009.99     616.21    \n",
      "     7      64.99     581.74        33     789.99     577.20        59    1420.00     580.08        85    1810.00     573.56       111    2014.99     618.21    \n",
      "     8      80.00     581.96        34     795.00     577.78        60    1465.00     580.14        86    1814.99     572.34       112    2019.99     620.14    \n",
      "     9      85.00     581.96        35     800.00     578.24        61    1500.00     579.92        87    1819.99     572.17       113    2030.00     622.92    \n",
      "    10     224.99     580.52        36     830.00     579.16        62    1504.99     579.92        88    1825.00     572.08       114    2035.00     626.47    \n",
      "    11     235.00     580.50        37     849.99     579.62        63    1510.00     579.95        89    1830.00     571.76       115    2039.99     627.08    \n",
      "    12     239.99     580.57        38     855.00     579.67        64    1514.99     579.92        90    1834.99     571.67       116    2055.00     626.97    \n",
      "    13     270.00     581.15        39     859.99     579.41        65    1535.00     579.36        91    1839.99     571.52       117    2060.00     626.98    \n",
      "    14     274.99     581.15        40     865.00     579.32        66    1546.08     579.19        92    1844.99     571.31       118    2065.00     627.29    \n",
      "    15     284.99     581.04        41     894.99     578.94        67    1570.00     578.38        93    1864.99     570.59       119    2069.99     628.06    \n",
      "    16     475.00     580.97        42     984.99     579.09        68    1575.00     578.61        94    1869.99     570.50       120    2074.99     629.36    \n",
      "    17     559.99     580.36        43    1040.00     579.02        69    1595.00     580.71        95    1885.00     570.65       121    2080.00     630.75    \n",
      "    18     570.00     580.21        44    1065.00     578.68        70    1600.00     581.14        96    1890.00     570.87       122    2085.00     632.30    \n",
      "    19     580.00     580.63        45    1070.00     578.68        71    1650.00     581.60        97    1899.99     571.74       123    2090.00     633.08    \n",
      "    20     584.99     580.80        46    1079.99     578.76        72    1674.99     580.75        98    1904.99     572.34       124    2110.00     636.04    \n",
      "    21     600.00     581.07        47    1085.00     579.33        73    1680.00     580.48        99    1915.00     574.59       125    2119.99     637.78    \n",
      "    22     604.99     581.05        48    1099.99     581.13        74    1689.99     578.02       100    1920.00     576.44       126    2125.00     638.76    \n",
      "    23     610.00     580.89        49    1105.00     581.47        75    1694.99     577.72       101    1934.99     586.04       127    2129.99     641.98    \n",
      "    24     639.99     577.39        50    1180.00     582.99        76    1759.99     577.72       102    1944.99     592.19       128    2163.73     639.91    \n",
      "    25     645.00     576.78        51    1225.00     584.81        77    1765.00     578.00       103    1950.00     595.39    \n",
      "    26     650.00     576.81        52    1229.99     584.90        78    1770.00     578.71       104    1954.99     598.04    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 93:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2017344.86 327756.41, 2018333.55 326473.55)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     578.49        22     575.00     579.27        43    1145.00     570.24        64    1315.00     614.06        85    1470.00     642.93    \n",
      "     2      30.00     578.92        23     645.00     579.40        44    1150.00     570.14        65    1320.00     614.72        86    1475.00     644.22    \n",
      "     3      35.00     578.78        24     800.00     578.75        45    1170.00     570.60        66    1335.01     613.89        87    1480.00     645.78    \n",
      "     4      50.00     578.02        25     815.00     578.81        46    1175.01     570.88        67    1340.01     613.31        88    1490.01     649.73    \n",
      "     5      55.00     577.80        26     920.00     578.51        47    1185.00     571.53        68    1345.00     613.28        89    1495.01     652.08    \n",
      "     6      75.00     579.33        27     970.00     578.77        48    1190.00     572.16        69    1370.00     618.20        90    1500.01     655.01    \n",
      "     7      80.00     579.41        28    1039.49     579.82        49    1195.01     573.99        70    1375.00     618.78        91    1505.00     657.52    \n",
      "     8     105.00     579.64        29    1040.01     579.83        50    1200.01     577.82        71    1380.00     619.40        92    1510.00     659.39    \n",
      "     9     110.00     579.11        30    1045.00     579.40        51    1205.00     579.35        72    1385.00     621.21        93    1515.01     659.41    \n",
      "    10     120.00     577.46        31    1055.00     578.46        52    1215.00     576.07        73    1390.00     623.37        94    1520.01     655.88    \n",
      "    11     125.00     577.09        32    1060.01     577.95        53    1220.01     574.53        74    1405.00     630.34        95    1525.00     652.15    \n",
      "    12     130.00     576.80        33    1065.00     575.91        54    1240.00     579.84        75    1410.00     632.25        96    1530.00     648.65    \n",
      "    13     135.00     576.85        34    1070.00     573.78        55    1255.00     584.07        76    1415.00     631.67        97    1535.01     648.67    \n",
      "    14     170.00     579.67        35    1075.00     572.90        56    1260.00     585.54        77    1420.00     631.70        98    1540.00     648.80    \n",
      "    15     174.99     579.97        36    1080.00     572.60        57    1270.00     589.29        78    1425.00     632.06        99    1545.00     649.18    \n",
      "    16     180.01     579.93        37    1090.00     572.12        58    1275.00     593.63        79    1430.00     632.47       100    1565.00     650.26    \n",
      "    17     240.00     579.10        38    1100.00     571.56        59    1280.00     598.78        80    1435.00     633.00       101    1570.00     651.68    \n",
      "    18     280.00     578.78        39    1115.00     571.02        60    1285.00     602.77        81    1440.00     634.96       102    1575.00     649.49    \n",
      "    19     285.00     578.78        40    1120.00     570.80        61    1295.00     610.11        82    1450.00     638.97       103    1595.00     639.05    \n",
      "    20     310.00     578.97        41    1130.00     570.63        62    1300.00     611.35        83    1455.00     640.33       104    1600.00     638.55    \n",
      "    21     540.01     578.96        42    1135.00     570.52        63    1314.83     614.03        84    1460.00     641.08       105    1619.64     638.96    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 94:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2017692.13 329411.05, 2019293.65 327270.23)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     599.17        29    1150.00     581.26        57    1995.00     585.06        85    2225.01     579.18       113    2435.00     596.46    \n",
      "     2      35.00     598.74        30    1250.00     582.65        58    2005.00     584.96        86    2230.00     579.01       114    2454.99     611.18    \n",
      "     3      55.00     598.75        31    1370.01     582.33        59    2010.00     585.00        87    2235.00     578.45       115    2460.00     613.86    \n",
      "     4      60.00     598.81        32    1410.01     581.74        60    2015.00     584.90        88    2255.00     576.42       116    2462.62     614.17    \n",
      "     5      75.00     599.10        33    1515.00     581.34        61    2020.01     584.74        89    2260.00     575.99       117    2465.00     614.46    \n",
      "     6      80.00     599.02        34    1575.01     580.55        62    2025.01     584.64        90    2270.01     575.88       118    2485.01     615.35    \n",
      "     7     240.00     595.22        35    1580.00     580.59        63    2045.00     584.64        91    2275.00     575.63       119    2500.00     616.21    \n",
      "     8     280.00     593.95        36    1630.00     581.36        64    2050.00     584.56        92    2280.01     574.77       120    2505.00     616.20    \n",
      "     9     305.00     593.40        37    1635.00     581.34        65    2051.16     584.60        93    2285.00     574.27       121    2510.00     615.91    \n",
      "    10     335.00     592.94        38    1685.00     579.22        66    2055.00     584.73        94    2290.00     573.48       122    2515.00     615.66    \n",
      "    11     415.00     592.31        39    1695.01     579.07        67    2060.00     584.86        95    2300.00     572.38       123    2540.00     614.95    \n",
      "    12     420.00     592.14        40    1755.00     576.73        68    2065.01     584.78        96    2305.00     571.88       124    2545.00     614.49    \n",
      "    13     465.00     589.18        41    1760.00     577.05        69    2070.00     584.28        97    2310.01     571.47       125    2550.00     614.91    \n",
      "    14     470.00     589.05        42    1790.01     579.17        70    2075.01     583.93        98    2320.01     571.07       126    2575.00     624.32    \n",
      "    15     605.00     584.92        43    1800.00     580.16        71    2080.00     583.27        99    2325.00     570.82       127    2580.00     625.50    \n",
      "    16     650.00     583.97        44    1805.00     580.36        72    2085.00     582.33       100    2330.00     570.49       128    2585.00     625.89    \n",
      "    17     690.00     582.90        45    1835.00     581.10        73    2100.00     578.59       101    2335.00     569.87       129    2590.00     625.96    \n",
      "    18     695.00     582.82        46    1840.00     581.03        74    2105.01     578.20       102    2340.00     569.87       130    2605.00     627.23    \n",
      "    19     810.00     581.98        47    1845.00     580.87        75    2135.00     576.81       103    2360.00     569.99       131    2610.00     630.35    \n",
      "    20     815.00     581.91        48    1860.01     580.22        76    2140.00     576.85       104    2365.00     570.09       132    2615.00     631.80    \n",
      "    21     820.00     581.88        49    1900.01     580.23        77    2160.00     577.87       105    2370.00     570.31       133    2620.00     631.89    \n",
      "    22     825.00     581.91        50    1905.00     580.70        78    2165.00     577.95       106    2380.00     572.32       134    2655.00     633.80    \n",
      "    23     910.00     580.96        51    1910.00     582.24        79    2180.00     573.83       107    2385.00     573.14       135    2659.99     636.37    \n",
      "    24     915.00     580.95        52    1915.00     583.84        80    2185.01     572.64       108    2395.00     574.14       136    2665.00     637.63    \n",
      "    25    1005.00     582.54        53    1920.00     584.25        81    2190.00     572.00       109    2400.00     574.96       137    2670.00     635.02    \n",
      "    26    1020.00     582.71        54    1955.00     585.29        82    2205.00     572.00       110    2405.00     577.87       138    2673.57     632.81    \n",
      "    27    1025.00     582.70        55    1960.00     585.28        83    2210.00     573.74       111    2415.00     583.88    \n",
      "    28    1145.00     581.25        56    1985.00     585.01        84    2220.00     577.45       112    2430.00     593.09    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 95:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2017986.28 330211.81, 2020208.81 328062.82, 2020315.04 327972.94)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     599.85        25    1175.00     579.02        49    2250.01     576.85        73    2705.00     573.21        97    2916.69     608.14    \n",
      "     2      85.01     599.23        26    1240.00     579.32        50    2255.01     576.81        74    2710.00     572.22        98    2945.01     618.18    \n",
      "     3     315.00     594.70        27    1250.00     579.31        51    2265.00     576.81        75    2715.00     571.67        99    2950.01     618.47    \n",
      "     4     375.00     594.10        28    1255.00     579.34        52    2270.01     577.05        76    2725.01     571.13       100    2955.01     618.38    \n",
      "     5     420.00     594.27        29    1335.01     580.46        53    2285.01     578.02        77    2735.01     570.64       101    2965.00     617.49    \n",
      "     6     465.00     593.53        30    1380.01     580.40        54    2290.01     578.00        78    2740.00     570.48       102    2970.01     617.66    \n",
      "     7     490.01     593.24        31    1450.01     580.01        55    2320.00     577.49        79    2745.01     570.41       103    2975.00     618.47    \n",
      "     8     495.00     593.06        32    1455.00     580.01        56    2340.01     577.46        80    2750.00     570.30       104    3000.01     623.04    \n",
      "     9     505.00     592.57        33    1590.01     581.31        57    2345.01     577.48        81    2760.00     570.00       105    3005.01     623.84    \n",
      "    10     590.01     589.06        34    1600.01     581.28        58    2400.01     578.01        82    2765.00     569.82       106    3050.01     630.68    \n",
      "    11     650.01     586.25        35    1745.00     580.11        59    2405.01     578.13        83    2770.01     569.20       107    3055.01     631.37    \n",
      "    12     665.00     586.25        36    1835.00     580.60        60    2410.00     578.22        84    2795.00     569.31       108    3075.00     633.98    \n",
      "    13     780.01     584.04        37    1970.00     579.98        61    2475.00     579.00        85    2800.01     569.36       109    3080.01     634.46    \n",
      "    14     820.00     582.76        38    2025.01     578.97        62    2550.00     580.32        86    2805.00     569.45       110    3085.01     634.31    \n",
      "    15     890.01     580.96        39    2090.01     581.25        63    2555.01     580.47        87    2810.00     569.61       111    3090.01     634.34    \n",
      "    16     895.01     580.75        40    2095.00     581.39        64    2580.00     581.90        88    2820.00     571.21       112    3091.57     634.38    \n",
      "    17     915.01     579.71        41    2100.01     581.09        65    2581.99     581.66        89    2825.01     571.98       113    3095.00     634.64    \n",
      "    18     960.01     579.40        42    2165.00     576.68        66    2585.00     581.30        90    2840.00     573.69       114    3100.00     634.36    \n",
      "    19     985.00     578.94        43    2180.01     577.05        67    2610.00     574.74        91    2845.01     574.35       115    3110.01     633.92    \n",
      "    20     995.00     578.88        44    2195.01     577.53        68    2615.00     574.56        92    2865.00     586.13       116    3170.00     629.90    \n",
      "    21    1045.00     578.83        45    2220.00     578.16        69    2685.00     576.16        93    2870.01     589.18       117    3175.01     629.49    \n",
      "    22    1065.00     578.92        46    2225.01     578.24        70    2690.01     575.62        94    2875.00     592.33       118    3225.00     630.00    \n",
      "    23    1140.00     578.40        47    2230.00     578.13        71    2695.00     573.59        95    2880.01     595.23       119    3230.72     630.11    \n",
      "    24    1145.01     578.40        48    2235.01     577.99        72    2700.01     573.16        96    2895.00     600.45    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 96:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2018541.92 330767.44, 2020257.84 329411.05, 2020952.38 328945.29)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     604.26        23     925.00     578.01        45    1714.99     576.58        67    2555.00     572.40        89    2729.99     578.42    \n",
      "     2      25.00     604.33        24     934.99     578.37        46    1720.00     577.54        68    2560.00     572.76        90    2749.99     584.70    \n",
      "     3      40.00     604.17        25    1000.00     580.28        47    1725.00     578.22        69    2565.00     572.92        91    2809.99     602.43    \n",
      "     4     160.00     602.13        26    1005.00     580.40        48    1765.00     574.83        70    2569.99     571.78        92    2815.00     604.07    \n",
      "     5     174.99     602.11        27    1010.00     580.37        49    1845.00     577.81        71    2575.00     570.70        93    2820.00     605.80    \n",
      "     6     240.00     601.26        28    1080.00     578.73        50    1940.00     576.66        72    2580.00     570.28        94    2826.09     607.11    \n",
      "     7     245.00     601.24        29    1085.00     578.65        51    1960.00     576.77        73    2585.00     570.03        95    2835.00     609.02    \n",
      "     8     260.00     601.28        30    1120.00     579.67        52    2049.99     577.99        74    2589.99     569.91        96    2840.00     610.75    \n",
      "     9     265.00     601.18        31    1154.99     581.21        53    2054.99     578.02        75    2595.00     569.72        97    2864.99     619.59    \n",
      "    10     405.00     597.51        32    1160.00     581.24        54    2145.00     577.56        76    2600.00     569.58        98    2870.00     620.23    \n",
      "    11     525.00     587.99        33    1245.00     580.55        55    2150.00     577.58        77    2615.00     569.57        99    2875.00     620.03    \n",
      "    12     530.00     587.62        34    1305.00     580.53        56    2187.28     578.00        78    2620.00     569.54       100    2880.00     620.21    \n",
      "    13     550.00     586.42        35    1445.00     579.11        57    2254.99     578.70        79    2640.00     569.20       101    2940.00     628.07    \n",
      "    14     690.00     580.37        36    1520.00     577.74        58    2450.00     579.28        80    2644.99     568.87       102    2955.00     630.34    \n",
      "    15     694.99     580.18        37    1525.00     577.72        59    2465.00     579.52        81    2650.00     568.58       103    2960.00     631.33    \n",
      "    16     729.99     579.03        38    1600.00     578.95        60    2469.01     579.63        82    2660.00     568.60       104    2970.00     633.96    \n",
      "    17     734.99     578.84        39    1620.00     579.53        61    2470.00     579.66        83    2680.00     568.75       105    2995.00     639.92    \n",
      "    18     740.00     578.75        40    1654.99     580.32        62    2525.00     582.05        84    2690.00     568.92       106    3000.00     640.98    \n",
      "    19     845.00     580.38        41    1660.00     580.04        63    2529.99     581.56        85    2695.00     569.52       107    3005.00     641.27    \n",
      "    20     850.00     580.26        42    1680.00     575.92        64    2540.00     578.90        86    2705.00     570.79       108    3010.00     641.70    \n",
      "    21     874.99     579.30        43    1685.00     575.88        65    2545.00     577.54        87    2710.00     571.18       109    3015.00     641.91    \n",
      "    22     880.00     579.14        44    1710.00     575.88        66    2549.99     575.25        88    2715.00     572.39       110    3023.53     641.93    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 97:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2019310 331502.84, 2021630.58 329729.72)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     600.68        24     280.00     585.06        47    1210.00     576.09        70    2320.00     568.48        93    2595.00     595.54    \n",
      "     2      35.00     598.19        25     285.00     584.70        48    1230.00     575.67        71    2325.00     568.60        94    2630.00     599.87    \n",
      "     3      40.00     597.89        26     305.00     578.63        49    1445.00     575.78        72    2330.01     568.68        95    2695.00     607.56    \n",
      "     4      45.00     597.30        27     310.00     578.27        50    1535.00     575.64        73    2340.00     568.78        96    2710.00     609.65    \n",
      "     5      75.00     592.81        28     340.00     578.34        51    1855.00     575.37        74    2370.00     568.55        97    2715.00     611.27    \n",
      "     6      80.00     592.10        29     375.00     578.10        52    1859.99     575.34        75    2375.00     567.96        98    2735.00     618.18    \n",
      "     7      85.00     591.95        30     520.00     576.74        53    2055.00     575.74        76    2385.00     567.96        99    2755.00     620.26    \n",
      "     8      90.00     592.10        31     545.00     576.72        54    2170.00     576.88        77    2410.00     568.16       100    2760.00     621.02    \n",
      "     9      95.00     592.12        32     680.00     577.56        55    2215.00     577.53        78    2420.00     568.32       101    2765.00     621.55    \n",
      "    10     105.00     591.95        33     745.00     578.50        56    2239.40     577.52        79    2425.00     568.69       102    2780.00     622.75    \n",
      "    11     110.00     591.47        34    1040.00     577.87        57    2255.00     577.52        80    2435.00     569.68       103    2820.01     626.36    \n",
      "    12     130.00     589.83        35    1069.99     578.14        58    2260.00     575.10        81    2440.00     570.01       104    2825.00     626.68    \n",
      "    13     155.00     587.44        36    1085.00     578.39        59    2265.00     571.39        82    2460.00     570.01       105    2830.00     626.37    \n",
      "    14     160.00     586.54        37    1090.01     578.34        60    2270.00     572.15        83    2465.00     570.88       106    2860.00     632.91    \n",
      "    15     164.99     585.90        38    1135.00     577.42        61    2274.99     572.85        84    2495.00     576.30       107    2865.00     633.82    \n",
      "    16     170.00     585.44        39    1140.00     576.73        62    2280.00     571.52        85    2500.00     577.28       108    2885.00     636.82    \n",
      "    17     195.00     583.90        40    1155.00     574.30        63    2285.00     570.28        86    2505.00     578.62       109    2890.00     637.60    \n",
      "    18     220.00     582.48        41    1160.00     573.99        64    2290.00     569.33        87    2510.00     579.87       110    2895.00     637.50    \n",
      "    19     225.00     582.27        42    1180.00     574.00        65    2295.00     568.91        88    2515.01     581.01       111    2900.00     636.86    \n",
      "    20     230.00     582.27        43    1185.00     574.78        66    2300.00     568.70        89    2532.91     584.49       112    2905.00     637.63    \n",
      "    21     245.00     583.93        44    1190.00     575.50        67    2305.00     568.67        90    2570.00     591.69       113    2910.00     637.92    \n",
      "    22     255.00     585.11        45    1195.00     576.17        68    2309.99     568.59        91    2575.00     592.79       114    2920.45     638.20    \n",
      "    23     260.00     585.33        46    1200.00     576.37        69    2315.00     568.45        92    2580.00     593.60    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 98:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2020180.21 332160.61, 2021569.29 330836.89, 2022239.32 330330.29)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     594.00        25     755.00     575.45        49    1690.00     574.96        73    2110.01     567.85        97    2410.01     603.69    \n",
      "     2      45.01     589.76        26     770.00     575.26        50    1755.00     574.49        74    2125.01     568.01        98    2435.01     606.95    \n",
      "     3      50.01     589.38        27     855.01     575.54        51    1760.00     574.48        75    2140.00     567.90        99    2440.00     607.36    \n",
      "     4      55.01     589.09        28     860.01     575.48        52    1850.00     575.76        76    2155.01     567.87       100    2445.01     607.83    \n",
      "     5     125.01     584.14        29     945.00     572.33        53    1910.00     575.03        77    2160.01     567.28       101    2510.01     614.67    \n",
      "     6     135.01     583.37        30     950.00     572.20        54    1915.01     575.07        78    2170.00     567.28       102    2515.01     615.40    \n",
      "     7     220.01     579.87        31     955.01     572.51        55    1918.80     575.19        79    2180.00     567.42       103    2540.01     619.40    \n",
      "     8     310.00     576.85        32     970.01     573.81        56    1920.01     575.22        80    2200.01     567.52       104    2545.01     620.15    \n",
      "     9     345.01     576.12        33     975.01     574.04        57    1995.00     577.47        81    2215.01     567.81       105    2555.01     621.42    \n",
      "    10     395.01     576.02        34    1025.01     575.18        58    2000.00     577.54        82    2220.01     568.39       106    2560.00     622.49    \n",
      "    11     400.01     575.98        35    1030.01     575.25        59    2035.01     577.49        83    2225.01     569.00       107    2625.01     630.64    \n",
      "    12     410.01     575.58        36    1155.01     574.80        60    2035.99     576.93        84    2230.00     569.80       108    2635.01     631.81    \n",
      "    13     435.01     574.78        37    1160.01     574.81        61    2040.01     574.63        85    2235.00     573.14       109    2685.01     638.02    \n",
      "    14     440.01     574.66        38    1230.00     574.29        62    2045.01     570.97        86    2240.01     575.96       110    2690.01     638.69    \n",
      "    15     520.01     573.84        39    1300.00     574.28        63    2050.00     571.12        87    2275.01     584.32       111    2705.01     640.86    \n",
      "    16     525.01     573.86        40    1355.01     573.88        64    2055.01     571.80        88    2275.17     584.36       112    2710.01     641.48    \n",
      "    17     555.01     574.63        41    1415.01     573.83        65    2060.01     571.04        89    2280.01     585.45       113    2725.01     642.25    \n",
      "    18     605.00     574.62        42    1475.01     573.50        66    2065.01     569.70        90    2295.01     588.77       114    2730.00     640.96    \n",
      "    19     620.00     573.57        43    1540.00     574.49        67    2070.01     568.43        91    2300.01     589.67       115    2735.01     639.43    \n",
      "    20     650.01     573.57        44    1545.00     574.54        68    2075.01     567.87        92    2320.01     592.85       116    2745.01     635.32    \n",
      "    21     655.01     574.36        45    1585.00     574.54        69    2080.00     567.70        93    2335.01     595.00       117    2750.01     634.10    \n",
      "    22     660.01     575.21        46    1605.00     574.25        70    2090.00     567.70        94    2340.01     595.62       118    2758.79     634.39    \n",
      "    23     665.01     575.85        47    1610.01     574.28        71    2095.01     567.60        95    2390.01     600.90    \n",
      "    24     705.01     575.38        48    1630.01     574.66        72    2100.01     567.57        96    2395.01     601.58    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 99:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2021038.17 332773.44, 2022018.7 331686.68, 2022500.79 331417.04, 2022942.03 331016.66)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     591.31        34     645.00     573.25        67    1560.01     578.29       100    1820.01     573.09       133    2245.00     592.82    \n",
      "     2       5.01     591.37        35     650.00     571.65        68    1585.00     579.44       101    1825.01     576.26       134    2250.01     593.26    \n",
      "     3      10.00     591.13        36     675.01     573.96        69    1590.01     579.26       102    1830.01     577.90       135    2285.01     596.77    \n",
      "     4      85.01     585.11        37     680.01     574.27        70    1625.01     576.52       103    1834.61     577.99       136    2290.01     597.44    \n",
      "     5      90.01     584.75        38     740.01     575.70        71    1628.27     576.32       104    1895.01     579.22       137    2295.01     598.32    \n",
      "     6      95.00     584.44        39     790.01     576.21        72    1630.01     576.22       105    1940.01     579.91       138    2320.01     602.46    \n",
      "     7     215.00     578.14        40     795.01     576.04        73    1635.01     575.89       106    1945.01     580.07       139    2325.01     603.21    \n",
      "     8     220.01     578.05        41     820.00     574.57        74    1640.01     573.13       107    1950.01     580.13       140    2370.00     608.39    \n",
      "     9     280.00     577.31        42     825.01     574.21        75    1645.01     569.80       108    2000.01     580.17       141    2375.01     609.06    \n",
      "    10     285.01     577.07        43     850.01     572.28        76    1650.00     569.69       109    2016.10     580.77       142    2380.01     609.97    \n",
      "    11     295.00     576.37        44     855.01     572.30        77    1655.01     569.27       110    2020.01     580.80       143    2415.01     614.36    \n",
      "    12     325.00     574.70        45     860.01     572.84        78    1660.01     568.28       111    2055.01     580.57       144    2420.01     615.23    \n",
      "    13     330.01     574.29        46     865.00     573.23        79    1665.01     567.38       112    2060.01     580.61       145    2430.01     618.73    \n",
      "    14     335.01     574.04        47     935.01     575.42        80    1670.01     567.04       113    2065.01     580.56       146    2435.01     619.86    \n",
      "    15     345.01     573.81        48     940.01     575.52        81    1675.01     566.85       114    2075.01     580.26       147    2470.01     622.48    \n",
      "    16     385.00     574.61        49    1020.01     574.80        82    1680.01     566.81       115    2080.01     580.29       148    2475.01     622.48    \n",
      "    17     415.01     574.51        50    1040.00     574.54        83    1685.01     566.68       116    2085.01     580.61       149    2490.01     621.98    \n",
      "    18     440.01     574.21        51    1135.01     574.34        84    1690.01     566.68       117    2090.01     580.48       150    2495.01     621.95    \n",
      "    19     445.01     574.23        52    1190.00     575.28        85    1695.01     566.75       118    2095.01     580.43       151    2500.01     622.23    \n",
      "    20     525.01     575.88        53    1195.01     575.34        86    1705.01     566.76       119    2105.01     582.00       152    2505.01     622.17    \n",
      "    21     530.01     575.82        54    1200.01     575.25        87    1710.01     566.71       120    2110.01     582.59       153    2510.01     621.91    \n",
      "    22     555.00     574.61        55    1250.01     572.66        88    1720.01     566.52       121    2115.01     583.08       154    2515.01     621.30    \n",
      "    23     565.01     573.99        56    1310.01     575.41        89    1730.00     566.40       122    2120.01     583.39       155    2520.01     620.49    \n",
      "    24     570.01     573.92        57    1315.01     575.39        90    1735.01     565.99       123    2125.01     583.77       156    2550.01     624.08    \n",
      "    25     575.01     573.88        58    1365.00     573.32        91    1740.01     565.82       124    2130.01     584.04       157    2575.01     626.65    \n",
      "    26     580.00     574.20        59    1370.01     573.32        92    1745.01     565.83       125    2135.01     584.19       158    2580.01     627.12    \n",
      "    27     605.01     577.27        60    1405.01     574.77        93    1750.01     566.05       126    2140.02     584.41       159    2595.01     628.37    \n",
      "    28     610.01     577.32        61    1430.01     575.98        94    1755.01     566.23       127    2145.01     585.10       160    2600.01     627.29    \n",
      "    29     615.01     578.71        62    1463.72     574.41        95    1780.01     566.14       128    2150.01     585.41       161    2605.01     626.67    \n",
      "    30     620.01     579.33        63    1465.00     574.35        96    1795.00     566.40       129    2155.01     585.83       162    2611.92     626.48    \n",
      "    31     625.01     579.07        64    1490.01     573.31        97    1800.01     566.81       130    2160.01     586.32    \n",
      "    32     630.01     578.46        65    1495.01     573.24        98    1810.01     568.27       131    2165.01     586.76    \n",
      "    33     635.01     576.97        66    1555.01     577.98        99    1815.01     570.12       132    2195.01     588.83    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 100:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2021896.14 333443.46, 2023522.18 331784.74)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     592.86        24     285.00     586.81        47     794.99     570.18        70    1344.99     565.36        93    1584.99     578.34    \n",
      "     2       5.00     593.89        25     290.00     585.30        48     799.99     569.87        71    1360.00     564.80        94    1599.99     580.82    \n",
      "     3      10.00     594.26        26     315.00     577.09        49     805.00     569.80        72    1365.00     564.51        95    1604.99     581.44    \n",
      "     4      15.00     594.84        27     320.00     575.77        50     875.00     570.96        73    1370.00     564.18        96    1650.00     583.31    \n",
      "     5      20.00     594.96        28     329.99     576.28        51     880.00     571.14        74    1375.00     564.38        97    1705.00     585.31    \n",
      "     6      25.00     594.85        29     334.99     576.22        52     905.00     572.77        75    1380.00     564.71        98    1794.99     591.10    \n",
      "     7      30.00     594.71        30     360.00     575.32        53     910.00     573.01        76    1385.00     564.90        99    1809.99     591.84    \n",
      "     8      49.99     593.98        31     365.00     575.24        54     935.00     573.99        77    1410.00     564.59       100    1970.00     602.25    \n",
      "     9      54.99     593.89        32     370.00     574.02        55    1010.00     573.81        78    1430.00     564.86       101    1985.00     603.08    \n",
      "    10      60.00     594.14        33     375.00     573.04        56    1110.00     572.50        79    1435.00     565.30       102    2104.99     608.88    \n",
      "    11      65.00     594.14        34     380.00     573.09        57    1160.00     574.22        80    1444.99     566.99       103    2144.99     611.20    \n",
      "    12     100.00     593.44        35     385.00     573.10        58    1220.00     575.03        81    1449.99     569.12       104    2235.00     617.04    \n",
      "    13     110.00     593.34        36     424.99     575.05        59    1264.99     575.09        82    1454.99     572.41       105    2240.00     617.43    \n",
      "    14     119.99     593.70        37     429.99     575.16        60    1269.99     573.44        83    1460.00     573.44       106    2255.00     618.72    \n",
      "    15     134.99     593.46        38     519.99     574.88        61    1275.68     571.44        84    1472.88     574.26       107    2265.00     619.50    \n",
      "    16     139.99     593.32        39     565.00     575.19        62    1285.00     568.15        85    1480.00     574.72       108    2270.00     620.00    \n",
      "    17     155.00     592.71        40     625.00     574.72        63    1290.00     566.46        86    1485.00     574.73       109    2280.00     621.15    \n",
      "    18     175.00     592.11        41     744.99     574.45        64    1295.00     567.37        87    1519.99     573.89       110    2284.99     621.53    \n",
      "    19     224.99     590.05        42     749.99     574.39        65    1300.00     568.56        88    1524.99     573.93       111    2322.79     624.08    \n",
      "    20     260.00     589.00        43     764.99     574.00        66    1304.99     567.86        89    1529.99     574.10    \n",
      "    21     265.00     588.90        44     769.99     573.82        67    1309.99     566.92        90    1534.99     574.30    \n",
      "    22     275.00     588.84        45     784.99     573.12        68    1314.99     566.10        91    1575.00     576.98    \n",
      "    23     280.00     588.22        46     789.99     572.12        69    1324.99     565.83        92    1580.00     577.55    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 101:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2022341.9 333784.25, 2023231.41 333077.87, 2023788.28 333126.46, 2024483.45 332431.29)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     600.93        30     670.00     573.17        59    1160.00     569.61        88    1390.00     572.10       117    1730.00     577.75    \n",
      "     2       5.00     601.88        31     740.00     572.91        60    1165.00     569.73        89    1400.00     567.70       118    1765.00     578.99    \n",
      "     3      35.00     601.20        32     770.00     572.64        61    1170.00     569.79        90    1405.00     566.46       119    2065.00     592.62    \n",
      "     4      75.00     599.37        33     815.00     572.70        62    1180.00     569.78        91    1415.00     565.22       120    2085.00     593.65    \n",
      "     5      80.00     599.09        34     865.00     572.42        63    1185.00     569.80        92    1420.01     565.03       121    2180.00     599.36    \n",
      "     6      85.00     598.26        35     885.00     572.48        64    1195.00     569.49        93    1425.00     564.90       122    2270.00     604.34    \n",
      "     7      90.00     596.70        36     890.00     572.44        65    1200.00     569.51        94    1430.00     564.71       123    2280.00     604.76    \n",
      "     8      95.00     596.85        37     915.00     571.90        66    1205.00     569.47        95    1465.01     562.98       124    2290.00     605.48    \n",
      "     9     100.00     596.25        38     920.00     571.86        67    1220.00     568.95        96    1470.00     562.83       125    2380.00     610.93    \n",
      "    10     105.00     595.98        39     940.00     571.86        68    1230.00     569.05        97    1485.00     563.73       126    2385.01     611.26    \n",
      "    11     110.00     596.00        40     980.00     572.74        69    1250.00     568.96        98    1490.00     563.71       127    2470.00     617.17    \n",
      "    12     145.00     594.87        41    1015.00     573.26        70    1270.00     569.06        99    1530.00     563.19       128    2475.01     617.47    \n",
      "    13     150.00     594.76        42    1020.00     572.16        71    1275.00     569.16       100    1550.00     563.39       129    2485.01     617.97    \n",
      "    14     170.00     594.53        43    1030.00     569.60        72    1280.01     569.30       101    1555.00     563.54       130    2520.00     619.44    \n",
      "    15     175.00     594.25        44    1035.00     569.03        73    1295.00     569.40       102    1560.01     564.07       131    2525.00     619.70    \n",
      "    16     180.00     593.89        45    1040.00     569.03        74    1300.00     569.48       103    1569.28     566.19       132    2540.00     620.61    \n",
      "    17     185.00     593.50        46    1045.00     569.27        75    1305.00     569.64       104    1574.76     567.80       133    2545.00     620.79    \n",
      "    18     200.00     592.05        47    1050.00     569.05        76    1320.00     569.80       105    1582.07     569.41       134    2570.00     621.44    \n",
      "    19     215.00     590.75        48    1070.00     569.08        77    1325.01     569.95       106    1590.00     570.82       135    2575.01     621.78    \n",
      "    20     220.00     589.42        49    1080.00     569.16        78    1330.00     569.82       107    1595.00     571.33       136    2600.00     623.96    \n",
      "    21     250.00     577.69        50    1085.00     569.15        79    1332.83     569.81       108    1600.00     571.97       137    2605.00     624.21    \n",
      "    22     255.00     575.71        51    1095.00     569.08        80    1335.00     569.81       109    1611.34     573.85       138    2610.00     624.03    \n",
      "    23     260.00     574.34        52    1100.00     569.21        81    1340.00     569.89       110    1630.00     576.94       139    2620.01     623.62    \n",
      "    24     315.00     573.89        53    1120.00     569.85        82    1345.00     569.68       111    1635.00     577.34       140    2625.00     623.46    \n",
      "    25     410.00     573.68        54    1125.00     569.86        83    1360.00     570.49       112    1640.00     577.28       141    2665.01     625.96    \n",
      "    26     505.00     572.65        55    1135.87     568.81        84    1365.00     570.24       113    1645.00     577.25       142    2677.98     626.58    \n",
      "    27     509.99     572.63        56    1145.00     569.01        85    1375.01     569.24       114    1665.00     577.45    \n",
      "    28     655.01     573.14        57    1150.00     569.42        86    1380.00     569.75       115    1694.86     577.43    \n",
      "    29     665.01     573.14        58    1155.00     569.58        87    1385.00     570.97       116    1725.01     577.66    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 102:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2022468.97 333892.63, 2023291.21 333201.21, 2023814.45 333216.16, 2024584.36 332487.36)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     593.67        25     425.00     572.68        49    1290.00     574.09        73    1540.00     574.83        97    2370.00     610.43    \n",
      "     2       5.00     596.70        26     430.00     572.62        50    1295.00     573.32        74    1556.74     575.02        98    2375.00     610.64    \n",
      "     3       9.99     599.47        27     450.00     572.00        51    1299.99     572.15        75    1565.00     575.11        99    2434.99     612.16    \n",
      "     4      15.00     600.06        28     455.00     571.87        52    1316.46     569.60        76    1597.76     575.78       100    2440.00     612.25    \n",
      "     5      20.00     600.11        29     710.00     571.87        53    1329.99     567.50        77    1614.99     576.12       101    2475.00     612.27    \n",
      "     6      30.00     599.92        30     775.00     572.78        54    1335.00     566.95        78    1620.00     576.18       102    2505.00     614.31    \n",
      "     7      35.00     599.80        31     780.00     572.78        55    1356.57     566.38        79    1710.00     578.32       103    2510.00     614.50    \n",
      "     8      59.99     599.03        32     825.00     571.93        56    1368.52     565.89        80    1739.99     579.77       104    2515.00     614.62    \n",
      "     9      70.00     599.01        33     830.00     571.87        57    1374.99     565.39        81    1755.00     580.60       105    2540.00     615.37    \n",
      "    10      75.00     598.95        34     945.00     571.91        58    1379.99     564.94        82    1765.00     581.04       106    2545.00     615.80    \n",
      "    11      95.00     597.89        35     995.00     572.23        59    1385.00     564.76        83    1815.00     582.85       107    2559.99     617.23    \n",
      "    12     105.00     597.25        36    1050.00     572.78        60    1390.00     564.48        84    1869.99     584.30       108    2565.00     617.84    \n",
      "    13     170.00     592.27        37    1074.31     572.73        61    1415.00     562.85        85    1875.00     584.49       109    2580.00     620.61    \n",
      "    14     195.00     590.62        38    1125.00     572.90        62    1420.00     562.62        86    1885.01     584.98       110    2585.00     621.93    \n",
      "    15     200.00     589.45        39    1129.99     572.97        63    1429.99     563.40        87    1975.00     589.69       111    2590.00     622.09    \n",
      "    16     215.00     584.95        40    1134.99     573.00        64    1435.00     563.60        88    2025.00     591.79       112    2595.00     621.46    \n",
      "    17     220.00     584.02        41    1140.00     572.97        65    1470.00     563.03        89    2030.00     592.03       113    2605.00     621.56    \n",
      "    18     285.00     574.57        42    1145.00     572.97        66    1495.00     563.30        90    2065.00     593.97       114    2610.00     621.66    \n",
      "    19     290.00     573.64        43    1150.00     573.03        67    1499.99     563.46        91    2105.00     595.73       115    2615.00     621.82    \n",
      "    20     355.00     572.32        44    1165.00     573.30        68    1515.00     565.82        92    2145.00     597.28       116    2620.00     622.08    \n",
      "    21     360.00     572.25        45    1170.00     573.44        69    1520.00     566.98        93    2150.00     597.51       117    2657.91     622.99    \n",
      "    22     375.00     572.16        46    1190.00     573.53        70    1524.99     569.54        94    2170.00     598.62    \n",
      "    23     380.00     572.20        47    1245.00     573.47        71    1529.99     572.20        95    2285.00     605.66    \n",
      "    24     390.00     572.44        48    1254.99     573.33        72    1535.00     573.74        96    2365.00     610.19    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 103:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2023266.91 334451.38, 2024492.79 333218.02, 2024694.61 332724.68)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     600.43        28     355.00     570.41        55    1125.01     562.68        82    1615.00     579.03       109    1975.00     591.81    \n",
      "     2      70.00     594.78        29     400.00     570.54        56    1140.00     562.40        83    1620.00     579.06       110    1980.00     592.08    \n",
      "     3      75.00     594.65        30     405.00     570.52        57    1145.01     562.83        84    1630.00     578.96       111    2000.00     593.35    \n",
      "     4      95.00     594.39        31     485.01     569.30        58    1150.00     563.04        85    1635.00     578.94       112    2005.00     593.55    \n",
      "     5     100.01     594.12        32     525.00     569.51        59    1170.01     562.89        86    1645.00     579.08       113    2025.00     593.82    \n",
      "     6     115.00     592.32        33     545.00     569.43        60    1180.00     562.94        87    1655.01     578.73       114    2030.00     594.02    \n",
      "     7     120.00     592.39        34     550.00     569.47        61    1200.01     563.21        88    1660.00     578.78       115    2050.00     595.64    \n",
      "     8     125.00     592.49        35     595.00     570.56        62    1205.00     563.82        89    1705.01     582.00       116    2070.00     597.08    \n",
      "     9     130.00     592.42        36     625.01     570.87        63    1210.01     564.60        90    1710.00     582.22       117    2075.00     597.39    \n",
      "    10     135.00     592.28        37     675.01     571.92        64    1215.00     565.82        91    1738.95     582.50       118    2095.00     598.37    \n",
      "    11     140.01     592.00        38     680.00     571.98        65    1220.01     567.69        92    1785.00     583.31       119    2120.00     599.11    \n",
      "    12     175.00     588.61        39     960.00     572.12        66    1225.00     570.58        93    1815.01     583.48       120    2125.01     599.42    \n",
      "    13     180.00     587.92        40     965.00     572.15        67    1230.00     571.82        94    1820.00     583.60       121    2140.00     600.86    \n",
      "    14     195.01     580.71        41    1005.00     572.63        68    1245.00     567.98        95    1825.00     583.82       122    2145.01     601.29    \n",
      "    15     200.00     578.45        42    1010.01     572.74        69    1253.00     566.12        96    1855.00     585.54       123    2165.01     601.43    \n",
      "    16     205.01     577.42        43    1015.00     572.90        70    1255.00     565.66        97    1860.01     585.79       124    2170.00     601.53    \n",
      "    17     225.00     573.75        44    1020.01     571.38        71    1260.01     566.39        98    1870.00     586.02       125    2190.00     602.11    \n",
      "    18     230.00     573.39        45    1023.53     570.26        72    1285.00     576.17        99    1875.01     586.44       126    2210.01     602.89    \n",
      "    19     235.01     573.47        46    1030.00     568.21        73    1290.00     576.15       100    1880.01     586.90       127    2215.00     602.91    \n",
      "    20     250.01     574.43        47    1035.00     567.22        74    1330.00     574.34       101    1890.00     587.30       128    2245.00     602.81    \n",
      "    21     255.01     574.88        48    1045.00     566.53        75    1390.00     573.71       102    1905.00     588.11       129    2250.00     602.90    \n",
      "    22     260.00     575.74        49    1050.00     567.06        76    1395.00     573.70       103    1915.00     588.76       130    2255.01     603.27    \n",
      "    23     265.00     575.85        50    1075.01     571.33        77    1475.00     574.99       104    1920.00     588.94       131    2265.00     604.19    \n",
      "    24     280.00     572.80        51    1080.00     568.72        78    1500.00     575.58       105    1925.01     589.08       132    2270.00     604.51    \n",
      "    25     285.00     571.91        52    1085.00     565.66        79    1510.00     575.70       106    1940.00     589.64       133    2271.98     604.61    \n",
      "    26     290.01     571.30        53    1115.01     562.83        80    1545.01     576.61       107    1965.00     591.17    \n",
      "    27     295.00     570.85        54    1120.01     562.64        81    1550.00     576.77       108    1970.01     591.51    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 104:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2023741.57 334754.11, 2024197.53 334066.42, 2024780.57 333475.91, 2025064.62 332728.42)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     574.30        33     260.00     574.55        65     770.00     567.91        97    1030.00     562.90       129    1765.00     578.13    \n",
      "     2       5.00     573.93        34     265.00     574.03        66     779.99     569.45        98    1045.00     562.85       130    1770.00     578.22    \n",
      "     3      15.00     573.13        35     270.00     573.44        67     784.99     569.89        99    1055.00     562.88       131    1815.00     578.23    \n",
      "     4      20.00     572.88        36     275.00     572.89        68     825.12     572.19       100    1075.00     563.14       132    1840.00     577.40    \n",
      "     5      25.00     572.82        37     285.00     572.85        69     845.00     573.21       101    1080.00     563.34       133    1850.00     577.52    \n",
      "     6      30.00     572.73        38     290.00     572.88        70     850.00     573.41       102    1095.00     565.14       134    1855.00     577.34    \n",
      "     7      35.00     573.02        39     295.00     572.94        71     855.00     571.48       103    1100.00     565.22       135    1860.00     577.41    \n",
      "     8      50.00     577.58        40     310.00     572.97        72     859.11     569.50       104    1105.00     567.57       136    1925.00     581.87    \n",
      "     9      55.00     578.40        41     315.00     572.92        73     860.00     569.07       105    1110.00     572.16       137    1930.00     581.94    \n",
      "    10      65.00     573.86        42     345.00     572.34        74     880.00     572.33       106    1122.73     572.52       138    1995.00     585.10    \n",
      "    11      70.00     571.73        43     349.99     572.32        75     885.00     571.15       107    1145.00     573.14       139    2034.99     586.71    \n",
      "    12      75.00     571.67        44     360.00     572.34        76     890.00     568.96       108    1150.00     573.16       140    2040.00     586.88    \n",
      "    13      80.00     571.56        45     365.00     572.25        77     895.00     568.63       109    1160.00     573.09       141    2170.00     589.94    \n",
      "    14      85.00     571.34        46     380.00     571.91        78     910.00     569.71       110    1165.00     573.03       142    2235.00     591.03    \n",
      "    15      90.00     571.55        47     385.00     571.85        79     915.00     569.44       111    1175.00     572.80       143    2240.00     591.06    \n",
      "    16     100.00     572.50        48     395.00     571.69        80     920.01     568.59       112    1205.00     572.36       144    2255.00     590.95    \n",
      "    17     110.00     573.55        49     400.00     571.54        81     925.00     567.92       113    1210.00     572.37       145    2264.99     590.93    \n",
      "    18     115.00     574.05        50     415.00     570.93        82     935.00     568.95       114    1240.01     572.68       146    2270.00     591.05    \n",
      "    19     120.00     574.09        51     564.99     570.41        83     945.00     568.32       115    1255.00     573.03       147    2290.00     595.73    \n",
      "    20     135.00     573.64        52     610.00     569.04        84     949.99     568.90       116    1315.00     573.72       148    2295.00     596.58    \n",
      "    21     140.00     573.38        53     665.00     568.82        85     955.00     569.27       117    1320.00     573.69       149    2320.00     597.28    \n",
      "    22     154.99     573.29        54     685.00     569.20        86     965.00     569.43       118    1325.00     573.34       150    2325.00     597.46    \n",
      "    23     160.00     573.22        55     715.00     569.96        87     970.01     568.82       119    1340.00     572.72       151    2330.00     597.71    \n",
      "    24     165.00     573.20        56     720.00     570.19        88     975.00     567.30       120    1350.00     573.03       152    2390.00     601.49    \n",
      "    25     174.99     573.62        57     730.00     570.05        89     980.00     564.26       121    1365.00     572.87       153    2420.00     603.28    \n",
      "    26     180.00     573.71        58     735.00     569.68        90     985.00     562.21       122    1375.00     572.83       154    2445.00     604.44    \n",
      "    27     185.00     573.71        59     740.00     569.12        91     990.00     561.98       123    1380.00     572.85       155    2450.00     604.78    \n",
      "    28     205.00     575.53        60     745.00     568.61        92     995.00     562.22       124    1390.00     573.00       156    2454.60     605.25    \n",
      "    29     209.99     576.05        61     750.00     568.47        93    1005.00     562.81       125    1460.00     573.57    \n",
      "    30     215.00     575.66        62     755.00     568.13        94    1010.00     562.55       126    1515.01     574.25    \n",
      "    31     224.99     575.80        63     760.00     567.44        95    1015.00     562.08       127    1650.00     575.30    \n",
      "    32     255.00     574.94        64     765.00     567.21        96    1020.01     562.85       128    1654.96     575.37    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 105:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2024347.03 334784.01, 2024586.23 334208.44, 2024847.85 333924.4, 2025139.37 333416.11, 2025371.09 332713.47)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     592.54        34     385.00     571.33        67     635.00     568.37       100    1475.00     574.86       133    1965.00     582.94    \n",
      "     2      15.00     592.69        35     390.00     570.78        68     640.00     568.78       101    1485.00     574.84       134    1970.00     583.09    \n",
      "     3      45.00     592.44        36     405.00     570.18        69     645.00     567.24       102    1530.00     575.37       135    1975.00     582.97    \n",
      "     4      55.00     592.04        37     410.00     570.03        70     650.00     565.63       103    1590.00     575.58       136    1980.00     583.39    \n",
      "     5     100.00     590.68        38     420.00     569.78        71     655.00     565.35       104    1595.42     575.65       137    1985.00     584.41    \n",
      "     6     105.00     590.60        39     430.00     569.41        72     670.00     564.86       105    1625.00     576.02       138    1990.01     585.67    \n",
      "     7     145.00     590.57        40     440.00     569.82        73     675.00     564.81       106    1630.00     576.12       139    1995.00     586.67    \n",
      "     8     160.00     590.49        41     447.91     569.94        74     730.00     564.81       107    1660.01     577.15       140    2000.00     587.01    \n",
      "     9     165.00     590.08        42     449.99     569.97        75     735.00     566.18       108    1665.01     576.59       141    2005.00     587.30    \n",
      "    10     185.01     586.35        43     455.00     569.87        76     750.00     570.60       109    1670.00     575.43       142    2030.00     588.89    \n",
      "    11     190.00     585.49        44     465.00     565.36        77     755.00     572.17       110    1675.00     575.74       143    2045.01     590.21    \n",
      "    12     195.00     584.73        45     470.00     564.43        78     758.03     572.92       111    1685.00     577.12       144    2085.01     594.23    \n",
      "    13     200.00     584.06        46     485.00     562.61        79     760.00     573.40       112    1695.01     579.90       145    2090.00     594.70    \n",
      "    14     210.00     582.96        47     490.00     562.17        80     785.00     572.63       113    1715.00     579.94       146    2095.00     595.12    \n",
      "    15     215.00     582.31        48     495.00     561.88        81     795.01     572.22       114    1720.00     580.14       147    2160.00     597.33    \n",
      "    16     220.01     581.63        49     500.00     561.90        82     800.00     572.15       115    1725.00     580.13       148    2165.00     597.53    \n",
      "    17     230.00     580.36        50     510.00     562.43        83     880.00     571.75       116    1735.00     579.86       149    2225.00     601.46    \n",
      "    18     235.01     580.00        51     515.00     562.58        84     885.00     571.82       117    1740.00     579.76       150    2230.00     601.85    \n",
      "    19     240.00     579.71        52     520.00     562.59        85     890.00     571.86       118    1775.00     579.43       151    2275.01     606.85    \n",
      "    20     255.00     578.96        53     525.00     562.52        86     940.00     571.98       119    1835.00     579.42       152    2280.01     607.38    \n",
      "    21     260.00     578.65        54     530.00     562.02        87    1009.46     571.84       120    1840.00     579.49       153    2290.00     608.28    \n",
      "    22     275.00     577.86        55     535.00     562.32        88    1100.00     571.62       121    1870.00     581.73       154    2295.00     608.22    \n",
      "    23     280.00     577.66        56     540.00     562.79        89    1140.00     572.66       122    1875.00     581.89       155    2300.00     608.13    \n",
      "    24     285.00     577.57        57     560.00     562.81        90    1150.00     572.85       123    1880.00     581.34       156    2305.01     608.20    \n",
      "    25     310.00     576.91        58     585.00     563.16        91    1160.00     572.99       124    1885.00     581.16       157    2310.01     608.69    \n",
      "    26     315.00     577.23        59     595.00     564.14        92    1190.00     572.80       125    1895.00     580.95       158    2315.00     609.56    \n",
      "    27     320.00     577.29        60     600.00     564.81        93    1205.00     572.84       126    1905.00     580.89       159    2320.00     610.56    \n",
      "    28     325.00     576.53        61     605.00     565.65        94    1285.00     574.14       127    1910.00     580.98       160    2325.00     611.35    \n",
      "    29     330.00     576.36        62     615.00     567.54        95    1320.00     574.39       128    1925.01     581.51       161    2335.28     612.42    \n",
      "    30     340.00     576.12        63     620.00     567.65        96    1325.00     574.38       129    1940.00     582.24    \n",
      "    31     345.00     575.83        64     623.30     567.65        97    1340.00     574.24       130    1945.00     582.40    \n",
      "    32     350.00     575.48        65     625.00     567.74        98    1385.00     574.21       131    1955.01     582.54    \n",
      "    33     380.00     572.37        66     630.00     568.04        99    1455.00     574.84       132    1960.00     582.64    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 106:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2024810.47 334843.81, 2025191.69 334058.95, 2025460.79 333393.68, 2025632.71 332683.57)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     589.76        27     385.00     562.34        53     870.00     571.54        79    1645.01     578.52       105    2005.01     591.94    \n",
      "     2      10.00     590.14        28     390.00     562.43        54     872.54     571.53        80    1650.01     580.47       106    2015.01     593.10    \n",
      "     3      15.00     590.38        29     395.01     562.55        55     925.00     571.47        81    1655.00     580.74       107    2035.00     594.87    \n",
      "     4      20.00     590.67        30     400.01     562.60        56     995.00     571.82        82    1690.00     580.92       108    2060.00     597.19    \n",
      "     5      55.00     591.84        31     405.00     561.73        57    1000.00     571.13        83    1695.00     580.84       109    2075.00     599.37    \n",
      "     6      90.00     592.02        32     415.01     562.73        58    1010.00     571.60        84    1700.00     580.50       110    2080.00     599.92    \n",
      "     7      95.01     591.80        33     425.00     562.76        59    1015.00     571.61        85    1725.00     580.78       111    2090.00     600.90    \n",
      "     8     145.00     588.50        34     450.00     563.10        60    1025.00     571.56        86    1745.01     581.79       112    2095.00     601.26    \n",
      "     9     180.00     587.21        35     455.00     563.42        61    1030.00     571.58        87    1750.01     582.09       113    2145.01     604.47    \n",
      "    10     190.00     586.97        36     460.01     563.77        62    1065.01     572.01        88    1775.01     584.09       114    2150.01     604.83    \n",
      "    11     195.01     585.80        37     465.00     564.23        63    1170.00     572.74        89    1790.00     584.88       115    2205.00     609.66    \n",
      "    12     235.01     574.03        38     470.00     564.96        64    1225.00     572.49        90    1795.00     584.90       116    2210.00     610.32    \n",
      "    13     240.00     572.59        39     480.01     570.42        65    1300.01     572.79        91    1815.00     584.34       117    2230.00     613.82    \n",
      "    14     265.00     574.46        40     485.00     570.42        66    1315.00     572.94        92    1825.00     583.81       118    2245.01     616.62    \n",
      "    15     270.01     574.86        41     490.00     569.53        67    1385.01     574.58        93    1890.01     583.18       119    2250.01     616.78    \n",
      "    16     275.01     574.70        42     520.01     573.04        68    1390.00     574.45        94    1900.01     582.95       120    2255.01     616.86    \n",
      "    17     298.46     572.50        43     521.95     573.34        69    1405.01     573.96        95    1920.00     582.37       121    2260.01     616.72    \n",
      "    18     310.00     571.41        44     525.00     573.82        70    1410.00     573.94        96    1925.00     582.52       122    2270.01     616.21    \n",
      "    19     320.00     566.76        45     530.00     574.46        71    1485.00     575.39        97    1940.00     584.99       123    2280.01     615.83    \n",
      "    20     325.00     565.43        46     575.00     572.01        72    1550.01     575.84        98    1960.00     588.14       124    2285.01     616.17    \n",
      "    21     330.00     564.54        47     580.01     571.88        73    1590.18     574.97        99    1965.00     588.50       125    2290.00     617.32    \n",
      "    22     345.00     562.42        48     635.00     570.92        74    1605.01     574.64       100    1980.01     589.33       126    2295.00     618.69    \n",
      "    23     350.00     562.01        49     640.01     570.87        75    1610.00     574.67       101    1985.00     589.73       127    2300.00     619.29    \n",
      "    24     355.00     561.73        50     665.00     570.85        76    1615.01     574.90       102    1990.01     590.29       128    2320.80     621.58    \n",
      "    25     360.00     561.59        51     740.00     571.46        77    1620.01     575.23       103    1995.01     590.93    \n",
      "    26     375.00     562.25        52     780.01     571.37        78    1640.01     578.00       104    2000.01     591.50    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 107:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2025311.29 335075.53, 2025692.51 334178.55, 2025998.98 332735.9)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     580.14        31     494.99     563.83        61    1165.01     569.54        91    1785.00     574.09       121    2100.00     583.35    \n",
      "     2       5.00     580.23        32     500.00     564.74        62    1170.00     569.90        92    1790.00     574.81       122    2105.00     583.63    \n",
      "     3      30.00     579.91        33     510.00     569.95        63    1285.00     572.17        93    1795.01     575.63       123    2145.01     587.18    \n",
      "     4     150.00     572.03        34     515.00     570.95        64    1290.00     572.23        94    1800.01     577.53       124    2170.00     589.66    \n",
      "     5     155.00     571.86        35     520.00     570.16        65    1385.01     572.01        95    1805.01     579.22       125    2195.00     591.53    \n",
      "     6     320.00     571.27        36     570.00     568.92        66    1390.01     572.03        96    1815.00     579.57       126    2200.01     591.93    \n",
      "     7     325.00     571.38        37     571.95     569.06        67    1425.00     572.38        97    1820.00     579.71       127    2210.00     592.80    \n",
      "     8     335.00     571.78        38     575.00     569.27        68    1455.00     572.44        98    1840.00     579.98       128    2215.00     593.21    \n",
      "     9     335.09     571.75        39     585.00     572.66        69    1515.00     573.96        99    1845.00     579.92       129    2280.00     598.27    \n",
      "    10     340.00     569.88        40     590.00     573.19        70    1520.00     573.76       100    1850.00     579.82       130    2300.00     598.68    \n",
      "    11     344.99     567.48        41     610.00     572.17        71    1550.00     571.87       101    1855.01     579.61       131    2305.00     598.67    \n",
      "    12     350.00     566.12        42     620.01     571.81        72    1555.00     571.90       102    1865.00     580.25       132    2310.00     600.94    \n",
      "    13     355.00     564.50        43     625.00     571.69        73    1615.00     574.79       103    1870.00     580.08       133    2315.00     602.38    \n",
      "    14     360.00     563.61        44     840.00     568.59        74    1620.01     574.84       104    1875.00     579.43       134    2320.00     602.95    \n",
      "    15     365.00     562.77        45     845.00     568.55        75    1625.00     574.74       105    1880.00     579.41       135    2325.00     603.88    \n",
      "    16     370.00     562.02        46     945.00     568.89        76    1645.00     574.63       106    1885.00     579.63       136    2330.00     604.60    \n",
      "    17     380.00     561.46        47     974.63     568.14        77    1670.00     574.16       107    1890.00     580.96       137    2335.00     604.67    \n",
      "    18     385.00     561.32        48     980.00     568.02        78    1675.00     574.63       108    1895.00     582.67       138    2340.00     604.78    \n",
      "    19     400.00     561.86        49    1015.00     567.62        79    1710.00     578.81       109    1900.00     583.25       139    2345.00     604.99    \n",
      "    20     410.00     562.03        50    1030.00     567.55        80    1715.00     579.19       110    1935.00     583.19       140    2350.00     605.64    \n",
      "    21     415.00     562.15        51    1035.00     567.59        81    1720.00     579.22       111    1970.01     582.85       141    2355.00     607.05    \n",
      "    22     425.00     562.49        52    1070.00     568.07        82    1725.00     579.32       112    1975.01     582.52       142    2365.00     612.43    \n",
      "    23     430.00     562.45        53    1085.00     568.13        83    1730.00     579.62       113    2000.00     579.64       143    2370.00     614.24    \n",
      "    24     440.00     561.66        54    1090.00     567.99        84    1735.01     579.64       114    2005.00     579.95       144    2425.00     622.04    \n",
      "    25     445.00     561.37        55    1095.01     567.78        85    1740.01     579.24       115    2015.00     580.63       145    2430.00     622.86    \n",
      "    26     450.00     561.85        56    1100.01     567.18        86    1745.00     578.16       116    2045.00     582.44       146    2440.00     624.58    \n",
      "    27     455.00     562.40        57    1105.00     566.03        87    1750.00     577.53       117    2050.00     582.52       147    2445.00     624.71    \n",
      "    28     460.00     562.78        58    1110.00     565.10        88    1770.00     575.51       118    2070.00     582.69       148    2449.47     624.57    \n",
      "    29     480.00     563.08        59    1115.00     565.36        89    1775.00     575.09       119    2090.01     583.04    \n",
      "    30     490.00     563.50        60    1120.00     565.69        90    1780.00     574.86       120    2095.01     583.17    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 108:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2025834.53 335299.78, 2025998.98 334955.93, 2026133.52 333602.98, 2026268.07 332810.64)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     580.95        25     545.01     561.03        49     835.01     568.94        73    1815.00     572.27        97    2200.01     575.59    \n",
      "     2       5.01     580.97        26     570.01     561.67        50     840.00     568.92        74    1835.01     573.85        98    2205.01     576.14    \n",
      "     3      10.01     580.64        27     575.00     561.77        51     975.01     569.38        75    1840.01     574.06        99    2215.01     577.47    \n",
      "     4      15.01     580.01        28     590.01     562.38        52     990.01     569.17        76    1865.01     573.98       100    2230.01     579.63    \n",
      "     5      20.01     579.92        29     595.00     562.47        53    1010.01     569.21        77    1885.00     574.44       101    2235.00     580.12    \n",
      "     6      25.01     579.92        30     605.00     562.60        54    1165.01     568.59        78    1915.00     574.90       102    2295.01     585.23    \n",
      "     7      30.00     579.77        31     610.00     562.41        55    1255.00     568.90        79    1950.01     575.21       103    2310.01     586.69    \n",
      "     8     115.01     572.22        32     615.01     561.90        56    1260.01     568.72        80    1955.01     575.76       104    2330.00     589.77    \n",
      "     9     120.00     571.83        33     620.00     561.10        57    1275.01     565.36        81    1980.00     578.64       105    2335.00     590.37    \n",
      "    10     155.01     570.15        34     625.01     561.66        58    1280.00     564.93        82    1985.00     578.65       106    2340.00     590.41    \n",
      "    11     160.01     570.00        35     635.01     562.65        59    1290.00     566.38        83    1990.00     578.74       107    2345.00     590.54    \n",
      "    12     305.01     570.01        36     640.00     562.94        60    1295.01     566.74        84    2000.00     578.37       108    2365.01     592.29    \n",
      "    13     370.00     570.97        37     650.00     563.10        61    1340.01     568.93        85    2005.00     577.77       109    2385.01     594.47    \n",
      "    14     380.01     571.17        38     655.01     563.22        62    1390.00     571.72        86    2015.01     575.83       110    2395.01     595.82    \n",
      "    15     381.15     571.20        39     660.00     563.58        63    1395.01     571.74        87    2020.01     575.46       111    2425.00     597.94    \n",
      "    16     405.01     571.64        40     665.01     564.49        64    1495.01     571.59        88    2025.01     575.60       112    2455.01     602.39    \n",
      "    17     465.00     573.13        41     670.01     566.93        65    1555.00     572.51        89    2060.00     576.87       113    2460.01     603.16    \n",
      "    18     467.16     572.53        42     675.00     568.73        66    1660.01     573.00        90    2065.00     576.98       114    2490.01     611.51    \n",
      "    19     470.01     571.73        43     680.01     569.98        67    1710.00     571.98        91    2070.00     577.01       115    2495.01     612.10    \n",
      "    20     485.00     566.41        44     695.00     569.74        68    1715.01     572.10        92    2110.01     577.00       116    2500.00     610.70    \n",
      "    21     490.01     564.87        45     698.96     569.77        69    1740.77     572.93        93    2155.00     576.77       117    2544.46     618.76    \n",
      "    22     495.00     564.01        46     700.01     569.78        70    1765.01     573.59        94    2160.00     576.54    \n",
      "    23     500.01     563.46        47     705.00     571.27        71    1770.01     573.52        95    2165.00     576.38    \n",
      "    24     540.00     561.21        48     745.01     570.62        72    1810.00     572.04        96    2190.01     575.72    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 109:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2026443.73 335602.51, 2026750.2 334832.6, 2026585.75 333659.04, 2026720.3 332948.93)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     584.81        27     875.00     571.29        53    1560.00     561.90        79    1810.00     569.68       105    2370.00     583.45    \n",
      "     2      35.00     583.88        28     960.00     570.31        54    1570.00     561.54        80    1850.01     570.70       106    2375.01     583.75    \n",
      "     3      45.00     583.88        29    1030.00     570.29        55    1575.01     561.70        81    1855.00     570.80       107    2450.00     589.39    \n",
      "     4      50.00     583.54        30    1080.01     570.56        56    1580.00     561.46        82    1860.00     570.28       108    2455.00     590.12    \n",
      "     5      75.00     579.90        31    1090.00     570.77        57    1585.00     558.79        83    1875.00     568.35       109    2470.01     592.65    \n",
      "     6     130.00     572.18        32    1140.01     571.61        58    1590.00     558.46        84    1880.01     568.81       110    2475.00     593.53    \n",
      "     7     135.00     571.83        33    1145.01     571.61        59    1595.00     558.48        85    1885.00     570.27       111    2485.00     595.37    \n",
      "     8     175.00     570.69        34    1185.00     570.79        60    1610.00     558.79        86    1890.00     570.39       112    2490.01     596.19    \n",
      "     9     195.01     570.02        35    1255.00     570.25        61    1615.00     558.93        87    1940.00     570.97       113    2510.01     598.44    \n",
      "    10     290.00     569.05        36    1310.00     569.14        62    1620.00     559.17        88    1965.00     571.55       114    2545.00     602.64    \n",
      "    11     295.01     569.06        37    1330.01     568.45        63    1625.00     559.50        89    2013.69     572.40       115    2550.01     603.50    \n",
      "    12     410.00     570.06        38    1335.00     568.56        64    1630.00     558.88        90    2015.00     572.42       116    2580.00     609.16    \n",
      "    13     485.00     571.70        39    1370.00     569.59        65    1635.00     560.14        91    2065.01     573.47       117    2600.00     612.67    \n",
      "    14     490.00     570.83        40    1395.00     570.48        66    1650.00     561.19        92    2095.00     573.81       118    2605.01     613.51    \n",
      "    15     495.01     568.82        41    1400.00     570.57        67    1655.00     561.74        93    2100.00     573.90       119    2635.00     616.98    \n",
      "    16     500.00     566.85        42    1450.01     570.85        68    1660.00     562.63        94    2180.00     576.20       120    2640.00     617.53    \n",
      "    17     505.01     565.03        43    1485.00     570.66        69    1665.01     563.91        95    2210.00     576.63       121    2645.01     618.05    \n",
      "    18     510.00     563.89        44    1490.00     570.72        70    1670.00     565.67        96    2215.00     576.82       122    2650.00     618.78    \n",
      "    19     600.00     563.89        45    1515.00     571.32        71    1680.00     570.01        97    2245.00     578.88       123    2655.00     619.58    \n",
      "    20     605.01     564.01        46    1520.00     571.17        72    1685.00     572.10        98    2250.00     579.16       124    2715.00     628.73    \n",
      "    21     625.00     570.79        47    1523.65     570.95        73    1688.93     572.21        99    2255.00     579.24       125    2720.01     629.72    \n",
      "    22     630.00     572.22        48    1530.00     570.57        74    1690.00     572.24       100    2275.00     579.32       126    2735.00     632.94    \n",
      "    23     670.00     571.76        49    1535.00     568.17        75    1700.00     571.85       101    2290.00     579.27       127    2736.43     633.24    \n",
      "    24     828.66     571.29        50    1545.01     565.22        76    1710.00     571.32       102    2295.00     579.47    \n",
      "    25     830.00     571.30        51    1550.00     563.86        77    1715.00     571.17       103    2305.00     579.96    \n",
      "    26     870.00     571.32        52    1555.00     562.57        78    1800.00     569.78       104    2340.00     581.93    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 110:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2027079.1 335938.88, 2027445.36 335467.96, 2027393.04 333673.99, 2027482.74 333270.35)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     590.36        23     714.99     569.03        45    2104.99     559.28        67    2264.99     571.33        89    2604.99     605.52    \n",
      "     2       5.00     590.41        24     809.99     569.07        46    2110.00     558.63        68    2310.00     575.96        90    2635.00     609.20    \n",
      "     3      29.99     589.96        25     870.00     569.59        47    2124.99     557.51        69    2355.00     578.47        91    2640.00     609.87    \n",
      "     4      35.00     589.73        26    1730.00     569.28        48    2129.99     557.22        70    2359.99     578.80        92    2650.00     611.85    \n",
      "     5     130.00     574.00        27    1800.00     569.79        49    2145.00     557.63        71    2364.99     579.48        93    2654.99     612.93    \n",
      "     6     135.00     573.20        28    1840.00     569.66        50    2149.99     557.50        72    2375.00     580.93        94    2659.99     611.94    \n",
      "     7     140.00     572.46        29    1885.00     569.91        51    2155.00     557.26        73    2384.99     582.15        95    2664.99     610.81    \n",
      "     8     145.00     571.91        30    1889.99     569.81        52    2160.00     558.46        74    2389.99     582.33        96    2669.99     611.51    \n",
      "     9     184.99     571.03        31    1895.00     569.61        53    2165.00     559.81        75    2391.31     582.35        97    2680.00     613.37    \n",
      "    10     214.99     570.09        32    1900.00     569.50        54    2169.99     560.51        76    2394.99     582.38        98    2685.00     614.39    \n",
      "    11     230.00     570.06        33    1934.99     569.25        55    2174.99     561.31        77    2399.99     582.50        99    2714.99     621.23    \n",
      "    12     235.00     569.94        34    2020.00     569.14        56    2180.00     562.20        78    2430.00     586.58       100    2719.99     621.99    \n",
      "    13     250.00     569.48        35    2032.92     569.30        57    2185.00     566.29        79    2435.00     587.29       101    2724.99     622.62    \n",
      "    14     310.00     567.25        36    2040.00     569.38        58    2190.00     568.26        80    2439.99     587.79       102    2750.00     625.58    \n",
      "    15     315.00     566.88        37    2045.00     569.27        59    2194.99     567.96        81    2444.99     588.16       103    2754.99     626.26    \n",
      "    16     320.01     566.45        38    2065.00     567.78        60    2200.09     568.40        82    2460.00     588.98       104    2790.00     631.49    \n",
      "    17     325.00     566.28        39    2070.00     567.50        61    2215.00     569.69        83    2465.00     589.33       105    2795.00     631.16    \n",
      "    18     495.00     566.28        40    2075.00     565.84        62    2219.99     570.18        84    2494.99     592.19       106    2804.80     630.12    \n",
      "    19     500.00     566.44        41    2079.99     564.13        63    2230.00     569.94        85    2535.00     595.81    \n",
      "    20     515.00     567.82        42    2085.00     562.69        64    2235.00     569.86        86    2539.99     596.37    \n",
      "    21     520.00     568.03        43    2090.00     561.46        65    2240.00     569.75        87    2580.00     601.76    \n",
      "    22     596.58     568.40        44    2095.00     560.63        66    2244.99     569.60        88    2590.00     603.31    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 111:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2028035.88 336544.34, 2028185.38 335378.26, 2028200.33 334653.2, 2028596.49 333778.64)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     583.17        25     895.00     567.97        49    1919.99     567.45        73    2319.99     556.54        97    2619.99     585.22    \n",
      "     2      65.00     583.59        26    1045.00     566.88        50    1925.00     567.51        74    2330.00     559.32        98    2650.00     589.55    \n",
      "     3     125.00     584.21        27    1075.00     567.09        51    1970.00     567.74        75    2335.00     560.42        99    2660.00     590.87    \n",
      "     4     150.00     581.91        28    1100.00     566.71        52    2129.99     567.43        76    2340.00     561.47       100    2664.99     592.09    \n",
      "     5     205.00     576.40        29    1115.00     567.20        53    2135.00     567.48        77    2345.00     562.47       101    2675.00     594.05    \n",
      "     6     294.99     569.77        30    1120.00     567.26        54    2180.00     568.62        78    2350.00     565.71       102    2725.00     604.18    \n",
      "     7     300.00     569.55        31    1150.00     567.26        55    2185.00     568.38        79    2355.00     568.55       103    2729.99     604.66    \n",
      "     8     305.00     569.47        32    1155.00     567.22        56    2190.00     567.90        80    2370.00     565.66       104    2735.00     604.72    \n",
      "     9     350.00     569.23        33    1175.62     567.25        57    2195.00     567.64        81    2370.58     565.63       105    2740.00     604.59    \n",
      "    10     365.00     568.35        34    1195.00     567.29        58    2214.94     568.44        82    2375.00     565.36       106    2750.00     605.57    \n",
      "    11     370.00     568.19        35    1210.00     567.18        59    2219.99     568.64        83    2395.00     565.78       107    2755.00     605.25    \n",
      "    12     385.00     568.03        36    1500.00     566.02        60    2225.00     566.30        84    2400.00     566.21       108    2785.00     611.92    \n",
      "    13     425.00     567.89        37    1505.00     566.04        61    2230.00     564.84        85    2435.00     567.01       109    2790.00     612.98    \n",
      "    14     430.00     567.96        38    1540.00     566.63        62    2235.00     563.70        86    2440.00     567.16       110    2825.00     619.15    \n",
      "    15     480.00     569.14        39    1550.00     566.49        63    2239.99     562.50        87    2465.00     572.27       111    2829.99     619.91    \n",
      "    16     485.00     569.16        40    1595.00     566.45        64    2245.00     560.97        88    2470.00     573.16       112    2835.00     620.75    \n",
      "    17     505.00     568.68        41    1600.00     566.48        65    2250.00     560.47        89    2490.00     575.40       113    2840.00     618.67    \n",
      "    18     520.00     568.10        42    1620.00     566.77        66    2255.00     559.90        90    2540.00     579.69       114    2845.00     618.10    \n",
      "    19     535.00     567.27        43    1625.00     566.76        67    2264.99     558.92        91    2545.00     580.20       115    2854.99     617.99    \n",
      "    20     540.00     567.12        44    1710.00     566.11        68    2275.00     557.84        92    2564.99     580.82       116    2860.94     618.19    \n",
      "    21     700.00     567.11        45    1855.00     566.10        69    2295.00     556.57        93    2570.00     581.09    \n",
      "    22     705.00     567.46        46    1860.00     566.13        70    2300.00     556.38        94    2590.00     582.49    \n",
      "    23     715.00     568.37        47    1900.84     567.05        71    2310.00     556.84        95    2595.00     582.87    \n",
      "    24     790.00     567.80        48    1905.00     567.16        72    2315.00     556.93        96    2615.00     584.58    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 112:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2028704.88 336652.73, 2029235.59 334963.41, 2029586.91 334253.29)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     600.19        27    1155.01     568.27        53    1900.01     556.54        79    2145.00     565.49       105    2345.00     591.92    \n",
      "     2       5.00     600.42        28    1405.00     565.40        54    1920.00     555.53        80    2155.00     566.09       106    2355.00     591.90    \n",
      "     3      15.00     600.75        29    1410.00     565.42        55    1925.00     555.41        81    2160.01     566.46       107    2360.01     592.42    \n",
      "     4      20.00     600.81        30    1450.00     565.95        56    1935.01     555.41        82    2165.01     566.54       108    2375.00     593.64    \n",
      "     5      40.01     599.64        31    1505.01     566.22        57    1940.01     556.98        83    2170.01     566.81       109    2380.00     593.90    \n",
      "     6      70.01     598.13        32    1510.01     566.13        58    1950.00     559.06        84    2175.01     567.20       110    2425.01     595.96    \n",
      "     7      75.01     597.74        33    1515.01     566.01        59    1955.00     560.45        85    2180.00     568.92       111    2430.01     596.46    \n",
      "     8     135.01     592.15        34    1520.01     565.93        60    1960.00     561.93        86    2200.01     576.31       112    2435.01     598.67    \n",
      "     9     145.01     591.06        35    1525.01     565.93        61    1965.01     564.21        87    2205.01     577.67       113    2440.01     600.00    \n",
      "    10     150.01     590.25        36    1535.00     566.11        62    1970.01     566.78        88    2210.01     578.16       114    2445.00     600.64    \n",
      "    11     155.01     588.25        37    1615.00     566.43        63    1975.01     568.43        89    2215.00     578.81       115    2450.00     602.11    \n",
      "    12     160.00     586.74        38    1635.00     566.41        64    1985.00     566.78        90    2260.01     581.78       116    2455.01     602.06    \n",
      "    13     235.00     567.77        39    1770.72     567.85        65    1991.96     566.12        91    2265.01     581.95       117    2460.01     601.82    \n",
      "    14     240.00     566.84        40    1825.00     567.79        66    2015.01     563.94        92    2270.01     581.80       118    2465.01     601.67    \n",
      "    15     245.00     566.71        41    1830.00     567.54        67    2020.00     563.62        93    2280.00     582.14       119    2470.01     602.08    \n",
      "    16     250.00     566.61        42    1835.01     565.24        68    2025.00     564.36        94    2285.00     582.28       120    2475.01     602.57    \n",
      "    17     265.00     566.61        43    1835.87     565.25        69    2030.01     564.99        95    2290.00     582.11       121    2505.01     606.75    \n",
      "    18     490.01     568.68        44    1840.00     565.27        70    2035.00     565.25        96    2295.01     582.03       122    2510.01     606.68    \n",
      "    19     495.01     568.67        45    1850.00     564.70        71    2040.00     565.56        97    2300.00     582.67       123    2515.00     606.31    \n",
      "    20     605.00     566.93        46    1855.00     563.25        72    2070.00     568.08        98    2305.00     583.76       124    2535.01     607.09    \n",
      "    21     610.00     566.89        47    1860.00     559.77        73    2095.01     567.53        99    2310.00     585.08       125    2540.01     607.49    \n",
      "    22     720.00     569.22        48    1865.00     559.31        74    2100.01     567.36       100    2315.00     586.35       126    2563.00     611.62    \n",
      "    23     725.00     569.25        49    1870.01     558.89        75    2105.00     567.07       101    2325.01     587.95    \n",
      "    24     810.01     567.81        50    1875.00     558.51        76    2110.00     566.66       102    2330.01     588.95    \n",
      "    25     870.00     568.20        51    1890.00     557.25        77    2135.01     564.96       103    2335.01     590.07    \n",
      "    26    1055.00     567.34        52    1895.00     556.86        78    2140.01     565.13       104    2340.00     591.03    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 113:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2029250.54 336989.09, 2029773.79 335845.44, 2030483.9 334955.93)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     597.43        24     659.99     564.46        47    1640.00     564.75        70    2005.00     559.34        93    2145.00     576.82    \n",
      "     2      15.00     598.01        25     710.00     565.54        48    1644.99     564.78        71    2009.99     561.37        94    2160.00     579.15    \n",
      "     3      20.00     598.31        26     760.00     566.24        49    1845.00     566.96        72    2014.99     562.96        95    2164.99     580.04    \n",
      "     4      25.00     597.86        27     764.99     566.02        50    1855.00     567.15        73    2020.00     564.96        96    2169.99     580.81    \n",
      "     5      30.00     597.20        28     790.00     564.61        51    1860.00     567.34        74    2025.00     568.37        97    2174.99     580.98    \n",
      "     6     100.00     589.15        29     795.00     564.38        52    1863.26     567.57        75    2029.99     568.10        98    2179.99     580.86    \n",
      "     7     105.00     587.51        30     800.00     564.18        53    1865.00     567.70        76    2034.99     565.49        99    2184.99     581.17    \n",
      "     8     109.99     585.45        31     805.00     564.07        54    1870.00     567.28        77    2040.00     563.37       100    2194.99     584.40    \n",
      "     9     154.99     575.49        32    1045.00     564.72        55    1875.00     564.88        78    2045.00     565.92       101    2199.99     585.76    \n",
      "    10     160.00     574.04        33    1155.00     565.53        56    1879.99     563.37        79    2050.00     568.13       102    2239.99     589.44    \n",
      "    11     169.99     570.80        34    1160.00     565.54        57    1889.99     561.72        80    2055.00     568.91       103    2269.99     592.02    \n",
      "    12     175.00     569.61        35    1215.00     564.95        58    1894.99     560.78        81    2060.00     569.31       104    2299.99     594.74    \n",
      "    13     180.00     568.55        36    1224.99     564.93        59    1900.00     559.50        82    2064.51     569.33       105    2304.99     595.48    \n",
      "    14     184.99     567.63        37    1229.99     564.96        60    1905.00     558.80        83    2065.00     569.33       106    2335.00     600.46    \n",
      "    15     249.99     565.80        38    1257.67     565.26        61    1909.99     558.40        84    2079.99     569.24       107    2339.99     600.81    \n",
      "    16     485.00     566.65        39    1305.00     565.84        62    1914.99     558.03        85    2084.99     569.30       108    2359.99     601.58    \n",
      "    17     489.99     566.64        40    1400.00     566.45        63    1925.00     557.40        86    2094.99     569.49       109    2364.99     602.31    \n",
      "    18     600.00     565.73        41    1430.00     566.37        64    1949.99     555.71        87    2105.00     569.62       110    2369.99     604.18    \n",
      "    19     605.00     565.84        42    1529.99     565.09        65    1974.99     554.65        88    2110.00     569.72       111    2375.00     605.98    \n",
      "    20     610.00     565.88        43    1535.00     565.00        66    1979.99     554.53        89    2114.99     570.09       112    2379.99     606.20    \n",
      "    21     625.00     565.12        44    1540.00     565.04        67    1985.00     554.82        90    2125.00     570.97       113    2384.99     606.16    \n",
      "    22     644.99     565.11        45    1544.99     565.12        68    1989.99     555.56        91    2130.00     572.32       114    2389.99     606.31    \n",
      "    23     650.00     564.95        46    1550.00     565.12        69    1994.99     556.67        92    2140.00     575.83       115    2395.86     606.82    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 114:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2029863.48 337258.19, 2031298.66 335471.7)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     595.98        21     605.00     566.16        41    1020.00     563.75        61    1600.00     560.71        81    2060.00     579.75    \n",
      "     2      25.00     590.25        22     710.00     565.62        42    1090.00     563.97        62    1610.00     561.90        82    2065.00     580.64    \n",
      "     3      30.00     588.91        23     745.01     565.70        43    1120.00     563.97        63    1615.00     562.44        83    2075.01     580.85    \n",
      "     4      70.00     573.49        24     750.01     565.62        44    1140.01     564.12        64    1632.06     564.05        84    2080.01     580.92    \n",
      "     5      75.01     571.59        25     785.00     564.56        45    1195.00     564.98        65    1635.01     564.33        85    2090.00     580.90    \n",
      "     6      80.01     569.99        26     790.00     564.48        46    1295.00     565.00        66    1640.00     564.50        86    2095.00     581.47    \n",
      "     7      85.01     568.65        27     810.00     564.93        47    1370.00     564.57        67    1705.00     565.91        87    2105.00     584.85    \n",
      "     8      95.00     566.18        28     815.01     565.36        48    1375.00     564.44        68    1715.00     565.99        88    2110.00     586.16    \n",
      "     9     100.00     565.88        29     820.01     565.55        49    1444.83     561.52        69    1860.00     565.53        89    2135.00     589.90    \n",
      "    10     120.00     565.63        30     840.00     565.32        50    1455.00     561.10        70    1915.00     565.62        90    2150.01     592.07    \n",
      "    11     125.00     565.45        31     845.00     565.31        51    1460.00     562.11        71    1920.00     565.57        91    2155.01     592.70    \n",
      "    12     130.00     565.22        32     865.00     565.40        52    1465.00     562.87        72    1965.00     564.78        92    2190.00     596.61    \n",
      "    13     135.00     565.18        33     910.00     566.30        53    1480.01     560.35        73    1970.00     564.44        93    2195.00     597.28    \n",
      "    14     145.00     565.19        34     915.00     566.23        54    1485.01     558.47        74    1980.01     561.38        94    2250.00     605.61    \n",
      "    15     150.01     565.50        35     960.00     562.38        55    1490.01     556.89        75    1985.00     560.57        95    2255.00     606.42    \n",
      "    16     155.01     565.74        36     965.00     562.26        56    1495.00     560.48        76    1990.00     560.49        96    2260.00     607.19    \n",
      "    17     185.00     565.63        37     975.00     562.22        57    1500.00     560.55        77    1995.00     560.89        97    2291.57     610.79    \n",
      "    18     290.00     566.01        38     980.00     562.33        58    1540.00     556.17        78    2020.00     569.50    \n",
      "    19     395.00     565.81        39    1000.00     563.05        59    1545.00     556.46        79    2025.00     570.92    \n",
      "    20     540.00     566.32        40    1015.00     563.40        60    1595.00     560.29        80    2055.01     578.53    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 115:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2030708.14 337803.86, 2031478.06 336749.9, 2031582.7 335897.76, 2031739.68 335658.57)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     604.48        26     650.01     565.92        51    1205.01     566.96        76    1930.01     556.19       101    2155.01     579.69    \n",
      "     2      30.01     599.32        27     655.00     565.90        52    1210.00     566.90        77    1935.01     557.56       102    2160.01     580.94    \n",
      "     3      35.01     597.50        28     710.01     565.12        53    1260.00     565.33        78    1945.00     557.67       103    2163.76     581.01    \n",
      "     4      45.01     593.22        29     715.00     565.25        54    1265.01     565.36        79    1950.01     558.21       104    2165.01     581.01    \n",
      "     5      75.01     579.77        30     745.01     566.41        55    1305.22     566.94        80    1955.01     559.63       105    2170.01     581.11    \n",
      "     6      80.00     578.03        31     750.01     566.48        56    1320.00     567.43        81    1960.01     561.62       106    2175.01     581.24    \n",
      "     7     105.00     569.84        32     775.01     565.33        57    1325.01     567.39        82    1965.01     562.86       107    2205.01     584.62    \n",
      "     8     110.01     568.65        33     780.00     565.38        58    1385.01     566.05        83    1970.01     564.48       108    2210.01     585.21    \n",
      "     9     165.00     566.35        34     805.01     566.24        59    1435.01     566.33        84    1975.01     564.10       109    2300.02     598.00    \n",
      "    10     170.01     565.65        35     810.01     566.38        60    1535.01     566.21        85    1985.01     563.21       110    2325.01     601.42    \n",
      "    11     175.01     564.98        36     845.01     565.33        61    1550.01     566.28        86    1990.01     562.90       111    2330.01     603.38    \n",
      "    12     185.00     564.98        37     850.01     565.25        62    1565.01     566.25        87    1995.01     562.82       112    2335.01     605.37    \n",
      "    13     190.01     565.13        38     905.01     567.54        63    1620.01     565.58        88    2000.00     562.67       113    2340.01     606.64    \n",
      "    14     205.01     566.58        39     910.01     567.50        64    1755.01     565.37        89    2009.14     562.10       114    2380.01     610.90    \n",
      "    15     210.01     566.97        40     970.01     564.89        65    1797.71     564.69        90    2010.01     562.05       115    2390.01     613.06    \n",
      "    16     255.01     566.68        41     975.00     564.97        66    1800.01     564.65        91    2015.00     561.81       116    2420.01     618.86    \n",
      "    17     335.01     565.49        42    1015.00     566.97        67    1805.01     565.06        92    2055.00     560.43       117    2425.01     619.78    \n",
      "    18     340.00     565.50        43    1020.00     566.85        68    1810.01     565.83        93    2065.01     560.42       118    2430.01     619.62    \n",
      "    19     430.01     566.67        44    1065.01     565.46        69    1815.00     565.86        94    2070.01     560.98       119    2435.01     620.38    \n",
      "    20     465.00     565.45        45    1070.01     565.35        70    1825.01     560.75        95    2080.01     562.84       120    2440.01     619.35    \n",
      "    21     470.01     565.52        46    1100.00     566.27        71    1830.01     559.72        96    2085.01     564.45       121    2445.01     616.99    \n",
      "    22     525.01     567.12        47    1110.00     566.63        72    1835.00     558.96        97    2090.00     566.18       122    2449.87     617.17    \n",
      "    23     530.01     566.98        48    1115.00     566.60        73    1840.01     558.83        98    2115.01     569.58    \n",
      "    24     580.00     564.99        49    1155.01     565.53        74    1895.01     556.37        99    2125.00     571.00    \n",
      "    25     585.01     564.91        50    1160.01     565.47        75    1900.01     556.19       100    2130.01     572.24    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 116:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2031134.21 338155.17, 2032524.54 336174.33)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     593.80        26     250.00     567.11        51    1064.99     565.74        76    1949.99     567.60       101    2175.00     582.81    \n",
      "     2       5.00     593.20        27     290.00     567.36        52    1070.00     565.65        77    1955.00     567.08       102    2178.79     583.49    \n",
      "     3      30.00     587.20        28     300.00     567.30        53    1110.00     566.56        78    1985.00     563.50       103    2200.00     587.31    \n",
      "     4      35.00     586.90        29     355.00     566.52        54    1115.00     566.62        79    1989.99     562.70       104    2205.00     588.18    \n",
      "     5      45.00     586.96        30     424.99     566.29        55    1160.00     565.11        80    2000.00     560.05       105    2225.00     591.49    \n",
      "     6      50.00     586.92        31     464.99     565.71        56    1164.99     565.22        81    2005.00     558.92       106    2240.00     594.33    \n",
      "     7      55.00     586.52        32     470.00     565.70        57    1215.00     566.93        82    2020.00     558.11       107    2245.00     595.24    \n",
      "     8      80.00     584.22        33     524.99     565.90        58    1220.00     566.85        83    2025.00     557.90       108    2260.00     597.78    \n",
      "     9      85.00     583.67        34     530.00     565.87        59    1265.00     565.43        84    2029.99     557.26       109    2265.00     598.49    \n",
      "    10     100.00     579.99        35     590.00     565.07        60    1270.00     565.44        85    2035.00     556.53       110    2269.99     598.40    \n",
      "    11     105.00     579.12        36     660.00     565.87        61    1325.00     566.83        86    2040.00     556.34       111    2305.00     600.50    \n",
      "    12     110.00     578.62        37     664.99     565.90        62    1375.00     566.07        87    2055.00     556.34       112    2309.99     601.77    \n",
      "    13     114.99     577.90        38     715.00     565.39        63    1379.99     566.07        88    2060.00     556.65       113    2329.99     604.56    \n",
      "    14     150.00     570.32        39     750.00     566.27        64    1425.00     566.80        89    2095.00     559.37       114    2335.00     605.42    \n",
      "    15     154.99     569.31        40     775.00     565.51        65    1530.00     567.04        90    2100.00     559.61       115    2369.99     611.75    \n",
      "    16     180.00     567.68        41     780.00     565.55        66    1639.99     564.47        91    2105.00     559.81       116    2385.00     614.65    \n",
      "    17     185.00     567.56        42     815.00     567.02        67    1745.00     566.60        92    2109.99     559.78       117    2389.99     615.75    \n",
      "    18     205.00     566.87        43     820.00     566.93        68    1749.99     566.67        93    2125.00     558.52       118    2395.00     616.53    \n",
      "    19     210.00     566.21        44     844.99     565.75        69    1860.00     566.83        94    2129.99     559.01       119    2405.00     617.38    \n",
      "    20     214.99     565.22        45     850.00     565.55        70    1865.00     566.62        95    2135.00     567.89       120    2409.99     617.53    \n",
      "    21     220.00     564.31        46     910.00     566.17        71    1905.00     564.43        96    2140.00     577.15       121    2420.07     617.19    \n",
      "    22     230.00     564.31        47     970.00     565.41        72    1909.99     564.24        97    2145.00     577.14    \n",
      "    23     234.99     564.61        48     975.00     565.48        73    1925.00     566.92        98    2155.00     575.16    \n",
      "    24     240.00     565.50        49    1024.99     566.74        74    1929.99     567.43        99    2160.00     576.08    \n",
      "    25     245.00     566.36        50    1030.00     566.75        75    1945.01     567.56       100    2169.99     581.02    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 117:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2031541.59 338502.76, 2033058.99 336574.24)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     589.47        24     390.00     566.39        47    1145.00     566.66        70    1871.60     565.00        93    2195.00     581.71    \n",
      "     2       5.00     589.57        25     395.00     567.05        48    1150.00     566.58        71    1875.01     563.35        94    2200.00     582.17    \n",
      "     3      10.00     589.39        26     435.01     566.99        49    1160.00     566.27        72    1880.01     561.10        95    2205.00     584.54    \n",
      "     4      50.01     586.95        27     550.01     567.68        50    1165.00     566.06        73    1885.01     559.68        96    2210.00     587.43    \n",
      "     5      55.00     586.97        28     635.01     566.30        51    1175.00     565.58        74    1960.01     557.81        97    2215.00     589.38    \n",
      "     6      70.01     587.40        29     750.01     566.64        52    1180.01     565.48        75    1965.01     557.66        98    2235.01     591.79    \n",
      "     7      75.01     587.07        30     810.00     566.12        53    1185.01     565.75        76    1985.01     556.52        99    2245.01     593.31    \n",
      "     8     115.00     584.03        31     860.00     565.80        54    1330.01     565.67        77    1995.01     557.01       100    2250.00     594.28    \n",
      "     9     185.01     577.15        32     865.00     565.74        55    1400.01     566.45        78    2005.00     556.60       101    2255.00     595.44    \n",
      "    10     190.00     576.69        33     890.00     565.27        56    1460.01     566.43        79    2010.00     556.46       102    2260.00     595.69    \n",
      "    11     220.00     575.50        34     895.00     565.24        57    1500.01     566.78        80    2035.00     556.46       103    2340.00     607.51    \n",
      "    12     245.01     574.25        35     900.01     565.40        58    1515.01     566.72        81    2040.01     556.69       104    2345.00     608.29    \n",
      "    13     260.01     573.36        36     905.01     565.80        59    1520.01     566.75        82    2055.00     558.17       105    2370.00     611.00    \n",
      "    14     265.01     572.97        37     910.01     566.12        60    1585.00     567.84        83    2065.00     559.47       106    2385.00     612.46    \n",
      "    15     300.00     568.39        38     915.01     566.40        61    1590.00     567.85        84    2070.01     561.42       107    2430.01     616.42    \n",
      "    16     305.00     568.18        39     920.00     566.56        62    1725.00     565.09        85    2090.01     572.48       108    2435.01     617.18    \n",
      "    17     320.01     568.00        40     935.01     566.46        63    1765.01     564.54        86    2106.93     575.59       109    2440.01     618.45    \n",
      "    18     325.01     567.89        41     940.01     566.46        64    1770.01     564.52        87    2120.00     577.99       110    2445.00     619.67    \n",
      "    19     360.01     564.21        42     975.00     567.22        65    1800.01     565.96        88    2125.01     578.85       111    2450.00     620.75    \n",
      "    20     365.01     563.59        43     980.00     567.19        66    1805.01     566.10        89    2170.01     584.64       112    2453.91     620.98    \n",
      "    21     370.00     563.17        44     995.00     566.95        67    1810.01     566.18        90    2175.00     583.60    \n",
      "    22     380.00     563.17        45    1055.00     565.54        68    1865.00     566.11        91    2180.01     582.43    \n",
      "    23     385.00     564.42        46    1060.00     565.57        69    1870.00     565.78        92    2185.01     581.67    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 118:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2031653.71 339481.96, 2033642.03 337022.73)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     571.98        36     255.00     572.12        71     780.00     569.74       106    1910.00     560.07       141    2890.00     587.40    \n",
      "     2      10.00     577.57        37     285.00     571.84        72     880.00     569.11       107    1920.00     562.65       142    2895.01     585.89    \n",
      "     3      15.00     579.14        38     325.00     570.95        73     885.00     569.12       108    1924.99     563.99       143    2900.00     584.93    \n",
      "     4      20.00     576.52        39     330.00     570.81        74     930.00     568.89       109    1930.00     564.50       144    2925.00     586.67    \n",
      "     5      30.01     571.17        40     335.00     570.31        75     980.00     568.79       110    1995.00     566.71       145    2930.00     586.82    \n",
      "     6      35.00     570.70        41     340.00     570.25        76    1015.00     568.91       111    2065.00     564.53       146    2935.00     587.33    \n",
      "     7      45.00     571.16        42     359.99     569.90        77    1030.00     568.69       112    2070.00     564.46       147    2940.00     590.65    \n",
      "     8      50.00     570.93        43     365.00     569.93        78    1060.00     568.61       113    2175.00     564.20       148    2945.00     592.37    \n",
      "     9      55.00     570.62        44     370.00     570.14        79    1065.00     568.57       114    2180.00     564.24       149    2950.00     593.28    \n",
      "    10      60.00     570.67        45     375.00     570.47        80    1115.00     566.87       115    2325.00     566.97       150    2975.00     597.68    \n",
      "    11      65.00     570.90        46     380.00     570.56        81    1150.00     567.01       116    2330.00     566.94       151    2980.00     598.30    \n",
      "    12      70.00     571.20        47     400.00     570.46        82    1155.00     567.07       117    2455.00     565.32       152    3004.99     598.80    \n",
      "    13      75.00     571.15        48     410.00     570.50        83    1165.01     568.40       118    2510.00     565.24       153    3010.00     598.86    \n",
      "    14      80.00     571.13        49     425.00     570.26        84    1170.00     568.50       119    2553.38     565.40       154    3025.00     598.80    \n",
      "    15      85.01     571.03        50     430.01     570.23        85    1175.00     566.72       120    2560.00     565.43       155    3030.00     599.86    \n",
      "    16      90.00     570.85        51     435.00     570.14        86    1185.00     566.88       121    2565.00     561.97       156    3040.00     605.22    \n",
      "    17     100.00     570.57        52     450.00     569.55        87    1235.00     567.24       122    2570.00     558.65       157    3045.00     607.55    \n",
      "    18     105.00     570.51        53     455.00     569.38        88    1280.00     567.12       123    2600.00     559.11       158    3050.00     608.14    \n",
      "    19     110.00     570.50        54     460.01     569.27        89    1315.00     566.72       124    2605.00     559.12       159    3070.00     609.64    \n",
      "    20     120.00     570.40        55     465.00     568.96        90    1480.00     566.30       125    2665.00     556.24       160    3075.01     610.05    \n",
      "    21     125.00     570.38        56     470.00     568.34        91    1530.00     566.82       126    2670.00     556.10       161    3105.00     613.60    \n",
      "    22     130.00     571.01        57     475.00     567.89        92    1560.00     566.60       127    2720.00     556.11       162    3110.00     613.88    \n",
      "    23     135.00     571.67        58     480.00     567.85        93    1580.00     566.68       128    2725.00     556.31       163    3115.00     614.02    \n",
      "    24     140.00     572.38        59     495.00     567.85        94    1715.00     566.41       129    2745.00     558.57       164    3120.00     614.22    \n",
      "    25     145.00     572.43        60     500.00     567.88        95    1745.00     566.19       130    2750.00     559.42       165    3125.00     614.10    \n",
      "    26     150.00     572.24        61     505.00     567.85        96    1845.00     565.88       131    2760.01     563.24       166    3130.00     614.40    \n",
      "    27     155.00     572.15        62     515.01     567.86        97    1850.00     565.78       132    2765.00     565.79       167    3135.00     612.56    \n",
      "    28     165.00     572.23        63     520.00     568.13        98    1855.00     565.51       133    2775.00     571.66       168    3140.00     614.06    \n",
      "    29     175.00     572.12        64     525.00     569.37        99    1860.00     564.30       134    2780.00     572.99       169    3145.00     616.47    \n",
      "    30     180.00     572.13        65     530.00     569.72       100    1865.00     563.56       135    2794.04     575.44       170    3150.00     616.76    \n",
      "    31     190.00     572.23        66     545.00     570.52       101    1870.00     562.94       136    2805.00     577.35       171    3162.47     618.31    \n",
      "    32     195.00     572.25        67     670.00     569.84       102    1875.00     562.66       137    2820.00     579.80    \n",
      "    33     200.00     572.18        68     685.00     569.93       103    1890.00     561.96       138    2835.00     581.86    \n",
      "    34     205.00     572.19        69     695.00     569.90       104    1895.00     559.96       139    2840.01     582.50    \n",
      "    35     215.00     572.28        70     735.00     569.55       105    1905.00     559.96       140    2885.00     587.90    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 119:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2032558.17 339055.9, 2033955.97 337276.88)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     590.90        28     515.01     563.40        55    1490.01     564.92        82    1670.01     557.77       109    2115.01     601.16    \n",
      "     2      80.01     591.63        29     530.00     563.86        56    1495.01     564.95        83    1740.01     555.79       110    2120.01     600.83    \n",
      "     3     130.01     591.62        30     540.01     564.08        57    1500.01     564.95        84    1810.00     555.77       111    2125.00     600.74    \n",
      "     4     195.01     591.31        31     610.01     564.17        58    1505.01     563.58        85    1815.00     556.29       112    2130.00     600.87    \n",
      "     5     200.01     591.21        32     665.01     563.53        59    1510.00     560.77        86    1825.01     557.87       113    2150.01     603.39    \n",
      "     6     260.01     589.33        33     700.01     563.52        60    1515.01     558.29        87    1830.01     559.44       114    2155.01     604.79    \n",
      "     7     265.01     589.20        34     755.00     564.48        61    1520.01     558.20        88    1835.01     562.91       115    2160.00     607.23    \n",
      "     8     285.00     588.86        35     765.01     564.57        62    1545.01     560.36        89    1840.01     565.94       116    2165.00     607.67    \n",
      "     9     315.00     588.64        36     770.01     564.58        63    1560.01     561.75        90    1850.00     566.81       117    2175.01     607.96    \n",
      "    10     320.01     588.53        37     815.00     564.32        64    1570.00     562.79        91    1854.54     567.26       118    2180.00     608.37    \n",
      "    11     345.00     587.56        38     845.00     564.21        65    1575.01     562.71        92    1855.00     567.30       119    2185.00     609.00    \n",
      "    12     350.01     587.30        39     850.00     563.82        66    1580.01     562.34        93    1875.01     569.95       120    2190.00     609.68    \n",
      "    13     365.01     586.23        40     855.01     563.25        67    1590.01     561.49        94    1880.00     570.64       121    2210.01     612.83    \n",
      "    14     370.01     586.22        41     865.01     563.69        68    1595.00     560.31        95    1900.00     573.70       122    2215.01     614.15    \n",
      "    15     400.00     576.78        42     870.01     563.84        69    1600.00     559.03        96    1925.01     576.57       123    2220.01     615.59    \n",
      "    16     425.01     568.36        43     875.01     563.77        70    1605.01     558.31        97    1975.00     583.41       124    2225.01     616.89    \n",
      "    17     430.01     567.11        44     880.00     563.73        71    1610.01     558.46        98    1985.01     584.70       125    2230.00     618.11    \n",
      "    18     435.01     566.83        45     930.01     563.74        72    1613.82     560.34        99    1990.01     585.76       126    2235.01     618.33    \n",
      "    19     440.01     566.51        46     970.00     563.50        73    1615.01     560.93       100    1995.01     585.19       127    2245.00     618.31    \n",
      "    20     465.00     563.84        47    1010.01     563.52        74    1620.00     562.31       101    2020.01     579.88       128    2250.00     618.33    \n",
      "    21     470.00     563.56        48    1130.00     563.10        75    1625.00     562.46       102    2025.00     579.17       129    2255.00     617.88    \n",
      "    22     480.01     564.55        49    1255.00     563.88        76    1630.00     563.39       103    2030.00     579.87       130    2260.00     617.53    \n",
      "    23     485.01     565.23        50    1335.01     563.42        77    1635.00     565.58       104    2055.01     587.96       131    2262.47     617.95    \n",
      "    24     495.01     566.74        51    1345.00     563.47        78    1640.01     565.56       105    2060.01     589.86    \n",
      "    25     500.00     565.86        52    1375.01     563.05        79    1645.01     564.46       106    2085.01     597.68    \n",
      "    26     505.00     564.90        53    1380.00     563.05        80    1650.01     561.79       107    2105.00     601.71    \n",
      "    27     510.01     564.00        54    1435.01     563.68        81    1655.01     558.47       108    2110.01     602.13    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 120:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2033171.11 339033.47, 2034367.09 337568.4)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     594.02        25     305.00     566.57        49     610.00     564.52        73    1515.00     557.42        97    1685.00     582.45    \n",
      "     2      40.01     594.42        26     310.00     566.21        50     770.00     563.07        74    1520.00     558.77        98    1705.00     586.14    \n",
      "     3      65.00     592.98        27     315.00     565.52        51     775.00     563.11        75    1525.01     559.65        99    1710.00     587.29    \n",
      "     4      90.00     591.23        28     320.00     564.92        52     805.00     563.56        76    1530.00     560.35       100    1730.00     594.56    \n",
      "     5     105.00     590.51        29     330.01     563.82        53     825.00     563.57        77    1535.00     560.98       101    1735.01     596.13    \n",
      "     6     125.00     589.68        30     350.00     561.39        54     830.01     563.53        78    1540.00     561.56       102    1740.00     597.60    \n",
      "     7     130.00     587.47        31     355.00     560.90        55     860.01     562.87        79    1545.00     562.30       103    1745.00     599.43    \n",
      "     8     155.00     574.67        32     360.00     560.91        56     865.00     562.79        80    1550.00     563.57       104    1750.00     599.59    \n",
      "     9     160.00     572.15        33     370.00     561.23        57     940.00     564.42        81    1550.82     563.80       105    1755.00     599.34    \n",
      "    10     165.00     569.73        34     375.00     561.31        58     945.00     564.50        82    1555.00     564.99       106    1760.00     599.12    \n",
      "    11     170.00     568.36        35     385.00     561.43        59    1015.00     563.90        83    1560.00     565.67       107    1780.00     598.94    \n",
      "    12     185.00     566.54        36     465.01     562.89        60    1055.00     563.17        84    1590.00     565.99       108    1785.00     598.93    \n",
      "    13     215.00     563.10        37     470.00     562.84        61    1165.00     564.21        85    1595.00     565.93       109    1800.00     599.67    \n",
      "    14     220.00     562.69        38     510.00     560.89        62    1245.00     564.65        86    1600.01     566.14       110    1805.00     600.24    \n",
      "    15     225.00     563.45        39     520.00     560.56        63    1275.00     565.08        87    1610.00     569.22       111    1830.00     603.63    \n",
      "    16     230.00     564.26        40     525.00     560.54        64    1301.55     565.92        88    1615.00     570.79       112    1860.00     608.09    \n",
      "    17     240.00     566.02        41     555.00     563.43        65    1335.00     566.97        89    1630.01     575.97       113    1865.00     608.75    \n",
      "    18     245.00     567.76        42     565.00     564.29        66    1340.00     561.10        90    1635.00     577.16       114    1870.01     608.42    \n",
      "    19     265.00     568.66        43     570.01     563.80        67    1345.00     557.90        91    1640.00     577.86       115    1875.00     609.20    \n",
      "    20     270.00     568.58        44     580.00     562.31        68    1355.00     556.23        92    1645.00     578.49       116    1880.00     610.34    \n",
      "    21     285.00     567.63        45     585.00     561.59        69    1360.00     555.64        93    1655.00     578.31       117    1885.00     611.64    \n",
      "    22     290.00     567.10        46     590.00     562.12        70    1405.00     555.37        94    1660.01     578.33       118    1890.00     612.67    \n",
      "    23     295.00     566.70        47     595.00     563.00        71    1505.00     555.36        95    1665.00     578.62       119    1891.24     612.66    \n",
      "    24     300.01     566.85        48     605.00     564.36        72    1510.00     555.97        96    1670.00     579.55    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 121:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2033649.5 339452.06, 2034808.11 337889.82)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     597.82        21     295.00     561.76        41     995.00     564.06        61    1645.00     562.51        81    1805.00     597.46    \n",
      "     2      20.00     594.83        22     430.00     563.62        42    1075.00     563.50        62    1650.00     563.39        82    1810.00     598.31    \n",
      "     3      55.00     589.24        23     449.99     563.71        43    1080.00     563.53        63    1665.00     565.74        83    1820.00     598.70    \n",
      "     4      60.00     588.80        24     590.00     562.56        44    1175.00     564.77        64    1675.00     568.64        84    1825.00     598.32    \n",
      "     5      85.00     586.95        25     665.01     563.17        45    1180.00     564.81        65    1680.00     570.97        85    1835.00     596.10    \n",
      "     6      90.01     586.23        26     670.00     563.09        46    1185.00     564.81        66    1685.00     573.59        86    1840.00     596.54    \n",
      "     7      95.00     584.23        27     704.99     562.13        47    1270.00     563.94        67    1690.00     576.14        87    1845.00     598.17    \n",
      "     8     100.00     582.65        28     710.00     562.03        48    1385.00     564.68        68    1692.53     576.28        88    1850.00     599.47    \n",
      "     9     105.00     581.01        29     715.00     562.00        49    1390.00     564.76        69    1699.99     576.71        89    1854.99     601.39    \n",
      "    10     145.00     567.09        30     770.00     563.59        50    1415.00     565.99        70    1705.00     576.25        90    1860.00     601.59    \n",
      "    11     150.00     565.81        31     775.00     563.57        51    1420.00     566.33        71    1715.00     574.18        91    1880.00     601.71    \n",
      "    12     205.00     564.32        32     800.00     563.13        52    1425.00     565.54        72    1720.00     572.78        92    1900.00     601.98    \n",
      "    13     210.00     564.87        33     840.00     563.46        53    1429.37     564.62        73    1724.99     571.21        93    1920.00     601.74    \n",
      "    14     220.00     566.41        34     845.00     563.41        54    1430.00     564.49        74    1730.00     569.86        94    1925.00     601.84    \n",
      "    15     225.00     566.90        35     885.00     562.71        55    1460.00     558.38        75    1735.00     571.17        95    1930.00     606.03    \n",
      "    16     230.00     565.85        36     895.00     562.33        56    1485.00     555.06        76    1740.00     572.74        96    1935.00     611.26    \n",
      "    17     245.00     563.09        37     900.00     562.37        57    1490.00     554.91        77    1750.01     576.07        97    1940.00     613.79    \n",
      "    18     250.00     562.45        38     940.00     563.11        58    1625.00     554.91        78    1755.00     577.98        98    1944.99     615.14    \n",
      "    19     270.00     561.95        39     970.00     563.83        59    1630.00     556.36        79    1785.00     589.92    \n",
      "    20     280.00     561.79        40     975.00     563.92        60    1640.00     560.95        80    1800.00     594.68    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 122:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2034041.93 339979.04, 2035350.04 338364.47)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     599.48        22     525.00     563.05        43    1290.00     565.01        64    1695.00     554.84        85    1945.00     587.67    \n",
      "     2      60.01     591.90        23     555.00     562.37        44    1375.00     563.60        65    1700.00     554.91        86    1950.01     588.29    \n",
      "     3      65.00     590.81        24     625.00     562.35        45    1425.00     563.65        66    1755.00     557.72        87    1985.00     596.22    \n",
      "     4      75.00     586.31        25     630.00     562.14        46    1450.00     563.86        67    1760.00     559.49        88    1990.01     597.32    \n",
      "     5      80.01     584.42        26     745.00     562.14        47    1455.00     563.85        68    1780.00     570.44        89    1995.00     597.85    \n",
      "     6     110.00     573.42        27     820.00     561.98        48    1460.00     563.79        69    1785.00     571.56        90    2005.00     597.59    \n",
      "     7     115.00     571.82        28     860.00     561.56        49    1465.00     563.81        70    1796.62     573.13        91    2010.01     597.55    \n",
      "     8     145.00     563.95        29     865.00     561.57        50    1540.00     565.03        71    1810.01     574.94        92    2015.00     597.63    \n",
      "     9     150.00     563.56        30     950.00     562.86        51    1545.00     564.95        72    1815.00     575.52        93    2020.00     597.62    \n",
      "    10     175.00     563.10        31     965.00     563.01        52    1550.00     564.18        73    1835.00     577.62        94    2025.00     597.38    \n",
      "    11     180.01     562.93        32     970.00     562.97        53    1555.00     563.54        74    1850.01     579.52        95    2030.00     599.29    \n",
      "    12     185.00     562.67        33    1030.00     562.15        54    1565.00     562.85        75    1855.00     580.11        96    2035.01     601.76    \n",
      "    13     225.00     561.18        34    1035.01     562.18        55    1567.00     562.70        76    1860.00     579.97        97    2040.00     603.80    \n",
      "    14     230.00     561.09        35    1075.01     562.08        56    1570.00     562.47        77    1880.00     577.50        98    2055.01     609.01    \n",
      "    15     265.00     561.79        36    1105.00     562.21        57    1580.00     561.63        78    1885.00     576.98        99    2060.00     610.44    \n",
      "    16     270.00     561.83        37    1175.01     563.68        58    1585.00     560.54        79    1890.01     577.20       100    2065.00     611.07    \n",
      "    17     355.00     561.32        38    1215.01     564.20        59    1590.00     559.15        80    1905.00     581.13       101    2077.98     610.67    \n",
      "    18     395.00     561.52        39    1220.00     564.16        60    1595.00     557.82        81    1910.01     582.83    \n",
      "    19     410.00     561.53        40    1230.00     564.01        61    1600.00     556.41        82    1915.00     584.47    \n",
      "    20     415.00     561.56        41    1235.01     564.06        62    1605.00     554.88        83    1920.00     584.96    \n",
      "    21     500.00     563.02        42    1285.00     565.02        63    1610.00     554.64        84    1940.00     587.16    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 123:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2034325.98 340337.84, 2035312.66 339366.1, 2035828.43 338655.99)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     597.50        35     555.00     559.75        69    1190.00     563.05       103    1590.00     558.24       137    1990.01     571.49    \n",
      "     2      15.01     599.19        36     580.00     559.69        70    1195.00     562.93       104    1595.00     560.77       138    1995.00     573.89    \n",
      "     3      20.00     599.58        37     600.00     560.08        71    1210.01     562.67       105    1600.01     559.48       139    2000.01     575.81    \n",
      "     4      30.00     599.13        38     625.00     559.87        72    1215.01     562.69       106    1610.01     557.36       140    2005.00     575.74    \n",
      "     5      35.00     599.18        39     630.00     559.95        73    1265.00     563.50       107    1615.00     555.98       141    2030.00     576.00    \n",
      "     6      40.00     600.40        40     655.01     560.52        74    1270.00     563.54       108    1620.00     554.50       142    2035.00     576.22    \n",
      "     7      45.00     601.27        41     660.00     560.50        75    1320.00     563.63       109    1625.00     554.66       143    2040.00     577.41    \n",
      "     8      50.00     600.29        42     675.00     560.35        76    1375.00     563.14       110    1635.01     554.88       144    2045.00     578.98    \n",
      "     9      70.00     599.53        43     680.00     560.38        77    1384.85     563.15       111    1680.00     554.88       145    2050.00     580.52    \n",
      "    10      75.01     599.13        44     740.00     561.26        78    1415.00     563.27       112    1685.00     554.92       146    2060.00     580.49    \n",
      "    11      85.00     598.07        45     750.00     561.22        79    1420.00     563.32       113    1730.00     556.59       147    2065.00     580.54    \n",
      "    12      90.00     597.57        46     760.01     561.35        80    1430.01     564.02       114    1735.00     556.59       148    2100.00     584.04    \n",
      "    13     140.00     593.04        47     780.00     560.58        81    1435.00     564.14       115    1740.00     556.65       149    2105.00     584.61    \n",
      "    14     150.00     592.26        48     785.00     560.43        82    1445.01     564.01       116    1745.00     556.51       150    2110.00     585.88    \n",
      "    15     155.00     591.42        49     805.00     560.06        83    1450.00     564.13       117    1765.00     555.57       151    2130.00     592.05    \n",
      "    16     205.00     571.83        50     860.01     560.19        84    1460.00     564.59       118    1775.00     555.57       152    2135.00     593.69    \n",
      "    17     210.00     569.78        51     900.00     560.70        85    1465.00     564.71       119    1780.01     555.45       153    2140.00     594.79    \n",
      "    18     225.00     563.70        52     905.00     560.66        86    1475.00     563.13       120    1795.00     556.04       154    2145.01     594.77    \n",
      "    19     230.00     562.74        53     930.00     560.39        87    1480.00     562.46       121    1870.00     559.38       155    2160.00     595.58    \n",
      "    20     335.00     562.74        54     940.00     560.54        88    1490.01     561.64       122    1875.00     560.93       156    2165.00     596.36    \n",
      "    21     340.00     563.77        55     960.00     561.05        89    1495.00     561.35       123    1885.00     564.87       157    2175.00     598.10    \n",
      "    22     345.01     565.41        56     965.00     561.13        90    1500.00     561.15       124    1890.00     565.54       158    2180.00     598.90    \n",
      "    23     350.01     565.56        57     970.00     561.17        91    1512.94     560.89       125    1902.09     564.94       159    2185.00     601.00    \n",
      "    24     365.01     564.43        58     975.00     561.18        92    1515.00     560.85       126    1905.00     564.79       160    2190.00     603.25    \n",
      "    25     370.00     563.99        59     980.00     562.01        93    1520.01     560.46       127    1910.01     565.02       161    2200.00     603.93    \n",
      "    26     385.00     560.82        60     985.01     562.43        94    1525.00     560.45       128    1915.00     564.91       162    2205.00     603.90    \n",
      "    27     390.00     560.93        61     990.01     562.61        95    1530.00     561.24       129    1930.00     564.51       163    2230.00     603.54    \n",
      "    28     405.01     561.56        62    1040.00     562.33        96    1540.00     561.77       130    1940.00     564.87       164    2235.01     602.34    \n",
      "    29     410.01     561.59        63    1045.01     562.34        97    1545.01     562.00       131    1945.00     565.10       165    2240.00     603.32    \n",
      "    30     465.00     560.54        64    1080.00     563.09        98    1555.00     562.39       132    1965.00     568.24       166    2250.00     607.19    \n",
      "    31     505.00     560.10        65    1110.01     562.54        99    1560.00     562.52       133    1970.01     569.32       167    2255.00     608.74    \n",
      "    32     520.00     559.99        66    1150.01     562.69       100    1565.00     562.42       134    1975.00     570.36       168    2262.51     608.82    \n",
      "    33     540.00     559.70        67    1155.00     562.74       101    1580.00     561.90       135    1980.00     571.08    \n",
      "    34     545.00     559.67        68    1185.00     563.26       102    1585.00     556.37       136    1985.00     571.10    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 124:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2034834.27 341249.77, 2036067.62 340068.74, 2036575.92 339261.45)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     600.51        30     435.00     560.31        59    1610.00     562.95        88    2050.01     556.29       117    2420.00     580.80    \n",
      "     2      14.99     601.45        31     445.00     560.35        60    1615.00     563.00        89    2065.00     554.53       118    2425.00     581.28    \n",
      "     3      25.00     600.68        32     450.00     560.76        61    1645.00     563.56        90    2070.00     554.33       119    2440.00     582.88    \n",
      "     4      30.00     601.36        33     455.00     561.07        62    1705.00     564.25        91    2100.00     556.50       120    2455.00     584.84    \n",
      "     5      35.00     601.79        34     515.00     560.29        63    1707.63     564.26        92    2115.00     556.82       121    2470.00     586.65    \n",
      "     6      60.01     600.89        35     575.00     559.80        64    1730.00     564.41        93    2120.00     558.35       122    2475.00     588.05    \n",
      "     7      65.01     600.63        36     580.00     559.97        65    1810.00     564.21        94    2127.16     561.11       123    2480.00     589.76    \n",
      "     8      75.00     600.01        37     605.00     562.29        66    1815.00     564.26        95    2130.00     562.20       124    2485.00     590.44    \n",
      "     9      80.00     599.40        38     610.00     562.61        67    1823.47     564.45        96    2135.00     564.06       125    2490.00     590.79    \n",
      "    10      85.00     597.42        39     630.00     561.48        68    1830.01     564.59        97    2140.00     563.56       126    2495.00     591.25    \n",
      "    11     105.00     586.79        40     635.00     561.15        69    1835.00     563.37        98    2145.00     563.18       127    2500.00     592.31    \n",
      "    12     125.00     576.37        41     640.00     560.89        70    1850.00     555.93        99    2185.00     562.15       128    2505.00     592.78    \n",
      "    13     130.00     574.51        42     650.00     560.59        71    1855.00     555.53       100    2190.00     562.17       129    2525.00     593.84    \n",
      "    14     135.00     572.73        43     905.01     560.58        72    1890.00     555.52       101    2225.00     562.77       130    2530.00     594.14    \n",
      "    15     155.00     565.16        44     940.00     560.41        73    1895.00     556.39       102    2250.00     562.68       131    2540.00     594.79    \n",
      "    16     160.00     563.33        45     990.00     560.67        74    1900.00     558.98       103    2255.00     562.33       132    2545.00     595.04    \n",
      "    17     165.00     562.05        46    1020.00     561.01        75    1905.00     559.82       104    2265.00     561.25       133    2550.00     595.47    \n",
      "    18     170.01     561.23        47    1110.00     561.79        76    1915.01     560.55       105    2270.00     561.24       134    2565.00     596.87    \n",
      "    19     200.00     565.40        48    1190.00     560.77        77    1920.00     560.78       106    2300.01     563.07       135    2570.00     597.37    \n",
      "    20     205.00     565.74        49    1195.00     560.83        78    1930.00     561.04       107    2305.00     563.49       136    2600.00     600.43    \n",
      "    21     210.00     565.01        50    1365.00     563.49        79    1935.00     560.85       108    2310.00     564.10       137    2620.00     602.24    \n",
      "    22     215.00     563.88        51    1370.00     563.54        80    1940.00     560.56       109    2335.00     575.56       138    2625.00     602.38    \n",
      "    23     220.00     562.60        52    1405.00     562.33        81    1945.00     557.97       110    2340.00     575.97       139    2630.00     602.40    \n",
      "    24     225.00     561.00        53    1415.00     561.87        82    1949.99     555.52       111    2375.00     578.41       140    2635.00     603.63    \n",
      "    25     230.00     560.26        54    1435.01     562.11        83    1985.00     557.02       112    2380.00     578.97       141    2639.99     603.78    \n",
      "    26     275.00     560.05        55    1460.00     562.23        84    1990.00     556.89       113    2385.00     579.40       142    2645.01     604.03    \n",
      "    27     315.00     559.68        56    1500.00     562.92        85    2035.00     554.35       114    2390.00     579.47       143    2661.61     604.62    \n",
      "    28     340.00     559.88        57    1510.01     562.98        86    2040.00     555.34       115    2395.01     579.00    \n",
      "    29     395.00     559.92        58    1540.00     562.70        87    2045.00     556.66       116    2400.00     579.02    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 125:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2035379.94 341705.74, 2037405.63 340203.29)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     620.73        18     310.00     559.24        35    1870.00     561.28        52    2135.00     553.74        69    2360.00     583.70    \n",
      "     2       5.00     620.70        19     430.00     558.95        36    1955.00     561.61        53    2160.00     559.61        70    2365.00     583.66    \n",
      "     3      10.00     620.31        20     450.00     558.70        37    1960.00     561.66        54    2165.00     562.02        71    2390.00     581.90    \n",
      "     4      35.00     617.16        21     455.00     558.67        38    1965.00     561.77        55    2180.00     572.18        72    2395.00     582.02    \n",
      "     5      39.99     616.44        22     560.00     559.37        39    1970.00     561.94        56    2185.00     573.44        73    2400.00     583.42    \n",
      "     6      55.00     614.17        23     565.00     559.37        40    1972.75     561.97        57    2193.43     572.79        74    2410.00     586.31    \n",
      "     7      60.00     612.10        24     570.00     559.44        41    1975.00     561.99        58    2195.00     572.67        75    2415.00     587.47    \n",
      "     8      95.00     585.10        25     670.00     560.08        42    1980.00     560.64        59    2200.00     572.34        76    2419.99     588.52    \n",
      "     9     100.01     581.21        26     825.00     559.04        43    1985.00     559.22        60    2205.00     572.39        77    2425.00     589.43    \n",
      "    10     105.00     577.18        27    1150.00     560.87        44    2005.00     553.29        61    2225.00     574.12        78    2460.00     589.75    \n",
      "    11     110.00     573.53        28    1155.00     560.79        45    2010.00     553.50        62    2235.00     575.15        79    2470.00     590.00    \n",
      "    12     149.99     559.48        29    1165.00     560.56        46    2015.00     553.94        63    2240.00     575.62        80    2475.00     590.51    \n",
      "    13     155.00     559.14        30    1170.00     560.53        47    2035.00     556.40        64    2270.00     577.70        81    2485.00     591.74    \n",
      "    14     180.00     559.30        31    1225.00     560.73        48    2040.00     554.86        65    2305.00     580.58        82    2490.00     592.26    \n",
      "    15     205.00     558.84        32    1480.00     559.40        49    2045.00     553.11        66    2320.00     581.63        83    2510.00     593.94    \n",
      "    16     210.00     558.80        33    1620.00     560.56        50    2125.00     553.12        67    2325.00     581.91        84    2522.06     594.83    \n",
      "    17     215.00     558.79        34    1780.00     560.64        51    2130.00     553.24        68    2340.00     582.46    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 126:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2035488.32 342113.12, 2036990.77 341702, 2038149.37 341604.83)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     642.25        26    1095.01     558.63        51    1915.00     552.29        76    2130.00     560.39       101    2425.00     576.48    \n",
      "     2      25.01     640.89        27    1150.00     558.33        52    1920.00     556.07        77    2135.00     562.45       102    2445.00     578.38    \n",
      "     3      30.00     640.55        28    1155.00     558.33        53    1960.00     554.92        78    2140.00     561.92       103    2450.00     578.80    \n",
      "     4      35.00     640.18        29    1235.00     558.78        54    1965.00     556.37        79    2145.00     560.67       104    2460.00     579.19    \n",
      "     5      40.00     639.71        30    1435.00     558.79        55    1975.00     560.01        80    2155.00     562.53       105    2480.00     579.66    \n",
      "     6      55.00     638.03        31    1525.01     559.55        56    1977.69     560.58        81    2160.00     563.30       106    2500.00     580.39    \n",
      "     7     125.00     629.26        32    1557.68     560.06        57    1980.00     561.06        82    2170.00     563.86       107    2505.00     580.61    \n",
      "     8     165.00     623.89        33    1630.01     561.14        58    1985.00     561.83        83    2175.00     564.07       108    2510.00     579.64    \n",
      "     9     205.00     618.17        34    1640.00     561.21        59    1990.01     561.58        84    2180.00     564.13       109    2515.00     579.03    \n",
      "    10     210.01     617.52        35    1645.00     561.03        60    1995.00     561.79        85    2200.00     564.61       110    2545.00     571.22    \n",
      "    11     225.00     615.70        36    1727.96     556.75        61    2000.00     561.83        86    2205.00     564.67       111    2550.00     571.26    \n",
      "    12     230.01     614.97        37    1740.00     556.13        62    2050.01     561.18        87    2225.00     564.73       112    2560.00     572.74    \n",
      "    13     265.01     609.56        38    1745.00     558.06        63    2055.00     561.19        88    2240.00     564.93       113    2565.00     571.77    \n",
      "    14     270.00     607.33        39    1750.01     558.68        64    2060.00     561.42        89    2270.00     566.60       114    2570.00     571.13    \n",
      "    15     325.00     576.33        40    1755.00     557.73        65    2070.01     562.10        90    2275.00     566.80       115    2580.00     570.74    \n",
      "    16     330.00     573.58        41    1760.00     555.00        66    2080.00     562.83        91    2300.00     567.67       116    2585.00     571.12    \n",
      "    17     335.00     571.39        42    1805.00     551.90        67    2085.00     563.00        92    2310.00     567.96       117    2615.00     582.51    \n",
      "    18     340.01     569.36        43    1810.01     551.91        68    2090.01     562.87        93    2315.00     568.16       118    2620.00     583.31    \n",
      "    19     370.00     558.18        44    1850.01     554.71        69    2095.00     561.72        94    2330.00     568.99       119    2625.00     583.94    \n",
      "    20     375.00     558.14        45    1855.00     554.99        70    2100.00     560.77        95    2350.00     570.55       120    2650.00     586.69    \n",
      "    21     400.01     558.87        46    1860.00     554.82        71    2105.00     560.71        96    2360.00     571.69       121    2655.00     588.37    \n",
      "    22     405.00     558.97        47    1885.00     553.50        72    2110.00     560.54        97    2385.00     573.65       122    2690.00     588.91    \n",
      "    23     545.00     558.38        48    1890.01     553.31        73    2115.00     560.04        98    2390.00     573.89       123    2695.00     589.03    \n",
      "    24     645.00     558.70        49    1895.00     553.21        74    2120.00     559.61        99    2405.00     574.42       124    2720.35     590.21    \n",
      "    25     815.00     557.95        50    1910.01     552.19        75    2125.00     559.74       100    2410.00     574.87    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 127:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2035581.76 342767.17, 2036538.54 342535.45, 2039319.19 343275.46)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     623.27        28     370.00     561.26        55    1595.00     555.34        82    2190.00     576.08       109    3459.99     582.64    \n",
      "     2      20.00     622.54        29     375.00     560.32        56    1599.99     554.28        83    2195.00     576.21       110    3464.99     582.71    \n",
      "     3      29.99     622.38        30     425.00     560.22        57    1604.99     555.25        84    2200.00     576.30       111    3494.99     582.94    \n",
      "     4      40.00     622.12        31     430.00     560.00        58    1610.00     557.88        85    2550.00     579.59       112    3499.99     583.03    \n",
      "     5      44.99     622.02        32     439.99     559.40        59    1613.10     559.25        86    2605.00     580.50       113    3505.00     582.93    \n",
      "     6      55.00     621.89        33     444.99     559.24        60    1615.00     560.09        87    2619.99     580.58       114    3510.00     582.75    \n",
      "     7      70.00     621.94        34     480.00     558.96        61    1645.00     560.73        88    2754.99     584.12       115    3540.00     581.90    \n",
      "     8      80.00     622.12        35     515.00     558.42        62    1755.00     561.00        89    2765.00     584.16       116    3544.99     581.73    \n",
      "     9      85.00     622.14        36     910.00     558.34        63    1830.00     559.98        90    2864.99     584.98       117    3554.99     581.30    \n",
      "    10      95.00     619.17        37     954.99     557.94        64    1835.00     559.97        91    2885.00     584.91       118    3560.00     581.05    \n",
      "    11     100.00     617.71        38     984.44     557.43        65    1904.99     560.97        92    2949.99     585.09       119    3574.99     580.18    \n",
      "    12     160.00     604.32        39     994.99     557.18        66    1910.00     561.20        93    2974.99     585.01       120    3615.00     579.17    \n",
      "    13     195.00     597.01        40    1019.99     557.15        67    1970.00     569.05        94    3050.00     585.16       121    3675.00     577.79    \n",
      "    14     200.00     596.43        41    1200.00     558.60        68    1984.99     570.73        95    3054.99     585.13       122    3684.99     577.52    \n",
      "    15     230.00     594.98        42    1230.00     558.63        69    1989.99     571.18        96    3095.00     584.21       123    3689.99     577.43    \n",
      "    16     234.99     594.67        43    1235.00     558.66        70    2035.00     573.45        97    3130.00     583.82       124    3705.00     577.32    \n",
      "    17     270.00     591.90        44    1404.99     561.50        71    2094.99     575.64        98    3169.99     583.80       125    3710.00     577.38    \n",
      "    18     275.00     590.94        45    1409.99     559.34        72    2115.00     575.71        99    3194.99     583.67       126    3714.99     577.31    \n",
      "    19     280.00     588.14        46    1410.36     559.12        73    2124.99     575.69       100    3290.00     583.63       127    3769.99     575.88    \n",
      "    20     295.00     578.58        47    1415.00     556.34        74    2130.00     575.75       101    3295.00     583.68       128    3774.99     575.84    \n",
      "    21     300.00     577.34        48    1420.00     554.58        75    2135.00     575.89       102    3365.00     583.62       129    3780.00     575.76    \n",
      "    22     305.00     577.09        49    1425.00     552.92        76    2140.00     576.08       103    3389.99     583.91       130    3794.99     575.14    \n",
      "    23     310.00     576.88        50    1429.99     551.34        77    2145.00     576.07       104    3395.00     583.91       131    3845.00     573.67    \n",
      "    24     315.00     576.48        51    1574.99     551.35        78    2154.99     575.97       105    3400.00     583.85       132    3849.99     573.47    \n",
      "    25     330.00     573.52        52    1580.00     551.88        79    2165.00     575.95       106    3405.00     583.75       133    3861.87     572.91    \n",
      "    26     334.99     572.45        53    1585.00     553.60        80    2179.99     576.03       107    3420.00     583.27    \n",
      "    27     339.99     570.83        54    1590.00     555.35        81    2185.00     576.02       108    3425.00     583.31    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 128:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2035746.2 343267.98, 2036232.07 343357.68, 2036725.41 343566.98, 2037517.75 343761.32)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     627.97        24     365.01     563.24        47     640.01     557.29        70    1220.00     558.63        93    1515.01     560.70    \n",
      "     2       5.00     626.82        25     370.01     562.89        48     645.01     557.03        71    1235.01     558.67        94    1520.01     560.74    \n",
      "     3      10.01     625.82        26     380.01     562.76        49     650.01     557.11        72    1290.01     559.18        95    1535.00     566.91    \n",
      "     4      15.01     624.97        27     385.01     562.72        50     675.01     558.03        73    1295.00     559.17        96    1540.01     569.72    \n",
      "     5      30.01     622.61        28     415.01     561.58        51     715.01     560.76        74    1330.01     558.57        97    1550.00     576.50    \n",
      "     6      35.00     621.60        29     420.01     561.48        52     720.01     561.31        75    1335.00     557.81        98    1565.00     577.46    \n",
      "     7      55.00     614.64        30     450.01     561.10        53     725.00     561.34        76    1340.01     557.43        99    1590.01     579.52    \n",
      "     8      60.01     613.16        31     460.01     561.09        54     800.01     560.84        77    1355.01     557.43       100    1595.01     579.87    \n",
      "     9      65.00     612.38        32     460.34     560.86        55     835.01     560.81        78    1360.00     557.49       101    1630.01     582.07    \n",
      "    10      80.01     612.72        33     465.01     557.66        56     875.00     560.35        79    1370.00     557.43       102    1645.01     583.16    \n",
      "    11      85.00     612.37        34     470.00     555.61        57     880.00     560.35        80    1400.01     557.43       103    1655.01     583.59    \n",
      "    12     135.00     607.68        35     485.00     555.88        58     960.01     560.74        81    1405.01     557.82       104    1705.01     585.08    \n",
      "    13     140.01     607.29        36     494.08     555.93        59    1005.01     560.35        82    1410.00     558.43       105    1725.00     585.50    \n",
      "    14     180.00     606.64        37     505.01     555.98        60    1029.98     560.32        83    1425.00     558.92       106    1730.01     585.68    \n",
      "    15     185.00     605.03        38     550.00     552.05        61    1085.01     560.26        84    1430.01     559.25       107    1735.01     585.83    \n",
      "    16     200.00     598.25        39     555.01     551.57        62    1100.01     560.14        85    1435.00     559.54       108    1740.00     585.83    \n",
      "    17     205.01     595.86        40     560.01     550.93        63    1110.01     560.27        86    1440.01     559.43       109    1745.01     585.75    \n",
      "    18     210.00     593.72        41     565.00     550.90        64    1115.01     560.30        87    1450.01     559.03       110    1750.00     585.59    \n",
      "    19     235.01     587.57        42     620.00     550.91        65    1125.01     560.24        88    1455.01     558.37       111    1755.00     585.66    \n",
      "    20     270.01     578.47        43     625.01     551.88        66    1130.00     560.15        89    1460.00     557.67       112    1845.81     586.46    \n",
      "    21     275.00     577.14        44     630.01     553.72        67    1135.01     560.02        90    1465.01     557.44    \n",
      "    22     300.01     570.24        45     635.00     555.65        68    1175.01     559.31        91    1505.01     557.46    \n",
      "    23     305.01     569.05        46     635.51     555.82        69    1180.00     559.26        92    1510.00     558.98    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 129:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2035940.55 343895.87, 2036202.17 343851.02, 2036501.17 343783.75, 2037517.75 343970.62)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     610.57        18     240.00     567.65        35     435.00     554.71        52    1085.00     558.51        69    1390.00     579.81    \n",
      "     2      40.01     606.21        19     265.44     565.45        36     445.00     555.92        53    1090.00     558.48        70    1405.00     579.98    \n",
      "     3      45.00     605.32        20     270.00     564.71        37     450.00     556.14        54    1120.00     557.96        71    1410.00     580.11    \n",
      "     4      60.00     597.64        21     270.05     564.70        38     455.00     556.30        55    1125.01     558.02        72    1420.00     580.59    \n",
      "     5      65.00     595.17        22     290.01     560.32        39     460.00     556.56        56    1155.00     558.80        73    1425.00     580.78    \n",
      "     6      70.00     593.85        23     295.00     558.63        40     464.96     556.94        57    1160.00     558.99        74    1440.00     580.94    \n",
      "     7      75.00     594.16        24     300.00     556.35        41     505.00     560.05        58    1165.00     559.43        75    1450.00     581.15    \n",
      "     8      95.01     595.64        25     305.00     552.96        42     545.00     559.63        59    1170.00     560.82        76    1459.99     581.20    \n",
      "     9     100.00     595.57        26     310.00     552.03        43     570.00     559.11        60    1175.00     562.92        77    1490.00     583.03    \n",
      "    10     140.00     590.32        27     315.01     554.65        44     571.91     559.06        61    1180.00     565.20        78    1495.00     583.27    \n",
      "    11     145.00     589.92        28     320.00     554.81        45     575.00     559.01        62    1190.00     569.00        79    1505.00     583.71    \n",
      "    12     150.00     590.31        29     330.00     553.75        46     675.00     559.65        63    1195.00     571.25        80    1510.00     584.07    \n",
      "    13     155.00     590.14        30     360.00     551.02        47     760.00     558.52        64    1200.00     571.70        81    1515.00     584.22    \n",
      "    14     160.00     588.41        31     365.00     550.66        48     900.00     557.80        65    1240.00     573.31        82    1520.00     584.28    \n",
      "    15     175.01     582.93        32     420.00     550.65        49     995.00     558.12        66    1300.00     576.78        83    1525.00     584.31    \n",
      "    16     180.00     581.20        33     425.00     552.94        50    1010.00     558.02        67    1375.00     579.24        84    1605.52     583.46    \n",
      "    17     235.00     568.27        34     430.00     553.92        51    1035.00     558.04        68    1385.00     579.70    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 130:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2036149.85 344553.66, 2036590.86 344284.57, 2036904.81 344060.32, 2037532.7 344037.9)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     590.28        24     160.00     572.54        47     605.00     556.09        70     890.00     558.42        93    1215.00     573.72    \n",
      "     2      10.00     589.44        25     165.00     572.27        48     609.99     557.62        71     895.00     558.67        94    1245.00     573.96    \n",
      "     3      14.99     587.07        26     174.99     571.86        49     615.00     559.59        72     902.44     558.60        95    1250.00     574.06    \n",
      "     4      25.00     581.86        27     179.99     571.15        50     620.00     558.63        73     909.99     558.44        96    1280.00     575.33    \n",
      "     5      30.00     578.77        28     229.99     560.19        51     625.00     554.70        74     915.00     558.06        97    1285.00     575.48    \n",
      "     6      34.99     574.93        29     265.00     560.23        52     630.00     552.98        75     920.00     557.64        98    1340.00     576.61    \n",
      "     7      39.99     571.19        30     339.99     561.04        53     660.00     550.34        76     925.00     556.76        99    1345.00     576.75    \n",
      "     8      45.00     571.38        31     345.00     561.06        54     674.99     552.25        77     929.99     556.59       100    1349.99     576.98    \n",
      "     9      50.00     571.60        32     440.00     560.89        55     679.99     552.25        78    1019.99     556.59       101    1364.99     577.87    \n",
      "    10      65.00     572.35        33     445.00     561.31        56     705.00     550.42        79    1025.00     557.34       102    1370.00     578.13    \n",
      "    11      70.00     572.67        34     450.00     561.83        57     710.00     550.33        80    1030.00     558.40       103    1375.00     578.30    \n",
      "    12      74.99     572.78        35     454.99     562.32        58     784.99     550.31        81    1035.00     559.49       104    1380.00     579.42    \n",
      "    13      80.00     572.78        36     475.00     565.44        59     790.00     551.11        82    1039.99     560.95       105    1385.00     579.59    \n",
      "    14      85.00     572.75        37     479.99     565.07        60     800.00     555.01        83    1045.00     561.52       106    1400.00     579.99    \n",
      "    15      89.99     572.63        38     495.00     562.95        61     804.99     557.17        84    1050.00     562.24       107    1405.00     580.33    \n",
      "    16     100.00     572.27        39     500.00     562.27        62     810.00     558.89        85    1060.00     565.22       108    1410.00     580.71    \n",
      "    17     105.00     572.30        40     505.00     561.91        63     815.42     558.93        86    1065.00     566.64       109    1414.99     580.98    \n",
      "    18     110.00     572.37        41     516.62     561.74        64     850.00     559.19        87    1069.99     567.72       110    1500.00     582.63    \n",
      "    19     130.00     572.48        42     545.00     561.37        65     855.00     559.38        88    1075.00     568.47       111    1505.00     582.69    \n",
      "    20     135.00     572.71        43     550.00     561.38        66     859.99     559.14        89    1110.00     570.29       112    1530.73     582.86    \n",
      "    21     140.00     573.01        44     555.00     561.29        67     870.00     558.26        90    1114.99     570.52    \n",
      "    22     145.00     573.12        45     559.99     560.82        68     875.00     558.01        91    1175.00     572.87    \n",
      "    23     150.00     573.14        46     590.10     557.66        69     885.00     558.22        92    1179.99     573.03    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 131:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2036144.8 344604.68, 2036560.51 344596.83, 2036937 344639.97, 2037309.57 344616.44, 2038023.34 344518.4)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     590.50        28     250.00     568.96        55     680.00     560.86        82    1035.01     561.52       109    1365.00     565.91    \n",
      "     2       5.00     590.06        29     255.01     569.66        56     710.01     560.96        83    1060.01     566.11       110    1370.00     565.85    \n",
      "     3      10.00     589.00        30     275.00     570.08        57     765.01     560.72        84    1065.01     567.31       111    1400.01     566.32    \n",
      "     4      40.01     571.39        31     280.00     570.15        58     770.01     560.90        85    1075.01     569.87       112    1440.00     567.35    \n",
      "     5      45.00     569.52        32     285.00     569.78        59     775.00     561.30        86    1080.01     569.67       113    1445.01     568.23    \n",
      "     6      55.00     569.57        33     295.00     568.76        60     794.74     560.96        87    1090.01     567.99       114    1450.00     569.15    \n",
      "     7      60.00     569.46        34     305.00     568.21        61     800.00     560.69        88    1095.00     566.96       115    1460.01     570.31    \n",
      "     8      75.00     569.03        35     310.01     567.97        62     805.00     560.53        89    1100.01     566.27       116    1465.00     570.32    \n",
      "     9      80.00     568.61        36     335.00     567.46        63     806.59     560.54        90    1105.00     565.76       117    1480.00     569.92    \n",
      "    10      95.01     563.16        37     340.00     567.23        64     810.00     560.56        91    1110.00     565.37       118    1485.00     570.07    \n",
      "    11     100.00     561.85        38     345.00     566.82        65     815.00     560.21        92    1120.00     564.79       119    1510.00     571.28    \n",
      "    12     105.00     560.81        39     350.00     566.44        66     820.00     559.07        93    1125.00     565.06       120    1515.01     571.40    \n",
      "    13     110.00     560.24        40     365.01     565.54        67     825.00     557.22        94    1145.00     565.49       121    1530.01     571.37    \n",
      "    14     115.00     560.93        41     370.01     565.28        68     830.01     555.07        95    1150.00     565.29       122    1650.00     572.17    \n",
      "    15     120.00     561.34        42     375.01     564.63        69     835.01     552.47        96    1168.05     565.08       123    1655.00     572.24    \n",
      "    16     125.00     561.65        43     395.00     561.22        70     840.01     552.21        97    1180.00     564.77       124    1685.00     572.89    \n",
      "    17     130.00     561.67        44     405.00     561.18        71     845.43     551.53        98    1185.01     564.67       125    1705.01     573.08    \n",
      "    18     140.00     561.33        45     410.00     561.35        72     860.44     550.06        99    1190.00     564.62       126    1735.00     573.25    \n",
      "    19     150.01     560.88        46     415.78     561.62        73     930.01     550.05       100    1205.00     564.36       127    1740.00     573.19    \n",
      "    20     165.00     560.50        47     420.00     561.61        74     935.01     550.00       101    1230.01     564.15       128    1755.00     572.82    \n",
      "    21     170.00     560.19        48     425.00     561.17        75     960.01     550.00       102    1235.00     564.19       129    1760.01     572.78    \n",
      "    22     175.00     560.38        49     430.01     560.93        76     965.50     550.02       103    1305.00     565.33       130    1800.00     572.91    \n",
      "    23     180.00     560.51        50     490.01     560.65        77    1007.12     550.02       104    1310.00     565.37       131    1810.00     573.07    \n",
      "    24     185.00     559.92        51     520.00     560.69        78    1020.01     550.67       105    1330.01     565.33       132    1835.00     573.28    \n",
      "    25     190.00     559.59        52     535.00     560.63        79    1025.01     553.71       106    1335.00     565.49       133    1870.00     574.40    \n",
      "    26     195.00     559.69        53     540.00     560.64        80    1030.01     558.30       107    1350.00     566.16       134    1875.01     574.45    \n",
      "    27     200.01     559.66        54     565.00     561.09        81    1030.38     558.54       108    1355.00     566.10       135    1888.52     574.53    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 132:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2036129.12 344828.22, 2036917.4 344765.47, 2037282.12 344702.72, 2038039.03 344604.68)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     568.29        27     364.99     560.34        53     869.99     560.92        79    1205.00     566.63       105    1600.00     571.55    \n",
      "     2       5.00     568.16        28     374.99     559.88        54     880.00     559.88        80    1210.00     566.88       106    1620.00     570.23    \n",
      "     3       9.99     567.99        29     380.00     558.83        55     885.00     557.55        81    1214.99     566.91       107    1630.00     571.99    \n",
      "     4      19.99     567.79        30     419.99     559.82        56     890.00     555.27        82    1245.00     568.32       108    1635.00     572.56    \n",
      "     5      25.00     567.62        31     425.00     559.89        57     900.00     551.04        83    1249.99     567.97       109    1649.99     572.38    \n",
      "     6      35.00     566.95        32     434.99     559.91        58     905.00     549.70        84    1254.99     566.67       110    1655.00     572.36    \n",
      "     7      44.99     566.60        33     440.00     559.95        59    1039.99     549.70        85    1259.99     565.83       111    1665.00     572.48    \n",
      "     8      50.00     566.51        34     444.99     560.08        60    1044.99     551.00        86    1270.00     567.24       112    1670.00     572.59    \n",
      "     9      60.00     566.65        35     450.00     560.18        61    1055.00     555.63        87    1275.00     567.57       113    1674.99     572.83    \n",
      "    10      65.00     566.58        36     459.99     560.01        62    1059.99     557.82        88    1299.99     566.93       114    1700.00     571.15    \n",
      "    11      69.99     565.51        37     555.00     559.69        63    1060.56     558.04        89    1315.00     567.25       115    1705.00     571.15    \n",
      "    12      75.00     563.55        38     634.99     560.96        64    1064.99     559.79        90    1329.99     567.19       116    1709.99     571.22    \n",
      "    13      85.00     560.36        39     655.00     559.67        65    1070.00     561.19        91    1334.99     566.94       117    1730.00     572.25    \n",
      "    14      89.99     559.59        40     659.99     559.68        66    1109.99     568.79        92    1340.00     566.33       118    1735.00     572.68    \n",
      "    15     100.00     560.16        41     675.00     560.26        67    1115.00     568.50        93    1345.00     566.70       119    1779.99     573.30    \n",
      "    16     104.99     560.53        42     679.99     560.60        68    1124.99     567.36        94    1354.99     567.59       120    1784.99     573.30    \n",
      "    17     110.00     560.69        43     685.00     561.03        69    1130.00     566.72        95    1359.99     567.97       121    1789.99     573.15    \n",
      "    18     114.99     560.82        44     720.00     564.38        70    1135.00     565.73        96    1369.99     567.44       122    1795.00     573.43    \n",
      "    19     120.00     560.90        45     760.00     564.86        71    1140.00     565.32        97    1375.00     567.50       123    1800.00     573.43    \n",
      "    20     194.99     560.28        46     785.00     563.62        72    1160.85     565.89        98    1399.99     568.26       124    1824.99     573.06    \n",
      "    21     199.99     560.28        47     790.77     563.22        73    1170.00     566.15        99    1445.00     568.52       125    1830.00     572.90    \n",
      "    22     275.00     560.94        48     809.99     562.19        74    1175.00     566.17       100    1450.00     568.58       126    1835.00     572.80    \n",
      "    23     345.00     562.17        49     814.99     562.16        75    1179.99     565.91       101    1499.99     570.28       127    1910.00     573.44    \n",
      "    24     349.99     562.11        50     849.99     562.09        76    1184.99     565.83       102    1509.99     570.53       128    1924.08     573.50    \n",
      "    25     355.00     562.01        51     865.00     561.34        77    1194.99     566.03       103    1550.00     570.17    \n",
      "    26     360.00     561.52        52     865.65     561.29        78    1200.00     565.93       104    1595.00     571.50    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 133:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2035356.52 345251.77, 2036976.22 345036.07, 2038066.48 345216.48)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     589.34        41     575.00     563.11        81     920.00     560.87       121    1190.00     559.97       161    1705.00     560.22    \n",
      "     2       5.00     589.34        42     595.00     563.12        82     930.00     559.95       122    1200.00     559.82       162    1710.00     559.12    \n",
      "     3      35.01     589.10        43     600.00     562.79        83     935.00     560.63       123    1220.01     559.78       163    1750.01     551.17    \n",
      "     4      40.00     588.96        44     605.00     562.18        84     940.01     561.22       124    1225.00     559.62       164    1755.00     549.67    \n",
      "     5      50.00     588.59        45     610.00     561.76        85     945.00     561.13       125    1230.00     559.06       165    1815.00     549.67    \n",
      "     6      55.00     588.61        46     615.00     562.35        86     965.00     560.63       126    1235.00     558.61       166    1820.00     550.78    \n",
      "     7      65.00     588.71        47     620.01     562.60        87     970.00     560.05       127    1250.00     557.36       167    1835.01     554.77    \n",
      "     8      70.00     588.60        48     635.00     562.40        88     975.00     559.78       128    1255.00     557.47       168    1837.93     555.97    \n",
      "     9     125.00     586.45        49     640.00     562.45        89     980.01     559.96       129    1280.00     558.34       169    1840.00     556.83    \n",
      "    10     130.00     586.22        50     650.00     563.01        90     985.00     559.95       130    1285.00     558.25       170    1845.00     556.80    \n",
      "    11     145.00     585.42        51     655.00     563.04        91     990.00     559.86       131    1290.00     558.08       171    1850.00     556.90    \n",
      "    12     150.00     585.20        52     680.00     562.81        92     995.00     559.73       132    1310.00     557.17       172    1890.00     561.28    \n",
      "    13     170.00     584.50        53     725.00     562.92        93    1000.00     559.26       133    1315.00     557.01       173    1895.00     561.38    \n",
      "    14     175.00     584.29        54     730.00     562.81        94    1005.00     559.18       134    1325.00     557.14       174    1915.00     561.27    \n",
      "    15     210.00     582.57        55     745.00     562.33        95    1020.01     559.37       135    1365.00     558.26       175    1920.01     561.73    \n",
      "    16     215.00     582.36        56     750.00     562.27        96    1025.00     560.33       136    1395.00     559.47       176    1925.00     562.41    \n",
      "    17     235.01     581.96        57     755.00     562.39        97    1030.00     560.46       137    1415.00     560.46       177    1985.00     571.35    \n",
      "    18     240.00     581.90        58     765.00     562.54        98    1035.00     560.48       138    1425.00     560.71       178    1990.00     571.62    \n",
      "    19     250.00     581.89        59     770.00     562.91        99    1045.00     560.34       139    1430.00     560.74       179    2045.00     573.56    \n",
      "    20     255.00     581.83        60     780.01     563.54       100    1050.00     560.90       140    1440.00     560.53       180    2070.00     574.19    \n",
      "    21     265.00     581.57        61     785.00     564.01       101    1055.00     560.34       141    1445.00     560.29       181    2245.01     575.72    \n",
      "    22     275.01     580.30        62     790.00     564.12       102    1060.01     560.19       142    1480.00     558.24       182    2260.00     575.77    \n",
      "    23     280.00     579.63        63     795.00     564.13       103    1070.00     560.28       143    1485.00     558.22       183    2405.00     578.02    \n",
      "    24     320.00     572.54        64     805.00     564.76       104    1075.00     560.01       144    1540.01     559.60       184    2485.01     579.00    \n",
      "    25     325.00     572.00        65     810.00     565.59       105    1080.00     559.85       145    1545.00     559.70       185    2555.00     578.66    \n",
      "    26     340.01     570.55        66     815.00     566.10       106    1085.00     559.75       146    1600.00     560.51       186    2560.00     578.67    \n",
      "    27     370.00     568.32        67     820.01     566.35       107    1095.00     559.40       147    1615.00     560.64       187    2590.00     579.74    \n",
      "    28     375.00     567.77        68     825.00     566.16       108    1100.01     559.45       148    1620.01     560.46       188    2595.00     578.73    \n",
      "    29     395.01     565.37        69     830.00     565.76       109    1110.00     560.39       149    1625.00     560.05       189    2600.00     579.54    \n",
      "    30     400.00     564.99        70     835.00     565.31       110    1115.00     560.38       150    1630.00     559.40       190    2605.01     581.11    \n",
      "    31     450.00     564.32        71     850.00     563.61       111    1120.00     559.23       151    1634.00     559.13       191    2610.00     581.57    \n",
      "    32     460.01     563.39        72     855.00     562.63       112    1125.00     559.31       152    1635.00     559.05       192    2655.01     582.47    \n",
      "    33     465.00     563.51        73     860.01     561.75       113    1130.00     559.68       153    1655.00     557.58       193    2660.00     582.51    \n",
      "    34     470.00     563.81        74     865.00     561.28       114    1140.01     560.63       154    1665.01     556.94       194    2680.00     582.50    \n",
      "    35     475.01     564.06        75     870.00     561.51       115    1145.00     560.55       155    1669.47     556.58       195    2690.00     582.76    \n",
      "    36     485.00     563.56        76     890.00     561.10       116    1150.00     560.40       156    1670.00     556.54       196    2695.00     583.02    \n",
      "    37     490.00     563.59        77     895.00     560.71       117    1155.00     560.00       157    1675.00     556.11       197    2739.08     586.35    \n",
      "    38     505.00     563.87        78     900.01     560.57       118    1160.00     559.93       158    1680.01     556.89    \n",
      "    39     510.00     563.91        79     910.00     560.74       119    1170.00     559.48       159    1685.00     557.99    \n",
      "    40     515.01     563.81        80     915.00     561.26       120    1185.00     559.89       160    1700.01     560.89    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 134:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2035042.78 345785.14, 2037156.62 345679.25, 2037423.31 345663.56, 2037901.77 345491)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     590.68        35     320.00     573.97        69    1009.99     561.54       103    1725.00     556.66       137    2344.99     556.93    \n",
      "     2      15.00     590.48        36     325.00     572.73        70    1085.00     565.01       104    1740.00     552.54       138    2355.00     556.60    \n",
      "     3      20.00     590.05        37     335.00     572.59        71    1090.00     565.28       105    1744.99     551.31       139    2360.00     556.51    \n",
      "     4      25.00     589.46        38     415.00     571.76        72    1095.00     565.63       106    1750.00     550.33       140    2365.00     556.71    \n",
      "     5      30.00     589.09        39     420.00     571.65        73    1100.00     565.73       107    1755.00     549.57       141    2375.00     557.21    \n",
      "     6      65.00     586.91        40     445.00     570.54        74    1104.99     565.70       108    1870.00     549.57       142    2383.64     557.45    \n",
      "     7      70.00     586.57        41     450.00     570.35        75    1110.00     565.70       109    1875.00     550.22       143    2400.00     557.47    \n",
      "     8      95.00     584.57        42     470.00     569.73        76    1115.00     565.78       110    1895.00     555.47       144    2420.00     558.00    \n",
      "     9     105.00     583.81        43     475.00     569.50        77    1120.00     565.02       111    1900.00     556.38       145    2424.99     558.05    \n",
      "    10     110.00     583.17        44     495.00     568.43        78    1125.00     564.29       112    1904.99     557.15       146    2450.00     557.99    \n",
      "    11     114.99     582.80        45     505.00     567.96        79    1135.00     562.32       113    1915.00     558.81       147    2454.99     558.47    \n",
      "    12     120.00     582.89        46     510.00     568.19        80    1140.00     561.48       114    1917.00     558.88       148    2505.00     564.49    \n",
      "    13     125.00     583.05        47     520.00     569.50        81    1150.00     561.48       115    1919.99     558.99       149    2520.00     566.51    \n",
      "    14     130.00     583.25        48     525.00     569.24        82    1184.99     561.89       116    1930.00     558.85       150    2525.00     567.00    \n",
      "    15     135.00     583.10        49     529.99     568.68        83    1325.00     561.60       117    1944.99     558.76       151    2540.00     567.56    \n",
      "    16     150.00     582.04        50     535.00     568.21        84    1360.00     561.30       118    1995.00     559.86       152    2569.99     568.91    \n",
      "    17     154.99     581.86        51     560.00     566.80        85    1380.00     561.24       119    1999.99     559.92       153    2590.00     569.93    \n",
      "    18     185.00     581.37        52     565.00     566.59        86    1420.00     561.46       120    2035.00     559.03       154    2595.00     570.15    \n",
      "    19     190.00     581.26        53     609.99     565.03        87    1475.00     561.50       121    2039.99     559.00       155    2660.00     571.79    \n",
      "    20     200.00     581.00        54     615.00     564.91        88    1525.00     561.75       122    2060.00     559.04       156    2665.00     571.89    \n",
      "    21     205.00     580.65        55     620.00     564.56        89    1584.99     561.46       123    2090.00     559.31       157    2670.00     572.05    \n",
      "    22     210.00     580.05        56     625.00     564.17        90    1590.00     561.39       124    2116.49     559.43       158    2755.00     575.44    \n",
      "    23     215.00     579.78        57     635.00     563.50        91    1599.99     561.01       125    2140.00     559.54       159    2775.00     576.11    \n",
      "    24     225.00     579.36        58     640.00     563.60        92    1639.99     560.30       126    2185.00     559.07       160    2790.00     577.15    \n",
      "    25     230.00     579.38        59     649.99     564.39        93    1664.99     560.46       127    2225.00     559.10       161    2795.00     577.42    \n",
      "    26     240.00     578.80        60     655.00     564.46        94    1670.00     560.29       128    2250.00     558.94       162    2810.00     578.13    \n",
      "    27     245.00     578.57        61     710.00     563.38        95    1675.00     559.77       129    2255.00     558.84       163    2814.99     578.33    \n",
      "    28     250.00     578.42        62     790.00     562.15        96    1685.00     559.31       130    2260.00     558.60       164    2820.00     578.77    \n",
      "    29     265.00     578.61        63     805.00     562.00        97    1690.00     559.11       131    2265.00     558.39       165    2844.99     581.87    \n",
      "    30     270.00     578.61        64     809.99     562.00        98    1704.99     558.59       132    2270.00     558.30       166    2850.00     582.67    \n",
      "    31     285.00     577.38        65     825.00     562.31        99    1710.00     558.56       133    2274.99     558.34       167    2890.00     590.30    \n",
      "    32     290.00     577.01        66     865.00     562.05       100    1713.09     558.58       134    2330.00     557.44       168    2892.27     590.72    \n",
      "    33     300.00     576.33        67     880.00     562.10       101    1715.00     558.60       135    2335.00     557.32    \n",
      "    34     314.99     575.18        68    1000.00     561.82       102    1719.99     557.98       136    2340.00     557.16    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 135:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2035160.43 347408.76, 2038066.48 345592.97)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     624.94        33     845.00     568.54        65    1675.01     560.95        97    2365.00     557.79       129    2915.00     558.19    \n",
      "     2      40.00     621.20        34     890.00     568.03        66    1685.01     561.85        98    2370.00     558.03       130    2920.01     558.96    \n",
      "     3      70.00     617.85        35     970.00     567.39        67    1690.01     562.18        99    2375.00     558.20       131    2925.01     559.82    \n",
      "     4      75.00     617.22        36     990.00     567.07        68    1700.00     561.41       100    2400.00     559.34       132    2940.01     562.48    \n",
      "     5     105.00     612.25        37     995.00     567.02        69    1705.00     561.26       101    2405.00     559.35       133    2950.00     564.20    \n",
      "     6     155.00     602.49        38    1035.00     566.74        70    1775.00     561.09       102    2480.00     558.99       134    2955.00     564.65    \n",
      "     7     160.00     601.57        39    1045.00     566.62        71    1860.00     561.52       103    2485.00     558.75       135    3025.00     568.06    \n",
      "     8     165.00     600.52        40    1075.00     566.07        72    1865.00     561.51       104    2525.00     555.64       136    3030.00     568.22    \n",
      "     9     220.01     590.43        41    1085.00     566.08        73    1915.00     559.93       105    2530.00     555.31       137    3115.00     569.23    \n",
      "    10     225.01     589.45        42    1090.00     566.14        74    1920.00     559.74       106    2535.00     555.08       138    3120.00     569.54    \n",
      "    11     255.00     583.34        43    1095.00     566.02        75    1930.00     559.27       107    2540.00     554.97       139    3135.00     570.74    \n",
      "    12     285.00     579.79        44    1100.00     565.54        76    1950.00     558.90       108    2545.00     554.82       140    3140.00     571.03    \n",
      "    13     330.00     575.55        45    1115.00     566.04        77    1965.01     558.75       109    2550.00     554.53       141    3260.00     572.19    \n",
      "    14     335.00     574.48        46    1120.00     565.74        78    2010.00     559.19       110    2555.00     555.37       142    3280.00     572.26    \n",
      "    15     340.00     573.58        47    1125.00     565.09        79    2015.00     559.27       111    2565.00     556.61       143    3285.00     572.52    \n",
      "    16     345.00     573.96        48    1130.00     564.34        80    2045.00     559.94       112    2575.00     558.20       144    3315.00     574.69    \n",
      "    17     350.00     574.01        49    1135.00     563.79        81    2090.00     560.58       113    2580.00     558.67       145    3320.00     575.30    \n",
      "    18     375.01     573.88        50    1155.00     563.32        82    2161.21     560.97       114    2655.01     558.14       146    3325.00     575.79    \n",
      "    19     380.01     574.18        51    1160.00     563.32        83    2165.01     560.99       115    2670.00     557.84       147    3335.00     576.69    \n",
      "    20     385.01     574.63        52    1170.01     563.42        84    2170.01     560.94       116    2685.00     557.76       148    3350.00     577.94    \n",
      "    21     490.00     573.60        53    1240.00     563.49        85    2175.01     560.85       117    2690.00     557.79       149    3355.00     577.77    \n",
      "    22     525.01     572.95        54    1355.00     562.54        86    2180.00     559.00       118    2754.99     558.62       150    3360.00     576.61    \n",
      "    23     560.00     572.11        55    1420.00     561.75        87    2185.00     555.62       119    2760.00     558.62       151    3365.00     576.57    \n",
      "    24     565.00     572.02        56    1505.00     561.29        88    2190.00     553.31       120    2830.00     557.96       152    3370.00     576.87    \n",
      "    25     615.00     571.38        57    1585.00     561.91        89    2195.00     551.68       121    2835.00     557.98       153    3375.00     577.20    \n",
      "    26     655.00     570.58        58    1595.00     561.94        90    2200.00     550.21       122    2840.00     558.35       154    3380.00     577.59    \n",
      "    27     670.00     570.38        59    1600.00     561.78        91    2205.00     549.48       123    2845.00     558.67       155    3405.01     579.79    \n",
      "    28     700.01     569.69        60    1625.00     560.56        92    2325.00     549.48       124    2850.00     558.90       156    3410.01     580.29    \n",
      "    29     745.00     569.31        61    1630.00     560.35        93    2330.00     550.05       125    2855.00     558.88       157    3426.69     583.31    \n",
      "    30     750.00     569.31        62    1660.01     559.47        94    2345.00     555.72       126    2900.00     558.21    \n",
      "    31     790.00     569.69        63    1665.01     559.71        95    2350.00     556.40       127    2905.00     558.09    \n",
      "    32     795.00     569.62        64    1670.01     560.45        96    2358.93     557.23       128    2910.00     558.00    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 136:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2035803.61 348295.08, 2037599.79 347079.33, 2038839.07 345667.48)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     588.65        36     970.00     561.47        71    2310.00     556.66       106    2779.99     556.44       141    3414.99     563.56    \n",
      "     2      14.99     584.92        37    1019.99     561.28        72    2315.00     555.43       107    2784.99     556.15       142    3450.00     564.33    \n",
      "     3      20.00     583.77        38    1105.00     560.32        73    2329.99     550.83       108    2800.00     556.57       143    3540.00     565.49    \n",
      "     4      49.99     578.18        39    1195.00     560.05        74    2335.00     549.34       109    2804.99     556.59       144    3590.00     566.89    \n",
      "     5      54.99     577.43        40    1429.99     561.29        75    2389.99     549.34       110    2959.99     556.55       145    3634.99     568.63    \n",
      "     6      64.99     576.05        41    1509.99     561.01        76    2394.99     549.41       111    2964.99     556.49       146    3645.00     568.95    \n",
      "     7      70.00     575.25        42    1545.00     560.48        77    2415.00     551.08       112    2985.00     555.51       147    3655.00     569.52    \n",
      "     8      75.00     574.32        43    1579.99     559.41        78    2419.99     551.38       113    3020.00     553.56       148    3659.99     570.10    \n",
      "     9      80.00     573.31        44    1584.99     559.30        79    2474.99     552.02       114    3024.99     554.14       149    3664.99     570.81    \n",
      "    10      85.00     571.27        45    1635.00     558.64        80    2479.99     552.19       115    3029.99     554.75       150    3745.00     577.55    \n",
      "    11      89.99     569.47        46    1645.00     558.58        81    2480.33     552.42       116    3035.00     555.39       151    3759.99     578.73    \n",
      "    12     109.99     568.76        47    1720.00     558.62        82    2484.99     555.57       117    3040.00     556.13       152    3764.99     579.43    \n",
      "    13     124.99     568.03        48    1790.00     559.12        83    2490.00     556.24       118    3044.99     556.58       153    3769.99     580.27    \n",
      "    14     129.99     567.43        49    1809.99     559.90        84    2499.99     556.52       119    3089.99     558.11       154    3775.00     581.17    \n",
      "    15     140.00     566.17        50    1815.00     559.66        85    2515.00     557.04       120    3119.99     558.01       155    3785.00     583.39    \n",
      "    16     175.00     563.12        51    1829.99     558.47        86    2535.00     557.57       121    3125.00     558.02       156    3789.99     584.71    \n",
      "    17     179.99     562.97        52    1834.99     558.53        87    2560.00     558.10       122    3165.00     558.81       157    3809.99     590.18    \n",
      "    18     230.00     562.92        53    1840.00     559.31        88    2564.99     557.97       123    3205.00     559.19       158    3815.00     591.40    \n",
      "    19     245.00     562.96        54    1850.00     560.03        89    2580.00     557.07       124    3214.99     559.53       159    3824.99     593.61    \n",
      "    20     305.00     562.71        55    1855.00     559.49        90    2614.99     556.44       125    3219.99     559.66       160    3829.99     594.41    \n",
      "    21     310.00     562.59        56    1860.00     558.86        91    2639.99     555.74       126    3235.00     559.89       161    3845.00     596.11    \n",
      "    22     314.99     562.71        57    1894.99     559.18        92    2649.99     555.54       127    3279.99     559.09       162    3869.99     599.06    \n",
      "    23     334.99     565.71        58    1899.99     559.20        93    2660.00     555.18       128    3284.99     559.52       163    3894.99     601.50    \n",
      "    24     340.00     566.98        59    1984.99     559.11        94    2670.00     554.99       129    3289.99     560.06       164    3899.99     601.95    \n",
      "    25     344.99     567.54        60    2000.00     559.35        95    2674.99     554.98       130    3300.00     561.32       165    3910.00     602.32    \n",
      "    26     349.99     566.59        61    2070.00     559.75        96    2679.99     555.14       131    3335.00     565.16       166    3914.99     602.65    \n",
      "    27     365.00     565.96        62    2150.00     559.57        97    2685.00     554.50       132    3340.00     565.38       167    3924.99     603.40    \n",
      "    28     370.00     565.23        63    2154.99     559.62        98    2690.00     554.24       133    3354.99     565.64       168    3930.00     603.31    \n",
      "    29     380.00     562.59        64    2160.00     559.60        99    2719.99     554.24       134    3360.00     565.09       169    3940.00     602.96    \n",
      "    30     385.00     562.43        65    2168.94     559.62       100    2725.00     554.30       135    3370.00     563.91       170    3945.00     602.85    \n",
      "    31     400.00     562.25        66    2169.99     559.63       101    2739.99     555.16       136    3374.99     563.24       171    3999.99     604.30    \n",
      "    32     490.00     562.35        67    2239.99     559.85       102    2744.99     555.76       137    3379.99     562.48       172    4029.99     604.79    \n",
      "    33     579.99     561.87        68    2289.99     560.75       103    2759.99     558.54       138    3385.00     562.15       173    4035.00     604.76    \n",
      "    34     755.00     562.08        69    2290.50     560.69       104    2769.99     557.40       139    3400.00     562.56       174    4047.54     604.62    \n",
      "    35     880.00     561.38        70    2295.00     560.19       105    2775.00     556.88       140    3404.99     562.74    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 137:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2036901.71 349173.56, 2039239.1 345816.51)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     584.25        32     915.00     559.53        63    2429.99     549.26        94    2640.00     558.16       125    3405.00     558.36    \n",
      "     2       4.99     584.28        33     930.00     559.76        64    2435.00     549.87        95    2644.99     558.19       126    3425.00     558.67    \n",
      "     3       9.99     584.68        34     979.99     560.01        65    2440.00     553.63        96    2679.99     558.95       127    3430.00     558.80    \n",
      "     4      15.00     584.97        35     994.99     559.82        66    2444.99     555.53        97    2690.00     559.11       128    3464.99     560.48    \n",
      "     5      20.00     585.10        36    1060.00     559.76        67    2450.00     556.22        98    2695.00     559.11       129    3469.99     560.63    \n",
      "     6      24.99     585.54        37    1090.00     559.99        68    2451.92     556.42        99    2705.00     558.26       130    3550.00     562.54    \n",
      "     7      30.00     585.75        38    1140.00     559.79        69    2454.99     556.73       100    2715.00     557.58       131    3565.00     563.06    \n",
      "     8      35.00     585.45        39    1219.99     560.98        70    2464.99     558.82       101    2720.00     557.72       132    3604.99     565.37    \n",
      "     9     109.99     582.85        40    1300.00     560.84        71    2469.99     560.01       102    2730.00     558.17       133    3634.99     566.85    \n",
      "    10     114.99     582.73        41    1375.00     561.26        72    2474.99     560.55       103    2735.00     558.35       134    3664.99     568.62    \n",
      "    11     189.99     581.23        42    1379.99     561.23        73    2484.99     561.16       104    2739.99     558.35       135    3694.99     570.17    \n",
      "    12     345.00     574.71        43    1414.99     560.57        74    2499.99     561.77       105    2749.99     557.97       136    3705.00     570.85    \n",
      "    13     350.00     574.43        44    1455.00     559.64        75    2510.00     561.89       106    2754.99     557.73       137    3709.99     571.34    \n",
      "    14     394.99     570.38        45    1459.99     559.58        76    2514.99     561.92       107    2760.00     557.80       138    3749.99     577.92    \n",
      "    15     399.99     570.23        46    1480.00     559.54        77    2529.99     561.17       108    2790.00     558.43       139    3754.99     578.77    \n",
      "    16     409.99     570.00        47    1534.99     558.94        78    2544.99     559.59       109    2799.99     558.73       140    3760.00     579.68    \n",
      "    17     414.99     569.20        48    1694.99     560.29        79    2550.00     559.11       110    2805.00     558.78       141    3769.99     582.34    \n",
      "    18     435.00     563.24        49    1934.99     560.83        80    2560.00     558.23       111    2855.00     558.85       142    3775.00     583.70    \n",
      "    19     439.99     561.83        50    2009.99     560.57        81    2565.00     557.90       112    2880.00     558.77       143    3810.00     593.49    \n",
      "    20     444.99     561.27        51    2174.99     561.16        82    2570.00     557.89       113    2955.00     560.51       144    3814.99     594.52    \n",
      "    21     510.00     560.61        52    2204.99     561.13        83    2574.99     557.98       114    2960.00     560.59       145    3820.00     595.43    \n",
      "    22     539.99     560.53        53    2229.99     561.27        84    2580.00     557.73       115    3049.99     560.41       146    3825.00     596.17    \n",
      "    23     585.00     559.83        54    2234.99     560.70        85    2585.00     557.32       116    3090.00     560.17       147    3949.99     600.79    \n",
      "    24     654.99     559.72        55    2236.75     560.24        86    2589.99     557.25       117    3120.00     560.20       148    3960.00     601.12    \n",
      "    25     659.99     559.66        56    2244.99     558.10        87    2599.99     558.39       118    3199.99     559.25       149    3970.00     601.09    \n",
      "    26     664.99     559.63        57    2249.99     557.36        88    2604.99     558.88       119    3225.00     558.81       150    3975.00     601.10    \n",
      "    27     744.99     559.80        58    2255.00     556.78        89    2614.99     557.73       120    3275.00     558.33       151    4090.62     601.95    \n",
      "    28     814.99     559.56        59    2264.99     556.03        90    2619.99     558.10       121    3334.99     557.05    \n",
      "    29     819.99     559.44        60    2270.00     554.36        91    2625.00     558.71       122    3385.00     558.14    \n",
      "    30     824.99     559.38        61    2279.99     550.79        92    2629.99     558.36       123    3390.00     558.36    \n",
      "    31     910.00     559.48        62    2285.00     549.26        93    2634.99     558.18       124    3400.00     558.34    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 138:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2037737.05 350142.25, 2039227.33 347757.8, 2039980.31 346000.84)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     582.10        36     930.00     565.69        71    1560.00     559.98       106    3390.00     557.64       141    4040.00     557.06    \n",
      "     2      10.00     581.70        37     945.00     564.81        72    1565.00     559.89       107    3395.00     556.88       142    4045.00     556.99    \n",
      "     3      85.00     580.66        38     950.00     564.38        73    1590.00     560.09       108    3400.00     551.72       143    4050.01     557.11    \n",
      "     4      90.00     580.17        39     955.00     563.92        74    1745.00     560.43       109    3405.00     550.26       144    4065.00     557.23    \n",
      "     5      95.00     579.30        40     960.00     563.78        75    1825.00     559.51       110    3410.00     549.20       145    4070.01     557.59    \n",
      "     6     100.00     578.77        41     965.00     563.70        76    2060.00     560.65       111    3465.01     549.20       146    4075.00     557.71    \n",
      "     7     105.00     578.53        42    1025.00     563.08        77    2140.00     560.29       112    3470.00     549.27       147    4090.00     557.53    \n",
      "     8     110.00     578.66        43    1035.00     562.87        78    2165.00     560.72       113    3500.00     552.12       148    4115.00     557.72    \n",
      "     9     115.00     580.33        44    1110.00     562.60        79    2170.00     560.65       114    3530.00     555.31       149    4160.00     557.65    \n",
      "    10     120.00     581.44        45    1115.00     562.52        80    2210.00     558.95       115    3535.01     557.58       150    4205.00     558.26    \n",
      "    11     130.00     581.29        46    1120.00     562.37        81    2215.00     558.77       116    3540.00     557.24       151    4235.00     558.22    \n",
      "    12     135.00     581.06        47    1135.00     562.16        82    2220.00     558.84       117    3545.00     555.79       152    4265.00     560.39    \n",
      "    13     155.00     579.89        48    1165.00     562.13        83    2535.00     558.45       118    3550.00     555.57       153    4270.00     561.44    \n",
      "    14     160.00     579.37        49    1190.00     561.84        84    2585.00     558.57       119    3565.00     557.65       154    4325.00     579.07    \n",
      "    15     165.00     578.67        50    1195.00     561.75        85    2615.00     558.80       120    3568.98     559.07       155    4330.01     580.22    \n",
      "    16     170.00     578.35        51    1215.00     561.13        86    2690.00     558.98       121    3570.01     559.44       156    4385.00     587.19    \n",
      "    17     195.00     577.75        52    1220.00     561.06        87    2695.00     558.91       122    3635.00     558.35       157    4390.00     588.02    \n",
      "    18     245.00     576.84        53    1265.00     560.68        88    2770.00     557.45       123    3640.00     558.22       158    4395.00     588.75    \n",
      "    19     325.00     574.75        54    1270.00     561.09        89    2811.86     558.93       124    3645.00     558.12       159    4415.00     588.70    \n",
      "    20     405.00     573.12        55    1275.00     561.05        90    2835.00     559.74       125    3650.00     558.08       160    4420.00     588.81    \n",
      "    21     480.00     571.24        56    1280.00     560.50        91    2845.01     560.19       126    3715.00     558.09       161    4465.00     589.95    \n",
      "    22     485.00     571.15        57    1340.00     560.20        92    2850.00     560.29       127    3720.01     557.94       162    4470.00     590.01    \n",
      "    23     725.00     567.99        58    1345.00     560.24        93    3030.00     560.45       128    3770.01     557.10       163    4505.00     589.75    \n",
      "    24     805.00     566.41        59    1350.00     560.64        94    3085.00     560.73       129    3775.00     557.19       164    4570.00     590.06    \n",
      "    25     840.00     565.54        60    1355.00     560.80        95    3165.00     560.61       130    3780.01     557.14       165    4575.01     590.18    \n",
      "    26     860.00     565.29        61    1365.00     560.37        96    3245.00     559.99       131    3800.00     556.78       166    4590.00     590.66    \n",
      "    27     875.00     564.91        62    1370.00     560.21        97    3320.00     560.39       132    3805.01     556.09       167    4595.00     590.64    \n",
      "    28     880.00     565.12        63    1395.00     560.05        98    3325.01     560.16       133    3810.00     555.90       168    4665.00     588.93    \n",
      "    29     885.00     565.57        64    1430.00     560.32        99    3335.01     559.47       134    3815.01     556.50       169    4675.00     588.55    \n",
      "    30     890.00     565.73        65    1455.00     559.90       100    3340.00     559.43       135    3820.00     556.77       170    4690.00     588.22    \n",
      "    31     905.00     565.25        66    1505.00     560.24       101    3343.20     559.59       136    3905.00     556.62       171    4723.37     586.85    \n",
      "    32     910.00     565.02        67    1515.00     560.38       102    3365.00     560.71       137    3910.01     556.64    \n",
      "    33     915.00     564.47        68    1535.00     560.54       103    3370.00     560.79       138    3965.01     557.48    \n",
      "    34     920.00     564.79        69    1540.00     560.47       104    3380.00     560.86       139    3985.00     557.53    \n",
      "    35     925.00     565.29        70    1555.00     560.13       105    3385.00     559.50       140    3995.00     557.40    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 139:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2038654.75 349750.07, 2039148.89 348926.49, 2039690.1 348424.5, 2040803.89 348079.38, 2041352.94 346149.86)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     599.74        53    1115.00     559.17       105    2370.00     556.23       157    3350.00     556.24       209    4135.00     556.70    \n",
      "     2       5.00     600.52        54    1120.00     559.19       106    2375.01     555.87       158    3360.00     556.02       210    4150.01     555.97    \n",
      "     3      10.00     602.47        55    1125.00     559.24       107    2380.00     555.57       159    3365.00     556.03       211    4155.00     555.77    \n",
      "     4      15.00     602.91        56    1130.00     558.84       108    2385.01     555.47       160    3375.01     556.48       212    4285.00     555.75    \n",
      "     5      20.00     603.31        57    1135.00     558.51       109    2405.00     555.37       161    3380.01     556.66       213    4290.00     555.85    \n",
      "     6      80.00     605.36        58    1165.00     558.07       110    2410.01     555.29       162    3400.00     557.02       214    4300.00     556.64    \n",
      "     7      85.00     605.97        59    1170.00     558.05       111    2420.00     555.41       163    3405.00     557.00       215    4305.00     557.16    \n",
      "     8      90.00     606.65        60    1525.00     558.35       112    2430.00     555.06       164    3440.01     556.50       216    4310.01     557.72    \n",
      "     9      95.00     607.06        61    1600.00     558.51       113    2435.01     554.99       165    3470.00     555.25       217    4315.00     558.19    \n",
      "    10     105.00     606.15        62    1625.00     558.45       114    2460.01     556.06       166    3475.00     554.96       218    4325.00     558.63    \n",
      "    11     110.00     605.87        63    1670.00     558.99       115    2465.00     556.41       167    3480.00     555.14       219    4330.00     558.42    \n",
      "    12     145.00     604.61        64    1698.62     559.20       116    2470.00     556.56       168    3485.00     555.20       220    4335.00     558.05    \n",
      "    13     170.00     604.23        65    1800.00     560.00       117    2475.01     556.63       169    3490.00     555.23       221    4345.00     557.68    \n",
      "    14     190.00     603.60        66    1820.00     560.06       118    2510.01     556.09       170    3495.01     555.88       222    4350.00     557.71    \n",
      "    15     195.00     603.29        67    1825.00     560.01       119    2535.01     555.93       171    3500.00     557.27       223    4365.01     558.30    \n",
      "    16     245.00     599.66        68    1860.00     559.47       120    2545.01     555.73       172    3525.00     557.35       224    4375.01     558.64    \n",
      "    17     250.00     599.27        69    1865.01     559.10       121    2550.01     555.67       173    3530.00     557.34       225    4385.00     558.76    \n",
      "    18     330.00     594.47        70    1884.50     557.82       122    2580.00     555.56       174    3585.00     556.09       226    4390.00     558.78    \n",
      "    19     345.00     593.47        71    1890.01     557.46       123    2585.01     555.46       175    3590.00     556.05       227    4395.00     558.73    \n",
      "    20     350.00     593.24        72    1895.00     557.28       124    2595.00     554.87       176    3610.00     556.17       228    4410.00     559.01    \n",
      "    21     395.00     592.18        73    1900.00     556.92       125    2610.01     553.57       177    3700.00     557.57       229    4420.00     559.13    \n",
      "    22     405.00     591.74        74    1915.01     549.55       126    2615.00     553.24       178    3705.00     557.60       230    4430.01     559.44    \n",
      "    23     410.00     591.55        75    1920.00     548.77       127    2640.00     552.43       179    3790.00     556.93       231    4435.00     559.55    \n",
      "    24     485.00     589.49        76    2050.01     548.86       128    2645.00     552.70       180    3795.00     556.86       232    4475.00     559.69    \n",
      "    25     490.00     589.22        77    2055.00     550.65       129    2650.01     553.09       181    3820.01     555.70       233    4480.01     559.75    \n",
      "    26     495.00     588.77        78    2060.00     552.89       130    2660.01     553.79       182    3825.01     555.70       234    4525.00     560.51    \n",
      "    27     505.00     587.71        79    2065.01     552.75       131    2665.00     554.18       183    3830.00     555.88       235    4555.00     560.42    \n",
      "    28     510.00     587.35        80    2070.00     554.89       132    2680.00     555.04       184    3840.00     556.32       236    4560.00     560.15    \n",
      "    29     550.00     584.65        81    2075.01     556.66       133    2685.01     555.26       185    3845.00     556.51       237    4565.00     559.37    \n",
      "    30     555.00     584.35        82    2085.00     558.02       134    2690.00     555.35       186    3855.00     556.79       238    4570.00     558.27    \n",
      "    31     560.00     584.15        83    2088.59     558.29       135    2695.01     555.33       187    3860.00     557.00       239    4575.00     557.58    \n",
      "    32     565.01     582.74        84    2090.01     558.40       136    2750.01     554.62       188    3865.00     557.17       240    4590.01     556.23    \n",
      "    33     570.00     581.00        85    2125.01     557.35       137    2785.01     555.16       189    3870.00     556.49       241    4595.01     555.83    \n",
      "    34     620.01     564.91        86    2130.00     557.44       138    2790.00     555.13       190    3875.00     556.05       242    4600.00     555.96    \n",
      "    35     630.00     561.59        87    2140.01     557.28       139    2795.01     555.19       191    3880.01     555.95       243    4620.00     556.14    \n",
      "    36     635.00     560.04        88    2145.00     557.97       140    2800.01     555.29       192    3885.00     556.64       244    4625.00     556.23    \n",
      "    37     640.01     559.65        89    2150.01     558.93       141    2830.01     555.11       193    3890.00     556.64       245    4635.00     556.49    \n",
      "    38     650.00     559.56        90    2155.00     558.79       142    2835.01     555.12       194    3895.00     556.60       246    4660.00     556.76    \n",
      "    39     655.00     559.56        91    2165.01     557.90       143    2855.01     555.40       195    3900.00     557.23       247    4665.00     557.04    \n",
      "    40     695.00     559.80        92    2170.00     557.76       144    2860.01     555.43       196    3905.00     557.62       248    4670.00     557.35    \n",
      "    41     725.00     560.14        93    2230.00     559.05       145    2864.66     555.39       197    3960.00     555.88       249    4675.00     556.91    \n",
      "    42     770.00     560.10        94    2255.00     559.39       146    2870.00     555.59       198    3965.00     555.85       250    4680.00     556.78    \n",
      "    43     775.00     560.07        95    2260.00     559.34       147    2895.00     556.00       199    3970.00     555.91       251    4690.01     556.75    \n",
      "    44     780.01     559.88        96    2280.00     558.91       148    2985.00     555.76       200    3975.00     556.00       252    4770.00     558.94    \n",
      "    45     800.00     558.62        97    2285.00     558.74       149    3055.01     555.32       201    4045.01     557.79       253    4775.00     559.04    \n",
      "    46     805.00     558.37        98    2295.00     558.25       150    3060.00     555.32       202    4095.00     558.71       254    4795.00     559.19    \n",
      "    47     880.00     559.51        99    2315.01     557.62       151    3100.00     555.72       203    4105.00     558.81       255    4800.01     560.51    \n",
      "    48     885.00     559.51       100    2335.00     556.68       152    3135.00     555.73       204    4110.00     558.33       256    4805.01     562.39    \n",
      "    49     960.45     559.02       101    2340.01     556.61       153    3140.00     555.69       205    4115.00     557.75       257    4810.01     562.74    \n",
      "    50    1045.01     559.37       102    2355.00     556.75       154    3220.01     554.17       206    4120.00     557.20       258    4870.78     561.75    \n",
      "    51    1105.00     560.08       103    2360.01     556.69       155    3305.00     556.40       207    4125.00     556.81    \n",
      "    52    1110.00     559.99       104    2365.01     556.49       156    3310.00     556.44       208    4130.00     556.78    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 140:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2039105.75 350044.2, 2041121.56 348106.84, 2041858.85 345863.57)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     633.30        50     840.00     546.39        99    2080.00     557.10       148    2970.01     554.80       197    4355.00     559.38    \n",
      "     2       5.00     633.29        51     850.00     546.33       100    2100.00     558.83       149    2975.01     555.19       198    4380.00     559.61    \n",
      "     3      60.00     632.80        52     855.00     547.70       101    2110.00     559.18       150    2980.01     555.38       199    4400.00     559.68    \n",
      "     4     140.00     631.10        53     860.00     552.82       102    2115.01     559.40       151    3005.01     556.16       200    4405.00     559.66    \n",
      "     5     145.00     630.95        54     865.00     557.05       103    2120.00     559.54       152    3010.01     556.27       201    4415.00     559.52    \n",
      "     6     150.00     630.75        55     870.00     557.17       104    2135.01     559.18       153    3015.01     556.43       202    4420.00     559.55    \n",
      "     7     225.00     626.89        56     880.01     555.46       105    2140.00     559.14       154    3045.01     557.71       203    4440.00     559.92    \n",
      "     8     230.00     626.40        57     885.00     554.75       106    2155.00     559.15       155    3050.01     557.67       204    4445.00     559.90    \n",
      "     9     235.00     625.87        58     890.00     554.48       107    2175.00     557.15       156    3110.01     556.62       205    4465.00     559.60    \n",
      "    10     305.00     617.60        59     893.74     554.86       108    2190.00     555.75       157    3120.01     556.52       206    4470.00     559.71    \n",
      "    11     310.00     616.97        60     895.00     554.99       109    2195.00     555.38       158    3145.01     556.96       207    4480.00     560.39    \n",
      "    12     315.00     616.12        61     900.00     555.47       110    2200.00     555.21       159    3165.01     557.21       208    4485.00     560.44    \n",
      "    13     375.00     606.34        62     905.00     555.78       111    2280.00     555.03       160    3170.01     557.23       209    4490.00     560.44    \n",
      "    14     380.00     605.09        63     915.00     556.13       112    2480.00     556.31       161    3380.01     556.63       210    4495.00     560.09    \n",
      "    15     385.00     604.26        64     925.00     556.88       113    2520.00     556.78       162    3500.01     557.50       211    4515.00     558.01    \n",
      "    16     415.00     600.95        65     930.00     557.21       114    2525.00     556.76       163    3570.01     557.30       212    4520.00     557.93    \n",
      "    17     420.00     600.47        66     950.00     558.34       115    2585.01     555.47       164    3685.01     557.90       213    4535.00     558.35    \n",
      "    18     445.01     598.33        67     955.00     558.79       116    2600.00     555.25       165    3745.00     557.65       214    4565.00     559.01    \n",
      "    19     460.00     596.39        68     964.99     559.90       117    2605.01     554.95       166    3750.00     557.66       215    4570.00     559.05    \n",
      "    20     465.00     595.59        69    1045.00     560.13       118    2610.00     554.39       167    3870.00     558.71       216    4630.00     558.79    \n",
      "    21     470.00     594.37        70    1050.00     560.08       119    2630.00     552.63       168    3945.00     558.86       217    4640.00     558.81    \n",
      "    22     475.00     593.27        71    1055.00     559.93       120    2635.01     553.27       169    3950.00     558.95       218    4655.00     558.76    \n",
      "    23     480.00     592.42        72    1060.00     559.75       121    2645.01     554.81       170    3995.00     560.25       219    4660.00     559.07    \n",
      "    24     485.00     591.68        73    1065.00     559.46       122    2650.00     555.61       171    4000.00     560.30       220    4665.00     559.46    \n",
      "    25     495.00     590.47        74    1070.00     559.04       123    2655.00     555.72       172    4030.00     560.00       221    4680.00     560.44    \n",
      "    26     520.00     588.12        75    1085.00     556.02       124    2685.00     555.51       173    4055.00     560.03       222    4685.00     560.61    \n",
      "    27     525.00     587.59        76    1090.00     555.71       125    2690.00     555.45       174    4060.00     558.96       223    4720.00     560.37    \n",
      "    28     555.00     582.83        77    1115.00     555.85       126    2695.00     555.54       175    4080.00     555.74       224    4725.00     560.31    \n",
      "    29     560.00     581.90        78    1120.00     556.48       127    2740.00     556.03       176    4085.00     555.44       225    4745.00     558.62    \n",
      "    30     595.01     575.21        79    1130.00     559.06       128    2745.01     555.99       177    4130.00     555.24       226    4750.00     558.42    \n",
      "    31     600.00     574.40        80    1135.00     559.50       129    2765.00     550.69       178    4140.00     555.26       227    4755.00     558.42    \n",
      "    32     620.00     571.41        81    1235.00     559.47       130    2770.00     550.19       179    4160.00     555.49       228    4820.00     559.62    \n",
      "    33     625.01     570.91        82    1375.00     558.61       131    2785.00     549.16       180    4165.00     555.50       229    4825.00     559.67    \n",
      "    34     630.00     570.45        83    1470.00     559.11       132    2790.00     550.00       181    4170.00     555.47       230    4845.00     559.65    \n",
      "    35     635.00     569.95        84    1540.01     559.16       133    2795.86     551.56       182    4175.00     555.53       231    5000.00     560.49    \n",
      "    36     665.00     567.25        85    1625.00     557.49       134    2800.00     552.60       183    4190.00     556.04       232    5025.00     560.09    \n",
      "    37     685.00     564.46        86    1690.01     557.19       135    2805.00     553.96       184    4195.00     556.08       233    5035.00     560.07    \n",
      "    38     690.00     563.86        87    1695.00     557.51       136    2810.01     554.21       185    4200.00     556.06       234    5040.00     560.03    \n",
      "    39     695.00     563.65        88    1710.01     560.10       137    2820.01     554.41       186    4220.00     555.73       235    5050.00     559.91    \n",
      "    40     700.00     562.69        89    1715.00     560.11       138    2835.01     554.62       187    4225.00     555.68       236    5055.00     559.89    \n",
      "    41     705.00     561.62        90    1735.00     555.25       139    2840.01     554.83       188    4250.00     555.73       237    5060.00     559.94    \n",
      "    42     705.50     561.50        91    1740.00     554.26       140    2850.01     555.35       189    4255.00     555.96       238    5080.00     559.84    \n",
      "    43     715.00     559.17        92    1745.00     554.12       141    2855.01     555.42       190    4260.00     557.31       239    5085.00     559.84    \n",
      "    44     720.00     558.03        93    1785.00     554.44       142    2930.01     554.19       191    4265.00     559.16       240    5100.00     560.80    \n",
      "    45     725.01     557.06        94    1870.00     556.34       143    2935.01     554.25       192    4270.00     559.74       241    5105.00     560.80    \n",
      "    46     730.00     554.27        95    1950.00     555.68       144    2945.01     554.49       193    4280.00     559.87       242    5157.19     559.41    \n",
      "    47     735.01     556.26        96    2030.00     555.82       145    2950.01     554.50       194    4300.00     559.94    \n",
      "    48     785.01     547.10        97    2060.00     555.58       146    2955.01     554.43       195    4320.00     559.76    \n",
      "    49     790.00     546.41        98    2065.00     555.88       147    2965.01     554.10       196    4350.00     559.39    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 141:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2041372.55 350255.98, 2041827.48 349377.5, 2041584.33 347965.65, 2042094.16 345769.45)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     624.29        39     620.00     555.27        77    1590.00     554.02       115    2421.92     555.87       153    3715.00     558.17    \n",
      "     2      65.00     623.28        40     705.00     555.48        78    1630.00     554.22       116    2425.00     555.89       154    3720.00     558.26    \n",
      "     3      70.00     623.17        41     715.01     555.42        79    1710.00     553.92       117    2430.00     556.02       155    3725.00     558.67    \n",
      "     4     135.00     619.59        42     770.01     554.47        80    1740.00     553.49       118    2435.00     556.24       156    3775.00     557.76    \n",
      "     5     145.00     619.34        43     775.01     554.44        81    1740.13     553.46       119    2440.00     556.39       157    3804.99     557.37    \n",
      "     6     150.00     619.13        44     785.01     554.96        82    1745.00     552.49       120    2455.00     556.39       158    3809.99     557.35    \n",
      "     7     195.00     616.07        45     790.01     555.30        83    1750.00     551.33       121    2595.00     557.62       159    4025.00     557.72    \n",
      "     8     225.00     613.76        46     855.01     557.49        84    1755.01     550.04       122    2685.00     557.78       160    4104.99     558.75    \n",
      "     9     230.00     613.56        47     860.01     557.58        85    1840.00     552.34       123    2795.00     557.41       161    4135.00     559.30    \n",
      "    10     305.00     611.36        48     885.00     557.78        86    1845.00     551.45       124    2855.00     557.96       162    4240.00     557.84    \n",
      "    11     350.00     608.66        49     989.29     557.71        87    1850.00     545.97       125    3215.00     558.46       163    4285.00     557.37    \n",
      "    12     355.00     608.31        50    1085.01     557.42        88    1855.01     545.79       126    3220.00     558.21       164    4290.00     557.13    \n",
      "    13     360.00     607.92        51    1145.01     556.60        89    1935.00     545.74       127    3225.00     557.41       165    4295.00     556.07    \n",
      "    14     365.00     607.39        52    1155.00     556.51        90    1940.00     548.75       128    3230.00     557.20       166    4300.00     555.69    \n",
      "    15     370.00     605.42        53    1160.00     556.33        91    1940.76     549.01       129    3245.00     558.43       167    4305.00     555.79    \n",
      "    16     380.00     601.04        54    1200.00     553.94        92    1945.00     550.47       130    3250.00     558.78       168    4310.00     556.11    \n",
      "    17     385.00     598.67        55    1205.01     553.67        93    1950.01     551.53       131    3255.00     556.21       169    4314.99     556.73    \n",
      "    18     425.00     575.08        56    1210.00     554.09        94    1955.00     552.39       132    3260.00     553.80       170    4385.00     558.63    \n",
      "    19     430.00     572.09        57    1215.00     554.44        95    1965.00     553.96       133    3265.00     553.39       171    4390.00     558.48    \n",
      "    20     445.00     562.70        58    1220.00     554.67        96    1970.00     554.79       134    3294.99     554.25       172    4395.00     558.46    \n",
      "    21     450.00     559.74        59    1225.01     554.87        97    1975.00     555.41       135    3300.00     554.44       173    4424.99     559.22    \n",
      "    22     455.00     558.88        60    1325.00     555.68        98    2040.00     556.72       136    3340.00     556.38       174    4430.00     559.29    \n",
      "    23     465.00     557.46        61    1405.00     555.39        99    2155.00     556.94       137    3345.00     557.07       175    4440.00     559.13    \n",
      "    24     470.00     556.98        62    1425.00     555.21       100    2170.00     556.90       138    3350.00     558.11       176    4445.00     558.90    \n",
      "    25     475.00     556.39        63    1445.00     555.31       101    2220.00     556.36       139    3355.00     558.32       177    4485.00     556.59    \n",
      "    26     510.00     555.16        64    1450.00     554.93       102    2225.00     556.34       140    3380.00     558.90       178    4490.00     556.27    \n",
      "    27     515.00     555.96        65    1455.00     554.22       103    2240.00     556.38       141    3385.00     558.96       179    4500.00     555.48    \n",
      "    28     525.00     557.66        66    1460.01     553.38       104    2245.01     556.46       142    3440.00     558.50       180    4505.00     555.25    \n",
      "    29     530.00     559.01        67    1470.00     551.50       105    2285.00     557.41       143    3475.00     558.04       181    4515.00     556.59    \n",
      "    30     535.00     560.31        68    1475.00     551.12       106    2290.00     557.50       144    3580.00     558.27       182    4565.00     555.89    \n",
      "    31     540.00     560.44        69    1480.01     551.21       107    2310.00     557.35       145    3604.99     558.05       183    4570.00     555.88    \n",
      "    32     560.00     561.11        70    1515.00     551.32       108    2320.00     557.14       146    3610.00     558.06       184    4590.00     556.35    \n",
      "    33     575.00     561.82        71    1520.01     551.38       109    2325.00     557.01       147    3645.00     558.34       185    4629.99     557.55    \n",
      "    34     580.01     561.25        72    1535.00     552.43       110    2335.00     556.67       148    3650.00     558.34       186    4676.52     558.33    \n",
      "    35     595.00     558.52        73    1540.01     552.62       111    2380.00     556.24       149    3655.00     558.21    \n",
      "    36     600.00     557.51        74    1545.00     552.66       112    2385.01     556.02       150    3680.00     557.35    \n",
      "    37     605.00     556.78        75    1550.00     552.65       113    2390.00     555.72       151    3694.99     558.26    \n",
      "    38     615.00     555.74        76    1570.00     553.43       114    2395.00     555.57       152    3699.99     558.41    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 142:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2042823.61 350287.35, 2042956.95 348726.48, 2042556.93 345659.64)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     619.61        39     470.00     553.06        77    1330.00     552.97       115    1869.99     548.77       153    3450.00     556.13    \n",
      "     2      44.99     614.37        40     474.99     553.04        78    1380.00     552.38       116    1885.00     545.26       154    3494.99     555.75    \n",
      "     3      49.99     614.48        41     479.99     553.18        79    1385.00     552.25       117    1889.99     544.95       155    3540.00     555.85    \n",
      "     4      55.00     614.78        42     490.00     553.64        80    1425.00     552.22       118    1894.99     548.16       156    3590.00     556.22    \n",
      "     5     110.00     616.35        43     499.99     554.03        81    1474.99     552.79       119    1900.00     548.20       157    3630.00     556.31    \n",
      "     6     149.99     618.50        44     559.99     552.66        82    1499.99     552.93       120    1905.00     547.76       158    3740.00     555.35    \n",
      "     7     154.99     618.73        45     565.00     552.65        83    1504.99     552.91       121    1910.00     547.46       159    3744.99     555.34    \n",
      "     8     160.00     618.71        46     584.99     553.04        84    1545.00     553.08       122    1914.99     547.40       160    3825.00     556.62    \n",
      "     9     165.00     618.83        47     590.00     553.21        85    1560.00     553.03       123    1915.00     547.40       161    3830.00     556.66    \n",
      "    10     200.00     619.42        48     600.00     553.74        86    1565.00     553.10       124    1925.00     547.62       162    3869.99     556.35    \n",
      "    11     204.99     618.87        49     609.99     554.18        87    1566.56     553.21       125    1944.99     548.38       163    3915.00     555.53    \n",
      "    12     209.99     618.18        50     639.99     555.12        88    1589.99     554.61       126    1994.99     550.93       164    4000.00     556.25    \n",
      "    13     215.00     617.67        51     675.00     556.01        89    1594.99     554.19       127    2000.00     552.16       165    4015.00     556.49    \n",
      "    14     230.00     617.29        52     680.00     556.08        90    1605.00     552.39       128    2005.00     554.23       166    4019.99     556.50    \n",
      "    15     234.99     615.90        53     840.00     556.33        91    1610.00     551.59       129    2010.00     555.10       167    4094.99     556.30    \n",
      "    16     240.00     613.82        54     860.00     556.14        92    1614.99     550.98       130    2044.99     554.40       168    4100.00     556.32    \n",
      "    17     245.00     611.37        55     895.00     556.00        93    1664.99     548.90       131    2050.00     554.22       169    4144.99     556.94    \n",
      "    18     264.99     600.59        56     930.00     556.06        94    1669.99     548.64       132    2055.00     554.10       170    4160.00     556.98    \n",
      "    19     270.00     597.73        57     940.00     555.84        95    1689.99     547.43       133    2110.00     554.59       171    4165.00     556.91    \n",
      "    20     284.99     588.46        58     959.99     554.10        96    1694.99     547.32       134    2189.99     554.42       172    4230.00     555.68    \n",
      "    21     289.99     585.52        59     964.99     553.10        97    1699.99     547.32       135    2330.00     553.79       173    4269.99     555.23    \n",
      "    22     305.00     577.29        60     984.99     547.88        98    1705.00     547.83       136    2335.00     553.81       174    4315.00     555.33    \n",
      "    23     310.00     574.15        61     989.99     546.93        99    1710.00     548.64       137    2339.99     553.80       175    4319.99     555.41    \n",
      "    24     320.00     567.51        62    1014.99     545.90       100    1714.99     549.35       138    2419.99     554.63       176    4380.00     557.18    \n",
      "    25     325.00     564.65        63    1019.99     546.63       101    1725.00     550.59       139    2439.99     554.69       177    4385.00     557.28    \n",
      "    26     335.00     560.06        64    1025.00     548.22       102    1725.83     550.63       140    2485.00     554.46       178    4390.00     557.16    \n",
      "    27     339.99     558.28        65    1030.00     549.89       103    1730.00     550.81       141    2489.99     554.47       179    4475.00     555.96    \n",
      "    28     350.00     556.20        66    1035.00     551.09       104    1739.99     550.45       142    2535.00     555.18       180    4515.00     555.03    \n",
      "    29     355.00     556.05        67    1105.00     553.26       105    1744.99     550.09       143    2580.00     555.66       181    4519.99     554.96    \n",
      "    30     385.00     555.62        68    1115.00     553.51       106    1760.00     548.17       144    2725.00     555.13       182    4535.00     555.31    \n",
      "    31     390.00     555.68        69    1119.99     553.57       107    1764.99     547.47       145    2835.00     555.85       183    4540.00     555.39    \n",
      "    32     405.00     556.18        70    1170.00     553.26       108    1769.99     547.32       146    2894.99     555.80       184    4565.00     556.38    \n",
      "    33     410.00     556.41        71    1195.00     552.93       109    1785.00     547.32       147    2989.99     555.48       185    4569.99     556.46    \n",
      "    34     415.00     556.55        72    1225.00     552.98       110    1789.99     547.23       148    3175.00     555.39       186    4615.00     556.04    \n",
      "    35     430.00     557.41        73    1259.99     552.74       111    1830.00     544.92       149    3244.99     556.02       187    4644.99     556.22    \n",
      "    36     435.00     557.56        74    1265.00     552.67       112    1835.00     544.67       150    3269.99     556.06       188    4659.38     556.65    \n",
      "    37     460.00     553.92        75    1289.99     552.14       113    1839.99     544.32       151    3294.99     556.32    \n",
      "    38     465.00     553.40        76    1295.00     552.19       114    1864.99     548.79       152    3340.00     556.58    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 143:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2044255.07 349522.6, 2043839.36 348377.44, 2043815.83 347616.61, 2043133.43 345161.57)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     575.73        41     490.00     556.91        81    1220.00     553.46       121    1829.99     551.77       161    3510.00     555.19    \n",
      "     2      25.00     575.74        42     495.00     554.75        82    1240.00     553.03       122    1834.99     551.74       162    3515.00     555.04    \n",
      "     3      35.00     575.93        43     520.00     555.62        83    1244.99     551.77       123    1869.99     551.74       163    3565.00     556.23    \n",
      "     4      45.00     575.76        44     540.00     556.00        84    1250.00     550.00       124    1910.00     552.22       164    3625.00     557.96    \n",
      "     5      59.99     575.74        45     550.00     556.29        85    1255.00     547.97       125    1979.47     552.68       165    3629.99     558.79    \n",
      "     6      64.99     576.25        46     555.00     556.49        86    1260.00     546.51       126    1999.99     552.80       166    3634.99     559.24    \n",
      "     7      69.99     576.21        47     565.00     556.94        87    1320.00     546.66       127    2005.00     552.80       167    3674.99     559.34    \n",
      "     8      74.99     575.04        48     570.00     557.02        88    1324.99     548.56       128    2010.00     552.77       168    3680.00     559.41    \n",
      "     9      79.99     572.37        49     584.99     556.65        89    1329.99     549.60       129    2165.00     552.88       169    3685.00     559.42    \n",
      "    10      84.99     570.72        50     589.99     556.49        90    1340.00     549.71       130    2270.00     553.78       170    3705.00     559.24    \n",
      "    11     109.99     566.39        51     655.00     549.45        91    1375.00     550.39       131    2465.00     552.31       171    3714.99     559.05    \n",
      "    12     114.99     565.63        52     659.99     549.50        92    1394.99     550.49       132    2500.00     552.53       172    3780.00     558.53    \n",
      "    13     165.00     569.42        53     669.99     549.84        93    1409.99     551.25       133    2505.00     552.59       173    3784.99     558.75    \n",
      "    14     175.00     569.75        54     674.99     549.93        94    1414.99     551.39       134    2515.00     553.07       174    3795.00     560.01    \n",
      "    15     179.99     569.59        55     694.99     549.80        95    1429.99     551.37       135    2565.00     553.39       175    3800.00     560.06    \n",
      "    16     184.99     569.37        56     790.00     550.98        96    1434.99     551.32       136    2569.99     555.30       176    3839.99     558.80    \n",
      "    17     190.00     569.19        57     810.00     551.11        97    1455.62     550.87       137    2595.00     565.01       177    3844.99     558.71    \n",
      "    18     200.00     569.14        58     870.00     552.05        98    1470.00     550.56       138    2600.00     566.61       178    3904.99     558.50    \n",
      "    19     204.99     569.16        59     885.00     552.21        99    1474.99     550.48       139    2620.00     566.71       179    3939.99     559.18    \n",
      "    20     215.00     569.39        60     895.00     552.11       100    1499.99     550.43       140    2635.00     567.05       180    3994.99     560.00    \n",
      "    21     219.99     569.21        61     950.00     552.40       101    1514.99     550.49       141    2640.00     567.07       181    4000.00     560.01    \n",
      "    22     229.99     568.63        62     955.00     552.18       102    1519.99     550.11       142    2644.99     566.84       182    4025.00     559.83    \n",
      "    23     235.00     568.27        63     985.00     550.33       103    1525.00     548.27       143    2660.00     566.64       183    4160.00     560.49    \n",
      "    24     244.99     567.26        64     990.00     549.93       104    1530.00     546.72       144    2799.99     567.07       184    4230.00     561.64    \n",
      "    25     255.00     566.38        65     995.00     549.41       105    1534.99     546.43       145    2820.00     567.07       185    4284.99     562.05    \n",
      "    26     340.00     564.60        66    1000.00     548.19       106    1590.00     544.05       146    2894.99     568.11       186    4290.00     562.06    \n",
      "    27     345.00     564.64        67    1005.00     547.59       107    1595.00     544.31       147    2929.99     568.33       187    4310.00     561.87    \n",
      "    28     375.00     564.57        68    1015.00     547.15       108    1639.99     547.78       148    2960.00     568.23       188    4314.99     561.85    \n",
      "    29     380.00     564.53        69    1020.00     547.04       109    1644.99     547.62       149    3064.99     568.96       189    4449.99     561.63    \n",
      "    30     390.00     564.06        70    1090.00     546.51       110    1650.00     546.00       150    3070.00     568.90       190    4474.99     561.42    \n",
      "    31     395.00     564.16        71    1095.00     548.21       111    1655.00     544.88       151    3099.99     567.47       191    4480.00     560.71    \n",
      "    32     400.00     564.37        72    1100.00     549.43       112    1659.99     545.08       152    3115.00     566.69       192    4484.99     559.91    \n",
      "    33     415.00     564.11        73    1105.00     549.49       113    1670.00     550.96       153    3119.99     566.56       193    4489.99     559.26    \n",
      "    34     425.00     564.95        74    1149.99     550.67       114    1675.00     552.22       154    3194.99     565.09       194    4504.99     558.34    \n",
      "    35     430.00     565.00        75    1154.99     550.86       115    1683.81     552.62       155    3234.99     564.06       195    4509.99     558.99    \n",
      "    36     440.00     564.05        76    1194.99     553.56       116    1684.99     552.67       156    3280.00     563.21       196    4514.99     560.07    \n",
      "    37     445.00     563.66        77    1199.99     553.86       117    1690.00     552.73       157    3344.99     562.73       197    4520.00     560.96    \n",
      "    38     465.00     562.46        78    1204.99     553.68       118    1695.00     552.88       158    3424.99     561.40       198    4524.99     561.37    \n",
      "    39     480.00     561.24        79    1210.00     553.56       119    1700.00     553.40       159    3430.00     561.09       199    4527.59     561.50    \n",
      "    40     485.00     559.20        80    1218.28     553.44       120    1715.00     553.07       160    3485.00     557.18    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 144:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2044560.97 348816.68, 2044121.73 347655.83, 2043760.92 345028.23)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     575.35        37     365.00     554.54        73    1115.00     551.57       109    2255.00     553.92       145    2945.00     557.06    \n",
      "     2      45.00     570.82        38     400.00     550.17        74    1205.00     551.92       110    2260.00     554.05       146    2950.00     557.07    \n",
      "     3      50.00     570.69        39     405.00     549.87        75    1215.00     552.02       111    2265.00     554.14       147    2975.00     557.40    \n",
      "     4      55.00     571.49        40     430.00     549.57        76    1220.00     552.03       112    2270.00     554.20       148    2980.00     557.38    \n",
      "     5      60.00     571.22        41     440.00     549.40        77    1240.00     551.85       113    2275.00     554.36       149    2985.00     557.18    \n",
      "     6      65.00     571.34        42     445.00     549.38        78    1241.17     551.83       114    2320.00     556.02       150    2995.00     556.55    \n",
      "     7      70.00     570.67        43     590.00     549.99        79    1290.00     550.78       115    2325.00     556.59       151    3000.00     556.35    \n",
      "     8      74.99     570.31        44     595.00     550.09        80    1295.00     550.63       116    2360.00     561.15       152    3010.00     556.54    \n",
      "     9      80.00     570.13        45     665.00     552.24        81    1300.00     550.53       117    2365.00     561.34       153    3025.00     557.07    \n",
      "    10     100.00     567.41        46     670.00     552.28        82    1330.00     550.29       118    2370.00     561.35       154    3030.00     557.22    \n",
      "    11     105.00     566.78        47     695.00     550.97        83    1350.00     550.30       119    2390.00     561.30       155    3050.00     557.09    \n",
      "    12     110.00     566.05        48     700.00     550.85        84    1450.00     552.29       120    2395.00     561.49       156    3075.00     556.76    \n",
      "    13     115.00     565.93        49     709.38     550.79        85    1474.99     551.90       121    2400.00     561.41       157    3100.00     556.68    \n",
      "    14     140.00     566.08        50     720.00     550.73        86    1525.00     551.86       122    2445.00     560.31       158    3105.00     557.09    \n",
      "    15     145.00     565.82        51     725.00     550.06        87    1605.00     552.78       123    2495.00     558.72       159    3110.00     556.76    \n",
      "    16     165.00     564.06        52     734.99     547.10        88    1610.00     552.79       124    2569.99     557.48       160    3115.00     557.17    \n",
      "    17     170.00     563.52        53     740.00     545.75        89    1640.00     552.65       125    2575.00     557.35       161    3120.00     557.86    \n",
      "    18     174.99     563.01        54     745.00     545.63        90    1645.00     552.70       126    2605.00     556.14       162    3124.99     558.10    \n",
      "    19     190.00     562.30        55     870.00     544.12        91    1685.00     553.53       127    2610.00     555.74       163    3140.00     558.19    \n",
      "    20     195.00     561.87        56     875.00     544.15        92    1715.00     553.71       128    2620.00     554.76       164    3145.00     557.93    \n",
      "    21     205.00     559.63        57     940.00     546.96        93    1720.00     553.69       129    2625.00     555.01       165    3170.00     556.42    \n",
      "    22     210.00     558.89        58     945.00     546.85        94    1750.00     552.86       130    2655.00     557.17       166    3175.00     555.82    \n",
      "    23     230.00     557.79        59     950.00     546.12        95    1770.00     552.77       131    2660.00     557.37       167    3190.00     557.02    \n",
      "    24     235.00     557.54        60     960.00     544.47        96    1800.00     552.79       132    2665.00     557.37       168    3195.00     557.93    \n",
      "    25     240.00     557.41        61     965.00     544.78        97    1840.00     552.23       133    2705.00     557.54       169    3200.00     558.32    \n",
      "    26     245.00     557.13        62     970.00     545.43        98    2014.99     552.23       134    2710.00     557.66       170    3225.01     559.91    \n",
      "    27     250.00     555.88        63     980.00     545.71        99    2025.00     552.28       135    2735.00     558.58       171    3230.00     560.07    \n",
      "    28     255.00     554.80        64     985.01     545.73       100    2055.00     551.73       136    2770.00     559.50       172    3270.00     560.81    \n",
      "    29     260.00     554.52        65     990.00     546.18       101    2060.00     551.67       137    2775.00     559.55       173    3375.00     561.47    \n",
      "    30     320.00     555.99        66     995.00     547.24       102    2095.00     551.90       138    2780.00     559.56       174    3465.00     560.29    \n",
      "    31     325.00     556.52        67    1000.00     548.49       103    2100.00     551.97       139    2790.00     559.33       175    3660.00     560.01    \n",
      "    32     330.00     556.25        68    1020.00     551.12       104    2155.00     553.69       140    2795.00     559.25       176    3780.00     561.00    \n",
      "    33     335.00     556.05        69    1025.00     551.64       105    2160.00     553.82       141    2830.00     559.23       177    3815.00     560.88    \n",
      "    34     345.00     556.09        70    1030.98     551.62       106    2165.00     553.87       142    2835.00     559.26       178    3845.00     561.07    \n",
      "    35     350.00     555.94        71    1060.00     551.53       107    2230.00     552.88       143    2840.00     559.24       179    3860.00     561.27    \n",
      "    36     360.00     555.13        72    1105.00     551.62       108    2235.00     553.04       144    2910.00     557.75       180    3893.43     560.58    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 145:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2044859.02 348471.56, 2044733.53 347820.55, 2044702.15 347553.86, 2044482.53 345051.76)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     577.16        39     554.99     549.38        77    1060.00     561.50       115    1969.99     551.20       153    2784.99     558.47    \n",
      "     2      14.99     577.18        40     594.99     548.65        78    1074.99     561.46       116    1974.99     551.21       154    2830.00     558.86    \n",
      "     3      24.99     577.32        41     625.00     548.10        79    1129.99     560.97       117    1980.00     551.27       155    2854.99     558.50    \n",
      "     4      29.99     577.42        42     630.00     547.85        80    1134.99     560.89       118    2040.00     552.34       156    2890.00     558.42    \n",
      "     5      49.99     577.98        43     635.00     547.49        81    1139.99     560.51       119    2045.00     552.51       157    3040.00     560.17    \n",
      "     6      59.99     578.20        44     640.00     547.10        82    1144.99     560.45       120    2050.00     552.87       158    3055.00     560.26    \n",
      "     7      64.99     577.96        45     650.00     546.01        83    1149.99     560.62       121    2055.00     553.04       159    3130.00     561.70    \n",
      "     8     115.00     573.19        46     655.00     545.58        84    1155.00     560.83       122    2084.99     553.14       160    3135.00     561.71    \n",
      "     9     120.00     572.77        47     662.99     545.70        85    1160.00     560.86       123    2110.00     553.01       161    3175.00     561.31    \n",
      "    10     135.00     571.79        48     679.99     546.00        86    1184.99     560.59       124    2115.00     553.11       162    3180.00     561.32    \n",
      "    11     174.99     569.52        49     685.00     545.96        87    1235.00     559.46       125    2120.00     553.27       163    3190.00     561.57    \n",
      "    12     179.99     569.02        50     690.00     544.72        88    1249.99     559.40       126    2125.00     553.40       164    3194.99     561.80    \n",
      "    13     184.99     568.72        51     694.99     544.23        89    1264.99     560.72       127    2139.99     554.29       165    3199.99     562.00    \n",
      "    14     195.00     568.30        52     719.99     544.51        90    1269.99     560.46       128    2144.99     554.12       166    3204.99     562.17    \n",
      "    15     199.99     566.55        53     749.99     544.30        91    1290.00     558.70       129    2149.99     553.59       167    3225.00     562.06    \n",
      "    16     230.00     554.78        54     754.99     544.23        92    1295.00     558.50       130    2155.00     553.34       168    3230.00     562.30    \n",
      "    17     235.00     553.54        55     760.00     544.33        93    1314.99     558.76       131    2175.00     553.34       169    3235.00     562.94    \n",
      "    18     270.00     555.57        56     784.99     544.57        94    1319.99     558.87       132    2185.00     553.71       170    3240.00     562.83    \n",
      "    19     274.99     555.63        57     834.99     544.81        95    1330.00     559.18       133    2190.00     553.94       171    3255.00     562.15    \n",
      "    20     279.99     555.77        58     840.00     544.93        96    1335.00     559.23       134    2194.99     554.56       172    3259.99     562.05    \n",
      "    21     284.99     555.95        59     844.99     545.95        97    1359.99     559.23       135    2199.99     554.83       173    3280.00     562.27    \n",
      "    22     289.99     556.21        60     850.00     547.72        98    1390.00     559.08       136    2249.99     555.83       174    3285.00     562.35    \n",
      "    23     299.99     557.84        61     875.00     559.73        99    1504.99     559.56       137    2329.99     556.75       175    3335.00     562.59    \n",
      "    24     304.99     559.22        62     878.03     560.53       100    1539.99     559.34       138    2360.00     556.74       176    3340.00     562.73    \n",
      "    25     309.99     560.84        63     879.99     561.04       101    1685.00     559.65       139    2379.99     556.60       177    3360.00     565.71    \n",
      "    26     314.99     560.72        64     894.99     561.18       102    1695.00     559.41       140    2384.99     556.65       178    3365.00     566.31    \n",
      "    27     330.00     556.16        65     900.00     561.19       103    1774.99     558.58       141    2405.00     557.07       179    3370.00     566.81    \n",
      "    28     335.00     554.45        66     920.00     561.44       104    1779.99     558.56       142    2420.00     557.48       180    3390.00     568.47    \n",
      "    29     345.00     550.93        67     931.52     561.64       105    1854.99     559.00       143    2425.00     557.53       181    3395.00     568.30    \n",
      "    30     350.00     550.11        68     940.00     561.78       106    1860.00     559.00       144    2429.99     557.53       182    3400.00     568.17    \n",
      "    31     355.00     550.05        69     974.99     561.94       107    1880.00     558.88       145    2455.00     557.38       183    3410.00     568.37    \n",
      "    32     409.99     550.07        70     985.00     562.12       108    1885.00     556.98       146    2554.99     557.65       184    3415.00     568.35    \n",
      "    33     414.99     550.21        71     990.00     562.17       109    1894.99     552.40       147    2559.99     557.62       185    3420.00     567.95    \n",
      "    34     419.99     550.08        72    1014.99     561.65       110    1899.99     550.52       148    2575.00     557.40       186    3425.00     566.69    \n",
      "    35     424.99     550.01        73    1034.99     561.43       111    1904.99     550.77       149    2614.99     557.04       187    3430.00     565.13    \n",
      "    36     480.00     550.14        74    1040.00     561.32       112    1914.99     551.21       150    2619.99     557.12       188    3435.00     564.78    \n",
      "    37     485.00     550.04        75    1050.00     561.58       113    1920.00     551.29       151    2640.00     557.54       189    3443.25     565.75    \n",
      "    38     549.99     549.50        76    1055.00     561.58       114    1964.99     551.14       152    2690.00     558.14    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 146:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2044913.93 348471.56, 2044811.96 347742.11, 2044780.59 347475.43, 2044553.12 345036.07)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     580.11        42     430.00     564.07        83     888.97     556.22       124    1669.99     559.68       165    2634.99     558.07    \n",
      "     2       5.00     580.06        43     449.99     564.54        84     889.99     556.71       125    1685.00     559.93       166    2725.00     558.01    \n",
      "     3      55.00     579.05        44     474.99     564.25        85     895.00     558.93       126    1690.00     559.80       167    2729.99     558.04    \n",
      "     4      60.00     579.11        45     499.99     564.09        86     940.00     560.20       127    1729.99     558.54       168    2764.99     558.48    \n",
      "     5      65.00     578.89        46     534.99     564.05        87     945.00     560.45       128    1734.99     558.44       169    2895.00     559.54    \n",
      "     6      69.99     578.73        47     575.00     564.26        88     950.00     560.85       129    1819.99     558.23       170    2900.00     559.53    \n",
      "     7      74.99     578.13        48     580.00     564.09        89     955.00     561.17       130    1824.99     557.86       171    2905.00     559.47    \n",
      "     8      90.00     576.99        49     584.99     563.83        90     959.99     561.41       131    1854.99     552.16       172    2910.00     559.45    \n",
      "     9      99.99     576.15        50     595.00     563.68        91     965.00     561.60       132    1860.00     551.44       173    2930.00     559.68    \n",
      "    10     105.00     575.80        51     603.59     563.44        92     975.00     561.85       133    1865.00     551.39       174    3020.00     559.83    \n",
      "    11     115.00     575.23        52     614.99     563.13        93     980.00     561.86       134    1870.00     551.45       175    3055.00     560.20    \n",
      "    12     120.00     575.07        53     634.99     562.72        94     990.00     561.80       135    1900.00     551.27       176    3060.00     560.22    \n",
      "    13     124.99     574.77        54     639.99     562.44        95     994.99     561.74       136    1910.00     551.16       177    3080.00     560.12    \n",
      "    14     135.00     574.28        55     650.00     558.74        96    1005.06     561.30       137    1919.99     550.96       178    3120.00     560.71    \n",
      "    15     140.00     573.93        56     655.00     557.58        97    1009.99     561.14       138    1925.00     550.90       179    3125.00     560.83    \n",
      "    16     149.99     572.81        57     660.00     556.45        98    1020.00     561.01       139    2074.99     551.93       180    3145.00     561.55    \n",
      "    17     154.99     572.38        58     664.99     555.26        99    1025.00     561.00       140    2104.99     552.57       181    3150.00     561.69    \n",
      "    18     160.00     572.10        59     680.00     547.18       100    1050.00     561.09       141    2120.00     553.17       182    3165.00     561.53    \n",
      "    19     184.99     570.88        60     685.00     546.04       101    1080.00     560.77       142    2125.00     553.26       183    3169.99     561.43    \n",
      "    20     200.00     569.71        61     689.99     545.60       102    1090.00     560.51       143    2130.00     552.46       184    3175.00     561.40    \n",
      "    21     209.99     569.01        62     694.99     544.64       103    1134.99     560.37       144    2134.99     552.30       185    3215.00     561.45    \n",
      "    22     215.00     568.86        63     700.00     543.62       104    1145.00     560.43       145    2140.00     552.57       186    3265.00     561.39    \n",
      "    23     220.00     568.58        64     705.00     543.09       105    1150.00     560.43       146    2145.00     553.16       187    3280.00     561.53    \n",
      "    24     229.99     567.81        65     710.00     543.19       106    1235.00     559.56       147    2150.00     553.31       188    3305.00     561.62    \n",
      "    25     234.99     567.53        66     715.00     542.51       107    1259.99     559.50       148    2185.00     555.34       189    3310.00     561.92    \n",
      "    26     245.00     567.23        67     719.99     542.23       108    1265.00     559.44       149    2190.00     555.56       190    3315.00     562.47    \n",
      "    27     264.99     565.88        68     725.00     542.08       109    1289.99     558.93       150    2194.99     555.57       191    3320.00     563.34    \n",
      "    28     270.00     564.60        69     735.00     542.14       110    1294.99     558.98       151    2225.00     555.35       192    3324.99     564.14    \n",
      "    29     295.00     562.84        70     736.54     542.14       111    1319.99     559.69       152    2240.00     555.31       193    3354.99     568.73    \n",
      "    30     300.00     562.54        71     755.00     542.24       112    1335.00     560.20       153    2245.00     555.33       194    3360.00     568.66    \n",
      "    31     310.00     562.65        72     759.99     542.23       113    1340.00     560.33       154    2259.99     556.04       195    3365.00     568.36    \n",
      "    32     314.99     564.09        73     765.00     542.18       114    1389.99     560.34       155    2264.99     556.20       196    3370.00     566.77    \n",
      "    33     319.99     564.24        74     769.99     542.10       115    1414.99     560.20       156    2300.00     556.49       197    3380.00     564.46    \n",
      "    34     325.00     563.97        75     775.00     542.07       116    1470.00     560.28       157    2305.00     556.45       198    3384.99     565.04    \n",
      "    35     335.00     564.50        76     780.00     542.25       117    1495.00     560.46       158    2324.99     556.14       199    3420.00     569.77    \n",
      "    36     344.99     565.15        77     845.00     543.14       118    1500.00     560.46       159    2405.00     557.60       200    3425.00     569.92    \n",
      "    37     364.99     565.11        78     854.99     544.68       119    1525.00     560.26       160    2470.00     558.28       201    3455.01     569.47    \n",
      "    38     369.99     565.03        79     860.00     545.11       120    1555.00     559.75       161    2520.00     558.34    \n",
      "    39     394.99     564.38        80     864.99     545.77       121    1580.00     559.89       162    2565.00     558.06    \n",
      "    40     415.00     564.04        81     870.00     547.59       122    1630.00     559.47       163    2620.00     558.18    \n",
      "    41     424.99     564.04        82     875.00     549.53       123    1664.99     559.63       164    2625.00     558.16    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 147:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2045164.92 348487.25, 2045188.45 348165.66, 2045196.3 347263.65, 2045455.14 345216.48)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     584.43        45     515.00     548.61        89    1230.00     555.39       133    1680.00     549.27       177    2820.00     561.83    \n",
      "     2      50.00     583.72        46     545.00     548.59        90    1270.00     561.53       134    1685.00     549.04       178    2825.00     560.66    \n",
      "     3      80.00     583.65        47     550.00     548.55        91    1300.00     565.85       135    1745.00     549.05       179    2830.00     560.35    \n",
      "     4      85.00     583.53        48     620.00     547.61        92    1305.00     566.62       136    1860.00     549.60       180    2834.99     561.24    \n",
      "     5     100.00     582.99        49     625.00     547.57        93    1310.00     567.08       137    1949.99     549.50       181    2845.00     564.13    \n",
      "     6     125.00     581.86        50     635.00     547.63        94    1320.00     566.91       138    2015.00     550.79       182    2850.00     563.53    \n",
      "     7     155.00     580.10        51     640.00     547.28        95    1325.00     565.88       139    2060.00     552.21       183    2860.00     563.65    \n",
      "     8     160.00     579.78        52     645.00     546.81        96    1335.00     562.82       140    2065.00     552.29       184    2865.00     563.81    \n",
      "     9     165.00     579.41        53     650.00     546.41        97    1340.00     562.01       141    2070.00     552.57       185    2875.00     564.29    \n",
      "    10     170.00     579.29        54     665.00     545.70        98    1345.00     561.70       142    2080.00     553.97       186    2880.00     563.81    \n",
      "    11     175.00     579.27        55     670.00     545.57        99    1350.00     561.64       143    2085.00     554.40       187    2885.00     563.25    \n",
      "    12     180.00     579.19        56     755.00     545.69       100    1359.99     562.14       144    2149.99     552.10       188    2890.00     563.45    \n",
      "    13     185.00     579.18        57     760.00     545.88       101    1365.00     562.25       145    2155.00     552.05       189    2895.00     565.39    \n",
      "    14     190.00     578.92        58     765.00     546.71       102    1370.00     561.86       146    2170.00     552.56       190    2900.00     566.67    \n",
      "    15     195.00     578.36        59     770.00     547.19       103    1375.00     561.37       147    2180.00     553.04       191    2905.00     566.83    \n",
      "    16     205.00     576.45        60     775.00     546.85       104    1390.00     558.31       148    2270.00     556.91       192    2955.00     567.93    \n",
      "    17     210.00     575.55        61     780.00     545.81       105    1395.00     558.08       149    2280.00     557.66       193    2960.00     568.00    \n",
      "    18     215.00     574.77        62     785.00     545.49       106    1400.00     558.16       150    2285.00     557.95       194    2990.00     566.42    \n",
      "    19     230.00     574.35        63     840.00     545.51       107    1405.00     557.93       151    2295.00     557.72       195    2995.00     566.30    \n",
      "    20     255.00     573.19        64     845.00     545.48       108    1410.00     557.37       152    2300.00     557.55       196    3015.00     567.34    \n",
      "    21     260.00     572.79        65     850.00     543.23       109    1415.00     556.56       153    2310.00     556.85       197    3019.99     567.82    \n",
      "    22     280.00     570.64        66     855.00     540.88       110    1420.00     555.47       154    2315.00     556.67       198    3024.99     569.38    \n",
      "    23     300.00     568.73        67     875.00     541.02       111    1425.00     554.79       155    2344.99     557.25       199    3029.99     569.73    \n",
      "    24     305.00     568.29        68     885.00     540.89       112    1430.00     554.63       156    2350.00     557.32       200    3045.00     570.22    \n",
      "    25     310.00     568.11        69     895.00     540.93       113    1440.00     554.43       157    2425.00     557.32       201    3050.00     570.59    \n",
      "    26     322.45     567.82        70     900.00     540.91       114    1445.00     554.47       158    2495.00     557.92       202    3065.00     572.40    \n",
      "    27     330.00     566.05        71     905.00     541.05       115    1450.00     554.66       159    2515.00     557.87       203    3070.00     572.24    \n",
      "    28     335.00     565.02        72     925.00     542.03       116    1455.00     554.88       160    2539.99     558.06       204    3075.00     572.11    \n",
      "    29     340.00     564.10        73     930.00     543.47       117    1459.99     555.77       161    2545.00     558.13       205    3080.00     573.59    \n",
      "    30     345.00     563.21        74     935.00     545.81       118    1465.00     556.85       162    2560.00     558.69       206    3085.00     573.75    \n",
      "    31     350.00     562.12        75     940.00     547.68       119    1470.00     557.99       163    2570.00     559.18       207    3100.00     574.16    \n",
      "    32     355.00     560.51        76     940.03     547.68       120    1475.00     558.93       164    2575.00     559.29       208    3210.00     574.99    \n",
      "    33     360.00     558.25        77     945.00     548.52       121    1500.00     559.56       165    2580.00     559.14       209    3214.99     575.12    \n",
      "    34     365.00     556.02        78     950.00     548.79       122    1505.00     560.94       166    2610.00     557.76       210    3219.99     576.04    \n",
      "    35     375.00     556.38        79    1000.00     548.55       123    1520.00     566.93       167    2615.00     557.32       211    3224.99     576.87    \n",
      "    36     380.00     556.47        80    1005.00     548.61       124    1525.00     567.10       168    2620.00     557.48       212    3235.00     576.72    \n",
      "    37     401.46     556.55        81    1010.00     548.71       125    1530.00     566.10       169    2625.00     558.33       213    3240.00     576.89    \n",
      "    38     410.00     556.58        82    1075.00     550.81       126    1565.00     554.26       170    2630.00     559.56       214    3255.00     578.05    \n",
      "    39     415.00     555.57        83    1180.00     550.88       127    1570.00     552.71       171    2635.00     560.61       215    3260.00     578.40    \n",
      "    40     444.99     548.42        84    1185.00     551.21       128    1585.00     552.47       172    2639.99     560.80       216    3265.00     578.65    \n",
      "    41     449.99     548.25        85    1190.00     551.58       129    1590.00     552.36       173    2645.00     560.88       217    3270.00     578.63    \n",
      "    42     480.00     549.05        86    1210.00     552.30       130    1605.00     551.94       174    2655.00     561.19       218    3280.00     578.19    \n",
      "    43     485.00     549.06        87    1215.00     552.52       131    1650.00     551.18       175    2739.99     561.65       219    3285.00     579.53    \n",
      "    44     510.00     548.64        88    1224.49     554.49       132    1655.00     551.07       176    2815.00     562.34       220    3287.96     580.40    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 148:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2045533.57 348416.66, 2045596.32 347734.27, 2045533.57 347051.88, 2045753.19 345326.29)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     574.06        55     455.00     555.24       109    1260.00     555.75       163    2045.01     558.20       217    2775.00     565.78    \n",
      "     2       5.00     576.40        56     465.00     553.36       110    1275.00     561.06       164    2050.01     557.76       218    2785.00     566.14    \n",
      "     3      10.00     576.40        57     470.00     552.52       111    1280.00     562.57       165    2060.01     556.54       219    2790.00     566.18    \n",
      "     4      15.00     574.12        58     480.00     550.94       112    1295.00     566.13       166    2065.01     556.12       220    2795.00     566.13    \n",
      "     5      20.00     573.93        59     485.00     550.04       113    1300.00     566.42       167    2075.01     555.81       221    2800.00     566.03    \n",
      "     6      25.01     573.54        60     490.00     549.38       114    1305.00     566.56       168    2080.01     555.74       222    2805.00     565.62    \n",
      "     7      30.01     573.02        61     495.00     548.87       115    1310.00     566.64       169    2090.01     555.38       223    2810.00     565.16    \n",
      "     8      50.00     572.64        62     505.00     547.39       116    1315.00     565.74       170    2095.01     555.34       224    2815.00     564.76    \n",
      "     9      55.00     572.50        63     515.00     545.53       117    1330.00     564.64       171    2130.01     555.27       225    2820.00     564.56    \n",
      "    10      60.00     572.63        64     520.01     545.11       118    1335.00     564.77       172    2180.01     556.02       226    2835.00     566.67    \n",
      "    11      70.00     572.37        65     620.00     544.41       119    1345.00     566.11       173    2195.01     556.32       227    2840.00     567.67    \n",
      "    12      75.01     572.28        66     670.00     544.28       120    1350.00     566.68       174    2215.01     556.40       228    2845.00     568.59    \n",
      "    13      95.00     572.37        67     675.01     544.82       121    1355.00     566.68       175    2220.01     556.86       229    2850.00     569.00    \n",
      "    14     105.00     572.49        68     680.00     545.54       122    1370.54     566.39       176    2225.01     557.47       230    2855.00     569.64    \n",
      "    15     125.01     572.52        69     685.27     546.14       123    1375.00     566.28       177    2240.01     559.03       231    2860.00     570.35    \n",
      "    16     130.01     572.24        70     690.00     546.19       124    1380.01     565.46       178    2245.01     559.58       232    2865.00     571.09    \n",
      "    17     165.00     569.12        71     700.00     546.22       125    1415.00     559.12       179    2250.01     561.36       233    2870.00     571.46    \n",
      "    18     170.00     568.91        72     705.00     545.73       126    1435.00     555.76       180    2260.01     564.52       234    2880.00     572.27    \n",
      "    19     180.00     568.71        73     715.00     544.40       127    1445.00     553.92       181    2265.01     566.13       235    2885.00     573.97    \n",
      "    20     190.00     568.59        74     720.01     544.17       128    1450.00     553.12       182    2270.01     567.87       236    2890.00     574.65    \n",
      "    21     195.00     568.56        75     740.00     543.63       129    1470.00     550.40       183    2275.01     571.16       237    2895.00     574.54    \n",
      "    22     200.00     568.57        76     760.00     542.93       130    1475.00     550.19       184    2280.01     573.95       238    2915.00     574.26    \n",
      "    23     210.00     568.52        77     765.00     543.58       131    1500.01     548.89       185    2285.01     573.83       239    2930.00     574.47    \n",
      "    24     215.00     568.29        78     775.01     543.16       132    1525.00     547.46       186    2290.01     573.23       240    2975.00     574.36    \n",
      "    25     220.00     567.95        79     780.00     543.72       133    1595.00     545.17       187    2300.01     570.73       241    2980.00     573.86    \n",
      "    26     235.00     566.60        80     790.00     544.13       134    1600.00     545.29       188    2305.01     569.24       242    2985.00     572.58    \n",
      "    27     240.00     565.98        81     795.00     544.67       135    1640.00     546.84       189    2330.01     557.03       243    2989.99     572.94    \n",
      "    28     245.00     565.26        82     800.00     544.70       136    1650.00     547.30       190    2335.01     555.03       244    2995.00     573.27    \n",
      "    29     260.00     563.71        83     805.00     545.25       137    1655.01     547.44       191    2350.01     555.14       245    3000.00     573.41    \n",
      "    30     265.00     563.31        84     810.00     546.43       138    1665.01     547.64       192    2355.01     555.58       246    3005.00     573.90    \n",
      "    31     275.01     562.57        85     814.83     546.49       139    1670.01     547.71       193    2360.01     557.02       247    3010.00     575.26    \n",
      "    32     290.00     561.19        86     815.00     546.49       140    1680.01     547.24       194    2370.01     560.09       248    3015.00     577.17    \n",
      "    33     295.00     561.24        87     830.00     546.94       141    1685.00     547.03       195    2375.01     560.64       249    3019.99     578.94    \n",
      "    34     300.00     562.07        88     835.00     547.06       142    1725.01     546.85       196    2380.01     560.43       250    3024.99     579.79    \n",
      "    35     305.00     562.80        89     870.01     547.70       143    1765.01     547.67       197    2385.01     560.30       251    3030.00     580.50    \n",
      "    36     315.00     563.08        90     900.00     547.82       144    1770.01     547.74       198    2435.01     559.86       252    3035.00     581.15    \n",
      "    37     320.00     561.44        91     925.01     547.33       145    1810.01     547.88       199    2440.01     559.85       253    3040.00     581.15    \n",
      "    38     325.01     562.43        92     970.01     547.26       146    1855.01     548.44       200    2460.01     559.98       254    3045.00     581.11    \n",
      "    39     330.00     559.75        93    1015.00     546.82       147    1860.01     548.73       201    2495.01     560.45       255    3049.99     580.62    \n",
      "    40     335.00     554.26        94    1020.01     546.88       148    1885.01     550.33       202    2500.01     560.45       256    3054.99     579.89    \n",
      "    41     370.00     554.26        95    1070.01     547.84       149    1890.01     550.56       203    2580.01     559.32       257    3059.99     579.52    \n",
      "    42     375.01     555.51        96    1075.00     547.97       150    1910.01     550.99       204    2585.01     559.35       258    3064.99     579.70    \n",
      "    43     375.38     555.85        97    1090.00     548.71       151    1915.01     551.02       205    2590.01     559.32       259    3070.00     579.84    \n",
      "    44     380.00     559.95        98    1140.00     550.38       152    1930.01     550.91       206    2600.01     559.17       260    3075.00     579.86    \n",
      "    45     385.00     562.99        99    1145.00     550.50       153    1950.01     550.94       207    2605.01     559.20       261    3079.99     580.14    \n",
      "    46     390.00     562.96       100    1185.00     549.85       154    1955.01     551.09       208    2650.00     562.10       262    3089.99     581.13    \n",
      "    47     395.00     562.81       101    1190.00     549.65       155    1985.01     552.21       209    2660.00     563.18       263    3094.99     581.66    \n",
      "    48     400.00     562.38       102    1200.00     549.10       156    1990.01     552.36       210    2665.00     563.49       264    3099.99     582.63    \n",
      "    49     410.00     561.41       103    1205.00     548.88       157    2000.01     552.55       211    2700.00     563.10       265    3104.99     583.95    \n",
      "    50     415.00     560.89       104    1210.00     548.84       158    2005.01     552.71       212    2705.00     563.08       266    3110.04     585.78    \n",
      "    51     420.00     560.29       105    1215.01     549.48       159    2015.01     553.33       213    2720.00     563.14    \n",
      "    52     440.00     557.58       106    1230.00     553.34       160    2020.01     553.73       214    2725.00     563.31    \n",
      "    53     445.00     556.86       107    1235.00     553.96       161    2030.01     555.87       215    2760.00     565.00    \n",
      "    54     450.00     556.03       108    1255.00     555.07       162    2035.01     556.81       216    2770.00     565.56    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 149:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2046274.79 347667.6, 2045835.55 346993.05, 2045788.49 346342.03, 2045882.61 345871.42)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     558.05        28     315.00     545.49        55     570.00     549.91        82    1290.01     556.52       109    1485.00     566.13    \n",
      "     2      10.00     557.83        29     320.00     544.08        56     575.00     549.83        83    1300.00     562.03       110    1510.01     554.58    \n",
      "     3      35.00     562.22        30     405.00     541.50        57     600.00     546.65        84    1305.00     564.38       111    1515.00     553.40    \n",
      "     4      40.00     563.07        31     410.00     542.81        58     605.00     546.50        85    1310.01     567.35       112    1535.00     553.15    \n",
      "     5      50.00     563.84        32     415.00     543.40        59     625.00     546.04        86    1315.00     567.20       113    1540.00     553.12    \n",
      "     6      55.00     564.11        33     420.00     543.63        60     630.00     545.42        87    1320.00     563.42       114    1545.01     553.26    \n",
      "     7      90.00     565.80        34     425.00     543.53        61     635.00     544.06        88    1325.01     565.70       115    1580.01     553.96    \n",
      "     8     110.00     566.40        35     430.00     542.54        62     640.00     543.87        89    1330.00     571.28       116    1605.00     554.20    \n",
      "     9     145.00     567.12        36     435.00     542.10        63     660.00     543.87        90    1335.00     572.69       117    1610.00     554.11    \n",
      "    10     150.00     567.33        37     440.00     542.02        64     665.00     544.33        91    1345.00     574.17       118    1625.00     553.73    \n",
      "    11     170.00     574.39        38     445.00     542.31        65     670.00     545.67        92    1350.00     575.39       119    1630.00     553.70    \n",
      "    12     175.00     576.00        39     450.00     542.65        66     675.00     546.00        93    1355.00     576.65       120    1635.01     553.72    \n",
      "    13     180.00     576.00        40     455.00     542.19        67     690.00     546.66        94    1360.01     576.41       121    1640.00     554.68    \n",
      "    14     185.00     576.00        41     460.00     541.94        68     780.00     550.30        95    1375.01     582.92       122    1655.00     558.73    \n",
      "    15     190.00     574.27        42     465.00     542.98        69     785.00     550.42        96    1385.00     587.04       123    1660.00     559.74    \n",
      "    16     195.00     572.79        43     470.00     542.92        70     804.95     550.52        97    1390.01     588.46       124    1675.00     560.25    \n",
      "    17     205.00     569.75        44     475.00     543.24        71     850.00     551.17        98    1395.00     588.75       125    1715.00     561.26    \n",
      "    18     210.00     569.32        45     480.00     544.04        72     855.00     551.21        99    1400.00     588.93       126    1750.00     561.49    \n",
      "    19     225.00     569.05        46     485.00     544.53        73    1005.00     550.88       100    1435.00     589.95       127    1810.00     561.42    \n",
      "    20     235.00     568.79        47     505.00     543.98        74    1035.00     550.55       101    1440.01     588.34       128    1845.00     561.14    \n",
      "    21     247.63     568.55        48     510.00     544.24        75    1170.00     550.25       102    1445.00     584.21       129    1850.00     561.04    \n",
      "    22     260.00     568.31        49     515.00     546.16        76    1205.00     549.90       103    1450.00     579.58       130    1855.01     560.83    \n",
      "    23     265.00     567.29        50     520.00     548.23        77    1210.01     549.96       104    1455.00     576.42       131    1905.00     557.09    \n",
      "    24     270.00     565.30        51     525.00     548.56        78    1265.00     551.35       105    1457.67     575.17       132    1910.01     557.30    \n",
      "    25     295.00     555.63        52     540.00     548.63        79    1275.01     551.70       106    1460.01     574.37       133    1920.00     559.16    \n",
      "    26     300.00     553.23        53     545.00     548.79        80    1280.00     552.81       107    1475.00     568.48       134    1925.01     559.93    \n",
      "    27     305.00     550.80        54     549.70     549.00        81    1285.00     554.26       108    1480.01     568.03       135    1937.60     559.97    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 150:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2047357.2 346922.46, 2046863.06 346561.65, 2046549.32 346389.09, 2046070.86 346051.82)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     572.53        30     275.00     567.31        59     470.00     564.30        88     674.99     538.83       117     995.00     548.86    \n",
      "     2      50.00     572.02        31     285.00     570.31        60     480.00     563.38        89     690.00     541.61       118    1055.00     549.39    \n",
      "     3      55.00     572.00        32     290.00     571.89        61     485.00     562.62        90     695.00     540.43       119    1090.00     548.88    \n",
      "     4      75.00     572.02        33     295.00     573.61        62     495.00     560.28        91     700.00     539.53       120    1095.00     549.10    \n",
      "     5      85.00     571.89        34     299.99     575.80        63     500.00     558.03        92     715.00     538.40       121    1100.00     549.46    \n",
      "     6      90.00     571.60        35     305.00     575.80        64     510.00     553.33        93     720.00     539.09       122    1105.00     549.72    \n",
      "     7      95.00     571.07        36     310.00     575.80        65     515.00     550.76        94     730.00     541.01       123    1160.00     554.26    \n",
      "     8     100.00     570.40        37     325.00     570.47        66     520.00     548.78        95     735.00     541.02       124    1165.00     554.63    \n",
      "     9     105.00     569.70        38     329.57     569.48        67     525.00     547.82        96     755.00     540.32       125    1205.00     557.12    \n",
      "    10     109.99     569.14        39     330.00     569.39        68     530.00     548.08        97     765.00     540.32       126    1214.99     557.58    \n",
      "    11     115.00     568.75        40     335.00     568.64        69     545.00     548.44        98     770.00     540.76       127    1265.00     560.61    \n",
      "    12     120.00     568.94        41     350.00     567.47        70     550.00     547.96        99     785.00     542.73       128    1270.00     560.74    \n",
      "    13     125.00     568.86        42     355.00     567.21        71     555.00     545.71       100     795.00     543.97       129    1334.99     561.73    \n",
      "    14     130.00     569.01        43     360.00     567.20        72     564.99     544.23       101     800.00     545.21       130    1340.00     561.84    \n",
      "    15     135.00     569.23        44     370.00     564.84        73     570.00     543.52       102     805.00     546.19       131    1375.00     564.25    \n",
      "    16     140.00     569.34        45     385.00     564.13        74     575.00     542.84       103     810.00     547.13       132    1380.00     564.42    \n",
      "    17     145.00     569.32        46     390.00     563.37        75     580.00     542.28       104     814.99     548.16       133    1410.00     562.28    \n",
      "    18     175.00     568.92        47     395.00     562.77        76     589.99     541.28       105     819.64     549.32       134    1415.00     561.60    \n",
      "    19     180.00     568.74        48     400.00     563.25        77     594.99     541.48       106     820.00     549.41       135    1450.00     560.18    \n",
      "    20     190.00     568.06        49     405.00     563.54        78     610.00     542.30       107     825.00     550.16       136    1454.99     560.18    \n",
      "    21     194.99     567.88        50     415.00     563.64        79     611.85     541.83       108     835.00     548.70       137    1500.00     560.86    \n",
      "    22     205.00     567.62        51     420.00     563.82        80     615.00     541.47       109     840.00     548.11       138    1505.00     560.78    \n",
      "    23     210.00     567.45        52     425.00     565.24        81     620.00     540.73       110     845.00     548.18       139    1510.00     560.65    \n",
      "    24     215.00     567.23        53     429.99     565.29        82     635.00     538.33       111     885.00     548.60       140    1514.99     561.46    \n",
      "    25     220.00     567.25        54     440.00     565.02        83     640.00     539.14       112     890.00     548.62       141    1529.99     563.97    \n",
      "    26     225.00     567.18        55     445.00     564.95        84     650.00     541.01       113     925.00     548.43       142    1535.00     564.68    \n",
      "    27     230.00     567.00        56     450.00     565.00        85     655.00     540.37       114     940.00     548.49       143    1540.00     565.29    \n",
      "    28     245.00     566.39        57     459.99     564.84        86     665.00     538.66       115     965.00     548.45       144    1545.00     565.54    \n",
      "    29     269.99     566.73        58     465.00     564.59        87     669.99     538.09       116     969.91     548.49       145    1555.30     565.75    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 151:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2047388.58 346844.02, 2046902.28 346491.06, 2046604.22 346310.66, 2046094.39 345965.54)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     563.73        36     275.00     567.83        71     550.01     544.61       106     800.16     548.33       141    1165.00     553.49    \n",
      "     2       5.00     564.17        37     280.00     570.69        72     555.00     543.54       107     815.00     550.13       142    1180.00     554.15    \n",
      "     3      10.00     563.98        38     283.10     571.02        73     560.00     540.73       108     820.00     549.80       143    1195.00     554.43    \n",
      "     4      30.00     564.41        39     285.00     575.80        74     565.01     540.36       109     830.00     547.73       144    1215.00     556.52    \n",
      "     5      35.00     564.48        40     290.00     575.80        75     575.00     540.43       110     835.00     547.00       145    1220.00     556.26    \n",
      "     6      40.00     564.25        41     295.00     575.80        76     590.00     538.23       111     840.00     546.80       146    1225.01     555.87    \n",
      "     7      45.00     564.08        42     300.00     570.91        77     595.00     537.93       112     845.00     546.49       147    1230.00     555.63    \n",
      "     8      70.00     564.94        43     305.01     569.87        78     600.89     538.59       113     850.00     546.46       148    1240.00     555.59    \n",
      "     9      75.00     564.63        44     310.00     568.46        79     605.00     539.11       114     855.00     546.81       149    1245.00     555.65    \n",
      "    10      80.00     564.27        45     315.00     566.01        80     615.00     537.73       115     860.00     547.21       150    1255.00     556.25    \n",
      "    11      85.00     564.14        46     320.01     564.57        81     620.00     537.94       116     865.00     547.42       151    1260.00     556.31    \n",
      "    12      90.01     563.45        47     325.00     564.56        82     625.00     537.94       117     880.00     547.69       152    1305.00     556.09    \n",
      "    13      95.00     563.52        48     330.00     564.42        83     635.00     538.94       118     890.00     547.94       153    1330.01     556.30    \n",
      "    14     110.00     564.41        49     335.01     562.86        84     640.00     539.35       119     915.00     548.38       154    1345.00     555.05    \n",
      "    15     115.00     564.46        50     345.00     559.54        85     645.00     539.04       120     920.00     548.53       155    1350.00     554.97    \n",
      "    16     120.00     564.17        51     350.01     559.08        86     655.00     537.75       121     940.00     549.25       156    1360.00     554.92    \n",
      "    17     125.00     564.24        52     355.00     558.25        87     660.00     538.03       122     949.29     549.51       157    1365.00     555.91    \n",
      "    18     130.00     564.41        53     360.00     558.09        88     665.00     538.41       123     970.00     550.41       158    1370.00     556.55    \n",
      "    19     145.00     564.44        54     380.00     558.34        89     670.01     538.49       124     990.00     551.05       159    1375.00     556.61    \n",
      "    20     150.00     564.35        55     400.00     558.27        90     675.00     538.67       125    1005.00     551.37       160    1380.00     556.83    \n",
      "    21     155.00     564.11        56     405.01     558.21        91     685.00     539.76       126    1010.00     551.51       161    1385.00     556.86    \n",
      "    22     160.00     563.69        57     415.00     557.90        92     690.00     539.63       127    1020.00     551.85       162    1425.00     556.89    \n",
      "    23     165.00     562.97        58     435.01     556.81        93     695.00     540.03       128    1040.00     553.34       163    1430.00     556.93    \n",
      "    24     170.00     562.34        59     440.00     557.19        94     700.00     539.81       129    1045.00     553.58       164    1435.00     557.09    \n",
      "    25     175.00     563.57        60     445.00     557.32        95     705.00     539.50       130    1055.00     553.43       165    1440.00     557.29    \n",
      "    26     180.00     564.16        61     455.00     557.08        96     710.01     539.22       131    1070.00     552.69       166    1460.00     557.20    \n",
      "    27     185.00     564.31        62     460.00     557.05        97     725.00     539.23       132    1075.00     552.48       167    1465.00     557.27    \n",
      "    28     215.00     563.83        63     470.00     557.06        98     730.00     539.43       133    1080.00     552.40       168    1470.00     557.27    \n",
      "    29     220.01     564.13        64     505.00     556.35        99     735.00     539.70       134    1115.00     552.38       169    1475.00     557.51    \n",
      "    30     225.00     564.70        65     510.00     556.20       100     740.00     540.06       135    1120.00     552.43       170    1500.00     557.95    \n",
      "    31     250.00     565.07        66     515.00     555.99       101     745.00     540.69       136    1140.00     552.78       171    1564.95     558.54    \n",
      "    32     255.00     564.75        67     520.01     555.60       102     760.00     543.26       137    1145.00     552.66    \n",
      "    33     260.00     564.54        68     535.01     549.42       103     775.00     545.59       138    1150.00     552.50    \n",
      "    34     265.00     564.93        69     540.00     547.39       104     780.00     546.18       139    1155.00     552.57    \n",
      "    35     270.00     565.50        70     545.00     545.41       105     785.00     546.50       140    1160.00     553.08    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 152:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2047686.63 347063.64, 2047835.66 345785.14)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     571.11        18     215.00     554.69        35     640.00     567.21        52     875.00     540.10        69    1020.00     574.29    \n",
      "     2       5.00     569.12        19     220.00     554.66        36     660.00     575.00        53     880.00     540.27        70    1025.00     575.30    \n",
      "     3      10.00     567.03        20     320.00     554.84        37     665.00     575.00        54     920.00     540.07        71    1045.00     578.79    \n",
      "     4      25.00     559.96        21     380.00     554.64        38     670.00     575.00        55     925.00     540.37        72    1050.00     578.56    \n",
      "     5      30.00     559.09        22     425.00     554.86        39     675.00     572.23        56     935.00     540.80        73    1055.00     577.55    \n",
      "     6      35.00     559.79        23     465.00     555.21        40     690.00     565.13        57     950.00     541.59        74    1060.00     579.06    \n",
      "     7      55.00     560.04        24     530.01     554.93        41     730.00     547.42        58     955.00     543.49        75    1065.00     579.77    \n",
      "     8      60.00     560.56        25     535.00     555.15        42     735.00     546.76        59     960.00     544.16        76    1070.00     579.99    \n",
      "     9      65.00     560.70        26     560.00     558.13        43     760.00     546.70        60     965.00     544.57        77    1075.00     580.18    \n",
      "    10      70.00     560.70        27     565.00     558.83        44     765.01     545.77        61     970.00     545.51        78    1080.00     581.42    \n",
      "    11      80.00     560.43        28     575.00     560.54        45     770.00     544.52        62     985.00     559.62        79    1085.00     583.00    \n",
      "    12      85.00     560.42        29     580.00     560.49        46     775.00     543.33        63     990.00     561.44        80    1090.00     585.40    \n",
      "    13     100.00     560.20        30     590.00     559.98        47     785.00     542.45        64     995.00     564.18        81    1250.00     588.86    \n",
      "    14     125.00     559.48        31     615.00     561.05        48     800.00     541.33        65    1000.00     566.76        82    1287.16     588.01    \n",
      "    15     130.01     558.39        32     616.16     561.23        49     805.00     541.04        66    1010.00     570.90    \n",
      "    16     135.00     557.00        33     620.00     561.83        50     845.00     540.61        67    1015.00     572.73    \n",
      "    17     140.00     555.83        34     635.00     565.78        51     870.00     540.15        68    1015.70     572.95    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 153:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2048431.78 347510.72, 2048714.14 346820.49, 2048933.76 346232.22)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     563.11        16     644.99     557.93        31     959.99     549.29        46    1189.99     557.07        61    1284.99     580.71    \n",
      "     2       4.99     562.59        17     709.99     558.18        32     969.99     544.44        47    1195.00     558.73        62    1289.99     580.93    \n",
      "     3      24.99     559.27        18     745.75     558.06        33     974.99     543.50        48    1205.00     560.35        63    1294.99     579.44    \n",
      "     4      29.99     558.85        19     759.99     558.01        34     980.00     542.90        49    1209.99     560.10        64    1300.00     578.41    \n",
      "     5      54.99     559.07        20     844.99     558.56        35     984.99     542.47        50    1219.99     558.98        65    1314.99     577.91    \n",
      "     6      59.99     559.14        21     860.00     560.78        36     999.99     542.58        51    1224.99     562.67        66    1319.99     579.62    \n",
      "     7      69.99     559.45        22     875.00     560.90        37    1069.99     541.25        52    1230.00     566.78        67    1325.00     582.00    \n",
      "     8      80.00     559.49        23     885.00     573.80        38    1085.00     540.76        53    1234.99     565.14        68    1329.99     584.02    \n",
      "     9      99.99     559.41        24     895.00     573.80        39    1089.99     540.64        54    1240.00     570.02        69    1335.00     585.08    \n",
      "    10     105.00     559.82        25     900.00     563.30        40    1145.00     540.64        55    1241.81     570.38        70    1339.99     584.76    \n",
      "    11     114.99     562.17        26     904.99     562.30        41    1149.99     541.06        56    1254.99     572.97        71    1344.99     584.64    \n",
      "    12     119.99     562.67        27     910.00     561.92        42    1154.99     542.17        57    1259.99     574.16        72    1369.99     585.46    \n",
      "    13     124.99     561.59        28     934.99     561.73        43    1160.00     542.70        58    1269.99     577.81        73    1373.68     585.51    \n",
      "    14     134.99     558.81        29     939.99     559.46        44    1164.99     541.57        59    1274.99     579.43    \n",
      "    15     224.99     558.47        30     945.00     556.94        45    1169.99     541.32        60    1279.99     580.37    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 154:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2049227.9 347451.9, 2049824.01 346479.29)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     563.94        15     405.00     563.53        29     760.00     539.88        43     875.00     553.39        57    1055.00     579.54    \n",
      "     2      15.00     565.41        16     410.00     564.21        30     765.00     540.36        44     900.00     556.53        58    1065.00     581.06    \n",
      "     3      20.00     566.17        17     415.00     564.64        31     775.00     542.36        45     905.01     557.19        59    1070.01     581.73    \n",
      "     4      25.00     565.24        18     420.01     562.40        32     780.00     543.48        46     910.00     558.02        60    1075.00     582.27    \n",
      "     5      35.00     562.08        19     425.00     560.03        33     790.00     546.92        47     915.00     558.81        61    1080.00     583.04    \n",
      "     6      40.00     561.19        20     435.00     554.92        34     795.00     548.76        48     960.00     565.42        62    1090.00     584.66    \n",
      "     7     180.00     562.37        21     440.01     552.41        35     800.00     549.74        49    1005.00     571.81        63    1095.00     583.06    \n",
      "     8     280.00     562.59        22     455.00     545.40        36     812.67     550.34        50    1010.00     573.20        64    1100.00     580.75    \n",
      "     9     290.00     562.55        23     460.00     543.79        37     825.00     550.92        51    1015.00     574.95        65    1105.00     580.06    \n",
      "    10     295.00     562.57        24     465.00     543.25        38     830.00     551.09        52    1030.00     579.95        66    1110.00     579.95    \n",
      "    11     351.24     563.15        25     470.00     542.75        39     835.00     551.23        53    1035.01     580.01        67    1135.01     583.71    \n",
      "    12     375.00     563.39        26     515.00     539.54        40     850.00     551.41        54    1040.00     579.88        68    1140.75     583.81    \n",
      "    13     385.00     573.54        27     520.01     539.44        41     865.00     552.60        55    1045.00     579.47    \n",
      "    14     395.00     573.54        28     655.01     539.38        42     870.01     552.96        56    1050.00     579.31    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 155:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2049996.57 347561.71, 2050365.22 346612.63)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     552.50        18     225.00     574.01        35     525.00     537.79        52     710.00     550.14        69     920.00     573.69    \n",
      "     2       5.00     552.55        19     230.00     573.30        36     530.00     538.35        53     730.00     551.05        70     935.00     580.66    \n",
      "     3      25.01     552.54        20     235.00     571.38        37     535.00     538.45        54     735.00     551.18        71     940.00     580.26    \n",
      "     4      40.00     552.47        21     255.00     563.52        38     545.00     538.58        55     765.01     552.60        72     950.00     578.57    \n",
      "     5      50.00     552.50        22     270.00     556.72        39     550.00     538.81        56     770.01     552.91        73     955.01     578.09    \n",
      "     6      55.00     552.46        23     275.00     554.54        40     565.00     539.85        57     775.00     553.33        74     960.01     577.69    \n",
      "     7      90.01     551.96        24     290.01     548.37        41     570.00     541.00        58     825.01     557.75        75     965.00     578.14    \n",
      "     8      95.01     552.01        25     295.00     546.36        42     575.00     543.94        59     830.01     558.26        76     975.00     579.14    \n",
      "     9     125.00     552.75        26     300.00     545.23        43     580.00     545.01        60     845.00     559.89        77     980.00     580.79    \n",
      "    10     155.01     553.64        27     305.00     544.29        44     585.00     545.41        61     855.00     561.02        78     985.00     582.03    \n",
      "    11     160.01     553.76        28     310.00     543.06        45     590.00     545.56        62     860.00     561.68        79     990.00     582.20    \n",
      "    12     165.00     554.66        29     320.00     540.23        46     605.00     546.20        63     865.00     562.37        80     995.00     583.33    \n",
      "    13     170.00     556.58        30     325.00     539.03        47     615.00     546.56        64     875.00     564.44        81    1000.00     582.39    \n",
      "    14     171.66     557.21        31     330.00     538.09        48     618.94     546.78        65     880.00     565.43        82    1005.00     581.94    \n",
      "    15     185.00     562.24        32     375.00     537.22        49     635.01     547.70        66     895.01     567.94        83    1010.00     582.36    \n",
      "    16     215.00     573.12        33     425.01     536.58        50     655.00     548.49        67     900.01     568.92        84    1015.00     582.90    \n",
      "    17     220.00     574.00        34     430.00     536.61        51     705.00     549.94        68     915.00     571.54        85    1018.16     582.92    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 156:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2050835.83 347616.61, 2051016.24 346706.76)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     560.51        18     185.00     574.16        35     325.00     537.23        52     575.00     558.68        69     825.00     576.67    \n",
      "     2      65.00     562.60        19     190.00     572.96        36     355.00     537.24        53     585.00     559.11        70     830.00     578.20    \n",
      "     3     105.00     563.72        20     204.99     566.11        37     420.00     538.27        54     590.00     559.27        71     835.00     579.80    \n",
      "     4     106.11     563.97        21     215.00     561.46        38     430.00     538.48        55     640.00     560.62        72     840.00     580.31    \n",
      "     5     110.00     564.84        22     220.00     558.83        39     435.00     538.85        56     645.00     560.81        73     845.00     580.32    \n",
      "     6     115.00     566.05        23     225.00     555.60        40     440.00     539.16        57     650.00     560.96        74     850.00     580.08    \n",
      "     7     120.00     566.14        24     230.00     549.93        41     465.00     540.01        58     659.99     561.13        75     855.00     578.18    \n",
      "     8     130.00     566.26        25     235.00     545.45        42     469.99     540.45        59     705.00     561.74        76     860.00     576.39    \n",
      "     9     135.00     566.29        26     239.99     543.12        43     475.00     541.03        60     730.00     562.34        77     865.00     576.40    \n",
      "    10     139.99     566.51        27     250.00     540.84        44     480.00     542.36        61     735.00     562.49        78     869.99     576.60    \n",
      "    11     145.00     567.16        28     255.00     539.49        45     485.00     547.20        62     740.00     562.80        79     875.00     577.38    \n",
      "    12     150.00     568.29        29     260.00     539.06        46     510.00     548.90        63     755.00     563.92        80     879.99     578.24    \n",
      "    13     155.00     569.17        30     265.00     538.87        47     524.91     549.76        64     759.99     564.26        81     885.00     579.05    \n",
      "    14     160.00     569.39        31     280.00     538.54        48     525.00     549.76        65     790.00     565.46        82     890.00     579.42    \n",
      "    15     165.00     569.97        32     285.00     538.35        49     530.00     550.31        66     795.00     566.97        83     927.56     579.94    \n",
      "    16     175.00     573.39        33     290.00     537.87        50     545.00     555.61        67     805.00     570.12    \n",
      "    17     180.00     574.16        34     320.00     537.29        51     550.00     557.29        68     820.00     575.06    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 157:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2052757.51 348942.18, 2052028.06 347506.8, 2051596.66 346808.72)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     554.07        33     192.50     551.98        65     370.00     559.89        97     877.50     554.45       129    1080.00     566.21    \n",
      "     2       5.00     554.08        34     195.00     551.95        66     372.50     560.31        98     884.99     554.34       130    1085.00     566.03    \n",
      "     3       7.50     554.02        35     197.50     552.10        67     385.01     562.53        99     905.00     554.97       131    1087.50     566.65    \n",
      "     4      27.50     553.06        36     205.00     553.51        68     400.00     565.47       100     910.00     554.99       132    1090.00     567.31    \n",
      "     5      30.00     553.64        37     207.50     553.73        69     412.50     568.16       101     925.00     554.60       133    1092.50     567.64    \n",
      "     6      32.50     554.76        38     212.50     553.91        70     415.00     568.74       102     927.50     554.50       134    1095.01     567.92    \n",
      "     7      45.00     552.62        39     222.50     553.56        71     427.50     572.14       103     930.00     554.26       135    1102.50     569.31    \n",
      "     8      47.50     552.44        40     235.00     553.51        72     430.00     572.34       104     932.50     554.25       136    1105.00     569.64    \n",
      "     9      50.00     552.37        41     240.00     553.55        73     440.00     572.30       105     935.00     554.55       137    1107.50     570.04    \n",
      "    10      70.00     551.58        42     250.00     553.19        74     440.04     572.30       106     937.49     554.68       138    1115.00     571.65    \n",
      "    11      85.00     551.47        43     257.50     553.08        75     460.00     547.50       107     947.50     554.97       139    1117.50     572.07    \n",
      "    12      95.00     551.61        44     265.00     552.73        76     470.00     549.50       108     952.50     555.19       140    1127.50     573.58    \n",
      "    13      97.50     551.62        45     280.00     552.76        77     504.00     547.90       109     970.00     555.13       141    1129.99     574.04    \n",
      "    14     102.50     551.50        46     287.50     552.92        78     537.20     547.20       110     972.50     555.22       142    1135.00     575.04    \n",
      "    15     105.00     551.55        47     290.00     553.09        79     566.80     539.20       111     977.50     555.50       143    1150.00     578.41    \n",
      "    16     107.50     551.73        48     292.50     553.34        80     598.40     539.70       112     985.00     555.80       144    1152.50     578.85    \n",
      "    17     110.00     552.50        49     295.00     553.40        81     630.00     538.20       113     995.00     556.59       145    1162.50     581.34    \n",
      "    18     115.00     554.21        50     307.49     554.47        82     661.60     531.30       114    1002.50     557.43       146    1165.00     581.41    \n",
      "    19     117.50     555.31        51     312.50     554.79        83     693.60     538.30       115    1020.00     558.92       147    1167.50     581.86    \n",
      "    20     120.00     556.56        52     315.00     554.91        84     725.20     539.40       116    1025.00     559.49       148    1172.50     583.42    \n",
      "    21     122.50     557.29        53     317.50     554.95        85     742.00     547.20       117    1030.00     559.74       149    1175.00     583.99    \n",
      "    22     132.51     557.65        54     320.00     555.04        86     756.00     552.70       118    1037.50     560.44       150    1177.50     584.62    \n",
      "    23     135.00     557.65        55     325.00     555.44        87     773.20     553.10       119    1040.00     560.80       151    1182.50     584.01    \n",
      "    24     142.50     558.14        56     327.50     555.61        88     815.00     581.10       120    1042.50     561.12       152    1187.50     583.25    \n",
      "    25     145.00     558.27        57     337.50     556.01        89     820.00     582.70       121    1057.50     562.63       153    1190.00     581.06    \n",
      "    26     152.50     558.55        58     340.00     556.20        90     822.50     558.10       122    1060.00     562.75       154    1192.50     580.05    \n",
      "    27     155.00     558.46        59     342.50     556.45        91     837.50     556.84       123    1065.00     563.31       155    1202.50     582.33    \n",
      "    28     170.01     557.61        60     347.50     556.87        92     840.00     556.76       124    1067.50     563.66       156    1205.00     582.72    \n",
      "    29     177.50     556.96        61     350.00     557.11        93     842.50     556.72       125    1070.00     564.17       157    1215.36     583.20    \n",
      "    30     180.01     556.06        62     355.00     557.95        94     845.00     556.56       126    1072.50     564.77    \n",
      "    31     187.50     553.02        63     360.72     558.78        95     860.00     555.36       127    1075.00     565.64    \n",
      "    32     190.01     552.39        64     362.50     559.04        96     862.50     555.21       128    1077.50     565.94    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 158:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2053149.69 349099.05, 2052710.45 348267.63, 2051996.68 346855.78)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     564.15        37     197.50     556.17        73     561.60     531.30       109     892.50     554.79       145    1092.50     560.62    \n",
      "     2       2.50     563.83        38     200.00     557.43        74     593.60     538.30       110     895.00     555.45       146    1097.50     562.80    \n",
      "     3      22.50     561.94        39     202.50     558.90        75     625.20     539.40       111     902.50     555.85       147    1100.00     563.83    \n",
      "     4      25.00     561.73        40     215.00     566.61        76     642.00     547.20       112     905.00     556.02       148    1102.50     564.79    \n",
      "     5      27.50     561.55        41     217.50     567.74        77     656.00     552.70       113     907.50     556.27       149    1107.50     565.89    \n",
      "     6      30.00     561.33        42     220.00     567.94        78     673.20     553.10       114     910.00     556.47       150    1110.00     566.85    \n",
      "     7      47.50     560.00        43     222.50     568.32        79     715.00     581.10       115     922.49     556.97       151    1112.50     567.77    \n",
      "     8      50.00     559.90        44     225.00     568.74        80     720.00     582.70       116     927.50     557.08       152    1120.00     569.07    \n",
      "     9      52.50     559.83        45     227.50     568.44        81     725.00     551.76       117     940.00     557.72       153    1122.50     569.73    \n",
      "    10      55.00     559.36        46     230.00     567.79        82     727.49     551.74       118     942.50     557.77       154    1125.00     571.42    \n",
      "    11      67.50     558.51        47     232.50     567.34        83     735.00     551.44       119     952.50     557.75       155    1127.50     573.14    \n",
      "    12      70.00     559.30        48     237.50     568.93        84     737.50     551.37       120     957.49     557.90       156    1130.00     574.67    \n",
      "    13      72.50     558.58        49     240.00     568.98        85     747.50     551.53       121     967.50     557.59       157    1132.50     576.15    \n",
      "    14      75.00     557.98        50     242.49     568.65        86     757.50     551.55       122     969.99     557.54       158    1135.00     577.67    \n",
      "    15      90.00     557.07        51     247.50     568.15        87     765.00     551.49       123     972.50     557.52       159    1137.50     578.92    \n",
      "    16      97.50     556.54        52     255.00     563.66        88     774.99     551.10       124     980.00     556.89       160    1140.00     578.60    \n",
      "    17     107.50     556.15        53     257.50     562.37        89     777.50     551.04       125     982.50     556.96       161    1145.00     580.12    \n",
      "    18     117.50     555.90        54     265.00     558.76        90     780.00     551.02       126     985.00     557.14       162    1147.50     580.46    \n",
      "    19     120.00     556.19        55     267.50     558.17        91     792.50     551.09       127    1002.50     557.72       163    1155.00     577.15    \n",
      "    20     122.50     556.88        56     280.00     558.85        92     802.50     551.03       128    1005.00     557.77       164    1157.50     576.53    \n",
      "    21     125.00     557.06        57     282.50     558.86        93     807.50     550.94       129    1007.50     557.87       165    1160.00     575.95    \n",
      "    22     127.50     556.26        58     297.51     558.71        94     819.99     550.90       130    1015.00     558.96       166    1162.50     574.98    \n",
      "    23     130.00     555.93        59     300.00     558.77        95     829.99     551.01       131    1017.50     559.21       167    1164.99     573.87    \n",
      "    24     139.99     556.02        60     310.00     559.26        96     837.50     551.03       132    1025.00     558.94       168    1167.50     572.19    \n",
      "    25     142.50     556.83        61     312.50     559.27        97     842.49     551.13       133    1027.50     558.88       169    1175.00     567.04    \n",
      "    26     145.00     557.11        62     325.00     558.95        98     850.00     551.36       134    1030.00     558.91       170    1177.49     565.72    \n",
      "    27     147.50     556.40        63     327.50     558.93        99     860.00     551.58       135    1032.50     559.06       171    1180.00     566.54    \n",
      "    28     150.00     556.17        64     335.00     572.30       100     862.50     551.20       136    1040.00     559.69       172    1185.00     568.77    \n",
      "    29     155.00     556.12        65     340.00     572.30       101     865.00     550.50       137    1042.50     559.70       173    1187.49     570.11    \n",
      "    30     157.50     556.92        66     360.00     547.50       102     867.50     551.07       138    1049.99     559.56       174    1190.00     571.83    \n",
      "    31     160.00     557.00        67     370.00     549.50       103     870.00     552.70       139    1052.50     559.60       175    1192.50     574.74    \n",
      "    32     162.50     556.42        68     404.00     547.90       104     875.00     551.76       140    1055.00     559.67       176    1195.00     576.81    \n",
      "    33     165.00     556.06        69     437.20     547.20       105     877.50     552.06       141    1067.50     559.11       177    1252.50     591.03    \n",
      "    34     175.00     555.77        70     466.80     539.20       106     882.50     552.99       142    1070.00     559.04       178    1255.00     591.42    \n",
      "    35     177.50     555.76        71     498.40     539.70       107     885.00     553.39       143    1072.49     559.08       179    1261.17     591.76    \n",
      "    36     189.99     555.85        72     530.00     538.20       108     890.00     553.89       144    1090.00     559.79    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 159:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2053632.07 349855.96, 2054000.72 348483.33, 2054479.18 347863.69)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     583.15        32     330.01     552.61        63    1010.01     537.65        94    1625.01     550.08       125    1930.00     575.21    \n",
      "     2      15.00     588.90        33     340.01     551.99        64    1015.01     537.96        95    1640.01     551.32       126    1935.00     577.56    \n",
      "     3      20.00     589.82        34     375.00     550.16        65    1020.01     538.71        96    1645.00     551.76       127    1940.01     578.64    \n",
      "     4      25.01     590.02        35     380.01     549.95        66    1025.00     539.21        97    1650.00     551.91       128    1970.00     580.08    \n",
      "     5      30.01     590.16        36     425.01     549.71        67    1030.00     539.13        98    1655.01     552.03       129    1975.00     580.40    \n",
      "     6      35.01     590.23        37     435.01     549.73        68    1035.00     539.97        99    1670.00     552.67       130    2005.00     583.11    \n",
      "     7      45.00     590.23        38     495.00     550.76        69    1045.00     542.82       100    1675.00     552.94       131    2010.00     583.51    \n",
      "     8      50.00     590.11        39     570.01     551.17        70    1050.01     544.16       101    1690.00     554.06       132    2015.00     584.11    \n",
      "     9      80.01     588.41        40     605.01     551.21        71    1063.50     546.08       102    1695.00     554.22       133    2045.01     588.21    \n",
      "    10      85.01     588.06        41     705.01     551.76        72    1065.01     546.30       103    1700.01     554.59       134    2050.01     588.96    \n",
      "    11      90.00     587.88        42     740.01     552.29        73    1085.00     549.52       104    1705.00     554.99       135    2055.00     589.18    \n",
      "    12      95.00     587.55        43     750.01     552.50        74    1090.00     550.02       105    1710.00     555.27       136    2075.00     589.77    \n",
      "    13     100.00     587.16        44     755.00     552.38        75    1095.01     550.39       106    1715.01     555.35       137    2095.00     590.54    \n",
      "    14     120.01     586.34        45     760.00     551.60        76    1115.00     549.59       107    1720.00     555.58       138    2100.00     590.62    \n",
      "    15     125.01     586.22        46     765.00     549.99        77    1120.00     549.43       108    1735.00     556.76       139    2105.01     590.45    \n",
      "    16     130.01     585.97        47     772.77     547.35        78    1175.00     548.49       109    1740.01     557.27       140    2120.01     589.46    \n",
      "    17     150.00     584.77        48     775.00     546.59        79    1180.01     548.44       110    1745.01     557.73       141    2125.00     589.25    \n",
      "    18     160.01     583.78        49     780.01     545.29        80    1240.01     548.61       111    1775.01     560.02       142    2130.01     591.08    \n",
      "    19     165.01     583.37        50     785.01     544.32        81    1305.00     550.12       112    1800.01     562.41       143    2135.00     592.40    \n",
      "    20     170.01     583.11        51     790.01     543.24        82    1310.00     550.10       113    1805.01     562.80       144    2140.00     591.91    \n",
      "    21     175.01     582.90        52     795.01     542.24        83    1360.01     549.68       114    1820.01     563.66       145    2145.01     591.58    \n",
      "    22     180.00     582.36        53     800.00     541.28        84    1415.01     549.33       115    1830.00     564.47       146    2155.00     593.75    \n",
      "    23     190.00     577.91        54     805.00     540.42        85    1421.27     549.25       116    1835.01     564.73       147    2160.00     595.61    \n",
      "    24     195.00     575.79        55     820.00     538.61        86    1465.00     548.85       117    1865.01     565.25       148    2165.01     596.19    \n",
      "    25     200.01     573.73        56     830.01     537.57        87    1490.00     548.47       118    1870.00     565.55       149    2185.00     597.69    \n",
      "    26     205.01     572.15        57     835.01     537.22        88    1495.00     548.46       119    1875.00     566.42       150    2190.01     598.03    \n",
      "    27     210.00     572.16        58     890.00     536.42        89    1520.01     548.55       120    1895.01     575.26       151    2204.14     598.67    \n",
      "    28     215.01     571.94        59     930.01     535.66        90    1570.00     548.36       121    1900.00     576.75    \n",
      "    29     245.01     561.93        60     935.00     535.68        91    1575.00     548.44       122    1905.01     577.21    \n",
      "    30     280.00     553.12        61     990.00     536.87        92    1585.01     548.66       123    1920.00     575.39    \n",
      "    31     285.00     552.76        62    1005.01     537.38        93    1620.01     549.76       124    1925.01     575.06    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 160:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2054094.84 350248.13, 2055294.91 349024.54, 2055687.09 348444.11)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     577.16        39     389.99     566.41        77     855.00     557.66       115    1433.00     536.40       153    2070.00     590.39    \n",
      "     2      40.00     579.50        40     400.00     565.07        78     865.00     557.89       116    1465.00     535.80       154    2075.00     591.27    \n",
      "     3      45.00     579.90        41     405.00     564.34        79     890.00     558.87       117    1491.00     534.60       155    2085.00     595.80    \n",
      "     4      80.00     583.54        42     410.00     563.50        80     895.00     559.52       118    1517.00     534.50       156    2090.00     598.09    \n",
      "     5      90.00     584.97        43     415.00     563.93        81     915.00     568.46       119    1545.00     535.80       157    2095.00     600.04    \n",
      "     6      95.00     585.96        44     420.00     564.56        82     920.00     570.05       120    1564.00     538.00       158    2110.00     606.14    \n",
      "     7     100.00     586.99        45     430.00     565.94        83     930.00     571.64       121    1566.00     539.80       159    2115.00     607.91    \n",
      "     8     120.00     589.08        46     435.00     566.52        84     935.00     571.64       122    1609.00     563.90       160    2120.00     607.97    \n",
      "     9     125.00     589.78        47     445.00     567.55        85     960.00     571.64       123    1639.00     564.00       161    2125.00     608.12    \n",
      "    10     130.00     590.75        48     460.00     567.38        86     965.00     571.64       124    1694.00     580.40       162    2150.00     609.10    \n",
      "    11     135.00     591.29        49     465.00     567.26        87     970.00     570.12       125    1713.87     570.58       163    2155.00     609.92    \n",
      "    12     145.00     591.68        50     475.00     566.95        88     980.00     567.65       126    1725.00     570.67       164    2160.00     611.24    \n",
      "    13     150.00     591.96        51     480.00     566.90        89     985.00     566.55       127    1730.00     570.74       165    2165.00     612.28    \n",
      "    14     155.00     592.02        52     485.00     566.77        90     995.00     565.10       128    1735.00     570.85       166    2170.00     613.07    \n",
      "    15     170.00     591.67        53     490.00     565.54        91    1009.99     563.09       129    1745.00     571.12       167    2175.00     613.64    \n",
      "    16     175.00     591.62        54     495.00     564.06        92    1055.00     558.08       130    1755.00     571.30       168    2180.00     614.16    \n",
      "    17     180.00     591.52        55     500.00     562.79        93    1060.00     557.64       131    1760.01     572.49       169    2200.00     614.56    \n",
      "    18     184.99     591.37        56     510.00     562.47        94    1065.00     557.29       132    1765.00     574.71       170    2205.00     614.63    \n",
      "    19     189.99     591.01        57     515.00     562.25        95    1085.00     556.63       133    1774.99     576.95       171    2210.00     614.63    \n",
      "    20     194.99     591.01        58     520.00     562.08        96    1105.00     556.35       134    1780.00     578.58       172    2215.00     614.83    \n",
      "    21     199.99     591.08        59     534.99     561.96        97    1130.00     555.75       135    1785.00     578.52       173    2220.00     615.64    \n",
      "    22     220.00     590.82        60     540.00     562.27        98    1154.99     554.75       136    1790.00     577.37       174    2225.00     616.30    \n",
      "    23     225.00     590.60        61     545.00     561.88        99    1159.99     554.51       137    1795.00     576.69       175    2230.00     616.81    \n",
      "    24     240.00     588.74        62     565.00     563.78       100    1165.00     554.33       138    1805.00     581.44       176    2240.00     617.36    \n",
      "    25     245.00     587.86        63     570.00     563.62       101    1170.00     554.21       139    1810.00     583.79       177    2255.01     618.66    \n",
      "    26     255.00     585.74        64     585.00     560.08       102    1175.00     554.05       140    1830.01     593.09       178    2260.00     619.13    \n",
      "    27     260.00     584.71        65     590.00     558.82       103    1180.00     553.84       141    1835.00     594.02       179    2275.00     620.65    \n",
      "    28     270.00     582.92        66     600.00     556.22       104    1185.00     553.70       142    1855.00     594.30       180    2280.00     621.11    \n",
      "    29     275.00     582.09        67     605.00     555.20       105    1190.00     553.85       143    1860.00     593.91       181    2290.00     621.18    \n",
      "    30     280.00     581.41        68     610.00     554.49       106    1195.00     553.84       144    1885.00     585.74       182    2295.00     621.96    \n",
      "    31     285.00     580.76        69     635.00     553.55       107    1210.00     567.30       145    1890.00     586.39       183    2300.00     623.07    \n",
      "    32     300.00     579.18        70     640.00     553.41       108    1255.00     550.10       146    1895.00     588.57       184    2305.01     623.87    \n",
      "    33     305.00     578.55        71     645.00     553.37       109    1303.00     550.30       147    1900.00     589.48       185    2310.00     623.46    \n",
      "    34     325.00     575.89        72     690.00     553.35       110    1329.00     542.30       148    1940.00     589.88       186    2315.00     623.71    \n",
      "    35     334.99     574.60        73     750.00     554.01       111    1353.00     539.80       149    1985.00     590.79       187    2320.01     624.69    \n",
      "    36     350.00     572.49        74     770.00     554.38       112    1355.00     538.40       150    1990.00     590.86       188    2325.01     625.16    \n",
      "    37     365.00     570.13        75     805.00     555.42       113    1375.00     537.50       151    1995.00     590.87       189    2414.37     631.42    \n",
      "    38     375.00     568.50        76     810.00     555.61       114    1389.00     536.50       152    2060.00     590.41    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 161:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2054283.09 350389.32, 2055114.51 349487.31, 2055491 349001, 2055804.74 348538.23)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     574.48        34     355.00     575.77        67     910.00     548.55       100    1725.00     581.79       133    1980.00     600.12    \n",
      "     2      40.00     574.08        35     385.00     570.73        68     915.00     548.70       101    1729.99     582.99       134    1985.00     601.23    \n",
      "     3      45.00     574.31        36     395.00     569.63        69     925.00     548.79       102    1735.00     583.88       135    1994.99     603.81    \n",
      "     4      50.01     574.58        37     415.00     567.83        70     960.00     548.79       103    1740.00     584.15       136    2000.00     605.07    \n",
      "     5      54.99     574.81        38     419.99     567.82        71    1014.99     549.02       104    1745.00     584.24       137    2015.00     605.63    \n",
      "     6      80.00     575.77        39     440.00     568.86        72    1035.00     548.94       105    1750.00     584.36       138    2020.00     605.44    \n",
      "     7      90.00     576.22        40     445.00     568.97        73    1080.00     549.16       106    1765.00     586.42       139    2035.00     603.57    \n",
      "     8      94.99     576.78        41     450.00     568.94        74    1129.99     549.11       107    1770.00     586.93       140    2040.00     603.28    \n",
      "     9     100.00     577.31        42     455.00     568.88        75    1165.00     549.38       108    1775.00     587.18       141    2055.00     603.79    \n",
      "    10     120.00     579.22        43     465.00     568.39        76    1175.00     549.41       109    1780.00     588.19       142    2060.00     604.02    \n",
      "    11     125.00     579.77        44     470.00     568.26        77    1180.00     549.20       110    1784.99     589.73       143    2064.99     604.43    \n",
      "    12     150.00     584.29        45     475.00     567.65        78    1195.00     547.62       111    1790.00     591.46       144    2110.00     607.89    \n",
      "    13     155.00     585.09        46     550.00     551.56        79    1200.00     546.94       112    1795.00     592.85       145    2115.00     608.33    \n",
      "    14     175.00     587.74        47     555.00     550.52        80    1205.00     546.30       113    1810.00     596.62       146    2145.00     610.49    \n",
      "    15     179.99     587.94        48     585.00     549.03        81    1210.00     567.30       114    1815.00     596.93       147    2150.00     611.16    \n",
      "    16     185.00     588.79        49     590.00     548.81        82    1255.00     550.10       115    1820.00     597.11       148    2165.00     613.78    \n",
      "    17     190.00     588.97        50     610.00     548.17        83    1303.00     550.30       116    1825.00     597.37       149    2169.99     614.61    \n",
      "    18     195.00     588.82        51     670.00     547.48        84    1329.00     542.30       117    1830.00     597.55       150    2175.00     614.95    \n",
      "    19     225.00     589.41        52     685.00     547.18        85    1353.00     539.80       118    1841.75     597.78       151    2180.00     615.08    \n",
      "    20     230.00     589.24        53     720.00     546.74        86    1355.00     538.40       119    1850.00     597.96       152    2210.00     615.63    \n",
      "    21     235.00     589.37        54     725.00     546.74        87    1375.00     537.50       120    1855.00     596.81       153    2215.00     616.07    \n",
      "    22     240.00     589.40        55     750.00     546.94        88    1389.00     536.50       121    1859.99     595.35       154    2225.00     617.57    \n",
      "    23     265.00     589.00        56     755.00     545.97        89    1433.00     536.40       122    1865.00     594.10       155    2239.99     620.36    \n",
      "    24     270.00     589.02        57     760.00     545.53        90    1465.00     535.80       123    1870.00     593.19       156    2245.00     621.05    \n",
      "    25     275.00     588.76        58     780.00     542.00        91    1491.00     534.60       124    1875.00     592.86       157    2250.00     621.51    \n",
      "    26     290.01     586.68        59     785.00     543.12        92    1517.00     534.50       125    1880.00     592.85       158    2270.00     622.82    \n",
      "    27     294.99     585.94        60     800.00     546.86        93    1545.00     535.80       126    1894.99     592.94       159    2274.99     623.11    \n",
      "    28     300.00     584.98        61     805.00     547.04        94    1564.00     538.00       127    1900.00     593.02       160    2300.00     624.27    \n",
      "    29     305.00     584.06        62     830.00     547.05        95    1566.00     539.80       128    1915.00     594.08       161    2305.00     624.70    \n",
      "    30     310.00     583.21        63     850.00     547.18        96    1609.00     563.90       129    1920.00     594.37       162    2309.99     625.20    \n",
      "    31     315.00     582.30        64     880.00     547.55        97    1639.00     564.00       130    1935.00     595.58       163    2315.00     625.84    \n",
      "    32     325.00     580.42        65     900.00     548.16        98    1694.00     580.40       131    1970.00     599.01       164    2375.00     629.65    \n",
      "    33     330.00     579.56        66     905.00     548.34        99    1720.00     581.25       132    1975.00     599.53       165    2400.85     631.76    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 162:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2055032.15 350691.3, 2055683.17 349938.31, 2056004.75 349585.35, 2056577.34 348550)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     555.05        53     460.00     570.29       105    1020.01     541.81       157    1515.00     581.14       209    2135.00     609.98    \n",
      "     2      20.00     555.34        54     465.00     571.68       106    1025.00     541.12       158    1520.01     580.90       210    2140.00     610.13    \n",
      "     3      25.00     555.37        55     470.00     571.48       107    1030.00     539.60       159    1530.00     580.26       211    2155.00     610.87    \n",
      "     4      30.00     555.34        56     475.00     571.06       108    1035.00     538.43       160    1535.00     581.08       212    2160.01     611.08    \n",
      "     5      35.00     555.45        57     485.00     567.58       109    1040.00     538.17       161    1540.00     583.61       213    2165.00     611.18    \n",
      "     6      40.00     555.92        58     515.00     557.66       110    1060.00     537.31       162    1545.00     584.97       214    2180.00     611.62    \n",
      "     7      65.00     566.52        59     520.01     557.37       111    1070.00     536.93       163    1550.00     585.22       215    2185.00     611.80    \n",
      "     8      70.00     568.60        60     535.00     557.17       112    1075.00     536.78       164    1565.00     586.25       216    2215.00     613.14    \n",
      "     9      75.00     570.48        61     540.01     557.20       113    1100.00     536.57       165    1570.00     586.18       217    2220.00     613.41    \n",
      "    10      80.00     573.01        62     550.00     557.44       114    1110.00     536.23       166    1575.00     585.70       218    2250.01     615.22    \n",
      "    11      85.00     575.16        63     555.00     557.44       115    1125.00     536.23       167    1585.00     586.30       219    2330.00     620.45    \n",
      "    12      90.00     576.91        64     565.01     557.08       116    1140.00     537.06       168    1590.00     587.51       220    2360.01     622.74    \n",
      "    13     100.00     580.97        65     585.01     556.17       117    1145.01     537.18       169    1595.00     587.97       221    2365.00     622.91    \n",
      "    14     105.00     582.50        66     590.00     556.09       118    1170.00     536.40       170    1630.00     590.23       222    2375.00     622.98    \n",
      "    15     110.00     583.43        67     600.00     556.08       119    1190.00     536.23       171    1635.00     590.58       223    2385.00     623.88    \n",
      "    16     115.00     583.72        68     645.01     554.36       120    1195.01     536.31       172    1645.00     591.33       224    2390.00     624.14    \n",
      "    17     120.00     583.91        69     680.00     553.66       121    1215.00     537.64       173    1650.00     591.77       225    2395.00     624.58    \n",
      "    18     125.00     584.06        70     685.00     553.49       122    1225.00     539.17       174    1655.00     592.02       226    2410.00     625.63    \n",
      "    19     150.00     584.26        71     710.00     552.88       123    1230.00     538.96       175    1660.00     590.85       227    2415.00     625.85    \n",
      "    20     155.01     584.13        72     740.00     552.97       124    1235.00     540.05       176    1680.00     592.02       228    2420.00     626.11    \n",
      "    21     160.01     583.89        73     745.00     553.05       125    1245.01     543.25       177    1685.00     592.28       229    2425.00     626.41    \n",
      "    22     165.01     583.74        74     750.00     553.20       126    1250.00     547.63       178    1690.00     592.69       230    2430.00     626.67    \n",
      "    23     170.00     583.88        75     765.00     554.33       127    1255.00     550.56       179    1700.00     593.76       231    2445.00     628.02    \n",
      "    24     175.00     583.94        76     770.00     554.30       128    1260.00     553.54       180    1705.00     594.25       232    2450.00     628.36    \n",
      "    25     180.01     583.97        77     775.00     554.33       129    1265.00     553.15       181    1710.00     594.54       233    2455.00     628.67    \n",
      "    26     215.00     583.59        78     780.00     554.97       130    1270.00     551.77       182    1715.00     594.80       234    2470.01     629.52    \n",
      "    27     220.01     583.49        79     795.00     557.14       131    1275.00     552.44       183    1770.00     596.95       235    2485.00     630.63    \n",
      "    28     225.01     580.95        80     800.00     557.53       132    1285.00     561.38       184    1785.00     597.44       236    2490.00     630.94    \n",
      "    29     230.00     579.70        81     805.00     557.59       133    1290.00     563.24       185    1795.00     597.84       237    2495.00     631.07    \n",
      "    30     235.00     577.96        82     810.00     557.53       134    1295.01     562.89       186    1825.00     599.23       238    2515.00     632.26    \n",
      "    31     240.01     576.05        83     835.00     557.71       135    1300.00     563.58       187    1830.00     599.38       239    2520.00     632.53    \n",
      "    32     255.00     569.05        84     845.01     557.68       136    1302.51     563.85       188    1850.00     599.18       240    2525.01     632.59    \n",
      "    33     260.00     566.78        85     850.00     557.74       137    1330.00     566.81       189    1855.00     599.27       241    2540.00     633.02    \n",
      "    34     270.00     562.31        86     870.00     558.32       138    1335.00     567.40       190    1865.00     599.32       242    2550.00     633.40    \n",
      "    35     290.00     555.50        87     875.00     558.41       139    1340.01     567.90       191    1870.00     599.66       243    2555.00     633.70    \n",
      "    36     295.00     554.07        88     880.01     558.45       140    1345.00     568.43       192    1895.00     601.60       244    2560.00     634.27    \n",
      "    37     300.00     552.89        89     890.00     558.12       141    1380.01     572.44       193    1900.00     601.95       245    2565.00     634.88    \n",
      "    38     305.01     552.66        90     915.00     558.42       142    1390.00     573.38       194    1910.00     602.56       246    2590.01     636.16    \n",
      "    39     310.00     552.46        91     920.00     558.16       143    1395.00     573.93       195    1915.00     602.75       247    2595.00     636.04    \n",
      "    40     315.00     552.60        92     945.01     556.09       144    1400.00     574.40       196    1980.00     604.87       248    2605.00     635.29    \n",
      "    41     320.00     552.57        93     950.00     556.14       145    1405.00     574.60       197    2010.00     605.33       249    2610.00     634.78    \n",
      "    42     325.01     552.22        94     952.98     556.25       146    1415.00     576.20       198    2030.00     605.12       250    2620.00     634.54    \n",
      "    43     330.00     552.25        95     956.17     556.42       147    1425.00     577.72       199    2035.00     605.20       251    2625.01     634.12    \n",
      "    44     370.00     553.60        96     960.00     555.08       148    1430.00     578.36       200    2060.00     605.94       252    2630.00     633.74    \n",
      "    45     395.00     554.22        97     965.01     553.65       149    1455.01     579.68       201    2065.00     606.19       253    2635.00     633.79    \n",
      "    46     400.00     554.56        98     970.00     552.25       150    1460.00     579.88       202    2075.00     606.97       254    2640.00     633.79    \n",
      "    47     420.00     556.77        99     990.00     546.85       151    1470.00     580.17       203    2080.00     607.12       255    2645.00     633.75    \n",
      "    48     425.00     557.60       100     995.40     544.66       152    1472.89     580.28       204    2085.00     607.31       256    2650.00     633.51    \n",
      "    49     435.00     561.05       101    1000.00     543.82       153    1485.00     580.74       205    2090.00     607.70       257    2656.02     633.04    \n",
      "    50     440.00     562.99       102    1005.01     543.29       154    1490.00     580.97       206    2100.00     608.54    \n",
      "    51     445.00     565.00       103    1010.00     542.72       155    1495.00     581.01       207    2105.01     608.76    \n",
      "    52     455.00     568.47       104    1015.00     542.12       156    1500.00     581.02       208    2125.00     609.47    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 163:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2055212.55 350785.42, 2055957.69 349789.28, 2056891.08 348557.84)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     554.97        55     390.01     558.62       109     980.00     537.99       163    1510.01     580.41       217    2220.00     606.43    \n",
      "     2       5.00     554.59        56     395.00     559.18       110    1015.01     536.77       164    1515.00     581.28       218    2240.00     606.32    \n",
      "     3      10.00     551.70        57     400.00     560.17       111    1040.00     536.59       165    1545.00     581.73       219    2245.00     606.48    \n",
      "     4      15.00     548.39        58     405.00     561.24       112    1045.00     536.46       166    1605.00     584.02       220    2275.00     608.09    \n",
      "     5      20.00     548.44        59     410.00     562.41       113    1050.00     536.30       167    1635.00     585.63       221    2310.00     609.00    \n",
      "     6      25.00     548.92        60     425.00     566.60       114    1055.01     536.20       168    1640.00     585.69       222    2335.01     609.46    \n",
      "     7      30.00     549.57        61     430.01     569.00       115    1065.01     536.20       169    1645.00     585.66       223    2345.01     610.36    \n",
      "     8      40.00     548.78        62     435.00     571.51       116    1070.00     536.33       170    1650.00     586.42       224    2365.00     611.39    \n",
      "     9      45.00     550.46        63     440.00     571.70       117    1085.00     537.16       171    1655.00     587.60       225    2370.00     611.69    \n",
      "    10      55.00     555.46        64     445.00     571.36       118    1090.00     537.15       172    1660.00     588.66       226    2380.00     612.34    \n",
      "    11      60.00     557.84        65     470.01     562.72       119    1115.00     536.40       173    1675.00     589.08       227    2385.00     612.61    \n",
      "    12      65.00     560.27        66     475.00     561.13       120    1135.01     536.25       174    1680.00     589.14       228    2420.00     612.88    \n",
      "    13      70.00     562.82        67     480.00     559.74       121    1140.00     536.30       175    1700.01     589.00       229    2430.00     612.17    \n",
      "    14      90.00     572.89        68     500.00     556.00       122    1165.00     537.95       176    1705.00     588.54       230    2435.00     611.70    \n",
      "    15      95.00     574.28        69     505.00     555.43       123    1170.00     538.10       177    1710.01     588.28       231    2440.00     611.32    \n",
      "    16     100.00     575.20        70     525.00     554.65       124    1175.01     538.96       178    1720.01     588.36       232    2445.01     611.04    \n",
      "    17     105.00     577.38        71     550.01     554.11       125    1190.00     544.99       179    1725.00     588.45       233    2450.00     610.89    \n",
      "    18     110.00     579.10        72     595.00     553.96       126    1195.00     547.45       180    1740.00     588.82       234    2455.01     610.78    \n",
      "    19     115.01     579.71        73     640.00     553.37       127    1200.00     546.63       181    1780.00     590.14       235    2460.00     611.84    \n",
      "    20     120.00     580.36        74     645.00     553.33       128    1205.00     545.77       182    1785.00     590.48       236    2470.00     616.07    \n",
      "    21     130.00     580.21        75     650.00     553.34       129    1210.00     546.92       183    1795.00     591.49       237    2475.01     615.12    \n",
      "    22     135.00     580.47        76     700.00     553.80       130    1215.01     555.58       184    1820.00     594.59       238    2480.00     613.81    \n",
      "    23     150.00     580.63        77     705.00     553.79       131    1220.00     561.78       185    1825.01     595.02       239    2485.01     613.13    \n",
      "    24     155.01     581.15        78     730.00     553.43       132    1225.01     558.65       186    1830.00     595.00       240    2500.00     617.59    \n",
      "    25     160.00     581.54        79     745.00     553.63       133    1230.00     555.69       187    1835.00     594.95       241    2505.01     618.24    \n",
      "    26     165.00     581.38        80     750.01     555.61       134    1235.00     556.48       188    1845.00     594.49       242    2510.00     618.28    \n",
      "    27     180.00     581.26        81     755.00     557.84       135    1240.00     559.70       189    1850.00     594.43       243    2515.01     618.10    \n",
      "    28     185.00     580.13        82     760.00     559.93       136    1244.00     562.22       190    1875.00     595.27       244    2520.00     615.95    \n",
      "    29     215.00     579.68        83     765.00     560.33       137    1245.00     562.85       191    1880.01     595.35       245    2525.01     617.01    \n",
      "    30     220.00     578.62        84     770.00     560.17       138    1249.01     565.04       192    1905.00     595.64       246    2530.00     618.46    \n",
      "    31     225.00     577.23        85     805.00     556.33       139    1250.00     565.58       193    1910.01     595.79       247    2535.01     618.80    \n",
      "    32     230.00     576.59        86     810.00     555.81       140    1275.00     567.23       194    1925.00     596.36       248    2540.00     618.90    \n",
      "    33     235.01     574.52        87     835.00     554.18       141    1280.00     567.51       195    1930.00     596.59       249    2550.00     618.99    \n",
      "    34     240.00     574.15        88     840.00     554.11       142    1285.00     567.75       196    1935.00     597.13       250    2555.00     618.75    \n",
      "    35     245.01     573.16        89     845.00     554.29       143    1305.00     568.91       197    1940.00     597.53       251    2560.00     617.19    \n",
      "    36     250.00     571.43        90     855.00     554.53       144    1310.00     569.16       198    1960.00     598.57       252    2565.00     617.37    \n",
      "    37     255.00     569.78        91     860.00     554.60       145    1335.00     569.83       199    1965.00     598.67       253    2570.00     617.82    \n",
      "    38     260.00     568.05        92     870.00     554.50       146    1340.01     570.09       200    1975.01     598.67       254    2575.00     619.02    \n",
      "    39     265.00     566.13        93     875.00     554.40       147    1355.00     571.69       201    1980.00     598.83       255    2580.00     619.97    \n",
      "    40     270.00     564.14        94     883.06     554.29       148    1360.01     572.04       202    1995.01     599.75       256    2585.00     620.26    \n",
      "    41     275.01     561.96        95     890.00     554.20       149    1365.00     572.62       203    2005.00     599.80       257    2640.00     622.54    \n",
      "    42     280.00     560.00        96     895.01     554.63       150    1370.01     573.23       204    2035.00     599.68       258    2650.00     623.16    \n",
      "    43     295.00     554.27        97     905.00     556.44       151    1380.00     574.56       205    2040.00     599.73       259    2685.01     624.81    \n",
      "    44     310.00     548.46        98     910.00     556.35       152    1385.00     575.09       206    2065.00     600.71       260    2690.00     625.00    \n",
      "    45     315.00     547.59        99     915.00     553.83       153    1395.00     576.46       207    2070.01     600.83       261    2700.00     625.31    \n",
      "    46     320.00     548.95       100     930.00     547.38       154    1405.00     577.92       208    2125.00     601.78       262    2730.00     626.94    \n",
      "    47     325.00     550.34       101     935.01     546.40       155    1410.00     578.28       209    2130.00     601.91       263    2735.00     627.17    \n",
      "    48     335.00     553.19       102     940.00     544.10       156    1420.00     578.88       210    2140.00     602.26       264    2775.00     628.51    \n",
      "    49     340.00     554.50       103     945.00     541.93       157    1455.00     580.53       211    2165.01     603.78       265    2780.01     628.80    \n",
      "    50     345.00     555.02       104     950.00     540.44       158    1460.00     580.71       212    2180.00     604.38       266    2785.00     629.12    \n",
      "    51     350.00     555.14       105     955.00     539.31       159    1465.00     580.79       213    2200.00     605.54       267    2789.21     629.35    \n",
      "    52     355.00     555.55       106     960.00     538.68       160    1485.00     580.85       214    2205.00     605.77    \n",
      "    53     370.00     556.86       107     970.00     539.06       161    1500.00     580.73       215    2210.00     606.19    \n",
      "    54     375.00     557.13       108     975.01     538.68       162    1505.00     580.10       216    2215.00     606.26    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 164:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2055902.79 351075.63, 2057432.29 348918.65)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     554.82        39     564.28     551.17        77     895.00     544.72       115    1340.00     567.34       153    2195.00     604.66    \n",
      "     2       5.00     555.03        40     565.00     551.17        78     930.00     547.66       116    1359.99     568.28       154    2219.99     608.22    \n",
      "     3      14.99     557.17        41     570.00     551.00        79     940.00     548.57       117    1364.99     568.58       155    2224.99     608.64    \n",
      "     4      20.00     558.30        42     590.00     544.82        80     945.00     548.83       118    1425.00     569.44       156    2255.00     610.00    \n",
      "     5      25.00     556.77        43     595.00     543.95        81     960.00     549.30       119    1434.99     569.50       157    2260.00     610.18    \n",
      "     6      30.00     558.31        44     600.00     541.38        82     989.99     550.61       120    1455.00     569.81       158    2265.00     610.01    \n",
      "     7      35.00     560.79        45     605.00     540.38        83    1000.00     551.85       121    1474.99     569.92       159    2270.00     609.75    \n",
      "     8      59.99     572.80        46     609.99     539.23        84    1005.00     552.30       122    1495.00     570.31       160    2275.00     609.64    \n",
      "     9      65.00     575.17        47     614.99     538.16        85    1010.00     552.64       123    1500.00     570.38       161    2285.00     609.47    \n",
      "    10      70.00     576.27        48     625.00     540.19        86    1015.00     552.88       124    1505.00     570.26       162    2290.00     609.42    \n",
      "    11      75.00     576.58        49     630.00     540.30        87    1025.00     553.28       125    1510.00     570.93       163    2294.99     609.52    \n",
      "    12      85.00     577.10        50     635.00     539.55        88    1030.00     553.42       126    1515.00     572.25       164    2299.99     609.72    \n",
      "    13      95.00     576.91        51     640.00     538.90        89    1035.00     553.45       127    1520.00     573.52       165    2310.00     610.40    \n",
      "    14     110.00     576.76        52     670.00     536.62        90    1040.00     553.60       128    1549.99     575.54       166    2315.00     610.65    \n",
      "    15     115.00     576.56        53     675.00     536.29        91    1059.99     554.87       129    1554.99     575.81       167    2330.00     611.87    \n",
      "    16     120.00     576.02        54     710.00     535.61        92    1064.99     555.14       130    1585.00     576.64       168    2350.00     612.92    \n",
      "    17     124.99     575.99        55     715.00     535.48        93    1085.00     555.69       131    1590.00     576.67       169    2355.00     613.14    \n",
      "    18     150.00     575.99        56     720.00     535.27        94    1090.00     556.07       132    1610.00     576.54       170    2360.00     613.14    \n",
      "    19     155.00     575.86        57     724.99     535.30        95    1094.99     556.52       133    1615.00     576.35       171    2365.00     613.19    \n",
      "    20     164.99     574.89        58     729.99     535.42        96    1099.99     556.84       134    1619.99     577.56       172    2380.00     613.48    \n",
      "    21     169.99     574.29        59     740.00     535.37        97    1109.99     557.25       135    1624.99     578.58       173    2390.00     613.78    \n",
      "    22     174.99     573.85        60     755.00     535.19        98    1115.00     557.40       136    1630.00     579.31       174    2405.00     614.28    \n",
      "    23     185.00     572.78        61     759.99     535.19        99    1130.00     557.69       137    1640.00     580.37       175    2430.00     614.91    \n",
      "    24     190.00     571.19        62     765.00     535.41       100    1140.00     558.12       138    1645.00     580.85       176    2440.00     614.91    \n",
      "    25     205.00     565.26        63     770.00     535.58       101    1145.00     558.26       139    1655.00     581.69       177    2445.00     615.24    \n",
      "    26     244.99     549.65        64     780.00     535.29       102    1160.00     558.53       140    1659.99     581.89       178    2465.00     617.00    \n",
      "    27     250.00     548.25        65     790.00     535.19       103    1165.00     558.68       141    1694.99     583.00       179    2470.00     617.65    \n",
      "    28     255.00     547.32        66     795.00     535.77       104    1169.99     558.91       142    1739.99     586.34       180    2505.00     623.33    \n",
      "    29     260.00     547.83        67     804.99     537.16       105    1195.00     560.32       143    1745.00     586.62       181    2519.99     624.74    \n",
      "    30     265.00     548.63        68     810.00     537.37       106    1200.00     560.54       144    1815.00     590.10       182    2555.00     627.76    \n",
      "    31     280.00     548.92        69     815.00     538.12       107    1215.00     560.95       145    1870.00     592.24       183    2575.00     629.81    \n",
      "    32     320.00     549.90        70     820.00     539.02       108    1220.00     561.22       146    1940.00     594.43       184    2580.00     630.48    \n",
      "    33     325.00     549.98        71     825.00     539.59       109    1270.00     562.88       147    1945.00     594.62       185    2625.00     641.58    \n",
      "    34     390.00     549.75        72     830.00     540.20       110    1280.00     563.11       148    1990.00     596.56       186    2630.00     642.46    \n",
      "    35     495.00     549.83        73     845.00     542.99       111    1289.99     563.43       149    2000.00     596.91       187    2644.23     644.18    \n",
      "    36     549.99     550.88        74     850.00     543.47       112    1325.00     564.75       150    2010.00     597.20    \n",
      "    37     555.00     551.05        75     869.16     543.93       113    1330.00     565.07       151    2175.00     603.84    \n",
      "    38     560.00     551.18        76     890.00     544.42       114    1335.00     565.65       152    2184.99     604.15    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 165:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2057165.61 351444.28, 2057306.79 349954, 2057581.32 348965.71)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     570.35        31     560.00     551.75        61     945.00     547.12        91    1665.00     575.50       121    2155.00     601.58    \n",
      "     2       5.00     570.30        32     565.00     551.63        62     980.00     546.43        92    1675.00     576.04       122    2160.00     601.95    \n",
      "     3       9.99     570.42        33     570.00     551.75        63     990.00     546.41        93    1680.00     576.56       123    2170.00     602.42    \n",
      "     4      15.00     570.26        34     571.89     551.75        64    1055.00     547.26        94    1685.00     577.12       124    2175.00     602.72    \n",
      "     5      35.00     569.51        35     575.00     551.76        65    1090.00     548.19        95    1690.00     577.51       125    2180.00     602.99    \n",
      "     6      40.00     569.40        36     580.00     551.64        66    1095.00     548.35        96    1695.00     577.55       126    2190.00     603.33    \n",
      "     7      50.00     569.26        37     585.00     549.22        67    1155.00     551.40        97    1700.00     577.71       127    2195.00     603.27    \n",
      "     8      54.99     569.00        38     599.99     540.25        68    1160.00     551.69        98    1705.00     577.77       128    2200.00     603.09    \n",
      "     9      65.00     568.35        39     605.00     537.66        69    1200.00     554.48        99    1709.99     577.92       129    2205.00     602.75    \n",
      "    10      95.00     565.94        40     615.00     536.67        70    1250.00     557.49       100    1715.00     578.49       130    2210.00     604.16    \n",
      "    11     105.00     564.77        41     620.00     536.31        71    1275.00     558.73       101    1720.00     578.90       131    2215.00     604.71    \n",
      "    12     110.00     565.09        42     630.00     535.49        72    1319.99     561.35       102    1780.00     580.74       132    2240.00     606.70    \n",
      "    13     130.00     570.70        43     635.00     535.15        73    1370.00     563.64       103    1810.00     582.12       133    2245.00     607.18    \n",
      "    14     135.00     570.70        44     650.00     534.87        74    1409.99     565.71       104    1885.00     584.87       134    2250.00     608.79    \n",
      "    15     145.00     564.47        45     705.00     534.11        75    1415.00     566.01       105    1890.00     585.01       135    2255.00     608.73    \n",
      "    16     175.00     553.46        46     715.00     533.89        76    1435.00     567.52       106    1900.00     585.38       136    2260.00     607.96    \n",
      "    17     180.00     551.67        47     740.00     533.94        77    1454.99     568.82       107    1910.00     586.17       137    2275.00     609.60    \n",
      "    18     184.99     550.24        48     760.00     533.88        78    1496.95     570.05       108    1915.00     586.40       138    2280.00     610.23    \n",
      "    19     190.00     552.12        49     790.00     534.75        79    1510.00     570.42       109    1930.00     586.85       139    2285.00     611.33    \n",
      "    20     195.00     552.72        50     795.00     535.03        80    1535.00     571.29       110    1935.00     587.14       140    2289.99     612.09    \n",
      "    21     255.00     554.24        51     815.00     535.60        81    1540.00     571.53       111    1940.00     587.50       141    2395.00     625.82    \n",
      "    22     260.00     554.21        52     819.99     535.89        82    1564.99     572.87       112    1960.00     588.58       142    2470.00     633.69    \n",
      "    23     320.00     552.68        53     825.00     538.09        83    1580.00     573.41       113    1970.00     589.08       143    2475.00     634.50    \n",
      "    24     365.00     552.66        54     835.00     542.32        84    1595.00     573.79       114    1990.00     590.18       144    2515.00     645.29    \n",
      "    25     440.00     552.87        55     839.99     544.17        85    1600.00     573.88       115    2005.00     590.97       145    2519.99     646.46    \n",
      "    26     495.00     553.23        56     847.11     545.04        86    1635.00     573.94       116    2025.00     592.24       146    2522.66     646.86    \n",
      "    27     500.00     553.22        57     850.00     545.40        87    1645.00     573.84       117    2030.00     592.53    \n",
      "    28     515.00     553.05        58     860.00     546.55        88    1650.00     574.40       118    2039.99     593.36    \n",
      "    29     545.00     552.17        59     870.00     547.79        89    1655.00     575.02       119    2115.00     599.23    \n",
      "    30     550.00     552.05        60     890.00     547.90        90    1660.00     575.36       120    2145.00     601.02    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 166:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2057918.59 351546.25, 2057997.02 349263.76)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     566.72        30     665.00     553.03        59    1000.00     547.49        88    1460.00     559.05       117    1930.00     576.72    \n",
      "     2      25.00     566.02        31     675.00     552.07        60    1005.00     548.33        89    1470.01     555.60       118    1935.00     577.47    \n",
      "     3      50.00     565.13        32     681.04     552.08        61    1020.65     548.47        90    1475.00     554.39       119    1940.01     578.01    \n",
      "     4      55.00     564.82        33     685.00     552.09        62    1050.00     548.72        91    1565.00     554.49       120    1950.00     579.00    \n",
      "     5      65.00     564.02        34     690.01     552.02        63    1055.00     548.72        92    1590.00     554.40       121    1955.00     579.31    \n",
      "     6      75.00     563.16        35     695.00     550.70        64    1120.00     546.56        93    1595.00     557.94       122    1960.01     579.47    \n",
      "     7      80.01     563.14        36     705.01     546.84        65    1125.00     546.45        94    1600.00     558.46       123    1985.00     580.64    \n",
      "     8     105.00     569.77        37     710.00     545.06        66    1155.00     545.91        95    1610.00     561.93       124    1990.00     580.81    \n",
      "     9     110.00     570.65        38     715.00     543.35        67    1170.00     545.53        96    1615.00     563.63       125    1995.01     580.90    \n",
      "    10     115.00     569.79        39     720.00     541.67        68    1215.01     545.87        97    1630.00     562.12       126    2010.01     581.28    \n",
      "    11     175.00     547.27        40     735.00     537.21        69    1220.00     545.86        98    1635.00     561.86       127    2015.00     581.96    \n",
      "    12     180.01     548.29        41     740.01     536.21        70    1225.00     545.76        99    1640.01     567.14       128    2020.00     582.72    \n",
      "    13     195.01     552.07        42     745.00     535.86        71    1235.00     544.85       100    1645.00     570.64       129    2025.01     583.64    \n",
      "    14     200.00     552.28        43     750.00     535.59        72    1240.00     544.46       101    1650.00     570.61       130    2035.00     585.60    \n",
      "    15     245.00     552.92        44     765.00     534.36        73    1265.01     544.17       102    1655.01     570.43       131    2050.00     588.77    \n",
      "    16     255.00     552.94        45     770.00     534.17        74    1270.00     544.78       103    1670.01     568.81       132    2055.00     589.12    \n",
      "    17     305.00     552.76        46     775.01     534.01        75    1275.00     543.89       104    1675.00     567.43       133    2080.01     589.14    \n",
      "    18     310.00     552.80        47     825.01     533.03        76    1280.01     544.26       105    1690.01     562.55       134    2085.00     589.29    \n",
      "    19     360.00     553.47        48     870.00     532.83        77    1285.00     544.57       106    1695.00     562.35       135    2090.00     589.31    \n",
      "    20     385.01     552.52        49     875.01     532.86        78    1335.00     546.51       107    1715.00     563.98       136    2095.01     589.21    \n",
      "    21     390.00     552.37        50     920.00     534.14        79    1340.00     546.66       108    1720.01     564.25       137    2100.00     589.48    \n",
      "    22     425.00     551.66        51     925.01     534.32        80    1355.00     547.01       109    1735.00     564.56       138    2105.00     590.69    \n",
      "    23     460.00     551.56        52     960.01     536.15        81    1395.00     548.29       110    1775.01     566.11       139    2130.01     594.77    \n",
      "    24     480.00     551.79        53     965.00     536.33        82    1400.01     548.59       111    1790.01     566.79       140    2135.00     594.55    \n",
      "    25     505.00     552.43        54     970.00     536.54        83    1415.01     549.81       112    1845.00     569.79       141    2140.00     594.49    \n",
      "    26     530.00     552.85        55     975.00     537.76        84    1430.00     551.18       113    1890.01     571.60       142    2145.01     594.79    \n",
      "    27     590.00     553.32        56     980.00     539.16        85    1435.01     551.61       114    1905.00     572.43       143    2150.00     595.40    \n",
      "    28     595.00     553.39        57     985.00     541.06        86    1440.00     552.99       115    1910.01     572.80       144    2283.84     615.53    \n",
      "    29     660.00     553.36        58     990.00     543.03        87    1455.00     560.61       116    1915.00     573.54    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 167:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2058581.37 351620.76, 2058581.37 350797.19, 2058424.5 349950.08, 2058432.34 349408.87)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     563.27        32     815.00     546.62        63    1190.00     536.33        94    1445.00     547.39       125    1840.00     576.90    \n",
      "     2       5.00     564.27        33     823.57     546.35        64    1200.00     539.47        95    1450.00     548.05       126    1884.99     581.88    \n",
      "     3      10.00     564.49        34     830.00     546.16        65    1205.00     540.82        96    1470.00     550.89       127    1889.99     582.33    \n",
      "     4      20.00     564.75        35     835.00     546.08        66    1220.00     543.62        97    1475.00     551.47       128    1940.00     585.64    \n",
      "     5      25.00     564.91        36     905.00     547.55        67    1225.00     543.82        98    1485.00     552.53       129    1945.00     586.10    \n",
      "     6      30.00     564.90        37     909.99     548.05        68    1226.05     543.84        99    1505.00     554.49       130    1975.00     590.97    \n",
      "     7      35.00     564.55        38     925.00     549.77        69    1229.99     543.90       100    1510.00     554.94       131    1979.99     591.48    \n",
      "     8      45.00     564.07        39     926.61     549.91        70    1235.00     543.93       101    1525.00     556.06       132    1984.99     591.82    \n",
      "     9      50.00     563.99        40     930.00     550.19        71    1240.00     543.93       102    1555.00     558.09       133    1989.99     592.33    \n",
      "    10      55.00     564.44        41     935.00     550.25        72    1244.99     542.80       103    1560.00     558.39       134    2000.00     594.33    \n",
      "    11      60.00     564.84        42     940.00     550.25        73    1250.00     541.38       104    1585.00     559.67       135    2005.00     594.54    \n",
      "    12      70.00     564.93        43     945.00     550.19        74    1255.00     540.08       105    1590.00     559.84       136    2015.00     594.88    \n",
      "    13      80.00     564.86        44     949.99     548.88        75    1260.00     540.92       106    1595.00     559.96       137    2020.00     594.94    \n",
      "    14      85.00     564.63        45     955.00     547.27        76    1265.00     541.84       107    1600.00     560.01       138    2025.00     595.36    \n",
      "    15     110.00     562.40        46     960.00     544.09        77    1270.00     542.70       108    1604.99     560.03       139    2030.00     595.14    \n",
      "    16     115.00     562.91        47     964.99     540.22        78    1275.00     543.14       109    1615.00     560.61       140    2035.00     595.37    \n",
      "    17     140.00     570.30        48     970.00     539.32        79    1280.00     543.32       110    1619.99     560.82       141    2040.00     595.90    \n",
      "    18     145.00     570.61        49     985.00     540.47        80    1290.00     543.85       111    1640.00     560.73       142    2045.00     596.79    \n",
      "    19     150.00     570.33        50     990.00     538.82        81    1305.00     544.41       112    1645.00     560.82       143    2050.00     597.47    \n",
      "    20     200.00     550.86        51    1000.00     535.81        82    1310.00     544.53       113    1650.00     561.25       144    2055.00     597.72    \n",
      "    21     210.00     546.83        52    1005.00     535.47        83    1315.00     544.44       114    1670.00     563.46       145    2060.00     598.18    \n",
      "    22     215.00     545.05        53    1035.00     533.84        84    1320.00     544.23       115    1674.99     564.75       146    2065.00     599.13    \n",
      "    23     220.00     545.24        54    1040.00     533.66        85    1339.99     542.59       116    1685.08     567.61       147    2070.00     599.93    \n",
      "    24     240.00     551.42        55    1045.00     533.67        86    1345.00     542.31       117    1694.99     570.41       148    2074.99     600.12    \n",
      "    25     245.00     551.50        56    1050.00     533.45        87    1375.00     542.47       118    1699.99     570.71       149    2079.99     600.16    \n",
      "    26     520.00     552.74        57    1055.00     533.37        88    1380.00     542.57       119    1704.99     570.40       150    2084.99     600.48    \n",
      "    27     665.00     553.85        58    1100.00     533.00        89    1385.00     542.83       120    1715.00     569.15       151    2226.35     612.57    \n",
      "    28     670.00     553.77        59    1104.99     533.01        90    1400.00     544.09       121    1720.00     568.96    \n",
      "    29     740.00     550.78        60    1175.00     534.36        91    1409.99     544.35       122    1785.00     572.68    \n",
      "    30     780.00     548.43        61    1180.00     534.76        92    1430.00     545.87       123    1830.00     575.98    \n",
      "    31     810.00     546.85        62    1185.00     535.87        93    1435.00     546.29       124    1835.00     576.39    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 168:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2059326.51 351683.51, 2059444.17 350420.69, 2059428.48 349738.3)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     559.02        23     165.00     570.40        45     975.00     545.58        67    1435.00     536.43        89    1695.00     571.38    \n",
      "     2      10.00     561.08        24     170.00     568.99        46    1005.00     545.78        68    1440.01     535.85        90    1700.00     572.76    \n",
      "     3      14.99     561.97        25     190.00     562.08        47    1070.00     546.94        69    1445.00     535.59        91    1705.01     574.70    \n",
      "     4      20.00     562.41        26     195.00     560.22        48    1175.00     547.90        70    1450.00     535.18        92    1730.00     584.60    \n",
      "     5      35.00     564.06        27     210.00     554.46        49    1180.00     547.91        71    1455.00     534.90        93    1735.00     586.31    \n",
      "     6      40.00     564.13        28     215.00     552.49        50    1268.29     547.57        72    1460.00     534.72        94    1750.00     589.05    \n",
      "     7      45.00     564.17        29     230.00     546.27        51    1270.00     547.57        73    1555.01     533.20        95    1755.00     589.52    \n",
      "     8      50.00     564.17        30     235.00     547.54        52    1280.00     547.52        74    1600.00     533.41        96    1760.00     589.58    \n",
      "     9      55.00     564.13        31     240.00     548.97        53    1285.00     547.54        75    1605.00     533.47        97    1765.00     589.53    \n",
      "    10      60.00     564.00        32     245.00     550.25        54    1340.00     548.00        76    1610.00     534.24        98    1770.00     589.33    \n",
      "    11      65.00     563.53        33     250.00     550.85        55    1360.00     548.33        77    1615.00     535.64        99    1775.00     588.90    \n",
      "    12      70.00     563.23        34     330.00     551.62        56    1365.01     548.67        78    1620.00     536.49       100    1780.01     589.01    \n",
      "    13      75.00     563.68        35     335.00     551.60        57    1370.00     549.18        79    1630.01     540.01       101    1790.00     590.75    \n",
      "    14      79.99     564.10        36     375.00     551.09        58    1375.00     549.24        80    1635.00     541.82       102    1815.00     594.97    \n",
      "    15      90.00     564.18        37     480.00     550.62        59    1380.00     549.22        81    1640.00     548.02       103    1835.00     598.61    \n",
      "    16     100.00     564.12        38     510.00     550.68        60    1385.00     549.16        82    1645.00     552.10       104    1840.00     599.44    \n",
      "    17     105.00     564.02        39     610.00     552.70        61    1388.82     548.47        83    1665.00     564.85       105    1845.00     600.19    \n",
      "    18     110.00     563.85        40     685.00     553.33        62    1390.00     548.26        84    1670.00     568.10       106    1850.00     600.08    \n",
      "    19     115.00     563.33        41     690.00     553.40        63    1400.00     547.39        85    1675.00     569.29       107    1855.01     599.19    \n",
      "    20     130.00     560.91        42     784.99     546.28        64    1405.00     546.17        86    1685.00     569.92       108    1950.86     602.77    \n",
      "    21     135.00     561.22        43     790.00     546.11        65    1425.00     539.64        87    1686.71     569.97    \n",
      "    22     160.00     570.40        44     820.00     545.82        66    1430.00     538.12        88    1690.00     570.06    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 169:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2060048.12 351761.95, 2060118.71 349879.49)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     550.69        23     145.00     565.25        45     510.01     550.36        67    1470.00     548.24        89    1690.01     537.13    \n",
      "     2       5.00     551.80        24     150.01     564.90        46     595.01     551.48        68    1475.01     546.41        90    1695.00     539.21    \n",
      "     3      15.00     554.13        25     155.00     563.96        47     665.01     552.06        69    1480.00     544.39        91    1710.00     545.99    \n",
      "     4      20.00     555.36        26     165.01     562.01        48     815.00     552.60        70    1490.01     540.55        92    1715.01     548.48    \n",
      "     5      35.00     559.39        27     170.00     561.26        49     820.01     552.31        71    1495.00     538.80        93    1730.01     556.52    \n",
      "     6      40.01     560.49        28     180.01     564.35        50     890.01     547.93        72    1500.00     537.13        94    1735.01     558.84    \n",
      "     7      55.01     563.29        29     190.00     567.27        51     975.00     543.22        73    1505.01     535.88        95    1740.00     561.41    \n",
      "     8      60.00     564.74        30     195.01     570.36        52     980.01     542.97        74    1510.00     535.40        96    1745.01     565.65    \n",
      "     9      65.01     565.13        31     200.00     570.36        53    1045.00     542.03        75    1515.01     535.01        97    1750.00     569.80    \n",
      "    10      70.00     565.36        32     205.00     567.71        54    1055.00     541.82        76    1520.01     534.55        98    1760.01     570.55    \n",
      "    11      75.00     565.50        33     215.00     563.80        55    1060.00     541.79        77    1525.00     534.15        99    1760.77     570.55    \n",
      "    12      80.01     565.59        34     220.00     561.90        56    1130.00     542.51        78    1530.01     533.87       100    1765.00     570.58    \n",
      "    13      85.00     565.64        35     255.00     548.90        57    1135.01     542.59        79    1600.00     532.40       101    1770.00     571.61    \n",
      "    14      95.01     565.47        36     260.00     547.15        58    1205.01     545.51        80    1605.01     532.35       102    1790.01     577.53    \n",
      "    15     100.00     565.17        37     265.01     547.28        59    1210.00     545.66        81    1610.00     532.35       103    1795.00     578.80    \n",
      "    16     105.00     564.84        38     305.00     549.01        60    1275.01     546.27        82    1615.01     532.40       104    1800.01     579.00    \n",
      "    17     110.01     565.03        39     310.01     549.09        61    1285.00     546.43        83    1625.00     532.56       105    1825.00     579.33    \n",
      "    18     115.00     565.36        40     320.00     549.08        62    1445.01     546.88        84    1660.01     532.84       106    1883.78     582.21    \n",
      "    19     120.00     565.52        41     325.01     549.16        63    1455.00     548.19        85    1670.00     533.40    \n",
      "    20     125.01     565.60        42     390.00     549.04        64    1460.01     548.29        86    1675.01     534.03    \n",
      "    21     130.00     565.62        43     395.01     549.08        65    1465.00     548.31        87    1680.00     535.12    \n",
      "    22     140.01     565.44        44     495.01     550.26        66    1467.28     548.28        88    1685.00     535.74    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 170:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2060605.02 351809.01, 2060738.36 350608.94, 2060942.29 349965.77)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     568.39        24     145.01     568.18        47     975.00     551.49        70    1425.00     535.89        93    1640.00     559.03    \n",
      "     2      30.00     570.28        25     155.00     568.01        48    1040.00     546.67        71    1430.00     535.26        94    1655.01     567.60    \n",
      "     3      35.00     570.36        26     160.00     567.83        49    1045.00     546.42        72    1435.01     534.59        95    1658.77     567.92    \n",
      "     4      40.00     570.32        27     165.00     567.57        50    1100.00     544.59        73    1440.00     533.77        96    1660.00     568.02    \n",
      "     5      45.01     569.27        28     185.00     564.88        51    1170.01     542.92        74    1445.00     533.11        97    1670.00     568.54    \n",
      "     6      50.01     567.90        29     190.00     565.28        52    1207.46     542.19        75    1500.01     531.48        98    1675.00     568.54    \n",
      "     7      55.01     566.56        30     200.00     568.17        53    1225.00     541.87        76    1505.00     531.39        99    1680.00     569.38    \n",
      "     8      60.01     566.54        31     205.00     569.57        54    1230.00     541.86        77    1520.00     531.39       100    1685.00     569.14    \n",
      "     9      65.00     566.79        32     210.00     570.06        55    1285.00     542.73        78    1525.00     531.53       101    1690.00     570.89    \n",
      "    10      70.00     567.07        33     215.00     569.67        56    1300.00     542.74        79    1530.00     531.72       102    1695.01     572.61    \n",
      "    11      75.00     567.38        34     235.01     561.94        57    1310.00     543.08        80    1535.00     531.80       103    1700.00     572.70    \n",
      "    12      80.00     567.66        35     245.00     558.04        58    1355.00     545.48        81    1570.00     532.11       104    1705.01     573.10    \n",
      "    13      85.00     567.90        36     265.00     551.30        59    1357.24     545.55        82    1575.01     532.28       105    1780.00     580.96    \n",
      "    14      90.00     568.05        37     270.00     549.79        60    1365.00     545.78        83    1590.01     533.58       106    1785.01     581.51    \n",
      "    15      95.00     568.14        38     280.00     551.04        61    1370.01     546.44        84    1595.00     534.31       107    1830.00     588.50    \n",
      "    16     100.00     568.20        39     285.00     551.30        62    1375.00     547.40        85    1600.00     534.92       108    1835.00     589.19    \n",
      "    17     110.00     568.03        40     375.00     550.91        63    1380.00     548.26        86    1605.00     535.50       109    1875.01     591.61    \n",
      "    18     115.00     567.75        41     475.00     551.94        64    1385.00     548.37        87    1610.00     538.50       110    1880.00     592.36    \n",
      "    19     120.00     567.41        42     795.00     552.03        65    1390.00     548.39        88    1615.01     543.22       111    1882.18     592.70    \n",
      "    20     125.00     567.56        43     835.01     551.66        66    1395.00     548.33        89    1620.00     546.59    \n",
      "    21     130.00     567.90        44     905.01     551.52        67    1400.00     546.67        90    1625.00     549.74    \n",
      "    22     135.01     568.07        45     965.00     552.00        68    1415.00     540.19        91    1630.01     552.85    \n",
      "    23     140.01     568.15        46     970.00     551.83        69    1420.01     537.93        92    1635.00     555.98    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 171:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2061228.58 351703.12, 2062083.53 350683.45)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     571.13        15     445.00     549.68        29     926.01     545.91        43    1075.00     531.53        57    1200.00     555.04    \n",
      "     2       5.00     571.45        16     525.00     549.83        30     930.01     546.11        44    1080.00     531.25        58    1205.00     557.82    \n",
      "     3      30.00     569.89        17     575.00     550.43        31     935.00     546.42        45    1110.01     530.21        59    1222.75     566.11    \n",
      "     4      35.00     569.67        18     690.01     550.78        32     940.00     546.82        46    1115.00     530.20        60    1225.00     567.16    \n",
      "     5      40.00     568.58        19     730.00     550.69        33     945.00     547.27        47    1130.00     531.07        61    1230.00     569.47    \n",
      "     6      70.00     560.23        20     735.00     550.45        34     950.00     545.50        48    1145.00     531.82        62    1235.00     569.87    \n",
      "     7      80.00     557.65        21     775.00     547.70        35     975.00     535.66        49    1150.00     532.19        63    1240.00     568.44    \n",
      "     8      95.00     553.87        22     780.00     547.39        36     980.00     535.30        50    1155.00     532.98        64    1250.01     564.88    \n",
      "     9     100.00     552.64        23     805.00     546.06        37    1040.00     535.38        51    1160.00     535.42        65    1255.00     563.21    \n",
      "    10     105.00     551.50        24     845.00     544.53        38    1045.00     535.23        52    1165.00     539.07        66    1260.00     562.11    \n",
      "    11     110.00     551.00        25     850.00     544.41        39    1050.00     534.50        53    1170.00     538.09        67    1265.00     566.17    \n",
      "    12     155.01     551.30        26     865.00     544.54        40    1055.00     532.80        54    1175.01     535.88        68    1270.00     569.71    \n",
      "    13     170.00     551.30        27     910.00     545.18        41    1060.00     530.87        55    1180.00     540.74        69    1275.00     573.67    \n",
      "    14     260.00     550.32        28     915.00     545.35        42    1065.00     532.19        56    1185.00     546.59        70    1330.66     624.71    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 172:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2061496.69 351706.28, 2062584.71 351720.35, 2063663.35 351800.08)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     575.40         8     355.20     577.60        15     615.00     530.30        22     901.20     592.10        29    1200.00     633.20    \n",
      "     2      60.00     575.80         9     355.26     575.80        16     662.40     529.20        23     960.00     586.50        30    1260.00     636.20    \n",
      "     3     120.00     578.00        10     402.00     547.10        17     696.00     545.00        24     996.60     598.40        31    1320.00     639.20    \n",
      "     4     180.00     581.80        11     425.40     545.40        18     710.40     548.40        25    1084.80     616.50    \n",
      "     5     240.00     583.80        12     472.80     535.20        19     746.40     551.30        26    1084.86     616.70    \n",
      "     6     300.00     586.70        13     520.20     534.90        20     805.20     570.50        27    1103.40     630.00    \n",
      "     7     337.80     589.30        14     567.60     534.30        21     895.80     593.10        28    1140.00     630.20    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 173:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2061477.94 351837.6, 2062617.54 351903.25, 2063832.18 351997.05)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     575.40         8     355.20     577.60        15     615.00     530.30        22     901.20     592.10        29    1200.00     633.20    \n",
      "     2      60.00     575.80         9     355.26     575.80        16     662.40     529.20        23     960.00     586.50        30    1260.00     636.20    \n",
      "     3     120.00     578.00        10     402.00     547.10        17     696.00     545.00        24     996.60     598.40        31    1320.00     639.20    \n",
      "     4     180.00     581.80        11     425.40     545.40        18     710.40     548.40        25    1084.80     616.50    \n",
      "     5     240.00     583.80        12     472.80     535.20        19     746.40     551.30        26    1084.86     616.70    \n",
      "     6     300.00     586.70        13     520.20     534.90        20     805.20     570.50        27    1103.40     630.00    \n",
      "     7     337.80     589.30        14     567.60     534.30        21     895.80     593.10        28    1140.00     630.20    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 174:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2061688.97 352001.74, 2063053.69 352072.08, 2063471.07 352114.29, 2063883.77 352137.74)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1      90.00     556.52        42     471.50     555.46        83     772.50     553.54       124    1021.00     535.51       165    1409.50     556.79    \n",
      "     2     100.50     557.67        43     492.50     555.64        84     790.01     553.16       125    1024.50     534.94       166    1423.50     556.39    \n",
      "     3     107.50     557.95        44     499.51     555.63        85     793.50     552.97       126    1035.00     534.76       167    1430.50     556.06    \n",
      "     4     135.51     555.94        45     503.00     555.31        86     800.51     552.24       127    1038.51     534.61       168    1451.51     556.14    \n",
      "     5     139.00     556.58        46     506.50     554.94        87     804.00     552.51       128    1042.00     534.26       169    1469.01     556.08    \n",
      "     6     142.50     557.33        47     510.01     554.61        88     807.50     552.85       129    1045.50     533.80       170    1472.51     556.14    \n",
      "     7     146.01     557.56        48     520.51     555.58        89     811.01     552.79       130    1046.57     533.65       171    1483.00     557.50    \n",
      "     8     170.50     555.81        49     524.00     555.72        90     828.50     552.00       131    1049.00     533.39       172    1486.51     558.24    \n",
      "     9     174.00     555.86        50     527.50     555.70        91     832.01     551.74       132    1073.51     532.32       173    1490.01     559.13    \n",
      "    10     177.51     555.98        51     531.01     555.59        92     835.50     551.59       133    1077.00     532.21       174    1493.50     559.94    \n",
      "    11     181.00     556.06        52     538.00     554.88        93     839.00     551.94       134    1175.00     531.71       175    1500.50     561.42    \n",
      "    12     184.50     556.08        53     541.51     554.80        94     860.00     551.77       135    1178.50     531.75       176    1504.01     561.83    \n",
      "    13     202.00     555.80        54     552.00     555.79        95     863.51     551.54       136    1185.50     531.95       177    1511.00     562.25    \n",
      "    14     205.50     555.80        55     555.50     555.98        96     867.00     551.67       137    1189.01     531.99       178    1514.50     562.73    \n",
      "    15     219.51     556.10        56     559.00     556.07        97     895.01     553.45       138    1241.51     531.71       179    1518.00     563.83    \n",
      "    16     223.00     556.11        57     562.51     556.13        98     898.50     553.49       139    1245.00     531.79       180    1521.51     564.74    \n",
      "    17     226.50     555.99        58     594.00     556.19        99     902.01     553.44       140    1301.01     534.13       181    1525.01     565.70    \n",
      "    18     230.00     555.66        59     611.51     555.17       100     905.50     553.63       141    1315.01     534.67       182    1532.00     567.81    \n",
      "    19     233.50     555.29        60     615.00     555.18       101     919.50     554.76       142    1318.50     534.89       183    1535.50     568.64    \n",
      "    20     237.00     555.26        61     618.50     555.84       102     923.01     554.67       143    1322.00     535.02       184    1539.01     569.33    \n",
      "    21     254.50     556.23        62     622.01     555.91       103     930.00     553.08       144    1325.50     536.22       185    1542.51     570.40    \n",
      "    22     258.00     556.35        63     629.00     555.70       104     933.51     552.39       145    1329.00     538.55       186    1546.00     571.83    \n",
      "    23     261.50     556.30        64     646.50     554.57       105     940.50     551.50       146    1332.51     540.73       187    1549.50     573.14    \n",
      "    24     265.00     555.96        65     650.00     554.81       106     944.01     551.50       147    1336.00     542.84       188    1553.00     573.11    \n",
      "    25     272.00     555.10        66     657.00     555.39       107     947.50     552.02       148    1340.23     545.11       189    1556.51     573.79    \n",
      "    26     275.50     555.10        67     667.50     555.12       108     951.00     552.36       149    1343.01     548.35       190    1563.50     578.45    \n",
      "    27     286.00     555.38        68     671.00     554.89       109     958.00     551.47       150    1350.00     557.20       191    1567.00     579.84    \n",
      "    28     303.50     556.21        69     678.00     554.31       110     961.50     550.96       151    1353.50     558.54       192    1570.50     579.93    \n",
      "    29     307.00     556.34        70     681.50     554.12       111     965.01     550.18       152    1360.51     560.22       193    1581.00     579.25    \n",
      "    30     310.51     556.32        71     692.00     554.67       112     968.50     549.79       153    1364.01     560.65       194    1584.50     579.38    \n",
      "    31     314.00     556.22        72     702.50     554.57       113     979.00     550.20       154    1367.50     560.58       195    1588.00     580.88    \n",
      "    32     328.00     555.21        73     706.01     554.50       114     982.50     550.53       155    1371.00     560.55       196    1591.50     581.99    \n",
      "    33     331.51     555.29        74     713.00     554.04       115     986.01     550.41       156    1374.50     560.79       197    1595.01     581.89    \n",
      "    34     349.00     555.91        75     716.51     553.93       116     986.35     550.32       157    1377.55     560.56       198    1598.50     581.83    \n",
      "    35     359.50     556.10        76     727.01     554.72       117     993.00     548.66       158    1378.01     560.53       199    1605.50     582.56    \n",
      "    36     366.50     555.67        77     730.50     554.63       118     996.51     547.84       159    1381.51     560.05       200    1609.00     582.59    \n",
      "    37     370.00     555.51        78     737.51     554.32       119    1000.00     547.09       160    1385.00     559.47       201    1612.51     581.91    \n",
      "    38     384.01     555.44        79     744.50     553.31       120    1003.50     546.45       161    1388.50     558.92       202    1623.00     582.85    \n",
      "    39     387.50     555.45        80     748.01     553.09       121    1007.01     546.48       162    1392.00     558.61       203    1626.50     583.11    \n",
      "    40     398.00     555.99        81     765.50     552.59       122    1010.50     544.05       163    1395.51     558.27       204    1629.59     582.90    \n",
      "    41     401.50     556.09        82     769.01     553.02       123    1017.51     538.29       164    1406.00     557.11    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 175:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2061670.21 352090.84, 2063025.55 352156.5, 2063564.87 352194.02, 2064019.77 352203.4)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     551.60        40     528.50     552.26        79     836.50     549.32       118    1127.00     531.56       157    1449.00     561.63    \n",
      "     2      91.00     551.38        41     535.51     552.76        80     840.01     549.22       119    1165.50     531.23       158    1452.50     561.81    \n",
      "     3     129.51     551.74        42     539.00     552.41        81     857.51     548.91       120    1169.00     531.27       159    1459.50     562.22    \n",
      "     4     133.00     551.87        43     542.51     552.38        82     861.00     548.61       121    1179.50     531.48       160    1470.01     561.95    \n",
      "     5     136.51     551.79        44     560.01     552.57        83     864.51     548.21       122    1183.00     531.49       161    1484.00     562.38    \n",
      "     6     157.50     551.96        45     563.50     552.77        84     868.00     547.76       123    1200.50     531.33       162    1487.50     562.54    \n",
      "     7     161.00     552.06        46     567.01     553.04        85     871.51     548.50       124    1204.01     531.34       163    1491.00     562.80    \n",
      "     8     185.50     551.81        47     570.51     553.23        86     875.00     548.86       125    1207.51     531.38       164    1494.50     563.20    \n",
      "     9     189.01     551.71        48     581.00     553.18        87     889.01     549.04       126    1211.01     531.37       165    1508.51     566.08    \n",
      "    10     213.51     551.54        49     598.50     553.27        88     892.50     549.14       127    1225.01     531.16       166    1512.01     566.63    \n",
      "    11     217.00     551.69        50     609.01     553.41        89     913.51     549.97       128    1228.51     531.14       167    1515.50     566.58    \n",
      "    12     220.51     551.53        51     630.00     553.00        90     927.50     549.23       129    1235.50     531.03       168    1522.50     568.08    \n",
      "    13     245.00     551.37        52     633.50     552.89        91     931.01     549.95       130    1239.01     531.10       169    1536.51     570.66    \n",
      "    14     248.51     551.54        53     651.00     552.12        92     934.50     550.81       131    1260.01     531.79       170    1540.01     571.33    \n",
      "    15     252.00     551.32        54     654.51     552.00        93     945.00     550.50       132    1270.50     531.79       171    1543.51     572.65    \n",
      "    16     276.50     551.47        55     658.00     551.97        94     948.51     550.34       133    1277.51     532.01       172    1554.00     576.20    \n",
      "    17     280.01     551.71        56     661.51     552.02        95     949.85     550.25       134    1284.50     532.31       173    1557.50     577.45    \n",
      "    18     283.50     551.48        57     665.00     552.15        96     962.50     549.20       135    1288.00     532.40       174    1561.00     578.57    \n",
      "    19     332.51     551.41        58     668.51     552.16        97     966.00     547.40       136    1295.01     532.34       175    1571.51     581.68    \n",
      "    20     336.00     551.60        59     682.50     552.03        98     969.51     545.99       137    1298.50     532.39       176    1575.01     581.96    \n",
      "    21     339.51     551.44        60     686.01     551.81        99     974.07     546.11       138    1302.00     532.73       177    1578.51     582.21    \n",
      "    22     360.50     551.47        61     689.50     551.73       100     976.50     546.18       139    1312.51     534.88       178    1585.50     582.86    \n",
      "    23     367.51     551.61        62     693.00     551.79       101     980.00     546.03       140    1316.00     536.75       179    1589.00     582.99    \n",
      "    24     371.00     551.52        63     700.00     552.30       102     983.51     545.42       141    1319.50     541.92       180    1596.00     583.08    \n",
      "    25     395.50     551.59        64     703.51     552.35       103     990.50     544.53       142    1323.01     545.00       181    1599.51     583.17    \n",
      "    26     399.01     551.94        65     717.50     552.08       104     997.50     543.50       143    1326.51     550.36       182    1610.01     583.55    \n",
      "    27     406.00     551.70        66     724.50     551.34       105    1001.01     542.94       144    1328.29     554.89       183    1613.50     583.64    \n",
      "    28     430.50     551.39        67     731.50     551.60       106    1004.51     541.87       145    1330.00     557.85       184    1617.00     583.70    \n",
      "    29     434.01     551.48        68     735.00     551.62       107    1008.00     540.40       146    1333.51     558.39       185    1620.50     582.88    \n",
      "    30     437.50     551.60        69     752.50     550.95       108    1018.51     535.57       147    1337.01     559.25       186    1624.00     582.17    \n",
      "    31     441.01     551.43        70     770.01     550.90       109    1022.01     535.14       148    1340.51     559.73       187    1627.50     582.54    \n",
      "    32     444.50     551.38        71     773.50     550.82       110    1029.00     534.74       149    1358.00     561.61       188    1631.00     580.64    \n",
      "    33     469.00     551.67        72     780.51     550.35       111    1032.50     534.57       150    1361.50     561.13       189    1634.51     578.22    \n",
      "    34     486.50     552.11        73     787.51     550.40       112    1036.01     534.19       151    1365.00     560.75       190    1638.01     577.37    \n",
      "    35     490.00     552.32        74     801.50     550.20       113    1039.51     533.78       152    1376.55     561.40       191    1641.51     577.21    \n",
      "    36     493.51     552.59        75     808.50     549.96       114    1043.00     533.43       153    1382.50     561.74       192    1646.79     577.27    \n",
      "    37     497.00     552.33        76     812.01     549.99       115    1067.50     532.34       154    1414.01     561.89    \n",
      "    38     500.51     551.95        77     819.00     550.47       116    1071.01     532.22       155    1442.01     561.60    \n",
      "    39     525.01     552.09        78     822.51     550.47       117    1088.51     532.10       156    1445.51     561.60    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 176:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2063077.13 352972.51, 2063714.94 352723.96, 2064240.19 352269.05)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     548.40        15     765.01     542.75        29     910.01     528.51        43    1090.00     547.45        57    1250.00     572.76    \n",
      "     2     130.00     547.37        16     770.00     540.92        30     930.01     528.86        44    1095.00     547.79        58    1270.01     587.04    \n",
      "     3     215.00     546.24        17     785.00     536.43        31     980.00     529.99        45    1105.01     550.44        59    1275.01     587.03    \n",
      "     4     335.00     546.97        18     790.00     535.37        32    1010.00     531.28        46    1110.00     551.83        60    1280.00     584.59    \n",
      "     5     510.01     544.44        19     795.01     534.83        33    1015.01     531.95        47    1115.00     552.44        61    1285.01     585.99    \n",
      "     6     560.00     543.96        20     805.00     535.16        34    1020.01     532.66        48    1130.00     554.12        62    1290.00     582.15    \n",
      "     7     565.00     543.96        21     810.01     534.78        35    1025.00     533.21        49    1135.01     554.74        63    1295.00     576.70    \n",
      "     8     665.01     544.71        22     815.01     533.69        36    1030.01     533.91        50    1180.00     561.31        64    1300.00     575.90    \n",
      "     9     675.00     544.73        23     830.01     529.77        37    1040.00     537.08        51    1190.00     562.21        65    1330.00     576.55    \n",
      "    10     684.53     544.82        24     835.00     529.27        38    1045.01     539.32        52    1195.00     562.18        66    1335.00     576.30    \n",
      "    11     739.35     545.79        25     870.00     528.21        39    1055.01     545.26        53    1200.00     561.94        67    1379.39     568.76    \n",
      "    12     750.00     545.98        26     875.00     528.17        40    1060.01     546.93        54    1225.01     561.79    \n",
      "    13     755.00     545.54        27     895.01     528.18        41    1065.00     547.12        55    1230.00     561.94    \n",
      "    14     760.00     544.61        28     900.01     528.27        42    1070.82     547.20        56    1245.00     569.77    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 177:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2063956.46 353190.59, 2064617.71 352458.99)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     547.93        16     325.00     540.96        31     490.00     529.01        46     650.00     548.04        61     840.00     569.71    \n",
      "     2      75.00     547.50        17     330.00     540.80        32     500.00     528.84        47     652.44     547.95        62     845.01     570.92    \n",
      "     3     145.01     547.76        18     350.38     540.34        33     505.00     528.96        48     695.01     546.41        63     850.01     572.22    \n",
      "     4     180.00     547.70        19     365.01     540.01        34     510.01     529.38        49     700.01     546.47        64     855.01     573.13    \n",
      "     5     190.00     547.75        20     370.01     539.56        35     570.00     530.55        50     745.00     547.26        65     860.00     573.51    \n",
      "     6     200.01     547.96        21     375.00     537.55        36     575.00     531.15        51     750.00     548.00        66     900.01     574.44    \n",
      "     7     230.00     546.68        22     380.01     535.73        37     590.00     533.14        52     760.00     552.96        67     905.00     574.19    \n",
      "     8     250.00     545.23        23     385.01     534.68        38     595.00     533.59        53     765.00     555.13        68     965.00     563.72    \n",
      "     9     265.00     544.63        24     390.00     534.11        39     605.01     532.69        54     780.01     561.53        69     970.00     563.96    \n",
      "    10     275.00     544.31        25     395.00     533.90        40     610.01     532.42        55     785.00     562.10        70     975.00     567.73    \n",
      "    11     280.00     543.99        26     405.00     531.75        41     615.00     532.28        56     805.00     563.60        71     980.00     572.24    \n",
      "    12     290.01     543.19        27     410.00     530.93        42     620.00     533.38        57     810.00     563.77        72     986.15     577.85    \n",
      "    13     295.01     542.83        28     415.00     530.48        43     625.01     534.69        58     815.00     563.30    \n",
      "    14     305.00     542.31        29     440.01     528.92        44     630.00     536.83        59     820.00     564.96    \n",
      "    15     315.00     541.72        30     445.00     528.75        45     645.00     546.73        60     835.00     568.56    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "Cross Section 178:\n",
      "River: Bald Eagle\n",
      "Reach: Loc Hav\n",
      "\n",
      "Geometry:\n",
      "LINESTRING (2064505.16 353331.28, 2065091.38 352777.89)\n",
      "\n",
      "Station-Elevation Points:\n",
      "     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n",
      "     1       0.00     539.78        10     215.00     539.83        19     525.00     536.01        28     645.00     563.85        37     715.00     571.00    \n",
      "     2       5.00     539.74        11     216.13     539.78        20     540.00     539.01        29     655.00     563.37        38     740.00     571.56    \n",
      "     3      40.00     539.28        12     220.00     539.60        21     595.00     541.11        30     660.00     563.42        39     745.00     571.46    \n",
      "     4      70.00     539.07        13     225.00     538.55        22     600.00     543.21        31     670.01     563.91        40     785.00     564.59    \n",
      "     5      95.00     539.10        14     240.00     535.91        23     605.00     545.86        32     675.00     564.88        41     790.00     564.97    \n",
      "     6     105.00     539.20        15     245.00     535.23        24     610.01     548.47        33     680.00     565.94        42     795.00     568.95    \n",
      "     7     180.00     539.48        16     390.00     529.15        25     623.81     555.28        34     685.00     567.49        43     806.16     578.99    \n",
      "     8     185.01     539.54        17     395.00     529.27        26     625.00     555.87        35     690.00     568.15    \n",
      "     9     190.00     539.67        18     520.00     534.98        27     640.00     562.48        36     710.00     570.62    \n",
      "------------------------------------------------------------------------------------------------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "# Print cross sections data\n",
    "\n",
    "print(\"\\nCross Section Information:\")\n",
    "if not cross_sections_gdf.empty:\n",
    "    for idx, row in cross_sections_gdf.iterrows():\n",
    "        print(f\"\\nCross Section {idx + 1}:\")\n",
    "        print(f\"River: {row['River']}\")\n",
    "        print(f\"Reach: {row['Reach']}\")\n",
    "        print(\"\\nGeometry:\")\n",
    "        print(row['geometry'])\n",
    "        print(\"\\nStation-Elevation Points:\")\n",
    "        \n",
    "        # Print header\n",
    "        print(\"     #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation        #      Station   Elevation\")\n",
    "        print(\"-\" * 150)\n",
    "        \n",
    "        # Calculate number of rows needed\n",
    "        points = row['station_elevation']\n",
    "        num_rows = (len(points) + 4) // 5  # Round up division\n",
    "        \n",
    "        # Print points in 5 columns\n",
    "        for i in range(num_rows):\n",
    "            line = \"\"\n",
    "            for j in range(5):\n",
    "                point_idx = i + j * num_rows\n",
    "                if point_idx < len(points):\n",
    "                    station, elevation = points[point_idx]\n",
    "                    line += f\"{point_idx+1:6d} {station:10.2f} {elevation:10.2f}    \"\n",
    "            print(line)\n",
    "        print(\"-\" * 150)\n",
    "else:\n",
    "    print(\"No cross sections found in the geometry file.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:43,722 - ras_commander.HdfXsec - INFO - Calling get_cross_sections\n",
      "2024-11-15 07:59:43,749 - ras_commander.HdfXsec - INFO - Finished get_cross_sections\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot cross sections on map\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Get cross sections data\n",
    "cross_sections_gdf = HdfXsec.get_cross_sections(geom_hdf_path, ras_object=bald_eagle)\n",
    "\n",
    "if not cross_sections_gdf.empty:\n",
    "    # Create figure and axis\n",
    "    fig, ax = plt.subplots(figsize=(15,10))\n",
    "    \n",
    "    # Plot cross sections\n",
    "    cross_sections_gdf.plot(ax=ax, color='red', linewidth=1, label='Cross Sections')\n",
    "    \n",
    "    # Add river name and reach labels\n",
    "    #for idx, row in cross_sections_gdf.iterrows():\n",
    "    #    # Get midpoint of cross section line for label placement\n",
    "    #    midpoint = row.geometry.centroid\n",
    "    #    label = f\"{row['River']}\\n{row['Reach']}\\nRS: {row['RS']}\"\n",
    "    #    ax.annotate(label, (midpoint.x, midpoint.y), \n",
    "    #               xytext=(5, 5), textcoords='offset points',\n",
    "    #               fontsize=8, bbox=dict(facecolor='white', alpha=0.7))\n",
    "    \n",
    "    # Customize plot\n",
    "    ax.set_title('Cross Sections Location Map')\n",
    "    ax.grid(True)\n",
    "    ax.legend()\n",
    "    \n",
    "    # Equal aspect ratio to preserve shape\n",
    "    ax.set_aspect('equal')\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "else:\n",
    "    print(\"No cross sections found in the geometry file.\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x1000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot cross sections with Manning's n values colored by value\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from shapely.geometry import LineString\n",
    "\n",
    "# Create figure\n",
    "fig, ax1 = plt.subplots(figsize=(20,10))\n",
    "\n",
    "# Create colormap\n",
    "cmap = plt.cm.viridis\n",
    "norm = plt.Normalize(vmin=0.02, vmax=0.08)  # Typical Manning's n range\n",
    "\n",
    "# Plot cross sections colored by Manning's n\n",
    "for idx, row in cross_sections_gdf.iterrows():\n",
    "    # Extract Manning's n values and stations\n",
    "    mannings = row['mannings_n']\n",
    "    n_values = mannings['Mann n']\n",
    "    stations = mannings['Station']\n",
    "    \n",
    "    # Get the full linestring coordinates\n",
    "    line_coords = list(row.geometry.coords)\n",
    "    \n",
    "    # Calculate total length of the cross section\n",
    "    total_length = row.geometry.length\n",
    "    \n",
    "    # For each Manning's n segment\n",
    "    for i in range(len(n_values)-1):\n",
    "        # Calculate the start and end proportions along the line\n",
    "        start_prop = stations[i] / stations[-1]\n",
    "        end_prop = stations[i+1] / stations[-1]\n",
    "        \n",
    "        # Get the start and end points for this segment\n",
    "        start_idx = int(start_prop * (len(line_coords)-1))\n",
    "        end_idx = int(end_prop * (len(line_coords)-1))\n",
    "        \n",
    "        # Extract the segment coordinates\n",
    "        segment_coords = line_coords[start_idx:end_idx+1]\n",
    "        \n",
    "        if len(segment_coords) >= 2:\n",
    "            # Create a line segment\n",
    "            segment = LineString(segment_coords)\n",
    "            \n",
    "            # Get color from colormap for this n value\n",
    "            color = cmap(norm(n_values[i]))\n",
    "            \n",
    "            # Plot the segment\n",
    "            ax1.plot(*segment.xy, color=color, linewidth=2)\n",
    "\n",
    "# Add colorbar\n",
    "sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n",
    "sm.set_array([])\n",
    "plt.colorbar(sm, ax=ax1, label=\"Manning's n Value\")\n",
    "\n",
    "ax1.set_title(\"Cross Sections Colored by Manning's n Values\")\n",
    "ax1.grid(True)\n",
    "ax1.set_aspect('equal')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:44,811 - ras_commander.HdfXsec - INFO - Calling get_cross_sections\n",
      "2024-11-15 07:59:44,828 - ras_commander.HdfXsec - INFO - Finished get_cross_sections\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot cross sections with ineffective flow areas\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Get cross sections data\n",
    "cross_sections_gdf = HdfXsec.get_cross_sections(geom_hdf_path, ras_object=bald_eagle)\n",
    "\n",
    "# Create figure\n",
    "fig, ax2 = plt.subplots(figsize=(20,10))\n",
    "\n",
    "# Plot all cross sections first\n",
    "cross_sections_gdf.plot(ax=ax2, color='lightgray', linewidth=1, label='Cross Sections')\n",
    "\n",
    "# Plot ineffective flow areas with thicker lines\n",
    "ineffective_sections = cross_sections_gdf[cross_sections_gdf['ineffective_blocks'].apply(lambda x: len(x) > 0)]\n",
    "ineffective_sections.plot(ax=ax2, color='red', linewidth=3, label='Ineffective Flow Areas')\n",
    "\n",
    "# Add ineffective flow area labels with offset to lower right\n",
    "for idx, row in cross_sections_gdf.iterrows():\n",
    "    # Get midpoint of cross section line\n",
    "    midpoint = row.geometry.centroid\n",
    "    \n",
    "    # Extract ineffective flow blocks\n",
    "    ineff_blocks = row['ineffective_blocks']\n",
    "    \n",
    "    if ineff_blocks:  # Only label if there are ineffective blocks\n",
    "        label_parts = []\n",
    "        # Add RS to first line of label\n",
    "        label_parts.append(f\"RS: {row['RS']}\")\n",
    "        for block in ineff_blocks:\n",
    "            label_parts.append(\n",
    "                f\"L:{block['Left Sta']:.0f}-R:{block['Right Sta']:.0f}\\n\"\n",
    "                f\"Elev: {block['Elevation']:.2f}\\n\"\n",
    "                f\"Permanent: {block['Permanent']}\"\n",
    "            )\n",
    "        \n",
    "        label = '\\n'.join(label_parts)\n",
    "        \n",
    "        ax2.annotate(label, (midpoint.x, midpoint.y),\n",
    "                    xytext=(15, -15),  # Offset to lower right\n",
    "                    textcoords='offset points',\n",
    "                    fontsize=8, \n",
    "                    bbox=dict(facecolor='white', alpha=0.7),\n",
    "                    arrowprops=dict(arrowstyle='->'),\n",
    "                    horizontalalignment='left',\n",
    "                    verticalalignment='top')\n",
    "\n",
    "ax2.set_title('Cross Sections with Ineffective Flow Areas')\n",
    "ax2.grid(True)\n",
    "ax2.legend()\n",
    "ax2.set_aspect('equal')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:46,206 - ras_commander.HdfXsec - INFO - Calling get_cross_sections\n",
      "2024-11-15 07:59:46,232 - ras_commander.HdfXsec - INFO - Finished get_cross_sections\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot cross section elevation for cross section 42\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# Get cross sections data\n",
    "cross_sections_gdf = HdfXsec.get_cross_sections(geom_hdf_path, ras_object=bald_eagle)\n",
    "\n",
    "if not cross_sections_gdf.empty:\n",
    "    # Get station-elevation data for cross section 42\n",
    "    station_elevation = cross_sections_gdf.iloc[42]['station_elevation']\n",
    "    \n",
    "    # Convert list of lists to numpy arrays for plotting\n",
    "    stations = np.array([point[0] for point in station_elevation])\n",
    "    elevations = np.array([point[1] for point in station_elevation])\n",
    "    \n",
    "    # Create figure and axis\n",
    "    fig, ax = plt.subplots(figsize=(12,8))\n",
    "    \n",
    "    # Plot cross section\n",
    "    ax.plot(stations, elevations, 'b-', linewidth=2)\n",
    "    \n",
    "    # Add labels and title\n",
    "    river = cross_sections_gdf.iloc[42]['River']\n",
    "    reach = cross_sections_gdf.iloc[42]['Reach'] \n",
    "    rs = cross_sections_gdf.iloc[42]['RS']\n",
    "    \n",
    "    # Show bank stations as dots\n",
    "    left_bank_station = cross_sections_gdf.iloc[42]['Left Bank']\n",
    "    right_bank_station = cross_sections_gdf.iloc[42]['Right Bank']\n",
    "    \n",
    "    # Interpolating bank stations for plotting\n",
    "    ax.plot(left_bank_station, elevations[np.searchsorted(stations, left_bank_station)], 'ro', label='Left Bank Station')\n",
    "    ax.plot(right_bank_station, elevations[np.searchsorted(stations, right_bank_station)], 'ro', label='Right Bank Station')\n",
    "    \n",
    "    ax.set_title(f'Cross Section Profile\\nRiver: {river}, Reach: {reach}, RS: {rs}\\n'\n",
    "                 f'Left Bank Station: {left_bank_station}, Right Bank Station: {right_bank_station}')\n",
    "    ax.set_xlabel('Station (ft)')\n",
    "    ax.set_ylabel('Elevation (ft)')\n",
    "    \n",
    "    # Add grid and legend\n",
    "    ax.grid(True)\n",
    "    ax.legend()\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "else:\n",
    "    print(\"No cross sections found in the geometry file.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:46,518 - ras_commander.HdfXsec - INFO - Calling get_river_centerlines\n",
      "2024-11-15 07:59:46,520 - ras_commander.HdfXsec - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
      "2024-11-15 07:59:46,523 - ras_commander.HdfBase - INFO - Calling get_polylines_from_parts\n",
      "2024-11-15 07:59:46,524 - ras_commander.HdfBase - INFO - Using existing HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
      "2024-11-15 07:59:46,527 - ras_commander.HdfBase - INFO - Finished get_polylines_from_parts\n",
      "2024-11-15 07:59:46,528 - ras_commander.HdfBase - INFO - Using existing HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
      "2024-11-15 07:59:46,533 - ras_commander.HdfXsec - INFO - Extracted 1 river centerlines\n",
      "2024-11-15 07:59:46,534 - ras_commander.HdfXsec - INFO - Finished get_river_centerlines\n",
      "2024-11-15 07:59:46,535 - ras_commander.HdfXsec - INFO - Calling get_river_stationing\n",
      "2024-11-15 07:59:46,541 - ras_commander.HdfXsec - ERROR - Error calculating river stationing: 'upstream_type'\n",
      "2024-11-15 07:59:46,542 - ras_commander.HdfXsec - INFO - Finished get_river_stationing\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "River Centerlines:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>River Name</th>\n",
       "      <th>Reach Name</th>\n",
       "      <th>US Type</th>\n",
       "      <th>US Name</th>\n",
       "      <th>DS Type</th>\n",
       "      <th>DS Name</th>\n",
       "      <th>Junction to US XS</th>\n",
       "      <th>DS XS to Junction</th>\n",
       "      <th>geometry</th>\n",
       "      <th>length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>External</td>\n",
       "      <td></td>\n",
       "      <td>External</td>\n",
       "      <td></td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>LINESTRING (1967609.38 288126.34, 1967754.63 2...</td>\n",
       "      <td>140451.729879</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   River Name Reach Name   US Type US Name   DS Type DS Name  \\\n",
       "0  Bald Eagle    Loc Hav  External          External           \n",
       "\n",
       "   Junction to US XS  DS XS to Junction  \\\n",
       "0                NaN                NaN   \n",
       "\n",
       "                                            geometry         length  \n",
       "0  LINESTRING (1967609.38 288126.34, 1967754.63 2...  140451.729879  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Example usage:\n",
    "centerlines = HdfXsec.get_river_centerlines(geom_hdf_path)\n",
    "centerlines_with_stations = HdfXsec.get_river_stationing(centerlines)\n",
    "\n",
    "# Display results\n",
    "print(\"\\nRiver Centerlines:\")\n",
    "display(centerlines.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot river centerlines with labels\n",
    "import matplotlib.pyplot as plt\n",
    "import geopandas as gpd\n",
    "\n",
    "# Create figure and axis\n",
    "fig, ax = plt.subplots(figsize=(15, 10))\n",
    "\n",
    "# Plot centerlines\n",
    "centerlines.plot(ax=ax, color='blue', linewidth=2, label='River Centerline')\n",
    "\n",
    "# Add river/reach labels\n",
    "for idx, row in centerlines.iterrows():\n",
    "    # Get midpoint of the line for label placement\n",
    "    midpoint = row.geometry.interpolate(0.5, normalized=True)\n",
    "    \n",
    "    # Create label text combining river and reach names\n",
    "    label = f\"{row['River Name']}\\n{row['Reach Name']}\"\n",
    "    \n",
    "    # Add text annotation\n",
    "    ax.annotate(label, \n",
    "                xy=(midpoint.x, midpoint.y),\n",
    "                xytext=(10, 10), # Offset text slightly\n",
    "                textcoords='offset points',\n",
    "                fontsize=10,\n",
    "                bbox=dict(facecolor='white', edgecolor='none', alpha=0.7))\n",
    "\n",
    "# Add labels and title\n",
    "ax.set_title('River Centerlines', fontsize=14)\n",
    "ax.set_xlabel('Easting', fontsize=12)\n",
    "ax.set_ylabel('Northing', fontsize=12)\n",
    "\n",
    "# Add legend\n",
    "ax.legend(fontsize=12)\n",
    "\n",
    "# Add grid\n",
    "ax.grid(True)\n",
    "\n",
    "# Adjust layout\n",
    "plt.tight_layout()\n",
    "\n",
    "# Show plot\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:46,884 - ras_commander.HdfXsec - INFO - Calling get_river_edge_lines\n",
      "2024-11-15 07:59:46,885 - ras_commander.HdfXsec - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
      "2024-11-15 07:59:46,887 - ras_commander.HdfBase - INFO - Calling get_polylines_from_parts\n",
      "2024-11-15 07:59:46,888 - ras_commander.HdfBase - INFO - Using existing HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
      "2024-11-15 07:59:46,891 - ras_commander.HdfBase - INFO - Finished get_polylines_from_parts\n",
      "2024-11-15 07:59:46,892 - ras_commander.HdfBase - INFO - Using existing HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
      "2024-11-15 07:59:46,896 - ras_commander.HdfXsec - INFO - Finished get_river_edge_lines\n",
      "2024-11-15 07:59:46,897 - ras_commander.HdfXsec - INFO - Calling get_river_centerlines\n",
      "2024-11-15 07:59:46,898 - ras_commander.HdfXsec - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
      "2024-11-15 07:59:46,900 - ras_commander.HdfBase - INFO - Calling get_polylines_from_parts\n",
      "2024-11-15 07:59:46,901 - ras_commander.HdfBase - INFO - Using existing HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
      "2024-11-15 07:59:46,903 - ras_commander.HdfBase - INFO - Finished get_polylines_from_parts\n",
      "2024-11-15 07:59:46,904 - ras_commander.HdfBase - INFO - Using existing HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
      "2024-11-15 07:59:46,910 - ras_commander.HdfXsec - INFO - Extracted 1 river centerlines\n",
      "2024-11-15 07:59:46,911 - ras_commander.HdfXsec - INFO - Finished get_river_centerlines\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "River Edge Lines:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>edge_id</th>\n",
       "      <th>bank_side</th>\n",
       "      <th>geometry</th>\n",
       "      <th>length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>LINESTRING (1968668.17 290166.79, 1968673.632 ...</td>\n",
       "      <td>141615.154108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>LINESTRING (1969067.87 289778.85, 1969194.669 ...</td>\n",
       "      <td>130396.337697</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   edge_id  bank_side                                           geometry  \\\n",
       "0      NaN        NaN  LINESTRING (1968668.17 290166.79, 1968673.632 ...   \n",
       "1      NaN        NaN  LINESTRING (1969067.87 289778.85, 1969194.669 ...   \n",
       "\n",
       "          length  \n",
       "0  141615.154108  \n",
       "1  130396.337697  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Example usage:\n",
    "edge_lines = HdfXsec.get_river_edge_lines(geom_hdf_path)\n",
    "centerlines = HdfXsec.get_river_centerlines(geom_hdf_path)\n",
    "# Display results\n",
    "print(\"\\nRiver Edge Lines:\")\n",
    "display(edge_lines.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:46,927 - ras_commander.HdfXsec - INFO - Calling get_river_bank_lines\n",
      "2024-11-15 07:59:46,928 - ras_commander.HdfXsec - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
      "2024-11-15 07:59:46,930 - ras_commander.HdfBase - INFO - Calling get_polylines_from_parts\n",
      "2024-11-15 07:59:46,931 - ras_commander.HdfBase - INFO - Using existing HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
      "2024-11-15 07:59:46,934 - ras_commander.HdfBase - INFO - Finished get_polylines_from_parts\n",
      "2024-11-15 07:59:46,935 - ras_commander.HdfBase - INFO - Using existing HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
      "2024-11-15 07:59:46,939 - ras_commander.HdfXsec - INFO - Finished get_river_bank_lines\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "River Bank Lines:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bank_id</th>\n",
       "      <th>bank_side</th>\n",
       "      <th>geometry</th>\n",
       "      <th>length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Left</td>\n",
       "      <td>LINESTRING (1968804.51 290034.461, 1968930.093...</td>\n",
       "      <td>139546.829503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Right</td>\n",
       "      <td>LINESTRING (1968937.263 289905.614, 1969101.06...</td>\n",
       "      <td>139349.187666</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   bank_id bank_side                                           geometry  \\\n",
       "0        0      Left  LINESTRING (1968804.51 290034.461, 1968930.093...   \n",
       "1        1     Right  LINESTRING (1968937.263 289905.614, 1969101.06...   \n",
       "\n",
       "          length  \n",
       "0  139546.829503  \n",
       "1  139349.187666  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Example usage:\n",
    "bank_lines = HdfXsec.get_river_bank_lines(geom_hdf_path)\n",
    "# Display results\n",
    "print(\"\\nRiver Bank Lines:\")\n",
    "display(bank_lines.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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gQMH4unpycGDB1m6dClr16497f05m6VLl7Jnzx6uvfZa2rVrd8a6np6eLvvncu8XLlzIN998Q/fu3bn22mtZsWIFM2fOZPfu3c5gYMOGDXn44Yd5/fXXufLKK10+vwWpZkp7/wpMmDCBpUuXctNNN9GxY0dsNlsp71jpxnJq3T59+mC1WrnpppuIjo5m69atTJ48me+//541a9YQHBx8zn157733+Oqrr2jdujVdu3YlMzOTZcuWMXLkSNauXcsXX3xR5Jy8vDw6duzIyZMn6dWrF5mZmXz22Wf06dOHRYsW0bFjR2fdI0eO0Lx5c+Lj4+nUqRNXX30127Zto0OHDlx33XXn3O9/Wrx4MQBXX321S/m8efN4//33ue6662jbti0Oh4Nff/2Vl156ieXLl7NixQrc3d2LtFfS57E4K1eupHv37vj6+vLzzz9Tr169Mhvn2TzxxBMsX76cbt260alTJ+bPn8+YMWPIzc3lhRdecKlbmudw5MiRvPzyy1SrVo3bb78df39/4uPjWblyJT/++ONlve6AiIhIuTJERERELiF79+41AKNTp05Fjr344osGYNxwww1FjvXv398AjL179zrLRo0aZQDG7Nmzi9Rv1KiR4eHhYSQlJTnLbr/9dgMw3nvvPZe6x44dM6Kjo42KFSsaWVlZzvI2bdoYgNGwYUOXds5m6dKlBmA0atTIGD16dLHb6tWrnfV37txpuLm5GVFRUcaxY8ec5SkpKUatWrUMwGjTpo3LNVq2bGkAxieffOJS/vTTTxtAkXu1ePFi531PT093ljscDmPo0KEGYHz++eclGh9g1KpV66z1Ct7r/v37u5QX3NemTZsaKSkpzvLt27cbbm5uRdp+9913DcAYOHCgkZub6yzPyckxunfvbgDGunXrDMMwjOTkZMNisRiNGjUy8vPzXdrJz883Tp48WaIxFmfMmDEGYIwaNapU55X23k+fPt0ADDc3N2PlypUu/W/btq0BuHx+TnefC5Tm/hmGYYwePdoADF9fX+PPP/8s0l7B53v06NEu5QXv66lKO5bjx48bAQEBRlRUlLFv3z6Xtj799FMDMIYNG1bsOEtq//79RT4bDofDuPvuuw3ApZ+GYRgxMTEGYNx0001GTk6Os/zHH38s9rus4Lvq+eefdyl/5513nM/m0qVLS9TXmJgYw2azuXx3PProo0aLFi0Mq9Vq9O3b16VPhmEYhw4dKlJmGIYxduxYAzA+/vhjl/LSPo8Fn4+CMSxYsMDw9vY2atWqZezfv79E4yoYm6enZ4nqFvcdWHCf4+LijMOHDzvLExMTjaCgIMPf39/lPpT2OQwJCTEiIyONjIyMIv0pzX8PRERExJWC1SIiInJJKQisVatWzRl8GT58uHHdddcZgFGpUiVj69atRc4rLli9Y8cOAzC6d+/uUnfr1q0GYPTo0cNZlpiYaNhsNuP6668vtl9vvPGGARhfffWVs6wgiLNgwYJSjbEgmHem7bXXXnPWLwgivfLKK0Xa+uijj4oEavbt22cAxpVXXlmkfnp6uhEcHFzkXt14440GUGwwqSDA26tXrxKNr6yC1UuWLClyTsGx1NRUZ1mDBg0MX19fIzMzs0j9P//80wCMxx9/3DAMM8APGC1atDAcDkeJxlNSBQGtt99+u1TnlfbeFwR477rrriL1C4698cYbzrKzBatLc/8MozAY+eijjxbb3rkEq0s6lldffdUAjJkzZxZ77auvvtoIDQ0t9tj5+v333w3AGDNmjEt5QbB6z549Rc6JiYkxQkJCnPs5OTmGl5eXERYW5vLDl2EYht1uN2rUqFHqYPXpvkPq169vzJs3r8TjS0pKMgBjwIABLuWlfR5PDVZPmzbNsNlsRpMmTYzExMQS96VgbGURrP7ggw+K1C84duqPLaV9DkNCQozY2FgjOzu7hCMSERGRklAaEBEREbkk7d69m7Fjx7qUhYeH8/PPP1O9evUStVGzZk2aNGnCokWLOH78OKGhoQB8/PHHAC4pQNauXYvdbicnJ6fYnNM7d+4EYPv27XTr1s3lWJMmTUo8rlMNGTKEt99++6z1CvIot2rVqsix4soK6v8zHzeAr68vDRs2ZOnSpS7lv/76K76+vsXmKAbw9vZm+/btZ+1rWWrUqFGRssqVKwOQnJyMv78/mZmZbNq0icjISF566aUi9QtyDBf0PSAggK5du/Ltt99y9dVXc8stt9C2bVuuueaaYlMfXAzneu/Pdn9KorT371Tn+rkvTknH8uuvvwKwZs0adu/eXeSc7Oxsjh8/7vK8l1Zubi6TJ0/ms88+Y/v27aSnp2MYhvP44cOHi5xzuvQ/lStXZvXq1c79HTt2kJ2dzfXXX18kNZHVaqVFixbO75qS8vT0dMldn56ezpYtWxg5ciQ9e/bkjTfe4MEHH3QeNwyD6dOnM2PGDDZv3kxKSopL/ubixgclex5P9dprr7Fw4UI6derEF198ga+vb6nGVVZK89kqzXN46623MnXqVOrVq8ett97KddddR/PmzfH29i7bAYiIiPzHKFgtIiIil6ROnTqxaNEiABITE/nwww8ZMWIEN954I7/99ht+fn4laqdfv3789ttvzJ49mwceeADDMPjkk08IDg7mhhtucNY7ceIEAL/88gu//PLLadvLyMgoUlapUqXSDK3UUlJSAAgLCyvRtVNTU09b/3TnnDhxgvz8/CI/EJyquLFfSAEBAUXKCvKVFyx2dvLkSQzDID4+vsR9nzt3Li+++CKzZs3i//7v/5zXGjhwIC+++CI+Pj7n1N/w8HAA4uPjS3Xeud77ktyfszmX+1egLD/3JR1LwXM6ZcqUM7aXkZFxzsHq3r1789VXX1GzZk369u1LWFgY7u7uJCcn8/rrr5OTk1PknMDAwGLbcnNzcwkEn+lZhrK5p35+fjRt2pR58+ZRuXJlRo0axaBBg5yf64ceeojJkycTHR3NjTfeSEREhDOH+tixY4sdH5T+8/bzzz8D5nd5eQWqoXSfrdI8h6+//jpxcXFMnz6d559/nueffx4vLy/69OnDK6+8cs6fPxERkf86a3l3QERERORsKlasyPDhw/nf//7Htm3bGDVqVInPvfXWW3F3d3fOpl6xYgX79++nT58+LovcFQQ0Hn/8cQwzVVqx2+jRo4tcw2KxnOcIz6wgEJaQkFDk2LFjx4qUFYyluPpnOqdChQpnHPvevXvPZxgXRMFYGzVqdMa+nzqT3MfHh+eff549e/awZ88e3n//fWrVqsXrr7/Oo48+es59KZjJ/tNPP5V6DOV178/l/hW40J/74hT0d9OmTWfsb0xMzDm1v3btWr766is6derE1q1bee+993jhhRcYM2YMt95663n3/0zPMhT/bJ6roKAgatWqRWpqKn/99ZfzulOmTKFBgwZs376dGTNmMG7cOMaMGcPQoUPL7NoA77//Po0aNeKxxx7jjTfeKNO2L4TSPodubm4MHz6cLVu2EB8fz6xZs2jVqhUzZ87kjjvuKMeRiIiIXN4UrBYREZHLxv/+9z8iIyOZOnUq+/btK9E5oaGhdO7cmV9//ZVdu3Y5g9Z33nmnS71rrrkGi8Xi8k/2LxVXXnklUDhT8VTFlRXUX7VqVZFjmZmZzjQhp2ratClJSUmlTkFQ3vz9/bniiivYtm1biVNfnCouLo67776b5cuX4+fnx8KFC8+5L9dddx1Vq1Zl1apVxQZ3T3Xq7NULfe9tNhtQ/OzX871/F1vTpk0BLthzWpBa5IYbbnDetwLFPWulVbNmTby8vFi3bp1L6g4Ah8NR7DN7Pk6ePOlsG2DPnj0YhkH79u2L/AuCshjfqYKDg/nxxx9p3LgxDz/8MK+//nqZtl/Wzuc5jIyM5LbbbmPRokVUr16dH3/8kaysrAvQSxERkX8/BatFRETksuHt7c2IESPIy8vjueeeK/F5Bbmpp02bxty5c4mLiyuSzzk8PJw+ffqwatUqJkyY4JKjtsCaNWvIzMw8v0Gcg9tvvx2bzcarr77qMiMzNTWV559/vkj9mJgYWrRowcaNG5k9e7bLsQkTJjhTKZzqoYceAuDuu+8mKSmpyPGjR4+ybdu28x3KBfHQQw+RmZnJ4MGDi01XsXfvXuePG4mJiWzevLlInZMnT5KTk1Mkj3BsbCwWi6VEP47YbDamTJmC1WqlT58+LFmypNh6X331Fb1793bpP1y4ex8cHIzFYuHgwYPFHi/N/StvAwcOxN/fn//7v/9jy5YtRY5nZmY681oXGDBgABaLhRkzZpy1/YIZ2StXrnQp37JlC+PGjTv3jv/N09OTPn36kJCQwCuvvOJybNq0ac4Z0GXhyy+/ZO/evQQHB1OvXj2gcHyrVq1ySU9y6NAhRo4cWWbXLhAUFMQPP/zANddcwyOPPMKkSZPK/BplpTTPYU5OTrE/LGRkZJCeno67uztWq/6vtoiIyLlQzmoRERG5rNx777289NJLzJw5k//9739Uq1btrOd0796dwMBAXn31VfLy8njooYeKTWEwdepUduzYwZNPPslHH31E8+bNCQoK4uDBg6xbt46dO3dy5MiRc85p/E/r1q0rdjFHAC8vL5566ikAqlevzjPPPMPo0aNp0KABffr0wc3NjS+++IIGDRqwY8eOIue/+eabtG7dmjvuuIMvvviC6tWrs379en799Vdat27NihUrXIIpnTt35umnn+a5556jevXqdO7cmZiYGJKSkti1axc///wzzz//PFdccUWJxnbkyBEGDBhQ7LHQ0FAmTpxYonZKYsiQIfz66698+OGH/PLLL7Rv357IyEiOHTvG9u3bWbNmDbNmzSI2Npb4+HiuuuoqrrzySho0aEBUVBRJSUksWLCAvLw8hg8f7tJ2QUCvIMft2XTu3JmPPvqIe+65h3bt2tG4cWOaN2+Ov78/x44dY9myZezevZv27du7nFOW9/6f/Pz8uOaaa1ixYgX9+vWjRo0aWK1W+vXrR0xMTKnuX3mrWLEin376KbfccgtXXnklnTt3pnbt2uTk5LBv3z6WL1/Otdde68x3D6V7D5s0aUKTJk2YM2cOR44coVmzZhw4cICFCxdyww038Pnnn5/3GMaPH89PP/3EqFGjWLlyJVdddRXbtm3j22+/pWPHjixevLhU7eXn57t8j2RkZLBlyxYWLVqExWLhzTffxMPDA4CIiAh69erFF198QePGjWnXrh3Hjh3j66+/pl27dsUuWnm+CgLWnTp14tFHH8UwjBKn28nLyzvt9whQoh8gSqo0z2FWVhYtWrSgZs2aNGrUiCpVqpCens7XX3/N0aNHGT58uEuaKRERESkFQ0REROQSsnfvXgMwOnXqdNo6b775pgEY/fr1c5b179/fAIy9e/cWe84999xjAAZg7Nix47RtZ2ZmGi+//LLRqFEjw9fX1/D29jbi4uKMHj16GDNnzjTy8vKcddu0aWOcy/+cWrp0qbMvp9sCAwOLnPfee+8ZderUMTw8PIzKlSsbw4cPNzIzMw3AaNOmTZH6GzZsMDp16mT4+fkZ/v7+RpcuXYxNmzYZ3bp1MwDj5MmTRc754YcfjO7duxsVK1Y03N3djfDwcKN58+bGc889Zxw4cKBE4zvb2GJiYgzDKHyv+/fv73L+me7rmd7n2bNnG+3btzeCg4MNd3d3Iyoqymjbtq3xyiuvGImJiYZhGMbJkyeNMWPGGK1btzYiIiIMDw8PIzIy0ujcubPx3XffubR38uRJw2q1Gi1atCjRuE916NAhY8SIEcZVV11lBAQEGG5ubkalSpWMzp07G9OnTzdyc3OLnFPSez99+nQDMKZPn16kjYLP1ujRo13Kd+zYYXTt2tUICgoyLBaLARhLly4t9f0zDMMYPXp0seefrQ/Fva/nMhbDMIzt27cbgwYNMmJiYgwPDw8jODjYqF+/vvHQQw8Zv/32m0vdq666yvD39zdOnDhRbH//KSEhwbj77ruNyMhIw8vLy6hfv74xZcoUY8+ePcV+XmNiYpyf6X863Wd5//79Rt++fY2goCDDx8fHaNWqlbF8+fKz3tt/iomJKfJ8ubm5GREREUavXr2MX375pcg5aWlpxuOPP27ExsYanp6eRo0aNYznnnvOyM3NLfa7pLTP4+nGkJKSYjRv3twAjIkTJ57T2P65FSiu32f6rjjTfS7Jc5ibm2u89NJLRseOHY3KlSsbHh4eRqVKlYzWrVsbs2bNMhwOx1nHJyIiIsWzGEYx/8ZVRERERP6V7HY71apVIysrq0wXc/s3+vrrr+nevTvffPMNXbt2Le/uyDlITU0lODiYxx9/nJdffrm8uyMiIiIiZ6FEWiIiIiL/Qvn5+Rw/frxI+fjx49m/fz89evS4+J26zPz88880bNhQgerL2C+//IK7uzuPPfZYeXdFREREREpAM6tFRERE/oWSk5OpVKkSHTp0oGbNmuTl5bFmzRrWrl1LREQEv//+OxEREeXdTREREREREScFq0VERET+hXJzc3nkkUdYsmQJhw8fJjs7m4iICLp06cLTTz9NVFRUeXdRRERERETEhYLVIiIiIiIiIiIiIlLulLNaRERERERERERERMqdW3l34L/M4XBw+PBh/P39sVgs5d0dERERERERERERkTJlGAZpaWlERkZitZ557rSC1eXo8OHDREdHl3c3RERERERERERERC6ogwcPUrly5TPWUbC6HPn7+wPmGxUQEFDOvRH5d8nLy2Px4sV07NgRd3f38u6OiFwAes5F/hv0rIv8++k5F/lv0LP+35Wamkp0dLQzFnomClaXo4LUHwEBAQpWi5SxvLw8fHx8CAgI0H8ERf6l9JyL/DfoWRf599NzLvLfoGddSpIGWQssioiIiIiIiIiIiEi5U7BaRERERERERERERMqdgtUiIiIiIiIiIiIiUu4UrBYRERERERERERGRcqdgtYiIiIiIiIiIiIiUO7fy7oCIiIiIiIiIiMjlxG63k5eXV97duKzk5eXh5uZGdnY2dru9vLsjZcTd3R2bzVZm7SlYLSIiIiIiIiIiUgKGYXD06FGSk5PLuyuXHcMwCA8P5+DBg1gslvLujpShoKAgwsPDy+R9VbBaRERERERERESkBAoC1WFhYfj4+CjoWgoOh4P09HT8/PywWpWZ+N/AMAwyMzNJSEgAICIi4rzbVLBaRERERERERETkLOx2uzNQXaFChfLu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eTLp6emEh4fTtGlThgwZApjvzf3338/ixYuZN28eDoeD6tWrM3XqVO67777zun5pWIyCbNty0aWmphIYGEhKSgoB55sBX0Rc5OXl8e2339K1a1fc3d3LuzsicgHoORf5b9CzLvLvp+dcLhfZ2dns3buXuLg4l0CllIzD4SA1NZWAgACs1ss3M/H8+fO5+eabWblyJS1atCjv7lwSzvZslCYGevl+MkREREREREREREQukKysLJd9u93Om2++SUBAAFdffXU59erfTWlARERERERERERERP7hwQcfJCsri+bNm5OTk8O8efNYtWoVL774It7e3uXdvX8lBatFRERERERERERE/uH666/nlVde4euvvyY7O5vq1avz5ptvMmzYsPLu2r+WgtUiIiIiIiIiIiIi/3D77bdz++23l3c3/lOUs1pEREREREREREREyp2C1SIiIiIiIiIiIiJS7hSsFhEREREREREREZFyp2C1iIiIiIiIiIiIiJQ7BatFREREREREREREpNwpWC0iIiIiIiIiIiJyoaWlweHD5d2LS5pbeXdARERERERERERE5HJiGJCXB5mZ5maxQETEGU5ITIQDB8wT3d2hYsWL1tfLiYLVIiIiIiIiIiIiImdhGGZg+sQJc8vLKzzm7n6aYLVhQHw8HD1aWJacDKGhZoRbXCgNiIiIiIiIiIiIiJRY27Ztadu2bXl344LJyYHjx+HgQdi5E7Ztg02bYONG8/WxY66BaoC8PIPj6SdJyU45tRB273YNVIeFQfXqpQ5UWywWxowZ49yfMWMGFouFffv2lXp8lzIFq0VERERERERERP7DCgKfBZubmxtRUVEMGDCA+Pj48u5eidntdqZPn07btm0JCQnB09OT2NhYBg4cyLp16854bn4+HDkCW7aYgel9+8ygdEoKZGSYAWy7vbC+xQIBARAeDhGxaSxZO5EXX3mOAykHcBgOs5LVak7FLlClirlpRvVpKQ2IiIiIiIiIiIiI8OyzzxIXF0d2dja//vorM2bMYOXKlWzevBkvLy9nvcWLF5djL4uXlZVFz549WbRoEa1bt+Z///sfISEh7Nu3jzlz5vDhhx9y4MABKleu7HJedjYkJJgzqR2O07fv5gY2G3h6QnCwueUamRxKPURqTipffbGQ3Tt2c/vg20nOTibEO8Q8ISrKnKIdGwtBQWU23n79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ZZKVl0WOPYd8Rz6GYQBmegowFxcsUFBmtVixWqzONBrtOrTj2mbXAnDPPfcQGhrKSy+9xMKFC+nTp4/zfA8Pj/Ma+7nIz8/H4XDg4eGB3WHnUOohEjML039YsBAREUHTrk0LT+pWGW8jjo8/nsihQzu59toaVKx4acymLi33sp5Of4lSzmoREREREREREZGLxG6HI0dg2zbXQHVAAMTFwZVXQp06Zh7qgIDiA6v5jnyOph9lS8IW/jj2B7tO7OJw2mFOZp8kMy+TXHsueY488hx55NpzybXnkmPPcW7Z+dlk52eTmZdJem466bnpAOw6uYstCVs4nHaYrLwsWrVqBcDu3btdrn9qzupjx47h5ubG2LFji/Rzx44dWCwWJk+e7CxLTk7mkUceITo6Gk9PT6pXr85LL73kMmt43759WCwWJk6cyKRJk6hWrRqenp5s2bKF5OxktiRucQlU++KBxWIhOz+78OJpEZAeToUK4QDUru1GWJh5P//8808GDBhA1apV8fLyIjw8nLvvvpukpCSX/o8ZMwaLxcKuXbsYMGAAQUFBBAYGMnDgQDKL+5XhH55//nmsVitvvvnmWeuezT9zVp96j959913nPbrmmmtYu3ZtkfO3b99O7969CQkJwcvLi8aNG7Nw4UKXOnl5eYwdO5YaNWrg5eVFhQoVaNmyJT/88MN597+kNLNaRERERERERETkAsvOhhMnIDHRXECxgJcXxMSYM6jPJt+RT0JGAsfSj2E37MXWsRhgc5gzVI1Tyg03mzPybRiGueFwqQOQlZ9FVloWh9MOs3rTagACAwNP26dKlSrRpk0b5syZw+jRo12OzZ49G5vNxi233AJAZmYmXbp0IT4+niFDhlClShVWrVrFyJEjOXLkCJMmTXI5f/r06WRnZ3PvvfdidbOSak1l14ldzuNWAypkQrJXLg7DQX5+PsknkiEtnJwTDnbs+IrPPnuV1q1bU7t2nPO8H374gT179jBw4EDCw8PZsmUL7777Llu2bOHXX391zjwv0KdPH+Li4hg3bhzr169n2rRphIWF8dJLL532vowaNYoXX3yRd955h8GDB5+23vmaNWsWaWlpDBkyBIvFwssvv0zPnj3Zs2ePczb2li1baNGiBVFRUTz11FP4+voyZ84cevTowRdffMHNN98MmMH5cePGcc8999CkSRNSU1NZt24d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5zGvv/46FStWJCkpifLlyzNgwIA9xrz00kuUL1+epKQkSpcuzd1338327duz4A4k7cvTTz9N9erVyZs3L8WKFePyyy9n3rx5+zxuyJAhVKhQgcTERCpXrszo0aMz7A+FQnTv3p3jjjuOpKQk6tevz++//55VtyFpH7LiWU9NTeX++++ncuXK5M6dm5IlS9K2bVuWL1+elbci6R9k1d/pu7vtttuIioripZdeysSZS9pfWfmc//rrrzRt2pT8+fOTO3duqlevztKlS7PiNpRDGVZLyvG2bNnCGWecweuvv75f49988026du3Ko48+ypw5c3jsscfo0KEDI0aMCI8ZOHAgDzzwAI888gi//vorffv25cMPP+TBBx/MqtuQ9C+++OILOnTowLfffsuECRNITU2lQYMGbNmy5R+P+eabb7j66qtp3749P/30E5dffjmXX345s2fPDo959tlneeWVV+jVqxffffcduXPnpmHDhn5jSsomWfGsb926lR9//JFu3brx448/8vHHHzNv3jyaNm16uG5L0m6y6u/0XYYNG8a3335LyZIls/I2JP2LrHrOFyxYwLnnnkuFChWYPHkyM2fOpFu3biQmJh6O21IOERUKhULZPQlJ2l9RUVEMGzaMyy+//B/H1KlTh3POOYfnnnsu3HfPPffw3Xff8fXXXwPQsWNHfv31VyZOnPiPYyRlnzVr1lCsWDG++OILzj///L2Oad26NVu2bGHkyJHhvlq1anHmmWfSq1cvQqEQJUuW5J577uE///kPABs2bKB48eL079+fq6666rDci6R/lhnP+t58//331KhRgyVLllCmTJksmbuk/ZOZz/myZcuoWbMm48aNo3HjxnTu3JnOnTtn9S1I2ofMes6vuuoq4uLiePfddw/LvJUzubJa0lEnJSVlj++8JiUlMW3aNFJTU4Eg0J4+fTrTpk0DYOHChYwePZpLL730sM9X0p42bNgAQKFChf5xzNSpU6lfv36GvoYNGzJ16lQAFi1axMqVKzOMyZ8/PzVr1gyPkZS9MuNZ/6fzRkVFUaBAgUyZp6SDl1nPeXp6Otdddx333nsvp512WtZMVtJByYznPD09nVGjRnHqqafSsGFDihUrRs2aNferDKiOLobVko46DRs2pE+fPkyfPp1QKMQPP/xAnz59SE1NZe3atQBcc8019OjRg3PPPZe4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",
      "text/plain": [
       "<Figure size 1500x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create figure and axis\n",
    "fig, ax = plt.subplots(figsize=(15, 10))\n",
    "\n",
    "# Plot river edge lines\n",
    "edge_lines.plot(ax=ax, color='blue', linewidth=2, label='River Edge Lines')\n",
    "\n",
    "# Plot centerlines for reference\n",
    "centerlines.plot(ax=ax, color='red', linewidth=2, linestyle='--', label='River Centerline')\n",
    "\n",
    "# Plot river bank lines\n",
    "bank_lines.plot(ax=ax, color='green', linewidth=2, label='River Bank Lines')\n",
    "\n",
    "# Add title and labels\n",
    "ax.set_title('River Edge Lines, Centerline, and Bank Lines', fontsize=14)\n",
    "ax.set_xlabel('Easting', fontsize=12)\n",
    "ax.set_ylabel('Northing', fontsize=12)\n",
    "\n",
    "# Add legend\n",
    "ax.legend(fontsize=12)\n",
    "\n",
    "# Add grid\n",
    "ax.grid(True)\n",
    "\n",
    "# Adjust layout\n",
    "plt.tight_layout()\n",
    "\n",
    "# Show plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:47,379 - ras_commander.HdfBase - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Exploring group: /Geometry/River Bank Lines/\n",
      "\n",
      "\n",
      "    Dataset: /Geometry/River Bank Lines//Polyline Info\n",
      "        Shape: (2, 4)\n",
      "        Dtype: int32\n",
      "    Attributes for /Geometry/River Bank Lines//Polyline Info:\n",
      "        Column: [b'Point Starting Index' b'Point Count' b'Part Starting Index'\n",
      " b'Part Count']\n",
      "        Feature Type: b'Polyline'\n",
      "        Row: b'Feature'\n",
      "\n",
      "    Dataset: /Geometry/River Bank Lines//Polyline Parts\n",
      "        Shape: (2, 2)\n",
      "        Dtype: int32\n",
      "    Attributes for /Geometry/River Bank Lines//Polyline Parts:\n",
      "        Column: [b'Point Starting Index' b'Point Count']\n",
      "        Row: b'Part'\n",
      "\n",
      "    Dataset: /Geometry/River Bank Lines//Polyline Points\n",
      "        Shape: (1822, 2)\n",
      "        Dtype: float64\n",
      "    Attributes for /Geometry/River Bank Lines//Polyline Points:\n",
      "        Column: [b'X' b'Y']\n",
      "        Row: b'Points'\n"
     ]
    }
   ],
   "source": [
    "# Use get_hdf5_dataset_info function to get dataset structure:\n",
    "HdfBase.get_dataset_info(plan_hdf_path, \"/Geometry/River Bank Lines/\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Function to explore HDF file to assist with 1D Structures Data Extraction "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:47,393 - ras_commander.HdfBase - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Exploring group: /Results/Unsteady/Output/Output Blocks/Computation Block/Global/\n",
      "\n",
      "\n",
      "    Dataset: /Results/Unsteady/Output/Output Blocks/Computation Block/Global//1D Iteration Error\n",
      "        Shape: (4471, 2)\n",
      "        Dtype: float32\n",
      "    Attributes for /Results/Unsteady/Output/Output Blocks/Computation Block/Global//1D Iteration Error:\n",
      "        Variables: [b'1D Iteration Error ft' b'1D Iteration Error cfs']\n",
      "\n",
      "    Dataset: /Results/Unsteady/Output/Output Blocks/Computation Block/Global//1D Iterations\n",
      "        Shape: (4471, 2)\n",
      "        Dtype: int32\n",
      "    Attributes for /Results/Unsteady/Output/Output Blocks/Computation Block/Global//1D Iterations:\n",
      "        Variables: [b'Number of Iterations' b'Cross Section pointer']\n",
      "\n",
      "    Dataset: /Results/Unsteady/Output/Output Blocks/Computation Block/Global//Cross Section Only\n",
      "        Shape: (178,)\n",
      "        Dtype: |S42\n",
      "\n",
      "    Dataset: /Results/Unsteady/Output/Output Blocks/Computation Block/Global//Time\n",
      "        Shape: (4471,)\n",
      "        Dtype: float64\n",
      "\n",
      "    Dataset: /Results/Unsteady/Output/Output Blocks/Computation Block/Global//Time Date Stamp (ms)\n",
      "        Shape: (4471,)\n",
      "        Dtype: |S22\n"
     ]
    }
   ],
   "source": [
    "# Use get_hdf5_dataset_info function to get Pipe Conduits data:\n",
    "HdfBase.get_dataset_info(plan_hdf_path, \"/Results/Unsteady/Output/Output Blocks/Computation Block/Global/\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:47,407 - ras_commander.HdfBase - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Exploring group: /Geometry/Structures\n",
      "\n",
      "\n",
      "    Dataset: /Geometry/Structures/Abutment Attributes\n",
      "        Shape: (2,)\n",
      "        Dtype: [('Structure ID', '<i4'), ('US Profile (Index)', '<i4'), ('US Profile (Count)', '<i4'), ('DS Profile (Index)', '<i4'), ('DS Profile (Count)', '<i4')]\n",
      "\n",
      "    Dataset: /Geometry/Structures/Abutment Data\n",
      "        Shape: (8, 2)\n",
      "        Dtype: float32\n",
      "\n",
      "    Dataset: /Geometry/Structures/Attributes\n",
      "        Shape: (11,)\n",
      "        Dtype: [('Type', 'S16'), ('Mode', 'S16'), ('River', 'S16'), ('Reach', 'S16'), ('RS', 'S8'), ('Connection', 'S16'), ('Groupname', 'S45'), ('US Type', 'S16'), ('US River', 'S16'), ('US Reach', 'S16'), ('US RS', 'S8'), ('US SA/2D', 'S16'), ('DS Type', 'S16'), ('DS River', 'S16'), ('DS Reach', 'S16'), ('DS RS', 'S8'), ('DS SA/2D', 'S16'), ('Node Name', 'S16'), ('Description', 'S512'), ('Last Edited', 'S18'), ('Upstream Distance', '<f4'), ('Weir Width', '<f4'), ('Weir Max Submergence', '<f4'), ('Weir Min Elevation', '<f4'), ('Weir Coef', '<f4'), ('Weir Shape', 'S16'), ('Weir Design EG Head', '<f4'), ('Weir Design Spillway HT', '<f4'), ('Weir US Slope', '<f4'), ('Weir DS Slope', '<f4'), ('Linear Routing Positive Coef', '<f4'), ('Linear Routing Negative Coef', '<f4'), ('Linear Routing Elevation', '<f4'), ('LW HW Position', '<i4'), ('LW TW Position', '<i4'), ('LW HW Distance', '<f4'), ('LW TW Distance', '<f4'), ('LW Span Multiple', 'u1'), ('Use 2D for Overflow', 'u1'), ('Use Velocity into 2D', 'u1'), ('Hagers Weir Coef', '<f4'), ('Hagers Height', '<f4'), ('Hagers Slope', '<f4'), ('Hagers Angle', '<f4'), ('Hagers Radius', '<f4'), ('Use WS for Weir Reference', 'u1'), ('Pilot Flow', '<f4'), ('Culvert Groups', '<i4'), ('Culverts Flap Gates', '<i4'), ('Gate Groups', '<i4'), ('HTAB FF Points', '<i4'), ('HTAB RC Count', '<i4'), ('HTAB RC Points', '<i4'), ('HTAB HW Max', '<f4'), ('HTAB TW Max', '<f4'), ('HTAB Max Flow', '<f4'), ('Cell Spacing Near', '<f4'), ('Cell Spacing Far', '<f4'), ('Near Repeats', '<i4'), ('Protection Radius', 'u1'), ('Use Friction in Momentum', 'u1'), ('Use Weight in Momentum', 'u1'), ('Use Critical US', 'u1'), ('Use EG for Pressure Criteria', 'u1'), ('Ice Option', '<i4'), ('Weir Skew', '<f4'), ('Pier Skew', '<f4'), ('BR Contraction', '<f4'), ('BR Expansion', '<f4'), ('BR Pier K', '<f4'), ('BR Pier Elev', '<f4'), ('BR Struct K', '<f4'), ('BR Struct Elev', '<f4'), ('BR Struct Mann', '<f4'), ('BR US Left Bank', '<f4'), ('BR US Right Bank', '<f4'), ('BR DS Left Bank', '<f4'), ('BR DS Right Bank', '<f4'), ('XS US Left Bank', '<f4'), ('XS US Right Bank', '<f4'), ('XS DS Left Bank', '<f4'), ('XS DS Right Bank', '<f4'), ('US Ineff Left Sta', '<f4'), ('US Ineff Left Elev', '<f4'), ('US Ineff Right Sta', '<f4'), ('US Ineff Right Elev', '<f4'), ('DS Ineff Left Sta', '<f4'), ('DS Ineff Left Elev', '<f4'), ('DS Ineff Right Sta', '<f4'), ('DS Ineff Right Elev', '<f4'), ('Use Override HW Connectivity', 'u1'), ('Use Override TW Connectivity', 'u1'), ('Use RC Family', 'u1'), ('Use Override HTabIBCurves', 'u1'), ('SNN ID', '<i4'), ('Default Centerline', 'u1')]\n",
      "\n",
      "    Dataset: /Geometry/Structures/Bridge Coefficient Attributes\n",
      "        Shape: (10,)\n",
      "        Dtype: [('Structure ID', '<i4'), ('Method', '<i4'), ('Low Standard Step', 'u1'), ('Use Momentum', 'u1'), ('Momentum Cd', '<f4'), ('Use Yarnell', 'u1'), ('Yarnell K', '<f4'), ('Use WSPro', 'u1'), ('WSPro El Top L', '<f4'), ('WSPro El Top R', '<f4'), ('WSPro El Toe L', '<f4'), ('WSPro El Toe R', '<f4'), ('WSPro Type', '<i4'), ('WSPro Slope', '<f4'), ('WSPro Width', '<f4'), ('WSPro Centroid Sta', '<f4'), ('WSPro Wing Wall Type', '<i4'), ('WSPro Wing Wall Width', '<f4'), ('WSPro Wing Wall Angle', '<f4'), ('WSPro Wing Wall Radius', '<f4'), ('WSPro Guide Banks Type', '<i4'), ('WSPro Guide Banks Length', '<f4'), ('WSPro Guide Banks Offset', '<f4'), ('WSPro Guide Banks Angle', '<f4'), ('WSPro Piers Continuous', 'u1'), ('WSPro Sf Geom Mean', 'u1'), ('WSPro Use Tables', 'u1'), ('WSPro Use C/E Approach', 'u1'), ('WSPro Use C/E Guide Banks', 'u1'), ('WSPro Use C/E US XS', 'u1'), ('WSPro Use C/E US BR', 'u1'), ('WSPro Use C/E DS BR', 'u1'), ('Use High Standard Step', 'u1'), ('Submerged Inlet Cd', '<f4'), ('Submerged Inlet-Outlet Cd', '<f4'), ('Low Cord Weir Check', '<f4')]\n",
      "\n",
      "    Dataset: /Geometry/Structures/Centerline Info\n",
      "        Shape: (11, 4)\n",
      "        Dtype: int32\n",
      "    Attributes for /Geometry/Structures/Centerline Info:\n",
      "        Column: [b'Point Starting Index' b'Point Count' b'Part Starting Index'\n",
      " b'Part Count']\n",
      "        Feature Type: b'Polyline'\n",
      "        Row: b'Feature'\n",
      "\n",
      "    Dataset: /Geometry/Structures/Centerline Parts\n",
      "        Shape: (11, 2)\n",
      "        Dtype: int32\n",
      "    Attributes for /Geometry/Structures/Centerline Parts:\n",
      "        Column: [b'Point Starting Index' b'Point Count']\n",
      "        Row: b'Part'\n",
      "\n",
      "    Dataset: /Geometry/Structures/Centerline Points\n",
      "        Shape: (60, 2)\n",
      "        Dtype: float64\n",
      "    Attributes for /Geometry/Structures/Centerline Points:\n",
      "        Column: [b'X' b'Y']\n",
      "        Row: b'Points'\n",
      "\n",
      "    Group: /Geometry/Structures/Gate Groups\n",
      "        Dataset: /Geometry/Structures/Gate Groups/Attributes\n",
      "            Shape: (1,)\n",
      "            Dtype: [('Structure ID', '<i4'), ('Name', 'S12'), ('Width', '<f4'), ('Height', '<f4'), ('Invert', '<f4'), ('Method', '<i4'), ('Sluice Coef', '<f4'), ('Radial Coef', '<f4'), ('Trunion Exponent', '<f4'), ('Open Exponent', '<f4'), ('Head Exponent', '<f4'), ('Trunion Height', '<f4'), ('Orifice Coef', '<f4'), ('Head Reference', '<i4'), ('Spillway Shape', 'S16'), ('Weir Coef', '<f4'), ('Design Head', '<f4'), ('Design Height', '<f4'), ('Use Rehbok', 'u1'), ('Use Kindsvater Carter', 'u1'), ('Kindsvater Carter Method', '<i4'), ('User Curve Set', 'S64'), ('Openings', '<i4')]\n",
      "        Group: /Geometry/Structures/Gate Groups/Openings\n",
      "    Attributes for /Geometry/Structures/Gate Groups/Openings:\n",
      "        Bridge/Culvert Count: 0\n",
      "        Connection Count: 0\n",
      "        Inline Structure Count: 2\n",
      "        Lateral Structure Count: 0\n",
      "            Dataset: /Geometry/Structures/Gate Groups/Openings/Attributes\n",
      "                Shape: (2,)\n",
      "                Dtype: [('Structure ID', '<i4'), ('Gate Group ID', '<i4'), ('Name', 'S32'), ('Station', '<f4'), ('Default Centerline', 'u1')]\n",
      "\n",
      "    Dataset: /Geometry/Structures/Pier Attributes\n",
      "        Shape: (32,)\n",
      "        Dtype: [('Structure ID', '<i4'), ('US Station', '<f4'), ('DS Station', '<f4'), ('Use Debris', 'u1'), ('Debris Width', '<f4'), ('Debris Height', '<f4'), ('US Profile (Index)', '<i4'), ('US Profile (Count)', '<i4'), ('DS Profile (Index)', '<i4'), ('DS Profile (Count)', '<i4')]\n",
      "\n",
      "    Dataset: /Geometry/Structures/Pier Data\n",
      "        Shape: (144, 2)\n",
      "        Dtype: float32\n",
      "\n",
      "    Dataset: /Geometry/Structures/Profile Data\n",
      "        Shape: (378, 2)\n",
      "        Dtype: float32\n",
      "\n",
      "    Group: /Geometry/Structures/Property Tables\n",
      "    Attributes for /Geometry/Structures/Property Tables:\n",
      "        NRCF: 10\n",
      "        Group: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (103245)\n",
      "    Attributes for /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (103245):\n",
      "        Edited Date/Time: b'04Dec2002 16:03:49'\n",
      "        Encroachment: b'False'\n",
      "        Free Flow points: 51\n",
      "        Friction Slope Method: b'Average Conveyance'\n",
      "        IB Curve Number: 1\n",
      "        Max number Submerged points: 21\n",
      "        Number Curves: 51\n",
      "        SSN ID: 57\n",
      "        Total number points: 851\n",
      "            Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (103245)/Info\n",
      "                Shape: (51, 2)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (103245)/Values\n",
      "                Shape: (851, 2)\n",
      "                Dtype: float32\n",
      "        Group: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (11985)\n",
      "    Attributes for /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (11985):\n",
      "        Edited Date/Time: b'04Dec2002 16:04:28'\n",
      "        Encroachment: b'False'\n",
      "        Free Flow points: 51\n",
      "        Friction Slope Method: b'Average Conveyance'\n",
      "        IB Curve Number: 8\n",
      "        Max number Submerged points: 26\n",
      "        Number Curves: 51\n",
      "        SSN ID: 169\n",
      "        Total number points: 780\n",
      "            Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (11985)/Info\n",
      "                Shape: (51, 2)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (11985)/Values\n",
      "                Shape: (780, 2)\n",
      "                Dtype: float32\n",
      "        Group: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (15100)\n",
      "    Attributes for /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (15100):\n",
      "        Edited Date/Time: b'04Dec2002 16:04:22'\n",
      "        Encroachment: b'False'\n",
      "        Free Flow points: 51\n",
      "        Friction Slope Method: b'Average Conveyance'\n",
      "        IB Curve Number: 7\n",
      "        Max number Submerged points: 24\n",
      "        Number Curves: 51\n",
      "        SSN ID: 165\n",
      "        Total number points: 835\n",
      "            Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (15100)/Info\n",
      "                Shape: (51, 2)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (15100)/Values\n",
      "                Shape: (835, 2)\n",
      "                Dtype: float32\n",
      "        Group: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (21241)\n",
      "    Attributes for /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (21241):\n",
      "        Edited Date/Time: b'08Nov2002 14:00:07'\n",
      "        Encroachment: b'False'\n",
      "        Free Flow points: 50\n",
      "        Friction Slope Method: b'Average Conveyance'\n",
      "        IB Curve Number: 6\n",
      "        Max number Submerged points: 28\n",
      "        Number Curves: 51\n",
      "        SSN ID: 157\n",
      "        Total number points: 838\n",
      "            Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (21241)/Info\n",
      "                Shape: (51, 2)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (21241)/Values\n",
      "                Shape: (838, 2)\n",
      "                Dtype: float32\n",
      "        Group: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (23828)\n",
      "    Attributes for /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (23828):\n",
      "        Edited Date/Time: b'08Nov2002 13:59:53'\n",
      "        Encroachment: b'False'\n",
      "        Free Flow points: 50\n",
      "        Friction Slope Method: b'Average Conveyance'\n",
      "        IB Curve Number: 5\n",
      "        Max number Submerged points: 27\n",
      "        Number Curves: 51\n",
      "        SSN ID: 151\n",
      "        Total number points: 969\n",
      "            Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (23828)/Info\n",
      "                Shape: (51, 2)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (23828)/Values\n",
      "                Shape: (969, 2)\n",
      "                Dtype: float32\n",
      "        Group: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (2436)\n",
      "    Attributes for /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (2436):\n",
      "        Edited Date/Time: b'08Nov2002 14:00:57'\n",
      "        Encroachment: b'False'\n",
      "        Free Flow points: 51\n",
      "        Friction Slope Method: b'Average Conveyance'\n",
      "        IB Curve Number: 10\n",
      "        Max number Submerged points: 29\n",
      "        Number Curves: 51\n",
      "        SSN ID: 185\n",
      "        Total number points: 964\n",
      "            Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (2436)/Info\n",
      "                Shape: (51, 2)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (2436)/Values\n",
      "                Shape: (964, 2)\n",
      "                Dtype: float32\n",
      "        Group: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (2920)\n",
      "    Attributes for /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (2920):\n",
      "        Edited Date/Time: b'08Nov2002 14:00:47'\n",
      "        Encroachment: b'False'\n",
      "        Free Flow points: 51\n",
      "        Friction Slope Method: b'Average Conveyance'\n",
      "        IB Curve Number: 9\n",
      "        Max number Submerged points: 21\n",
      "        Number Curves: 51\n",
      "        SSN ID: 182\n",
      "        Total number points: 745\n",
      "            Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (2920)/Info\n",
      "                Shape: (51, 2)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (2920)/Values\n",
      "                Shape: (745, 2)\n",
      "                Dtype: float32\n",
      "        Group: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (36713)\n",
      "    Attributes for /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (36713):\n",
      "        Edited Date/Time: b'08Nov2002 13:59:41'\n",
      "        Encroachment: b'False'\n",
      "        Free Flow points: 44\n",
      "        Friction Slope Method: b'Average Conveyance'\n",
      "        IB Curve Number: 4\n",
      "        Max number Submerged points: 25\n",
      "        Number Curves: 51\n",
      "        SSN ID: 136\n",
      "        Total number points: 801\n",
      "            Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (36713)/Info\n",
      "                Shape: (51, 2)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (36713)/Values\n",
      "                Shape: (801, 2)\n",
      "                Dtype: float32\n",
      "        Group: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (58780)\n",
      "    Attributes for /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (58780):\n",
      "        Edited Date/Time: b'08Nov2002 13:59:27'\n",
      "        Encroachment: b'False'\n",
      "        Free Flow points: 50\n",
      "        Friction Slope Method: b'Average Conveyance'\n",
      "        IB Curve Number: 3\n",
      "        Max number Submerged points: 21\n",
      "        Number Curves: 51\n",
      "        SSN ID: 105\n",
      "        Total number points: 779\n",
      "            Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (58780)/Info\n",
      "                Shape: (51, 2)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (58780)/Values\n",
      "                Shape: (779, 2)\n",
      "                Dtype: float32\n",
      "        Group: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (75960)\n",
      "    Attributes for /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (75960):\n",
      "        Edited Date/Time: b'08Nov2002 13:58:01'\n",
      "        Encroachment: b'False'\n",
      "        Free Flow points: 51\n",
      "        Friction Slope Method: b'Average Conveyance'\n",
      "        IB Curve Number: 2\n",
      "        Max number Submerged points: 30\n",
      "        Number Curves: 51\n",
      "        SSN ID: 85\n",
      "        Total number points: 892\n",
      "            Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (75960)/Info\n",
      "                Shape: (51, 2)\n",
      "                Dtype: int32\n",
      "            Dataset: /Geometry/Structures/Property Tables/Bald Eagle, Loc Hav (75960)/Values\n",
      "                Shape: (892, 2)\n",
      "                Dtype: float32\n",
      "\n",
      "    Dataset: /Geometry/Structures/Table Info\n",
      "        Shape: (11,)\n",
      "        Dtype: [('Centerline Profile (Index)', '<i4'), ('Centerline Profile (Count)', '<i4'), ('US XS Profile (Index)', '<i4'), ('US XS Profile (Count)', '<i4'), ('US BR Profile (Index)', '<i4'), ('US BR Profile (Count)', '<i4'), ('US BR Weir Profile (Index)', '<i4'), ('US BR Weir Profile (Count)', '<i4'), ('US BR Lid Profile (Index)', '<i4'), ('US BR Lid Profile (Count)', '<i4'), ('DS XS Profile (Index)', '<i4'), ('DS XS Profile (Count)', '<i4'), ('DS BR Profile (Index)', '<i4'), ('DS BR Profile (Count)', '<i4'), ('DS BR Weir Profile (Index)', '<i4'), ('DS BR Weir Profile (Count)', '<i4'), ('DS BR Lid Profile (Index)', '<i4'), ('DS BR Lid Profile (Count)', '<i4'), ('US XS Mann (Index)', '<i4'), ('US XS Mann (Count)', '<i4'), ('US BR Mann (Index)', '<i4'), ('US BR Mann (Count)', '<i4'), ('DS XS Mann (Index)', '<i4'), ('DS XS Mann (Count)', '<i4'), ('DS BR Mann (Index)', '<i4'), ('DS BR Mann (Count)', '<i4'), ('RC (Index)', '<i4'), ('RC (Count)', '<i4')]\n"
     ]
    }
   ],
   "source": [
    "# Use get_hdf5_dataset_info function to get Pipe Conduits data:\n",
    "HdfBase.get_dataset_info(plan_hdf_path, \"/Geometry/Structures\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:47,451 - ras_commander.HdfStruc - INFO - Calling get_structures\n",
      "2024-11-15 07:59:47,452 - ras_commander.HdfStruc - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
      "2024-11-15 07:59:47,455 - ras_commander.HdfBase - ERROR - Error getting attributes from Geometry/Structures: type object 'HdfUtils' has no attribute 'hdf5_attrs_to_dict'\n",
      "2024-11-15 07:59:47,474 - ras_commander.HdfBase - INFO - Using existing HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
      "2024-11-15 07:59:47,497 - ras_commander.HdfStruc - INFO - Successfully extracted structures GeoDataFrame.\n",
      "2024-11-15 07:59:47,498 - ras_commander.HdfStruc - INFO - Successfully extracted structures GeoDataFrame with attributes.\n",
      "2024-11-15 07:59:47,500 - ras_commander.HdfStruc - INFO - Finished get_structures\n",
      "2024-11-15 07:59:47,500 - ras_commander.HdfXsec - INFO - Calling get_cross_sections\n",
      "2024-11-15 07:59:47,518 - ras_commander.HdfXsec - INFO - Finished get_cross_sections\n",
      "2024-11-15 07:59:47,519 - ras_commander.HdfXsec - INFO - Calling get_river_centerlines\n",
      "2024-11-15 07:59:47,520 - ras_commander.HdfXsec - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
      "2024-11-15 07:59:47,523 - ras_commander.HdfBase - INFO - Calling get_polylines_from_parts\n",
      "2024-11-15 07:59:47,524 - ras_commander.HdfBase - INFO - Using existing HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
      "2024-11-15 07:59:47,527 - ras_commander.HdfBase - INFO - Finished get_polylines_from_parts\n",
      "2024-11-15 07:59:47,527 - ras_commander.HdfBase - INFO - Using existing HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.g01.hdf\n",
      "2024-11-15 07:59:47,533 - ras_commander.HdfXsec - INFO - Extracted 1 river centerlines\n",
      "2024-11-15 07:59:47,535 - ras_commander.HdfXsec - INFO - Finished get_river_centerlines\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Structures Summary:\n",
      "Number of structures found: 11\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Type</th>\n",
       "      <th>Mode</th>\n",
       "      <th>River</th>\n",
       "      <th>Reach</th>\n",
       "      <th>RS</th>\n",
       "      <th>Connection</th>\n",
       "      <th>Groupname</th>\n",
       "      <th>US Type</th>\n",
       "      <th>US River</th>\n",
       "      <th>US Reach</th>\n",
       "      <th>...</th>\n",
       "      <th>US XS Mann (Count)</th>\n",
       "      <th>US BR Mann (Index)</th>\n",
       "      <th>US BR Mann (Count)</th>\n",
       "      <th>DS XS Mann (Index)</th>\n",
       "      <th>DS XS Mann (Count)</th>\n",
       "      <th>DS BR Mann (Index)</th>\n",
       "      <th>DS BR Mann (Count)</th>\n",
       "      <th>RC (Index)</th>\n",
       "      <th>RC (Count)</th>\n",
       "      <th>Profile_Data</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bridge</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>103245</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle, Loc Hav (103245)</td>\n",
       "      <td>XS</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Inline</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>81500</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle, Loc Hav (81500)</td>\n",
       "      <td>XS</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>[{'Station': 0.0, 'Elevation': 683.0}, {'Stati...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Bridge</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>75960</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle, Loc Hav (75960)</td>\n",
       "      <td>XS</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Bridge</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>58780</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle, Loc Hav (58780)</td>\n",
       "      <td>XS</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Bridge</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>36713</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle, Loc Hav (36713)</td>\n",
       "      <td>XS</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Bridge</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>23828</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle, Loc Hav (23828)</td>\n",
       "      <td>XS</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Bridge</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>21241</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle, Loc Hav (21241)</td>\n",
       "      <td>XS</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Bridge</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>15100</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle, Loc Hav (15100)</td>\n",
       "      <td>XS</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Bridge</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>11985</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle, Loc Hav (11985)</td>\n",
       "      <td>XS</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Bridge</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>2920</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle, Loc Hav (2920)</td>\n",
       "      <td>XS</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Bridge</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>2436</td>\n",
       "      <td></td>\n",
       "      <td>Bald Eagle, Loc Hav (2436)</td>\n",
       "      <td>XS</td>\n",
       "      <td>Bald Eagle</td>\n",
       "      <td>Loc Hav</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>11 rows × 162 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Type Mode       River    Reach      RS Connection  \\\n",
       "0   Bridge       Bald Eagle  Loc Hav  103245              \n",
       "1   Inline       Bald Eagle  Loc Hav   81500              \n",
       "2   Bridge       Bald Eagle  Loc Hav   75960              \n",
       "3   Bridge       Bald Eagle  Loc Hav   58780              \n",
       "4   Bridge       Bald Eagle  Loc Hav   36713              \n",
       "5   Bridge       Bald Eagle  Loc Hav   23828              \n",
       "6   Bridge       Bald Eagle  Loc Hav   21241              \n",
       "7   Bridge       Bald Eagle  Loc Hav   15100              \n",
       "8   Bridge       Bald Eagle  Loc Hav   11985              \n",
       "9   Bridge       Bald Eagle  Loc Hav    2920              \n",
       "10  Bridge       Bald Eagle  Loc Hav    2436              \n",
       "\n",
       "                       Groupname US Type    US River US Reach  ...  \\\n",
       "0   Bald Eagle, Loc Hav (103245)      XS  Bald Eagle  Loc Hav  ...   \n",
       "1    Bald Eagle, Loc Hav (81500)      XS  Bald Eagle  Loc Hav  ...   \n",
       "2    Bald Eagle, Loc Hav (75960)      XS  Bald Eagle  Loc Hav  ...   \n",
       "3    Bald Eagle, Loc Hav (58780)      XS  Bald Eagle  Loc Hav  ...   \n",
       "4    Bald Eagle, Loc Hav (36713)      XS  Bald Eagle  Loc Hav  ...   \n",
       "5    Bald Eagle, Loc Hav (23828)      XS  Bald Eagle  Loc Hav  ...   \n",
       "6    Bald Eagle, Loc Hav (21241)      XS  Bald Eagle  Loc Hav  ...   \n",
       "7    Bald Eagle, Loc Hav (15100)      XS  Bald Eagle  Loc Hav  ...   \n",
       "8    Bald Eagle, Loc Hav (11985)      XS  Bald Eagle  Loc Hav  ...   \n",
       "9     Bald Eagle, Loc Hav (2920)      XS  Bald Eagle  Loc Hav  ...   \n",
       "10    Bald Eagle, Loc Hav (2436)      XS  Bald Eagle  Loc Hav  ...   \n",
       "\n",
       "   US XS Mann (Count) US BR Mann (Index) US BR Mann (Count)  \\\n",
       "0                   0                  0                  0   \n",
       "1                   0                  0                  0   \n",
       "2                   0                  0                  0   \n",
       "3                   0                  0                  0   \n",
       "4                   0                  0                  0   \n",
       "5                   0                  0                  0   \n",
       "6                   0                  0                  0   \n",
       "7                   0                  0                  0   \n",
       "8                   0                  0                  0   \n",
       "9                   0                  0                  0   \n",
       "10                  0                  0                  0   \n",
       "\n",
       "   DS XS Mann (Index) DS XS Mann (Count) DS BR Mann (Index)  \\\n",
       "0                   0                  0                  0   \n",
       "1                   0                  0                  0   \n",
       "2                   0                  0                  0   \n",
       "3                   0                  0                  0   \n",
       "4                   0                  0                  0   \n",
       "5                   0                  0                  0   \n",
       "6                   0                  0                  0   \n",
       "7                   0                  0                  0   \n",
       "8                   0                  0                  0   \n",
       "9                   0                  0                  0   \n",
       "10                  0                  0                  0   \n",
       "\n",
       "   DS BR Mann (Count) RC (Index) RC (Count)  \\\n",
       "0                   0          0          0   \n",
       "1                   0          0          0   \n",
       "2                   0          0          0   \n",
       "3                   0          0          0   \n",
       "4                   0          0          0   \n",
       "5                   0          0          0   \n",
       "6                   0          0          0   \n",
       "7                   0          0          0   \n",
       "8                   0          0          0   \n",
       "9                   0          0          0   \n",
       "10                  0          0          0   \n",
       "\n",
       "                                         Profile_Data  \n",
       "0                                                  []  \n",
       "1   [{'Station': 0.0, 'Elevation': 683.0}, {'Stati...  \n",
       "2                                                  []  \n",
       "3                                                  []  \n",
       "4                                                  []  \n",
       "5                                                  []  \n",
       "6                                                  []  \n",
       "7                                                  []  \n",
       "8                                                  []  \n",
       "9                                                  []  \n",
       "10                                                 []  \n",
       "\n",
       "[11 rows x 162 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Structure Details:\n",
      "   Structure ID\n",
      "0             1\n",
      "1             2\n",
      "2             3\n",
      "3             4\n",
      "4             5\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Cross Sections Summary:\n",
      "Number of cross sections found: 178\n",
      "\n",
      "Cross Section Details:\n",
      "        River    Reach\n",
      "0  Bald Eagle  Loc Hav\n",
      "1  Bald Eagle  Loc Hav\n",
      "2  Bald Eagle  Loc Hav\n",
      "3  Bald Eagle  Loc Hav\n",
      "4  Bald Eagle  Loc Hav\n"
     ]
    }
   ],
   "source": [
    "# Extract 1D Structures Geodataframe\n",
    "\n",
    "# Import required functions\n",
    "from ras_commander.HdfStruc import HdfStruc\n",
    "from ras_commander.HdfXsec import HdfXsec\n",
    "\n",
    "# Create instances\n",
    "hdf_struc = HdfStruc()\n",
    "hdf_xsec = HdfXsec()\n",
    "\n",
    "# Extract data into GeoDataFrames\n",
    "structures_gdf = hdf_struc.get_structures(hdf_path=geom_hdf_path)\n",
    "cross_sections_gdf = hdf_xsec.get_cross_sections(hdf_path=geom_hdf_path)\n",
    "centerlines_gdf = hdf_xsec.get_river_centerlines(hdf_path=geom_hdf_path)\n",
    "\n",
    "# Display basic information about the structures\n",
    "print(\"\\nStructures Summary:\")\n",
    "print(f\"Number of structures found: {len(structures_gdf)}\")\n",
    "display(structures_gdf)\n",
    "\n",
    "# Display first few rows of key attributes\n",
    "print(\"\\nStructure Details:\")\n",
    "display_cols = ['Structure ID', 'Structure Type', 'River Name', 'Reach Name', 'Station']\n",
    "display_cols = [col for col in display_cols if col in structures_gdf.columns]\n",
    "if display_cols:\n",
    "    print(structures_gdf[display_cols].head())\n",
    "\n",
    "# Create visualization\n",
    "fig, ax = plt.subplots(figsize=(15, 10))\n",
    "\n",
    "# Plot river centerlines\n",
    "if not centerlines_gdf.empty:\n",
    "    centerlines_gdf.plot(ax=ax, color='blue', linewidth=2, label='River Centerlines')\n",
    "\n",
    "# Plot cross sections\n",
    "if not cross_sections_gdf.empty:\n",
    "    cross_sections_gdf.plot(ax=ax, color='green', linewidth=1, label='Cross Sections')\n",
    "\n",
    "# Plot structures\n",
    "if not structures_gdf.empty:\n",
    "    structures_gdf.plot(ax=ax, color='red', marker='s', markersize=100, label='Structures')\n",
    "\n",
    "# Add title and labels\n",
    "ax.set_title('HEC-RAS Model Components', fontsize=14)\n",
    "ax.set_xlabel('Easting', fontsize=12)\n",
    "ax.set_ylabel('Northing', fontsize=12)\n",
    "\n",
    "# Add legend\n",
    "ax.legend(fontsize=12)\n",
    "\n",
    "# Add grid\n",
    "ax.grid(True)\n",
    "\n",
    "# Adjust layout\n",
    "plt.tight_layout()\n",
    "\n",
    "# Show plot\n",
    "plt.show()\n",
    "\n",
    "# Print summary of cross sections\n",
    "print(\"\\nCross Sections Summary:\")\n",
    "print(f\"Number of cross sections found: {len(cross_sections_gdf)}\")\n",
    "if not cross_sections_gdf.empty:\n",
    "    print(\"\\nCross Section Details:\")\n",
    "    xs_display_cols = ['River', 'Reach', 'Station']\n",
    "    xs_display_cols = [col for col in xs_display_cols if col in cross_sections_gdf.columns]\n",
    "    if xs_display_cols:\n",
    "        print(cross_sections_gdf[xs_display_cols].head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extracting Compute Messages\n",
      "Compute Messages:\n",
      "Plan                                     : 'Unsteady with Bridges and Dam' (BaldEagle.p01)\n",
      "Simulation started at                    : 15Nov2024 07:56:43 AM\n",
      "\n",
      "Writing Plan GIS Data...\n",
      "\n",
      "Completed Writing Plan GIS Data\n",
      "\n",
      "Writing Geometry...\n",
      "\n",
      "Computing Bank Lines\n",
      "\n",
      "Bank lines generated in 362 ms\n",
      "\n",
      "Computing Edge Lines\n",
      "\n",
      "Edge Lines generated in 168 ms\n",
      "\n",
      "Computing XS Interpolation Surface\n",
      "\n",
      "XS Interpolation Surface generated in 379 ms\n",
      "\n",
      "Completed Writing Geometry\n",
      "\n",
      "Writing Event Conditions ...\n",
      "\n",
      "Completed Writing Event Condition Data\n",
      "\n",
      "Geometric Preprocessor HEC-RAS 6.6 September 2024\n",
      "\n",
      "Finished Processing Geometry\n",
      "\n",
      "Performing Unsteady Flow Simulation  HEC-RAS 6.6 September 2024\n",
      "Unsteady Input Summary                   : \n",
      "\n",
      "1D Unsteady Finite Difference Numerical Solution\n",
      "Overall Volume Accounting Error in Acre Feet : -29.5468461514\n",
      "Overall Volume Accounting Error as percentage : 0.01407\n",
      "\n",
      "Please review \"Computational Log File\" output for volume accounting details\n",
      "\n",
      "Writing Results to DSS\n",
      "\n",
      "Finished Unsteady Flow Simulation\n",
      "\n",
      "Reading Unsteady Data for Post Process...\n",
      "\n",
      "Completed Reading Unsteady Data for Post Process\n",
      "\n",
      "Running Post Processor  HEC-RAS 6.6 September 2024\n",
      "\n",
      "Finished Post Processing\n",
      "\n",
      "Generating Time Series Post Process File ...\n",
      "Writing 1D Data                          : Water-Surface\n",
      "Writing 1D Data                          : Flow\n",
      "\n",
      "Time Series Post Process file generated [162 ms]\n",
      "\n",
      "Computations Summary\n",
      "Computation Task\tTime(hh                 : mm:ss)\n",
      "\n",
      "Completing Geometry, Flow and Plan\t       5\n",
      "Preprocessing Geometry\t    2             : 30\n",
      "\n",
      "Unsteady Flow Computations\t       6\n",
      "\n",
      "Post-Processing\t      14\n",
      "\n",
      "Generating Time Series Post Process\t<1\n",
      "Complete Process\t    2                   : 58\n",
      "\n",
      "Computation Speed\tSimulation/Runtime\n",
      "\n",
      "Unsteady Flow Computations\t77492x\n",
      "\n",
      "Complete Process\t3012x\n",
      "\n",
      "Computation Summary:\n",
      "--------------------------------------------------\n",
      "Computation Task               Time                \n",
      "--------------------------------------------------\n",
      "Computation Task               Time(hh:mm:ss)      \n",
      "\n",
      "Computation Speed:\n",
      "--------------------------------------------------\n",
      "Task                           Simulation/Runtime  \n",
      "--------------------------------------------------\n",
      "Computation Speed              Simulation/Runtime  \n"
     ]
    }
   ],
   "source": [
    "# Extract Compute Messages as String\n",
    "print(\"Extracting Compute Messages\")\n",
    "\n",
    "import h5py\n",
    "import numpy as np\n",
    "\n",
    "def extract_string_from_hdf(results_hdf_filename: str, hdf_path: str) -> str:\n",
    "    \"\"\"\n",
    "    Extract string from HDF object at a given path\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    results_hdf_filename : str\n",
    "        Name of the HDF file\n",
    "    hdf_path : str\n",
    "        Path of the object in the HDF file\n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    str\n",
    "        Extracted string from the specified HDF object\n",
    "    \"\"\"\n",
    "    with h5py.File(results_hdf_filename, 'r') as hdf_file:\n",
    "        try:\n",
    "            hdf_object = hdf_file[hdf_path]\n",
    "            if isinstance(hdf_object, h5py.Group):\n",
    "                return f\"Group: {hdf_path}\\nContents: {list(hdf_object.keys())}\"\n",
    "            elif isinstance(hdf_object, h5py.Dataset):\n",
    "                data = hdf_object[()]\n",
    "                if isinstance(data, bytes):\n",
    "                    return data.decode('utf-8')\n",
    "                elif isinstance(data, np.ndarray) and data.dtype.kind == 'S':\n",
    "                    return [v.decode('utf-8') for v in data]\n",
    "                else:\n",
    "                    return str(data)\n",
    "            else:\n",
    "                return f\"Unsupported object type: {type(hdf_object)}\"\n",
    "        except KeyError:\n",
    "            return f\"Path not found: {hdf_path}\"\n",
    "\n",
    "try:\n",
    "    results_summary_string = extract_string_from_hdf(plan_hdf_path, '/Results/Summary/Compute Messages (text)')\n",
    "    print(\"Compute Messages:\")\n",
    "    \n",
    "    # Parse and print the compute messages in a more visually friendly way\n",
    "    messages = results_summary_string[0].split('\\r\\n')\n",
    "    \n",
    "    for message in messages:\n",
    "        if message.strip():  # Skip empty lines\n",
    "            if ':' in message:\n",
    "                key, value = message.split(':', 1)\n",
    "                print(f\"{key.strip():40} : {value.strip()}\")\n",
    "            else:\n",
    "                print(f\"\\n{message.strip()}\")\n",
    "    \n",
    "    # Print computation summary in a table format\n",
    "    print(\"\\nComputation Summary:\")\n",
    "    print(\"-\" * 50)\n",
    "    print(f\"{'Computation Task':<30} {'Time':<20}\")\n",
    "    print(\"-\" * 50)\n",
    "    for line in messages:\n",
    "        if 'Computation Task' in line:\n",
    "            task, time = line.split('\\t')\n",
    "            print(f\"{task:<30} {time:<20}\")\n",
    "    \n",
    "    print(\"\\nComputation Speed:\")\n",
    "    print(\"-\" * 50)\n",
    "    print(f\"{'Task':<30} {'Simulation/Runtime':<20}\")\n",
    "    print(\"-\" * 50)\n",
    "    for line in messages:\n",
    "        if 'Computation Speed' in line:\n",
    "            task, speed = line.split('\\t')\n",
    "            print(f\"{task:<30} {speed:<20}\")\n",
    "\n",
    "except Exception as e:\n",
    "    print(f\"Error extracting compute messages: {str(e)}\")\n",
    "    print(\"\\nNote: If 'Results/Summary Output' is not in the file structure, it might indicate that the simulation didn't complete successfully or the results weren't saved properly.\")\n",
    "\n",
    " \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:48,020 - ras_commander.HdfPlan - INFO - Calling get_plan_parameters\n",
      "2024-11-15 07:59:48,022 - ras_commander.HdfPlan - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n",
      "2024-11-15 07:59:48,028 - ras_commander.HdfPlan - INFO - Finished get_plan_parameters\n",
      "2024-11-15 07:59:48,029 - ras_commander.HdfResultsPlan - INFO - Calling get_volume_accounting\n",
      "2024-11-15 07:59:48,030 - ras_commander.HdfResultsPlan - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n",
      "2024-11-15 07:59:48,034 - ras_commander.HdfResultsPlan - INFO - Finished get_volume_accounting\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Example 12: Extracting Plan Parameters and Volume Accounting Data\n",
      "\n",
      "Plan Parameters DataFrame:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'1D Cores': 0,\n",
       " '1D Flow Tolerance': nan,\n",
       " '1D Maximum Iterations': 20,\n",
       " '1D Maximum Iterations Without Improvement': 0,\n",
       " '1D Maximum Water Surface Error To Abort': 100.0,\n",
       " '1D Methodology': 'Finite Difference',\n",
       " '1D Storage Area Elevation Tolerance': 0.1,\n",
       " '1D Theta': 1.0,\n",
       " '1D Theta Warmup': 1.0,\n",
       " '1D Water Surface Elevation Tolerance': 0.01,\n",
       " '1D-2D Gate Flow Submergence Decay Exponent': 1.0,\n",
       " '1D-2D IS Stablity Factor': 1.0,\n",
       " '1D-2D LS Stablity Factor': 2.0,\n",
       " '1D-2D Maximum Number of Time Slices': 20,\n",
       " '1D-2D Minimum Time Step for Slicing(hours)': 0.0,\n",
       " '1D-2D Number of Warmup Steps': 0,\n",
       " '1D-2D Warmup Time Step (hours)': 0.0,\n",
       " '1D-2D Weir Flow Submergence Decay Exponent': 1.0,\n",
       " '2D Coriolis': False,\n",
       " '2D Only': False,\n",
       " 'Friction Slope Average Method (BR)': 'Average Conveyance',\n",
       " 'Friction Slope Average Method (XS)': 'Average Friction Slope',\n",
       " 'Gravity': 32.17405,\n",
       " 'HDF Chunk Size': 1.0,\n",
       " 'HDF Compression': 1,\n",
       " 'HDF Fixed Rows': 1,\n",
       " 'HDF Flush Buffer': False,\n",
       " 'HDF Spatial Parts': 1,\n",
       " 'HDF Use Max Rows': 0,\n",
       " 'HDF Write Time Slices': False,\n",
       " 'HDF Write Warmup': False,\n",
       " 'Pardiso Solver': False}"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Volume Accounting DataFrame:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Error</th>\n",
       "      <th>Error Percent</th>\n",
       "      <th>Total Boundary Flux of Water In</th>\n",
       "      <th>Total Boundary Flux of Water Out</th>\n",
       "      <th>Vol Accounting in</th>\n",
       "      <th>Volume Ending</th>\n",
       "      <th>Volume Starting</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-29.546846</td>\n",
       "      <td>0.014071</td>\n",
       "      <td>200682.453125</td>\n",
       "      <td>112574.828125</td>\n",
       "      <td>b'Acre Feet'</td>\n",
       "      <td>97384.882812</td>\n",
       "      <td>9306.797852</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Error  Error Percent  Total Boundary Flux of Water In  \\\n",
       "0 -29.546846       0.014071                    200682.453125   \n",
       "\n",
       "   Total Boundary Flux of Water Out Vol Accounting in  Volume Ending  \\\n",
       "0                     112574.828125      b'Acre Feet'   97384.882812   \n",
       "\n",
       "   Volume Starting  \n",
       "0      9306.797852  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Example 12: Extract Plan Parameters and Volume Accounting\n",
    "print(\"\\nExample 12: Extracting Plan Parameters and Volume Accounting Data\")\n",
    "\n",
    "# Extract plan parameters\n",
    "plan_parameters_df = HdfPlan.get_plan_parameters(hdf_path=plan_hdf_path)\n",
    "\n",
    "# Extract volume accounting data\n",
    "volume_accounting_df = HdfResultsPlan.get_volume_accounting(hdf_path=plan_hdf_path)\n",
    "\n",
    "print(\"\\nPlan Parameters DataFrame:\")\n",
    "display(plan_parameters_df)\n",
    "\n",
    "print(\"\\nVolume Accounting DataFrame:\")\n",
    "display(volume_accounting_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# RasPlanHdf Class Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:48,053 - ras_commander.HdfPlan - INFO - Calling get_plan_start_time\n",
      "2024-11-15 07:59:48,055 - ras_commander.HdfPlan - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n",
      "2024-11-15 07:59:48,058 - ras_commander.HdfPlan - INFO - Finished get_plan_start_time\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Simulation start time: 1999-02-18 00:00:00\n"
     ]
    }
   ],
   "source": [
    "# Example: Get simulation start time\n",
    "start_time = HdfPlan.get_plan_start_time(plan_hdf_path)\n",
    "print(f\"Simulation start time: {start_time}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:48,066 - ras_commander.HdfPlan - INFO - Calling get_plan_end_time\n",
      "2024-11-15 07:59:48,067 - ras_commander.HdfPlan - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n",
      "2024-11-15 07:59:48,069 - ras_commander.HdfPlan - INFO - Finished get_plan_end_time\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Simulation end time: 1999-02-24 05:00:00\n"
     ]
    }
   ],
   "source": [
    "# Example: Get plan end time\n",
    "end_time = HdfPlan.get_plan_end_time(plan_hdf_path)\n",
    "print(f\"Simulation end time: {end_time}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Modify the cell below to time of max wsel for 1D models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:48,092 - ras_commander.HdfResultsXsec - INFO - Calling get_xsec_timeseries\n",
      "2024-11-15 07:59:48,094 - ras_commander.HdfResultsXsec - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n",
      "2024-11-15 07:59:48,108 - ras_commander.HdfResultsXsec - INFO - Finished get_xsec_timeseries\n",
      "2024-11-15 07:59:48,109 - ras_commander.HdfXsec - INFO - Calling get_cross_sections\n",
      "2024-11-15 07:59:48,128 - ras_commander.HdfXsec - INFO - Finished get_cross_sections\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Cross Section Results Shape: (150, 178)\n",
      "\n",
      "Number of cross sections in geometry: 178\n",
      "\n",
      "First few cross section names:\n",
      "['Bald Eagle       Loc Hav          138154.4'\n",
      " 'Bald Eagle       Loc Hav          137690.8'\n",
      " 'Bald Eagle       Loc Hav          137327.0'\n",
      " 'Bald Eagle       Loc Hav          136564.9'\n",
      " 'Bald Eagle       Loc Hav          136202.3']\n",
      "\n",
      "Number of cross sections processed: 178\n",
      "\n",
      "Columns in xs_df: ['xs_name', 'x', 'y', 'max_wsel', 'time_of_max']\n",
      "\n",
      "First row of xs_df:\n",
      "xs_name        Bald Eagle       Loc Hav          138154.4\n",
      "x                                              1968668.17\n",
      "y                                               290166.79\n",
      "max_wsel                                       672.808289\n",
      "time_of_max                           1999-02-19 15:00:00\n",
      "Name: 0, dtype: object\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Overall Maximum WSEL: 672.81 ft\n",
      "Time of Overall Maximum WSEL: 1999-02-19 15:00:00\n",
      "Hours since simulation start: 0.00 hours\n",
      "Location of Overall Maximum WSEL: X=1968668.17, Y=290166.79\n",
      "Cross Section: Bald Eagle       Loc Hav          138154.4\n"
     ]
    }
   ],
   "source": [
    "# Plot the time of maximum water surface elevation (WSEL) for cross sections\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from datetime import datetime\n",
    "\n",
    "# Get cross section results timeseries\n",
    "xsec_results = HdfResultsXsec.get_xsec_timeseries(plan_hdf_path)\n",
    "print(\"\\nCross Section Results Shape:\", xsec_results['Water_Surface'].shape)\n",
    "\n",
    "# Get cross section geometry data\n",
    "xsec_geom = HdfXsec.get_cross_sections(plan_hdf_path)\n",
    "print(\"\\nNumber of cross sections in geometry:\", len(xsec_geom))\n",
    "\n",
    "# Create dataframe with cross section locations and max WSEL times\n",
    "xs_data = []\n",
    "\n",
    "# Extract water surface data from xarray Dataset\n",
    "water_surface = xsec_results['Water_Surface'].values\n",
    "times = pd.to_datetime(xsec_results.time.values)\n",
    "\n",
    "# Debug print\n",
    "print(\"\\nFirst few cross section names:\")\n",
    "print(xsec_results.cross_section.values[:5])\n",
    "\n",
    "# Iterate through cross sections\n",
    "for xs_idx in range(len(xsec_results.cross_section)):\n",
    "    # Get WSEL timeseries for this cross section\n",
    "    wsel_series = water_surface[:, xs_idx]\n",
    "    \n",
    "    # Get cross section name and parse components\n",
    "    xs_name = xsec_results.cross_section.values[xs_idx]\n",
    "    \n",
    "    # Split the string and remove empty strings\n",
    "    xs_parts = [part for part in xs_name.split() if part]\n",
    "    \n",
    "    if len(xs_parts) >= 3:\n",
    "        river = \"Bald Eagle\"  # Combine first two words\n",
    "        reach = \"Loc Hav\"     # Next two words\n",
    "        rs = xs_parts[-1]     # Last part is the station\n",
    "        \n",
    "        # Get geometry for this cross section\n",
    "        xs_match = xsec_geom[\n",
    "            (xsec_geom['River'] == river) & \n",
    "            (xsec_geom['Reach'] == reach) & \n",
    "            (xsec_geom['RS'] == rs)\n",
    "        ]\n",
    "        \n",
    "        if not xs_match.empty:\n",
    "            geom = xs_match.iloc[0]\n",
    "            # Use first point of cross section line for plotting\n",
    "            x = geom.geometry.coords[0][0]\n",
    "            y = geom.geometry.coords[0][1]\n",
    "            \n",
    "            # Find time of max WSEL\n",
    "            max_wsel_idx = np.argmax(wsel_series)\n",
    "            max_wsel = np.max(wsel_series)\n",
    "            max_time = times[max_wsel_idx]\n",
    "            \n",
    "            xs_data.append({\n",
    "                'xs_name': xs_name,\n",
    "                'x': x,\n",
    "                'y': y,\n",
    "                'max_wsel': max_wsel,\n",
    "                'time_of_max': max_time\n",
    "            })\n",
    "        else:\n",
    "            print(f\"\\nWarning: No geometry match found for {xs_name}\")\n",
    "            print(f\"River: {river}, Reach: {reach}, RS: {rs}\")\n",
    "    else:\n",
    "        print(f\"\\nWarning: Could not parse cross section name: {xs_name}\")\n",
    "\n",
    "# Create dataframe\n",
    "xs_df = pd.DataFrame(xs_data)\n",
    "\n",
    "# Debug print\n",
    "print(\"\\nNumber of cross sections processed:\", len(xs_df))\n",
    "if not xs_df.empty:\n",
    "    print(\"\\nColumns in xs_df:\", xs_df.columns.tolist())\n",
    "    print(\"\\nFirst row of xs_df:\")\n",
    "    print(xs_df.iloc[0])\n",
    "\n",
    "    # Create the plot\n",
    "    fig, ax = plt.subplots(figsize=(12, 8))\n",
    "\n",
    "    # Convert datetime to hours since start for colormap\n",
    "    min_time = min(xs_df['time_of_max'])\n",
    "    color_values = [(t - min_time).total_seconds() / 3600 for t in xs_df['time_of_max']]\n",
    "\n",
    "    # Plot cross section points\n",
    "    scatter = ax.scatter(xs_df['x'], xs_df['y'],\n",
    "                        c=color_values,\n",
    "                        cmap='viridis',\n",
    "                        s=50)\n",
    "\n",
    "    # Customize plot\n",
    "    ax.set_title('Time of Maximum Water Surface Elevation at Cross Sections')\n",
    "    ax.set_xlabel('X Coordinate')\n",
    "    ax.set_ylabel('Y Coordinate')\n",
    "\n",
    "    # Add colorbar\n",
    "    cbar = plt.colorbar(scatter)\n",
    "    cbar.set_label('Hours since simulation start')\n",
    "\n",
    "    # Format colorbar ticks\n",
    "    max_hours = int(max(color_values))\n",
    "    tick_interval = max(1, max_hours // 6)  # Show ~6 ticks\n",
    "    cbar.set_ticks(range(0, max_hours + 1, tick_interval))\n",
    "    cbar.set_ticklabels([f'{h}h' for h in range(0, max_hours + 1, tick_interval)])\n",
    "\n",
    "    # Add grid and adjust styling\n",
    "    ax.grid(True, linestyle='--', alpha=0.7)\n",
    "    plt.rcParams.update({'font.size': 12})\n",
    "    plt.tight_layout()\n",
    "\n",
    "    # Show plot\n",
    "    plt.show()\n",
    "\n",
    "    # Print summary statistics\n",
    "    max_wsel_xs = xs_df.loc[xs_df['max_wsel'].idxmax()]\n",
    "    hours_since_start = (max_wsel_xs['time_of_max'] - min_time).total_seconds() / 3600\n",
    "\n",
    "    print(f\"\\nOverall Maximum WSEL: {max_wsel_xs['max_wsel']:.2f} ft\")\n",
    "    print(f\"Time of Overall Maximum WSEL: {max_wsel_xs['time_of_max']}\")\n",
    "    print(f\"Hours since simulation start: {hours_since_start:.2f} hours\")\n",
    "    print(f\"Location of Overall Maximum WSEL: X={max_wsel_xs['x']:.2f}, Y={max_wsel_xs['y']:.2f}\")\n",
    "    print(f\"Cross Section: {max_wsel_xs['xs_name']}\")\n",
    "else:\n",
    "    print(\"\\nWarning: No cross sections were processed successfully\")\n",
    "    print(\"xs_data length:\", len(xs_data))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Need to add this to the ras-commander library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:48,756 - ras_commander.HdfResultsPlan - INFO - Calling get_unsteady_info\n",
      "2024-11-15 07:59:48,757 - ras_commander.HdfResultsPlan - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n",
      "2024-11-15 07:59:48,760 - ras_commander.HdfResultsPlan - INFO - Finished get_unsteady_info\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Results Unsteady Attributes:\n",
      "Plan Title: 0    b'Unsteady with Bridges and Dam'\n",
      "Name: Plan Title, dtype: object\n",
      "Program Name: 0    b'HEC-RAS - River Analysis System'\n",
      "Name: Program Name, dtype: object\n",
      "Program Version: 0    b'HEC-RAS 6.6 September 2024'\n",
      "Name: Program Version, dtype: object\n",
      "Project File Name: 0    b'c:\\\\GH\\\\ras-commander\\\\examples\\\\example_pro...\n",
      "Name: Project File Name, dtype: object\n",
      "Project Title: 0    b'Bald Eagle Cr. for the WCDS Project'\n",
      "Name: Project Title, dtype: object\n",
      "Short ID: 0    b'UnsteadyFlow'\n",
      "Name: Short ID, dtype: object\n",
      "Simulation Time Window: 0    b'17Feb1999 2400 to 24Feb1999 0500'\n",
      "Name: Simulation Time Window, dtype: object\n",
      "Type of Run: 0    b'Unsteady Flow Analysis'\n",
      "Name: Type of Run, dtype: object\n"
     ]
    }
   ],
   "source": [
    "# Get unsteady attributes\n",
    "results_unsteady_attrs = HdfResultsPlan.get_unsteady_info(plan_hdf_path, ras_object=bald_eagle)\n",
    "print(\"\\nResults Unsteady Attributes:\")\n",
    "for key, value in results_unsteady_attrs.items():\n",
    "    print(f\"{key}: {value}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:48,774 - ras_commander.HdfResultsPlan - INFO - Calling get_unsteady_summary\n",
      "2024-11-15 07:59:48,776 - ras_commander.HdfResultsPlan - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n",
      "2024-11-15 07:59:48,779 - ras_commander.HdfResultsPlan - INFO - Finished get_unsteady_summary\n",
      "2024-11-15 07:59:48,783 - ras_commander.HdfResultsPlan - INFO - Calling get_volume_accounting\n",
      "2024-11-15 07:59:48,785 - ras_commander.HdfResultsPlan - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n",
      "2024-11-15 07:59:48,788 - ras_commander.HdfResultsPlan - INFO - Finished get_volume_accounting\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Results Unsteady Summary Attributes:\n",
      "Computation Time DSS: 0    b'00:00:00'\n",
      "Name: Computation Time DSS, dtype: object\n",
      "Computation Time Total: 0    b'00:00:04'\n",
      "Name: Computation Time Total, dtype: object\n",
      "Maximum WSEL Error: 0    0.009995\n",
      "Name: Maximum WSEL Error, dtype: float32\n",
      "Maximum number of cores: 0    1\n",
      "Name: Maximum number of cores, dtype: int32\n",
      "Run Time Window: 0    b'15NOV2024 07:59:22 to 15NOV2024 07:59:26'\n",
      "Name: Run Time Window, dtype: object\n",
      "Solution: 0    b'Unsteady Finished Successfully'\n",
      "Name: Solution, dtype: object\n",
      "Time Solution Went Unstable: 0   NaN\n",
      "Name: Time Solution Went Unstable, dtype: float32\n",
      "Time Stamp Solution Went Unstable: 0    b'Not Applicable'\n",
      "Name: Time Stamp Solution Went Unstable, dtype: object\n",
      "\n",
      "Volume Accounting Attributes:\n",
      "Error: 0   -29.546846\n",
      "Name: Error, dtype: float32\n",
      "Error Percent: 0    0.014071\n",
      "Name: Error Percent, dtype: float32\n",
      "Total Boundary Flux of Water In: 0    200682.453125\n",
      "Name: Total Boundary Flux of Water In, dtype: float32\n",
      "Total Boundary Flux of Water Out: 0    112574.828125\n",
      "Name: Total Boundary Flux of Water Out, dtype: float32\n",
      "Vol Accounting in: 0    b'Acre Feet'\n",
      "Name: Vol Accounting in, dtype: object\n",
      "Volume Ending: 0    97384.882812\n",
      "Name: Volume Ending, dtype: float32\n",
      "Volume Starting: 0    9306.797852\n",
      "Name: Volume Starting, dtype: float32\n"
     ]
    }
   ],
   "source": [
    "# Get unsteady summary attributes\n",
    "results_unsteady_summary_attrs = HdfResultsPlan.get_unsteady_summary(plan_hdf_path, ras_object=bald_eagle)\n",
    "print(\"\\nResults Unsteady Summary Attributes:\")\n",
    "for key, value in results_unsteady_summary_attrs.items():\n",
    "    print(f\"{key}: {value}\")\n",
    "\n",
    "# Get volume accounting attributes\n",
    "volume_accounting_attrs = HdfResultsPlan.get_volume_accounting(plan_hdf_path, ras_object=bald_eagle)\n",
    "print(\"\\nVolume Accounting Attributes:\")\n",
    "for key, value in volume_accounting_attrs.items():\n",
    "    print(f\"{key}: {value}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:48,803 - ras_commander.HdfBase - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== HDF5 File Structure ===\n",
      "\n",
      "c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n",
      "\n",
      "Exploring group: /Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Cross Sections\n",
      "\n",
      "\n",
      "    Dataset: /Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Cross Sections/Cross Section Attributes\n",
      "        Shape: (178,)\n",
      "        Dtype: [('River', 'S16'), ('Reach', 'S16'), ('Station', 'S8'), ('Name', 'S16')]\n",
      "\n",
      "    Dataset: /Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Cross Sections/Cross Section Only\n",
      "        Shape: (178,)\n",
      "        Dtype: |S42\n",
      "\n",
      "    Dataset: /Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Cross Sections/Flow\n",
      "        Shape: (150, 178)\n",
      "        Dtype: float32\n",
      "    Attributes for /Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Cross Sections/Flow:\n",
      "        Maximum Value of Data Set: 50000.0\n",
      "        Minimum Value of Data Set: 1235.9544677734375\n",
      "        Variable: [b'Flow' b'cfs']\n",
      "        Variable Name: b'Flow'\n",
      "        Variable Units: b'cfs'\n",
      "\n",
      "    Dataset: /Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Cross Sections/Flow Lateral\n",
      "        Shape: (150, 178)\n",
      "        Dtype: float32\n",
      "    Attributes for /Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Cross Sections/Flow Lateral:\n",
      "        Lateral Flow: b'cfs'\n",
      "\n",
      "    Dataset: /Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Cross Sections/Flow Volume Cumulative\n",
      "        Shape: (150, 178)\n",
      "        Dtype: float64\n",
      "    Attributes for /Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Cross Sections/Flow Volume Cumulative:\n",
      "        Cumulative Volumetric Flow: b'Feet^3'\n",
      "\n",
      "    Dataset: /Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Cross Sections/Velocity Channel\n",
      "        Shape: (150, 178)\n",
      "        Dtype: float32\n",
      "    Attributes for /Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Cross Sections/Velocity Channel:\n",
      "        Velocity: b'ft/s'\n",
      "\n",
      "    Dataset: /Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Cross Sections/Velocity Total\n",
      "        Shape: (150, 178)\n",
      "        Dtype: float32\n",
      "    Attributes for /Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Cross Sections/Velocity Total:\n",
      "        Velocity: b'ft/s'\n",
      "\n",
      "    Dataset: /Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Cross Sections/Water Surface\n",
      "        Shape: (150, 178)\n",
      "        Dtype: float32\n",
      "    Attributes for /Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Cross Sections/Water Surface:\n",
      "        Maximum Value of Data Set: 672.8082885742188\n",
      "        Minimum Value of Data Set: 537.5\n",
      "        Variable: [b'Stage' b'Feet']\n",
      "        Variable Name: b'Stage'\n",
      "        Variable Units: b'Feet'\n"
     ]
    }
   ],
   "source": [
    "print(\"\\n=== HDF5 File Structure ===\\n\")\n",
    "print(plan_hdf_path)\n",
    "HdfBase.get_dataset_info(plan_hdf_path, group_path='/Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Cross Sections')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-15 07:59:48,817 - ras_commander.HdfResultsXsec - INFO - Calling get_xsec_timeseries\n",
      "2024-11-15 07:59:48,818 - ras_commander.HdfResultsXsec - INFO - Using HDF file: c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle Creek\\BaldEagle.p01.hdf\n",
      "2024-11-15 07:59:48,830 - ras_commander.HdfResultsXsec - INFO - Finished get_xsec_timeseries\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xarray.Dataset> Size: 587kB\n",
      "Dimensions:                   (time: 150, cross_section: 178)\n",
      "Coordinates:\n",
      "  * time                      (time) datetime64[ns] 1kB 1999-02-18 ... 1999-0...\n",
      "  * cross_section             (cross_section) <U42 30kB 'Bald Eagle       Loc...\n",
      "    River                     (cross_section) <U10 7kB 'Bald Eagle' ... 'Bald...\n",
      "    Reach                     (cross_section) <U7 5kB 'Loc Hav' ... 'Loc Hav'\n",
      "    Station                   (cross_section) <U8 6kB '138154.4' ... '659.942'\n",
      "    Name                      (cross_section) <U1 712B '' '' '' '' ... '' '' ''\n",
      "    Maximum_Water_Surface     (cross_section) float32 712B 672.8 672.8 ... 561.4\n",
      "    Maximum_Flow              (cross_section) float32 712B 5e+04 ... 2.543e+04\n",
      "    Maximum_Channel_Velocity  (cross_section) float32 712B 11.81 8.031 ... 2.028\n",
      "    Maximum_Velocity_Total    (cross_section) float32 712B 9.371 5.379 ... 1.632\n",
      "    Maximum_Flow_Lateral      (cross_section) float32 712B 0.0 0.0 ... 0.0 0.0\n",
      "Data variables:\n",
      "    Water_Surface             (time, cross_section) float32 107kB 660.7 ... 5...\n",
      "    Velocity_Total            (time, cross_section) float32 107kB 0.0 ... 1.227\n",
      "    Velocity_Channel          (time, cross_section) float32 107kB 0.0 ... 1.286\n",
      "    Flow_Lateral              (time, cross_section) float32 107kB 0.0 ... 0.0\n",
      "    Flow                      (time, cross_section) float32 107kB 2e+03 ... 2...\n",
      "Attributes:\n",
      "    description:  Cross-section results extracted from HEC-RAS HDF file\n",
      "    source_file:  c:\\GH\\ras-commander\\examples\\example_projects\\Balde Eagle C...\n"
     ]
    }
   ],
   "source": [
    "xsec_results = HdfResultsXsec.get_xsec_timeseries(plan_hdf_path)\n",
    "print(xsec_results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Time Series Data for Cross Section: Bald Eagle       Loc Hav          136202.3\n",
      "\n",
      "Water_Surface:\n",
      "[657.4173  656.7111  657.02997 657.44073 657.88824]\n",
      "\n",
      "Velocity_Total:\n",
      "[0.        2.7810786 2.9612713 2.9395368 3.0228102]\n",
      "\n",
      "Velocity_Channel:\n",
      "[0.        3.132834  3.4508243 3.7217746 4.083391 ]\n",
      "\n",
      "Flow_Lateral:\n",
      "[0. 0. 0. 0. 0.]\n",
      "\n",
      "Flow:\n",
      "[2000.     1273.8193 1607.1132 2109.992  2746.2964]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Print time series for specific cross section\n",
    "target_xs = \"Bald Eagle       Loc Hav          136202.3\"\n",
    "\n",
    "print(\"\\nTime Series Data for Cross Section:\", target_xs)\n",
    "for var in ['Water_Surface', 'Velocity_Total', 'Velocity_Channel', 'Flow_Lateral', 'Flow']:\n",
    "    print(f\"\\n{var}:\")\n",
    "    print(xsec_results[var].sel(cross_section=target_xs).values[:5])  # Show first 5 values\n",
    "\n",
    "# Create time series plots\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Create a figure for each variable\n",
    "variables = ['Water_Surface', 'Velocity_Total', 'Velocity_Channel', 'Flow_Lateral', 'Flow']\n",
    "\n",
    "for var in variables:\n",
    "    plt.figure(figsize=(10, 5))\n",
    "    # Convert time values to datetime if needed\n",
    "    time_values = pd.to_datetime(xsec_results.time.values)\n",
    "    values = xsec_results[var].sel(cross_section=target_xs).values\n",
    "    \n",
    "    # Plot with explicit x and y values\n",
    "    plt.plot(time_values, values, '-', linewidth=2)\n",
    "    \n",
    "    plt.title(f'{var} at {target_xs}')\n",
    "    plt.xlabel('Time')\n",
    "    plt.ylabel(var.replace('_', ' '))\n",
    "    plt.grid(True)\n",
    "    plt.xticks(rotation=45)\n",
    "    plt.tight_layout()\n",
    "    \n",
    "    # Force display\n",
    "    plt.draw()\n",
    "    plt.pause(0.1)\n",
    "    plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

==================================================

File: c:\GH\ras-commander\examples\20_2d_hdf_data_extraction.ipynb
==================================================
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# HEC-RAS 2D HDF Data Analysis Notebook\n",
    "\n",
    "This notebook demonstrates how to manipulate and analyze HEC-RAS 2D HDF data using the ras-commander library. It leverages the HdfBase, HdfUtils, HdfStruc, HdfMesh, HdfXsec, HdfBndry, HdfPlan, HdfResultsPlan, HdfResultsMesh, and HdfResultsXsec classes to streamline data extraction, processing, and visualization.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import required Libraries\n",
    "import subprocess\n",
    "import sys\n",
    "import os\n",
    "from pathlib import Path\n",
    "\n",
    "def install_module(module_name):\n",
    "    try:\n",
    "        __import__(module_name)\n",
    "    except ImportError:\n",
    "        print(f\"{module_name} not found. Installing...\")\n",
    "        subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", \"-U\", module_name])\n",
    "\n",
    "# List of modules to check and install if necessary\n",
    "modules = ['h5py', 'numpy', 'requests', 'geopandas', 'matplotlib', 'pandas', 'pyproj', 'shapely', 'xarray', 'rasterio', 'tqdm']\n",
    "for module in modules:\n",
    "    install_module(module)\n",
    "\n",
    "# Import the rest of the required libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import geopandas as gpd\n",
    "import matplotlib.pyplot as plt\n",
    "import pyproj\n",
    "from shapely.geometry import Point, LineString, Polygon\n",
    "import xarray as xr\n",
    "from mpl_toolkits.axes_grid1.inset_locator import inset_axes\n",
    "import matplotlib.patches as patches\n",
    "from matplotlib.patches import ConnectionPatch\n",
    "import logging\n",
    "from pathlib import Path\n",
    "import rasterio\n",
    "from rasterio.plot import show\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Install ras-commander if you are not in a dev environment. \n",
    "# install_module(ras-commander)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Importing ras-commander flexibly (from package or local dev copy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Flexible Import for RAS Commander\n",
    "import sys\n",
    "from pathlib import Path\n",
    "\n",
    "# Flexible imports to allow for development without installation \n",
    "#  ** Use this version with Jupyter Notebooks **\n",
    "try:\n",
    "    # Try to import from the installed package\n",
    "    from ras_commander import (init_ras_project, HdfBase, HdfUtils, HdfFluvialPluvial, HdfStruc, HdfMesh, HdfXsec, HdfBndry, HdfPlan, HdfResultsPlan, HdfResultsMesh, HdfResultsXsec, HdfPipe, HdfPump, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, RasPrj, RasGpt, ras)\n",
    "    from ras_commander.Decorators import standardize_input, log_call\n",
    "    from ras_commander.LoggingConfig import setup_logging, get_logger\n",
    "except ImportError:\n",
    "    # If the import fails, add the parent directory to the Python path\n",
    "    print(\"Using Local Dev Copy\")\n",
    "    import os\n",
    "    current_file = Path(os.getcwd()).resolve()\n",
    "    parent_directory = current_file.parent\n",
    "    sys.path.append(str(parent_directory))\n",
    "    \n",
    "    # Now try to import again\n",
    "    from ras_commander import (init_ras_project, HdfBase, HdfUtils, HdfFluvialPluvial, HdfStruc, HdfMesh, HdfXsec, HdfBndry, HdfPlan, HdfResultsPlan, HdfResultsMesh, HdfResultsXsec, HdfPipe, HdfPump, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, RasPrj, RasGpt, ras)\n",
    "    from ras_commander.Decorators import standardize_input, log_call\n",
    "    from ras_commander.LoggingConfig import setup_logging, get_logger\n",
    "\n",
    "print(\"ras_commander imported successfully\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Download the BaldEagleCrkMulti2D project from HEC and Run Plan 06\n",
    "\n",
    "# Define the path to the BaldEagleCrkMulti2D project\n",
    "current_dir = Path.cwd()  # Adjust if your notebook is in a different directory\n",
    "bald_eagle_path = current_dir / \"example_projects\" / \"BaldEagleCrkMulti2D\"\n",
    "import logging\n",
    "\n",
    "# Check if BaldEagleCrkMulti2D.p06.hdf exists (so we don't have to re-run the simulation when re-running or debugging)\n",
    "hdf_file = bald_eagle_path / \"BaldEagleDamBrk.p06.hdf\"\n",
    "\n",
    "if not hdf_file.exists():\n",
    "    # Initialize RasExamples and extract the BaldEagleCrkMulti2D project\n",
    "    ras_examples = RasExamples()\n",
    "    ras_examples.extract_project([\"BaldEagleCrkMulti2D\"])\n",
    "\n",
    "    # Initialize custom Ras object\n",
    "    bald_eagle = RasPrj()\n",
    "\n",
    "    # Initialize the RAS project using the custom ras object\n",
    "    bald_eagle = init_ras_project(bald_eagle_path, \"6.6\", ras_instance=bald_eagle)\n",
    "    logging.info(f\"Bald Eagle project initialized with folder: {bald_eagle.project_folder}\")\n",
    "    \n",
    "    logging.info(f\"Bald Eagle object id: {id(bald_eagle)}\")\n",
    "    \n",
    "    # Define the plan number to execute\n",
    "    plan_number = \"06\"\n",
    "\n",
    "    # Update run flags for the project\n",
    "    RasPlan.update_run_flags(\n",
    "        plan_number,\n",
    "        geometry_preprocessor=True,\n",
    "        unsteady_flow_simulation=True,\n",
    "        run_sediment=False,\n",
    "        post_processor=True,\n",
    "        floodplain_mapping=False,\n",
    "        ras_object=bald_eagle\n",
    "    )\n",
    "\n",
    "    # Execute Plan 06 using RasCmdr for Bald Eagle\n",
    "    print(f\"Executing Plan {plan_number} for the Bald Eagle Creek project...\")\n",
    "    success_bald_eagle = RasCmdr.compute_plan(plan_number, ras_object=bald_eagle)\n",
    "    if success_bald_eagle:\n",
    "        print(f\"Plan {plan_number} executed successfully for Bald Eagle.\\n\")\n",
    "    else:\n",
    "        print(f\"Plan {plan_number} execution failed for Bald Eagle.\\n\")\n",
    "else:\n",
    "    print(\"BaldEagleCrkMulti2D.p06.hdf already exists. Skipping project extraction and plan execution.\")\n",
    "    # Initialize the RAS project using the custom ras object\n",
    "    bald_eagle = RasPrj()\n",
    "    bald_eagle = init_ras_project(bald_eagle_path, \"6.6\", ras_instance=bald_eagle)\n",
    "    plan_number = \"06\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load Plan and Geometry Dataframes and find Plan and Geometry HDF Paths\n",
    "\n",
    "# Display plan_df for bald_eagle project\n",
    "print(\"Plan DataFrame for bald_eagle project:\")\n",
    "display(bald_eagle.plan_df)\n",
    "\n",
    "# Display geom_df for bald_eagle project\n",
    "print(\"\\nGeometry DataFrame for bald_eagle project:\")\n",
    "display(bald_eagle.geom_df)\n",
    "\n",
    "# Get the plan HDF path\n",
    "plan_number = \"06\"  # Assuming we're using plan 01 as in the previous code\n",
    "plan_hdf_path = bald_eagle.plan_df.loc[bald_eagle.plan_df['plan_number'] == plan_number, 'HDF_Results_Path'].values[0]\n",
    "\n",
    "# Get the geometry file number from the plan DataFrame\n",
    "geom_file = bald_eagle.plan_df.loc[bald_eagle.plan_df['plan_number'] == plan_number, 'Geom File'].values[0]\n",
    "geom_number = geom_file[1:]  # Remove the 'g' prefix\n",
    "\n",
    "# Get the geometry HDF path\n",
    "geom_hdf_path = bald_eagle.geom_df.loc[bald_eagle.geom_df['geom_number'] == geom_number, 'hdf_path'].values[0]\n",
    "\n",
    "print(f\"\\nPlan HDF path for Plan {plan_number}: {plan_hdf_path}\")\n",
    "print(f\"Geometry HDF path for Plan {plan_number}: {geom_hdf_path}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the HDF input path as Plan Number\n",
    "\n",
    "plan_number = \"06\"  # Assuming we're using plan 01 as in the previous code\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "RasHdfUtils\n",
    "| Method Name | Description |\n",
    "|-------------|-------------|\n",
    "| get_attrs | Converts attributes from a HEC-RAS HDF file into a Python dictionary for a given attribute path |\n",
    "| get_root_attrs | Returns attributes at root level of HEC-RAS HDF file |\n",
    "| get_hdf_paths_with_properties | Gets all paths in the HDF file with their properties |\n",
    "| get_group_attributes_as_df | Gets attributes of a group in the HDF file as a DataFrame |\n",
    "| get_hdf_filename | Gets the HDF filename from various input types |\n",
    "| get_runtime_data | Extracts runtime and compute time data from a single HDF file |\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get HDF Paths with Properties (For Exploring HDF Files)\n",
    "HdfBase.get_dataset_info(plan_number, ras_object=bald_eagle, group_path=\"/\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Extract runtime and compute time data\n",
    "print(\"\\nExample 2: Extracting runtime and compute time data\")\n",
    "runtime_df = HdfResultsPlan.get_runtime_data(hdf_input=plan_number, ras_object=bald_eagle)\n",
    "if runtime_df is not None:\n",
    "    display(runtime_df)\n",
    "else:\n",
    "    print(\"No runtime data found.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "runtime_df example output: \n",
    "\n",
    "| Plan Name                        | File Name                     | Simulation Start Time | Simulation End Time | Simulation Duration (s) | Simulation Time (hr) | Completing Geometry (hr) | Preprocessing Geometry (hr) | Completing Event Conditions (hr) | Unsteady Flow Computations (hr) | Complete Process (hr) | Unsteady Flow Speed (hr/hr) | Complete Process Speed (hr/hr) |\n",
    "|----------------------------------|-------------------------------|-----------------------|---------------------|-------------------------|-----------------------|--------------------------|------------------------------|----------------------------------|----------------------------------|-----------------------|------------------------------|----------------------------------|\n",
    "| Gridded Precip - Infiltration    | BaldEagleDamBrk.p06.hdf      | 09Sep2018 00:00:00    | 14Sep2018 00:00:00  | 432000.0                | 120.0                 | N/A                      | 0.000113                     | N/A                              | 0.074436                        | 0.080951              | 1612.126776                  | 1482.386368                      |"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Table of all the functions in the RasGeomHdf class from the ras_commander/RasGeomHdf.py file:\n",
    "\n",
    "| Function Name | Description |\n",
    "|---------------|-------------|\n",
    "| projection | Returns the projection of the RAS geometry as a pyproj.CRS object |\n",
    "| get_geom_attrs | Returns base geometry attributes from a HEC-RAS HDF file |\n",
    "\n",
    "| mesh_area_names | Returns a list of the 2D mesh area names of the RAS geometry |\n",
    "| get_geom_2d_flow_area_attrs | Returns geometry 2d flow area attributes from a HEC-RAS HDF file |\n",
    "| mesh_areas | Returns 2D flow area perimeter polygons |\n",
    "| mesh_cell_polygons | Returns 2D flow mesh cell polygons |\n",
    "| mesh_cell_points | Returns 2D flow mesh cell points |\n",
    "| mesh_cell_faces | Returns 2D flow mesh cell faces |\n",
    "\n",
    "| get_geom_structures_attrs | Returns geometry structures attributes from a HEC-RAS HDF file |\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "| bc_lines | Returns 2D mesh area boundary condition lines |\n",
    "| breaklines | Returns 2D mesh area breaklines |\n",
    "\n",
    "\n",
    "\n",
    "| refinement_regions | Returns 2D mesh area refinement regions |\n",
    "| structures | Returns the model structures |\n",
    "| reference_lines_names | Returns reference line names |\n",
    "| reference_points_names | Returns reference point names |\n",
    "| reference_lines | Returns the reference lines geometry and attributes |\n",
    "| reference_points | Returns the reference points geometry and attributes |\n",
    "| cross_sections | Returns the model 1D cross sections |\n",
    "| river_reaches | Returns the model 1D river reach lines |\n",
    "| cross_sections_elevations | Returns the model cross section elevation information |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# For all of the RasGeomHdf Class Functions, we will use geom_hdf_path\n",
    "print(geom_hdf_path)\n",
    "\n",
    "# For the example project, plan 06 is associated with geometry 09\n",
    "# If you want to call the geometry by number, call RasHdfGeom functions with a number\n",
    "# Otherwise, if you want to look up geometry hdf path by plan number, follow the logic in the previous code cells"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use HdfUtils for extracting projection\n",
    "print(\"\\nExtracting Projection from HDF\")\n",
    "projection = HdfBase.get_projection(hdf_path=geom_hdf_path)\n",
    "if projection:\n",
    "    print(f\"Projection: {projection}\")\n",
    "else:\n",
    "    print(\"No projection information found.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use HdfPlan for geometry-related operations\n",
    "print(\"\\nExample: Extracting Geometry Information\")\n",
    "geom_attrs = HdfPlan.get_geometry_information(geom_hdf_path)\n",
    "display(geom_attrs)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "geom_attrs output: \n",
    "\n",
    "| Complete Geometry | Extents | Geometry Time | Infiltration Date Last Modified | Infiltration File Date | Infiltration Filename | Infiltration Layername | Land Cover Date Last Modified | Land Cover File Date | Land Cover Filename | ... | Percent Impervious Date Last Modified | Percent Impervious File Date | Percent Impervious Filename | Percent Impervious Layername | SI Units | Terrain File Date | Terrain Filename | Terrain Layername | Title | Version |\n",
    "|-------------------|---------|---------------|---------------------------------|-----------------------|----------------------|------------------------|------------------------------|----------------------|---------------------|-----|--------------------------------------|-----------------------------|----------------------------|------------------------------|----------|-------------------|------------------|-------------------|-------|---------|\n",
    "| 0                 | True    | [1960041.35636708, 2092643.59732271, 285497.89...] | 27Oct2024 20:09:19 | 11MAR2022 13:52:44 | 24NOV2020 13:24:58 | .\\Soils Data\\Infiltration.hdf | Infiltration | 11MAR2022 13:45:08 | 11MAR2022 13:45:08 | .\\Land Classification\\LandCover.hdf | ... | 11MAR2022 13:45:08 | 11MAR2022 13:45:08 | .\\Land Classification\\LandCover.hdf | LandCover | False | 09FEB2015 08:26:58 | .\\Terrain\\Terrain50.hdf | Terrain50 | Single 2D Area - Internal Dam Structure | 1.0.20 (20Sep2024) |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use HdfMesh for geometry-related operations\n",
    "print(\"\\nExample 3: Listing 2D Flow Area Names\")\n",
    "flow_area_names = HdfMesh.get_mesh_area_names(geom_hdf_path)\n",
    "print(\"2D Flow Area Name (returned as list):\\n\", flow_area_names)\n",
    "# Note: this is returned as a list because it is used internally by other functions.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Get 2D Flow Area Attributes (get_mesh_area_attributes)\n",
    "print(\"\\nExample: Extracting 2D Flow Area Attributes\")\n",
    "flow_area_attributes = HdfMesh.get_mesh_area_attributes(geom_hdf_path)\n",
    "display(flow_area_attributes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "flow_area_df:\n",
    "\n",
    "Value\n",
    "| Name                        | b'BaldEagleCr' |\n",
    "|-----------------------------|-----------------|\n",
    "| Locked                      | 0               |\n",
    "| Mann                        | 0.04            |\n",
    "| Multiple Face Mann n       | 0               |\n",
    "| Composite LC               | 0               |\n",
    "| Cell Vol Tol               | 0.01            |\n",
    "| Cell Min Area Fraction      | 0.01            |\n",
    "| Face Profile Tol           | 0.01            |\n",
    "| Face Area Tol              | 0.01            |\n",
    "| Face Conv Ratio            | 0.02            |\n",
    "| Laminar Depth              | 0.2             |\n",
    "| Min Face Length Ratio      | 0.05            |\n",
    "| Spacing dx                 | 250.0           |\n",
    "| Spacing dy                 | 250.0           |\n",
    "| Shift dx                   | NaN             |\n",
    "| Shift dy                   | NaN             |\n",
    "| Cell Count                 | 18066           |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Get 2D Flow Area Perimeter Polygons (get_mesh_areas)\n",
    "print(\"\\nExample: Extracting 2D Flow Area Perimeter Polygons\")\n",
    "mesh_areas = HdfMesh.get_mesh_areas(geom_hdf_path, ras_object=bald_eagle)\n",
    "\n",
    "# Plot the 2D Flow Area Perimeter Polygons\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 8))\n",
    "mesh_areas.plot(ax=ax, edgecolor='black', facecolor='none')\n",
    "\n",
    "# Add labels for each polygon\n",
    "for idx, row in mesh_areas.iterrows():\n",
    "    centroid = row.geometry.centroid\n",
    "    # Check if 'Name' column exists, otherwise use a default label\n",
    "    label = row.get('Name', f'Area {idx}')\n",
    "    ax.annotate(label, (centroid.x, centroid.y), ha='center', va='center')\n",
    "\n",
    "plt.title('2D Flow Area Perimeter Polygons')\n",
    "plt.xlabel('Easting')\n",
    "plt.ylabel('Northing')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Extract mesh cell faces\n",
    "print(\"\\nExample: Extracting mesh cell faces\")\n",
    "\n",
    "# Get mesh cell faces\n",
    "mesh_cell_faces = HdfMesh.get_mesh_cell_faces(geom_hdf_path, ras_object=bald_eagle)\n",
    "\n",
    "# Display the first few rows of the mesh cell faces DataFrame\n",
    "print(\"First few rows of mesh cell faces:\")\n",
    "display(mesh_cell_faces.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "mesh_cell_faces geodataframe:\n",
    "\n",
    "flow_area_df:\n",
    "\n",
    "| mesh_name    | face_id | geometry                                           |\n",
    "|--------------|---------|----------------------------------------------------|\n",
    "| BaldEagleCr  | 0       | LINESTRING (2042125 351625, 2042375 351625)      |\n",
    "| BaldEagleCr  | 1       | LINESTRING (2042375 351625, 2042375 351875)      |\n",
    "| BaldEagleCr  | 2       | LINESTRING (2042375 351875, 2042125 351875)      |\n",
    "| BaldEagleCr  | 3       | LINESTRING (2042125 351875, 2042125 351625)      |\n",
    "| BaldEagleCr  | 4       | LINESTRING (2042375 351375, 2042375 351625)      |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib.collections import LineCollection\n",
    "import numpy as np\n",
    "\n",
    "# Plot the mesh cell faces more efficiently\n",
    "fig, ax = plt.subplots(figsize=(12, 8))\n",
    "\n",
    "# Convert all geometries to numpy arrays at once for faster plotting\n",
    "lines = [list(zip(*line.xy)) for line in mesh_cell_faces.geometry]\n",
    "lines_collection = LineCollection(lines, colors='blue', linewidth=0.5, alpha=0.5)\n",
    "ax.add_collection(lines_collection)\n",
    "\n",
    "# Set plot title and labels\n",
    "plt.title('Mesh Cell Faces')\n",
    "plt.xlabel('Easting')\n",
    "plt.ylabel('Northing')\n",
    "\n",
    "# Calculate centroids once and store as numpy arrays\n",
    "centroids = np.array([[geom.centroid.x, geom.centroid.y] for geom in mesh_cell_faces.geometry])\n",
    "\n",
    "# Create scatter plot with numpy arrays\n",
    "scatter = ax.scatter(\n",
    "    centroids[:, 0],\n",
    "    centroids[:, 1], \n",
    "    c=mesh_cell_faces['face_id'],\n",
    "    cmap='viridis',\n",
    "    s=1,\n",
    "    alpha=0.5\n",
    ")\n",
    "plt.colorbar(scatter, label='Face ID')\n",
    "\n",
    "# Set axis limits based on data bounds\n",
    "ax.set_xlim(centroids[:, 0].min(), centroids[:, 0].max())\n",
    "ax.set_ylim(centroids[:, 1].min(), centroids[:, 1].max())\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Calculate and display some statistics\n",
    "print(\"\\nMesh Cell Faces Statistics:\")\n",
    "print(f\"Total number of cell faces: {len(mesh_cell_faces)}\")\n",
    "print(f\"Number of unique meshes: {mesh_cell_faces['mesh_name'].nunique()}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to find the nearest cell face to a given point\n",
    "def find_nearest_cell_face(point, cell_faces_df):\n",
    "    \"\"\"\n",
    "    Find the nearest cell face to a given point.\n",
    "\n",
    "    Args:\n",
    "        point (shapely.geometry.Point): The input point.\n",
    "        cell_faces_df (GeoDataFrame): DataFrame containing cell face linestrings.\n",
    "\n",
    "    Returns:\n",
    "        int: The face_id of the nearest cell face.\n",
    "        float: The distance to the nearest cell face.\n",
    "    \"\"\"\n",
    "    # Calculate distances from the input point to all cell faces\n",
    "    distances = cell_faces_df.geometry.distance(point)\n",
    "\n",
    "    # Find the index of the minimum distance\n",
    "    nearest_index = distances.idxmin()\n",
    "\n",
    "    # Get the face_id and distance of the nearest cell face\n",
    "    nearest_face_id = cell_faces_df.loc[nearest_index, 'face_id']\n",
    "    nearest_distance = distances[nearest_index]\n",
    "\n",
    "    return nearest_face_id, nearest_distance\n",
    "\n",
    "# Example usage\n",
    "print(\"\\nExample: Finding the nearest cell face to a given point\")\n",
    "\n",
    "# Create a sample point (you can replace this with any point of interest)\n",
    "from shapely.geometry import Point\n",
    "from geopandas import GeoDataFrame\n",
    "\n",
    "# Get the projection from the geometry file\n",
    "# projection = HdfUtils.get_projection(hdf_path=geom_hdf_path) # This was done in a previous code cell\n",
    "if projection:\n",
    "    print(f\"Using projection: {projection}\")\n",
    "else:\n",
    "    print(\"No projection information found. Using default CRS.\")\n",
    "    projection = \"EPSG:4326\"  # Default to WGS84 if no projection is found\n",
    "\n",
    "# Create the sample point with the correct CRS\n",
    "sample_point = GeoDataFrame({'geometry': [Point(2042250, 351750)]}, crs=projection)\n",
    "\n",
    "if not mesh_cell_faces.empty and not sample_point.empty:\n",
    "    # Ensure the CRS of the sample point matches the mesh_cell_faces\n",
    "    if sample_point.crs != mesh_cell_faces.crs:\n",
    "        sample_point = sample_point.to_crs(mesh_cell_faces.crs)\n",
    "    \n",
    "    nearest_face_id, distance = find_nearest_cell_face(sample_point.geometry.iloc[0], mesh_cell_faces)\n",
    "    print(f\"Nearest cell face to point {sample_point.geometry.iloc[0].coords[0]}:\")\n",
    "    print(f\"Face ID: {nearest_face_id}\")\n",
    "    print(f\"Distance: {distance:.2f} units\")\n",
    "\n",
    "    # Visualize the result\n",
    "    fig, ax = plt.subplots(figsize=(12, 8))\n",
    "    \n",
    "    # Plot all cell faces\n",
    "    mesh_cell_faces.plot(ax=ax, color='blue', linewidth=0.5, alpha=0.5, label='Cell Faces')\n",
    "    \n",
    "    # Plot the sample point\n",
    "    sample_point.plot(ax=ax, color='red', markersize=100, alpha=0.7, label='Sample Point')\n",
    "    \n",
    "    # Plot the nearest cell face\n",
    "    nearest_face = mesh_cell_faces[mesh_cell_faces['face_id'] == nearest_face_id]\n",
    "    nearest_face.plot(ax=ax, color='green', linewidth=2, alpha=0.7, label='Nearest Face')\n",
    "    \n",
    "    # Set labels and title\n",
    "    ax.set_xlabel('X Coordinate')\n",
    "    ax.set_ylabel('Y Coordinate')\n",
    "    ax.set_title('Nearest Cell Face to Sample Point')\n",
    "    \n",
    "    # Add legend and grid\n",
    "    ax.legend()\n",
    "    ax.grid(True)\n",
    "    \n",
    "    # Adjust layout and display\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "else:\n",
    "    print(\"Unable to perform nearest cell face search due to missing data.\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Extract Cell Polygons\n",
    "print(\"\\nExample 6: Extracting Cell Polygons\")\n",
    "cell_polygons_df = HdfMesh.get_mesh_cell_polygons(geom_hdf_path, ras_object=bald_eagle)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "cell_polygons_df:\n",
    "\n",
    "| mesh_name    | cell_id | geometry                                      |\n",
    "|--------------|---------|-----------------------------------------------|\n",
    "| BaldEagleCr  | 0       | POLYGON ((2082875 370625, 2082723.922 370776.0... |\n",
    "| BaldEagleCr  | 1       | POLYGON ((2083125 370625, 2083125 370844.185, ... |\n",
    "| BaldEagleCr  | 2       | POLYGON ((2083375 370625, 2083375 370886.638, ... |\n",
    "| BaldEagleCr  | 3       | POLYGON ((2083625 370625, 2083625 370925.693, ... |\n",
    "| BaldEagleCr  | 4       | POLYGON ((2083875 370625, 2083875 370958.588, ... |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot Cell Polygons\n",
    "if not cell_polygons_df.empty:\n",
    "    display(cell_polygons_df.head())\n",
    "else:\n",
    "    print(\"No Cell Polygons found.\")\n",
    "\n",
    "# Plot cell polygons\n",
    "if not cell_polygons_df.empty:\n",
    "    fig, ax = plt.subplots(figsize=(12, 8))\n",
    "    \n",
    "    # Plot cell polygons\n",
    "    cell_polygons_df.plot(ax=ax, edgecolor='blue', facecolor='none')\n",
    "    \n",
    "    # Set labels and title\n",
    "    ax.set_xlabel('X Coordinate')\n",
    "    ax.set_ylabel('Y Coordinate')\n",
    "    ax.set_title('2D Flow Area Cell Polygons')\n",
    "    \n",
    "    # Add grid\n",
    "    ax.grid(True)\n",
    "    \n",
    "    # Adjust layout and display\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "else:\n",
    "    print(\"No cell polygon data available for plotting.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Extract Cell Info\n",
    "print(\"\\nExample 5: Extracting Cell Info\")\n",
    "cell_info_df = HdfMesh.get_mesh_cell_points(geom_hdf_path, ras_object=bald_eagle)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "cell_info_df: \n",
    "\n",
    "| mesh_name    | cell_id | geometry                          |\n",
    "|--------------|---------|-----------------------------------|\n",
    "| BaldEagleCr  | 0       | POINT (2083000 370750)           |\n",
    "| BaldEagleCr  | 1       | POINT (2083250 370750)           |\n",
    "| BaldEagleCr  | 2       | POINT (2083500 370750)           |\n",
    "| BaldEagleCr  | 3       | POINT (2083750 370750)           |\n",
    "| BaldEagleCr  | 4       | POINT (2084000 370750)           |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot Cell Info\n",
    "if not cell_info_df.empty:\n",
    "    display(cell_info_df.head())\n",
    "else:\n",
    "    print(\"No Cell Info found.\")\n",
    "\n",
    "# Plot cell centers\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "if not cell_info_df.empty:\n",
    "    fig, ax = plt.subplots(figsize=(12, 8))\n",
    "    \n",
    "    # Plot cell centers\n",
    "    cell_info_df.plot(ax=ax, color='red', markersize=5)\n",
    "    \n",
    "    # Set labels and title\n",
    "    ax.set_xlabel('X Coordinate')\n",
    "    ax.set_ylabel('Y Coordinate')\n",
    "    ax.set_title('2D Flow Area Cell Centers')\n",
    "    \n",
    "    # Add grid\n",
    "    ax.grid(True)\n",
    "    \n",
    "    # Adjust layout and display\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "else:\n",
    "    print(\"No cell data available for plotting.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to find the nearest cell center to a given point\n",
    "def find_nearest_cell(point, cell_centers_df):\n",
    "    \"\"\"\n",
    "    Find the nearest cell center to a given point.\n",
    "\n",
    "    Args:\n",
    "        point (shapely.geometry.Point): The input point.\n",
    "        cell_centers_df (GeoDataFrame): DataFrame containing cell center points.\n",
    "\n",
    "    Returns:\n",
    "        int: The cell_id of the nearest cell.\n",
    "        float: The distance to the nearest cell center.\n",
    "    \"\"\"\n",
    "    # Calculate distances from the input point to all cell centers\n",
    "    distances = cell_centers_df.geometry.distance(point)\n",
    "\n",
    "    # Find the index of the minimum distance\n",
    "    nearest_index = distances.idxmin()\n",
    "\n",
    "    # Get the cell_id and distance of the nearest cell\n",
    "    nearest_cell_id = cell_centers_df.loc[nearest_index, 'cell_id']\n",
    "    nearest_distance = distances[nearest_index]\n",
    "\n",
    "    return nearest_cell_id, nearest_distance\n",
    "\n",
    "# Example usage\n",
    "print(\"\\nExample: Finding the nearest cell to a given point\")\n",
    "\n",
    "# Create a sample point (you can replace this with any point of interest)\n",
    "from shapely.geometry import Point\n",
    "from geopandas import GeoDataFrame\n",
    "\n",
    "# Get the projection from the geometry file\n",
    "# projection = HdfUtils.get_projection(hdf_path=geom_hdf_path) # This was done in a previous code cell\n",
    "if projection:\n",
    "    print(f\"Using projection: {projection}\")\n",
    "else:\n",
    "    print(\"No projection information found. Using default CRS.\")\n",
    "    projection = \"EPSG:4326\"  # Default to WGS84 if no projection is found\n",
    "\n",
    "# Create the sample point with the correct CRS\n",
    "sample_point = GeoDataFrame({'geometry': [Point(2083500, 370800)]}, crs=projection)\n",
    "\n",
    "if not cell_info_df.empty and not sample_point.empty:\n",
    "    # Ensure the CRS of the sample point matches the cell_info_df\n",
    "    if sample_point.crs != cell_info_df.crs:\n",
    "        sample_point = sample_point.to_crs(cell_info_df.crs)\n",
    "    \n",
    "    nearest_cell_id, distance = find_nearest_cell(sample_point.geometry.iloc[0], cell_info_df)\n",
    "    print(f\"Nearest cell to point {sample_point.geometry.iloc[0].coords[0]}:\")\n",
    "    print(f\"Cell ID: {nearest_cell_id}\")\n",
    "    print(f\"Distance: {distance:.2f} units\")\n",
    "\n",
    "    # Visualize the result\n",
    "    fig, ax = plt.subplots(figsize=(12, 8))\n",
    "    \n",
    "    # Plot all cell centers\n",
    "    cell_info_df.plot(ax=ax, color='blue', markersize=5, alpha=0.5, label='Cell Centers')\n",
    "    \n",
    "    # Plot the sample point\n",
    "    sample_point.plot(ax=ax, color='red', markersize=100, alpha=0.7, label='Sample Point')\n",
    "    \n",
    "    # Plot the nearest cell center\n",
    "    nearest_cell = cell_info_df[cell_info_df['cell_id'] == nearest_cell_id]\n",
    "    nearest_cell.plot(ax=ax, color='green', markersize=100, alpha=0.7, label='Nearest Cell')\n",
    "    \n",
    "    # Set labels and title\n",
    "    ax.set_xlabel('X Coordinate')\n",
    "    ax.set_ylabel('Y Coordinate')\n",
    "    ax.set_title('Nearest Cell to Sample Point')\n",
    "    \n",
    "    # Add legend and grid\n",
    "    ax.legend()\n",
    "    ax.grid(True)\n",
    "    \n",
    "    # Adjust layout and display\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "else:\n",
    "    print(\"Unable to perform nearest cell search due to missing data.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get geometry structures attributes\n",
    "print(\"\\nGetting geometry structures attributes\")\n",
    "geom_structures_attrs = HdfStruc.get_geom_structures_attrs(geom_hdf_path, ras_object=bald_eagle)\n",
    "if geom_structures_attrs:\n",
    "    print(\"Geometry structures attributes:\")\n",
    "    for key, value in geom_structures_attrs.items():\n",
    "        print(f\"{key}: {value}\")\n",
    "else:\n",
    "    print(\"No geometry structures attributes found.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: Paths and Functions for each type of structure: \n",
    "\n",
    "# Getting geometry structures attributes\n",
    "# Geometry structures attributes:\n",
    "# Bridge/Culvert Count: 0\n",
    "# Connection Count: 4\n",
    "# Has Bridge Opening (2D): 0\n",
    "# Inline Structure Count: 0\n",
    "# Lateral Structure Count: 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Extract Boundary Condition Lines and Plot with 2D Flow Area Perimeter Polygons\n",
    "print(\"\\nExample 7: Extracting Boundary Condition Lines and Plotting with 2D Flow Area Perimeter Polygons\")\n",
    "bc_lines_df = HdfBndry.get_bc_lines(geom_hdf_path, ras_object=bald_eagle)\n",
    "\n",
    "if not bc_lines_df.empty:\n",
    "    display(bc_lines_df.head())\n",
    "else:\n",
    "    print(\"No Boundary Condition Lines found.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "| bc_line_id |         name         |    mesh_name    |    type    |                                           geometry                                            |\n",
    "|-------------|----------------------|------------------|------------|------------------------------------------------------------------------------------------------|\n",
    "|      0      |     DSNormalDepth    |   BaldEagleCr    |  External  | LINESTRING (2082004.235 364024.82, 2083193.546...)                                          |\n",
    "|      1      |       DS2NormalD     |   BaldEagleCr    |  External  | LINESTRING (2084425.804 365392.892, 2084354.64...)                                          |\n",
    "|      2      |   Upstream Inflow    |   BaldEagleCr    |  External  | LINESTRING (1967473.737 290973.629, 1969582.89...)                                          |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot Boundary Condition Lines with Perimeter\n",
    "# Plot if data exists\n",
    "if not bc_lines_df.empty or not mesh_areas.empty:\n",
    "    fig, ax = plt.subplots(figsize=(12, 8))\n",
    "    \n",
    "    # Plot 2D Flow Area Perimeter Polygons\n",
    "    if not mesh_areas.empty:\n",
    "        mesh_areas.plot(ax=ax, edgecolor='black', facecolor='none', alpha=0.7, label='2D Flow Area')\n",
    "        \n",
    "        # Add labels for each polygon\n",
    "        for idx, row in mesh_areas.iterrows():\n",
    "            centroid = row.geometry.centroid\n",
    "            label = row.get('Name', f'Area {idx}')\n",
    "            ax.annotate(label, (centroid.x, centroid.y), ha='center', va='center')\n",
    "    \n",
    "    # Plot boundary condition lines\n",
    "    if not bc_lines_df.empty:\n",
    "        bc_lines_df.plot(ax=ax, color='red', linewidth=2, label='Boundary Condition Lines')\n",
    "    \n",
    "    # Set labels and title\n",
    "    ax.set_xlabel('Easting')\n",
    "    ax.set_ylabel('Northing')\n",
    "    ax.set_title('2D Flow Area Perimeter Polygons and Boundary Condition Lines')\n",
    "    \n",
    "    # Add grid and legend\n",
    "    ax.grid(True)\n",
    "    ax.legend()\n",
    "    \n",
    "    # Adjust layout and display\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "else:\n",
    "    print(\"No data available for plotting.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Extract Breaklines and Plot with 2D Flow Area Perimeter Polygons\n",
    "print(\"\\nExample 8: Extracting Breaklines and Plotting with 2D Flow Area Perimeter Polygons\")\n",
    "breaklines_gdf = HdfBndry.get_breaklines(geom_hdf_path, ras_object=bald_eagle)\n",
    "if not breaklines_gdf.empty:\n",
    "    display(breaklines_gdf.head())\n",
    "else:\n",
    "    print(\"No Breaklines found.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "breaklines_gdf:\n",
    "\n",
    "\n",
    "| bl_id | Name      | geometry |\n",
    "|-------|-----------|----------|\n",
    "| 0     | SayersDam | LINESTRING (2002361.246 323707.927, 2002741.35...) |\n",
    "| 1     | Lower     | LINESTRING (2060356.422 351786.819, 2060316.47...) |\n",
    "| 2     | Middle    | LINESTRING (2052757.788 348470.547, 2052785.84...) |\n",
    "| 3     | Upper     | LINESTRING (2045597.199 348412.994, 2045638.91...) |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot breaklines and 2D Flow Area Perimeter Polygons if they exist\n",
    "if not breaklines_gdf.empty or not mesh_areas.empty:\n",
    "    fig, ax = plt.subplots(figsize=(12, 8))\n",
    "    \n",
    "    # Plot 2D Flow Area Perimeter Polygons\n",
    "    if not mesh_areas.empty:\n",
    "        mesh_areas.plot(ax=ax, edgecolor='black', facecolor='none', alpha=0.7, label='2D Flow Area')\n",
    "        \n",
    "        # Add labels for each polygon\n",
    "        for idx, row in mesh_areas.iterrows():\n",
    "            centroid = row.geometry.centroid\n",
    "            label = row.get('Name', f'Area {idx}')\n",
    "            ax.annotate(label, (centroid.x, centroid.y), ha='center', va='center')\n",
    "    \n",
    "    # Plot breaklines\n",
    "    if not breaklines_gdf.empty:\n",
    "        breaklines_gdf.plot(ax=ax, color='blue', linewidth=2, label='Breaklines')\n",
    "    \n",
    "    # Set labels and title\n",
    "    ax.set_xlabel('Easting')\n",
    "    ax.set_ylabel('Northing')\n",
    "    ax.set_title('2D Flow Area Perimeter Polygons and Breaklines')\n",
    "    \n",
    "    # Add grid and legend\n",
    "    ax.grid(True)\n",
    "    ax.legend()\n",
    "    \n",
    "    # Adjust layout and display\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "else:\n",
    "    print(\"No data available for plotting.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# INSTEAD OF hdf_input, USE plan_hdf_path or geom_hdf_path as appropriate "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Get structures\n",
    "structures_gdf = HdfStruc.get_structures(geom_hdf_path, ras_object=bald_eagle)\n",
    "print(\"Structures:\")\n",
    "if not structures_gdf.empty:\n",
    "    display(structures_gdf.head())\n",
    "else:\n",
    "    print(\"No structures found in the geometry file.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "structures_gdf: \n",
    "\n",
    "| Type | Mode | River | Reach | RS | Connection | Groupname | US Type | US River | US Reach | ... | US XS Mann (Count) | US BR Mann (Index) | US BR Mann (Count) | DS XS Mann (Index) | DS XS Mann (Count) | DS BR Mann (Index) | DS BR Mann (Count) | RC (Index) | RC (Count) | Profile_Data |\n",
    "|------|------|-------|-------|-------|------------|-----------|----------|-----------|-----------|-----|-------------------|-------------------|-------------------|-------------------|-------------------|-------------------|-------------------|------------|------------|--------------|\n",
    "| Connection | Weir/Gate/Culverts | | | | Sayers Dam | BaldEagleCr, Sayers Dam | 2D | | | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | [{'Station': 0.0, 'Elevation': 683.0}, {'Stati... |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Get boundary condition lines\n",
    "ref_lines_gdf = HdfBndry.get_bc_lines(geom_hdf_path)\n",
    "print(\"\\nBoundary Condition Lines:\")\n",
    "if not ref_lines_gdf.empty:\n",
    "    display(ref_lines_gdf.head())\n",
    "else:\n",
    "    print(\"No boundary condition lines found in the geometry file.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Get reference points\n",
    "ref_points_gdf = HdfBndry.get_reference_points(geom_hdf_path)\n",
    "print(\"\\nReference Points:\")\n",
    "if not ref_points_gdf.empty:\n",
    "    display(ref_points_gdf.head())\n",
    "else:\n",
    "    print(\"No reference points found in the geometry file.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Extract Breakline as Reference Line\n",
    "\n",
    "We can't use a profile line, because the mesh orientation may be quite different than the direction of flow.  \n",
    "\n",
    "Instead, use a breakline - the one named \"SayersDam\" should work\n",
    "\n",
    "We can find the information specific to faces: \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Extract Composite Results for 2D at Profile Lines to simulate Reference Lines\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Extract Refinement Regions\n",
    "print(\"\\nExample: Extracting Refinement Regions\")\n",
    "\n",
    "# Make sure to pass the bald_eagle object as the ras_object parameter\n",
    "refinement_regions_df = HdfBndry.get_refinement_regions(geom_hdf_path, ras_object=bald_eagle)\n",
    "\n",
    "if not refinement_regions_df.empty:\n",
    "    print(\"Refinement Regions DataFrame:\")\n",
    "    display(refinement_regions_df.head())\n",
    "    \n",
    "    # Plot refinement regions\n",
    "    fig, ax = plt.subplots(figsize=(12, 8))\n",
    "    refinement_regions_df.plot(ax=ax, column='CellSize', legend=True, \n",
    "                               legend_kwds={'label': 'Cell Size', 'orientation': 'horizontal'},\n",
    "                               cmap='viridis')\n",
    "    ax.set_title('2D Mesh Area Refinement Regions')\n",
    "    ax.set_xlabel('Easting')\n",
    "    ax.set_ylabel('Northing')\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "else:\n",
    "    print(\"No refinement regions found in the geometry file.\")\n",
    "\n",
    "# Example: Analyze Refinement Regions\n",
    "if not refinement_regions_df.empty:\n",
    "    print(\"\\nRefinement Regions Analysis:\")\n",
    "    print(f\"Total number of refinement regions: {len(refinement_regions_df)}\")\n",
    "    print(\"\\nCell Size Statistics:\")\n",
    "    print(refinement_regions_df['CellSize'].describe())\n",
    "    \n",
    "    # Group by Shape Type\n",
    "    shape_type_counts = refinement_regions_df['ShapeType'].value_counts()\n",
    "    print(\"\\nRefinement Region Shape Types:\")\n",
    "    print(shape_type_counts)\n",
    "    \n",
    "    # Plot Shape Type distribution\n",
    "    plt.figure(figsize=(10, 6))\n",
    "    shape_type_counts.plot(kind='bar')\n",
    "    plt.title('Distribution of Refinement Region Shape Types')\n",
    "    plt.xlabel('Shape Type')\n",
    "    plt.ylabel('Count')\n",
    "    plt.xticks(rotation=45)\n",
    "    plt.tight_layout()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Extract Compute Messages as String\n",
    "print(\"Extracting Compute Messages\")\n",
    "\n",
    "import h5py\n",
    "import numpy as np\n",
    "\n",
    "def extract_string_from_hdf(results_hdf_filename: str, hdf_path: str) -> str:\n",
    "    \"\"\"\n",
    "    Extract string from HDF object at a given path\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    results_hdf_filename : str\n",
    "        Name of the HDF file\n",
    "    hdf_path : str\n",
    "        Path of the object in the HDF file\n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    str\n",
    "        Extracted string from the specified HDF object\n",
    "    \"\"\"\n",
    "    with h5py.File(results_hdf_filename, 'r') as hdf_file:\n",
    "        try:\n",
    "            hdf_object = hdf_file[hdf_path]\n",
    "            if isinstance(hdf_object, h5py.Group):\n",
    "                return f\"Group: {hdf_path}\\nContents: {list(hdf_object.keys())}\"\n",
    "            elif isinstance(hdf_object, h5py.Dataset):\n",
    "                data = hdf_object[()]\n",
    "                if isinstance(data, bytes):\n",
    "                    return data.decode('utf-8')\n",
    "                elif isinstance(data, np.ndarray) and data.dtype.kind == 'S':\n",
    "                    return [v.decode('utf-8') for v in data]\n",
    "                else:\n",
    "                    return str(data)\n",
    "            else:\n",
    "                return f\"Unsupported object type: {type(hdf_object)}\"\n",
    "        except KeyError:\n",
    "            return f\"Path not found: {hdf_path}\"\n",
    "\n",
    "try:\n",
    "    results_summary_string = extract_string_from_hdf(plan_hdf_path, '/Results/Summary/Compute Messages (text)')\n",
    "    print(\"Compute Messages:\")\n",
    "    \n",
    "    # Parse and print the compute messages in a more visually friendly way\n",
    "    messages = results_summary_string[0].split('\\r\\n')\n",
    "    \n",
    "    for message in messages:\n",
    "        if message.strip():  # Skip empty lines\n",
    "            if ':' in message:\n",
    "                key, value = message.split(':', 1)\n",
    "                print(f\"{key.strip():40} : {value.strip()}\")\n",
    "            else:\n",
    "                print(f\"\\n{message.strip()}\")\n",
    "    \n",
    "    # Print computation summary in a table format\n",
    "    print(\"\\nComputation Summary:\")\n",
    "    print(\"-\" * 50)\n",
    "    print(f\"{'Computation Task':<30} {'Time':<20}\")\n",
    "    print(\"-\" * 50)\n",
    "    for line in messages:\n",
    "        if 'Computation Task' in line:\n",
    "            task, time = line.split('\\t')\n",
    "            print(f\"{task:<30} {time:<20}\")\n",
    "    \n",
    "    print(\"\\nComputation Speed:\")\n",
    "    print(\"-\" * 50)\n",
    "    print(f\"{'Task':<30} {'Simulation/Runtime':<20}\")\n",
    "    print(\"-\" * 50)\n",
    "    for line in messages:\n",
    "        if 'Computation Speed' in line:\n",
    "            task, speed = line.split('\\t')\n",
    "            print(f\"{task:<30} {speed:<20}\")\n",
    "\n",
    "except Exception as e:\n",
    "    print(f\"Error extracting compute messages: {str(e)}\")\n",
    "    print(\"\\nNote: If 'Results/Summary Output' is not in the file structure, it might indicate that the simulation didn't complete successfully or the results weren't saved properly.\")\n",
    "\n",
    " \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Advanced Compute Messages Example - TODO: Move this function into a class of the library \n",
    "import pandas as pd\n",
    "import re\n",
    "import matplotlib.pyplot as plt\n",
    "import geopandas as gpd\n",
    "import logging\n",
    "\n",
    "# Configure logging\n",
    "logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n",
    "\n",
    "def parse_2d_compute_messages(compute_messages):\n",
    "    \"\"\"\n",
    "    Parse 2D compute messages to extract data lines, clean the data, \n",
    "    and retrieve top 20 cells with the highest error.\n",
    "\n",
    "    Parameters:\n",
    "        compute_messages (list or str): The raw compute messages.\n",
    "\n",
    "    Returns:\n",
    "        tuple: A tuple containing the parsed compute messages string and the main DataFrame.\n",
    "    \"\"\"\n",
    "    try:\n",
    "        # Handle both list and string inputs\n",
    "        if isinstance(compute_messages, list):\n",
    "            compute_messages = '\\n'.join(compute_messages)\n",
    "        elif not isinstance(compute_messages, str):\n",
    "            logging.error(f\"Unexpected type for compute_messages: {type(compute_messages)}\")\n",
    "            return \"\", pd.DataFrame()\n",
    "\n",
    "        # Split the message into lines\n",
    "        lines = compute_messages.split('\\n')\n",
    "        logging.info(\"Successfully split compute messages into lines.\")\n",
    "        \n",
    "        # Initialize lists to store parsed data\n",
    "        data_lines = []\n",
    "        header_lines = []\n",
    "        footer_lines = []\n",
    "        \n",
    "        # Regular expression to match timestamp lines\n",
    "        timestamp_pattern = re.compile(r'^\\d{2}[A-Z]{3}\\d{4}\\s+\\d{2}:\\d{2}:\\d{2}')\n",
    "        logging.debug(\"Compiled timestamp regular expression.\")\n",
    "        \n",
    "        data_started = False\n",
    "        for line in lines:\n",
    "            stripped_line = line.strip()\n",
    "            if timestamp_pattern.match(stripped_line):\n",
    "                data_started = True\n",
    "                # Split the line and add to data_lines\n",
    "                parts = stripped_line.split()\n",
    "                if len(parts) >= 8:  # Ensure we have all expected columns\n",
    "                    # Combine Date and Time into 'Date and Time'\n",
    "                    date_time = f\"{parts[0]} {parts[1]}\"\n",
    "                    location = parts[2]\n",
    "                    cell_type = f\"{parts[3]} {parts[4]}\"\n",
    "                    cell_number = parts[5]\n",
    "                    wsel = parts[6]\n",
    "                    error = parts[7]\n",
    "                    iterations = parts[8] if len(parts) > 8 else None\n",
    "                    data_lines.append([date_time, location, cell_type, cell_number, wsel, error, iterations])\n",
    "                    logging.debug(f\"Parsed data line: {data_lines[-1]}\")\n",
    "                else:\n",
    "                    logging.warning(f\"Line skipped due to insufficient parts: {stripped_line}\")\n",
    "            elif not data_started:\n",
    "                header_lines.append(stripped_line)\n",
    "            elif data_started and not stripped_line:\n",
    "                data_started = False\n",
    "            elif not data_started:\n",
    "                footer_lines.append(stripped_line)\n",
    "        \n",
    "        # Create DataFrame from data lines\n",
    "        df = pd.DataFrame(\n",
    "            data_lines, \n",
    "            columns=['Date and Time', 'Location', 'Cell Type', 'Cell Number', 'WSEL', 'ERROR', 'ITERATIONS']\n",
    "        )\n",
    "        logging.info(\"Created DataFrame from parsed data lines.\")\n",
    "        \n",
    "        # Clean and convert columns to appropriate types\n",
    "        df['Cell Number'] = (\n",
    "            pd.to_numeric(df['Cell Number'].replace('#', pd.NA), errors='coerce')\n",
    "            .fillna(-1)\n",
    "            .astype('Int64')\n",
    "        )\n",
    "        df['WSEL'] = pd.to_numeric(df['WSEL'], errors='coerce')\n",
    "        df['ERROR'] = pd.to_numeric(df['ERROR'], errors='coerce')\n",
    "        df['ITERATIONS'] = pd.to_numeric(df['ITERATIONS'], errors='coerce').astype('Int64')\n",
    "        logging.info(\"Converted DataFrame columns to appropriate types.\")\n",
    "        \n",
    "        # Get top 20 cells with highest error\n",
    "        top_20_cells = (\n",
    "            df.sort_values('ERROR', ascending=False)\n",
    "            .drop_duplicates('Cell Number')\n",
    "            .head(20)\n",
    "        )\n",
    "        \n",
    "        # Construct the reordered message\n",
    "        reordered_message = '\\n'.join(header_lines + \n",
    "                                      ['\\nTop 20 Cells with Highest Error:'] + \n",
    "                                      [' '.join(map(str, row)) for row in top_20_cells.values] + \n",
    "                                      ['\\n'] + footer_lines)\n",
    "        \n",
    "        logging.info(\"Reordered compute messages.\")\n",
    "        \n",
    "        return reordered_message, df\n",
    "    except Exception as e:\n",
    "        logging.error(f\"Error parsing compute messages: {e}\")\n",
    "        return \"\", pd.DataFrame()\n",
    "\n",
    "# Use the function to parse compute messages\n",
    "parsed_messages, df = parse_2d_compute_messages(results_summary_string)\n",
    "\n",
    "print(parsed_messages)\n",
    "print(df)\n",
    "\n",
    "# Get top 20 cells with highest error\n",
    "if not df.empty and 'ERROR' in df.columns:\n",
    "    top_20_cells = (\n",
    "        df.sort_values('ERROR', ascending=False)\n",
    "        .drop_duplicates('Cell Number')\n",
    "        .head(20)\n",
    "    )\n",
    "else:\n",
    "    logging.warning(\"Unable to get top 20 cells with highest error. DataFrame is empty or 'ERROR' column is missing.\")\n",
    "    top_20_cells = pd.DataFrame()\n",
    "\n",
    "# Example: Get 2D Flow Area Perimeter Polygons (mesh_areas)\n",
    "print(\"\\nExample: Extracting 2D Flow Area Perimeter Polygons\")\n",
    "mesh_areas = HdfMesh.get_mesh_areas(geom_hdf_path, ras_object=bald_eagle)\n",
    "\n",
    "print(\"\\n2D Flow Area Groups and Perimeters:\")\n",
    "if not mesh_areas.empty:\n",
    "    print(\"Available columns:\", mesh_areas.columns.tolist())\n",
    "    \n",
    "    # Display the first few rows of the mesh_areas DataFrame\n",
    "    print(\"\\nFirst few rows of mesh_areas DataFrame:\")\n",
    "    display(mesh_areas.head())\n",
    "else:\n",
    "    print(\"No 2D Flow Area groups found in the HDF file.\")\n",
    "\n",
    "# Use the previously extracted cell_polygons_df\n",
    "print(\"\\nTop 20 Cell Polygons:\")\n",
    "if 'cell_polygons_df' in locals() and not cell_polygons_df.empty and not top_20_cells.empty:\n",
    "    # Get the cell numbers from top_20_cells\n",
    "    top_20_cell_numbers = top_20_cells['Cell Number'].tolist()\n",
    "    \n",
    "    # Filter cell_polygons_df to only include top 20 cells\n",
    "    top_20_cell_polygons = cell_polygons_df[cell_polygons_df['cell_id'].isin(top_20_cell_numbers)]\n",
    "    \n",
    "    display(top_20_cell_polygons)\n",
    "\n",
    "    # Plot top 20 cell polygons and mesh areas\n",
    "    fig, ax = plt.subplots(figsize=(12, 8))\n",
    "    \n",
    "    # Plot mesh areas\n",
    "    mesh_areas.plot(ax=ax, edgecolor='red', facecolor='none', alpha=0.5, label='Mesh Areas')\n",
    "    \n",
    "    # Plot top 20 cell polygons\n",
    "    top_20_cell_polygons.plot(ax=ax, edgecolor='blue', facecolor='none', alpha=0.7, label='Top 20 Error Cells')\n",
    "    \n",
    "    # Set labels and title\n",
    "    ax.set_xlabel('X Coordinate')\n",
    "    ax.set_ylabel('Y Coordinate')\n",
    "    ax.set_title('2D Flow Area Perimeters and Top 20 Cell Polygons')\n",
    "    \n",
    "    # Add legend\n",
    "    ax.legend()\n",
    "    \n",
    "    # Add grid\n",
    "    ax.grid(True)\n",
    "    \n",
    "    # Adjust layout and display\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "else:\n",
    "    print(\"No Cell Polygons found or no top 20 cells with highest error available.\")\n",
    "    print(\"Unable to plot cell polygons.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Exploratory Example for Debugging or New Features: List all paths, groups, and attributes under \"/Results/Unsteady/Summary/Volume Accounting\"\n",
    "HdfBase.get_dataset_info(plan_hdf_path, \"/Results/Unsteady/Summary/Volume Accounting\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example 12: Extract Plan Parameters and Volume Accounting\n",
    "print(\"\\nExample 12: Extracting Plan Parameters and Volume Accounting Data\")\n",
    "\n",
    "# Extract plan parameters\n",
    "plan_parameters_df = HdfPlan.get_plan_parameters(plan_hdf_path)\n",
    "\n",
    "# Extract volume accounting data\n",
    "volume_accounting_df = HdfResultsPlan.get_volume_accounting(plan_hdf_path)\n",
    "\n",
    "print(\"\\nPlan Parameters DataFrame:\")\n",
    "display(plan_parameters_df)\n",
    "\n",
    "print(\"\\nVolume Accounting DataFrame:\")\n",
    "display(volume_accounting_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "------"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# RasPlanHdf Class Functions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-----"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Get plan start time\n",
    "start_time = HdfPlan.get_plan_start_time(plan_hdf_path)\n",
    "print(f\"Simulation start time: {start_time}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Simulation start time: 2018-09-09 00:00:00"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Get plan end time\n",
    "end_time = HdfPlan.get_plan_end_time(plan_hdf_path)\n",
    "print(f\"Simulation end time: {end_time}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Simulation end time: 2018-09-14 00:00:00"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Get maximum iteration count for mesh cells\n",
    "max_iter_df = HdfResultsMesh.get_mesh_max_iter(plan_hdf_path)\n",
    "print(\"\\nMesh Max Iterations:\")\n",
    "print(max_iter_df.attrs)\n",
    "display(max_iter_df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "max_iter_df:\n",
    "\n",
    "| mesh_name | cell_id | cell_last_iteration | geometry |\n",
    "|-----------|---------|--------------------| ---------|\n",
    "| BaldEagleCr | 0 | 0 | POINT (2083000 370750) |\n",
    "| BaldEagleCr | 1 | 0 | POINT (2083250 370750) |\n",
    "| BaldEagleCr | 2 | 0 | POINT (2083500 370750) |\n",
    "| BaldEagleCr | 3 | 2 | POINT (2083750 370750) |\n",
    "| BaldEagleCr | 4 | 0 | POINT (2084000 370750) |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get maximum iteration count for mesh cells\n",
    "from ras_commander.HdfResultsMesh import HdfResultsMesh\n",
    "\n",
    "max_iter_gdf = HdfResultsMesh.get_mesh_max_iter(plan_hdf_path)\n",
    "\n",
    "print(\"max_iter_df\")\n",
    "print(max_iter_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "mesh_max_iter_df:\n",
    "\n",
    "| mesh_name | cell_id | cell_last_iteration | geometry |\n",
    "|-----------|---------|--------------------| ---------|\n",
    "| BaldEagleCr | 0 | 0 | POINT (2083000 370750) |\n",
    "| ... | ... | ... | ... |\n",
    "| BaldEagleCr | 19592 | 0 | POINT (1978423.032 300718.897) |\n",
    "\n",
    "\n",
    "[19597 rows x 4 columns]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get cell coordinates \n",
    "cell_coords = HdfMesh.get_mesh_cell_points(plan_hdf_path)\n",
    "display(cell_coords)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot Mesh Max Iterations\n",
    "\n",
    "# Extract x and y coordinates from the geometry column\n",
    "max_iter_df['x'] = max_iter_df['geometry'].apply(lambda geom: geom.x if geom is not None else None)\n",
    "max_iter_df['y'] = max_iter_df['geometry'].apply(lambda geom: geom.y if geom is not None else None)\n",
    "\n",
    "# Remove rows with None coordinates\n",
    "max_iter_df = max_iter_df.dropna(subset=['x', 'y'])\n",
    "\n",
    "# Create the plot\n",
    "fig, ax = plt.subplots(figsize=(12, 8))\n",
    "scatter = ax.scatter(max_iter_df['x'], max_iter_df['y'], \n",
    "                     c=max_iter_df['cell_last_iteration'], \n",
    "                     cmap='viridis', \n",
    "                     s=1)\n",
    "\n",
    "# Customize the plot\n",
    "ax.set_title('Max Iterations per Cell')\n",
    "ax.set_xlabel('X Coordinate')\n",
    "ax.set_ylabel('Y Coordinate')\n",
    "plt.colorbar(scatter, label='Max Iterations')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()\n",
    "\n",
    "# Print the first few rows of the dataframe for verification\n",
    "print(\"\\nFirst few rows of the dataframe:\")\n",
    "display(max_iter_df[['mesh_name', 'cell_id', 'geometry']].head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Get mesh maximum water surface elevation\n",
    "max_ws_df = HdfResultsMesh.get_mesh_max_ws(plan_hdf_path, ras_object=bald_eagle)\n",
    "print(\"\\nMesh Maximum Water Surface Elevation:\")\n",
    "print(max_ws_df.attrs)\n",
    "display(max_ws_df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "max_ws_df:\n",
    "\n",
    "| mesh_name | cell_id | maximum_water_surface | maximum_water_surface_time | geometry |\n",
    "|-----------|---------|---------------------|--------------------------|-----------|\n",
    "| BaldEagleCr | 0 | 704.054443 | 2018-09-10 18:00:00 | POINT (2083000 370750) |\n",
    "| BaldEagleCr | 1 | 692.377991 | 2018-09-10 18:04:00 | POINT (2083250 370750) |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot the max water surface as a map\n",
    "import matplotlib.pyplot as plt\n",
    "from ras_commander.HdfResultsMesh import HdfResultsMesh\n",
    "\n",
    "# Extract x and y coordinates from the geometry column\n",
    "max_ws_df['x'] = max_ws_df['geometry'].apply(lambda geom: geom.x if geom is not None else None)\n",
    "max_ws_df['y'] = max_ws_df['geometry'].apply(lambda geom: geom.y if geom is not None else None)\n",
    "\n",
    "# Remove rows with None coordinates\n",
    "max_ws_df = max_ws_df.dropna(subset=['x', 'y'])\n",
    "\n",
    "# Create the plot\n",
    "fig, ax = plt.subplots(figsize=(12, 8))\n",
    "scatter = ax.scatter(max_ws_df['x'], max_ws_df['y'], \n",
    "                     c=max_ws_df['maximum_water_surface'], \n",
    "                     cmap='viridis', \n",
    "                     s=10)\n",
    "\n",
    "# Customize the plot\n",
    "ax.set_title('Max Water Surface per Cell')\n",
    "ax.set_xlabel('X Coordinate')\n",
    "ax.set_ylabel('Y Coordinate')\n",
    "plt.colorbar(scatter, label='Max Water Surface (ft)')\n",
    "\n",
    "# Add grid lines\n",
    "ax.grid(True, linestyle='--', alpha=0.7)\n",
    "\n",
    "# Increase font size for better readability\n",
    "plt.rcParams.update({'font.size': 12})\n",
    "\n",
    "# Adjust layout to prevent cutting off labels\n",
    "plt.tight_layout()\n",
    "\n",
    "# Show the plot\n",
    "plt.show()\n",
    "\n",
    "# Print the first few rows of the dataframe for verification\n",
    "print(\"\\nFirst few rows of the dataframe:\")\n",
    "display(max_ws_df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot the time of the max water surface elevation (WSEL)\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates\n",
    "from datetime import datetime\n",
    "\n",
    "# Convert the 'maximum_water_surface_time' to datetime objects\n",
    "max_ws_df['max_wsel_time'] = pd.to_datetime(max_ws_df['maximum_water_surface_time'])\n",
    "\n",
    "# Create the plot\n",
    "fig, ax = plt.subplots(figsize=(12, 8))\n",
    "\n",
    "# Convert datetime to hours since the start for colormap\n",
    "min_time = max_ws_df['max_wsel_time'].min()\n",
    "color_values = (max_ws_df['max_wsel_time'] - min_time).dt.total_seconds() / 3600  # Convert to hours\n",
    "\n",
    "scatter = ax.scatter(max_ws_df['x'], max_ws_df['y'], \n",
    "                     c=color_values, \n",
    "                     cmap='viridis', \n",
    "                     s=10)\n",
    "\n",
    "# Customize the plot\n",
    "ax.set_title('Time of Maximum Water Surface Elevation per Cell')\n",
    "ax.set_xlabel('X Coordinate')\n",
    "ax.set_ylabel('Y Coordinate')\n",
    "\n",
    "# Set up the colorbar\n",
    "cbar = plt.colorbar(scatter)\n",
    "cbar.set_label('Hours since simulation start')\n",
    "\n",
    "# Format the colorbar ticks to show hours\n",
    "cbar.set_ticks(range(0, int(color_values.max()) + 1, 6))  # Set ticks every 6 hours\n",
    "cbar.set_ticklabels([f'{h}h' for h in range(0, int(color_values.max()) + 1, 6)])\n",
    "\n",
    "# Add grid lines\n",
    "ax.grid(True, linestyle='--', alpha=0.7)\n",
    "\n",
    "# Increase font size for better readability\n",
    "plt.rcParams.update({'font.size': 12})\n",
    "\n",
    "# Adjust layout to prevent cutting off labels\n",
    "plt.tight_layout()\n",
    "\n",
    "# Show the plot\n",
    "plt.show()\n",
    "\n",
    "# Find the overall maximum WSEL and its time\n",
    "max_wsel_row = max_ws_df.loc[max_ws_df['maximum_water_surface'].idxmax()]\n",
    "hours_since_start = (max_wsel_row['max_wsel_time'] - min_time).total_seconds() / 3600\n",
    "print(f\"\\nOverall Maximum WSEL: {max_wsel_row['maximum_water_surface']:.2f} ft\")\n",
    "print(f\"Time of Overall Maximum WSEL: {max_wsel_row['max_wsel_time']}\")\n",
    "print(f\"Hours since simulation start: {hours_since_start:.2f} hours\")\n",
    "print(f\"Location of Overall Maximum WSEL: X={max_wsel_row['x']}, Y={max_wsel_row['y']}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Get mesh minimum water surface elevation\n",
    "min_ws_df = HdfResultsMesh.get_mesh_min_ws(plan_hdf_path, ras_object=bald_eagle)\n",
    "print(\"\\nMesh Minimum Water Surface Elevation:\")\n",
    "display(min_ws_df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Get mesh maximum face velocity\n",
    "try:\n",
    "    max_face_v_df = HdfResultsMesh.get_mesh_max_face_v(plan_hdf_path, ras_object=bald_eagle)\n",
    "    print(\"\\nMesh Max Face Velocity:\")\n",
    "    display(max_face_v_df.head())\n",
    "except AttributeError as e:\n",
    "    print(f\"Error: {e}. Please ensure that the method exists in the HdfResultsMesh class.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Extract midpoint coordinates from the LineString geometries\n",
    "max_face_v_df['x'] = max_face_v_df['geometry'].apply(lambda geom: geom.centroid.x)\n",
    "max_face_v_df['y'] = max_face_v_df['geometry'].apply(lambda geom: geom.centroid.y)\n",
    "\n",
    "# Create the plot\n",
    "fig, ax = plt.subplots(figsize=(12, 8))\n",
    "scatter = ax.scatter(max_face_v_df['x'], max_face_v_df['y'], \n",
    "                    c=max_face_v_df['maximum_face_velocity'].abs(),\n",
    "                    cmap='viridis',\n",
    "                    s=10)\n",
    "\n",
    "# Customize the plot\n",
    "ax.set_title('Max Face Velocity per Face')\n",
    "ax.set_xlabel('X Coordinate') \n",
    "ax.set_ylabel('Y Coordinate')\n",
    "plt.colorbar(scatter, label='Max Face Velocity (ft/s)')\n",
    "\n",
    "# Add grid lines\n",
    "ax.grid(True, linestyle='--', alpha=0.7)\n",
    "\n",
    "# Increase font size for better readability\n",
    "plt.rcParams.update({'font.size': 12})\n",
    "\n",
    "# Adjust layout to prevent cutting off labels\n",
    "plt.tight_layout()\n",
    "\n",
    "# Show the plot\n",
    "plt.show()\n",
    "\n",
    "# Print the first few rows of the dataframe for verification\n",
    "print(\"\\nFirst few rows of the face velocity dataframe:\")\n",
    "display(max_face_v_df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Get mesh minimum face velocity\n",
    "try:\n",
    "    min_face_v_df = HdfResultsMesh.get_mesh_min_face_v(plan_hdf_path, ras_object=bald_eagle)\n",
    "    print(\"\\nMesh Min Face Velocity:\")\n",
    "    display(min_face_v_df.head())\n",
    "except AttributeError as e:\n",
    "    print(f\"Error: {e}. Please ensure that the method exists in the HdfResultsMesh class.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Get mesh max water surface error\n",
    "try:\n",
    "    max_ws_err_df = HdfResultsMesh.get_mesh_max_ws_err(plan_hdf_path, ras_object=bald_eagle)\n",
    "    print(\"\\nMesh Max Water Surface Error:\")\n",
    "    display(max_ws_err_df.head())\n",
    "except AttributeError as e:\n",
    "    print(f\"Error: {e}. Please ensure that the method exists in the HdfResultsMesh class.\")\n",
    "    logger.error(f\"Failed to get mesh max water surface error: {str(e)}\")\n",
    "except Exception as e:\n",
    "    print(f\"Error: {str(e)}\")\n",
    "    logger.error(f\"Failed to get mesh max water surface error: {str(e)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot max water surface error\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Extract x and y coordinates from the geometry points, handling None values\n",
    "max_ws_err_df['x'] = max_ws_err_df['geometry'].apply(lambda geom: geom.x if geom is not None else None)\n",
    "max_ws_err_df['y'] = max_ws_err_df['geometry'].apply(lambda geom: geom.y if geom is not None else None)\n",
    "\n",
    "# Remove any rows with None coordinates\n",
    "max_ws_err_df = max_ws_err_df.dropna(subset=['x', 'y'])\n",
    "\n",
    "# Create the plot\n",
    "fig, ax = plt.subplots(figsize=(12, 8))\n",
    "scatter = ax.scatter(max_ws_err_df['x'], max_ws_err_df['y'],\n",
    "                    c=max_ws_err_df['cell_maximum_water_surface_error'],\n",
    "                    cmap='viridis',\n",
    "                    s=10)\n",
    "\n",
    "# Customize the plot\n",
    "ax.set_title('Max Water Surface Error per Cell')\n",
    "ax.set_xlabel('X Coordinate')\n",
    "ax.set_ylabel('Y Coordinate')\n",
    "plt.colorbar(scatter, label='Max Water Surface Error (ft)')\n",
    "\n",
    "# Add grid lines\n",
    "ax.grid(True, linestyle='--', alpha=0.7)\n",
    "\n",
    "# Increase font size for better readability\n",
    "plt.rcParams.update({'font.size': 12})\n",
    "\n",
    "# Adjust layout to prevent cutting off labels\n",
    "plt.tight_layout()\n",
    "\n",
    "# Show the plot\n",
    "plt.show()\n",
    "\n",
    "# Print the first few rows of the dataframe for verification\n",
    "print(\"\\nFirst few rows of the water surface error dataframe:\")\n",
    "display(max_ws_err_df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Need to add this to the ras-commander library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Get mesh summary output for other Datasets (here we retrieve Maximum Face Courant)\n",
    "try:\n",
    "    max_courant_df = HdfResultsMesh.get_mesh_summary(plan_hdf_path, var=\"Maximum Face Courant\", ras_object=bald_eagle)\n",
    "    print(\"\\nMesh Summary Output (Maximum Courant):\")\n",
    "    print(max_courant_df.attrs)\n",
    "    display(max_courant_df.head())\n",
    "except Exception as e:\n",
    "    print(f\"Error: {str(e)}\")\n",
    "    logger.error(f\"Failed to get mesh summary output: {str(e)}\")\n",
    "    # Additional error handling or logging can be added here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot max Courant number\n",
    "import matplotlib.pyplot as plt\n",
    "from ras_commander.HdfMesh import HdfMesh\n",
    "from ras_commander.HdfResultsMesh import HdfResultsMesh\n",
    "from shapely.geometry import LineString\n",
    "import geopandas as gpd\n",
    "\n",
    "# Get mesh max Courant number\n",
    "max_courant_df = HdfResultsMesh.get_mesh_summary(plan_hdf_path, var=\"Maximum Face Courant\", ras_object=bald_eagle)\n",
    "\n",
    "# Convert to GeoDataFrame\n",
    "gdf = gpd.GeoDataFrame(max_courant_df)\n",
    "\n",
    "# Get centroids of line geometries for plotting\n",
    "gdf['centroid'] = gdf.geometry.centroid\n",
    "gdf['x'] = gdf.centroid.x\n",
    "gdf['y'] = gdf.centroid.y\n",
    "\n",
    "# Create the plot\n",
    "fig, ax = plt.subplots(figsize=(12, 8))\n",
    "scatter = ax.scatter(gdf['x'], gdf['y'],\n",
    "                    c=gdf['maximum_face_courant'],\n",
    "                    cmap='viridis',\n",
    "                    s=10)\n",
    "\n",
    "# Customize the plot\n",
    "ax.set_title('Max Courant Number per Face')\n",
    "ax.set_xlabel('X Coordinate')\n",
    "ax.set_ylabel('Y Coordinate')\n",
    "plt.colorbar(scatter, label='Max Courant Number')\n",
    "\n",
    "# Add grid lines\n",
    "ax.grid(True, linestyle='--', alpha=0.7)\n",
    "\n",
    "# Increase font size for better readability\n",
    "plt.rcParams.update({'font.size': 12})\n",
    "\n",
    "# Adjust layout to prevent cutting off labels\n",
    "plt.tight_layout()\n",
    "\n",
    "# Show the plot\n",
    "plt.show()\n",
    "\n",
    "# Print the first few rows of the dataframe for verification\n",
    "print(\"\\nFirst few rows of the Courant number dataframe:\")\n",
    "display(gdf.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Get mesh summary output for other Datasets (here we retrieve Maximum Face Courant)\n",
    "\n",
    "max_face_shear_df = HdfResultsMesh.get_mesh_summary(plan_hdf_path, var=\"Maximum Face Shear Stress\", ras_object=bald_eagle)\n",
    "print(\"\\nMesh Summary Output (Maximum Face Shear Stress:\")\n",
    "print(max_face_shear_df.attrs)\n",
    "display(max_face_shear_df.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot max face shear stress\n",
    "import matplotlib.pyplot as plt\n",
    "from ras_commander.HdfMesh import HdfMesh\n",
    "from ras_commander.HdfResultsMesh import HdfResultsMesh\n",
    "from shapely.geometry import Point, LineString\n",
    "import geopandas as gpd\n",
    "\n",
    "# Get mesh max face shear stress\n",
    "max_shear_df = HdfResultsMesh.get_mesh_summary(plan_hdf_path, var=\"Maximum Face Shear Stress\", ras_object=bald_eagle)\n",
    "\n",
    "# Calculate centroids of the line geometries and extract coordinates\n",
    "max_shear_df['centroid'] = max_shear_df['geometry'].apply(lambda line: line.centroid)\n",
    "max_shear_df['x'] = max_shear_df['centroid'].apply(lambda point: point.x)\n",
    "max_shear_df['y'] = max_shear_df['centroid'].apply(lambda point: point.y)\n",
    "\n",
    "# Create the plot\n",
    "fig, ax = plt.subplots(figsize=(12, 8))\n",
    "scatter = ax.scatter(max_shear_df['x'], max_shear_df['y'],\n",
    "                    c=max_shear_df['maximum_face_shear_stress'],\n",
    "                    cmap='viridis',\n",
    "                    s=10)\n",
    "\n",
    "# Customize the plot\n",
    "ax.set_title('Max Face Shear Stress per Face')\n",
    "ax.set_xlabel('X Coordinate')\n",
    "ax.set_ylabel('Y Coordinate')\n",
    "plt.colorbar(scatter, label='Max Face Shear Stress (PSF)')\n",
    "\n",
    "# Add grid lines\n",
    "ax.grid(True, linestyle='--', alpha=0.7)\n",
    "\n",
    "# Increase font size for better readability\n",
    "plt.rcParams.update({'font.size': 12})\n",
    "\n",
    "# Adjust layout to prevent cutting off labels\n",
    "plt.tight_layout()\n",
    "\n",
    "# Show the plot\n",
    "plt.show()\n",
    "\n",
    "# Print the first few rows of the dataframe for verification\n",
    "print(\"\\nFirst few rows of the shear stress dataframe:\")\n",
    "display(max_shear_df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Get mesh summary output for Minimum Water Surface\n",
    "summary_df_min_ws = HdfResultsMesh.get_mesh_summary(plan_hdf_path, var=\"Minimum Water Surface\", ras_object=bald_eagle)\n",
    "print(\"\\nMesh Summary Output (Minimum Water Surface):\")\n",
    "display(summary_df_min_ws.head())\n",
    "\n",
    "# Example: Get mesh summary output for Minimum Face Velocity\n",
    "summary_df_min_fv = HdfResultsMesh.get_mesh_summary(plan_hdf_path, var=\"Minimum Face Velocity\", ras_object=bald_eagle)\n",
    "print(\"\\nMesh Summary Output (Minimum Face Velocity):\")\n",
    "display(summary_df_min_fv.head())\n",
    "\n",
    "# Example: Get mesh summary output for Cell Cumulative Iteration\n",
    "summary_df_cum_iter = HdfResultsMesh.get_mesh_summary(plan_hdf_path, var=\"Cell Cumulative Iteration\", ras_object=bald_eagle)\n",
    "print(\"\\nMesh Summary Output (Cell Cumulative Iteration):\")\n",
    "display(summary_df_cum_iter.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get mesh timeseries output\n",
    "\n",
    "# Get mesh areas from previous code cell\n",
    "mesh_areas = HdfMesh.get_mesh_area_names(geom_hdf_path, ras_object=bald_eagle)\n",
    "\n",
    "if mesh_areas:\n",
    "    mesh_name = mesh_areas[0]  # Use the first 2D flow area name\n",
    "    timeseries_da = HdfResultsMesh.get_mesh_timeseries(plan_hdf_path, mesh_name, \"Water Surface\", ras_object=bald_eagle)\n",
    "    print(f\"\\nMesh Timeseries Output (Water Surface) for {mesh_name}:\")\n",
    "    print(timeseries_da)\n",
    "else:\n",
    "    print(\"No mesh areas found in the geometry file.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Time Series Output Variables for Cells\n",
    "# \n",
    "# Variable Name: Description\n",
    "# Water Surface: Water surface elevation\n",
    "# Depth: Water depth\n",
    "# Velocity: Magnitude of velocity\n",
    "# Velocity X: X-component of velocity\n",
    "# Velocity Y: Y-component of velocity\n",
    "# Froude Number: Froude number\n",
    "# Courant Number: Courant number\n",
    "# Shear Stress: Shear stress on the bed\n",
    "# Bed Elevation: Elevation of the bed\n",
    "# Precipitation Rate: Rate of precipitation\n",
    "# Infiltration Rate: Rate of infiltration\n",
    "# Evaporation Rate: Rate of evaporation\n",
    "# Percolation Rate: Rate of percolation\n",
    "# Groundwater Elevation: Elevation of groundwater\n",
    "# Groundwater Depth: Depth to groundwater\n",
    "# Groundwater Flow: Groundwater flow rate\n",
    "# Groundwater Velocity: Magnitude of groundwater velocity\n",
    "# Groundwater Velocity X: X-component of groundwater velocity\n",
    "# Groundwater Velocity Y: Y-component of groundwater velocity\n",
    "# \n",
    "# These variables are available for time series output at the cell level in 2D flow areas.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get mesh cells timeseries output\n",
    "cells_timeseries_ds = HdfResultsMesh.get_mesh_cells_timeseries(plan_hdf_path, mesh_name, ras_object=bald_eagle)\n",
    "print(\"\\nMesh Cells Timeseries Output:\")\n",
    "print(cells_timeseries_ds)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot Cell Time Series Data (Random Cell ID)\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import random\n",
    "\n",
    "# Extract Water Surface data\n",
    "water_surface = cells_timeseries_ds['BaldEagleCr']['Water Surface']\n",
    "\n",
    "# Get the time values\n",
    "time_values = water_surface.coords['time'].values\n",
    "\n",
    "# Pick a random cell_id\n",
    "random_cell_id = random.choice(water_surface.coords['cell_id'].values)\n",
    "\n",
    "# Extract the water surface elevation time series for the random cell\n",
    "wsel_timeseries = water_surface.sel(cell_id=random_cell_id)\n",
    "\n",
    "# Find the peak value and its index\n",
    "peak_value = wsel_timeseries.max().item()\n",
    "peak_index = wsel_timeseries.argmax().item()\n",
    "\n",
    "# Create the plot\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(time_values, wsel_timeseries, label=f'Cell ID: {random_cell_id}')\n",
    "plt.scatter(time_values[peak_index], peak_value, color='red', s=100, zorder=5)\n",
    "plt.annotate(f'Peak: {peak_value:.2f} ft', \n",
    "             (time_values[peak_index], peak_value),\n",
    "             xytext=(10, 10), textcoords='offset points',\n",
    "             ha='left', va='bottom',\n",
    "             bbox=dict(boxstyle='round,pad=0.5', fc='yellow', alpha=0.5),\n",
    "             arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0'))\n",
    "\n",
    "plt.title(f'Water Surface Elevation Time Series for Random Cell (ID: {random_cell_id})')\n",
    "plt.xlabel('Time')\n",
    "plt.ylabel('Water Surface Elevation (ft)')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "\n",
    "# Log the plotting action\n",
    "logging.info(f\"Plotted water surface elevation time series for random cell ID: {random_cell_id}\")\n",
    "\n",
    "# Display the plot\n",
    "plt.show()\n",
    "\n",
    "# Print some statistics\n",
    "print(f\"Statistics for Cell ID {random_cell_id}:\")\n",
    "print(f\"Minimum WSEL: {wsel_timeseries.min().item():.2f} ft\")\n",
    "print(f\"Maximum WSEL: {peak_value:.2f} ft\")\n",
    "print(f\"Mean WSEL: {wsel_timeseries.mean().item():.2f} ft\")\n",
    "print(f\"Time of peak: {time_values[peak_index]}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get mesh faces timeseries output\n",
    "faces_timeseries_ds = HdfResultsMesh.get_mesh_faces_timeseries(plan_hdf_path, mesh_name, ras_object=bald_eagle)\n",
    "print(\"\\nMesh Faces Timeseries Output:\")\n",
    "print(faces_timeseries_ds)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot Random Face Results and Label Peak, Plus Map View\n",
    "\n",
    "# Step 1: Import necessary libraries \n",
    "# In notebook cell at top of notebook\n",
    "\n",
    "# Step 2: Select a random valid face ID number\n",
    "random_face = np.random.randint(0, faces_timeseries_ds.sizes['face_id'])\n",
    "\n",
    "# Step 3: Extract time series data for the selected face\n",
    "variable = 'face_velocity'  # We could also use 'face_flow'\n",
    "face_data = faces_timeseries_ds[variable].sel(face_id=random_face)\n",
    "\n",
    "# Step 4: Find peak value and its corresponding time\n",
    "peak_value = face_data.max().item()\n",
    "peak_time = face_data.idxmax().values\n",
    "\n",
    "# Plot time series\n",
    "plt.figure(figsize=(12, 8))\n",
    "plt.plot(faces_timeseries_ds.time, face_data)\n",
    "plt.title(f'{variable.capitalize()} Time Series for Face {random_face}')\n",
    "plt.xlabel('Time')\n",
    "plt.ylabel(f'{variable.capitalize()} ({faces_timeseries_ds.attrs[\"units\"]})')\n",
    "plt.grid(True)\n",
    "\n",
    "# Annotate the peak point\n",
    "plt.annotate(f'Peak: ({peak_time}, {peak_value:.2f})', \n",
    "            (peak_time, peak_value),\n",
    "            xytext=(10, 10), textcoords='offset points',\n",
    "            arrowprops=dict(arrowstyle=\"->\"))\n",
    "\n",
    "# Check for negative values and label the minimum if present\n",
    "min_value = face_data.min().item()\n",
    "if min_value < 0:\n",
    "    min_time = face_data.idxmin().values\n",
    "    plt.annotate(f'Min: ({min_time}, {min_value:.2f})', \n",
    "                (min_time, min_value),\n",
    "                xytext=(10, -10), textcoords='offset points',\n",
    "                arrowprops=dict(arrowstyle=\"->\"))\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Create map view plot\n",
    "fig, ax = plt.subplots(figsize=(12, 8))\n",
    "\n",
    "# Get mesh faces for map view\n",
    "mesh_faces = HdfMesh.get_mesh_cell_faces(plan_hdf_path, ras_object=bald_eagle)\n",
    "\n",
    "# Calculate mesh faces extents with 10% buffer\n",
    "faces_bounds = mesh_faces.total_bounds\n",
    "x_min, y_min, x_max, y_max = faces_bounds\n",
    "buffer_x = (x_max - x_min) * 0.1\n",
    "buffer_y = (y_max - y_min) * 0.1\n",
    "plot_xlim = [x_min - buffer_x, x_max + buffer_x]\n",
    "plot_ylim = [y_min - buffer_y, y_max + buffer_y]\n",
    "\n",
    "# Set plot limits before adding terrain\n",
    "ax.set_xlim(plot_xlim)\n",
    "ax.set_ylim(plot_ylim)\n",
    "\n",
    "# Add the terrain TIFF to the map, clipped to our desired extent\n",
    "tiff_path = Path.cwd() / 'example_projects' / 'BaldEagleCrkMulti2D' / 'Terrain' / 'Terrain50.baldeagledem.tif'\n",
    "with rasterio.open(tiff_path) as src:\n",
    "    show(src, ax=ax, cmap='terrain', alpha=0.5)\n",
    "    \n",
    "# Reset the limits after terrain plot\n",
    "ax.set_xlim(plot_xlim)\n",
    "ax.set_ylim(plot_ylim)\n",
    "\n",
    "# Plot all faces in gray\n",
    "mesh_faces.plot(ax=ax, color='lightgray', alpha=0.5, zorder=2)\n",
    "\n",
    "# Get the selected face geometry\n",
    "selected_face = mesh_faces[mesh_faces['face_id'] == random_face]\n",
    "\n",
    "# Highlight the selected face in red\n",
    "selected_face.plot(\n",
    "    ax=ax, \n",
    "    color='red',\n",
    "    linewidth=2,\n",
    "    label=f'Selected Face (ID: {random_face})',\n",
    "    zorder=3\n",
    ")\n",
    "\n",
    "# Get bounds of selected face for zoomed inset\n",
    "bounds = selected_face.geometry.bounds.iloc[0]\n",
    "x_center = (bounds.iloc[0] + bounds.iloc[2]) / 2\n",
    "y_center = (bounds.iloc[1] + bounds.iloc[3]) / 2\n",
    "buffer = max(bounds.iloc[2] - bounds.iloc[0], bounds.iloc[3] - bounds.iloc[1]) * 2\n",
    "\n",
    "# Create zoomed inset with a larger size, inside the map frame\n",
    "axins = inset_axes(ax, width=\"70%\", height=\"70%\", loc='lower right',\n",
    "                  bbox_to_anchor=(0.65, 0.05, 0.35, 0.35),\n",
    "                  bbox_transform=ax.transAxes)\n",
    "\n",
    "# Plot terrain and faces in inset\n",
    "with rasterio.open(tiff_path) as src:\n",
    "    show(src, ax=axins, cmap='terrain', alpha=0.5)\n",
    "    \n",
    "# Plot zoomed view in inset\n",
    "mesh_faces.plot(ax=axins, color='lightgray', alpha=0.5, zorder=2)\n",
    "selected_face.plot(ax=axins, color='red', linewidth=2, zorder=3)\n",
    "\n",
    "# Set inset limits with slightly more context\n",
    "axins.set_xlim(x_center - buffer/1.5, x_center + buffer/1.5)\n",
    "axins.set_ylim(y_center - buffer/1.5, y_center + buffer/1.5)\n",
    "\n",
    "# Remove inset ticks for cleaner look\n",
    "axins.set_xticks([])\n",
    "axins.set_yticks([])\n",
    "\n",
    "# Add a border to the inset\n",
    "for spine in axins.spines.values():\n",
    "    spine.set_edgecolor('black')\n",
    "    spine.set_linewidth(1.5)\n",
    "\n",
    "# Create connection lines between main plot and inset\n",
    "# Get the selected face centroid for connection point\n",
    "centroid = selected_face.geometry.centroid.iloc[0]\n",
    "con1 = ConnectionPatch(\n",
    "    xyA=(centroid.x, centroid.y), coordsA=ax.transData,\n",
    "    xyB=(0.02, 0.98), coordsB=axins.transAxes,\n",
    "    arrowstyle=\"-\", linestyle=\"--\", color=\"gray\", alpha=0.6\n",
    ")\n",
    "con2 = ConnectionPatch(\n",
    "    xyA=(centroid.x, centroid.y), coordsA=ax.transData,\n",
    "    xyB=(0.98, 0.02), coordsB=axins.transAxes,\n",
    "    arrowstyle=\"-\", linestyle=\"--\", color=\"gray\", alpha=0.6\n",
    ")\n",
    "\n",
    "ax.add_artist(con1)\n",
    "ax.add_artist(con2)\n",
    "\n",
    "# Add title and legend to main plot\n",
    "ax.set_title('Mesh Face Map View with Terrain')\n",
    "ax.legend()\n",
    "\n",
    "# Ensure equal aspect ratio while maintaining our desired extents\n",
    "ax.set_aspect('equal', adjustable='box')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Print summary information\n",
    "print(f\"Random Face: {random_face}\")\n",
    "print(f\"Peak Value: {peak_value:.2f} {faces_timeseries_ds.attrs['units']} at {peak_time}\")\n",
    "if min_value < 0:\n",
    "    print(f\"Minimum Value: {min_value:.2f} {faces_timeseries_ds.attrs['units']} at {min_time}\")\n",
    "\n",
    "# Log the plotting action\n",
    "logging.info(f\"Plotted mesh face time series and map view for random face ID: {random_face} with terrain\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get meteorology precipitation attributes\n",
    "meteo_precip_attrs = HdfPlan.get_plan_met_precip(plan_hdf_path, ras_object=bald_eagle)\n",
    "print(\"\\nMeteorology Precipitation Attributes:\")\n",
    "for key, value in meteo_precip_attrs.items():\n",
    "    print(f\"{key}: {value}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get results unsteady attributes\n",
    "results_unsteady_attrs = HdfResultsPlan.get_unsteady_info(plan_hdf_path, ras_object=bald_eagle)\n",
    "print(\"\\nResults Unsteady Attributes:\")\n",
    "for key, value in results_unsteady_attrs.items():\n",
    "    print(f\"{key}: {value}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get results unsteady summary attributes\n",
    "results_unsteady_summary_attrs = HdfResultsPlan.get_unsteady_summary(plan_hdf_path, ras_object=bald_eagle)\n",
    "print(\"\\nResults Unsteady Summary Attributes:\")\n",
    "for key, value in results_unsteady_summary_attrs.items():\n",
    "    print(f\"{key}: {value}\")\n",
    "\n",
    "# Get results volume accounting attributes\n",
    "volume_accounting_attrs = HdfResultsPlan.get_volume_accounting(plan_hdf_path, ras_object=bald_eagle)\n",
    "print(\"\\nVolume Accounting Attributes:\")\n",
    "for key, value in volume_accounting_attrs.items():\n",
    "    print(f\"{key}: {value}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

==================================================

File: c:\GH\ras-commander\examples\21_2d_hdf_data_extraction pipes and pumps.ipynb
==================================================
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# HEC-RAS Pipes, Conduits, and Pump Stations HDF Data Analysis Notebook\n",
    "\n",
    "This notebook demonstrates how to manipulate and analyze the new HEC-RAS Conduits, Pipes, and Pump Stations results using the ras-commander library. It leverages the HdfPipe and HdfPump classes to streamline data extraction, processing, and visualization."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import required Libraries\n",
    "import subprocess\n",
    "import sys\n",
    "import os\n",
    "from pathlib import Path\n",
    "\n",
    "def install_module(module_name):\n",
    "    try:\n",
    "        __import__(module_name)\n",
    "    except ImportError:\n",
    "        print(f\"{module_name} not found. Installing...\")\n",
    "        subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", \"-U\", module_name])\n",
    "\n",
    "# List of modules to check and install if necessary\n",
    "modules = ['h5py', 'numpy', 'requests', 'geopandas', 'matplotlib', 'pandas', 'pyproj', 'shapely', 'xarray']\n",
    "for module in modules:\n",
    "    install_module(module)\n",
    "\n",
    "# Import the rest of the required libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import geopandas as gpd\n",
    "import matplotlib.pyplot as plt\n",
    "import pyproj\n",
    "from shapely.geometry import Point, LineString, Polygon\n",
    "import xarray as xr\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Install ras-commander if you are not in a dev environment. \n",
    "# install_module(ras-commander)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Importing ras-commander flexibly (from package or local dev copy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "from pathlib import Path\n",
    "\n",
    "# Flexible imports to allow for development without installation \n",
    "#  ** Use this version with Jupyter Notebooks **\n",
    "try:\n",
    "    # Try to import from the installed package\n",
    "    from ras_commander import (init_ras_project, HdfBase, HdfUtils, HdfFluvialPluvial, HdfStruc, HdfMesh, HdfXsec, HdfBndry, HdfPlan, HdfResultsPlan, HdfResultsMesh, HdfResultsXsec, HdfPipe, HdfPump, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, RasPrj, RasGpt, ras)\n",
    "    from ras_commander.Decorators import standardize_input, log_call\n",
    "    from ras_commander.LoggingConfig import setup_logging, get_logger\n",
    "except ImportError:\n",
    "    # If the import fails, add the parent directory to the Python path\n",
    "    print(\"Using Local Dev Copy\")\n",
    "    import os\n",
    "    current_file = Path(os.getcwd()).resolve()\n",
    "    parent_directory = current_file.parent\n",
    "    sys.path.append(str(parent_directory))\n",
    "    \n",
    "    # Now try to import again\n",
    "    from ras_commander import (init_ras_project, HdfBase, HdfUtils, HdfFluvialPluvial, HdfStruc, HdfMesh, HdfXsec, HdfBndry, HdfPlan, HdfResultsPlan, HdfResultsMesh, HdfResultsXsec, HdfPipe, HdfPump, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, RasPrj, RasGpt, ras)\n",
    "    from ras_commander.Decorators import standardize_input, log_call\n",
    "    from ras_commander.LoggingConfig import setup_logging, get_logger\n",
    "\n",
    "print(\"ras_commander imported successfully\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Download the Pipes Beta project from HEC and run plan 01\n",
    "\n",
    "# Define the path to the Pipes Beta project\n",
    "current_dir = Path.cwd()  # Adjust if your notebook is in a different directory\n",
    "pipes_ex_path = current_dir / \"example_projects\" / \"Davis\"\n",
    "import logging\n",
    "\n",
    "# Check if Pipes Beta.p06.hdf exists (so we don't have to re-run the simulation when re-running or debugging)\n",
    "hdf_file = pipes_ex_path / \"DavisStormSystem.p02.hdf\"\n",
    "\n",
    "if not hdf_file.exists():\n",
    "    # Initialize RasExamples and extract the Pipes Beta project\n",
    "    ras_examples = RasExamples()\n",
    "    ras_examples.extract_project([\"Davis\"])\n",
    "\n",
    "    # Initialize custom Ras object\n",
    "    pipes_ex = RasPrj()\n",
    "\n",
    "    # Initialize the RAS project using the custom ras object\n",
    "    pipes_ex = init_ras_project(pipes_ex_path, \"6.6\", ras_instance=pipes_ex)\n",
    "    logging.info(f\"Pipes Beta project initialized with folder: {pipes_ex.project_folder}\")\n",
    "    \n",
    "    logging.info(f\"Pipes Beta object id: {id(pipes_ex)}\")\n",
    "    \n",
    "    # Define the plan number to execute\n",
    "    plan_number = \"02\"\n",
    "\n",
    "    # Update run flags for the project\n",
    "    RasPlan.update_run_flags(\n",
    "        plan_number,\n",
    "        geometry_preprocessor=True,\n",
    "        unsteady_flow_simulation=True,\n",
    "        run_sediment=False,\n",
    "        post_processor=True,\n",
    "        floodplain_mapping=False,\n",
    "        ras_object=pipes_ex\n",
    "    )\n",
    "\n",
    "    # Execute Plan 06 using RasCmdr for Pipes Beta\n",
    "    print(f\"Executing Plan {plan_number} for the Pipes Beta Creek project...\")\n",
    "    success_pipes_ex = RasCmdr.compute_plan(plan_number, ras_object=pipes_ex)\n",
    "    if success_pipes_ex:\n",
    "        print(f\"Plan {plan_number} executed successfully for Pipes Beta.\\n\")\n",
    "    else:\n",
    "        print(f\"Plan {plan_number} execution failed for Pipes Beta.\\n\")\n",
    "else:\n",
    "    print(\"Pipes Beta.p06.hdf already exists. Skipping project extraction and plan execution.\")\n",
    "    # Initialize the RAS project using the custom ras object\n",
    "    pipes_ex = RasPrj()\n",
    "    pipes_ex = init_ras_project(pipes_ex_path, \"6.6\", ras_instance=pipes_ex)\n",
    "    plan_number = \"02\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load Plan and Geometry Dataframes and find Plan and Geometry HDF Paths\n",
    "\n",
    "# Display plan_df for pipes_ex project\n",
    "print(\"Plan DataFrame for pipes_ex project:\")\n",
    "display(pipes_ex.plan_df)\n",
    "\n",
    "# Display geom_df for pipes_ex project\n",
    "print(\"\\nGeometry DataFrame for pipes_ex project:\")\n",
    "display(pipes_ex.geom_df)\n",
    "\n",
    "# Get the plan HDF path\n",
    "plan_hdf_path = pipes_ex.plan_df.loc[pipes_ex.plan_df['plan_number'] == plan_number, 'HDF_Results_Path'].values[0]\n",
    "\n",
    "# Get the geometry file number from the plan DataFrame\n",
    "geom_file = pipes_ex.plan_df.loc[pipes_ex.plan_df['plan_number'] == plan_number, 'Geom File'].values[0]\n",
    "geom_number = geom_file[1:]  # Remove the 'g' prefix\n",
    "\n",
    "# Get the geometry HDF path\n",
    "geom_hdf_path = pipes_ex.geom_df.loc[pipes_ex.geom_df['geom_number'] == geom_number, 'hdf_path'].values[0]\n",
    "\n",
    "print(f\"\\nPlan HDF path for Plan {plan_number}: {plan_hdf_path}\")\n",
    "print(f\"Geometry HDF path for Plan {plan_number}: {geom_hdf_path}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Extract runtime and compute time data\n",
    "print(\"\\nExample 2: Extracting runtime and compute time data\")\n",
    "runtime_df = HdfResultsPlan.get_runtime_data(hdf_input=plan_number, ras_object=pipes_ex)\n",
    "if runtime_df is not None:\n",
    "    display(runtime_df)\n",
    "else:\n",
    "    print(\"No runtime data found.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use get_hdf5_dataset_info function to get Pipe Conduits data:\n",
    "HdfBase.get_dataset_info(plan_hdf_path, \"/Geometry/Pipe Conduits/\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Get pipe conduits\n",
    "pipe_conduits_gdf = HdfPipe.get_pipe_conduits(plan_hdf_path)\n",
    "print(\"\\nPipe Conduits: pipe_conduits_gdf\")\n",
    "display(pipe_conduits_gdf.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "pipe_conduits_gdf:  \n",
    "\n",
    "| Name | System Name | US Node | DS Node | Modeling Approach | Conduit Length | Max Cell Length | Shape | Rise | Span | ... | Slope | US Entrance Loss Coefficient | DS Exit Loss Coefficient | US Backflow Loss Coefficient | DS Backflow Loss Coefficient | DS Flap Gate | Major Group | Minor Group | Polyline | Terrain_Profiles |\n",
    "|------|-------------|---------|---------|-------------------|----------------|------------------|-------|------|------|-----|-------|------------------------------|--------------------------|------------------------------|------------------------------|--------------|-------------|-------------|----------|-------------------|\n",
    "| 0    | 134         | Davis   | O13-DMH007 | O13-DMH006 | hydraulic        | 443.740020      | 40.0             | circular | 6.0  | 6.0  | ... | 0.002723 | 0.2                        | 0.4                      | 0.2                          | 0.4                          | 0            | Major Group 2 |             | LINESTRING (6635295.441 1965214.2465, 6635196.... | [(0.0, 40.819695), (21.217846, 40.642994), (35... |\n",
    "| 1    | 133         | Davis   | O13-DMH024 | O13-DMH009 | hydraulic        | 800.000024      | 40.0             | circular | 6.0  | 6.0  | ... | 0.001904 | 0.2                        | 0.4                      | 0.2                          | 0.4                          | 0            | Major Group 2 |             | LINESTRING (6635295.441 1965214.2465, 6635196.... | [(0.0, 40.530186), (21.1467, 40.44057), (50.88... |\n",
    "| 2    | 132         | Davis   | O13-DMH006 | O13-SDS03 | hydraulic        | 443.740070      | 40.0             | circular | 6.0  | 6.0  | ... | 0.002816 | 0.2                        | 0.4                      | 0.2                          | 0.4                          | 0            | Major Group 2 |             | LINESTRING (6635295.441 1965214.2465, 6635196.... | [(0.0, 41.700996), (26.817467, 41.552666), (83... |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#!pip install adjusttext #No longer required - optional to help with labels overlapping"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot the pipe conduit linestrings\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Create a new figure with a specified size\n",
    "plt.figure(figsize=(12, 9))\n",
    "\n",
    "# Plot each linestring from the GeoDataFrame\n",
    "for idx, row in pipe_conduits_gdf.iterrows():\n",
    "    # Extract coordinates from the linestring\n",
    "    x_coords, y_coords = row['Polyline'].xy\n",
    "    \n",
    "    # Plot the linestring\n",
    "    plt.plot(x_coords, y_coords, 'b-', linewidth=1, alpha=0.7)\n",
    "    \n",
    "    # Add vertical line markers at endpoints\n",
    "    plt.plot([x_coords[0]], [y_coords[0]], 'x', color='black', markersize=4)\n",
    "    plt.plot([x_coords[-1]], [y_coords[-1]], 'x', color='black', markersize=4)\n",
    "    \n",
    "    # Calculate center point of the line\n",
    "    center_x = (x_coords[0] + x_coords[-1]) / 2\n",
    "    center_y = (y_coords[0] + y_coords[-1]) / 2\n",
    "    \n",
    "    # Add pipe name label at center, oriented top-right\n",
    "    plt.text(center_x, center_y, f'{row[\"Name\"]}', fontsize=8, \n",
    "             verticalalignment='bottom', horizontalalignment='left',\n",
    "             rotation=45)  # 45 degree angle for top-right orientation\n",
    "\n",
    "# Add title and labels\n",
    "plt.title('Pipe Conduit Network Layout')\n",
    "plt.xlabel('Easting')\n",
    "plt.ylabel('Northing')\n",
    "\n",
    "# Add grid\n",
    "plt.grid(True, linestyle='--', alpha=0.6)\n",
    "\n",
    "# Adjust layout to prevent label clipping\n",
    "plt.tight_layout()\n",
    "\n",
    "# Display the plot\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot the first 2 terrain profiles\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Extract terrain profiles from the GeoDataFrame\n",
    "terrain_profiles = pipe_conduits_gdf['Terrain_Profiles'].tolist()\n",
    "\n",
    "# Create separate plots for the first 2 terrain profiles\n",
    "for i in range(2):\n",
    "    profile = terrain_profiles[i]\n",
    "    \n",
    "    # Unzip the profile into x and y coordinates\n",
    "    x_coords, y_coords = zip(*profile)\n",
    "    \n",
    "    # Create a new figure for each profile\n",
    "    plt.figure(figsize=(12, 6))\n",
    "    plt.plot(x_coords, y_coords, marker='o', linestyle='-', color='g', alpha=0.7)\n",
    "    \n",
    "    # Add title and labels\n",
    "    plt.title(f'Terrain Profile {i + 1}')\n",
    "    plt.xlabel('Distance along profile (m)')\n",
    "    plt.ylabel('Elevation (m)')\n",
    "    \n",
    "    # Add grid\n",
    "    plt.grid(True, linestyle='--', alpha=0.6)\n",
    "    \n",
    "    # Adjust layout to prevent label clipping\n",
    "    plt.tight_layout()\n",
    "    \n",
    "    # Display the plot\n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use get_hdf5_dataset_info function to get Pipe Conduits data:\n",
    "#HdfUtils.get_hdf5_dataset_info(plan_hdf_path, \"/Geometry/Pipe Nodes/\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Get pipe nodes\n",
    "pipe_nodes_gdf = HdfPipe.get_pipe_nodes(plan_hdf_path)\n",
    "print(\"\\nPipe Nodes:\")\n",
    "display(pipe_nodes_gdf.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "pipe_nodes_gdf:\n",
    "\n",
    "\n",
    "| Name         | System Name | Node Type | Node Status                     | Condtui Connections (US:DS) | Invert Elevation | Base Area | Terrain Elevation | Terrain Elevation Override | Depth     | Drop Inlet Elevation | Drop Inlet Weir Length | Drop Inlet Weir Coefficient | Drop Inlet Orifice Area | Drop Inlet Orifice Coefficient | Total Connection Count | geometry                             |\n",
    "|--------------|-------------|-----------|----------------------------------|------------------------------|------------------|-----------|-------------------|---------------------------|-----------|----------------------|-------------------------|-----------------------------|-------------------------|-------------------------------|------------------------|-------------------------------------|\n",
    "| O14-di027   | Davis       | Junction   | Junction with drop inlet        | 1:1                          | 36.060001        | 36.0     | 39.860001         | NaN                       | 3.799999  | 39.863369           | 3.0                     | 3.3                         | 1.0                     | 0.67                          | 2                      | POINT (6637926.81 1964917.32)     |\n",
    "| P11-DMH004  | Davis       | Junction   | Junction with drop inlet        | 1:1                          | 38.169998        | 36.0     | 48.720001         | NaN                       | 10.550003 | 48.718811           | 3.0                     | 3.3                         | 1.0                     | 0.67                          | 2                      | POINT (6629444.634 1963504.411)   |\n",
    "| O14-DMH005  | Davis       | Junction   | Junction with drop inlet        | 1:1                          | 31.559999        | 36.0     | 40.840000         | NaN                       | 9.280001  | 40.843731           | 3.0                     | 3.3                         | 1.0                     | 0.67                          | 2                      | POINT (6637368.497 1966084.574)   |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use get_hdf5_dataset_info function to get Pipe Conduits data:\n",
    "#HdfUtils.get_hdf5_dataset_info(plan_hdf_path, \"/Geometry/Pipe Networks/\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Get pipe network data\n",
    "pipe_network_gdf = HdfPipe.get_pipe_network(plan_hdf_path)\n",
    "print(\"\\nPipe Network Data:\")\n",
    "display(pipe_network_gdf.head())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "pipe_network_gdf:\n",
    "| Cell_ID | Conduit_ID | Node_ID | Minimum_Elevation | DS_Face_Indices | Face_Indices | US_Face_Indices | Cell_Property_Info_Index | US Face Elevation | DS Face Elevation | Min Elevation | Area | Info Index | Cell_Polygon | Face_Polylines | Node_Point |\n",
    "|---------|------------|---------|-------------------|------------------|--------------|------------------|--------------------------|-------------------|-------------------|---------------|------|------------|---------------|----------------|------------|\n",
    "| 0       | 0          | 0       | -1                | 26.824432        | [1]          | [0, 1]           | [0]                      | 0                 | 26.93429          | 26.824432     | 242.040024 | 0          | POLYGON ((6635288.02154 1965233.24073, 6635279... | [LINESTRING (6635288.021542038 1965233.2407260... | None       |\n",
    "| 1       | 1          | 0       | -1                | 26.714573        | [2]          | [1, 2]           | [1]                      | 0                 | 26.93429          | 26.824432     | 242.040024 | 0          | POLYGON ((6635288.02154 1965233.24073, 6635279... | [LINESTRING (6635288.021542038 1965233.2407260... | None       |\n",
    "| 2       | 2          | 0       | -1                | 26.604715        | [3]          | [2, 3]           | [2]                      | 0                 | 26.93429          | 26.824432     | 242.040024 | 0          | POLYGON ((6635288.02154 1965233.24073, 6635279... | [LINESTRING (6635288.021542038 1965233.2407260... | None       |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Get pump stations\n",
    "pump_stations_gdf = HdfPump.get_pump_stations(plan_hdf_path)\n",
    "print(\"\\nPump Stations:\")\n",
    "display(pump_stations_gdf.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pump Stations:\n",
    "| geometry                          | station_id | Name             | Inlet River | Inlet Reach | Inlet RS | Inlet RS Distance | Inlet SA/2D | Inlet Pipe Node | Outlet River | ... | Outlet Pipe Node | Reference River | Reference Reach | Reference RS | Reference RS Distance | Reference SA/2D | Reference Point | Reference Pipe Node | Highest Pump Line Elevation | Pump Groups |\n",
    "|-----------------------------------|------------|------------------|-------------|-------------|----------|-------------------|--------------|------------------|--------------|-----|------------------|------------------|-----------------|--------------|-----------------------|------------------|-----------------|----------------------|------------------------------|-------------|\n",
    "| POINT (6635027.027 1966080.07)   | 0          | Pump Station #1   |             |             | NaN      |                   |              | Davis [O13-SDS03] |              | ... |                  | NaN              |                 | NaN          |                       | NaN              |                 |                      | NaN                          | 1           |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Get pump groups\n",
    "pump_groups_df = HdfPump.get_pump_groups(plan_hdf_path)\n",
    "print(\"\\nPump Groups:\")\n",
    "display(pump_groups_df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pump Groups:\n",
    "| Pump Station ID | Name             | Bias On | Start Up Time | Shut Down Time | Width | Pumps | efficiency_curve_start | efficiency_curve_count | efficiency_curve |\n",
    "|------------------|------------------|---------|----------------|----------------|-------|-------|------------------------|-----------------------|------------------|\n",
    "| 0                | Pump Station #1   | 0       | 5.0            | NaN            | 5.0   | 1     | 0                      | 6                     | [[2.0, 70.0], [4.0, 60.0], [6.0, 55.0], [8.0, ... |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use HdfUtils for extracting projection\n",
    "print(\"\\nExtracting Projection from HDF\")\n",
    "projection = HdfBase.get_projection(hdf_path=geom_hdf_path)\n",
    "if projection:\n",
    "    print(f\"Projection: {projection}\")\n",
    "else:\n",
    "    print(\"No projection information found.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get projection from HDF file\n",
    "projection = HdfBase.get_projection(hdf_path=geom_hdf_path)\n",
    "\n",
    "# Set CRS for GeoDataFrames\n",
    "if projection:\n",
    "    pipe_conduits_gdf.set_crs(projection, inplace=True, allow_override=True)\n",
    "    pipe_nodes_gdf.set_crs(projection, inplace=True, allow_override=True)\n",
    "\n",
    "print(\"Pipe Conduits GeoDataFrame columns:\")\n",
    "print(pipe_conduits_gdf.columns)\n",
    "\n",
    "print(\"\\nPipe Nodes GeoDataFrame columns:\")\n",
    "print(pipe_nodes_gdf.columns)\n",
    "\n",
    "perimeter_polygons = HdfMesh.get_mesh_areas(geom_hdf_path, ras_object=pipes_ex)\n",
    "if projection:\n",
    "    perimeter_polygons.set_crs(projection, inplace=True, allow_override=True)\n",
    "    \n",
    "print(\"\\nPerimeter Polygons GeoDataFrame columns:\")\n",
    "print(perimeter_polygons.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from shapely import wkt\n",
    "import matplotlib.patches as mpatches\n",
    "import matplotlib.lines as mlines\n",
    "import numpy as np\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(28, 20))\n",
    "\n",
    "# Plot cell polygons with 50% transparency behind the pipe network\n",
    "cell_polygons_df = HdfMesh.get_mesh_cell_polygons(geom_hdf_path, ras_object=pipes_ex)\n",
    "if not cell_polygons_df.empty:\n",
    "    cell_polygons_df.plot(ax=ax, edgecolor='lightgray', facecolor='lightgray', alpha=0.5)\n",
    "\n",
    "# Plot pipe conduits - the Polyline column already contains LineString geometries\n",
    "pipe_conduits_gdf.set_geometry('Polyline', inplace=True)\n",
    "\n",
    "# Plot each pipe conduit individually to ensure all are shown\n",
    "for idx, row in pipe_conduits_gdf.iterrows():\n",
    "    ax.plot(*row.Polyline.xy, color='blue', linewidth=1)\n",
    "\n",
    "# Create a colormap for node elevations\n",
    "norm = plt.Normalize(pipe_nodes_gdf['Invert Elevation'].min(), \n",
    "                    pipe_nodes_gdf['Invert Elevation'].max())\n",
    "cmap = plt.cm.viridis\n",
    "\n",
    "# Plot pipe nodes colored by invert elevation\n",
    "scatter = ax.scatter(pipe_nodes_gdf.geometry.x, pipe_nodes_gdf.geometry.y,\n",
    "                    c=pipe_nodes_gdf['Invert Elevation'], \n",
    "                    cmap=cmap, norm=norm,\n",
    "                    s=100)\n",
    "\n",
    "# Add colorbar\n",
    "cbar = plt.colorbar(scatter)\n",
    "cbar.set_label('Invert Elevation (ft)', rotation=270, labelpad=15)\n",
    "\n",
    "# Add combined labels for invert and drop inlet elevations\n",
    "for idx, row in pipe_nodes_gdf.iterrows():\n",
    "    label_text = \"\"  # Initialize label_text for each node\n",
    "    # Add drop inlet elevation label if it exists and is not NaN\n",
    "    if 'Drop Inlet Elevation' in row and not np.isnan(row['Drop Inlet Elevation']):\n",
    "        label_text += f\"TOC: {row['Drop Inlet Elevation']:.2f}\\n\"\n",
    "    label_text += f\"INV: {row['Invert Elevation']:.2f}\"\n",
    "    \n",
    "    ax.annotate(label_text,\n",
    "                xy=(row.geometry.x, row.geometry.y),\n",
    "                xytext=(-10, -10), textcoords='offset points',\n",
    "                fontsize=8,\n",
    "                bbox=dict(facecolor='white', edgecolor='black', boxstyle='round,pad=0.5'))\n",
    "\n",
    "# Add perimeter polygons \n",
    "if not perimeter_polygons.empty:\n",
    "    perimeter_polygons.plot(ax=ax, edgecolor='black', facecolor='none')\n",
    "\n",
    "# Create proxy artists for legend\n",
    "conduit_line = mlines.Line2D([], [], color='blue', label='Conduits')\n",
    "node_point = mlines.Line2D([], [], color='blue', marker='o', linestyle='None',\n",
    "                          markersize=10, label='Nodes')\n",
    "perimeter = mpatches.Patch(facecolor='none', edgecolor='black',\n",
    "                          label='Perimeter Polygons')\n",
    "\n",
    "ax.set_title('Pipe Network with Node Elevations')\n",
    "\n",
    "# Add legend with proxy artists\n",
    "ax.legend(handles=[conduit_line, node_point, perimeter])\n",
    "\n",
    "# Set aspect ratio to be equal and adjust limits\n",
    "ax.set_aspect('equal', 'datalim')\n",
    "ax.autoscale_view()\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Visualize pump stations on a map\n",
    "fig, ax = plt.subplots(figsize=(12, 8))\n",
    "pump_stations_gdf.plot(ax=ax, color='green', markersize=50, label='Pump Stations')\n",
    "ax.set_title('Pump Stations Location')\n",
    "ax.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example 3: Get pipe network timeseries\n",
    "valid_variables = [\n",
    "    \"Cell Courant\", \"Cell Water Surface\", \"Face Flow\", \"Face Velocity\",\n",
    "    \"Face Water Surface\", \"Pipes/Pipe Flow DS\", \"Pipes/Pipe Flow US\",\n",
    "    \"Pipes/Vel DS\", \"Pipes/Vel US\", \"Nodes/Depth\", \"Nodes/Drop Inlet Flow\",\n",
    "    \"Nodes/Water Surface\"\n",
    "]\n",
    "\n",
    "print(\"Valid variables for pipe network timeseries:\")\n",
    "for var in valid_variables:\n",
    "    print(f\"- {var}\")\n",
    "\n",
    "# Extract pipe network timeseries for each valid pipe-related variable\n",
    "pipe_variables = [var for var in valid_variables if var.startswith(\"Pipes/\") or var.startswith(\"Nodes/\")]\n",
    "\n",
    "for variable in pipe_variables:\n",
    "    try:\n",
    "        pipe_timeseries = HdfPipe.get_pipe_network_timeseries(plan_hdf_path, variable=variable)\n",
    "        print(f\"\\nPipe Network Timeseries ({variable}):\")\n",
    "        print(pipe_timeseries.head())  # Print first few rows to avoid overwhelming output\n",
    "    except Exception as e:\n",
    "        print(f\"Error extracting {variable}: {str(e)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pipe Network Timeseries Data Description\n",
    "\n",
    "The `get_pipe_network_timeseries` function returns an xarray DataArray for each variable. Here's a general description of the data structure:\n",
    "\n",
    "1. **Pipes/Pipe Flow DS and Pipes/Pipe Flow US**:\n",
    "   - Dimensions: time, location (pipe IDs)\n",
    "   - Units: ft^3/s (cubic feet per second)\n",
    "   - Description: Represents the flow rate at the downstream (DS) and upstream (US) ends of pipes over time.\n",
    "\n",
    "2. **Pipes/Vel DS and Pipes/Vel US**:\n",
    "   - Dimensions: time, location (pipe IDs)\n",
    "   - Units: ft/s (feet per second)\n",
    "   - Description: Shows the velocity at the downstream (DS) and upstream (US) ends of pipes over time.\n",
    "\n",
    "3. **Nodes/Depth**:\n",
    "   - Dimensions: time, location (node IDs)\n",
    "   - Units: ft (feet)\n",
    "   - Description: Indicates the depth of water at each node over time.\n",
    "\n",
    "4. **Nodes/Drop Inlet Flow**:\n",
    "   - Dimensions: time, location (node IDs)\n",
    "   - Units: cfs (cubic feet per second)\n",
    "   - Description: Represents the flow rate through drop inlets at each node over time.\n",
    "\n",
    "5. **Nodes/Water Surface**:\n",
    "   - Dimensions: time, location (node IDs)\n",
    "   - Units: ft (feet)\n",
    "   - Description: Shows the water surface elevation at each node over time.\n",
    "\n",
    "General notes:\n",
    "- The 'time' dimension represents the simulation timesteps.\n",
    "- The 'location' dimension represents either pipe IDs or node IDs, depending on the variable.\n",
    "- The number of timesteps and locations may vary depending on the specific dataset and simulation setup.\n",
    "- Negative values in flow variables may indicate reverse flow direction.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.dates import DateFormatter\n",
    "import numpy as np\n",
    "import random\n",
    "\n",
    "# Define the variables we want to plot\n",
    "variables = [\n",
    "    \"Pipes/Pipe Flow DS\", \"Pipes/Pipe Flow US\", \"Pipes/Vel DS\", \"Pipes/Vel US\",\n",
    "    \"Nodes/Depth\", \"Nodes/Drop Inlet Flow\", \"Nodes/Water Surface\"\n",
    "]\n",
    "\n",
    "# Create a separate plot for each variable\n",
    "for variable in variables:\n",
    "    try:\n",
    "        # Get the data for the current variable\n",
    "        data = HdfPipe.get_pipe_network_timeseries(plan_hdf_path, variable=variable)\n",
    "        \n",
    "        # Create a new figure\n",
    "        fig, ax = plt.subplots(figsize=(12, 6))\n",
    "        \n",
    "        # Pick one random location\n",
    "        random_location = random.choice(data.location.values)\n",
    "        \n",
    "        # Determine if it's a pipe or node variable\n",
    "        if variable.startswith(\"Pipes/\"):\n",
    "            location_type = \"Conduit ID\"\n",
    "        else:\n",
    "            location_type = \"Node ID\"\n",
    "        \n",
    "        # Plot the data for the randomly selected location\n",
    "        ax.plot(data.time, data.sel(location=random_location), label=f'{location_type} {random_location}')\n",
    "        \n",
    "        # Set the title and labels\n",
    "        ax.set_title(f'{variable} Over Time ({location_type} {random_location})')\n",
    "        ax.set_xlabel('Time')  # Corrected from ax.xlabel to ax.set_xlabel\n",
    "        ax.set_ylabel(f'{variable} ({data.attrs[\"units\"]})')  # Corrected from ax.ylabel to ax.set_ylabel\n",
    "        \n",
    "        # Format the x-axis to show dates nicely\n",
    "        ax.xaxis.set_major_formatter(DateFormatter('%Y-%m-%d %H:%M'))\n",
    "        plt.xticks(rotation=45)\n",
    "        \n",
    "        # Add a legend\n",
    "        ax.legend(title=location_type, loc='upper left')\n",
    "        \n",
    "        # Adjust the layout\n",
    "        plt.tight_layout()\n",
    "        \n",
    "        # Show the plot\n",
    "        plt.show()\n",
    "        \n",
    "    except Exception as e:\n",
    "        print(f\"Error plotting {variable}: {str(e)}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example 8: Get pump station timeseries\n",
    "pump_station_name = pump_stations_gdf.iloc[0]['Name']  # Get the first pump station name\n",
    "# Use the results_pump_station_timeseries method \n",
    "pump_timeseries = HdfPump.get_pump_station_timeseries(plan_hdf_path, pump_station=pump_station_name)\n",
    "print(f\"\\nPump Station Timeseries ({pump_station_name}):\")\n",
    "print(pump_timeseries)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use get_hdf5_dataset_info function to get Pipe Conduits data:\n",
    "HdfBase.get_dataset_info(plan_hdf_path, \"/Geometry/Pump Stations/\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Extract the pump station timeseries data\n",
    "pump_station_name = pump_stations_gdf.iloc[0]['Name']  # Get the first pump station name\n",
    "pump_timeseries = HdfPump.get_pump_station_timeseries(plan_hdf_path, pump_station=pump_station_name)\n",
    "\n",
    "# Print the pump station timeseries\n",
    "print(f\"\\nPump Station Timeseries ({pump_station_name}):\")\n",
    "print(pump_timeseries)\n",
    "\n",
    "# Create a new figure for plotting\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# Plot each variable in the timeseries\n",
    "for variable in pump_timeseries.coords['variable'].values:\n",
    "    data = pump_timeseries.sel(variable=variable)\n",
    "    \n",
    "    # Decode units to strings\n",
    "    unit = pump_timeseries.attrs[\"units\"][list(pump_timeseries.coords[\"variable\"].values).index(variable)][1].decode('utf-8')\n",
    "    \n",
    "    # Check if the variable is 'Pumps on' to plot it differently\n",
    "    if variable == 'Pumps on':\n",
    "        # Plot with color based on the on/off status\n",
    "        colors = ['green' if val > 0 else 'red' for val in data.values.flatten()]\n",
    "        ax.scatter(pump_timeseries['time'], data, label=f'{variable} ({unit})', color=colors)\n",
    "    else:\n",
    "        ax.plot(pump_timeseries['time'], data, label=f'{variable} ({unit})')\n",
    "        \n",
    "        # Label the peak values\n",
    "        peak_time = pump_timeseries['time'][data.argmax()]\n",
    "        peak_value = data.max()\n",
    "        ax.annotate(f'Peak: {peak_value:.2f}', xy=(peak_time, peak_value), \n",
    "                    xytext=(peak_time, peak_value + 0.1 * peak_value), \n",
    "                    arrowprops=dict(facecolor='black', arrowstyle='->'),\n",
    "                    fontsize=10, color='black', ha='center')\n",
    "\n",
    "# Set the title and labels\n",
    "ax.set_title(f'Timeseries Data for Pump Station: {pump_station_name}')\n",
    "ax.set_xlabel('Time')\n",
    "ax.set_ylabel('Values')\n",
    "\n",
    "# Format the x-axis to show dates nicely\n",
    "ax.xaxis.set_major_formatter(DateFormatter('%Y-%m-%d %H:%M'))\n",
    "plt.xticks(rotation=45)\n",
    "\n",
    "# Add a legend\n",
    "ax.legend(title='Variables', loc='upper left')\n",
    "\n",
    "# Adjust the layout\n",
    "plt.tight_layout()\n",
    "\n",
    "# Show the plot\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

==================================================

File: c:\GH\ras-commander\examples\22_2d_detail_face_data_extraction.ipynb
==================================================
{"cells":[{"cell_type":"markdown","metadata":{},"source":["# HEC-RAS 2D HDF Data Analysis Notebook\n","\n","This notebook demonstrates how to manipulate and analyze HEC-RAS 2D HDF data using the ras-commander library. It leverages the HdfBase, HdfUtils, HdfStruc, HdfMesh, HdfXsec, HdfBndry, HdfPlan, HdfResultsPlan, HdfResultsMesh, and HdfResultsXsec classes to streamline data extraction, processing, and visualization.\n"]},{"cell_type":"code","execution_count":1,"metadata":{},"outputs":[],"source":["# Import required Libraries\n","import subprocess\n","import sys\n","import os\n","from pathlib import Path\n","\n","def install_module(module_name):\n","    try:\n","        __import__(module_name)\n","    except ImportError:\n","        print(f\"{module_name} not found. Installing...\")\n","        subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", \"-U\", module_name])\n","\n","# List of modules to check and install if necessary\n","modules = ['h5py', 'numpy', 'requests', 'geopandas', 'matplotlib', 'pandas', 'pyproj', 'shapely', 'xarray', 'rasterio']\n","for module in modules:\n","    install_module(module)\n","\n","# Import the rest of the required libraries\n","import pandas as pd\n","import numpy as np\n","import geopandas as gpd\n","import matplotlib.pyplot as plt\n","import pyproj\n","from shapely.geometry import Point, LineString, Polygon\n","import xarray as xr\n","from mpl_toolkits.axes_grid1.inset_locator import inset_axes\n","import matplotlib.patches as patches\n","from matplotlib.patches import ConnectionPatch\n","import logging\n","from pathlib import Path\n","import rasterio\n","from rasterio.plot import show\n"]},{"cell_type":"code","execution_count":2,"metadata":{},"outputs":[],"source":["# Install ras-commander if you are not in a dev environment. \n","#install_module('ras-commander')"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["## Importing ras-commander flexibly (from package or local dev copy)\n","import sys\n","from pathlib import Path\n","\n","# Flexible imports to allow for development without installation \n","#  ** Use this version with Jupyter Notebooks **\n","try:\n","    # Try to import from the installed package\n","    from ras_commander import (\n","        init_ras_project, HdfMesh, HdfBndry, HdfResultsMesh, RasExamples, RasPrj, RasPlan, RasCmdr, HdfUtils, HdfResultsPlan, HdfPlan, ras)\n","    from ras_commander.Decorators import standardize_input, log_call\n","    from ras_commander.LoggingConfig import setup_logging, get_logger\n","except ImportError:\n","    # If the import fails, add the parent directory to the Python path\n","    print(\"Using Local ras-commander library\")\n","    import os\n","    current_file = Path(os.getcwd()).resolve()\n","    parent_directory = current_file.parent\n","    sys.path.append(str(parent_directory))\n","    \n","    # Now try to import again\n","    from ras_commander import (\n","        init_ras_project, HdfMesh, HdfBndry, HdfResultsMesh, RasExamples, RasPrj, RasPlan, RasCmdr, HdfUtils, HdfResultsPlan, HdfPlan, ras)\n","    from ras_commander.Decorators import standardize_input, log_call\n","    from ras_commander.LoggingConfig import setup_logging, get_logger\n","\n","print(\"ras_commander imported successfully\")"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["# Download the Chippewa_2D project from HEC and run plan 01\n","\n","# Define the path to the Chippewa_2D project\n","current_dir = Path.cwd()  # Adjust if your notebook is in a different directory\n","bald_eagle_path = current_dir / \"example_projects\" / \"Chippewa_2D\"\n","import logging\n","\n","# Check if Chippewa_2D.p02.hdf exists (so we don't have to re-run the simulation when re-running or debugging)\n","hdf_file = bald_eagle_path / \"Chippewa_2D.p02.hdf\"\n","\n","if not hdf_file.exists():\n","    # Initialize RasExamples and extract the Chippewa_2D project\n","    ras_examples = RasExamples()\n","    ras_examples.extract_project([\"Chippewa_2D\"])\n","\n","    # Initialize custom Ras object\n","    bald_eagle = RasPrj()\n","\n","    # Initialize the RAS project using the custom ras object\n","    bald_eagle = init_ras_project(bald_eagle_path, \"6.6\", ras_instance=bald_eagle)\n","    logging.info(f\"Bald Eagle project initialized with folder: {bald_eagle.project_folder}\")\n","    \n","    logging.info(f\"Bald Eagle object id: {id(bald_eagle)}\")\n","    \n","    # Define the plan number to execute\n","    plan_number = \"02\"\n","\n","    # Update run flags for the project\n","    RasPlan.update_run_flags(\n","        plan_number,\n","        geometry_preprocessor=True,\n","        unsteady_flow_simulation=True,\n","        run_sediment=False,\n","        post_processor=True,\n","        floodplain_mapping=False,\n","        ras_object=bald_eagle\n","    )\n","\n","    # Execute Plan 02 using RasCmdr for Bald Eagle\n","    print(f\"Executing Plan {plan_number} for the Bald Eagle Creek project...\")\n","    success_bald_eagle = RasCmdr.compute_plan(plan_number, ras_object=bald_eagle)\n","    if success_bald_eagle:\n","        print(f\"Plan {plan_number} executed successfully for Bald Eagle.\\n\")\n","    else:\n","        print(f\"Plan {plan_number} execution failed for Bald Eagle.\\n\")\n","else:\n","    print(\"Chippewa_2D.p02.hdf already exists. Skipping project extraction and plan execution.\")\n","    # Initialize the RAS project using the custom ras object\n","    bald_eagle = RasPrj()\n","    bald_eagle = init_ras_project(bald_eagle_path, \"6.6\", ras_instance=bald_eagle)\n","    plan_number = \"02\""]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["# Load Plan and Geometry Dataframes and find Plan and Geometry HDF Paths\n","\n","output_dir = bald_eagle_path / \"detail_face_data_analysis\"\n","\n","# Create output directory if it doesn't exist\n","output_dir.mkdir(exist_ok=True)\n","print(f\"Output directory created/verified at: {output_dir}\")\n","\n","\n","# Display plan_df for bald_eagle project\n","print(\"Plan DataFrame for bald_eagle project:\")\n","display(bald_eagle.plan_df)\n","\n","# Display geom_df for bald_eagle project\n","print(\"\\nGeometry DataFrame for bald_eagle project:\")\n","display(bald_eagle.geom_df)\n","\n","# Get the plan HDF path\n","plan_number = \"02\"  # Assuming we're using plan 01 as in the previous code\n","plan_hdf_path = bald_eagle.plan_df.loc[bald_eagle.plan_df['plan_number'] == plan_number, 'HDF_Results_Path'].values[0]\n","\n","# Get the geometry file number from the plan DataFrame\n","geom_file = bald_eagle.plan_df.loc[bald_eagle.plan_df['plan_number'] == plan_number, 'Geom File'].values[0]\n","geom_number = geom_file[1:]  # Remove the 'g' prefix\n","\n","# Get the geometry HDF path\n","geom_hdf_path = bald_eagle.geom_df.loc[bald_eagle.geom_df['geom_number'] == geom_number, 'hdf_path'].values[0]\n","\n","print(f\"\\nPlan HDF path for Plan {plan_number}: {plan_hdf_path}\")\n","print(f\"Geometry HDF path for Plan {plan_number}: {geom_hdf_path}\")"]},{"cell_type":"code","execution_count":6,"metadata":{},"outputs":[],"source":["# Define the HDF input path as Plan Number\n","\n","plan_number = \"02\"  # Assuming we're using plan 01 as in the previous code\n"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["# Example: Extract runtime and compute time data\n","print(\"\\nExample 2: Extracting runtime and compute time data\")\n","runtime_df = HdfResultsPlan.get_runtime_data(hdf_input=plan_number, ras_object=bald_eagle)\n","if runtime_df is not None:\n","    display(runtime_df)\n","else:\n","    print(\"No runtime data found.\")"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["# For all of the RasGeomHdf Class Functions, we will use geom_hdf_path\n","print(geom_hdf_path)\n","\n","# For the example project, plan 02 is associated with geometry 09\n","# If you want to call the geometry by number, call RasHdfGeom functions with a number\n","# Otherwise, if you want to look up geometry hdf path by plan number, follow the logic in the previous code cells"]},{"cell_type":"code","execution_count":9,"metadata":{},"outputs":[],"source":["# Set the  to USA Contiguous Albers Equal Area Conic (USGS version)\n","# Note, we would usually call the projection function in HdfMesh but the projection is not set in this example project\n","projection = 'EPSG:5070'  "]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["# Use HdfPlan for geometry-related operations\n","print(\"\\nExample: Extracting Base Geometry Attributes\")\n","geom_attrs = HdfPlan.get_geometry_information(geom_hdf_path)\n","\n","if not geom_attrs.empty:\n","    # Display the DataFrame directly\n","    print(\"Base Geometry Attributes:\")\n","    display(geom_attrs)\n","else:\n","    print(\"No base geometry attributes found.\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["# Use HdfMesh for geometry-related operations\n","print(\"\\nExample 3: Listing 2D Flow Area Names\")\n","flow_area_names = HdfMesh.get_mesh_area_names(geom_hdf_path, ras_object=bald_eagle)\n","print(\"2D Flow Area Names:\", flow_area_names)"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["# Example: Get 2D Flow Area Attributes (get_geom_2d_flow_area_attrs)\n","print(\"\\nExample: Extracting 2D Flow Area Attributes\")\n","flow_area_attributes = HdfMesh.get_mesh_area_attributes(geom_hdf_path)\n","display(flow_area_attributes)\n"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["# Example: Get 2D Flow Area Perimeter Polygons (mesh_areas)\n","print(\"\\nExample: Extracting 2D Flow Area Perimeter Polygons\")\n","mesh_areas = HdfMesh.get_mesh_areas(geom_hdf_path)  # Corrected function name"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["# Example: Extract mesh cell faces\n","print(\"\\nExample: Extracting mesh cell faces\")\n","\n","# Get mesh cell faces using the standardize_input decorator for consistent file handling\n","mesh_cell_faces = HdfMesh.get_mesh_cell_faces(geom_hdf_path)\n","\n","# Display the first few rows of the mesh cell faces GeoDataFrame\n","print(\"First few rows of mesh cell faces:\")\n","display(mesh_cell_faces.head())"]},{"cell_type":"code","execution_count":15,"metadata":{},"outputs":[],"source":["# Set the projection to USA Contiguous Albers Equal Area Conic (USGS version)\n","# Note, we would usually call the projection function in HdfMesh but the projection is not set in this example project\n","projection = 'EPSG:5070'  # NAD83 / Conus Albers"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["# Example Function: Find the nearest cell face to a given point\n","# This provides enough basic information the face cell logic in the notebook\n","\n","def find_nearest_cell_face(point, cell_faces_df):\n","    \"\"\"\n","    Find the nearest cell face to a given point.\n","\n","    Args:\n","        point (shapely.geometry.Point): The input point.\n","        cell_faces_df (GeoDataFrame): DataFrame containing cell face linestrings.\n","\n","    Returns:\n","        int: The face_id of the nearest cell face.\n","        float: The distance to the nearest cell face.\n","    \"\"\"\n","    # Calculate distances from the input point to all cell faces\n","    distances = cell_faces_df.geometry.distance(point)\n","\n","    # Find the index of the minimum distance\n","    nearest_index = distances.idxmin()\n","\n","    # Get the face_id and distance of the nearest cell face\n","    nearest_face_id = cell_faces_df.loc[nearest_index, 'face_id']\n","    nearest_distance = distances[nearest_index]\n","\n","    return nearest_face_id, nearest_distance\n","\n","# Example usage\n","print(\"\\nExample: Finding the nearest cell face to a given point\")\n","\n","# Create a sample point (you can replace this with any point of interest)\n","from shapely.geometry import Point\n","from geopandas import GeoDataFrame\n","\n","# Create the sample point with the same CRS as mesh_cell_faces\n","sample_point = GeoDataFrame(\n","    {'geometry': [Point(1025677, 7853731)]}, \n","    crs=mesh_cell_faces.crs\n",")\n","\n","if not mesh_cell_faces.empty and not sample_point.empty:\n","    nearest_face_id, distance = find_nearest_cell_face(sample_point.geometry.iloc[0], mesh_cell_faces)\n","    print(f\"Nearest cell face to point {sample_point.geometry.iloc[0].coords[0]}:\")\n","    print(f\"Face ID: {nearest_face_id}\")\n","    print(f\"Distance: {distance:.2f} units\")\n","\n","    # Visualize the result\n","    fig, ax = plt.subplots(figsize=(12, 8))\n","    \n","    # Plot all cell faces\n","    mesh_cell_faces.plot(ax=ax, color='blue', linewidth=0.5, alpha=0.5, label='Cell Faces')\n","    \n","    # Plot the sample point\n","    sample_point.plot(ax=ax, color='red', markersize=100, alpha=0.7, label='Sample Point')\n","    \n","    # Plot the nearest cell face\n","    nearest_face = mesh_cell_faces[mesh_cell_faces['face_id'] == nearest_face_id]\n","    nearest_face.plot(ax=ax, color='green', linewidth=2, alpha=0.7, label='Nearest Face')\n","    \n","    # Set labels and title\n","    ax.set_xlabel('X Coordinate')\n","    ax.set_ylabel('Y Coordinate')\n","    ax.set_title('Nearest Cell Face to Sample Point')\n","    \n","    # Add legend and grid\n","    ax.legend()\n","    ax.grid(True)\n","    \n","    # Adjust layout and display\n","    plt.tight_layout()\n","    plt.show()\n","else:\n","    print(\"Unable to perform nearest cell face search due to missing data.\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["# Example: Extract mesh cell faces and plot with profile lines\n","print(\"\\nExample: Extracting mesh cell faces and plotting with profile lines\")\n","\n","# Get mesh cell faces\n","mesh_cell_faces = HdfMesh.get_mesh_cell_faces(geom_hdf_path)\n","\n","# Display the first few rows of the mesh cell faces DataFrame\n","print(\"First few rows of mesh cell faces:\")\n","display(mesh_cell_faces.head())\n","\n","# Load the GeoJSON file for profile lines\n","geojson_path = Path(r'data/profile_lines_chippewa2D.geojson')  # Update with the correct path\n","profile_lines_gdf = gpd.read_file(geojson_path)\n","\n","# Set the Coordinate Reference System (CRS) to EPSG:5070\n","profile_lines_gdf = profile_lines_gdf.set_crs(epsg=5070, allow_override=True)\n","\n","# Plot the mesh cell faces and profile lines together\n","fig, ax = plt.subplots(figsize=(12, 8))\n","mesh_cell_faces.plot(ax=ax, color='blue', alpha=0.5, edgecolor='k', label='Mesh Cell Faces')\n","profile_lines_gdf.plot(ax=ax, color='orange', linewidth=2, label='Profile Lines')\n","\n","# Set labels and title\n","ax.set_xlabel('Easting')\n","ax.set_ylabel('Northing')\n","ax.set_title('Mesh Cell Faces and Profile Lines')\n","\n","# Add grid and legend\n","ax.grid(True)\n","ax.legend()\n","\n","# Adjust layout and display\n","plt.tight_layout()\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["# Example: Extracting mesh cell faces near profile lines\n","print(\"\\nExample: Extracting mesh cell faces near profile lines\")\n","\n","# Get mesh cell faces using HdfMesh class\n","mesh_cell_faces = HdfMesh.get_mesh_cell_faces(geom_hdf_path)\n","\n","# Display the first few rows of the mesh cell faces DataFrame\n","print(\"First few rows of mesh cell faces:\")\n","display(mesh_cell_faces.head())\n","\n","# Load the GeoJSON file for profile lines\n","geojson_path = Path(r'data/profile_lines_chippewa2D.geojson')  # Update with the correct path\n","profile_lines_gdf = gpd.read_file(geojson_path)\n","\n","# Set the Coordinate Reference System (CRS) to EPSG:5070\n","profile_lines_gdf = profile_lines_gdf.set_crs(epsg=5070, allow_override=True)\n","\n","# Initialize a dictionary to store faces near each profile line\n","faces_near_profile_lines = {}\n","\n","# Define distance threshold (10 ft converted to meters)\n","distance_threshold = 10\n","angle_threshold = 60  # degrees\n","\n","# Function to calculate the smallest angle between two lines or line segments.\n","def calculate_angle(line):\n","    if isinstance(line, LineString):\n","        x_diff = line.xy[0][-1] - line.xy[0][0]\n","        y_diff = line.xy[1][-1] - line.xy[1][0]\n","    else:\n","        x_diff = line[1][0] - line[0][0]\n","        y_diff = line[1][1] - line[0][1]\n","    \n","    angle = np.degrees(np.arctan2(y_diff, x_diff))\n","    return angle % 360 if angle >= 0 else (angle + 360) % 360\n","\n","# Function to break line into segments\n","def break_line_into_segments(line, segment_length):\n","    segments = []\n","    segment_angles = []\n","    \n","    distances = np.arange(0, line.length, segment_length)\n","    if distances[-1] != line.length:\n","        distances = np.append(distances, line.length)\n","        \n","    for i in range(len(distances)-1):\n","        point1 = line.interpolate(distances[i])\n","        point2 = line.interpolate(distances[i+1])\n","        segment = LineString([point1, point2])\n","        segments.append(segment)\n","        segment_angles.append(calculate_angle([point1.coords[0], point2.coords[0]]))\n","        \n","    return segments, segment_angles\n","\n","# Function to calculate angle difference accounting for 180 degree equivalence\n","def angle_difference(angle1, angle2):\n","    diff = abs(angle1 - angle2) % 180\n","    return min(diff, 180 - diff)\n","\n","# Function to order faces along profile line\n","def order_faces_along_profile(profile_line, faces_gdf):\n","    profile_start = Point(profile_line.coords[0])\n","    \n","    faces_with_dist = []\n","    for idx, face in faces_gdf.iterrows():\n","        face_start = Point(face.geometry.coords[0])\n","        dist = profile_start.distance(face_start)\n","        faces_with_dist.append((idx, dist))\n","    \n","    faces_with_dist.sort(key=lambda x: x[1])\n","    return [x[0] for x in faces_with_dist]\n","\n","# Function to combine ordered faces into single linestring\n","def combine_faces_to_linestring(ordered_faces_gdf):\n","    coords = []\n","    for _, face in ordered_faces_gdf.iterrows():\n","        if not coords:  # First face - add all coordinates\n","            coords.extend(list(face.geometry.coords))\n","        else:  # Subsequent faces - add only end coordinate\n","            coords.append(face.geometry.coords[-1])\n","    return LineString(coords)\n","\n","# Initialize GeoDataFrame for final profile-to-faceline results\n","profile_to_faceline = gpd.GeoDataFrame(columns=['profile_name', 'geometry'], crs=profile_lines_gdf.crs)\n","\n","# Iterate through each profile line\n","for index, profile_line in profile_lines_gdf.iterrows():\n","    profile_geom = profile_line.geometry\n","    \n","    # Break profile line into segments\n","    segments, segment_angles = break_line_into_segments(profile_geom, distance_threshold)\n","    \n","    # Initialize set to store nearby faces\n","    nearby_faces = set()\n","    \n","    # For each face, check distance to segments and angle difference\n","    for face_idx, face in mesh_cell_faces.iterrows():\n","        face_geom = face.geometry\n","        \n","        if isinstance(face_geom, LineString):\n","            face_angle = calculate_angle(face_geom)\n","            \n","            for segment, segment_angle in zip(segments, segment_angles):\n","                if face_geom.distance(segment) <= distance_threshold:\n","                    if angle_difference(face_angle, segment_angle) <= angle_threshold:\n","                        nearby_faces.add(face_idx)\n","                        break\n","    \n","    # Convert the set of indices back to a GeoDataFrame\n","    nearby_faces_gdf = mesh_cell_faces.loc[list(nearby_faces)]\n","    \n","    # Order faces along profile line\n","    ordered_indices = order_faces_along_profile(profile_geom, nearby_faces_gdf)\n","    ordered_faces_gdf = nearby_faces_gdf.loc[ordered_indices]\n","    \n","    # Combine ordered faces into single linestring\n","    combined_linestring = combine_faces_to_linestring(ordered_faces_gdf)\n","    \n","    # Add to profile_to_faceline GeoDataFrame\n","    new_row = gpd.GeoDataFrame({'profile_name': [profile_line['Name']], \n","                               'geometry': [combined_linestring]}, \n","                              crs=profile_lines_gdf.crs)\n","    profile_to_faceline = pd.concat([profile_to_faceline, new_row], ignore_index=True)\n","    \n","    # Store the ordered faces in the dictionary\n","    faces_near_profile_lines[profile_line['Name']] = ordered_faces_gdf\n","\n","# Plot the results\n","fig, ax = plt.subplots(figsize=(12, 8))\n","\n","# Plot all mesh cell faces in light blue\n","mesh_cell_faces.plot(ax=ax, color='lightblue', alpha=0.3, edgecolor='k', label='All Mesh Faces')\n","\n","# Plot selected faces for each profile line with numbers\n","colors = ['red', 'green', 'blue']\n","for (profile_name, faces), color in zip(faces_near_profile_lines.items(), colors):\n","    if not faces.empty:\n","        faces.plot(ax=ax, color=color, alpha=0.6, label=f'Faces near {profile_name}')\n","        \n","        # Add numbers to faces\n","        for i, (idx, face) in enumerate(faces.iterrows()):\n","            midpoint = face.geometry.interpolate(0.5, normalized=True)\n","            ax.text(midpoint.x, midpoint.y, str(i+1), \n","                   color=color, fontweight='bold', ha='center', va='center')\n","\n","# Plot the combined linestrings\n","profile_to_faceline.plot(ax=ax, color='black', linewidth=2, \n","                        linestyle='--', label='Combined Face Lines')\n","\n","# Set labels and title\n","ax.set_xlabel('Easting')\n","ax.set_ylabel('Northing')\n","ax.set_title('Mesh Cell Faces and Profile Lines\\nNumbered in order along profile')\n","\n","# Add grid and legend\n","ax.grid(True)\n","ax.legend()\n","\n","# Adjust layout and display\n","plt.tight_layout()\n","plt.show()\n","\n","# Display the results\n","print(\"\\nOriginal ordered faces near profile lines:\")\n","display(faces_near_profile_lines)\n","\n","print(\"\\nCombined profile-to-faceline results:\")\n","display(profile_to_faceline)"]},{"cell_type":"markdown","metadata":{},"source":["-----"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["# Get face property tables with error handling\n","face_property_tables = HdfMesh.get_mesh_face_property_tables(geom_hdf_path)\n","display(face_property_tables)"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["# Extract the face property table for Face ID 4 and display it\n","import matplotlib.pyplot as plt\n","\n","face_id = 4\n","face_properties = face_property_tables['Perimeter 1'][face_property_tables['Perimeter 1']['Face ID'] == face_id]\n","\n","# Create subplots arranged horizontally\n","fig, axs = plt.subplots(1, 3, figsize=(18, 6))\n","\n","# Plot Z vs Area\n","axs[0].plot(face_properties['Z'], face_properties['Area'], marker='o', color='blue', label='Area')\n","axs[0].set_title(f'Face ID {face_id}: Z vs Area')\n","axs[0].set_xlabel('Z')\n","axs[0].set_ylabel('Area')\n","axs[0].grid(True)\n","axs[0].legend()\n","\n","# Plot Z vs Wetted Perimeter\n","axs[1].plot(face_properties['Z'], face_properties['Wetted Perimeter'], marker='o', color='green', label='Wetted Perimeter')\n","axs[1].set_title(f'Face ID {face_id}: Z vs Wetted Perimeter')\n","axs[1].set_xlabel('Z')\n","axs[1].set_ylabel('Wetted Perimeter')\n","axs[1].grid(True)\n","axs[1].legend()\n","\n","# Plot Z vs Manning's n\n","axs[2].plot(face_properties['Z'], face_properties[\"Manning's n\"], marker='o', color='red', label=\"Manning's n\")\n","axs[2].set_title(f'Face ID {face_id}: Z vs Manning\\'s n')\n","axs[2].set_xlabel('Z')\n","axs[2].set_ylabel(\"Manning's n\")\n","axs[2].grid(True)\n","axs[2].legend()\n","\n","plt.tight_layout()\n","plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["# Get mesh timeseries output\n","\n","# Get mesh areas from previous code cell\n","mesh_areas = HdfMesh.get_mesh_area_names(geom_hdf_path, ras_object=bald_eagle)\n","\n","if mesh_areas:\n","    mesh_name = mesh_areas[0]  # Use the first 2D flow area name\n","    timeseries_da = HdfResultsMesh.get_mesh_timeseries(plan_hdf_path, mesh_name, \"Water Surface\", ras_object=bald_eagle)\n","    print(f\"\\nMesh Timeseries Output (Water Surface) for {mesh_name}:\")\n","    print(timeseries_da)\n","else:\n","    print(\"No mesh areas found in the geometry file.\")\n","\n","# Get mesh cells timeseries output\n","cells_timeseries_ds = HdfResultsMesh.get_mesh_cells_timeseries(plan_hdf_path, mesh_name, ras_object=bald_eagle)\n","print(\"\\nMesh Cells Timeseries Output:\")\n","print(cells_timeseries_ds)\n","\n","# Get mesh faces timeseries output\n","faces_timeseries_ds = HdfResultsMesh.get_mesh_faces_timeseries(plan_hdf_path, mesh_name, ras_object=bald_eagle)\n","print(\"\\nMesh Faces Timeseries Output:\")\n","print(faces_timeseries_ds)\n"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["# Convert all face velocities and face flow values to positive\n","\n","# Function to process and convert face data to positive values\n","def convert_to_positive_values(faces_timeseries_ds, cells_timeseries_ds):\n","    \"\"\"\n","    Convert face velocities and flows to positive values while maintaining their relationships.\n","    \n","    Args:\n","        faces_timeseries_ds (xarray.Dataset): Dataset containing face timeseries data\n","        cells_timeseries_ds (xarray.Dataset): Dataset containing cell timeseries data\n","        \n","    Returns:\n","        xarray.Dataset: Modified dataset with positive values\n","    \"\"\"\n","    # Get the face velocity and flow variables\n","    face_velocity = faces_timeseries_ds['face_velocity']\n","    face_flow = faces_timeseries_ds['face_flow']\n","    \n","    # Calculate the sign of the velocity to maintain flow direction relationships\n","    velocity_sign = xr.where(face_velocity >= 0, 1, -1)\n","    \n","    # Convert velocities and flows to absolute values while maintaining their relationship\n","    faces_timeseries_ds['face_velocity'] = abs(face_velocity)\n","    faces_timeseries_ds['face_flow'] = abs(face_flow)\n","    \n","    # Store the original sign as a new variable for reference\n","    faces_timeseries_ds['velocity_direction'] = velocity_sign\n","    \n","    print(\"Conversion to positive values complete.\")\n","    print(f\"Number of faces processed: {len(faces_timeseries_ds.face_id)}\")\n","    \n","    return faces_timeseries_ds, cells_timeseries_ds\n","\n","# Convert the values in our datasets\n","faces_timeseries_ds_positive, cells_timeseries_ds_positive = convert_to_positive_values(\n","    faces_timeseries_ds, \n","    cells_timeseries_ds\n",")\n","\n"]},{"cell_type":"code","execution_count":23,"metadata":{},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import xarray as xr\n","\n","# Function to process faces for a single profile line\n","def process_profile_line(profile_name, faces, cells_timeseries_ds, faces_timeseries_ds):\n","    face_ids = faces['face_id'].tolist()\n","    \n","    # Extract relevant data for these faces\n","    face_velocities = faces_timeseries_ds['face_velocity'].sel(face_id=face_ids)\n","    face_flows = faces_timeseries_ds['face_flow'].sel(face_id=face_ids)\n","    \n","    # Create a new dataset with calculated results\n","    results_ds = xr.Dataset({\n","        'face_velocity': face_velocities,\n","        'face_flow': face_flows\n","    })\n","    \n","    # Convert to dataframe for easier manipulation\n","    results_df = results_ds.to_dataframe().reset_index()\n","    \n","    # Add profile name and face order\n","    results_df['profile_name'] = profile_name\n","    results_df['face_order'] = results_df.groupby('time')['face_id'].transform(lambda x: pd.factorize(x)[0])\n","    \n","    return results_df\n"]},{"cell_type":"code","execution_count":24,"metadata":{},"outputs":[],"source":["# Calculate Vave = Sum Qn / Sum An for each profile line\n","# where Vave = the summation of face flow / flow area for all the faces in the profile line\n","\n","# Then, save the results to CSV"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["# Process all profile lines\n","all_results = []\n","for profile_name, faces in faces_near_profile_lines.items():\n","    profile_results = process_profile_line(profile_name, faces, cells_timeseries_ds, faces_timeseries_ds)\n","    all_results.append(profile_results)\n","\n","# Combine results from all profile lines\n","combined_results_df = pd.concat(all_results, ignore_index=True)\n","\n","# Display the first few rows of the combined results\n","print(combined_results_df.head())"]},{"cell_type":"markdown","metadata":{},"source":["-----"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["profile_time_series = {}\n","\n","# Iterate through each profile line and extract its corresponding data\n","for profile_name, faces_gdf in faces_near_profile_lines.items():\n","    # Get the list of face_ids for this profile line\n","    face_ids = faces_gdf['face_id'].tolist()\n","    \n","    # Filter the combined_results_df for these face_ids\n","    profile_df = combined_results_df[combined_results_df['face_id'].isin(face_ids)].copy()\n","    \n","    # Add the profile name as a column\n","    profile_df['profile_name'] = profile_name\n","    \n","    # Reset index for cleanliness\n","    profile_df.reset_index(drop=True, inplace=True)\n","    \n","    # Store in the dictionary\n","    profile_time_series[profile_name] = profile_df\n","    \n","    # Display a preview\n","    print(f\"\\nTime Series DataFrame for {profile_name}:\")\n","    display(profile_df.head())\n","\n","# Optionally, display all profile names\n","print(\"\\nProfile Lines Processed:\")\n","print(list(profile_time_series.keys()))\n"]},{"cell_type":"markdown","metadata":{},"source":["| Time       | face_id | face_velocity | face_flow   | profile_name   | face_order |\n","|------------|---------|---------------|-------------|----------------|------------|\n","| 2019-04-02 | 370     | 1.543974      | 961.118225  | Profile Line 1 | 0          |\n","| 2019-04-02 | 232     | 2.738194      | 5103.555176 | Profile Line 1 | 1          |\n","| 2019-04-02 | 747     | 3.109769      | 4777.513672 | Profile Line 1 | 2          |\n","| 2019-04-02 | 216     | 2.974400      | 5120.266113 | Profile Line 1 | 3          |\n","| 2019-04-02 | 184     | 0.924792      | 700.676697  | Profile Line 1 | 4          |  \n","  \n","\n","\n","| Time       | face_id | face_velocity | face_flow   | profile_name   | face_order |\n","|------------|---------|---------------|-------------|----------------|------------|\n","| 2019-04-02 | 52      | 0.000000      | 0.000000    | Profile Line 2 | 0          |\n","| 2019-04-02 | 92      | 0.000000      | 0.000000    | Profile Line 2 | 1          |\n","| 2019-04-02 | 548     | 1.018038      | 353.129822  | Profile Line 2 | 2          |\n","| 2019-04-02 | 691     | 2.106394      | 2195.409912 | Profile Line 2 | 3          |\n","| 2019-04-02 | 78      | 2.376904      | 3600.228760 | Profile Line 2 | 4          |  \n","  \n","\n","\n","| Time       | face_id | face_velocity | face_flow   | profile_name   | face_order |\n","|------------|---------|---------------|-------------|----------------|------------|\n","| 2019-04-02 | 532     | 0.000000      | 0.000000    | Profile Line 3 | 0          |\n","| 2019-04-02 | 341     | 0.000000      | 0.000000    | Profile Line 3 | 1          |\n","| 2019-04-02 | 349     | 1.962641      | 2601.644287 | Profile Line 3 | 2          |\n","| 2019-04-02 | 455     | 2.367594      | 4148.870605 | Profile Line 3 | 3          |\n","| 2019-04-02 | 469     | 2.515510      | 4458.292480 | Profile Line 3 | 4          |  \n","  \n","  \n"," \n","Profile Lines Processed:\n","['Profile Line 1', 'Profile Line 2', 'Profile Line 3']"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["all_profiles_df = pd.concat(profile_time_series.values(), ignore_index=True)\n","\n","# Display the combined dataframe\n","print(\"Combined Time Series DataFrame for All Profiles:\")\n","display(all_profiles_df.head())\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["# Recursively explore the 2D Flow Areas structure in the geometry HDF file\n","import h5py\n","\n","def print_hdf_structure(name, obj):\n","    \"\"\"Print information about HDF5 object\"\"\"\n","    print(f\"\\nPath: {name}\")\n","    print(f\"Type: {type(obj).__name__}\")\n","    \n","    if isinstance(obj, h5py.Dataset):\n","        print(f\"Shape: {obj.shape}\")\n","        print(f\"Dtype: {obj.dtype}\")\n","        print(\"Attributes:\")\n","        for key, value in obj.attrs.items():\n","            print(f\"  {key}: {value}\")\n","\n","def explore_flow_areas(file_path):\n","    \"\"\"\n","    Recursively explore and print 2D Flow Areas structure in HDF5 file\n","    \n","    :param file_path: Path to the HDF5 file\n","    \"\"\"\n","    try:\n","        with h5py.File(file_path, 'r') as hdf_file:\n","            if '/Geometry/2D Flow Areas' in hdf_file:\n","                flow_areas_group = hdf_file['/Geometry/2D Flow Areas']\n","                flow_areas_group.visititems(print_hdf_structure)\n","            else:\n","                print(\"2D Flow Areas group not found in geometry file\")\n","    except Exception as e:\n","        print(f\"Error exploring HDF file: {e}\")\n","\n","print(\"\\nExploring 2D Flow Areas structure in geometry file:\")\n","print(\"HDF Base Path: /Geometry/2D Flow Areas \")\n","explore_flow_areas(geom_hdf_path)\n"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["# Check if we have the necessary variables\n","print(\"Available variables:\")\n","print(\"profile_time_series:\", 'profile_time_series' in locals())\n","print(\"faces_near_profile_lines:\", 'faces_near_profile_lines' in locals())\n","print(\"profile_averages:\", 'profile_averages' in locals())\n","\n","# Look at the structure of profile_time_series\n","if 'profile_time_series' in locals():\n","    for name, df in profile_time_series.items():\n","        print(f\"\\nColumns in {name}:\")\n","        print(df.columns.tolist())"]},{"cell_type":"code","execution_count":30,"metadata":{},"outputs":[],"source":["def calculate_discharge_weighted_velocity(profile_df: pd.DataFrame) -> pd.DataFrame:\n","    \"\"\"\n","    Calculate discharge-weighted average velocity for a profile line\n","    Vw = Sum(|Qi|*Vi)/Sum(|Qi|) where Qi is face flow and Vi is face velocity\n","    \"\"\"\n","    print(\"Calculating discharge-weighted velocity...\")\n","    print(f\"Input DataFrame:\\n{profile_df.head()}\")\n","\n","    # Calculate weighted velocity for each timestep\n","    weighted_velocities = []\n","    for time in profile_df['time'].unique():\n","        time_data = profile_df[profile_df['time'] == time]\n","        abs_flows = np.abs(time_data['face_flow'])\n","        abs_velocities = np.abs(time_data['face_velocity'])\n","        weighted_vel = (abs_flows * abs_velocities).sum() / abs_flows.sum()\n","        weighted_velocities.append({\n","            'time': time,\n","            'weighted_velocity': weighted_vel\n","        })\n","    \n","    weighted_df = pd.DataFrame(weighted_velocities)\n","    print(f\"Calculated weighted velocities:\\n{weighted_df.head()}\")\n","    return weighted_df\n"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["# Calculate for each profile line\n","for profile_name, profile_df in profile_time_series.items():\n","    print(f\"\\nProcessing profile: {profile_name}\")\n","\n","    # Calculate discharge-weighted velocity\n","    weighted_velocities = calculate_discharge_weighted_velocity(profile_df)\n","    \n","    print(\"Weighted velocities calculated.\")\n","    display(weighted_velocities)\n","    \n","    # Convert time to datetime if it isn't already\n","    weighted_velocities['time'] = pd.to_datetime(weighted_velocities['time'])\n","    print(\"Converted time to datetime format.\")\n","\n","    # Get ordered faces for this profile\n","    ordered_faces = faces_near_profile_lines[profile_name]\n","    print(f\"Number of ordered faces: {len(ordered_faces)}\")\n","    \n","    # Save dataframes in the output directory\n","    output_file = output_dir / f\"{profile_name}_discharge_weighted_velocity.csv\"\n","    weighted_velocities.to_csv(output_file, index=False)\n","    print(f\"Saved weighted velocities to {output_file}\")"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["# Create plots comparing discharge-weighted velocity and simple average for each profile line\n","for profile_name, profile_df in profile_time_series.items():\n","    \n","    print(f\"\\nGenerating comparison plot for profile: {profile_name}\")\n","    \n","    # Calculate discharge-weighted velocity\n","    weighted_velocities = calculate_discharge_weighted_velocity(profile_df)\n","    weighted_velocities['time'] = pd.to_datetime(weighted_velocities['time'])\n","    \n","    # Calculate simple average velocity for each timestep\n","    simple_averages = profile_df.groupby('time')['face_velocity'].mean().reset_index()\n","    simple_averages['time'] = pd.to_datetime(simple_averages['time'])\n","    \n","    # Create figure for comparison plot\n","    plt.figure(figsize=(16, 9))\n","    \n","    # Plot individual face velocities with thin lines\n","    for face_id in profile_df['face_id'].unique():\n","        face_data = profile_df[profile_df['face_id'] == face_id]\n","        plt.plot(face_data['time'], \n","                face_data['face_velocity'], \n","                alpha=0.8,  # More transparent\n","                linewidth=0.3,  # Thinner line\n","                color='gray',  # Consistent color\n","                label=f'Face ID {face_id}' if face_id == profile_df['face_id'].iloc[0] else \"\")\n","        \n","        # Find and annotate peak value for each face\n","        peak_idx = face_data['face_velocity'].idxmax()\n","        peak_time = face_data.loc[peak_idx, 'time']\n","        peak_vel = face_data.loc[peak_idx, 'face_velocity']\n","        plt.annotate(f'{peak_vel:.2f}',\n","                    xy=(peak_time, peak_vel),\n","                    xytext=(10, 10),\n","                    textcoords='offset points',\n","                    fontsize=8,\n","                    alpha=0.5)\n","    \n","    # Plot discharge-weighted velocity\n","    plt.plot(weighted_velocities['time'], \n","            weighted_velocities['weighted_velocity'], \n","            color='red', \n","            alpha=1.0, \n","            linewidth=2,\n","            label='Discharge-Weighted Velocity')\n","    \n","    # Find and annotate peak weighted velocity\n","    peak_idx = weighted_velocities['weighted_velocity'].idxmax()\n","    peak_time = weighted_velocities.loc[peak_idx, 'time']\n","    peak_vel = weighted_velocities.loc[peak_idx, 'weighted_velocity']\n","    plt.annotate(f'Peak Weighted: {peak_vel:.2f}',\n","                xy=(peak_time, peak_vel),\n","                xytext=(10, 10),\n","                textcoords='offset points',\n","                color='red',\n","                fontweight='bold')\n","    \n","    # Plot simple average\n","    plt.plot(simple_averages['time'], \n","            simple_averages['face_velocity'], \n","            color='blue', \n","            alpha=0.5, \n","            linewidth=1,\n","            linestyle='--',\n","            label='Simple Average')\n","    \n","    # Find and annotate peak simple average\n","    peak_idx = simple_averages['face_velocity'].idxmax()\n","    peak_time = simple_averages.loc[peak_idx, 'time']\n","    peak_vel = simple_averages.loc[peak_idx, 'face_velocity']\n","    plt.annotate(f'Peak Average: {peak_vel:.2f}',\n","                xy=(peak_time, peak_vel),\n","                xytext=(10, -10),\n","                textcoords='offset points',\n","                color='blue',\n","                fontweight='bold')\n","    \n","    # Configure plot\n","    plt.title(f'Velocity Comparison - {profile_name}')\n","    plt.xlabel('Time')\n","    plt.ylabel('Velocity (ft/s)')\n","    plt.grid(True, alpha=0.3)\n","    \n","    # Add legend with better placement\n","    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n","    \n","    # Adjust layout to accommodate legend and stats\n","    plt.subplots_adjust(right=0.8)\n","    \n","    # Save plot to file\n","    plot_file = output_dir / f\"{profile_name}_velocity_comparison.png\"\n","    plt.savefig(plot_file, bbox_inches='tight', dpi=300)\n","    plt.show()\n","    \n","    # Print detailed comparison\n","    print(f\"\\nVelocity Comparison for {profile_name}:\")\n","    print(f\"Number of faces: {profile_df['face_id'].nunique()}\")\n","    print(\"\\nDischarge-Weighted Velocity Statistics:\")\n","    print(f\"Mean: {weighted_velocities['weighted_velocity'].mean():.2f} ft/s\")\n","    print(f\"Max: {weighted_velocities['weighted_velocity'].max():.2f} ft/s\")\n","    print(f\"Min: {weighted_velocities['weighted_velocity'].min():.2f} ft/s\")\n","    print(\"\\nSimple Average Velocity Statistics:\")\n","    print(f\"Mean: {simple_averages['face_velocity'].mean():.2f} ft/s\")\n","    print(f\"Max: {simple_averages['face_velocity'].max():.2f} ft/s\")\n","    print(f\"Min: {simple_averages['face_velocity'].min():.2f} ft/s\")"]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.12.7"}},"nbformat":4,"nbformat_minor":2}

==================================================

File: c:\GH\ras-commander\examples\23_generating_aep_hyetographs_from_atlas_14.ipynb
==================================================
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Session 2.4 Homework and Advanced Applications (AEP Event Modeling)\n",
    "\n",
    "## Created For: AI in H&H Modeling Webinar - October 24, 2024\n",
    "\n",
    "In this session we will modify the Infiltration data for the Davis project, and extract 2D results data from HDF to plot and compare. \n",
    "- Accessing and Modifying Infiltration HDF Data\n",
    "- Scaling Infiltration Rates\n",
    "- Running Multiple Scenarios\n",
    "- Extracting and Comparing Results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-----"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plan:\n",
    "1. Utilize GPT o1-mini to generate a hyetograph for a 24-hour storm event from readily available NOAA Atlas 14 CSV data. \n",
    "\n",
    "\n",
    "\n",
    "This data can also be accessed programmatically, or can be averaged for a particular watershed area.  \n",
    " https://github.com/billk-FM/HEC-Commander/tree/main/RAS-Commander/Atlas_14_Variance  \n",
    "\n",
    "Downloading the CSV data from NOAA Atlas 14 is a good middle ground for data entry.  We can utilize the CSV for input into our script, and the location is easily changed for new locations covered by NOAA Atlas 14. \n",
    "\n",
    "### Providing Context to GPT o1-mini\n",
    "\n",
    "The following pages were copied and pasted into the context window of GPT o1-mini, with clear separators between each data source.  \n",
    "\n",
    "- CSV File from NOAA Atlas 14\n",
    "- NOAA Atlas 14 Data Source (Link etc)\n",
    "- Text from the HEC-HMS Technical Reference Manual, \"Frequency Storm\" Section\n",
    "https://www.hec.usace.army.mil/confluence/hmsdocs/hmstrm/meteorology/precipitation/frequency-storm  \n",
    "(omitting the storm area sections since this does not apply)\n",
    "\n",
    "Follow-ups:\n",
    "\n",
    "The follow-ups are documented in the chat conversation linked below.  \n",
    " - The first script was provided as python, not a notebook cell.  I requested a notebook cell. \n",
    " - Several errors were fed back to o1-mini, which were corrected in the final version. These were generally minor errosrs (number of fields/datetime)\n",
    " - A final request to provide plots, which were worked without error\n",
    "\n",
    "For this task, o1's tendency to overthink, revise liberally and provide a lot of output was helpful.  \n",
    "\n",
    "I was able quickly provide a working script based on established and well documented methods that still may not be conveniently accessible in python and would traditionally require a lot of manual coding or an excel spreadsheet.  \n",
    "\n",
    "ChatGPT o1-mini conversation: https://chatgpt.com/share/67152f62-d648-8010-ada7-2ddbf500cb4b   \n",
    "\n",
    "Now, we can focus on getting these hyetographs into HEC-RAS and running the model with these revised inputs, and comparing the results. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Final o1-mini generated code for generating hyetographs is below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import necessary libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "import re\n",
    "from math import log, exp\n",
    "from pathlib import Path\n",
    "\n",
    "# Function to parse duration strings and convert them to hours\n",
    "def parse_duration(duration_str):\n",
    "    \"\"\"\n",
    "    Parses a duration string and converts it to hours.\n",
    "    Examples:\n",
    "        \"5-min:\" -> 0.0833 hours\n",
    "        \"2-hr:\" -> 2 hours\n",
    "        \"2-day:\" -> 48 hours\n",
    "    \"\"\"\n",
    "    match = re.match(r'(\\d+)-(\\w+):', duration_str.strip())\n",
    "    if not match:\n",
    "        raise ValueError(f\"Invalid duration format: {duration_str}\")\n",
    "    value, unit = match.groups()\n",
    "    value = int(value)\n",
    "    unit = unit.lower()\n",
    "    if unit in ['min', 'minute', 'minutes']:\n",
    "        hours = value / 60.0\n",
    "    elif unit in ['hr', 'hour', 'hours']:\n",
    "        hours = value\n",
    "    elif unit in ['day', 'days']:\n",
    "        hours = value * 24\n",
    "    else:\n",
    "        raise ValueError(f\"Unknown time unit in duration: {unit}\")\n",
    "    return hours\n",
    "\n",
    "# Function to read and process the precipitation frequency CSV\n",
    "def read_precipitation_data(csv_file):\n",
    "    \"\"\"\n",
    "    Reads the precipitation frequency CSV and returns a DataFrame\n",
    "    with durations in hours as the index and ARIs as columns.\n",
    "    This function dynamically locates the header line for the data table.\n",
    "    \"\"\"\n",
    "    with open(csv_file, 'r') as f:\n",
    "        lines = f.readlines()\n",
    "\n",
    "    header_line_idx = None\n",
    "    header_pattern = re.compile(r'^by duration for ari', re.IGNORECASE)\n",
    "\n",
    "    # Locate the header line\n",
    "    for idx, line in enumerate(lines):\n",
    "        if header_pattern.match(line.strip().lower()):\n",
    "            header_line_idx = idx\n",
    "            break\n",
    "\n",
    "    if header_line_idx is None:\n",
    "        raise ValueError('Header line for precipitation frequency estimates not found in CSV file.')\n",
    "\n",
    "    # Extract the ARI headers from the header line\n",
    "    header_line = lines[header_line_idx].strip()\n",
    "    headers = [item.strip() for item in header_line.split(',')]\n",
    "    \n",
    "    if len(headers) < 2:\n",
    "        raise ValueError('Insufficient number of ARI columns found in the header line.')\n",
    "\n",
    "    aris = headers[1:]  # Exclude the first column which is the duration\n",
    "\n",
    "    # Define the pattern for data lines (e.g., \"5-min:\", \"10-min:\", etc.)\n",
    "    duration_pattern = re.compile(r'^\\d+-(min|hr|day):')\n",
    "\n",
    "    # Initialize lists to store durations and corresponding depths\n",
    "    durations = []\n",
    "    depths = {ari: [] for ari in aris}\n",
    "\n",
    "    # Iterate over the lines following the header to extract data\n",
    "    for line in lines[header_line_idx + 1:]:\n",
    "        line = line.strip()\n",
    "        if not line:\n",
    "            continue  # Skip empty lines\n",
    "        if not duration_pattern.match(line):\n",
    "            break  # Stop if the line does not match the duration pattern\n",
    "        parts = [part.strip() for part in line.split(',')]\n",
    "        if len(parts) != len(headers):\n",
    "            raise ValueError(f\"Data row does not match header columns: {line}\")\n",
    "        duration_str = parts[0]\n",
    "        try:\n",
    "            duration_hours = parse_duration(duration_str)\n",
    "        except ValueError as ve:\n",
    "            print(f\"Skipping line due to error: {ve}\")\n",
    "            continue  # Skip lines with invalid duration formats\n",
    "        durations.append(duration_hours)\n",
    "        for ari, depth_str in zip(aris, parts[1:]):\n",
    "            try:\n",
    "                depth = float(depth_str)\n",
    "            except ValueError:\n",
    "                depth = np.nan  # Assign NaN for invalid depth values\n",
    "            depths[ari].append(depth)\n",
    "\n",
    "    # Create the DataFrame\n",
    "    df = pd.DataFrame(depths, index=durations)\n",
    "    df.index.name = 'Duration_hours'\n",
    "\n",
    "    # Drop any rows with NaN values (optional, based on data quality)\n",
    "    df = df.dropna()\n",
    "\n",
    "    return df\n",
    "\n",
    "# Function to perform log-log linear interpolation for each ARI\n",
    "def interpolate_depths(df, total_duration):\n",
    "    \"\"\"\n",
    "    Interpolates precipitation depths for each ARI on a log-log scale\n",
    "    for each hour up to the total storm duration.\n",
    "    \"\"\"\n",
    "    T = total_duration\n",
    "    t_hours = np.arange(1, T+1)\n",
    "    D = {}\n",
    "    for ari in df.columns:\n",
    "        durations = df.index.values\n",
    "        depths = df[ari].values\n",
    "        # Ensure all depths are positive\n",
    "        if np.any(depths <= 0):\n",
    "            raise ValueError(f\"Non-positive depth value in ARI {ari}\")\n",
    "        # Log-log interpolation\n",
    "        log_durations = np.log(durations)\n",
    "        log_depths = np.log(depths)\n",
    "        log_t = np.log(t_hours)\n",
    "        log_D_t = np.interp(log_t, log_durations, log_depths)\n",
    "        D_t = np.exp(log_D_t)\n",
    "        D[ari] = D_t\n",
    "    return D\n",
    "\n",
    "# Function to compute incremental precipitation depths\n",
    "def compute_incremental_depths(D, total_duration):\n",
    "    \"\"\"\n",
    "    Computes incremental precipitation depths for each hour.\n",
    "    I(t) = D(t) - D(t-1), with D(0) = 0.\n",
    "    \"\"\"\n",
    "    incremental_depths = {}\n",
    "    for ari, D_t in D.items():\n",
    "        I_t = np.empty(total_duration)\n",
    "        I_t[0] = D_t[0]  # I(1) = D(1) - D(0) = D(1)\n",
    "        I_t[1:] = D_t[1:] - D_t[:-1]\n",
    "        incremental_depths[ari] = I_t\n",
    "    return incremental_depths\n",
    "\n",
    "# Function to assign incremental depths using the Alternating Block Method\n",
    "def assign_alternating_block(sorted_depths, max_depth, central_index, T):\n",
    "    \"\"\"\n",
    "    Assigns incremental depths to the hyetograph using the Alternating Block Method.\n",
    "    \"\"\"\n",
    "    hyetograph = [0.0] * T\n",
    "    hyetograph[central_index] = max_depth\n",
    "    remaining_depths = sorted_depths.copy()\n",
    "    remaining_depths.remove(max_depth)\n",
    "    left = central_index - 1\n",
    "    right = central_index + 1\n",
    "    toggle = True  # Start assigning to the right\n",
    "    for depth in remaining_depths:\n",
    "        if toggle and right < T:\n",
    "            hyetograph[right] = depth\n",
    "            right += 1\n",
    "        elif not toggle and left >= 0:\n",
    "            hyetograph[left] = depth\n",
    "            left -= 1\n",
    "        elif right < T:\n",
    "            hyetograph[right] = depth\n",
    "            right += 1\n",
    "        elif left >= 0:\n",
    "            hyetograph[left] = depth\n",
    "            left -= 1\n",
    "        else:\n",
    "            print(\"Warning: Not all incremental depths assigned.\")\n",
    "            break\n",
    "        toggle = not toggle\n",
    "    return hyetograph\n",
    "\n",
    "# Function to generate the hyetograph for a given ARI\n",
    "def generate_hyetograph(incremental_depths, position_percent, T):\n",
    "    \"\"\"\n",
    "    Generates the hyetograph for a given ARI using the Alternating Block Method.\n",
    "    \"\"\"\n",
    "    max_depth = np.max(incremental_depths)\n",
    "    incremental_depths_list = incremental_depths.tolist()\n",
    "    central_index = int(round(T * position_percent / 100)) - 1\n",
    "    central_index = max(0, min(central_index, T - 1))\n",
    "    sorted_depths = sorted(incremental_depths_list, reverse=True)\n",
    "    hyetograph = assign_alternating_block(sorted_depths, max_depth, central_index, T)\n",
    "    return hyetograph\n",
    "\n",
    "# Function to save the hyetograph to a CSV file\n",
    "def save_hyetograph(hyetograph, ari, output_dir, position_percent, total_duration):\n",
    "    \"\"\"\n",
    "    Saves the hyetograph to a CSV file.\n",
    "    \"\"\"\n",
    "    df = pd.DataFrame({\n",
    "        'Time_hour': np.arange(1, total_duration + 1),\n",
    "        'Precipitation_in': hyetograph\n",
    "    })\n",
    "    filename = f'hyetograph_ARI_{ari}_years_pos{position_percent}pct_{total_duration}hr.csv'\n",
    "    output_file = os.path.join(output_dir, filename)\n",
    "    df.to_csv(output_file, index=False)\n",
    "    print(f\"Hyetograph for ARI {ari} years saved to {output_file}\")\n",
    "\n",
    "# User Inputs\n",
    "# --------------------\n",
    "# Set the path to your input CSV file from NOAA Atlas 14\n",
    "input_csv = 'data\\PF_Depth_English_PDS_DavisCA.csv'  # Update this path if necessary\n",
    "\n",
    "# Set the output directory where hyetograph CSV files will be saved\n",
    "output_dir = 'hyetographs'\n",
    "\n",
    "# Set the position percentage for the maximum incremental depth block\n",
    "# Choose from 25, 33, 50, 67, or 75\n",
    "position_percent = 50  # Default is 50\n",
    "\n",
    "# Set the total storm duration in hours\n",
    "total_duration = 24  # Default is 24 hours\n",
    "\n",
    "# Ensure the output directory exists\n",
    "Path(output_dir).mkdir(parents=True, exist_ok=True)\n",
    "print(f\"Output directory is set to: {output_dir}\")\n",
    "\n",
    "# Read precipitation data\n",
    "try:\n",
    "    df = read_precipitation_data(input_csv)\n",
    "    print(\"Successfully read the input CSV file.\")\n",
    "except Exception as e:\n",
    "    print(f\"Error reading input CSV: {e}\")\n",
    "    raise\n",
    "\n",
    "# Display the first few rows of the DataFrame to verify\n",
    "print(\"\\nPrecipitation Frequency Data:\")\n",
    "display(df.head())\n",
    "\n",
    "# Interpolate depths\n",
    "try:\n",
    "    D = interpolate_depths(df, total_duration)\n",
    "    print(\"Successfully interpolated precipitation depths.\")\n",
    "except Exception as e:\n",
    "    print(f\"Error during interpolation: {e}\")\n",
    "    raise\n",
    "\n",
    "# Display interpolated depths for the first ARI\n",
    "first_ari = df.columns[0]\n",
    "print(f\"\\nInterpolated Depths for ARI {first_ari} years:\")\n",
    "print(D[first_ari])\n",
    "\n",
    "# Compute incremental depths\n",
    "I = compute_incremental_depths(D, total_duration)\n",
    "print(\"Successfully computed incremental depths.\")\n",
    "\n",
    "# Generate and save hyetographs for each ARI\n",
    "for ari, incremental_depths in I.items():\n",
    "    hyetograph = generate_hyetograph(incremental_depths, position_percent, total_duration)\n",
    "    save_hyetograph(hyetograph, ari, output_dir, position_percent, total_duration)\n",
    "\n",
    "print(\"\\nAll hyetographs have been generated and saved.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plotting the hyetographs (final request from o1-mini)\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Function to plot multiple hyetographs on the same plot\n",
    "def plot_multiple_hyetographs(aris, position_percent, total_duration, output_dir='hyetographs'):\n",
    "    \"\"\"\n",
    "    Plots multiple hyetographs for specified ARIs on the same figure for comparison.\n",
    "    \n",
    "    Parameters:\n",
    "    - aris (list of str or int): List of Annual Recurrence Intervals to plot (e.g., [1, 2, 5, 10])\n",
    "    - position_percent (int): Position percentage for the maximum incremental depth block (25, 33, 50, 67, or 75)\n",
    "    - total_duration (int): Total storm duration in hours\n",
    "    - output_dir (str): Directory where hyetograph CSV files are saved\n",
    "    \"\"\"\n",
    "    plt.figure(figsize=(14, 7))\n",
    "    \n",
    "    for ari in aris:\n",
    "        # Ensure ARI is a string for consistent filename formatting\n",
    "        ari_str = str(ari)\n",
    "        \n",
    "        # Construct the filename based on the naming convention\n",
    "        filename = f'hyetograph_ARI_{ari_str}_years_pos{position_percent}pct_{total_duration}hr.csv'\n",
    "        filepath = os.path.join(output_dir, filename)\n",
    "        \n",
    "        # Check if the file exists\n",
    "        if not os.path.exists(filepath):\n",
    "            print(f\"Warning: File '{filename}' does not exist in the directory '{output_dir}'. Skipping this ARI.\")\n",
    "            continue\n",
    "        \n",
    "        # Read the hyetograph data\n",
    "        try:\n",
    "            hyetograph_df = pd.read_csv(filepath)\n",
    "            print(f\"Successfully read the hyetograph data from '{filename}'.\")\n",
    "        except Exception as e:\n",
    "            print(f\"Error reading the hyetograph CSV file '{filename}': {e}\")\n",
    "            continue\n",
    "        \n",
    "        # Plot the hyetograph\n",
    "        plt.bar(hyetograph_df['Time_hour'], hyetograph_df['Precipitation_in'], \n",
    "                width=0.8, edgecolor='black', alpha=0.5, label=f'ARI {ari_str} years')\n",
    "    \n",
    "    # Customize the plot\n",
    "    plt.xlabel('Time (Hour)', fontsize=14)\n",
    "    plt.ylabel('Incremental Precipitation (inches)', fontsize=14)\n",
    "    plt.title(f'Comparison of Hyetographs for ARIs {aris}\\nPosition: {position_percent}% | Duration: {total_duration} Hours', fontsize=16)\n",
    "    plt.legend()\n",
    "    plt.xticks(range(1, total_duration + 1, max(1, total_duration // 24)))  # Adjust x-ticks based on duration\n",
    "    plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# User Inputs for Multiple ARIs\n",
    "# --------------------\n",
    "# Set the Annual Recurrence Intervals you want to plot\n",
    "aris_to_plot = [1, 2, 5, 10, 25, 50, 100, 200, 500, 1000]  # Example: Multiple ARIs\n",
    "\n",
    "# Set the position percentage for the maximum incremental depth block\n",
    "position_percent = 50  # Example: 50%\n",
    "\n",
    "# Set the total storm duration in hours\n",
    "total_duration = 24  # Example: 24 hours\n",
    "\n",
    "# Set the output directory where hyetograph CSV files are saved\n",
    "output_dir = 'hyetographs'  # Ensure this matches the output directory used previously\n",
    "\n",
    "# Plot the multiple hyetographs\n",
    "plot_multiple_hyetographs(aris=aris_to_plot, \n",
    "                           position_percent=position_percent, \n",
    "                           total_duration=total_duration, \n",
    "                           output_dir=output_dir)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "TO DO: REVISE BELOW TO RUN DAVIS AND EXTRACT RESULTS"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "env_oct16_webinar",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

==================================================

File: c:\GH\ras-commander\examples\24_fluvial_pluvial_delineation.ipynb
==================================================
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Delineate Fluvial and Pluvial Areas using RAS-Commander\n",
    "\n",
    "We will leverage the HEC RAS Summary Outputs to delineate the Fluvial and Pluvial Areas\n",
    "\n",
    "Maximum Water Surface Elevation (WSEL) for each cell is recorded, along with the timestamps of when the maximum WSEL occurs.\n",
    "\n",
    "By locating adjacent cells with dissimilar timestamps, we can delineate the Fluvial and Pluvial Areas.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A note about datframe types: \n",
    "\n",
    "Information from the HEC-RAS plan files are generally dataframes.  The text file interface is for the 32-bit side of HEC-RAS and all spatial data is most easily accessed in the HDF files.  This includes plan_df, geom_df, hdf_paths_df\n",
    "\n",
    "Geometry elements (Mesh Faces and Nodes) are provided as Geodataframes (cell_polygons_gdf, boundary_gdf)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import required Libraries\n",
    "import subprocess\n",
    "import sys\n",
    "import os\n",
    "from pathlib import Path\n",
    "\n",
    "def install_module(module_name):\n",
    "    try:\n",
    "        __import__(module_name)\n",
    "    except ImportError:\n",
    "        print(f\"{module_name} not found. Installing...\")\n",
    "        subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", \"-U\", module_name])\n",
    "\n",
    "# List of modules to check and install if necessary\n",
    "modules = ['h5py', 'numpy', 'requests', 'geopandas', 'matplotlib', 'pandas', 'pyproj', 'shapely', 'xarray', 'rtree', 'tqdm']\n",
    "for module in modules:\n",
    "    install_module(module)\n",
    "\n",
    "# Import the rest of the required libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import geopandas as gpd\n",
    "import matplotlib.pyplot as plt\n",
    "import pyproj\n",
    "from shapely.geometry import Point, LineString, Polygon\n",
    "import xarray as xr\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "from pathlib import Path\n",
    "\n",
    "# Flexible imports to allow for development without installation \n",
    "#  ** Use this version with Jupyter Notebooks **\n",
    "try:\n",
    "    # Try to import from the installed package\n",
    "    from ras_commander import (init_ras_project, HdfBase, HdfFluvialPluvial, HdfPlot, HdfResultsPlot, HdfUtils, HdfStruc, HdfMesh, HdfXsec, HdfBndry, HdfPlan, HdfResultsPlan, HdfResultsMesh, HdfResultsXsec, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, RasPrj, RasGpt, ras)\n",
    "    from ras_commander.Decorators import standardize_input, log_call\n",
    "    from ras_commander.LoggingConfig import setup_logging, get_logger\n",
    "except ImportError:\n",
    "    # If the import fails, add the parent directory to the Python path\n",
    "    print(\"Importing from local ras_commander directory\")\n",
    "    import os\n",
    "    current_file = Path(os.getcwd()).resolve()\n",
    "    parent_directory = current_file.parent\n",
    "    sys.path.append(str(parent_directory))\n",
    "    \n",
    "    # Now try to import again\n",
    "    from ras_commander import (init_ras_project, HdfBase, HdfFluvialPluvial, HdfPlot, HdfResultsPlot, HdfUtils, HdfStruc, HdfMesh, HdfXsec, HdfBndry, HdfPlan, HdfResultsPlan, HdfResultsMesh, HdfResultsXsec, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, RasPrj, RasGpt, ras)\n",
    "    from ras_commander.Decorators import standardize_input, log_call\n",
    "    from ras_commander.LoggingConfig import setup_logging, get_logger\n",
    "\n",
    "print(\"ras_commander imported successfully\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Download the BaldEagleCrkMulti2D project from HEC and run plan 06\n",
    "\n",
    "# Define the path to the BaldEagleCrkMulti2D project\n",
    "current_dir = Path.cwd()  # Adjust if your notebook is in a different directory\n",
    "bald_eagle_path = current_dir / \"example_projects\" / \"BaldEagleCrkMulti2D\"\n",
    "import logging\n",
    "\n",
    "# Check if BaldEagleCrkMulti2D.p06.hdf exists (so we don't have to re-run the simulation when re-running or debugging)\n",
    "hdf_file = bald_eagle_path / \"BaldEagleDamBrk.p06.hdf\"\n",
    "\n",
    "if not hdf_file.exists():\n",
    "    # Initialize RasExamples and extract the BaldEagleCrkMulti2D project\n",
    "    ras_examples = RasExamples()\n",
    "    ras_examples.extract_project([\"BaldEagleCrkMulti2D\"])\n",
    "\n",
    "    # Initialize custom Ras object\n",
    "    bald_eagle = RasPrj()\n",
    "\n",
    "    # Initialize the RAS project using the custom ras object\n",
    "    bald_eagle = init_ras_project(bald_eagle_path, \"6.6\", ras_instance=bald_eagle)\n",
    "    logging.info(f\"Bald Eagle project initialized with folder: {bald_eagle.project_folder}\")\n",
    "    \n",
    "    logging.info(f\"Bald Eagle object id: {id(bald_eagle)}\")\n",
    "    \n",
    "    # Define the plan number to execute\n",
    "    plan_number = \"06\"\n",
    "\n",
    "    # Update the run flags in the plan file\n",
    "    RasPlan.update_run_flags(\n",
    "        plan_number,\n",
    "        geometry_preprocessor=True,  # Run HTab\n",
    "        unsteady_flow_simulation=True,  # Run UNet\n",
    "        post_processor=True,  # Run PostProcess\n",
    "        floodplain_mapping=False,  # Run RASMapper\n",
    "        ras_object=bald_eagle\n",
    "    )\n",
    "\n",
    "    # Execute Plan 06 using RasCmdr for Bald Eagle\n",
    "    print(f\"Executing Plan {plan_number} for the Bald Eagle Creek project...\")\n",
    "    success_bald_eagle = RasCmdr.compute_plan(plan_number, ras_object=bald_eagle)\n",
    "    if success_bald_eagle:\n",
    "        print(f\"Plan {plan_number} executed successfully for Bald Eagle.\\n\")\n",
    "    else:\n",
    "        print(f\"Plan {plan_number} execution failed for Bald Eagle.\\n\")\n",
    "else:\n",
    "    print(\"BaldEagleCrkMulti2D.p06.hdf already exists. Skipping project extraction and plan execution.\")\n",
    "    # Initialize the RAS project using the custom ras object\n",
    "    bald_eagle = RasPrj()\n",
    "    bald_eagle = init_ras_project(bald_eagle_path, \"6.6\", ras_instance=bald_eagle)\n",
    "    plan_number = \"06\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load Plan and Geometry Dataframes and find Plan and Geometry HDF Paths\n",
    "\n",
    "# Display plan_df for bald_eagle project\n",
    "print(\"Plan DataFrame for bald_eagle project:\")\n",
    "display(bald_eagle.plan_df)\n",
    "\n",
    "# Display geom_df for bald_eagle project\n",
    "print(\"\\nGeometry DataFrame for bald_eagle project:\")\n",
    "display(bald_eagle.geom_df)\n",
    "\n",
    "# Get the plan HDF path\n",
    "plan_number = \"06\"  # Assuming we're using plan 01 as in the previous code\n",
    "plan_hdf_path = bald_eagle.plan_df.loc[bald_eagle.plan_df['plan_number'] == plan_number, 'HDF_Results_Path'].values[0]\n",
    "\n",
    "# Get the geometry file number from the plan DataFrame\n",
    "geom_file = bald_eagle.plan_df.loc[bald_eagle.plan_df['plan_number'] == plan_number, 'Geom File'].values[0]\n",
    "geom_number = geom_file[1:]  # Remove the 'g' prefix\n",
    "\n",
    "# Get the geometry HDF path\n",
    "geom_hdf_path = bald_eagle.geom_df.loc[bald_eagle.geom_df['geom_number'] == geom_number, 'hdf_path'].values[0]\n",
    "\n",
    "print(f\"\\nPlan HDF path for Plan {plan_number}: {plan_hdf_path}\")\n",
    "print(f\"Geometry HDF path for Plan {plan_number}: {geom_hdf_path}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Using mesh_max_ws, get the cell coordinates and plot the max water surface as a map\n",
    "import matplotlib.pyplot as plt\n",
    "from ras_commander.HdfMesh import HdfMesh\n",
    "from ras_commander.HdfResultsMesh import HdfResultsMesh\n",
    "from shapely.geometry import Point\n",
    "\n",
    "# Get mesh max water surface\n",
    "max_ws_df = HdfResultsMesh.get_mesh_max_ws(plan_hdf_path, ras_object=bald_eagle)\n",
    "\n",
    "print(\"max_ws_df\")\n",
    "print(max_ws_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Call the function to plot\n",
    "HdfResultsPlot.plot_results_max_wsel(max_ws_df)\n",
    "\n",
    "# Plot the time of maximum water surface elevation\n",
    "HdfResultsPlot.plot_results_max_wsel_time(max_ws_df)\n",
    "\n",
    "# Print the first few rows of the merged dataframe for verification\n",
    "print(\"\\nFirst few rows of the merged dataframe:\")\n",
    "display(max_ws_df.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use HdfUtils for extracting projection\n",
    "print(\"\\nExtracting Projection from HDF\")\n",
    "projection = HdfBase.get_projection(hdf_path=geom_hdf_path)\n",
    "if projection:\n",
    "    print(f\"Projection: {projection}\")\n",
    "else:\n",
    "    print(\"No projection information found.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Extract Cell Polygons\n",
    "print(\"\\nExample 6: Extracting Cell Polygons\")\n",
    "cell_polygons_gdf = HdfMesh.get_mesh_cell_polygons(geom_hdf_path, ras_object=bald_eagle)\n",
    "\n",
    "\n",
    "# Call the function to plot cell polygons\n",
    "#cell_polygons_gdf = HdfFluvialPluvial.plot_cell_polygons(cell_polygons_gdf, projection)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import geopandas as gpd\n",
    "import pandas as pd\n",
    "from shapely.geometry import LineString, Polygon, MultiLineString\n",
    "from collections import defaultdict\n",
    "from tqdm import tqdm\n",
    "from rtree import index\n",
    "\n",
    "\n",
    "# Example usage:\n",
    "boundary_gdf = HdfFluvialPluvial.calculate_fluvial_pluvial_boundary(plan_hdf_path)\n",
    "\n",
    "# Print general information about the boundary GeoDataFrame\n",
    "print(\"\\nBoundary GeoDataFrame info:\")\n",
    "print(boundary_gdf.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate statistics about the boundary line lengths\n",
    "boundary_lengths = boundary_gdf.geometry.length\n",
    "\n",
    "print(\"Boundary line length statistics:\")\n",
    "print(f\"Max length: {boundary_lengths.max():.2f}\")\n",
    "print(f\"Min length: {boundary_lengths.min():.2f}\")\n",
    "print(f\"Average length: {boundary_lengths.mean():.2f}\")\n",
    "print(f\"Median length: {boundary_lengths.median():.2f}\")\n",
    "\n",
    "# Print general information about the boundary GeoDataFrame\n",
    "print(\"\\nBoundary GeoDataFrame info:\")\n",
    "print(boundary_gdf.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Visualize the results\n",
    "fig, ax = plt.subplots(figsize=(12, 8))\n",
    "cell_polygons_gdf.plot(ax=ax, edgecolor='gray', facecolor='none', alpha=0.5)\n",
    "boundary_gdf.plot(ax=ax, color='red', linewidth=2)\n",
    "plt.title('Fluvial-Pluvial Boundary')\n",
    "plt.xlabel('X Coordinate')\n",
    "plt.ylabel('Y Coordinate')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "length_threshold = 250 #in same units as X and Y coordinates\n",
    "\n",
    "# Filter out boundary lines below the length threshold\n",
    "filtered_boundary_gdf = boundary_gdf[boundary_lengths >= length_threshold]\n",
    "highlighted_boundary_gdf = boundary_gdf[boundary_lengths < length_threshold]\n",
    "\n",
    "# Visualize the results with highlighted boundaries below the threshold\n",
    "fig, ax = plt.subplots(figsize=(12, 8))\n",
    "cell_polygons_gdf.plot(ax=ax, edgecolor='gray', facecolor='none', alpha=0.5)\n",
    "filtered_boundary_gdf.plot(ax=ax, color='red', linewidth=2, label='Valid Boundaries')\n",
    "highlighted_boundary_gdf.plot(ax=ax, color='blue', linewidth=2, linestyle='--', label='Highlighted Boundaries Below Threshold')\n",
    "plt.title('Fluvial-Pluvial Boundary with Length Threshold')\n",
    "plt.xlabel('X Coordinate')\n",
    "plt.ylabel('Y Coordinate')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create fluvial_pluvial_boundary subfolder\n",
    "output_dir = bald_eagle_path / \"fluvial_pluvial_boundary\"\n",
    "output_dir.mkdir(exist_ok=True)\n",
    "print(f\"Output directory created/verified at: {output_dir}\")\n",
    "\n",
    "# Save to GeoJSON in output directory\n",
    "boundary_gdf.to_file(output_dir / 'fluvial_pluvial_boundary.geojson', driver='GeoJSON')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "cmdrwksp311",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

==================================================

File: c:\GH\ras-commander\examples\26_exploring_terrain_hdf.ipynb
==================================================
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import required Libraries\n",
    "import subprocess\n",
    "import sys\n",
    "import os\n",
    "from pathlib import Path\n",
    "\n",
    "def install_module(module_name):\n",
    "    try:\n",
    "        __import__(module_name)\n",
    "    except ImportError:\n",
    "        print(f\"{module_name} not found. Installing...\")\n",
    "        subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", \"-U\", module_name])\n",
    "\n",
    "# List of modules to check and install if necessary\n",
    "modules = ['h5py', 'numpy', 'requests', 'geopandas', 'matplotlib', 'pandas', 'pyproj', 'shapely', 'xarray', 'rasterio', 'tqdm']\n",
    "for module in modules:\n",
    "    install_module(module)\n",
    "\n",
    "# Import the rest of the required libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import geopandas as gpd\n",
    "import matplotlib.pyplot as plt\n",
    "import pyproj\n",
    "from shapely.geometry import Point, LineString, Polygon\n",
    "import xarray as xr\n",
    "from mpl_toolkits.axes_grid1.inset_locator import inset_axes\n",
    "import matplotlib.patches as patches\n",
    "from matplotlib.patches import ConnectionPatch\n",
    "import logging\n",
    "from pathlib import Path\n",
    "import rasterio\n",
    "from rasterio.plot import show\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Flexible Import for RAS Commander\n",
    "import sys\n",
    "from pathlib import Path\n",
    "\n",
    "# Flexible imports to allow for development without installation \n",
    "#  ** Use this version with Jupyter Notebooks **\n",
    "try:\n",
    "    # Try to import from the installed package\n",
    "    from ras_commander import (init_ras_project, HdfBase, HdfUtils, HdfFluvialPluvial, HdfStruc, HdfMesh, HdfXsec, HdfBndry, HdfPlan, HdfResultsPlan, HdfResultsMesh, HdfResultsXsec, HdfPipe, HdfPump, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, RasPrj, RasGpt, ras)\n",
    "    from ras_commander.Decorators import standardize_input, log_call\n",
    "    from ras_commander.LoggingConfig import setup_logging, get_logger\n",
    "except ImportError:\n",
    "    # If the import fails, add the parent directory to the Python path\n",
    "    print(\"Using Local Dev Copy\")\n",
    "    import os\n",
    "    current_file = Path(os.getcwd()).resolve()\n",
    "    parent_directory = current_file.parent\n",
    "    sys.path.append(str(parent_directory))\n",
    "    \n",
    "    # Now try to import again\n",
    "    from ras_commander import (init_ras_project, HdfBase, HdfUtils, HdfFluvialPluvial, HdfStruc, HdfMesh, HdfXsec, HdfBndry, HdfPlan, HdfResultsPlan, HdfResultsMesh, HdfResultsXsec, HdfPipe, HdfPump, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, RasPrj, RasGpt, ras)\n",
    "    from ras_commander.Decorators import standardize_input, log_call\n",
    "    from ras_commander.LoggingConfig import setup_logging, get_logger\n",
    "\n",
    "print(\"ras_commander imported successfully\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Example of a Terrains section of a RASMapper project file\n",
    "  \n",
    "  \n",
    "  \n",
    "  <Terrains Checked=\"True\" Expanded=\"True\">\n",
    "    <Layer Name=\"Terrain50\" Type=\"TerrainLayer\" Checked=\"True\" Filename=\".\\Terrain\\Terrain50.hdf\">\n",
    "      <Symbology>\n",
    "        <SurfaceFill Colors=\"-10039894,-256,-16744448,-23296,-7667712,-5952982,-8355712,-1286\" Values=\"465.59375,795.351225457753,1044.36749240828,1242.53287192629,1435.70761903517,1620.52302566217,1835.85718004039,2542.21875\" Stretched=\"True\" AlphaTag=\"255\" UseDatasetMinMax=\"False\" RegenerateForScreen=\"False\" />\n",
    "      </Symbology>\n",
    "      <ResampleMethod>near</ResampleMethod>\n",
    "      <Surface On=\"True\" />\n",
    "    </Layer>\n",
    "  </Terrains>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "terrain_hdf_path = r\"C:\\GH\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\Terrain\\Terrain50.hdf\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "HdfBase.get_dataset_info(terrain_hdf_path, \"/\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import h5py\n",
    "import os\n",
    "from osgeo import gdal\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import rasterio\n",
    "from rasterio.plot import show\n",
    "\n",
    "# Enable GDAL exceptions to avoid FutureWarning\n",
    "gdal.UseExceptions()\n",
    "\n",
    "def get_tiff_filenames_from_hdf(hdf_file):\n",
    "    \"\"\"\n",
    "    Extracts TIFF filenames from the specified HDF5 file.\n",
    "\n",
    "    Args:\n",
    "        hdf_file (str): Path to the HDF5 file.\n",
    "\n",
    "    Returns:\n",
    "        list of str: List of extracted TIFF filenames.\n",
    "    \"\"\"\n",
    "    tiff_files = []\n",
    "    with h5py.File(hdf_file, 'r') as f:\n",
    "        terrain_group = f.get('/Terrain')\n",
    "        if terrain_group:\n",
    "            for item in terrain_group:\n",
    "                item_path = f'/Terrain/{item}'\n",
    "                group = f.get(item_path)\n",
    "                if group and 'File' in group.attrs:\n",
    "                    tiff_filename = group.attrs['File'].decode('utf-8')\n",
    "                    tiff_files.append(tiff_filename)\n",
    "    return tiff_files\n",
    "\n",
    "def get_tiff_properties(tiff_file):\n",
    "    \"\"\"\n",
    "    Retrieves properties of the specified TIFF file.\n",
    "\n",
    "    Args:\n",
    "        tiff_file (str): Path to the TIFF file.\n",
    "\n",
    "    Returns:\n",
    "        dict: Properties of the TIFF file including resolution and elevation range.\n",
    "    \"\"\"\n",
    "    ds = gdal.Open(tiff_file)\n",
    "    if ds is None:\n",
    "        print(f\"Could not open {tiff_file}\")\n",
    "        return None\n",
    "    \n",
    "    x_size, y_size = ds.RasterXSize, ds.RasterYSize\n",
    "    geotransform = ds.GetGeoTransform()\n",
    "    \n",
    "    # Calculate extents\n",
    "    x_min = geotransform[0]\n",
    "    x_max = x_min + geotransform[1] * x_size\n",
    "    y_max = geotransform[3] \n",
    "    y_min = y_max + geotransform[5] * y_size\n",
    "    \n",
    "    # Get elevation range\n",
    "    band = ds.GetRasterBand(1)\n",
    "    nodata = band.GetNoDataValue()\n",
    "    data = band.ReadAsArray()\n",
    "    data = data[data != nodata]  # Remove nodata values\n",
    "    elev_min = np.min(data) if len(data) > 0 else None\n",
    "    elev_max = np.max(data) if len(data) > 0 else None\n",
    "    elev_range = elev_max - elev_min if (elev_min is not None and elev_max is not None) else 0\n",
    "    \n",
    "    extent_width = abs(x_max - x_min)\n",
    "    extent_height = abs(y_max - y_min)\n",
    "    \n",
    "    # Calculate resolution (area per pixel)\n",
    "    pixel_width, pixel_height = abs(geotransform[1]), abs(geotransform[5])\n",
    "    resolution = pixel_width * pixel_height\n",
    "    \n",
    "    projection = ds.GetProjection()\n",
    "    ds = None\n",
    "    \n",
    "    return {\n",
    "        'filename': tiff_file,\n",
    "        'x_size': x_size,\n",
    "        'y_size': y_size,\n",
    "        'pixel_width': pixel_width,\n",
    "        'pixel_height': pixel_height,\n",
    "        'resolution': resolution,\n",
    "        'x_min': x_min,\n",
    "        'x_max': x_max,\n",
    "        'y_min': y_min,\n",
    "        'y_max': y_max,\n",
    "        'extent_width': extent_width,\n",
    "        'extent_height': extent_height,\n",
    "        'elev_min': elev_min,\n",
    "        'elev_max': elev_max,\n",
    "        'elev_range': elev_range,\n",
    "        'projection': projection\n",
    "    }\n",
    "\n",
    "def get_priority_tiff(tiff_files):\n",
    "    \"\"\"\n",
    "    Identifies the TIFF with largest resolution (lowest point density).\n",
    "\n",
    "    Args:\n",
    "        tiff_files (list of str): List of TIFF filenames.\n",
    "\n",
    "    Returns:\n",
    "        tuple: (priority TIFF properties, list of all TIFF properties)\n",
    "    \"\"\"\n",
    "    tiff_properties_list = [get_tiff_properties(tiff_file) for tiff_file in tiff_files]\n",
    "    tiff_properties_list = [props for props in tiff_properties_list if props]\n",
    "    # Sort by resolution (largest resolution first)\n",
    "    tiff_properties_list.sort(key=lambda x: x['resolution'], reverse=True)\n",
    "    return tiff_properties_list[0], tiff_properties_list\n",
    "\n",
    "def process_tiffs(priority_tiff_props, tiff_properties_list):\n",
    "    \"\"\"\n",
    "    Processes TIFF files by starting with priority TIFF and updating its values\n",
    "    where other TIFFs have lower elevations within their valid masks.\n",
    "\n",
    "    Args:\n",
    "        priority_tiff_props (dict): Properties of the priority TIFF.\n",
    "        tiff_properties_list (list of dict): Properties of all TIFFs.\n",
    "    \"\"\"\n",
    "    # Open priority TIFF and get its data\n",
    "    priority_ds = gdal.Open(priority_tiff_props['filename'])\n",
    "    priority_array = priority_ds.GetRasterBand(1).ReadAsArray().astype(np.float32)\n",
    "    priority_nodata = priority_ds.GetRasterBand(1).GetNoDataValue()\n",
    "    priority_mask = priority_array != priority_nodata\n",
    "    \n",
    "    # Get geotransform and projection from priority TIFF\n",
    "    priority_geotransform = priority_ds.GetGeoTransform()\n",
    "    priority_projection = priority_ds.GetProjection()\n",
    "    x_size, y_size = priority_ds.RasterXSize, priority_ds.RasterYSize\n",
    "    \n",
    "    # Initialize output array with priority TIFF data\n",
    "    output_array = priority_array.copy()\n",
    "    output_mask = priority_mask.copy()\n",
    "    \n",
    "    # Process each additional TIFF\n",
    "    for tiff_props in tiff_properties_list[1:]:\n",
    "        print(f\"Processing {tiff_props['filename']}\")\n",
    "        \n",
    "        # Open current TIFF\n",
    "        ds = gdal.Open(tiff_props['filename'])\n",
    "        if ds is None:\n",
    "            continue\n",
    "            \n",
    "        # Create memory dataset for resampling\n",
    "        mem_driver = gdal.GetDriverByName('MEM')\n",
    "        mem_ds = mem_driver.Create('', x_size, y_size, 1, gdal.GDT_Float32)\n",
    "        mem_ds.SetGeoTransform(priority_geotransform)\n",
    "        mem_ds.SetProjection(priority_projection)\n",
    "        \n",
    "        # Resample current TIFF to match priority TIFF\n",
    "        gdal.Warp(mem_ds, ds, format='MEM',\n",
    "                  resampleAlg='bilinear',\n",
    "                  xRes=priority_geotransform[1],\n",
    "                  yRes=-priority_geotransform[5],\n",
    "                  outputBounds=(priority_geotransform[0],\n",
    "                              priority_geotransform[3] + priority_geotransform[5] * y_size,\n",
    "                              priority_geotransform[0] + priority_geotransform[1] * x_size,\n",
    "                              priority_geotransform[3]))\n",
    "        \n",
    "        # Get resampled data and its mask\n",
    "        current_array = mem_ds.GetRasterBand(1).ReadAsArray()\n",
    "        current_nodata = mem_ds.GetRasterBand(1).GetNoDataValue()\n",
    "        current_mask = current_array != current_nodata\n",
    "        \n",
    "        # Only update where:\n",
    "        # 1. Current TIFF has valid data AND\n",
    "        # 2. Priority TIFF has no data\n",
    "        update_mask = np.logical_and(current_mask, ~priority_mask)\n",
    "        \n",
    "        # Update output array only in areas where priority TIFF has no data\n",
    "        output_array[update_mask] = current_array[update_mask]\n",
    "        output_mask[update_mask] = True\n",
    "        \n",
    "        ds = None\n",
    "        mem_ds = None\n",
    "    \n",
    "    # Apply final nodata mask\n",
    "    output_array[~output_mask] = priority_nodata\n",
    "    \n",
    "    # Save output\n",
    "    output_file = 'merged_terrain.tif'\n",
    "    driver = gdal.GetDriverByName('GTiff')\n",
    "    out_ds = driver.Create(output_file, x_size, y_size, 1, gdal.GDT_Float32)\n",
    "    out_ds.SetGeoTransform(priority_geotransform)\n",
    "    out_ds.SetProjection(priority_projection)\n",
    "    out_band = out_ds.GetRasterBand(1)\n",
    "    out_band.WriteArray(output_array)\n",
    "    out_band.SetNoDataValue(priority_nodata)\n",
    "    out_ds.FlushCache()\n",
    "    out_ds = None\n",
    "    \n",
    "    print(f\"Output saved to {output_file}\")\n",
    "    \n",
    "    # Plot the output TIFF\n",
    "    fig, ax = plt.subplots(figsize=(10, 10))\n",
    "    with rasterio.open(output_file) as src:\n",
    "        img = show(src, ax=ax, title='Merged Terrain')\n",
    "        plt.colorbar(img.get_images()[0], ax=ax, label='Elevation')\n",
    "    plt.show()\n",
    "\n",
    "def main():\n",
    "    hdf_file = 'C:\\\\GH\\\\ras-commander\\\\examples\\\\example_projects\\\\BaldEagleCrkMulti2D\\\\Terrain\\\\Terrain50.hdf'\n",
    "    tiff_files = get_tiff_filenames_from_hdf(hdf_file)\n",
    "    hdf_dir = os.path.dirname(hdf_file)\n",
    "    tiff_files = [os.path.join(hdf_dir, tiff_file) for tiff_file in tiff_files]\n",
    "    \n",
    "    priority_tiff, tiff_properties_list = get_priority_tiff(tiff_files)\n",
    "    print(f\"Priority TIFF is {priority_tiff['filename']}\")\n",
    "    print(f\"Resolution: {priority_tiff['resolution']:.2f} square units per pixel\")\n",
    "    print(f\"Pixel dimensions: {priority_tiff['pixel_width']:.2f} x {priority_tiff['pixel_height']:.2f}\")\n",
    "    \n",
    "    process_tiffs(priority_tiff, tiff_properties_list)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def visualize_tiffs(hdf_file):\n",
    "    \"\"\"\n",
    "    Creates plots of original TIFFs without the final merged TIFF.\n",
    "    \"\"\"\n",
    "    import matplotlib.pyplot as plt\n",
    "    import rasterio\n",
    "    from rasterio.plot import show\n",
    "    \n",
    "    # Get TIFF files\n",
    "    tiff_files = get_tiff_filenames_from_hdf(hdf_file)\n",
    "    hdf_dir = os.path.dirname(hdf_file)\n",
    "    tiff_files = [os.path.join(hdf_dir, tiff_file) for tiff_file in tiff_files]\n",
    "    \n",
    "    # Get properties\n",
    "    priority_tiff, tiff_properties_list = get_priority_tiff(tiff_files)\n",
    "    \n",
    "    # Calculate grid size\n",
    "    n_plots = len(tiff_files)\n",
    "    n_rows = (n_plots + 1) // 2\n",
    "    n_cols = min(2, n_plots)\n",
    "    \n",
    "    # Create figure\n",
    "    fig, axes = plt.subplots(n_rows, n_cols, figsize=(15, 7*n_rows))\n",
    "    if n_rows == 1 and n_cols == 1:\n",
    "        axes = np.array([axes])\n",
    "    axes = axes.flatten()\n",
    "    \n",
    "    # Plot original TIFFs\n",
    "    for idx, tiff_file in enumerate(tiff_files):\n",
    "        try:\n",
    "            with rasterio.open(tiff_file) as src:\n",
    "                show(src, ax=axes[idx], title=f'Original TIFF: {os.path.basename(tiff_file)}')\n",
    "                \n",
    "                props = tiff_properties_list[idx]\n",
    "                info_text = f\"Size: {props['x_size']}x{props['y_size']}\\n\"\n",
    "                info_text += f\"Resolution: {abs(props['pixel_width']):.2f}x{abs(props['pixel_height']):.2f}\"\n",
    "                \n",
    "                axes[idx].text(0.02, 0.98, info_text,\n",
    "                             transform=axes[idx].transAxes,\n",
    "                             bbox=dict(facecolor='white', alpha=0.8),\n",
    "                             verticalalignment='top')\n",
    "        except Exception as e:\n",
    "            print(f\"Error plotting {tiff_file}: {str(e)}\")\n",
    "    \n",
    "    # Remove any extra empty subplots\n",
    "    for idx in range(n_plots, len(axes)):\n",
    "        fig.delaxes(axes[idx])\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "    \n",
    "    # Print summary information\n",
    "    print(\"\\nTerrain Files Summary:\")\n",
    "    print(\"-\" * 50)\n",
    "    for idx, props in enumerate(tiff_properties_list):\n",
    "        print(f\"\\nTIFF {idx+1}:\")\n",
    "        print(f\"Filename: {os.path.basename(props['filename'])}\")\n",
    "        print(f\"Dimensions: {props['x_size']} x {props['y_size']}\")\n",
    "        print(f\"Resolution: {abs(props['pixel_width']):.2f} x {abs(props['pixel_height']):.2f}\")\n",
    "\n",
    "# Run the visualization\n",
    "hdf_file = r\"C:\\GH\\ras-commander\\examples\\example_projects\\BaldEagleCrkMulti2D\\Terrain\\Terrain50.hdf\"\n",
    "visualize_tiffs(hdf_file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# To resolve the ModuleNotFoundError for 'osgeo', we need to install the GDAL package.\n",
    "# This can be done using conda. The following command should be run in the terminal or command prompt:\n",
    "\n",
    "# Install GDAL using conda\n",
    "#!conda install -c conda-forge gdal -y\n",
    "\n",
    "# After installation, we can proceed with the import statement.\n",
    "# Make sure to restart the kernel if necessary to recognize the newly installed package.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Download the BaldEagleCrkMulti2D project from HEC and Run Plan 06\n",
    "\n",
    "# Define the path to the BaldEagleCrkMulti2D project\n",
    "current_dir = Path.cwd()  # Adjust if your notebook is in a different directory\n",
    "bald_eagle_path = current_dir / \"example_projects\" / \"BaldEagleCrkMulti2D\"\n",
    "import logging\n",
    "\n",
    "# Check if BaldEagleCrkMulti2D.p06.hdf exists (so we don't have to re-run the simulation when re-running or debugging)\n",
    "hdf_file = bald_eagle_path / \"BaldEagleDamBrk.p06.hdf\"\n",
    "\n",
    "if not hdf_file.exists():\n",
    "    # Initialize RasExamples and extract the BaldEagleCrkMulti2D project\n",
    "    ras_examples = RasExamples()\n",
    "    ras_examples.extract_project([\"BaldEagleCrkMulti2D\"])\n",
    "\n",
    "    # Initialize custom Ras object\n",
    "    bald_eagle = RasPrj()\n",
    "\n",
    "    # Initialize the RAS project using the custom ras object\n",
    "    bald_eagle = init_ras_project(bald_eagle_path, \"6.6\", ras_instance=bald_eagle)\n",
    "    logging.info(f\"Bald Eagle project initialized with folder: {bald_eagle.project_folder}\")\n",
    "    \n",
    "    logging.info(f\"Bald Eagle object id: {id(bald_eagle)}\")\n",
    "    \n",
    "    # Define the plan number to execute\n",
    "    plan_number = \"06\"\n",
    "\n",
    "    # Update run flags for the project\n",
    "    RasPlan.update_run_flags(\n",
    "        plan_number,\n",
    "        geometry_preprocessor=True,\n",
    "        unsteady_flow_simulation=True,\n",
    "        run_sediment=False,\n",
    "        post_processor=True,\n",
    "        floodplain_mapping=False,\n",
    "        ras_object=bald_eagle\n",
    "    )\n",
    "\n",
    "    # Execute Plan 06 using RasCmdr for Bald Eagle\n",
    "    print(f\"Executing Plan {plan_number} for the Bald Eagle Creek project...\")\n",
    "    success_bald_eagle = RasCmdr.compute_plan(plan_number, ras_object=bald_eagle)\n",
    "    if success_bald_eagle:\n",
    "        print(f\"Plan {plan_number} executed successfully for Bald Eagle.\\n\")\n",
    "    else:\n",
    "        print(f\"Plan {plan_number} execution failed for Bald Eagle.\\n\")\n",
    "else:\n",
    "    print(\"BaldEagleCrkMulti2D.p06.hdf already exists. Skipping project extraction and plan execution.\")\n",
    "    # Initialize the RAS project using the custom ras object\n",
    "    bald_eagle = RasPrj()\n",
    "    bald_eagle = init_ras_project(bald_eagle_path, \"6.6\", ras_instance=bald_eagle)\n",
    "    plan_number = \"06\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load Plan and Geometry Dataframes and find Plan and Geometry HDF Paths\n",
    "\n",
    "# Display plan_df for bald_eagle project\n",
    "print(\"Plan DataFrame for bald_eagle project:\")\n",
    "display(bald_eagle.plan_df)\n",
    "\n",
    "# Display geom_df for bald_eagle project\n",
    "print(\"\\nGeometry DataFrame for bald_eagle project:\")\n",
    "display(bald_eagle.geom_df)\n",
    "\n",
    "# Get the plan HDF path\n",
    "plan_number = \"06\"  # Assuming we're using plan 01 as in the previous code\n",
    "plan_hdf_path = bald_eagle.plan_df.loc[bald_eagle.plan_df['plan_number'] == plan_number, 'HDF_Results_Path'].values[0]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Get mesh maximum water surface elevation\n",
    "max_ws_df = HdfResultsMesh.get_mesh_max_ws(plan_hdf_path, ras_object=bald_eagle)\n",
    "print(\"\\nMesh Maximum Water Surface Elevation:\")\n",
    "print(max_ws_df.attrs)\n",
    "display(max_ws_df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "latest-test-311",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

==================================================

Folder: c:\GH\ras-commander\examples\img
==================================================

File: c:\GH\ras-commander\examples\xx_edge_cases.py
==================================================
#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
from pathlib import Path
import shutil

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras

example_projects_folder = Path(__file__).parent.parent / "example_projects"

# delete the folder if it exists
if example_projects_folder.exists():
    shutil.rmtree(example_projects_folder)


# Extract specific projects
ras_examples = RasExamples()
ras_examples.extract_project(["Balde Eagle Creek"])

#### --- START OF SCRIPT --- ####

def main():
    # Initialize the project
    current_dir = Path(__file__).parent
    project_path = current_dir / "example_projects" / "Balde Eagle Creek"
    init_ras_project(project_path, "6.5")

    print("Available plans:")
    print(ras.plan_df)
    print()

    # Example 1: Execute a single plan using compute_test_mode
    print("Example 1: Executing a single plan using compute_test_mode")
    single_plan = "01"
    dest_folder_suffix = "[SinglePlanTest]"
    compute_folder = project_path.parent / f"{project_path.name} {dest_folder_suffix}"
    
    # Delete the compute folder if it exists
    if compute_folder.exists():
        shutil.rmtree(compute_folder)
        print(f"Deleted existing compute folder: {compute_folder}")

    RasCmdr.compute_test_mode(
        plan_number=single_plan,
        dest_folder_suffix=dest_folder_suffix,
        clear_geompre=False,
        num_cores=2
    )
    print(f"Execution of plan {single_plan} completed using compute_test_mode")
    print()

    # Example 2: Execute a single plan using compute_parallel
    print("Example 2: Executing a single plan using compute_parallel")
    parallel_result_folder = project_path.parent / "parallel_single_plan_result"
    if parallel_result_folder.exists():
        shutil.rmtree(parallel_result_folder)
        print(f"Deleted existing result folder: {parallel_result_folder}")

    results = RasCmdr.compute_parallel(
        plan_number=single_plan,
        max_workers=1,
        num_cores=2,
        dest_folder=parallel_result_folder
    )
    print("Parallel execution of single plan results:")
    for plan_number, success in results.items():
        print(f"Plan {plan_number}: {'Successful' if success else 'Failed'}")
    print()

    # Example 3: Execute a single plan using compute_test_mode with a string input
    print("Example 3: Executing a single plan using compute_test_mode with a string input")
    dest_folder_suffix = "[SinglePlanTestString]"
    compute_folder = project_path.parent / f"{project_path.name} {dest_folder_suffix}"
    
    # Delete the compute folder if it exists
    if compute_folder.exists():
        shutil.rmtree(compute_folder)
        print(f"Deleted existing compute folder: {compute_folder}")

    RasCmdr.compute_test_mode(
        plan_number="02",
        dest_folder_suffix=dest_folder_suffix,
        clear_geompre=False,
        num_cores=2
    )
    print("Execution of plan 02 completed using compute_test_mode with string input")
    print()

    # Example 4: Execute a single plan using compute_parallel with a string input
    print("Example 4: Executing a single plan using compute_parallel with a string input")
    parallel_result_folder = project_path.parent / "parallel_single_plan_string_result"
    if parallel_result_folder.exists():
        shutil.rmtree(parallel_result_folder)
        print(f"Deleted existing result folder: {parallel_result_folder}")

    results = RasCmdr.compute_parallel(
        plan_number="01",  # Changed from "03" to "01"
        max_workers=1,
        num_cores=2,
        dest_folder=parallel_result_folder
    )
    print("Parallel execution of single plan (string input) results:")
    for plan_number, success in results.items():
        print(f"Plan {plan_number}: {'Successful' if success else 'Failed'}")
    print()

    # Example 5: Attempt to execute with an empty plan list
    print("Example 5: Attempting to execute with an empty plan list")
    dest_folder_suffix = "[EmptyPlanList]"
    compute_folder = project_path.parent / f"{project_path.name} {dest_folder_suffix}"
    
    if compute_folder.exists():
        shutil.rmtree(compute_folder)
        print(f"Deleted existing compute folder: {compute_folder}")

    try:
        RasCmdr.compute_test_mode(plan_number=[], dest_folder_suffix=dest_folder_suffix)
    except ValueError as e:
        print(f"Error caught: {e}")
    print()

    # Example 6: Attempt to execute with a non-existent plan number
    print("Example 6: Attempting to execute with a non-existent plan number")
    non_existent_plan = "99"
    dest_folder_suffix = "[NonExistentPlan]"
    compute_folder = project_path.parent / f"{project_path.name} {dest_folder_suffix}"
    
    if compute_folder.exists():
        shutil.rmtree(compute_folder)
        print(f"Deleted existing compute folder: {compute_folder}")

    try:
        RasCmdr.compute_test_mode(plan_number=non_existent_plan, dest_folder_suffix=dest_folder_suffix)
    except ValueError as e:
        print(f"Error caught: {e}")
    print()

if __name__ == "__main__":
    main()
==================================================

File: c:\GH\ras-commander\ras_commander\Decorators.py
==================================================
from functools import wraps
from pathlib import Path
from typing import Union
import logging
import h5py
import inspect


def log_call(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        logger = logging.getLogger(func.__module__)
        logger.info(f"Calling {func.__name__}")
        result = func(*args, **kwargs)
        logger.info(f"Finished {func.__name__}")
        return result
    return wrapper

def standardize_input(file_type: str = 'plan_hdf'):
    """
    Decorator to standardize input for HDF file operations.
    
    This decorator processes various input types and converts them to a Path object
    pointing to the correct HDF file. It handles the following input types:
    - h5py.File objects
    - pathlib.Path objects
    - Strings (file paths or plan/geom numbers)
    - Integers (interpreted as plan/geom numbers)
    
    The decorator also manages RAS object references and logging.
    
    Args:
        file_type (str): Specifies whether to look for 'plan_hdf' or 'geom_hdf' files.
    
    Returns:
        A decorator that wraps the function to standardize its input to a Path object.
    """
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            logger = logging.getLogger(func.__module__)
            
            # Check if the function expects an hdf_path parameter
            sig = inspect.signature(func)
            param_names = list(sig.parameters.keys())
            
            # If first parameter is 'hdf_file', skip path processing
            if param_names and param_names[0] == 'hdf_file':
                return func(*args, **kwargs)
                
            # Handle both static method calls and regular function calls
            if args and isinstance(args[0], type):
                # Static method call, remove the class argument
                args = args[1:]
            
            hdf_input = kwargs.pop('hdf_path', None) or kwargs.pop('hdf_input', None) or (args[0] if args else None)
            ras_object = kwargs.pop('ras_object', None) or (args[1] if len(args) > 1 else None)

            # If no hdf_input provided, return the function unmodified
            if hdf_input is None:
                return func(*args, **kwargs)

            # NEW: If input is already a Path and exists, use it directly regardless of file_type
            if isinstance(hdf_input, Path) and hdf_input.is_file():
                logger.info(f"Using existing HDF file: {hdf_input}")
                new_args = (hdf_input,) + args[1:]
                return func(*new_args, **kwargs)

            hdf_path = None

            # If hdf_input is already an h5py.File object, use its filename
            if isinstance(hdf_input, h5py.File):
                hdf_path = Path(hdf_input.filename)
            # Handle Path objects
            elif isinstance(hdf_input, Path):
                if hdf_input.is_file():
                    hdf_path = hdf_input
            # Handle string inputs
            elif isinstance(hdf_input, str):
                # Check if it's a file path
                if Path(hdf_input).is_file():
                    hdf_path = Path(hdf_input)
                # Check if it's a number (with or without 'p' prefix)
                elif hdf_input.isdigit() or (len(hdf_input) == 3 and hdf_input[0] == 'p' and hdf_input[1:].isdigit()):
                    if ras_object is None:
                        raise ValueError("RAS object is required when using plan or geom numbers.")
                    number = hdf_input if hdf_input.isdigit() else hdf_input[1:]
                    
                    if file_type == 'plan_hdf':
                        plan_info = ras_object.plan_df[ras_object.plan_df['plan_number'] == number]
                        if not plan_info.empty:
                            hdf_path = Path(plan_info.iloc[0]['HDF_Results_Path'])
                    elif file_type == 'geom_hdf':
                        geom_info = ras_object.geom_df[ras_object.geom_df['geom_number'] == number]
                        if not geom_info.empty:
                            hdf_path = Path(geom_info.iloc[0]['HDF_Path'])
                    else:
                        raise ValueError(f"Invalid file type: {file_type}")
            # Handle integer inputs (assuming they're plan or geom numbers)
            elif isinstance(hdf_input, int):
                if ras_object is None:
                    raise ValueError("RAS object is required when using plan or geom numbers.")
                number = f"{hdf_input:02d}"
                
                if file_type == 'plan_hdf':
                    plan_info = ras_object.plan_df[ras_object.plan_df['plan_number'] == number]
                    if not plan_info.empty:
                        hdf_path = Path(plan_info.iloc[0]['HDF_Results_Path'])
                elif file_type == 'geom_hdf':
                    geom_info = ras_object.geom_df[ras_object.geom_df['geom_number'] == number]
                    if not geom_info.empty:
                        hdf_path = Path(geom_info.iloc[0]['HDF_Path'])
                else:
                    raise ValueError(f"Invalid file type: {file_type}")

            if hdf_path is None or not hdf_path.is_file():
                error_msg = f"HDF file not found: {hdf_input}"
                logger.error(error_msg)
                raise FileNotFoundError(error_msg)

            logger.info(f"Using HDF file: {hdf_path}")
            
            # Pass all original arguments and keywords, replacing hdf_input with standardized hdf_path
            new_args = (hdf_path,) + args[1:]
            return func(*new_args, **kwargs)

        return wrapper
    return decorator
==================================================

File: c:\GH\ras-commander\ras_commander\HdfBase.py
==================================================
"""
HdfBase: Core HDF File Operations for HEC-RAS

This module provides fundamental methods for interacting with HEC-RAS HDF files.
It serves as a foundation for more specialized HDF classes.

Attribution:
    Derived from the rashdf library (https://github.com/fema-ffrd/rashdf)
    Copyright (c) 2024 fema-ffrd - MIT License

Features:
    - Time parsing and conversion utilities
    - HDF attribute and dataset access
    - Geometric data extraction
    - 2D flow area information retrieval

Classes:
    HdfBase: Base class containing static methods for HDF operations

Key Methods:
    Time Operations:
        - get_simulation_start_time(): Get simulation start datetime
        - get_unsteady_timestamps(): Get unsteady output timestamps
        - parse_ras_datetime(): Parse RAS datetime strings
    
    Data Access:
        - get_2d_flow_area_names_and_counts(): Get 2D flow area info
        - get_projection(): Get spatial projection
        - get_attrs(): Access HDF attributes
        - get_dataset_info(): Explore HDF structure
        - get_polylines_from_parts(): Extract geometric polylines

Example:
    ```python
    from ras_commander import HdfBase
    
    with h5py.File('model.hdf', 'r') as hdf:
        start_time = HdfBase.get_simulation_start_time(hdf)
        timestamps = HdfBase.get_unsteady_timestamps(hdf)
    ```
"""
import re
from datetime import datetime, timedelta
import h5py
import numpy as np
import pandas as pd
import xarray as xr
from typing import List, Tuple, Union, Optional, Dict, Any
from pathlib import Path
import logging
from shapely.geometry import LineString, MultiLineString

from .HdfUtils import HdfUtils
from .Decorators import standardize_input, log_call
from .LoggingConfig import setup_logging, get_logger

logger = get_logger(__name__)

class HdfBase:
    """
    Base class for HEC-RAS HDF file operations.

    This class provides static methods for fundamental HDF file operations,
    including time parsing, attribute access, and geometric data extraction.
    All methods are designed to work with h5py.File objects or pathlib.Path
    inputs.

    Note:
        This class is not meant to be instantiated. All methods are static
        and should be called directly from the class.
    """

    @staticmethod
    def get_simulation_start_time(hdf_file: h5py.File) -> datetime:
        """
        Extract the simulation start time from the HDF file.

        Args:
            hdf_file: Open HDF file object containing RAS simulation data.

        Returns:
            datetime: Simulation start time as a datetime object.

        Raises:
            ValueError: If Plan Information is not found or start time cannot be parsed.
        
        Note:
            Expects 'Plan Data/Plan Information' group with 'Simulation Start Time' attribute.
        """
        plan_info = hdf_file.get("Plan Data/Plan Information")
        if plan_info is None:
            raise ValueError("Plan Information not found in HDF file")
        time_str = plan_info.attrs.get('Simulation Start Time')
        return HdfUtils.parse_ras_datetime(time_str.decode('utf-8'))

    @staticmethod
    def get_unsteady_timestamps(hdf_file: h5py.File) -> List[datetime]:
        """
        Extract the list of unsteady timestamps from the HDF file.

        Args:
            hdf_file (h5py.File): Open HDF file object.

        Returns:
            List[datetime]: A list of datetime objects representing the unsteady timestamps.
        """
        group_path = "Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Time Date Stamp (ms)"
        raw_datetimes = hdf_file[group_path][:]
        return [HdfUtils.parse_ras_datetime_ms(x.decode("utf-8")) for x in raw_datetimes]

    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def get_2d_flow_area_names_and_counts(hdf_path: Path) -> List[Tuple[str, int]]:
        """
        Get the names and cell counts of 2D flow areas from the HDF file.

        Args:
            hdf_path (Path): Path to the HDF file.

        Returns:
            List[Tuple[str, int]]: A list of tuples containing the name and cell count of each 2D flow area.

        Raises:
            ValueError: If there's an error reading the HDF file or accessing the required data.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                flow_area_2d_path = "Geometry/2D Flow Areas"
                if flow_area_2d_path not in hdf_file:
                    return []
                
                attributes = hdf_file[f"{flow_area_2d_path}/Attributes"][()]
                names = [HdfUtils.convert_ras_string(name) for name in attributes["Name"]]
                
                cell_info = hdf_file[f"{flow_area_2d_path}/Cell Info"][()]
                cell_counts = [info[1] for info in cell_info]
                
                return list(zip(names, cell_counts))
        except Exception as e:
            logger.error(f"Error reading 2D flow area names and counts from {hdf_path}: {str(e)}")
            raise ValueError(f"Failed to get 2D flow area names and counts: {str(e)}")

    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def get_projection(hdf_path: Path) -> Optional[str]:
        """
        Get the projection information from the HDF file.

        Args:
            hdf_path (Path): Path to the HDF file.

        Returns:
            Optional[str]: The projection information as a string, or None if not found.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                proj_wkt = hdf_file.attrs.get("Projection")
                if proj_wkt is None:
                    return None
                if isinstance(proj_wkt, bytes) or isinstance(proj_wkt, np.bytes_):
                    proj_wkt = proj_wkt.decode("utf-8")
                return proj_wkt
        except Exception as e:
            logger.error(f"Error reading projection from {hdf_path}: {str(e)}")
            return None

    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def get_attrs(hdf_file: h5py.File, attr_path: str) -> Dict[str, Any]:
        """
        Get attributes from an HDF file at a specified path.

        Args:
            hdf_file (h5py.File): The opened HDF file.
            attr_path (str): Path to the attributes in the HDF file.

        Returns:
            Dict[str, Any]: Dictionary of attributes.
        """
        try:
            if attr_path not in hdf_file:
                logger.warning(f"Path {attr_path} not found in HDF file")
                return {}
            
            return HdfUtils.hdf5_attrs_to_dict(hdf_file[attr_path].attrs)
        except Exception as e:
            logger.error(f"Error getting attributes from {attr_path}: {str(e)}")
            return {}

    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def get_dataset_info(file_path: Path, group_path: str = '/') -> None:
        """
        Recursively explore and print the structure of an HDF5 file.

        Displays detailed information about groups, datasets, and their attributes
        in a hierarchical format.

        Args:
            file_path: Path to the HDF5 file.
            group_path: Starting group path to explore (default: root '/').

        Prints:
            - Group and dataset names with hierarchical indentation
            - Dataset shapes and data types
            - All attributes for groups and datasets
        """
        def recurse(name, obj, indent=0):
            spacer = "    " * indent
            if isinstance(obj, h5py.Group):
                print(f"{spacer}Group: {name}")
                HdfBase.print_attrs(name, obj)
                for key in obj:
                    recurse(f"{name}/{key}", obj[key], indent+1)
            elif isinstance(obj, h5py.Dataset):
                print(f"{spacer}Dataset: {name}")
                print(f"{spacer}    Shape: {obj.shape}")
                print(f"{spacer}    Dtype: {obj.dtype}")
                HdfBase.print_attrs(name, obj)
            else:
                print(f"{spacer}Unknown object: {name}")

        try:
            with h5py.File(file_path, 'r') as hdf_file:
                if group_path in hdf_file:
                    print("")
                    print(f"Exploring group: {group_path}\n")
                    group = hdf_file[group_path]
                    for key in group:
                        print("")
                        recurse(f"{group_path}/{key}", group[key], indent=1)
                else:
                    print(f"Group path '{group_path}' not found in the HDF5 file.")
        except Exception as e:
            print(f"Error exploring HDF5 file: {e}")

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_polylines_from_parts(hdf_path: Path, path: str, info_name: str = "Polyline Info", 
                              parts_name: str = "Polyline Parts", 
                              points_name: str = "Polyline Points") -> List[LineString]:
        """
        Extract polylines from HDF file parts data.

        Args:
            hdf_path: Path to the HDF file.
            path: Internal HDF path to polyline data.
            info_name: Name of polyline info dataset.
            parts_name: Name of polyline parts dataset.
            points_name: Name of polyline points dataset.

        Returns:
            List of Shapely LineString/MultiLineString geometries.

        Note:
            Expects HDF datasets containing:
            - Polyline information (start points and counts)
            - Parts information for multi-part lines
            - Point coordinates
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                polyline_info_path = f"{path}/{info_name}"
                polyline_parts_path = f"{path}/{parts_name}"
                polyline_points_path = f"{path}/{points_name}"

                polyline_info = hdf_file[polyline_info_path][()]
                polyline_parts = hdf_file[polyline_parts_path][()]
                polyline_points = hdf_file[polyline_points_path][()]

                geoms = []
                for pnt_start, pnt_cnt, part_start, part_cnt in polyline_info:
                    points = polyline_points[pnt_start : pnt_start + pnt_cnt]
                    if part_cnt == 1:
                        geoms.append(LineString(points))
                    else:
                        parts = polyline_parts[part_start : part_start + part_cnt]
                        geoms.append(
                            MultiLineString(
                                list(
                                    points[part_pnt_start : part_pnt_start + part_pnt_cnt]
                                    for part_pnt_start, part_pnt_cnt in parts
                                )
                            )
                        )
                return geoms
        except Exception as e:
            logger.error(f"Error getting polylines: {str(e)}")
            return []

    @staticmethod
    def print_attrs(name: str, obj: Union[h5py.Dataset, h5py.Group]) -> None:
        """
        Print the attributes of an HDF5 object (Dataset or Group).

        Args:
            name (str): Name of the object
            obj (Union[h5py.Dataset, h5py.Group]): HDF5 object whose attributes are to be printed
        """
        if len(obj.attrs) > 0:
            print(f"    Attributes for {name}:")
            for key, value in obj.attrs.items():
                print(f"        {key}: {value}")




==================================================

File: c:\GH\ras-commander\ras_commander\HdfBndry.py
==================================================
"""
Class: HdfBndry

A utility class for extracting and processing boundary-related features from HEC-RAS HDF files,
including boundary conditions, breaklines, refinement regions, and reference features.

Attribution: A substantial amount of code in this file is sourced or derived 
from the https://github.com/fema-ffrd/rashdf library, 
released under MIT license and Copyright (c) 2024 fema-ffrd

The file has been forked and modified for use in RAS Commander.

-----

All of the methods in this class are static and are designed to be used without instantiation.

List of Functions in HdfBndry:
- get_bc_lines()           # Returns boundary condition lines as a GeoDataFrame.
- get_breaklines()         # Returns 2D mesh area breaklines as a GeoDataFrame.
- get_refinement_regions() # Returns refinement regions as a GeoDataFrame.
- get_reference_lines()    # Returns reference lines as a GeoDataFrame.
- get_reference_points()   # Returns reference points as a GeoDataFrame.



"""
from pathlib import Path
from typing import Dict, List, Optional, Union, Any
import h5py
import numpy as np
import pandas as pd
import geopandas as gpd
from shapely.geometry import LineString, MultiLineString, Polygon, MultiPolygon, Point
from .HdfBase import HdfBase
from .HdfUtils import HdfUtils
from .HdfMesh import HdfMesh
from .Decorators import standardize_input, log_call
from .LoggingConfig import setup_logging, get_logger

logger = get_logger(__name__)


class HdfBndry:
    """
    A class for handling boundary-related data from HEC-RAS HDF files.

    This class provides methods to extract and process various boundary elements
    such as boundary condition lines, breaklines, refinement regions, and reference
    lines/points from HEC-RAS geometry HDF files.

    Methods in this class return data primarily as GeoDataFrames, making it easy
    to work with spatial data in a geospatial context.

    Note:
        This class relies on the HdfBase and HdfUtils classes for some of its
        functionality. Ensure these classes are available in the same package.
    """
    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def get_bc_lines(hdf_path: Path) -> gpd.GeoDataFrame:
        """
        Return 2D mesh area boundary condition lines.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.

        Returns
        -------
        gpd.GeoDataFrame
            A GeoDataFrame containing the boundary condition lines and their attributes.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                bc_lines_path = "Geometry/Boundary Condition Lines"
                if bc_lines_path not in hdf_file:
                    return gpd.GeoDataFrame()
                
                # Get geometries
                bc_line_data = hdf_file[bc_lines_path]
                geoms = HdfUtils.get_polylines_from_parts(hdf_path, bc_lines_path)
                
                # Get attributes
                attributes = pd.DataFrame(bc_line_data["Attributes"][()])
                
                # Convert string columns
                str_columns = ['Name', 'SA-2D', 'Type']
                for col in str_columns:
                    if col in attributes.columns:
                        attributes[col] = attributes[col].apply(HdfUtils.convert_ras_string)
                
                # Create GeoDataFrame with all attributes
                gdf = gpd.GeoDataFrame(
                    attributes,
                    geometry=geoms,
                    crs=HdfUtils.get_projection(hdf_file)
                )
                
                # Add ID column if not present
                if 'bc_line_id' not in gdf.columns:
                    gdf['bc_line_id'] = range(len(gdf))
                    
                return gdf

        except Exception as e:
            logger.error(f"Error reading boundary condition lines: {str(e)}")
            return gpd.GeoDataFrame()

    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def get_breaklines(hdf_path: Path) -> gpd.GeoDataFrame:
        """
        Return 2D mesh area breaklines.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.

        Returns
        -------
        gpd.GeoDataFrame
            A GeoDataFrame containing the breaklines.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                breaklines_path = "Geometry/2D Flow Area Break Lines"
                if breaklines_path not in hdf_file:
                    logger.warning(f"Breaklines path '{breaklines_path}' not found in HDF file.")
                    return gpd.GeoDataFrame()
                bl_line_data = hdf_file[breaklines_path]
                bl_line_ids = range(bl_line_data["Attributes"][()].shape[0])
                names = np.vectorize(HdfUtils.convert_ras_string)(
                    bl_line_data["Attributes"][()]["Name"]
                )
                geoms = HdfUtils.get_polylines_from_parts(hdf_path, breaklines_path)
                return gpd.GeoDataFrame(
                    {"bl_id": bl_line_ids, "Name": names, "geometry": geoms},
                    geometry="geometry",
                    crs=HdfUtils.get_projection(hdf_file),
                )
        except Exception as e:
            logger.error(f"Error reading breaklines: {str(e)}")
            return gpd.GeoDataFrame()

    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def get_refinement_regions(hdf_path: Path) -> gpd.GeoDataFrame:
        """
        Return 2D mesh area refinement regions.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.

        Returns
        -------
        gpd.GeoDataFrame
            A GeoDataFrame containing the refinement regions.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                refinement_regions_path = "/Geometry/2D Flow Area Refinement Regions"
                if refinement_regions_path not in hdf_file:
                    return gpd.GeoDataFrame()
                rr_data = hdf_file[refinement_regions_path]
                rr_ids = range(rr_data["Attributes"][()].shape[0])
                names = np.vectorize(HdfUtils.convert_ras_string)(rr_data["Attributes"][()]["Name"])
                geoms = list()
                for pnt_start, pnt_cnt, part_start, part_cnt in rr_data["Polygon Info"][()]:
                    points = rr_data["Polygon Points"][()][pnt_start : pnt_start + pnt_cnt]
                    if part_cnt == 1:
                        geoms.append(Polygon(points))
                    else:
                        parts = rr_data["Polygon Parts"][()][part_start : part_start + part_cnt]
                        geoms.append(
                            MultiPolygon(
                                list(
                                    points[part_pnt_start : part_pnt_start + part_pnt_cnt]
                                    for part_pnt_start, part_pnt_cnt in parts
                                )
                            )
                        )
                return gpd.GeoDataFrame(
                    {"rr_id": rr_ids, "Name": names, "geometry": geoms},
                    geometry="geometry",
                    crs=HdfUtils.get_projection(hdf_file),
                )
        except Exception as e:
            logger.error(f"Error reading refinement regions: {str(e)}")
            return gpd.GeoDataFrame()

    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def get_reference_lines(hdf_path: Path, mesh_name: Optional[str] = None) -> gpd.GeoDataFrame:
        """
        Return the reference lines geometry and attributes.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.
        mesh_name : Optional[str], optional
            Name of the mesh to filter by. Default is None.

        Returns
        -------
        gpd.GeoDataFrame
            A GeoDataFrame containing the reference lines. If mesh_name is provided,
            returns only lines for that mesh.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                reference_lines_path = "Geometry/Reference Lines"
                attributes_path = f"{reference_lines_path}/Attributes"
                if attributes_path not in hdf_file:
                    return gpd.GeoDataFrame()
                
                attributes = hdf_file[attributes_path][()]
                refline_ids = range(attributes.shape[0])
                v_conv_str = np.vectorize(HdfUtils.convert_ras_string)
                names = v_conv_str(attributes["Name"])
                mesh_names = v_conv_str(attributes["SA-2D"])
                
                try:
                    types = v_conv_str(attributes["Type"])
                except ValueError:
                    types = np.array([""] * attributes.shape[0])
                
                geoms = HdfUtils.get_polylines_from_parts(hdf_path, reference_lines_path)
                
                gdf = gpd.GeoDataFrame(
                    {
                        "refln_id": refline_ids,
                        "Name": names,
                        "mesh_name": mesh_names,
                        "Type": types,
                        "geometry": geoms,
                    },
                    geometry="geometry",
                    crs=HdfUtils.get_projection(hdf_file),
                )
                
                # Filter by mesh_name if provided
                if mesh_name is not None:
                    gdf = gdf[gdf['mesh_name'] == mesh_name]
                
                return gdf
                
        except Exception as e:
            logger.error(f"Error reading reference lines: {str(e)}")
            return gpd.GeoDataFrame()

    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def get_reference_points(hdf_path: Path, mesh_name: Optional[str] = None) -> gpd.GeoDataFrame:
        """
        Return the reference points geometry and attributes.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.
        mesh_name : Optional[str], optional
            Name of the mesh to filter by. Default is None.

        Returns
        -------
        gpd.GeoDataFrame
            A GeoDataFrame containing the reference points. If mesh_name is provided,
            returns only points for that mesh.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                reference_points_path = "Geometry/Reference Points"
                attributes_path = f"{reference_points_path}/Attributes"
                if attributes_path not in hdf_file:
                    return gpd.GeoDataFrame()
                
                ref_points_group = hdf_file[reference_points_path]
                attributes = ref_points_group["Attributes"][:]
                v_conv_str = np.vectorize(HdfUtils.convert_ras_string)
                names = v_conv_str(attributes["Name"])
                mesh_names = v_conv_str(attributes["SA/2D"])
                cell_id = attributes["Cell Index"]
                points = ref_points_group["Points"][()]
                
                gdf = gpd.GeoDataFrame(
                    {
                        "refpt_id": range(attributes.shape[0]),
                        "Name": names,
                        "mesh_name": mesh_names,
                        "Cell Index": cell_id,
                        "geometry": list(map(Point, points)),
                    },
                    geometry="geometry",
                    crs=HdfUtils.get_projection(hdf_file),
                )
                
                # Filter by mesh_name if provided
                if mesh_name is not None:
                    gdf = gdf[gdf['mesh_name'] == mesh_name]
                
                return gdf
                
        except Exception as e:
            logger.error(f"Error reading reference points: {str(e)}")
            return gpd.GeoDataFrame()

    

==================================================

File: c:\GH\ras-commander\ras_commander\HdfFluvialPluvial.py
==================================================
"""
Class: HdfFluvialPluvial

All of the methods in this class are static and are designed to be used without instantiation.

List of Functions in HdfFluvialPluvial:
- calculate_fluvial_pluvial_boundary()
- _process_cell_adjacencies()
- _identify_boundary_edges()

"""

from typing import Dict, List, Tuple
import pandas as pd
import geopandas as gpd
from collections import defaultdict
from shapely.geometry import LineString, MultiLineString  # Added MultiLineString import
from tqdm import tqdm
from .HdfMesh import HdfMesh
from .HdfUtils import HdfUtils
from .Decorators import standardize_input
from .HdfResultsMesh import HdfResultsMesh
from .LoggingConfig import get_logger
from pathlib import Path

logger = get_logger(__name__)

class HdfFluvialPluvial:
    """
    A class for analyzing and visualizing fluvial-pluvial boundaries in HEC-RAS 2D model results.

    This class provides methods to process and visualize HEC-RAS 2D model outputs,
    specifically focusing on the delineation of fluvial and pluvial flood areas.
    It includes functionality for calculating fluvial-pluvial boundaries based on
    the timing of maximum water surface elevations.

    Key Concepts:
    - Fluvial flooding: Flooding from rivers/streams
    - Pluvial flooding: Flooding from rainfall/surface water
    - Delta_t: Time threshold (in hours) used to distinguish between fluvial and pluvial cells.
               Cells with max WSE time differences greater than delta_t are considered boundaries.

    Data Requirements:
    - HEC-RAS plan HDF file containing:
        - 2D mesh cell geometry (accessed via HdfMesh)
        - Maximum water surface elevation times (accessed via HdfResultsMesh)

    Usage Example:
        >>> ras = init_ras_project(project_path, ras_version)
        >>> hdf_path = Path("path/to/plan.hdf")
        >>> boundary_gdf = HdfFluvialPluvial.calculate_fluvial_pluvial_boundary(
        ...     hdf_path, 
        ...     delta_t=12
        ... )
    """
    def __init__(self):
        self.logger = get_logger(__name__)  # Initialize logger with module name
    
    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def calculate_fluvial_pluvial_boundary(hdf_path: Path, delta_t: float = 12) -> gpd.GeoDataFrame:
        """
        Calculate the fluvial-pluvial boundary based on cell polygons and maximum water surface elevation times.

        Args:
            hdf_path (Path): Path to the HEC-RAS plan HDF file
            delta_t (float): Threshold time difference in hours. Cells with time differences
                        greater than this value are considered boundaries. Default is 12 hours.

        Returns:
            gpd.GeoDataFrame: GeoDataFrame containing the fluvial-pluvial boundaries with:
                - geometry: LineString features representing boundaries
                - CRS: Coordinate reference system matching the input HDF file

        Raises:
            ValueError: If no cell polygons or maximum water surface data found in HDF file
            Exception: If there are errors during boundary calculation

        Note:
            The returned boundaries represent locations where the timing of maximum water surface
            elevation changes significantly (> delta_t), indicating potential transitions between
            fluvial and pluvial flooding mechanisms.
        """
        try:
            # Get cell polygons from HdfMesh
            logger.info("Getting cell polygons from HDF file...")
            cell_polygons_gdf = HdfMesh.get_mesh_cell_polygons(hdf_path)
            if cell_polygons_gdf.empty:
                raise ValueError("No cell polygons found in HDF file")

            # Get max water surface data from HdfResultsMesh
            logger.info("Getting maximum water surface data from HDF file...")
            max_ws_df = HdfResultsMesh.get_mesh_max_ws(hdf_path)
            if max_ws_df.empty:
                raise ValueError("No maximum water surface data found in HDF file")

            # Convert timestamps using the renamed utility function
            logger.info("Converting maximum water surface timestamps...")
            if 'maximum_water_surface_time' in max_ws_df.columns:
                max_ws_df['maximum_water_surface_time'] = max_ws_df['maximum_water_surface_time'].apply(
                    lambda x: HdfUtils.parse_ras_datetime(x) if isinstance(x, str) else x
                )

            # Process cell adjacencies
            logger.info("Processing cell adjacencies...")
            cell_adjacency, common_edges = HdfFluvialPluvial._process_cell_adjacencies(cell_polygons_gdf)
            
            # Get cell times from max_ws_df
            logger.info("Extracting cell times from maximum water surface data...")
            cell_times = max_ws_df.set_index('cell_id')['maximum_water_surface_time'].to_dict()
            
            # Identify boundary edges
            logger.info("Identifying boundary edges...")
            boundary_edges = HdfFluvialPluvial._identify_boundary_edges(
                cell_adjacency, common_edges, cell_times, delta_t
            )

            # Join adjacent LineStrings into simple LineStrings
            logger.info("Joining adjacent LineStrings into simple LineStrings...")
            joined_lines = []
            
            def get_coords(geom):
                """Helper function to get coordinates from either LineString or MultiLineString"""
                if isinstance(geom, LineString):
                    return list(geom.coords)
                elif isinstance(geom, MultiLineString):
                    return list(geom.geoms[0].coords)
                return None

            # Create a dictionary to store start and end points for each line
            line_endpoints = {}
            for i, edge in enumerate(boundary_edges):
                coords = get_coords(edge)
                if coords:
                    line_endpoints[i] = (coords[0], coords[-1])

            # Process lines in order
            used_indices = set()
            while len(used_indices) < len(boundary_edges):
                current_line = []
                current_points = []
                
                # Find a new starting line if needed
                for i in range(len(boundary_edges)):
                    if i not in used_indices:
                        current_line.append(boundary_edges[i])
                        coords = get_coords(boundary_edges[i])
                        if coords:
                            current_points.extend(coords)
                        used_indices.add(i)
                        break
                
                # Continue adding connected lines
                while True:
                    found_next = False
                    current_end = current_points[-1] if current_points else None
                    
                    # Look for the next connected line
                    for i, (start, end) in line_endpoints.items():
                        if i not in used_indices and current_end:
                            if start == current_end:
                                # Add line in forward direction
                                coords = get_coords(boundary_edges[i])
                                if coords:
                                    current_points.extend(coords[1:])  # Skip first point to avoid duplication
                                current_line.append(boundary_edges[i])
                                used_indices.add(i)
                                found_next = True
                                break
                            elif end == current_end:
                                # Add line in reverse direction
                                coords = get_coords(boundary_edges[i])
                                if coords:
                                    current_points.extend(reversed(coords[:-1]))  # Skip last point to avoid duplication
                                current_line.append(boundary_edges[i])
                                used_indices.add(i)
                                found_next = True
                                break
                    
                    if not found_next:
                        break
                
                # Create a single LineString from the collected points
                if current_points:
                    joined_lines.append(LineString(current_points))

            # Create final GeoDataFrame with CRS from cell_polygons_gdf
            logger.info("Creating final GeoDataFrame for boundaries...")
            boundary_gdf = gpd.GeoDataFrame(
                geometry=joined_lines, 
                crs=cell_polygons_gdf.crs
            )

            # Clean up intermediate dataframes
            logger.info("Cleaning up intermediate dataframes...")
            del cell_polygons_gdf
            del max_ws_df

            logger.info("Fluvial-pluvial boundary calculation completed successfully.")
            return boundary_gdf

        except Exception as e:
            self.logger.error(f"Error calculating fluvial-pluvial boundary: {str(e)}")
            return None
        
        
    @staticmethod
    def _process_cell_adjacencies(cell_polygons_gdf: gpd.GeoDataFrame) -> Tuple[Dict[int, List[int]], Dict[int, Dict[int, LineString]]]:
        """
        Optimized method to process cell adjacencies by extracting shared edges directly.
        
        Args:
            cell_polygons_gdf (gpd.GeoDataFrame): GeoDataFrame containing 2D mesh cell polygons
                                                   with 'cell_id' and 'geometry' columns.

        Returns:
            Tuple containing:
                - Dict[int, List[int]]: Dictionary mapping cell IDs to lists of adjacent cell IDs.
                - Dict[int, Dict[int, LineString]]: Nested dictionary storing common edges between cells,
                                                    where common_edges[cell1][cell2] gives the shared boundary.
        """
        cell_adjacency = defaultdict(list)
        common_edges = defaultdict(dict)

        # Build an edge to cells mapping
        edge_to_cells = defaultdict(set)

        # Function to generate edge keys
        def edge_key(coords1, coords2, precision=8):
            # Round coordinates
            coords1 = tuple(round(coord, precision) for coord in coords1)
            coords2 = tuple(round(coord, precision) for coord in coords2)
            # Create sorted key to handle edge direction
            return tuple(sorted([coords1, coords2]))

        # For each polygon, extract edges
        for idx, row in cell_polygons_gdf.iterrows():
            cell_id = row['cell_id']
            geom = row['geometry']
            if geom.is_empty or not geom.is_valid:
                continue
            # Get exterior coordinates
            coords = list(geom.exterior.coords)
            num_coords = len(coords)
            for i in range(num_coords - 1):
                coord1 = coords[i]
                coord2 = coords[i + 1]
                key = edge_key(coord1, coord2)
                edge_to_cells[key].add(cell_id)

        # Now, process edge_to_cells to build adjacency
        for edge, cells in edge_to_cells.items():
            cells = list(cells)
            if len(cells) >= 2:
                # For all pairs of cells sharing this edge
                for i in range(len(cells)):
                    for j in range(i + 1, len(cells)):
                        cell1 = cells[i]
                        cell2 = cells[j]
                        # Update adjacency
                        if cell2 not in cell_adjacency[cell1]:
                            cell_adjacency[cell1].append(cell2)
                        if cell1 not in cell_adjacency[cell2]:
                            cell_adjacency[cell2].append(cell1)
                        # Store common edge
                        common_edge = LineString([edge[0], edge[1]])
                        common_edges[cell1][cell2] = common_edge
                        common_edges[cell2][cell1] = common_edge

        logger.info("Cell adjacencies processed successfully.")
        return cell_adjacency, common_edges

    @staticmethod
    def _identify_boundary_edges(cell_adjacency: Dict[int, List[int]], 
                               common_edges: Dict[int, Dict[int, LineString]], 
                               cell_times: Dict[int, pd.Timestamp], 
                               delta_t: float) -> List[LineString]:
        """
        Identify boundary edges between cells with significant time differences.

        Args:
            cell_adjacency (Dict[int, List[int]]): Dictionary of cell adjacencies
            common_edges (Dict[int, Dict[int, LineString]]): Dictionary of shared edges between cells
            cell_times (Dict[int, pd.Timestamp]): Dictionary mapping cell IDs to their max WSE times
            delta_t (float): Time threshold in hours

        Returns:
            List[LineString]: List of LineString geometries representing boundaries where
                             adjacent cells have time differences greater than delta_t

        Note:
            Boundaries are identified where the absolute time difference between adjacent
            cells exceeds the specified delta_t threshold.
        """
        boundary_edges = []
        with tqdm(total=len(cell_adjacency), desc="Processing cell adjacencies") as pbar:
            for cell_id, neighbors in cell_adjacency.items():
                cell_time = cell_times[cell_id]

                for neighbor_id in neighbors:
                    neighbor_time = cell_times[neighbor_id]
                    time_diff = abs((cell_time - neighbor_time).total_seconds() / 3600)

                    if time_diff >= delta_t:
                        boundary_edges.append(common_edges[cell_id][neighbor_id])

                pbar.update(1)

        return boundary_edges

==================================================

File: c:\GH\ras-commander\ras_commander\HdfInfiltration.py
==================================================
"""
Class: HdfInfiltration

Attribution: A substantial amount of code in this file is sourced or derived 
from the https://github.com/fema-ffrd/rashdf library, 
released under MIT license and Copyright (c) 2024 fema-ffrd

The file has been forked and modified for use in RAS Commander.

-----

All of the methods in this class are static and are designed to be used without instantiation.

List of Functions in HdfInfiltration:
- scale_infiltration_data(): Updates infiltration parameters in HDF file with scaling factors
- get_infiltration_data(): Retrieves current infiltration parameters from HDF file
- get_infiltration_map(): Reads the infiltration raster map from HDF file
- calculate_soil_statistics(): Calculates soil statistics from zonal statistics
- get_significant_mukeys(): Gets mukeys with percentage greater than threshold
- calculate_total_significant_percentage(): Calculates total percentage covered by significant mukeys
- save_statistics(): Saves soil statistics to CSV
- get_infiltration_parameters(): Gets infiltration parameters for a specific mukey
- calculate_weighted_parameters(): Calculates weighted infiltration parameters based on soil statistics

Each function is decorated with @standardize_input to ensure consistent handling of HDF file paths
and @log_call for logging function calls and errors. Functions return various data types including
DataFrames, dictionaries, and floating-point values depending on their purpose.

The class provides comprehensive functionality for analyzing and modifying infiltration-related
data in HEC-RAS HDF files, including parameter scaling, soil statistics calculation, and
weighted parameter computation.
"""
from pathlib import Path
import h5py
import numpy as np
import pandas as pd
from typing import Optional, Dict, Any
import logging
from .HdfBase import HdfBase
from .HdfUtils import HdfUtils
from .Decorators import standardize_input, log_call
from .LoggingConfig import setup_logging, get_logger

logger = get_logger(__name__)
        
from pathlib import Path
import pandas as pd
import geopandas as gpd
import h5py
from rasterstats import zonal_stats
from .Decorators import log_call, standardize_input

class HdfInfiltration:
        
    """
    A class for handling infiltration-related operations on HEC-RAS HDF files.

    This class provides methods to extract and modify infiltration data from HEC-RAS HDF files,
    including base overrides and infiltration parameters.
    """

    # Constants for unit conversion
    SQM_TO_ACRE = 0.000247105
    SQM_TO_SQMILE = 3.861e-7
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)

    @staticmethod
    @standardize_input(file_type='geom_hdf')
    @log_call
    def scale_infiltration_data(
        hdf_path: Path,
        infiltration_df: pd.DataFrame,
        scale_md: float = 1.0,
        scale_id: float = 1.0,
        scale_pr: float = 1.0
    ) -> Optional[pd.DataFrame]:
        """
        Update infiltration parameters in the HDF file with optional scaling factors.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file
        infiltration_df : pd.DataFrame
            DataFrame containing infiltration parameters with columns:
            ['Name', 'Maximum Deficit', 'Initial Deficit', 'Potential Percolation Rate']
        scale_md : float, optional
            Scaling factor for Maximum Deficit, by default 1.0
        scale_id : float, optional
            Scaling factor for Initial Deficit, by default 1.0
        scale_pr : float, optional
            Scaling factor for Potential Percolation Rate, by default 1.0

        Returns
        -------
        Optional[pd.DataFrame]
            The updated infiltration DataFrame if successful, None if operation fails
        """
        try:
            hdf_path_to_overwrite = '/Geometry/Infiltration/Base Overrides'
            
            # Apply scaling factors
            infiltration_df = infiltration_df.copy()
            infiltration_df['Maximum Deficit'] *= scale_md
            infiltration_df['Initial Deficit'] *= scale_id
            infiltration_df['Potential Percolation Rate'] *= scale_pr

            with h5py.File(hdf_path, 'a') as hdf_file:
                # Delete existing dataset if it exists
                if hdf_path_to_overwrite in hdf_file:
                    del hdf_file[hdf_path_to_overwrite]

                # Define dtype for structured array
                dt = np.dtype([
                    ('Land Cover Name', 'S7'),
                    ('Maximum Deficit', 'f4'),
                    ('Initial Deficit', 'f4'),
                    ('Potential Percolation Rate', 'f4')
                ])

                # Create structured array
                structured_array = np.zeros(infiltration_df.shape[0], dtype=dt)
                structured_array['Land Cover Name'] = np.array(infiltration_df['Name'].astype(str).values.astype('|S7'))
                structured_array['Maximum Deficit'] = infiltration_df['Maximum Deficit'].values.astype(np.float32)
                structured_array['Initial Deficit'] = infiltration_df['Initial Deficit'].values.astype(np.float32)
                structured_array['Potential Percolation Rate'] = infiltration_df['Potential Percolation Rate'].values.astype(np.float32)

                # Create new dataset
                hdf_file.create_dataset(
                    hdf_path_to_overwrite,
                    data=structured_array,  
                    dtype=dt,
                    compression='gzip',
                    compression_opts=1,
                    chunks=(100,),
                    maxshape=(None,)
                )

            return infiltration_df

        except Exception as e:
            logger.error(f"Error updating infiltration data in {hdf_path}: {str(e)}")
            return None

    @staticmethod
    @standardize_input(file_type='geom_hdf')
    @log_call
    def get_infiltration_data(hdf_path: Path) -> Optional[pd.DataFrame]:
        """
        Retrieve current infiltration parameters from the HDF file.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file

        Returns
        -------
        Optional[pd.DataFrame]
            DataFrame containing infiltration parameters if successful, None if operation fails
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                if '/Geometry/Infiltration/Base Overrides' not in hdf_file:
                    logger.warning(f"No infiltration data found in {hdf_path}")
                    return None

                data = hdf_file['/Geometry/Infiltration/Base Overrides'][()]
                
                # Convert structured array to DataFrame
                df = pd.DataFrame({
                    'Name': [name.decode('utf-8').strip() for name in data['Land Cover Name']],
                    'Maximum Deficit': data['Maximum Deficit'],
                    'Initial Deficit': data['Initial Deficit'],
                    'Potential Percolation Rate': data['Potential Percolation Rate']
                })
                
                return df

        except Exception as e:
            logger.error(f"Error reading infiltration data from {hdf_path}: {str(e)}")
            return None
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        


    @staticmethod
    @log_call
    @standardize_input
    def get_infiltration_map(hdf_path: Path) -> dict:
        """Read the infiltration raster map from HDF file
        
        Args:
            hdf_path: Path to the HDF file
            
        Returns:
            Dictionary mapping raster values to mukeys
        """
        with h5py.File(hdf_path, 'r') as hdf:
            raster_map_data = hdf['Raster Map'][:]
            return {int(item[0]): item[1].decode('utf-8') for item in raster_map_data}

    @staticmethod
    @log_call
    def calculate_soil_statistics(zonal_stats: list, raster_map: dict) -> pd.DataFrame:
        """Calculate soil statistics from zonal statistics
        
        Args:
            zonal_stats: List of zonal statistics
            raster_map: Dictionary mapping raster values to mukeys
            
        Returns:
            DataFrame with soil statistics including percentages and areas
        """
        # Initialize areas dictionary
        mukey_areas = {mukey: 0 for mukey in raster_map.values()}
        
        # Calculate total area and mukey areas
        total_area_sqm = 0
        for stat in zonal_stats:
            for raster_val, area in stat.items():
                mukey = raster_map.get(raster_val)
                if mukey:
                    mukey_areas[mukey] += area
                total_area_sqm += area

        # Create DataFrame rows
        rows = []
        for mukey, area_sqm in mukey_areas.items():
            if area_sqm > 0:
                rows.append({
                    'mukey': mukey,
                    'Percentage': (area_sqm / total_area_sqm) * 100,
                    'Area in Acres': area_sqm * HdfInfiltration.SQM_TO_ACRE,
                    'Area in Square Miles': area_sqm * HdfInfiltration.SQM_TO_SQMILE
                })
        
        return pd.DataFrame(rows)

    @staticmethod
    @log_call
    def get_significant_mukeys(soil_stats: pd.DataFrame, 
                             threshold: float = 1.0) -> pd.DataFrame:
        """Get mukeys with percentage greater than threshold
        
        Args:
            soil_stats: DataFrame with soil statistics
            threshold: Minimum percentage threshold (default 1.0)
            
        Returns:
            DataFrame with significant mukeys and their statistics
        """
        significant = soil_stats[soil_stats['Percentage'] > threshold].copy()
        significant.sort_values('Percentage', ascending=False, inplace=True)
        return significant

    @staticmethod
    @log_call
    def calculate_total_significant_percentage(significant_mukeys: pd.DataFrame) -> float:
        """Calculate total percentage covered by significant mukeys
        
        Args:
            significant_mukeys: DataFrame of significant mukeys
            
        Returns:
            Total percentage covered by significant mukeys
        """
        return significant_mukeys['Percentage'].sum()

    @staticmethod
    @log_call
    def save_statistics(soil_stats: pd.DataFrame, output_path: Path, 
                       include_timestamp: bool = True):
        """Save soil statistics to CSV
        
        Args:
            soil_stats: DataFrame with soil statistics
            output_path: Path to save CSV file
            include_timestamp: Whether to include timestamp in filename
        """
        if include_timestamp:
            timestamp = pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')
            output_path = output_path.with_name(
                f"{output_path.stem}_{timestamp}{output_path.suffix}")
        
        soil_stats.to_csv(output_path, index=False)

    @staticmethod
    @log_call
    @standardize_input
    def get_infiltration_parameters(hdf_path: Path, mukey: str) -> dict:
        """Get infiltration parameters for a specific mukey from HDF file
        
        Args:
            hdf_path: Path to the HDF file
            mukey: Mukey identifier
            
        Returns:
            Dictionary of infiltration parameters
        """
        with h5py.File(hdf_path, 'r') as hdf:
            if 'Infiltration Parameters' not in hdf:
                raise KeyError("No infiltration parameters found in HDF file")
                
            params = hdf['Infiltration Parameters'][:]
            for row in params:
                if row[0].decode('utf-8') == mukey:
                    return {
                        'Initial Loss (in)': float(row[1]),
                        'Constant Loss Rate (in/hr)': float(row[2]),
                        'Impervious Area (%)': float(row[3])
                    }
        return None

    @staticmethod
    @log_call
    def calculate_weighted_parameters(soil_stats: pd.DataFrame, 
                                   infiltration_params: dict) -> dict:
        """Calculate weighted infiltration parameters based on soil statistics
        
        Args:
            soil_stats: DataFrame with soil statistics
            infiltration_params: Dictionary of infiltration parameters by mukey
            
        Returns:
            Dictionary of weighted average infiltration parameters
        """
        total_weight = soil_stats['Percentage'].sum()
        
        weighted_params = {
            'Initial Loss (in)': 0.0,
            'Constant Loss Rate (in/hr)': 0.0,
            'Impervious Area (%)': 0.0
        }
        
        for _, row in soil_stats.iterrows():
            mukey = row['mukey']
            weight = row['Percentage'] / total_weight
            
            if mukey in infiltration_params:
                for param in weighted_params:
                    weighted_params[param] += (
                        infiltration_params[mukey][param] * weight
                    )
        
        return weighted_params

# Example usage:
"""
from pathlib import Path

# Initialize paths
raster_path = Path('input_files/gSSURGO_InfiltrationDC.tif')
boundary_path = Path('input_files/WF_Boundary_Simple.shp')
hdf_path = raster_path.with_suffix('.hdf')

# Get infiltration mapping
infil_map = HdfInfiltration.get_infiltration_map(hdf_path)

# Get zonal statistics (using RasMapper class)
clipped_data, transform, nodata = RasMapper.clip_raster_with_boundary(
    raster_path, boundary_path)
stats = RasMapper.calculate_zonal_stats(
    boundary_path, clipped_data, transform, nodata)

# Calculate soil statistics
soil_stats = HdfInfiltration.calculate_soil_statistics(stats, infil_map)

# Get significant mukeys (>1%)
significant = HdfInfiltration.get_significant_mukeys(soil_stats, threshold=1.0)

# Calculate total percentage of significant mukeys
total_significant = HdfInfiltration.calculate_total_significant_percentage(significant)
print(f"Total percentage of significant mukeys: {total_significant}%")

# Get infiltration parameters for each significant mukey
infiltration_params = {}
for mukey in significant['mukey']:
    params = HdfInfiltration.get_infiltration_parameters(hdf_path, mukey)
    if params:
        infiltration_params[mukey] = params

# Calculate weighted parameters
weighted_params = HdfInfiltration.calculate_weighted_parameters(
    significant, infiltration_params)
print("Weighted infiltration parameters:", weighted_params)

# Save results
HdfInfiltration.save_statistics(soil_stats, Path('soil_statistics.csv'))
"""
==================================================

File: c:\GH\ras-commander\ras_commander\HdfMesh.py
==================================================
"""
A static class for handling mesh-related operations on HEC-RAS HDF files.

This class provides static methods to extract and analyze mesh data from HEC-RAS HDF files,
including mesh area names, mesh areas, cell polygons, cell points, cell faces, and
2D flow area attributes. No instantiation is required to use these methods.

All methods are designed to work with the mesh geometry data stored in
HEC-RAS HDF files, providing functionality to retrieve and process various aspects
of the 2D flow areas and their associated mesh structures.


List of Functions:
-----------------
get_mesh_area_names()
    Returns list of 2D mesh area names
get_mesh_areas()
    Returns 2D flow area perimeter polygons
get_mesh_cell_polygons()
    Returns 2D flow mesh cell polygons
get_mesh_cell_points()
    Returns 2D flow mesh cell center points
get_mesh_cell_faces()
    Returns 2D flow mesh cell faces
get_mesh_area_attributes()
    Returns geometry 2D flow area attributes
get_mesh_face_property_tables()
    Returns Face Property Tables for each Face in all 2D Flow Areas
get_mesh_cell_property_tables()
    Returns Cell Property Tables for each Cell in all 2D Flow Areas

Each function is decorated with @standardize_input and @log_call for consistent
input handling and logging functionality.
"""
from pathlib import Path
import h5py
import numpy as np
import pandas as pd
from geopandas import GeoDataFrame
from shapely.geometry import Polygon, Point, LineString, MultiLineString, MultiPolygon
from shapely.ops import polygonize  # Importing polygonize to resolve the undefined name error
from typing import List, Tuple, Optional, Dict, Any
import logging
from .HdfBase import HdfBase
from .HdfUtils import HdfUtils
from .Decorators import standardize_input, log_call
from .LoggingConfig import setup_logging, get_logger

logger = get_logger(__name__)


class HdfMesh:
    """
    A class for handling mesh-related operations on HEC-RAS HDF files.

    This class provides methods to extract and analyze mesh data from HEC-RAS HDF files,
    including mesh area names, mesh areas, cell polygons, cell points, cell faces, and
    2D flow area attributes.

    Methods in this class are designed to work with the mesh geometry data stored in
    HEC-RAS HDF files, providing functionality to retrieve and process various aspects
    of the 2D flow areas and their associated mesh structures.

    Note: This class relies on HdfBase and HdfUtils for some underlying operations.
    """

    def __init__(self):
        self.logger = logging.getLogger(__name__)

    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def get_mesh_area_names(hdf_path: Path) -> List[str]:
        """
        Return a list of the 2D mesh area names from the RAS geometry.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.

        Returns
        -------
        List[str]
            A list of the 2D mesh area names within the RAS geometry.
            Returns an empty list if no 2D areas exist or if there's an error.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                if "Geometry/2D Flow Areas" not in hdf_file:
                    return list()
                return list(
                    [
                        HdfUtils.convert_ras_string(n.decode('utf-8'))
                        for n in hdf_file["Geometry/2D Flow Areas/Attributes"][()]["Name"]
                    ]
                )
        except Exception as e:
            self.logger.error(f"Error reading mesh area names from {hdf_path}: {str(e)}")
            return list()

    @staticmethod
    @standardize_input(file_type='geom_hdf')
    def get_mesh_areas(hdf_path: Path) -> GeoDataFrame:
        """
        Return 2D flow area perimeter polygons.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.

        Returns
        -------
        GeoDataFrame
            A GeoDataFrame containing the 2D flow area perimeter polygons if 2D areas exist.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                mesh_area_names = HdfMesh.get_mesh_area_names(hdf_path)
                if not mesh_area_names:
                    return GeoDataFrame()
                mesh_area_polygons = [
                    Polygon(hdf_file["Geometry/2D Flow Areas/{}/Perimeter".format(n)][()])
                    for n in mesh_area_names
                ]
                return GeoDataFrame(
                    {"mesh_name": mesh_area_names, "geometry": mesh_area_polygons},
                    geometry="geometry",
                    crs=HdfBase.get_projection(hdf_file),
                )
        except Exception as e:
            logger.error(f"Error reading mesh areas from {hdf_path}: {str(e)}")
            return GeoDataFrame()

    @staticmethod
    @standardize_input(file_type='geom_hdf')
    def get_mesh_cell_polygons(hdf_path: Path) -> GeoDataFrame:
        """
        Return 2D flow mesh cell polygons.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.

        Returns
        -------
        GeoDataFrame
            A GeoDataFrame containing the 2D flow mesh cell polygons with columns:
            - mesh_name: name of the mesh area
            - cell_id: unique identifier for each cell
            - geometry: polygon geometry of the cell
            Returns an empty GeoDataFrame if no 2D areas exist or if there's an error.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                mesh_area_names = HdfMesh.get_mesh_area_names(hdf_path)
                if not mesh_area_names:
                    return GeoDataFrame()

                # Get face geometries once
                face_gdf = HdfMesh.get_mesh_cell_faces(hdf_path)
                
                # Pre-allocate lists for better memory efficiency
                all_mesh_names = []
                all_cell_ids = []
                all_geometries = []

                for mesh_name in mesh_area_names:
                    # Get cell face info in one read
                    cell_face_info = hdf_file[f"Geometry/2D Flow Areas/{mesh_name}/Cells Face and Orientation Info"][()]
                    cell_face_values = hdf_file[f"Geometry/2D Flow Areas/{mesh_name}/Cells Face and Orientation Values"][()][:, 0]
                    
                    # Create face lookup dictionary for this mesh
                    mesh_faces_dict = dict(face_gdf[face_gdf.mesh_name == mesh_name][["face_id", "geometry"]].values)

                    # Process each cell
                    for cell_id, (start, length) in enumerate(cell_face_info[:, :2]):
                        face_ids = cell_face_values[start:start + length]
                        face_geoms = [mesh_faces_dict[face_id] for face_id in face_ids]
                        
                        # Create polygon
                        polygons = list(polygonize(face_geoms))
                        if polygons:
                            all_mesh_names.append(mesh_name)
                            all_cell_ids.append(cell_id)
                            all_geometries.append(Polygon(polygons[0]))

                # Create GeoDataFrame in one go
                return GeoDataFrame(
                    {
                        "mesh_name": all_mesh_names,
                        "cell_id": all_cell_ids,
                        "geometry": all_geometries
                    },
                    geometry="geometry",
                    crs=HdfBase.get_projection(hdf_file)
                )

        except Exception as e:
            logger.error(f"Error reading mesh cell polygons from {hdf_path}: {str(e)}")
            return GeoDataFrame()
        
    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def get_mesh_cell_points(hdf_path: Path) -> GeoDataFrame:
        """
        Return 2D flow mesh cell center points.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.

        Returns
        -------
        GeoDataFrame
            A GeoDataFrame containing the 2D flow mesh cell center points.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                mesh_area_names = HdfMesh.get_mesh_area_names(hdf_path)
                if not mesh_area_names:
                    return GeoDataFrame()
                
                # Pre-allocate lists
                all_mesh_names = []
                all_cell_ids = []
                all_points = []

                for mesh_name in mesh_area_names:
                    # Get all cell centers in one read
                    cell_centers = hdf_file[f"Geometry/2D Flow Areas/{mesh_name}/Cells Center Coordinate"][()]
                    cell_count = len(cell_centers)
                    
                    # Extend lists efficiently
                    all_mesh_names.extend([mesh_name] * cell_count)
                    all_cell_ids.extend(range(cell_count))
                    all_points.extend(Point(coords) for coords in cell_centers)

                # Create GeoDataFrame in one go
                return GeoDataFrame(
                    {
                        "mesh_name": all_mesh_names,
                        "cell_id": all_cell_ids,
                        "geometry": all_points
                    },
                    geometry="geometry",
                    crs=HdfBase.get_projection(hdf_file)
                )

        except Exception as e:
            logger.error(f"Error reading mesh cell points from {hdf_path}: {str(e)}")
            return GeoDataFrame()

    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def get_mesh_cell_faces(hdf_path: Path) -> GeoDataFrame:
        """
        Return 2D flow mesh cell faces.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.

        Returns
        -------
        GeoDataFrame
            A GeoDataFrame containing the 2D flow mesh cell faces.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                mesh_area_names = HdfMesh.get_mesh_area_names(hdf_path)
                if not mesh_area_names:
                    return GeoDataFrame()

                # Pre-allocate lists
                all_mesh_names = []
                all_face_ids = []
                all_geometries = []

                for mesh_name in mesh_area_names:
                    # Read all data at once
                    facepoints_index = hdf_file[f"Geometry/2D Flow Areas/{mesh_name}/Faces FacePoint Indexes"][()]
                    facepoints_coords = hdf_file[f"Geometry/2D Flow Areas/{mesh_name}/FacePoints Coordinate"][()]
                    faces_perim_info = hdf_file[f"Geometry/2D Flow Areas/{mesh_name}/Faces Perimeter Info"][()]
                    faces_perim_values = hdf_file[f"Geometry/2D Flow Areas/{mesh_name}/Faces Perimeter Values"][()]

                    # Process each face
                    for face_id, ((pnt_a_idx, pnt_b_idx), (start_row, count)) in enumerate(zip(facepoints_index, faces_perim_info)):
                        coords = [facepoints_coords[pnt_a_idx]]
                        
                        if count > 0:
                            coords.extend(faces_perim_values[start_row:start_row + count])
                            
                        coords.append(facepoints_coords[pnt_b_idx])
                        
                        all_mesh_names.append(mesh_name)
                        all_face_ids.append(face_id)
                        all_geometries.append(LineString(coords))

                # Create GeoDataFrame in one go
                return GeoDataFrame(
                    {
                        "mesh_name": all_mesh_names,
                        "face_id": all_face_ids,
                        "geometry": all_geometries
                    },
                    geometry="geometry",
                    crs=HdfBase.get_projection(hdf_file)
                )

        except Exception as e:
            logger.error(f"Error reading mesh cell faces from {hdf_path}: {str(e)}")
            return GeoDataFrame()

    @staticmethod
    @standardize_input(file_type='geom_hdf')
    def get_mesh_area_attributes(hdf_path: Path) -> pd.DataFrame:
        """
        Return geometry 2D flow area attributes from a HEC-RAS HDF file.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.

        Returns
        -------
        pd.DataFrame
            A DataFrame containing the 2D flow area attributes.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                d2_flow_area = hdf_file.get("Geometry/2D Flow Areas/Attributes")
                if d2_flow_area is not None and isinstance(d2_flow_area, h5py.Dataset):
                    result = {}
                    for name in d2_flow_area.dtype.names:
                        try:
                            value = d2_flow_area[name][()]
                            if isinstance(value, bytes):
                                value = value.decode('utf-8')  # Decode as UTF-8
                            result[name] = value if not isinstance(value, bytes) else value.decode('utf-8')
                        except Exception as e:
                            logger.warning(f"Error converting attribute '{name}': {str(e)}")
                    return pd.DataFrame.from_dict(result, orient='index', columns=['Value'])
                else:
                    logger.info("No 2D Flow Area attributes found or invalid dataset.")
                    return pd.DataFrame()  # Return an empty DataFrame
        except Exception as e:
            logger.error(f"Error reading 2D flow area attributes from {hdf_path}: {str(e)}")
            return pd.DataFrame()  # Return an empty DataFrame

    @staticmethod
    @standardize_input(file_type='geom_hdf')
    def get_mesh_face_property_tables(hdf_path: Path) -> Dict[str, pd.DataFrame]:
        """
        Extract Face Property Tables for each Face in all 2D Flow Areas.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.

        Returns
        -------
        Dict[str, pd.DataFrame]
            A dictionary where:
            - keys: mesh area names (str)
            - values: DataFrames with columns:
                - Face ID: unique identifier for each face
                - Z: elevation
                - Area: face area
                - Wetted Perimeter: wetted perimeter length
                - Manning's n: Manning's roughness coefficient
            Returns an empty dictionary if no 2D areas exist or if there's an error.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                mesh_area_names = HdfMesh.get_mesh_area_names(hdf_path)
                if not mesh_area_names:
                    return {}

                result = {}
                for mesh_name in mesh_area_names:
                    area_elevation_info = hdf_file[f"Geometry/2D Flow Areas/{mesh_name}/Faces Area Elevation Info"][()]
                    area_elevation_values = hdf_file[f"Geometry/2D Flow Areas/{mesh_name}/Faces Area Elevation Values"][()]
                    
                    face_data = []
                    for face_id, (start_index, count) in enumerate(area_elevation_info):
                        face_values = area_elevation_values[start_index:start_index+count]
                        for z, area, wetted_perimeter, mannings_n in face_values:
                            face_data.append({
                                'Face ID': face_id,
                                'Z': str(z),
                                'Area': str(area), 
                                'Wetted Perimeter': str(wetted_perimeter),
                                "Manning's n": str(mannings_n)
                            })
                    
                    result[mesh_name] = pd.DataFrame(face_data)
                
                return result

        except Exception as e:
            logger.error(f"Error extracting face property tables from {hdf_path}: {str(e)}")
            return {}

    @staticmethod
    @standardize_input(file_type='geom_hdf')
    def get_mesh_cell_property_tables(hdf_path: Path) -> Dict[str, pd.DataFrame]:
        """
        Extract Cell Property Tables for each Cell in all 2D Flow Areas.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.

        Returns
        -------
        Dict[str, pd.DataFrame]
            A dictionary where:
            - keys: mesh area names (str)
            - values: DataFrames with columns:
                - Cell ID: unique identifier for each cell
                - Z: elevation
                - Volume: cell volume
                - Surface Area: cell surface area
            Returns an empty dictionary if no 2D areas exist or if there's an error.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                mesh_area_names = HdfMesh.get_mesh_area_names(hdf_path)
                if not mesh_area_names:
                    return {}

                result = {}
                for mesh_name in mesh_area_names:
                    cell_elevation_info = hdf_file[f"Geometry/2D Flow Areas/{mesh_name}/Cells Elevation Volume Info"][()]
                    cell_elevation_values = hdf_file[f"Geometry/2D Flow Areas/{mesh_name}/Cells Elevation Volume Values"][()]
                    
                    cell_data = []
                    for cell_id, (start_index, count) in enumerate(cell_elevation_info):
                        cell_values = cell_elevation_values[start_index:start_index+count]
                        for z, volume, surface_area in cell_values:
                            cell_data.append({
                                'Cell ID': cell_id,
                                'Z': str(z),
                                'Volume': str(volume),
                                'Surface Area': str(surface_area)
                            })
                    
                    result[mesh_name] = pd.DataFrame(cell_data)
                
                return result

        except Exception as e:
            logger.error(f"Error extracting cell property tables from {hdf_path}: {str(e)}")
            return {}

==================================================

File: c:\GH\ras-commander\ras_commander\HdfPipe.py
==================================================
"""
Class: HdfPipe

All of the methods in this class are static and are designed to be used without instantiation.

List of Functions in HdfPipe:
Geometry Retrieval Functions:
- get_pipe_conduits() - Get pipe conduit geometries and attributes
- get_pipe_nodes() - Get pipe node geometries and attributes
- get_pipe_network() - Get complete pipe network data
- get_pipe_profile() - Get elevation profile for a specific conduit
- extract_pipe_network_data() - Extract both nodes and conduits data

Results Retrieval Functions:
- get_pipe_network_timeseries() - Get timeseries data for pipe network variables
- get_pipe_network_summary() - Get summary statistics for pipe networks
- get_pipe_node_timeseries() - Get timeseries data for a specific node
- get_pipe_conduit_timeseries() - Get timeseries data for a specific conduit

Note: All functions use the @standardize_input decorator to validate input paths
and the @log_call decorator for logging function calls.
"""
import h5py
import numpy as np
import pandas as pd
import geopandas as gpd
import xarray as xr
from pathlib import Path
from shapely.geometry import LineString, Point, MultiLineString, Polygon, MultiPolygon
from typing import List, Dict, Any, Optional, Union, Tuple
from .HdfBase import HdfBase
from .HdfUtils import HdfUtils
from .Decorators import standardize_input, log_call
from .LoggingConfig import get_logger
from .HdfResultsMesh import HdfResultsMesh
import logging  

logger = get_logger(__name__)

class HdfPipe:
    """
    Static methods for handling pipe network data from HEC-RAS HDF files.

    Contains methods for:
    - Geometry retrieval (nodes, conduits, networks, profiles)
    - Results retrieval (timeseries and summary data)

    All methods use @standardize_input for path validation and @log_call
    """

    # Geometry Retrieval Functions
    
    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_pipe_conduits(hdf_path: Path, crs: Optional[str] = "EPSG:4326") -> gpd.GeoDataFrame:
        """
        Extracts pipe conduit geometries and attributes from HDF5 file.

        Parameters:
            hdf_path: Path to the HDF5 file
            crs: Coordinate Reference System (default: "EPSG:4326")

        Returns:
            GeoDataFrame with columns:
            - Attributes from HDF5
            - Polyline: LineString geometries
            - Terrain_Profiles: List of (station, elevation) tuples
        """
        with h5py.File(hdf_path, 'r') as f:
            group = f['/Geometry/Pipe Conduits/']
            
            # --- Read and Process Attributes ---
            attributes = group['Attributes'][:]
            attr_df = pd.DataFrame(attributes)
            
            # Decode byte string fields to UTF-8 strings
            string_columns = attr_df.select_dtypes([object]).columns
            for col in string_columns:
                attr_df[col] = attr_df[col].apply(lambda x: x.decode('utf-8') if isinstance(x, bytes) else x)
            
            # --- Read Polyline Data ---
            polyline_info = group['Polyline Info'][:]  # Shape (132,4) - point_start_idx, point_count, part_start_idx, part_count
            polyline_points = group['Polyline Points'][:]  # Shape (396,2) - x,y coordinates
            
            polyline_geometries = []
            for info in polyline_info:
                point_start_idx = info[0]
                point_count = info[1]
                
                # Extract coordinates for this polyline directly using start index and count
                coords = polyline_points[point_start_idx:point_start_idx + point_count]
                
                if len(coords) < 2:
                    polyline_geometries.append(None)
                else:
                    polyline_geometries.append(LineString(coords))
            
            # --- Read Terrain Profiles Data ---
            terrain_info = group['Terrain Profiles Info'][:]
            terrain_values = group['Terrain Profiles Values'][:]
            
            # Create a list of (Station, Elevation) tuples for Terrain Profiles
            terrain_coords = list(zip(terrain_values[:, 0], terrain_values[:, 1]))
            
            terrain_profiles_list: List[List[Tuple[float, float]]] = []
            
            for i in range(len(terrain_info)):
                info = terrain_info[i]
                start_idx = info[0]
                count = info[1]
                
                # Extract (Station, Elevation) pairs
                segment = terrain_coords[start_idx : start_idx + count]
                
                terrain_profiles_list.append(segment)  # Store the list of (Station, Elevation) tuples
            
            # --- Combine Data into GeoDataFrame ---
            attr_df['Polyline'] = polyline_geometries
            attr_df['Terrain_Profiles'] = terrain_profiles_list
            
            # Initialize GeoDataFrame with Polyline geometries
            gdf = gpd.GeoDataFrame(attr_df, geometry='Polyline', crs=crs)
            
            return gdf


    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_pipe_nodes(hdf_path: Path) -> gpd.GeoDataFrame:
        """
        Creates a GeoDataFrame for Pipe Node points and their attributes from an HDF5 file.
        
        Parameters:
        - hdf_path: Path to the HDF5 file.
        
        Returns:
        - A GeoDataFrame containing pipe node attributes and their geometries.
        """
        with h5py.File(hdf_path, 'r') as f:
            group = f['/Geometry/Pipe Nodes/']
            
            # --- Read and Process Attributes ---
            attributes = group['Attributes'][:]
            attr_df = pd.DataFrame(attributes)
            
            # Decode byte string fields to UTF-8 strings
            string_columns = attr_df.select_dtypes([object]).columns  # Changed 'S' to object
            for col in string_columns:
                attr_df[col] = attr_df[col].apply(lambda x: x.decode('utf-8') if isinstance(x, bytes) else x)
            
            # --- Read Points Data ---
            points = group['Points'][:]
            # Create Shapely Point geometries
            geometries = [Point(xy) for xy in points]
            
            # --- Combine Attributes and Geometries into GeoDataFrame ---
            gdf = gpd.GeoDataFrame(attr_df, geometry=geometries)
            
            return gdf
        
        


    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_pipe_network(hdf_path: Path, pipe_network_name: Optional[str] = None, crs: Optional[str] = "EPSG:4326") -> gpd.GeoDataFrame:
        """
        Creates a GeoDataFrame for a pipe network's geometry.

        Parameters:
            hdf_path: Path to the HDF5 file
            pipe_network_name: Name of network (uses first if None)
            crs: Coordinate Reference System (default: "EPSG:4326")

        Returns:
            GeoDataFrame containing:
            - Cell polygons (primary geometry)
            - Face polylines
            - Node points
            - Associated attributes
        """
        with h5py.File(hdf_path, 'r') as f:
            pipe_networks_group = f['/Geometry/Pipe Networks/']
            
            # --- Determine Pipe Network to Use ---
            attributes = pipe_networks_group['Attributes'][:]
            attr_df = pd.DataFrame(attributes)
            
            # Decode 'Name' from byte strings to UTF-8
            attr_df['Name'] = attr_df['Name'].apply(lambda x: x.decode('utf-8') if isinstance(x, bytes) else x)
            
            if pipe_network_name:
                if pipe_network_name not in attr_df['Name'].values:
                    raise ValueError(f"Pipe network '{pipe_network_name}' not found in the HDF5 file.")
                network_idx = attr_df.index[attr_df['Name'] == pipe_network_name][0]
            else:
                network_idx = 0  # Default to first network
            
            # Get the name of the selected pipe network
            selected_network_name = attr_df.at[network_idx, 'Name']
            logging.info(f"Selected Pipe Network: {selected_network_name}")
            
            # Access the selected pipe network group
            network_group_path = f"/Geometry/Pipe Networks/{selected_network_name}/"
            network_group = f[network_group_path]
            
            # --- Helper Functions ---
            def decode_bytes(df: pd.DataFrame) -> pd.DataFrame:
                """Decode byte string columns to UTF-8."""
                string_columns = df.select_dtypes([object]).columns
                for col in string_columns:
                    df[col] = df[col].apply(lambda x: x.decode('utf-8') if isinstance(x, bytes) else x)
                return df
            
            def build_polygons(info, parts, points) -> List[Optional[Polygon or MultiPolygon]]:
                """Build Shapely Polygon or MultiPolygon geometries from HDF5 datasets."""
                poly_coords = list(zip(points[:, 0], points[:, 1]))
                geometries = []
                for i in range(len(info)):
                    cell_info = info[i]
                    point_start_idx = cell_info[0]
                    point_count = cell_info[1]
                    part_start_idx = cell_info[2]
                    part_count = cell_info[3]
                    
                    parts_list = []
                    for p in range(part_start_idx, part_start_idx + part_count):
                        if p >= len(parts):
                            continue  # Prevent index out of range
                        part_info = parts[p]
                        part_point_start = part_info[0]
                        part_point_count = part_info[1]
                        
                        coords = poly_coords[part_point_start : part_point_start + part_point_count]
                        if len(coords) < 3:
                            continue  # Not a valid polygon part
                        parts_list.append(coords)
                    
                    if not parts_list:
                        geometries.append(None)
                    elif len(parts_list) == 1:
                        try:
                            geometries.append(Polygon(parts_list[0]))
                        except ValueError:
                            geometries.append(None)
                    else:
                        try:
                            geometries.append(MultiPolygon([Polygon(p) for p in parts_list if len(p) >= 3]))
                        except ValueError:
                            geometries.append(None)
                return geometries
            
            def build_multilinestring(info, parts, points) -> List[Optional[LineString or MultiLineString]]:
                """Build Shapely LineString or MultiLineString geometries from HDF5 datasets."""
                line_coords = list(zip(points[:, 0], points[:, 1]))
                geometries = []
                for i in range(len(info)):
                    face_info = info[i]
                    point_start_idx = face_info[0]
                    point_count = face_info[1]
                    part_start_idx = face_info[2]
                    part_count = face_info[3]
                    
                    parts_list = []
                    for p in range(part_start_idx, part_start_idx + part_count):
                        if p >= len(parts):
                            continue  # Prevent index out of range
                        part_info = parts[p]
                        part_point_start = part_info[0]
                        part_point_count = part_info[1]
                        
                        coords = line_coords[part_point_start : part_point_start + part_point_count]
                        if len(coords) < 2:
                            continue  # Cannot form LineString with fewer than 2 points
                        parts_list.append(coords)
                    
                    if not parts_list:
                        geometries.append(None)
                    elif len(parts_list) == 1:
                        geometries.append(LineString(parts_list[0]))
                    else:
                        geometries.append(MultiLineString(parts_list))
                return geometries
            
            # --- Read and Process Cell Polygons ---
            cell_polygons_info = network_group['Cell Polygons Info'][:]
            cell_polygons_parts = network_group['Cell Polygons Parts'][:]
            cell_polygons_points = network_group['Cell Polygons Points'][:]
            
            cell_polygons_geometries = build_polygons(cell_polygons_info, cell_polygons_parts, cell_polygons_points)
            
            # --- Read and Process Face Polylines ---
            face_polylines_info = network_group['Face Polylines Info'][:]
            face_polylines_parts = network_group['Face Polylines Parts'][:]
            face_polylines_points = network_group['Face Polylines Points'][:]
            
            face_polylines_geometries = build_multilinestring(face_polylines_info, face_polylines_parts, face_polylines_points)
            
            # --- Read and Process Node Points ---
            node_surface_connectivity_group = network_group.get('Node Surface Connectivity', None)
            if node_surface_connectivity_group is not None:
                node_surface_connectivity = node_surface_connectivity_group[:]
            else:
                node_surface_connectivity = None
            
            # Assuming Node Connectivity Info and Values contain node coordinates
            node_connectivity_info = network_group['Node Connectivity Info'][:]
            node_connectivity_values = network_group['Node Connectivity Values'][:]
            node_indices = network_group['Node Indices'][:]
            node_surface_connectivity = network_group['Node Surface Connectivity'][:]
            
            # For simplicity, assuming that node connectivity includes X and Y coordinates
            # This may need to be adjusted based on actual data structure
            # Here, we'll create dummy points as placeholder
            # Replace with actual coordinate extraction logic as per data structure
            # For demonstration, we'll create random points
            # You should replace this with actual data extraction
            # Example:
            # node_points = network_group['Node Coordinates'][:]
            # node_geometries = [Point(x, y) for x, y in node_points]
            
            # Placeholder for node geometries
            # Assuming node_indices contains Node IDs and coordinates
            # Adjust based on actual dataset structure
            # Here, we assume that node_indices has columns: [Node ID, X, Y]
            # But based on the log, Node Surface Connectivity has ['Node ID', 'Layer', 'Layer ID', 'Sublayer ID']
            # No coordinates are provided, so we cannot create Point geometries unless coordinates are available elsewhere
            # Therefore, this part may need to be adapted based on actual data
            # For now, we'll skip node points geometries
            node_geometries = [None] * len(node_indices)  # Placeholder
            
            # --- Read and Process Cell Property Table ---
            cell_property_table = network_group['Cell Property Table'][:]
            cell_property_df = pd.DataFrame(cell_property_table)
            
            # Decode byte strings if any
            cell_property_df = decode_bytes(cell_property_df)
            
            # --- Read and Process Cells DS Face Indices ---
            cells_ds_face_info = network_group['Cells DS Face Indices Info'][:]
            cells_ds_face_values = network_group['Cells DS Face Indices Values'][:]
            
            # Create lists of DS Face Indices per cell
            cells_ds_face_indices = []
            for i in range(len(cells_ds_face_info)):
                info = cells_ds_face_info[i]
                start_idx, count = info
                indices = cells_ds_face_values[start_idx : start_idx + count]
                cells_ds_face_indices.append(indices.tolist())
            
            # --- Read and Process Cells Face Indices ---
            cells_face_info = network_group['Cells Face Indices Info'][:]
            cells_face_values = network_group['Cells Face Indices Values'][:]
            
            # Create lists of Face Indices per cell
            cells_face_indices = []
            for i in range(len(cells_face_info)):
                info = cells_face_info[i]
                start_idx, count = info
                indices = cells_face_values[start_idx : start_idx + count]
                cells_face_indices.append(indices.tolist())
            
            # --- Read and Process Cells Minimum Elevations ---
            cells_min_elevations = network_group['Cells Minimum Elevations'][:]
            cells_min_elevations_df = pd.DataFrame(cells_min_elevations, columns=['Minimum_Elevation'])
            
            # --- Read and Process Cells Node and Conduit IDs ---
            cells_node_conduit_ids = network_group['Cells Node and Conduit IDs'][:]
            cells_node_conduit_df = pd.DataFrame(cells_node_conduit_ids, columns=['Node_ID', 'Conduit_ID'])
            
            # --- Read and Process Cells US Face Indices ---
            cells_us_face_info = network_group['Cells US Face Indices Info'][:]
            cells_us_face_values = network_group['Cells US Face Indices Values'][:]
            
            # Create lists of US Face Indices per cell
            cells_us_face_indices = []
            for i in range(len(cells_us_face_info)):
                info = cells_us_face_info[i]
                start_idx, count = info
                indices = cells_us_face_values[start_idx : start_idx + count]
                cells_us_face_indices.append(indices.tolist())
            
            # --- Read and Process Conduit Indices ---
            conduit_indices = network_group['Conduit Indices'][:]
            conduit_indices_df = pd.DataFrame(conduit_indices, columns=['Conduit_ID'])
            
            # --- Read and Process Face Property Table ---
            face_property_table = network_group['Face Property Table'][:]
            face_property_df = pd.DataFrame(face_property_table)
            
            # Decode byte strings if any
            face_property_df = decode_bytes(face_property_df)
            
            # --- Read and Process Face Conduit ID and Stations ---
            faces_conduit_id_stations = network_group['Faces Conduit ID and Stations'][:]
            faces_conduit_df = pd.DataFrame(faces_conduit_id_stations, columns=['ConduitID', 'ConduitStation', 'CellUS', 'CellDS', 'Elevation'])
            
            # --- Read and Process Node Connectivity Info and Values ---
            node_connectivity_info = network_group['Node Connectivity Info'][:]
            node_connectivity_values = network_group['Node Connectivity Values'][:]
            
            # Create lists of connected nodes per node
            node_connectivity = []
            for i in range(len(node_connectivity_info)):
                info = node_connectivity_info[i]
                start_idx, count = info
                connections = node_connectivity_values[start_idx : start_idx + count]
                node_connectivity.append(connections.tolist())
            
            # --- Read and Process Node Indices ---
            node_indices = network_group['Node Indices'][:]
            node_indices_df = pd.DataFrame(node_indices, columns=['Node_ID'])
            
            # --- Read and Process Node Surface Connectivity ---
            node_surface_connectivity = network_group['Node Surface Connectivity'][:]
            node_surface_connectivity_df = pd.DataFrame(node_surface_connectivity, columns=['Node_ID', 'Layer', 'Layer_ID', 'Sublayer_ID'])
            
            # --- Combine All Cell-Related Data ---
            cells_df = pd.DataFrame({
                'Cell_ID': range(len(cell_polygons_geometries)),
                'Conduit_ID': cells_node_conduit_df['Conduit_ID'],
                'Node_ID': cells_node_conduit_df['Node_ID'],
                'Minimum_Elevation': cells_min_elevations_df['Minimum_Elevation'],
                'DS_Face_Indices': cells_ds_face_indices,
                'Face_Indices': cells_face_indices,
                'US_Face_Indices': cells_us_face_indices,
                'Cell_Property_Info_Index': cell_property_df['Info Index'],
                # Add other cell properties as needed
            })
            
            # Merge with cell property table
            cells_df = cells_df.merge(cell_property_df, left_on='Cell_Property_Info_Index', right_index=True, how='left')
            
            # --- Combine All Face-Related Data ---
            faces_df = pd.DataFrame({
                'Face_ID': range(len(face_polylines_geometries)),
                'Conduit_ID': faces_conduit_df['ConduitID'],
                'Conduit_Station': faces_conduit_df['ConduitStation'],
                'Cell_US': faces_conduit_df['CellUS'],
                'Cell_DS': faces_conduit_df['CellDS'],
                'Elevation': faces_conduit_df['Elevation'],
                'Face_Property_Info_Index': face_property_df['Info Index'],
                # Add other face properties as needed
            })
            
            # Merge with face property table
            faces_df = faces_df.merge(face_property_df, left_on='Face_Property_Info_Index', right_index=True, how='left')
            
            # --- Combine All Node-Related Data ---
            nodes_df = pd.DataFrame({
                'Node_ID': node_indices_df['Node_ID'],
                'Connected_Nodes': node_connectivity,
                # Add other node properties as needed
            })
            
            # Merge with node surface connectivity
            nodes_df = nodes_df.merge(node_surface_connectivity_df, on='Node_ID', how='left')
            
            # --- Create GeoDataFrame ---
            # Main DataFrame will be cells with their polygons
            cells_df['Cell_Polygon'] = cell_polygons_geometries
            
            # Add face polylines as a separate column (list of geometries)
            cells_df['Face_Polylines'] = cells_df['Face_Indices'].apply(lambda indices: [face_polylines_geometries[i] for i in indices if i < len(face_polylines_geometries)])
            
            # Add node points if geometries are available
            # Currently, node_geometries are placeholders (None). Replace with actual geometries if available.
            cells_df['Node_Point'] = cells_df['Node_ID'].apply(lambda nid: node_geometries[nid] if nid < len(node_geometries) else None)
            
            # Initialize GeoDataFrame with Cell Polygons
            gdf = gpd.GeoDataFrame(cells_df, geometry='Cell_Polygon', crs=crs)
            
            # Optionally, add Face Polylines and Node Points as separate columns
            # Note: GeoPandas primarily supports one geometry column, so these are stored as object columns
            gdf['Face_Polylines'] = cells_df['Face_Polylines']
            gdf['Node_Point'] = cells_df['Node_Point']
            
            # You can further expand this GeoDataFrame by merging with faces_df and nodes_df if needed
            
            return gdf
        
        
        
        
        


    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_pipe_profile(hdf_path: Path, conduit_id: int) -> pd.DataFrame:
        """
        Extract the profile data for a specific pipe conduit.

        Args:
            hdf_path (Path): Path to the HDF file.
            conduit_id (int): ID of the conduit to extract profile for.

        Returns:
            pd.DataFrame: DataFrame containing the pipe profile data.

        Raises:
            KeyError: If the required datasets are not found in the HDF file.
            IndexError: If the specified conduit_id is out of range.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf:
                # Get conduit info
                terrain_profiles_info = hdf['/Geometry/Pipe Conduits/Terrain Profiles Info'][()]
                
                if conduit_id >= len(terrain_profiles_info):
                    raise IndexError(f"conduit_id {conduit_id} is out of range")

                start, count = terrain_profiles_info[conduit_id]

                # Extract profile data
                profile_values = hdf['/Geometry/Pipe Conduits/Terrain Profiles Values'][start:start+count]

                # Create DataFrame
                df = pd.DataFrame(profile_values, columns=['Station', 'Elevation'])

                return df

        except KeyError as e:
            logger.error(f"Required dataset not found in HDF file: {e}")
            raise
        except IndexError as e:
            logger.error(f"Invalid conduit_id: {e}")
            raise
        except Exception as e:
            logger.error(f"Error extracting pipe profile data: {e}")
            raise
        
        
   









# RESULTS FUNCTIONS: 

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_pipe_network_summary(hdf_path: Path) -> pd.DataFrame:
        """
        Extract results summary data for pipe networks from the HDF file.

        Args:
            hdf_path (Path): Path to the HDF file.

        Returns:
            pd.DataFrame: DataFrame containing pipe network summary data.

        Raises:
            KeyError: If the required datasets are not found in the HDF file.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf:
                # Extract summary data
                summary_path = "/Results/Unsteady/Summary/Pipe Network"
                if summary_path not in hdf:
                    logger.warning("Pipe Network summary data not found in HDF file")
                    return pd.DataFrame()

                summary_data = hdf[summary_path][()]
                
                # Create DataFrame
                df = pd.DataFrame(summary_data)

                # Convert column names
                df.columns = [col.decode('utf-8') for col in df.columns]

                return df

        except KeyError as e:
            logger.error(f"Required dataset not found in HDF file: {e}")
            raise
        except Exception as e:
            logger.error(f"Error extracting pipe network summary data: {e}")
            raise




    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def extract_timeseries_for_node(plan_hdf_path: Path, node_id: int) -> Dict[str, xr.DataArray]:
        """
        Extract time series data for a specific node.
        
        Parameters:
        -----------
        plan_hdf_path : Path
            Path to HEC-RAS results HDF file
        node_id : int
            ID of the node to extract data for
            
        Returns:
        --------
        Dict[str, xr.DataArray]: Dictionary containing time series data for:
            - Depth
            - Drop Inlet Flow
            - Water Surface
        """
        try:
            node_variables = ["Nodes/Depth", "Nodes/Drop Inlet Flow", "Nodes/Water Surface"]
            node_data = {}

            for variable in node_variables:
                data = HdfPipe.get_pipe_network_timeseries(plan_hdf_path, variable=variable)
                node_data[variable] = data.sel(location=node_id)
            
            return node_data
        except Exception as e:
            logger.error(f"Error extracting time series data for node {node_id}: {str(e)}")
            raise

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def extract_timeseries_for_conduit(plan_hdf_path: Path, conduit_id: int) -> Dict[str, xr.DataArray]:
        """
        Extract time series data for a specific conduit.
        
        Parameters:
        -----------
        plan_hdf_path : Path
            Path to HEC-RAS results HDF file
        conduit_id : int
            ID of the conduit to extract data for
            
        Returns:
        --------
        Dict[str, xr.DataArray]: Dictionary containing time series data for:
            - Pipe Flow (US/DS)
            - Velocity (US/DS)
        """
        try:
            conduit_variables = ["Pipes/Pipe Flow DS", "Pipes/Pipe Flow US", 
                                "Pipes/Vel DS", "Pipes/Vel US"]
            conduit_data = {}

            for variable in conduit_variables:
                data = HdfPipe.get_pipe_network_timeseries(plan_hdf_path, variable=variable)
                conduit_data[variable] = data.sel(location=conduit_id)
            
            return conduit_data
        except Exception as e:
            logger.error(f"Error extracting time series data for conduit {conduit_id}: {str(e)}")
            raise


    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_pipe_network_timeseries(hdf_path: Path, variable: str) -> xr.DataArray:
        """
        Extracts timeseries data for a pipe network variable.

        Parameters:
            hdf_path: Path to the HDF5 file
            variable: Variable name to extract. Valid options:
                - Cell: Courant, Water Surface
                - Face: Flow, Velocity, Water Surface
                - Pipes: Pipe Flow (DS/US), Vel (DS/US)
                - Nodes: Depth, Drop Inlet Flow, Water Surface

        Returns:
            xarray.DataArray with dimensions (time, location)
        """
        valid_variables = [
            "Cell Courant", "Cell Water Surface", "Face Flow", "Face Velocity",
            "Face Water Surface", "Pipes/Pipe Flow DS", "Pipes/Pipe Flow US",
            "Pipes/Vel DS", "Pipes/Vel US", "Nodes/Depth", "Nodes/Drop Inlet Flow",
            "Nodes/Water Surface"
        ]

        if variable not in valid_variables:
            raise ValueError(f"Invalid variable. Must be one of: {', '.join(valid_variables)}")

        try:
            with h5py.File(hdf_path, 'r') as hdf:
                # Extract timeseries data
                data_path = f"/Results/Unsteady/Output/Output Blocks/DSS Hydrograph Output/Unsteady Time Series/Pipe Networks/Davis/{variable}"
                data = hdf[data_path][()]

                # Extract time information using the correct method name
                time = HdfBase.get_unsteady_timestamps(hdf)

                # Create DataArray
                da = xr.DataArray(
                    data=data,
                    dims=['time', 'location'],
                    coords={'time': time, 'location': range(data.shape[1])},
                    name=variable
                )

                # Add attributes
                da.attrs['units'] = hdf[data_path].attrs.get('Units', b'').decode('utf-8')
                da.attrs['variable'] = variable

                return da

        except KeyError as e:
            logger.error(f"Required dataset not found in HDF file: {e}")
            raise
        except Exception as e:
            logger.error(f"Error extracting pipe network timeseries data: {e}")
            raise





==================================================

File: c:\GH\ras-commander\ras_commander\HdfPlan.py
==================================================
"""
Class: HdfPlan

Attribution: A substantial amount of code in this file is sourced or derived 
from the https://github.com/fema-ffrd/rashdf library, 
released under MIT license and Copyright (c) 2024 fema-ffrd

The file has been forked and modified for use in RAS Commander.

-----

All of the methods in this class are static and are designed to be used without instantiation.

List of Functions in HdfPlan:
- get_simulation_start_time()
- get_simulation_end_time()
- get_unsteady_datetimes()
- get_plan_info_attrs()
- get_plan_parameters()
- get_meteorology_precip_attrs()
- get_geom_attrs()


REVISIONS NEEDED: 

Use get_ prefix for functions that return data.  
Since we are extracting plan data, we should use get_plan_...
BUT, we will never set results data, so we should use results_

We need to shorten names where possible.

List of Revised Functions in HdfPlan:
- get_plan_start_time()
- get_plan_end_time()
- get_plan_timestamps_list()     
- get_plan_information()
- get_plan_parameters()
- get_plan_met_precip()
- get_geometry_information()






"""

import h5py
import pandas as pd
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional

from .HdfBase import HdfBase
from .HdfUtils import HdfUtils
from .Decorators import standardize_input, log_call
from .LoggingConfig import setup_logging, get_logger

logger = get_logger(__name__)


class HdfPlan:
    """
    A class for handling HEC-RAS plan HDF files.

    Provides static methods for extracting data from HEC-RAS plan HDF files including 
    simulation times, plan information, and geometry attributes. All methods use 
    @standardize_input for handling different input types and @log_call for logging.

    Note: This code is partially derived from the rashdf library (https://github.com/fema-ffrd/rashdf)
    under MIT license.
    """

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_plan_start_time(hdf_path: Path) -> datetime:
        """
        Get the plan start time from the plan file.

        Args:
            hdf_path (Path): Path to the HEC-RAS plan HDF file.

        Returns:
            datetime: The plan start time in UTC format.

        Raises:
            ValueError: If there's an error reading the plan start time.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                return HdfBase.get_simulation_start_time(hdf_file)
        except Exception as e:
            raise ValueError(f"Failed to get plan start time: {str(e)}")

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_plan_end_time(hdf_path: Path) -> datetime:
        """
        Get the plan end time from the plan file.

        Args:
            hdf_path (Path): Path to the HEC-RAS plan HDF file.

        Returns:
            datetime: The plan end time.

        Raises:
            ValueError: If there's an error reading the plan end time.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                plan_info = hdf_file.get('Plan Data/Plan Information')
                if plan_info is None:
                    raise ValueError("Plan Information not found in HDF file")
                time_str = plan_info.attrs.get('Simulation End Time')
                return HdfUtils.parse_ras_datetime(time_str.decode('utf-8'))
        except Exception as e:
            raise ValueError(f"Failed to get plan end time: {str(e)}")

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_plan_timestamps_list(hdf_path: Path) -> List[datetime]:
        """
        Get the list of output timestamps from the plan simulation.

        Args:
            hdf_path (Path): Path to the HEC-RAS plan HDF file.

        Returns:
            List[datetime]: Chronological list of simulation output timestamps in UTC.

        Raises:
            ValueError: If there's an error retrieving the plan timestamps.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                return HdfBase.get_unsteady_timestamps(hdf_file)
        except Exception as e:
            raise ValueError(f"Failed to get plan timestamps: {str(e)}")

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_plan_information(hdf_path: Path) -> Dict:
        """
        Get plan information from a HEC-RAS HDF plan file.

        Args:
            hdf_path (Path): Path to the HEC-RAS plan HDF file.

        Returns:
            Dict: Plan information including simulation times, flow regime, 
                computation settings, etc.

        Raises:
            ValueError: If there's an error retrieving the plan information.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                plan_info_path = "Plan Data/Plan Information"
                if plan_info_path not in hdf_file:
                    raise ValueError(f"Plan Information not found in {hdf_path}")
                
                attrs = {}
                for key in hdf_file[plan_info_path].attrs.keys():
                    value = hdf_file[plan_info_path].attrs[key]
                    if isinstance(value, bytes):
                        value = HdfUtils.convert_ras_string(value)
                    attrs[key] = value
                
                return attrs
        except Exception as e:
            raise ValueError(f"Failed to get plan information attributes: {str(e)}")

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_plan_parameters(hdf_path: Path) -> Dict:
        """
        Get plan parameter attributes from a HEC-RAS HDF plan file.

        Args:
            hdf_path (Path): Path to the HEC-RAS plan HDF file.

        Returns:
            Dict: A dictionary containing the plan parameter attributes.

        Raises:
            ValueError: If there's an error retrieving the plan parameter attributes.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                plan_params_path = "Plan Data/Plan Parameters"
                if plan_params_path not in hdf_file:
                    raise ValueError(f"Plan Parameters not found in {hdf_path}")
                
                attrs = {}
                for key in hdf_file[plan_params_path].attrs.keys():
                    value = hdf_file[plan_params_path].attrs[key]
                    if isinstance(value, bytes):
                        value = HdfUtils.convert_ras_string(value)
                    attrs[key] = value
                
                return attrs
        except Exception as e:
            raise ValueError(f"Failed to get plan parameter attributes: {str(e)}")

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_plan_met_precip(hdf_path: Path) -> Dict:
        """
        Get precipitation attributes from a HEC-RAS HDF plan file.

        Args:
            hdf_path (Path): Path to the HEC-RAS plan HDF file.

        Returns:
            Dict: Precipitation attributes including method, time series data,
                and spatial distribution if available. Returns empty dict if
                no precipitation data exists.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                precip_path = "Event Conditions/Meteorology/Precipitation"
                if precip_path not in hdf_file:
                    logger.error(f"Precipitation data not found in {hdf_path}")
                    return {}
                
                attrs = {}
                for key in hdf_file[precip_path].attrs.keys():
                    value = hdf_file[precip_path].attrs[key]
                    if isinstance(value, bytes):
                        value = HdfUtils.convert_ras_string(value)
                    attrs[key] = value
                
                return attrs
        except Exception as e:
            logger.error(f"Failed to get precipitation attributes: {str(e)}")
            return {}
        
    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_geometry_information(hdf_path: Path) -> pd.DataFrame:
        """
        Get root level geometry attributes from the HDF plan file.

        Args:
            hdf_path (Path): Path to the HEC-RAS plan HDF file.

        Returns:
            pd.DataFrame: DataFrame with geometry attributes including Creation Date/Time,
                        Version, Units, and Projection information.

        Raises:
            ValueError: If Geometry group is missing or there's an error reading attributes.
        """
        print(f"Getting geometry attributes from {hdf_path}")
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                geom_attrs_path = "Geometry"
                print(f"Checking for Geometry group in {hdf_path}")
                if geom_attrs_path not in hdf_file:
                    raise ValueError(f"Geometry group not found in {hdf_path}")

                attrs = {}
                geom_group = hdf_file[geom_attrs_path]
                print("Getting root level geometry attributes")
                # Get root level geometry attributes only
                for key, value in geom_group.attrs.items():
                    if isinstance(value, bytes):
                        try:
                            value = HdfUtils.convert_ras_string(value)
                        except UnicodeDecodeError:
                            logger.warning(f"Failed to decode byte string for root attribute {key}")
                            continue
                    attrs[key] = value

                print("Successfully extracted root level geometry attributes")
                return pd.DataFrame.from_dict(attrs, orient='index', columns=['Value'])

        except (OSError, RuntimeError) as e:
            raise ValueError(f"Failed to read HDF file {hdf_path}: {str(e)}")
        except Exception as e:
            raise ValueError(f"Failed to get geometry attributes: {str(e)}")



==================================================

File: c:\GH\ras-commander\ras_commander\HdfPlot.py
==================================================
"""
Class: HdfPlot

A collection of static methods for plotting general HDF data from HEC-RAS models.
"""

import matplotlib.pyplot as plt
import pandas as pd
import geopandas as gpd
from typing import Optional, Union, Tuple
from .Decorators import log_call, standardize_input
from .HdfUtils import HdfUtils

class HdfPlot:
    """
    A class containing static methods for plotting general HDF data from HEC-RAS models.
    
    This class provides plotting functionality for HDF data, focusing on
    geometric elements like cell polygons and time series data.
    """

    @staticmethod
    @log_call
    def plot_mesh_cells(
        cell_polygons_df: pd.DataFrame, ## THIS IS A GEODATAFRAME - NEED TO EDIT BOTH ARGUMENT AND USAGE
        projection: str,
        title: str = '2D Flow Area Mesh Cells',
        figsize: Tuple[int, int] = (12, 8)
    ) -> Optional[gpd.GeoDataFrame]:
        """
        Plots the mesh cells from the provided DataFrame and returns the GeoDataFrame.

        Args:
            cell_polygons_df (pd.DataFrame): DataFrame containing cell polygons.
            projection (str): The coordinate reference system to assign to the GeoDataFrame.
            title (str, optional): Plot title. Defaults to '2D Flow Area Mesh Cells'.
            figsize (Tuple[int, int], optional): Figure size. Defaults to (12, 8).

        Returns:
            Optional[gpd.GeoDataFrame]: GeoDataFrame containing the mesh cells, or None if no cells found.
        """
        if cell_polygons_df.empty:
            print("No Cell Polygons found.")
            return None

        # Convert any datetime columns to strings using HdfUtils
        cell_polygons_df = HdfUtils.convert_df_datetimes_to_str(cell_polygons_df)
        
        cell_polygons_gdf = gpd.GeoDataFrame(cell_polygons_df, crs=projection)

        print("Cell Polygons CRS:", cell_polygons_gdf.crs)
        display(cell_polygons_gdf.head())

        fig, ax = plt.subplots(figsize=figsize)
        cell_polygons_gdf.plot(ax=ax, edgecolor='blue', facecolor='none')
        ax.set_xlabel('X Coordinate')
        ax.set_ylabel('Y Coordinate')
        ax.set_title(title)
        ax.grid(True)
        plt.tight_layout()
        plt.show()

        return cell_polygons_gdf

    @staticmethod
    @log_call
    def plot_time_series(
        df: pd.DataFrame,
        x_col: str,
        y_col: str,
        title: str = None,
        figsize: Tuple[int, int] = (12, 6)
    ) -> None:
        """
        Plots time series data from HDF results.

        Args:
            df (pd.DataFrame): DataFrame containing the time series data
            x_col (str): Name of the column containing x-axis data (usually time)
            y_col (str): Name of the column containing y-axis data
            title (str, optional): Plot title. Defaults to None.
            figsize (Tuple[int, int], optional): Figure size. Defaults to (12, 6).
        """
        # Convert any datetime columns to strings
        df = HdfUtils.convert_df_datetimes_to_str(df)
        
        fig, ax = plt.subplots(figsize=figsize)
        df.plot(x=x_col, y=y_col, ax=ax)
        
        if title:
            ax.set_title(title)
        ax.grid(True)
        plt.tight_layout()
        plt.show()
    
    
    
    
    
    
    
    
    
    
==================================================

File: c:\GH\ras-commander\ras_commander\HdfPump.py
==================================================
"""
Class: HdfPump

All of the methods in this class are static and are designed to be used without instantiation.

List of Functions in HdfPump:
- get_pump_stations()
- get_pump_groups()
- get_pump_station_timeseries()
- get_pump_station_summary()
- get_pump_operation_timeseries()


"""


import h5py
import numpy as np
import pandas as pd
import geopandas as gpd
import xarray as xr
from pathlib import Path
from shapely.geometry import Point
from typing import List, Dict, Any, Optional, Union
from .HdfUtils import HdfUtils
from .HdfBase import HdfBase
from .Decorators import standardize_input, log_call
from .LoggingConfig import get_logger

logger = get_logger(__name__)

class HdfPump:
    """
    A class for handling pump station related data from HEC-RAS HDF files.

    This class provides static methods to extract and process pump station data, including:
    - Pump station locations and attributes
    - Pump group configurations and efficiency curves
    - Time series results for pump operations
    - Summary statistics for pump stations

    All methods are static and designed to work with HEC-RAS HDF files containing pump data.
    """

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_pump_stations(hdf_path: Path) -> gpd.GeoDataFrame:
        """
        Extract pump station data from the HDF file.

        Args:
            hdf_path (Path): Path to the HEC-RAS HDF file.

        Returns:
            gpd.GeoDataFrame: GeoDataFrame containing pump station data with columns:
                - geometry: Point geometry of pump station location
                - station_id: Unique identifier for each pump station
                - Additional attributes from the HDF file

        Raises:
            KeyError: If pump station datasets are not found in the HDF file.
            Exception: If there are errors processing the pump station data.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf:
                # Extract pump station data
                attributes = hdf['/Geometry/Pump Stations/Attributes'][()]
                points = hdf['/Geometry/Pump Stations/Points'][()]

                # Create geometries
                geometries = [Point(x, y) for x, y in points]

                # Create GeoDataFrame
                gdf = gpd.GeoDataFrame(geometry=geometries)
                gdf['station_id'] = range(len(gdf))

                # Add attributes and decode byte strings
                attr_df = pd.DataFrame(attributes)
                string_columns = attr_df.select_dtypes([object]).columns
                for col in string_columns:
                    attr_df[col] = attr_df[col].apply(lambda x: x.decode('utf-8') if isinstance(x, bytes) else x)
                
                for col in attr_df.columns:
                    gdf[col] = attr_df[col]

                # Set CRS if available
                crs = HdfBase.get_projection(hdf_path)
                if crs:
                    gdf.set_crs(crs, inplace=True)

                return gdf

        except KeyError as e:
            logger.error(f"Required dataset not found in HDF file: {e}")
            raise
        except Exception as e:
            logger.error(f"Error extracting pump station data: {e}")
            raise

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_pump_groups(hdf_path: Path) -> pd.DataFrame:
        """
        Extract pump group data from the HDF file.

        Args:
            hdf_path (Path): Path to the HEC-RAS HDF file.

        Returns:
            pd.DataFrame: DataFrame containing pump group data with columns:
                - efficiency_curve_start: Starting index of efficiency curve data
                - efficiency_curve_count: Number of points in efficiency curve
                - efficiency_curve: List of efficiency curve values
                - Additional attributes from the HDF file

        Raises:
            KeyError: If pump group datasets are not found in the HDF file.
            Exception: If there are errors processing the pump group data.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf:
                # Extract pump group data
                attributes = hdf['/Geometry/Pump Stations/Pump Groups/Attributes'][()]
                efficiency_curves_info = hdf['/Geometry/Pump Stations/Pump Groups/Efficiency Curves Info'][()]
                efficiency_curves_values = hdf['/Geometry/Pump Stations/Pump Groups/Efficiency Curves Values'][()]

                # Create DataFrame and decode byte strings
                df = pd.DataFrame(attributes)
                string_columns = df.select_dtypes([object]).columns
                for col in string_columns:
                    df[col] = df[col].apply(lambda x: x.decode('utf-8') if isinstance(x, bytes) else x)

                # Add efficiency curve data
                df['efficiency_curve_start'] = efficiency_curves_info[:, 0]
                df['efficiency_curve_count'] = efficiency_curves_info[:, 1]

                # Process efficiency curves
                def get_efficiency_curve(start, count):
                    return efficiency_curves_values[start:start+count].tolist()

                df['efficiency_curve'] = df.apply(lambda row: get_efficiency_curve(row['efficiency_curve_start'], row['efficiency_curve_count']), axis=1)

                return df

        except KeyError as e:
            logger.error(f"Required dataset not found in HDF file: {e}")
            raise
        except Exception as e:
            logger.error(f"Error extracting pump group data: {e}")
            raise

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_pump_station_timeseries(hdf_path: Path, pump_station: str) -> xr.DataArray:
        """
        Extract timeseries results data for a specific pump station.

        Args:
            hdf_path (Path): Path to the HEC-RAS HDF file.
            pump_station (str): Name or identifier of the pump station.

        Returns:
            xr.DataArray: DataArray containing the timeseries data with dimensions:
                - time: Timestamps of simulation
                - variable: Variables including ['Flow', 'Stage HW', 'Stage TW', 
                           'Pump Station', 'Pumps on']
            Attributes include units and pump station name.

        Raises:
            KeyError: If required datasets are not found in the HDF file.
            ValueError: If the specified pump station name is not found.
            Exception: If there are errors processing the timeseries data.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf:
                # Check if the pump station exists
                pumping_stations_path = "/Results/Unsteady/Output/Output Blocks/DSS Hydrograph Output/Unsteady Time Series/Pumping Stations"
                if pump_station not in hdf[pumping_stations_path]:
                    raise ValueError(f"Pump station '{pump_station}' not found in HDF file")

                # Extract timeseries data
                data_path = f"{pumping_stations_path}/{pump_station}/Structure Variables"
                data = hdf[data_path][()]

                # Extract time information - Updated to use new method name
                time = HdfBase.get_unsteady_timestamps(hdf)

                # Create DataArray
                da = xr.DataArray(
                    data=data,
                    dims=['time', 'variable'],
                    coords={'time': time, 'variable': ['Flow', 'Stage HW', 'Stage TW', 'Pump Station', 'Pumps on']},
                    name=pump_station
                )

                # Add attributes and decode byte strings
                units = hdf[data_path].attrs.get('Variable_Unit', b'')
                da.attrs['units'] = units.decode('utf-8') if isinstance(units, bytes) else units
                da.attrs['pump_station'] = pump_station

                return da

        except KeyError as e:
            logger.error(f"Required dataset not found in HDF file: {e}")
            raise
        except ValueError as e:
            logger.error(str(e))
            raise
        except Exception as e:
            logger.error(f"Error extracting pump station timeseries data: {e}")
            raise

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_pump_station_summary(hdf_path: Path) -> pd.DataFrame:
        """
        Extract summary statistics and performance data for all pump stations.

        Args:
            hdf_path (Path): Path to the HEC-RAS HDF file.

        Returns:
            pd.DataFrame: DataFrame containing pump station summary data including
                operational statistics and performance metrics. Returns empty DataFrame
                if no summary data is found.

        Raises:
            KeyError: If the summary dataset is not found in the HDF file.
            Exception: If there are errors processing the summary data.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf:
                # Extract summary data
                summary_path = "/Results/Unsteady/Summary/Pump Station"
                if summary_path not in hdf:
                    logger.warning("Pump Station summary data not found in HDF file")
                    return pd.DataFrame()

                summary_data = hdf[summary_path][()]
                
                # Create DataFrame and decode byte strings
                df = pd.DataFrame(summary_data)
                string_columns = df.select_dtypes([object]).columns
                for col in string_columns:
                    df[col] = df[col].apply(lambda x: x.decode('utf-8') if isinstance(x, bytes) else x)

                return df

        except KeyError as e:
            logger.error(f"Required dataset not found in HDF file: {e}")
            raise
        except Exception as e:
            logger.error(f"Error extracting pump station summary data: {e}")
            raise

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_pump_operation_timeseries(hdf_path: Path, pump_station: str) -> pd.DataFrame:
        """
        Extract detailed pump operation results data for a specific pump station.

        Args:
            hdf_path (Path): Path to the HEC-RAS HDF file.
            pump_station (str): Name or identifier of the pump station.

        Returns:
            pd.DataFrame: DataFrame containing pump operation data with columns:
                - Time: Simulation timestamps
                - Flow: Pump flow rate
                - Stage HW: Headwater stage
                - Stage TW: Tailwater stage
                - Pump Station: Station identifier
                - Pumps on: Number of active pumps

        Raises:
            KeyError: If required datasets are not found in the HDF file.
            ValueError: If the specified pump station name is not found.
            Exception: If there are errors processing the operation data.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf:
                # Check if the pump station exists
                pump_stations_path = "/Results/Unsteady/Output/Output Blocks/DSS Profile Output/Unsteady Time Series/Pumping Stations"
                if pump_station not in hdf[pump_stations_path]:
                    raise ValueError(f"Pump station '{pump_station}' not found in HDF file")

                # Extract pump operation data
                data_path = f"{pump_stations_path}/{pump_station}/Structure Variables"
                data = hdf[data_path][()]

                # Extract time information - Updated to use new method name
                time = HdfBase.get_unsteady_timestamps(hdf)

                # Create DataFrame and decode byte strings
                df = pd.DataFrame(data, columns=['Flow', 'Stage HW', 'Stage TW', 'Pump Station', 'Pumps on'])
                string_columns = df.select_dtypes([object]).columns
                for col in string_columns:
                    df[col] = df[col].apply(lambda x: x.decode('utf-8') if isinstance(x, bytes) else x)
                    
                df['Time'] = time

                return df

        except KeyError as e:
            logger.error(f"Required dataset not found in HDF file: {e}")
            raise
        except ValueError as e:
            logger.error(str(e))
            raise
        except Exception as e:
            logger.error(f"Error extracting pump operation data: {e}")
            raise
==================================================

File: c:\GH\ras-commander\ras_commander\HdfResultsMesh.py
==================================================
"""
Class: HdfResultsMesh

Attribution: A substantial amount of code in this file is sourced or derived 
from the https://github.com/fema-ffrd/rashdf library, 
released under MIT license and Copyright (c) 2024 fema-ffrd

The file has been forked and modified for use in RAS Commander.

-----

All methods in this class are static and designed to be used without instantiation.

Public Functions:
- get_mesh_summary(): Get summary output data for a variable 
- get_mesh_timeseries(): Get timeseries output for a mesh and variable  
- get_mesh_faces_timeseries(): Get timeseries for all face-based variables
- get_mesh_cells_timeseries(): Get timeseries for mesh cells
- get_mesh_last_iter(): Get last iteration count for cells
- get_mesh_max_ws(): Get maximum water surface elevation at each cell   
- get_mesh_min_ws(): Get minimum water surface elevation at each cell
- get_mesh_max_face_v(): Get maximum face velocity at each face
- get_mesh_min_face_v(): Get minimum face velocity at each face
- get_mesh_max_ws_err(): Get maximum water surface error at each cell
- get_mesh_max_iter(): Get maximum iteration count at each cell

Private Functions:
- _get_mesh_timeseries_output_path(): Get HDF path for timeseries output  #REDUNDANT??
- _get_mesh_cells_timeseries_output(): Internal handler for cell timeseries   #REDUNDANT??
- _get_mesh_timeseries_output(): Internal handler for mesh timeseries       # FACES?? 
- _get_mesh_timeseries_output_values_units(): Get values and units for timeseries
- _get_available_meshes(): Get list of available meshes in HDF            #USE HDFBASE OR HDFUTIL
- get_mesh_summary_output(): Internal handler for summary output        
- get_mesh_summary_output_group(): Get HDF group for summary output         #REDUNDANT??  Include in Above

The class works with HEC-RAS version 6.0+ plan HDF files and uses HdfBase and 
HdfUtils for common operations. Methods use @log_call decorator for logging and 
@standardize_input decorator to handle different input types.






REVISIONS MADE:

Use get_ prefix for functions that return data.  
BUT, we will never set results data, so we should use get_ for results data.

Renamed functions:
- mesh_summary_output() to get_mesh_summary()
- mesh_timeseries_output() to get_mesh_timeseries()
- mesh_faces_timeseries_output() to get_mesh_faces_timeseries()
- mesh_cells_timeseries_output() to get_mesh_cells_timeseries()
- mesh_last_iter() to get_mesh_last_iter()
- mesh_max_ws() to get_mesh_max_ws()







"""

import numpy as np
import pandas as pd
import xarray as xr
from pathlib import Path
import h5py
from typing import Union, List, Optional, Dict, Any, Tuple
from .HdfMesh import HdfMesh
from .HdfBase import HdfBase
from .HdfUtils import HdfUtils
from .Decorators import log_call, standardize_input
from .LoggingConfig import setup_logging, get_logger
import geopandas as gpd

logger = get_logger(__name__)

class HdfResultsMesh:
    """
    Handles mesh-related results from HEC-RAS HDF files.

    Provides methods to extract and analyze:
    - Mesh summary outputs
    - Timeseries data
    - Water surface elevations
    - Velocities
    - Error metrics

    Works with HEC-RAS 6.0+ plan HDF files.
    """

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_mesh_summary(hdf_path: Path, var: str, round_to: str = "100ms") -> pd.DataFrame:
        """
        Get timeseries output for a specific mesh and variable.

        Args:
            hdf_path (Path): Path to the HDF file
            mesh_name (str): Name of the mesh
            var (str): Variable to retrieve (see valid options below)
            truncate (bool): Whether to truncate trailing zeros (default True)

        Returns:
            xr.DataArray: DataArray with dimensions:
                - time: Timestamps
                - face_id/cell_id: IDs for faces/cells
                And attributes:
                - units: Variable units
                - mesh_name: Name of mesh
                - variable: Variable name

        Valid variables include:
            "Water Surface", "Face Velocity", "Cell Velocity X"...
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                return HdfResultsMesh.get_mesh_summary_output(hdf_file, var, round_to)
        except Exception as e:
            logger.error(f"Error in get_mesh_summary: {str(e)}")
            logger.error(f"Variable: {var}")
            raise ValueError(f"Failed to get summary output: {str(e)}")

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_mesh_timeseries(hdf_path: Path, mesh_name: str, var: str, truncate: bool = True) -> xr.DataArray:
        """
        Get timeseries output for a specific mesh and variable.

        Args:
            hdf_path (Path): Path to the HDF file
            mesh_name (str): Name of the mesh
            var (str): Variable to retrieve (see valid options below)
            truncate (bool): Whether to truncate trailing zeros (default True)

        Returns:
            xr.DataArray: DataArray with dimensions:
                - time: Timestamps
                - face_id/cell_id: IDs for faces/cells
                And attributes:
                - units: Variable units
                - mesh_name: Name of mesh
                - variable: Variable name

        Valid variables include:
            "Water Surface", "Face Velocity", "Cell Velocity X"...
        """
        with h5py.File(hdf_path, 'r') as hdf_file:
            return HdfResultsMesh._get_mesh_timeseries_output(hdf_file, mesh_name, var, truncate)

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_mesh_faces_timeseries(hdf_path: Path, mesh_name: str) -> xr.Dataset:
        """
        Get timeseries output for all face-based variables of a specific mesh.

        Args:
            hdf_path (Path): Path to the HDF file.
            mesh_name (str): Name of the mesh.

        Returns:
            xr.Dataset: Dataset containing the timeseries output for all face-based variables.
        """
        face_vars = ["Face Velocity", "Face Flow"]
        datasets = []
        
        for var in face_vars:
            try:
                da = HdfResultsMesh.get_mesh_timeseries(hdf_path, mesh_name, var)
                # Assign the variable name as the DataArray name
                da.name = var.lower().replace(' ', '_')
                datasets.append(da)
            except Exception as e:
                logger.warning(f"Failed to process {var} for mesh {mesh_name}: {str(e)}")
        
        if not datasets:
            logger.error(f"No valid data found for mesh {mesh_name}")
            return xr.Dataset()
        
        try:
            return xr.merge(datasets)
        except Exception as e:
            logger.error(f"Failed to merge datasets: {str(e)}")
            return xr.Dataset()

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_mesh_cells_timeseries(hdf_path: Path, mesh_names: Optional[Union[str, List[str]]] = None, var: Optional[str] = None, truncate: bool = False, ras_object: Optional[Any] = None) -> Dict[str, xr.Dataset]:
        """
        Get mesh cells timeseries output.

        Args:
            hdf_path (Path): Path to HDF file
            mesh_names (str|List[str], optional): Mesh name(s). If None, processes all meshes
            var (str, optional): Variable name. If None, retrieves all variables
            truncate (bool): Remove trailing zeros if True
            ras_object (Any, optional): RAS object if available

        Returns:
            Dict[str, xr.Dataset]: Dictionary mapping mesh names to datasets containing:
                - Time-indexed variables
                - Cell/face IDs
                - Variable metadata
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                return HdfResultsMesh._get_mesh_cells_timeseries_output(hdf_file, mesh_names, var, truncate)
        except Exception as e:
            logger.error(f"Error in get_mesh_cells_timeseries: {str(e)}")
            raise ValueError(f"Error processing timeseries output data: {e}")

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_mesh_last_iter(hdf_path: Path) -> pd.DataFrame:
        """
        Get last iteration count for each mesh cell.

        Args:
            hdf_path (Path): Path to the HDF file.

        Returns:
            pd.DataFrame: DataFrame containing last iteration counts.
        """
        return HdfResultsMesh.get_mesh_summary_output(hdf_path, "Cell Last Iteration")


    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_mesh_max_ws(hdf_path: Path, round_to: str = "100ms") -> gpd.GeoDataFrame:
        """
        Get maximum water surface elevation for each mesh cell.

        Args:
            hdf_path (Path): Path to the HDF file.
            round_to (str): Time rounding specification (default "100ms").

        Returns:
            gpd.GeoDataFrame: GeoDataFrame containing maximum water surface elevations with geometry.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                return HdfResultsMesh.get_mesh_summary_output(hdf_file, "Maximum Water Surface", round_to)
        except Exception as e:
            logger.error(f"Error in get_mesh_max_ws: {str(e)}")
            raise ValueError(f"Failed to get maximum water surface: {str(e)}")
        




    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_mesh_min_ws(hdf_path: Path, round_to: str = "100ms") -> gpd.GeoDataFrame:
        """
        Get minimum water surface elevation for each mesh cell.

        Args:
            hdf_path (Path): Path to the HDF file.
            round_to (str): Time rounding specification (default "100ms").

        Returns:
            gpd.GeoDataFrame: GeoDataFrame containing minimum water surface elevations with geometry.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                return HdfResultsMesh.get_mesh_summary_output(hdf_file, "Minimum Water Surface", round_to)
        except Exception as e:
            logger.error(f"Error in get_mesh_min_ws: {str(e)}")
            raise ValueError(f"Failed to get minimum water surface: {str(e)}")

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_mesh_max_face_v(hdf_path: Path, round_to: str = "100ms") -> pd.DataFrame:
        """
        Get maximum face velocity for each mesh face.

        Args:
            hdf_path (Path): Path to the HDF file.
            round_to (str): Time rounding specification (default "100ms").

        Returns:
            pd.DataFrame: DataFrame containing maximum face velocities.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                return HdfResultsMesh.get_mesh_summary_output(hdf_file, "Maximum Face Velocity", round_to)
        except Exception as e:
            logger.error(f"Error in get_mesh_max_face_v: {str(e)}")
            raise ValueError(f"Failed to get maximum face velocity: {str(e)}")

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_mesh_min_face_v(hdf_path: Path, round_to: str = "100ms") -> pd.DataFrame:
        """
        Get minimum face velocity for each mesh cell.

        Args:
            hdf_path (Path): Path to the HDF file.
            round_to (str): Time rounding specification (default "100ms").

        Returns:
            pd.DataFrame: DataFrame containing minimum face velocities.

        Raises:
            ValueError: If there's an error processing the minimum face velocity data.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                return HdfResultsMesh.get_mesh_summary_output(hdf_file, "Minimum Face Velocity", round_to)
        except Exception as e:
            logger.error(f"Error in get_mesh_min_face_v: {str(e)}")
            raise ValueError(f"Failed to get minimum face velocity: {str(e)}")

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_mesh_max_ws_err(hdf_path: Path, round_to: str = "100ms") -> pd.DataFrame:
        """
        Get maximum water surface error for each mesh cell.

        Args:
            hdf_path (Path): Path to the HDF file.
            round_to (str): Time rounding specification (default "100ms").

        Returns:
            pd.DataFrame: DataFrame containing maximum water surface errors.

        Raises:
            ValueError: If there's an error processing the maximum water surface error data.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                return HdfResultsMesh.get_mesh_summary_output(hdf_file, "Cell Maximum Water Surface Error", round_to)
        except Exception as e:
            logger.error(f"Error in get_mesh_max_ws_err: {str(e)}")
            raise ValueError(f"Failed to get maximum water surface error: {str(e)}")


    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_mesh_max_iter(hdf_path: Path, round_to: str = "100ms") -> gpd.GeoDataFrame:
        """
        Get maximum iteration count for each mesh cell.

        Args:
            hdf_path (Path): Path to the HDF file.
            round_to (str): Time rounding specification (default "100ms").

        Returns:
            gpd.GeoDataFrame: GeoDataFrame containing maximum iteration counts with geometry.
                Includes columns:
                - mesh_name: Name of the mesh
                - cell_id: ID of the cell
                - cell_last_iteration: Maximum number of iterations
                - cell_last_iteration_time: Time when max iterations occurred
                - geometry: Point geometry representing cell center
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                return HdfResultsMesh.get_mesh_summary_output(hdf_file, "Cell Last Iteration", round_to)
        except Exception as e:
            logger.error(f"Error in get_mesh_max_iter: {str(e)}")
            raise ValueError(f"Failed to get maximum iteration count: {str(e)}")
        
        


    @staticmethod
    def _get_mesh_timeseries_output_path(mesh_name: str, var_name: str) -> str:
        """
        Get the HDF path for mesh timeseries output.

        Args:
            mesh_name (str): Name of the mesh.
            var_name (str): Name of the variable.

        Returns:
            str: The HDF path for the specified mesh and variable.
        """
        return f"Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/2D Flow Areas/{mesh_name}/{var_name}"


    @staticmethod
    def _get_mesh_cells_timeseries_output(hdf_file: h5py.File, 
                                         mesh_names: Optional[Union[str, List[str]]] = None,
                                         var: Optional[str] = None, 
                                         truncate: bool = False) -> Dict[str, xr.Dataset]:
        """
        Get mesh cells timeseries output for specified meshes and variables.
        
        Args:
            hdf_file (h5py.File): Open HDF file object.
            mesh_names (Optional[Union[str, List[str]]]): Name(s) of the mesh(es). If None, processes all available meshes.
            var (Optional[str]): Name of the variable to retrieve. If None, retrieves all variables.
            truncate (bool): If True, truncates the output to remove trailing zeros.

        Returns:
            Dict[str, xr.Dataset]: A dictionary of xarray Datasets, one for each mesh, containing the mesh cells timeseries output.

        Raises:
            ValueError: If there's an error processing the timeseries output data.
        """
        TIME_SERIES_OUTPUT_VARS = {
            "cell": [
                "Water Surface", "Depth", "Velocity", "Velocity X", "Velocity Y",
                "Froude Number", "Courant Number", "Shear Stress", "Bed Elevation",
                "Precipitation Rate", "Infiltration Rate", "Evaporation Rate",
                "Percolation Rate", "Groundwater Elevation", "Groundwater Depth",
                "Groundwater Flow", "Groundwater Velocity", "Groundwater Velocity X",
                "Groundwater Velocity Y"
            ],
            "face": [
                "Face Velocity", "Face Flow", "Face Water Surface", "Face Courant",
                "Face Cumulative Volume", "Face Eddy Viscosity", "Face Flow Period Average",
                "Face Friction Term", "Face Pressure Gradient Term", "Face Shear Stress",
                "Face Tangential Velocity"
            ]
        }

        try:
            start_time = HdfBase.get_simulation_start_time(hdf_file)
            time_stamps = HdfBase.get_unsteady_timestamps(hdf_file)

            if mesh_names is None:
                mesh_names = HdfResultsMesh._get_available_meshes(hdf_file)
            elif isinstance(mesh_names, str):
                mesh_names = [mesh_names]

            if var:
                variables = [var]
            else:
                variables = TIME_SERIES_OUTPUT_VARS["cell"] + TIME_SERIES_OUTPUT_VARS["face"]

            datasets = {}
            for mesh_name in mesh_names:
                data_vars = {}
                for variable in variables:
                    try:
                        path = HdfResultsMesh._get_mesh_timeseries_output_path(mesh_name, variable)
                        dataset = hdf_file[path]
                        values = dataset[:]
                        units = dataset.attrs.get("Units", "").decode("utf-8")

                        if truncate:
                            last_nonzero = np.max(np.nonzero(values)[1]) + 1 if values.size > 0 else 0
                            values = values[:, :last_nonzero]
                            truncated_time_stamps = time_stamps[:last_nonzero]
                        else:
                            truncated_time_stamps = time_stamps

                        if values.shape[0] != len(truncated_time_stamps):
                            logger.warning(f"Mismatch between time steps ({len(truncated_time_stamps)}) and data shape ({values.shape}) for variable {variable}")
                            continue

                        # Determine if this is a face-based or cell-based variable
                        id_dim = "face_id" if any(face_var in variable for face_var in TIME_SERIES_OUTPUT_VARS["face"]) else "cell_id"

                        data_vars[variable] = xr.DataArray(
                            data=values,
                            dims=['time', id_dim],
                            coords={'time': truncated_time_stamps, id_dim: np.arange(values.shape[1])},
                            attrs={'units': units}
                        )
                    except KeyError:
                        logger.warning(f"Variable '{variable}' not found in the HDF file for mesh '{mesh_name}'. Skipping.")
                    except Exception as e:
                        logger.error(f"Error processing variable '{variable}' for mesh '{mesh_name}': {str(e)}")

                if data_vars:
                    datasets[mesh_name] = xr.Dataset(
                        data_vars=data_vars,
                        attrs={'mesh_name': mesh_name, 'start_time': start_time}
                    )
                else:
                    logger.warning(f"No valid data variables found for mesh '{mesh_name}'")

            return datasets
        except Exception as e:
            logger.error(f"Error in _mesh_cells_timeseries_output: {str(e)}")
            raise ValueError(f"Error processing timeseries output data: {e}")



    @staticmethod
    def _get_mesh_timeseries_output(hdf_file: h5py.File, mesh_name: str, var: str, truncate: bool = True) -> xr.DataArray:
        """
        Get timeseries output for a specific mesh and variable.

        Args:
            hdf_file (h5py.File): Open HDF file object.
            mesh_name (str): Name of the mesh.
            var (str): Variable name to retrieve.
            truncate (bool): Whether to truncate the output to remove trailing zeros (default True).

        Returns:
            xr.DataArray: DataArray containing the timeseries output.

        Raises:
            ValueError: If the specified path is not found in the HDF file or if there's an error processing the data.
        """
        try:
            path = HdfResultsMesh._get_mesh_timeseries_output_path(mesh_name, var)
            
            if path not in hdf_file:
                raise ValueError(f"Path {path} not found in HDF file")

            dataset = hdf_file[path]
            values = dataset[:]
            units = dataset.attrs.get("Units", "").decode("utf-8")
            
            # Get start time and timesteps
            start_time = HdfBase.get_simulation_start_time(hdf_file)
            # Updated to use the new function name from HdfUtils
            timesteps = HdfUtils.convert_timesteps_to_datetimes(
                np.array(hdf_file["Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Time"][:]),
                start_time
            )

            if truncate:
                non_zero = np.nonzero(values)[0]
                if len(non_zero) > 0:
                    start, end = non_zero[0], non_zero[-1] + 1
                    values = values[start:end]
                    timesteps = timesteps[start:end]

            # Determine if this is a face-based or cell-based variable
            id_dim = "face_id" if "Face" in var else "cell_id"
            dims = ["time", id_dim] if values.ndim == 2 else ["time"]
            coords = {"time": timesteps}
            if values.ndim == 2:
                coords[id_dim] = np.arange(values.shape[1])

            return xr.DataArray(
                values,
                coords=coords,
                dims=dims,
                attrs={"units": units, "mesh_name": mesh_name, "variable": var},
            )
        except Exception as e:
            logger.error(f"Error in get_mesh_timeseries_output: {str(e)}")
            raise ValueError(f"Failed to get timeseries output: {str(e)}")


    @staticmethod
    def _get_mesh_timeseries_output_values_units(hdf_file: h5py.File, mesh_name: str, var: str) -> Tuple[np.ndarray, str]:
        """
        Get the mesh timeseries output values and units for a specific variable from the HDF file.

        Args:
            hdf_file (h5py.File): Open HDF file object.
            mesh_name (str): Name of the mesh.
            var (str): Variable name to retrieve.

        Returns:
            Tuple[np.ndarray, str]: A tuple containing the output values and units.
        """
        path = HdfResultsMesh._get_mesh_timeseries_output_path(mesh_name, var)
        group = hdf_file[path]
        values = group[:]
        units = group.attrs.get("Units")
        if units is not None:
            units = units.decode("utf-8")
        return values, units


    @staticmethod
    def _get_available_meshes(hdf_file: h5py.File) -> List[str]:
        """
        Get the names of all available meshes in the HDF file.

        Args:
            hdf_file (h5py.File): Open HDF file object.

        Returns:
            List[str]: A list of mesh names.
        """
        return HdfMesh.get_mesh_area_names(hdf_file)
    
    
    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_mesh_summary_output(hdf_file: h5py.File, var: str, round_to: str = "100ms") -> gpd.GeoDataFrame:
        """
        Get the summary output data for a given variable from the HDF file.

        Parameters
        ----------
        hdf_file : h5py.File
            Open HDF file object.
        var : str
            The summary output variable to retrieve.
        round_to : str, optional
            The time unit to round the datetimes to. Default is "100ms".

        Returns
        -------
        gpd.GeoDataFrame
            A GeoDataFrame containing the summary output data with attributes as metadata.

        Raises
        ------
        ValueError
            If the HDF file cannot be opened or read, or if the requested data is not found.
        """
        try:
            dfs = []
            start_time = HdfBase.get_simulation_start_time(hdf_file)
            
            logger.info(f"Processing summary output for variable: {var}")
            d2_flow_areas = hdf_file.get("Geometry/2D Flow Areas/Attributes")
            if d2_flow_areas is None:
                return gpd.GeoDataFrame()

            for d2_flow_area in d2_flow_areas[:]:
                mesh_name = HdfUtils.convert_ras_string(d2_flow_area[0])
                cell_count = d2_flow_area[-1]
                logger.debug(f"Processing mesh: {mesh_name} with {cell_count} cells")
                group = HdfResultsMesh.get_mesh_summary_output_group(hdf_file, mesh_name, var)
                
                data = group[:]
                logger.debug(f"Data shape for {var} in {mesh_name}: {data.shape}")
                logger.debug(f"Data type: {data.dtype}")
                logger.debug(f"Attributes: {dict(group.attrs)}")
                
                if data.ndim == 2 and data.shape[0] == 2:
                    # Handle 2D datasets (e.g. Maximum Water Surface)
                    row_variables = group.attrs.get('Row Variables', [b'Value', b'Time'])
                    row_variables = [v.decode('utf-8').strip() for v in row_variables]
                    
                    df = pd.DataFrame({
                        "mesh_name": [mesh_name] * data.shape[1],
                        "cell_id" if "Face" not in var else "face_id": range(data.shape[1]),
                        f"{var.lower().replace(' ', '_')}": data[0, :],
                        f"{var.lower().replace(' ', '_')}_time": HdfUtils.convert_timesteps_to_datetimes(
                            data[1, :], start_time, time_unit="days", round_to=round_to
                        )
                    })
                    
                elif data.ndim == 1:
                    # Handle 1D datasets (e.g. Cell Last Iteration)
                    df = pd.DataFrame({
                        "mesh_name": [mesh_name] * len(data),
                        "cell_id" if "Face" not in var else "face_id": range(len(data)),
                        var.lower().replace(' ', '_'): data
                    })
                    
                else:
                    raise ValueError(f"Unexpected data shape for {var} in {mesh_name}. "
                                  f"Got shape {data.shape}")
                
                # Add geometry based on variable type
                if "Face" in var:
                    face_df = HdfMesh.get_mesh_cell_faces(hdf_file)
                    if not face_df.empty:
                        df = df.merge(face_df[['mesh_name', 'face_id', 'geometry']], 
                                    on=['mesh_name', 'face_id'], 
                                    how='left')
                else:
                    cell_df = HdfMesh.get_mesh_cell_points(hdf_file)
                    if not cell_df.empty:
                        df = df.merge(cell_df[['mesh_name', 'cell_id', 'geometry']], 
                                    on=['mesh_name', 'cell_id'], 
                                    how='left')
                
                # Add group attributes as metadata
                df.attrs['mesh_name'] = mesh_name
                for attr_name, attr_value in group.attrs.items():
                    if isinstance(attr_value, bytes):
                        attr_value = attr_value.decode('utf-8')
                    elif isinstance(attr_value, np.ndarray):
                        attr_value = attr_value.tolist()
                    df.attrs[attr_name] = attr_value
                
                dfs.append(df)
            
            if not dfs:
                return gpd.GeoDataFrame()
                
            result = pd.concat(dfs, ignore_index=True)
            
            # Convert to GeoDataFrame
            gdf = gpd.GeoDataFrame(result, geometry='geometry')
            
            # Get CRS from HdfUtils
            crs = HdfBase.get_projection(hdf_file)
            if crs:
                gdf.set_crs(crs, inplace=True)
            
            # Combine attributes from all meshes
            combined_attrs = {}
            for df in dfs:
                for key, value in df.attrs.items():
                    if key not in combined_attrs:
                        combined_attrs[key] = value
                    elif combined_attrs[key] != value:
                        combined_attrs[key] = f"Multiple values: {combined_attrs[key]}, {value}"
            
            gdf.attrs.update(combined_attrs)
            
            logger.info(f"Processed {len(gdf)} rows of summary output data")
            return gdf
        
        except Exception as e:
            logger.error(f"Error processing summary output data: {e}")
            raise ValueError(f"Error processing summary output data: {e}")

    @staticmethod
    def get_mesh_summary_output_group(hdf_file: h5py.File, mesh_name: str, var: str) -> Union[h5py.Group, h5py.Dataset]:
        """
        Return the HDF group for a given mesh and summary output variable.

        Args:
            hdf_file (h5py.File): Open HDF file object.
            mesh_name (str): Name of the mesh.
            var (str): Name of the summary output variable.

        Returns:
            Union[h5py.Group, h5py.Dataset]: The HDF group or dataset for the specified mesh and variable.

        Raises:
            ValueError: If the specified group or dataset is not found in the HDF file.
        """
        output_path = f"Results/Unsteady/Output/Output Blocks/Base Output/Summary Output/2D Flow Areas/{mesh_name}/{var}"
        output_item = hdf_file.get(output_path)
        if output_item is None:
            raise ValueError(f"Could not find HDF group or dataset at path '{output_path}'")
        return output_item


==================================================

File: c:\GH\ras-commander\ras_commander\HdfResultsPlan.py
==================================================
"""
HdfResultsPlan: A module for extracting and analyzing HEC-RAS plan HDF file results.

Attribution:
    Substantial code sourced/derived from https://github.com/fema-ffrd/rashdf
    Copyright (c) 2024 fema-ffrd, MIT license

Description:
    Provides static methods for extracting unsteady flow results, volume accounting,
    and reference data from HEC-RAS plan HDF files.

Available Functions:
    - get_unsteady_info: Extract unsteady attributes
    - get_unsteady_summary: Extract unsteady summary data
    - get_volume_accounting: Extract volume accounting data
    - get_runtime_data: Extract runtime and compute time data

Note:
    All methods are static and designed to be used without class instantiation.
"""

from typing import Dict, List, Union, Optional
from pathlib import Path
import h5py
import pandas as pd
import xarray as xr
from .Decorators import standardize_input, log_call
from .HdfUtils import HdfUtils
from .HdfResultsXsec import HdfResultsXsec
from .LoggingConfig import get_logger
import numpy as np
from datetime import datetime

logger = get_logger(__name__)


class HdfResultsPlan:
    """
    Handles extraction of results data from HEC-RAS plan HDF files.

    This class provides static methods for accessing and analyzing:
        - Unsteady flow results
        - Volume accounting data
        - Runtime statistics
        - Reference line/point time series outputs

    All methods use:
        - @standardize_input decorator for consistent file path handling
        - @log_call decorator for operation logging
        - HdfUtils class for common HDF operations

    Note:
        No instantiation required - all methods are static.
    """

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_unsteady_info(hdf_path: Path) -> pd.DataFrame:
        """
        Get unsteady attributes from a HEC-RAS HDF plan file.

        Args:
            hdf_path (Path): Path to the HEC-RAS plan HDF file.

        Returns:
            pd.DataFrame: A DataFrame containing the unsteady attributes.

        Raises:
            FileNotFoundError: If the specified HDF file is not found.
            KeyError: If the "Results/Unsteady" group is not found in the HDF file.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                if "Results/Unsteady" not in hdf_file:
                    raise KeyError("Results/Unsteady group not found in the HDF file.")
                
                # Create dictionary from attributes
                attrs_dict = dict(hdf_file["Results/Unsteady"].attrs)
                
                # Create DataFrame with a single row index
                return pd.DataFrame(attrs_dict, index=[0])
                
        except FileNotFoundError:
            raise FileNotFoundError(f"HDF file not found: {hdf_path}")
        except Exception as e:
            raise RuntimeError(f"Error reading unsteady attributes: {str(e)}")
        
    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_unsteady_summary(hdf_path: Path) -> pd.DataFrame:
        """
        Get results unsteady summary attributes from a HEC-RAS HDF plan file.

        Args:
            hdf_path (Path): Path to the HEC-RAS plan HDF file.

        Returns:
            pd.DataFrame: A DataFrame containing the results unsteady summary attributes.

        Raises:
            FileNotFoundError: If the specified HDF file is not found.
            KeyError: If the "Results/Unsteady/Summary" group is not found in the HDF file.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                if "Results/Unsteady/Summary" not in hdf_file:
                    raise KeyError("Results/Unsteady/Summary group not found in the HDF file.")
                
                # Create dictionary from attributes
                attrs_dict = dict(hdf_file["Results/Unsteady/Summary"].attrs)
                
                # Create DataFrame with a single row index
                return pd.DataFrame(attrs_dict, index=[0])
                
        except FileNotFoundError:
            raise FileNotFoundError(f"HDF file not found: {hdf_path}")
        except Exception as e:
            raise RuntimeError(f"Error reading unsteady summary attributes: {str(e)}")
        
    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_volume_accounting(hdf_path: Path) -> pd.DataFrame:
        """
        Get volume accounting attributes from a HEC-RAS HDF plan file.

        Args:
            hdf_path (Path): Path to the HEC-RAS plan HDF file.

        Returns:
            pd.DataFrame: A DataFrame containing the volume accounting attributes.

        Raises:
            FileNotFoundError: If the specified HDF file is not found.
            KeyError: If the "Results/Unsteady/Summary/Volume Accounting" group is not found in the HDF file.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                if "Results/Unsteady/Summary/Volume Accounting" not in hdf_file:
                    raise KeyError("Results/Unsteady/Summary/Volume Accounting group not found in the HDF file.")
                
                # Get attributes and create dictionary
                attrs_dict = dict(hdf_file["Results/Unsteady/Summary/Volume Accounting"].attrs)
                
                # Create DataFrame with a single row index
                return pd.DataFrame(attrs_dict, index=[0])
                
        except FileNotFoundError:
            raise FileNotFoundError(f"HDF file not found: {hdf_path}")
        except Exception as e:
            raise RuntimeError(f"Error reading volume accounting attributes: {str(e)}")

    @staticmethod
    @standardize_input(file_type='plan_hdf')
    def get_runtime_data(hdf_path: Path) -> Optional[pd.DataFrame]:
        """
        Extract detailed runtime and computational performance metrics from HDF file.

        Args:
            hdf_path (Path): Path to HEC-RAS plan HDF file

        Returns:
            Optional[pd.DataFrame]: DataFrame containing:
                - Plan identification (name, file)
                - Simulation timing (start, end, duration)
                - Process-specific compute times
                - Performance metrics (simulation speeds)
                Returns None if required data cannot be extracted

        Notes:
            - Times are reported in multiple units (ms, s, hours)
            - Compute speeds are calculated as simulation-time/compute-time ratios
            - Process times include: geometry, preprocessing, event conditions, 
            and unsteady flow computations

        Example:
            >>> runtime_stats = HdfResultsPlan.get_runtime_data('path/to/plan.hdf')
            >>> if runtime_stats is not None:
            >>>     print(f"Total compute time: {runtime_stats['Complete Process (hr)'][0]:.2f} hours")
        """
        if hdf_path is None:
            logger.error(f"Could not find HDF file for input")
            return None

        with h5py.File(hdf_path, 'r') as hdf_file:
            logger.info(f"Extracting Plan Information from: {Path(hdf_file.filename).name}")
            plan_info = hdf_file.get('/Plan Data/Plan Information')
            if plan_info is None:
                logger.warning("Group '/Plan Data/Plan Information' not found.")
                return None

            plan_name = plan_info.attrs.get('Plan Name', 'Unknown')
            plan_name = plan_name.decode('utf-8') if isinstance(plan_name, bytes) else plan_name
            logger.info(f"Plan Name: {plan_name}")

            start_time_str = plan_info.attrs.get('Simulation Start Time', 'Unknown')
            end_time_str = plan_info.attrs.get('Simulation End Time', 'Unknown')
            start_time_str = start_time_str.decode('utf-8') if isinstance(start_time_str, bytes) else start_time_str
            end_time_str = end_time_str.decode('utf-8') if isinstance(end_time_str, bytes) else end_time_str

            start_time = datetime.strptime(start_time_str, "%d%b%Y %H:%M:%S")
            end_time = datetime.strptime(end_time_str, "%d%b%Y %H:%M:%S")
            simulation_duration = end_time - start_time
            simulation_hours = simulation_duration.total_seconds() / 3600

            logger.info(f"Simulation Start Time: {start_time_str}")
            logger.info(f"Simulation End Time: {end_time_str}")
            logger.info(f"Simulation Duration (hours): {simulation_hours}")

            compute_processes = hdf_file.get('/Results/Summary/Compute Processes')
            if compute_processes is None:
                logger.warning("Dataset '/Results/Summary/Compute Processes' not found.")
                return None

            process_names = [name.decode('utf-8') for name in compute_processes['Process'][:]]
            filenames = [filename.decode('utf-8') for filename in compute_processes['Filename'][:]]
            completion_times = compute_processes['Compute Time (ms)'][:]

            compute_processes_df = pd.DataFrame({
                'Process': process_names,
                'Filename': filenames,
                'Compute Time (ms)': completion_times,
                'Compute Time (s)': completion_times / 1000,
                'Compute Time (hours)': completion_times / (1000 * 3600)
            })

            logger.debug("Compute processes DataFrame:")
            logger.debug(compute_processes_df)

            compute_processes_summary = {
                'Plan Name': [plan_name],
                'File Name': [Path(hdf_file.filename).name],
                'Simulation Start Time': [start_time_str],
                'Simulation End Time': [end_time_str],
                'Simulation Duration (s)': [simulation_duration.total_seconds()],
                'Simulation Time (hr)': [simulation_hours],
                'Completing Geometry (hr)': [compute_processes_df[compute_processes_df['Process'] == 'Completing Geometry']['Compute Time (hours)'].values[0] if 'Completing Geometry' in compute_processes_df['Process'].values else 'N/A'],
                'Preprocessing Geometry (hr)': [compute_processes_df[compute_processes_df['Process'] == 'Preprocessing Geometry']['Compute Time (hours)'].values[0] if 'Preprocessing Geometry' in compute_processes_df['Process'].values else 'N/A'],
                'Completing Event Conditions (hr)': [compute_processes_df[compute_processes_df['Process'] == 'Completing Event Conditions']['Compute Time (hours)'].values[0] if 'Completing Event Conditions' in compute_processes_df['Process'].values else 'N/A'],
                'Unsteady Flow Computations (hr)': [compute_processes_df[compute_processes_df['Process'] == 'Unsteady Flow Computations']['Compute Time (hours)'].values[0] if 'Unsteady Flow Computations' in compute_processes_df['Process'].values else 'N/A'],
                'Complete Process (hr)': [compute_processes_df['Compute Time (hours)'].sum()]
            }

            compute_processes_summary['Unsteady Flow Speed (hr/hr)'] = [simulation_hours / compute_processes_summary['Unsteady Flow Computations (hr)'][0] if compute_processes_summary['Unsteady Flow Computations (hr)'][0] != 'N/A' else 'N/A']
            compute_processes_summary['Complete Process Speed (hr/hr)'] = [simulation_hours / compute_processes_summary['Complete Process (hr)'][0] if compute_processes_summary['Complete Process (hr)'][0] != 'N/A' else 'N/A']

            compute_summary_df = pd.DataFrame(compute_processes_summary)
            logger.debug("Compute summary DataFrame:")
            logger.debug(compute_summary_df)

            return compute_summary_df

        



==================================================

File: c:\GH\ras-commander\ras_commander\HdfResultsPlot.py
==================================================
"""
Class: HdfResultsPlot

A collection of static methods for visualizing HEC-RAS results data from HDF files using matplotlib.

Public Functions:
    plot_results_mesh_variable(variable_df, variable_name, colormap='viridis', point_size=10):
        Generic plotting function for any mesh variable with customizable styling.
        
    plot_results_max_wsel(max_ws_df):
        Visualizes the maximum water surface elevation distribution across mesh cells.
        
    plot_results_max_wsel_time(max_ws_df):
        Displays the timing of maximum water surface elevation for each cell,
        including statistics about the temporal distribution.

Requirements:
    - matplotlib
    - pandas
    - geopandas (for geometry handling)

Input DataFrames must contain:
    - 'geometry' column with Point objects containing x,y coordinates
    - Variable data columns as specified in individual function docstrings
"""

import matplotlib.pyplot as plt
import pandas as pd
from typing import Dict
from .Decorators import log_call
from .HdfMesh import HdfMesh

class HdfResultsPlot:
    """
    A class containing static methods for plotting HEC-RAS results data.
    
    This class provides visualization methods for various types of HEC-RAS results,
    including maximum water surface elevations and timing information.
    """

    @staticmethod
    @log_call
    def plot_results_max_wsel(max_ws_df: pd.DataFrame) -> None:
        """
        Plots the maximum water surface elevation per cell.

        Args:
            max_ws_df (pd.DataFrame): DataFrame containing merged data with coordinates 
                                    and max water surface elevations.
        """
        # Extract x and y coordinates from the geometry column
        max_ws_df['x'] = max_ws_df['geometry'].apply(lambda geom: geom.x if geom is not None else None)
        max_ws_df['y'] = max_ws_df['geometry'].apply(lambda geom: geom.y if geom is not None else None)

        if 'x' not in max_ws_df.columns or 'y' not in max_ws_df.columns:
            print("Error: 'x' or 'y' columns not found in the merged dataframe.")
            print("Available columns:", max_ws_df.columns.tolist())
            return

        fig, ax = plt.subplots(figsize=(12, 8))
        scatter = ax.scatter(max_ws_df['x'], max_ws_df['y'], 
                           c=max_ws_df['maximum_water_surface'], 
                           cmap='viridis', s=10)

        ax.set_title('Max Water Surface per Cell')
        ax.set_xlabel('X Coordinate')
        ax.set_ylabel('Y Coordinate')
        plt.colorbar(scatter, label='Max Water Surface (ft)')

        ax.grid(True, linestyle='--', alpha=0.7)
        plt.rcParams.update({'font.size': 12})
        plt.tight_layout()
        plt.show()

    @staticmethod
    @log_call
    def plot_results_max_wsel_time(max_ws_df: pd.DataFrame) -> None:
        """
        Plots the time of the maximum water surface elevation (WSEL) per cell.

        Args:
            max_ws_df (pd.DataFrame): DataFrame containing merged data with coordinates 
                                    and max water surface timing information.
        """
        # Convert datetime strings using the renamed utility function
        max_ws_df['max_wsel_time'] = pd.to_datetime(max_ws_df['maximum_water_surface_time'])
        
        # Extract coordinates
        max_ws_df['x'] = max_ws_df['geometry'].apply(lambda geom: geom.x if geom is not None else None)
        max_ws_df['y'] = max_ws_df['geometry'].apply(lambda geom: geom.y if geom is not None else None)

        if 'x' not in max_ws_df.columns or 'y' not in max_ws_df.columns:
            raise ValueError("x and y coordinates are missing from the DataFrame. Make sure the 'geometry' column exists and contains valid coordinate data.")

        fig, ax = plt.subplots(figsize=(12, 8))

        min_time = max_ws_df['max_wsel_time'].min()
        color_values = (max_ws_df['max_wsel_time'] - min_time).dt.total_seconds() / 3600

        scatter = ax.scatter(max_ws_df['x'], max_ws_df['y'], 
                           c=color_values, cmap='viridis', s=10)

        ax.set_title('Time of Maximum Water Surface Elevation per Cell')
        ax.set_xlabel('X Coordinate')
        ax.set_ylabel('Y Coordinate')

        cbar = plt.colorbar(scatter)
        cbar.set_label('Hours since simulation start')
        cbar.set_ticks(range(0, int(color_values.max()) + 1, 6))
        cbar.set_ticklabels([f'{h}h' for h in range(0, int(color_values.max()) + 1, 6)])

        ax.grid(True, linestyle='--', alpha=0.7)
        plt.rcParams.update({'font.size': 12})
        plt.tight_layout()
        plt.show()

        # Print timing information
        print(f"\nSimulation Start Time: {min_time}")
        print(f"Time Range: {color_values.max():.1f} hours")
        print("\nTiming Statistics (hours since start):")
        print(color_values.describe()) 

    @staticmethod
    @log_call
    def plot_results_mesh_variable(variable_df: pd.DataFrame, variable_name: str, colormap: str = 'viridis', point_size: int = 10) -> None:
        """
        Plot any mesh variable with consistent styling.
        
        Args:
            variable_df (pd.DataFrame): DataFrame containing the variable data
            variable_name (str): Name of the variable (for labels)
            colormap (str): Matplotlib colormap to use. Default: 'viridis'
            point_size (int): Size of the scatter points. Default: 10

        Returns:
            None

        Raises:
            ImportError: If matplotlib is not installed
            ValueError: If required columns are missing from variable_df
        """
        try:
            import matplotlib.pyplot as plt
        except ImportError:
            logger.error("matplotlib is required for plotting. Please install it with 'pip install matplotlib'")
            raise ImportError("matplotlib is required for plotting")

        # Get cell coordinates if not in variable_df
        if 'geometry' not in variable_df.columns:
            cell_coords = HdfMesh.mesh_cell_points(plan_hdf_path)
            merged_df = pd.merge(variable_df, cell_coords, on=['mesh_name', 'cell_id'])
        else:
            merged_df = variable_df
            
        # Extract coordinates, handling None values
        merged_df = merged_df.dropna(subset=['geometry'])
        merged_df['x'] = merged_df['geometry'].apply(lambda geom: geom.x if geom is not None else None)
        merged_df['y'] = merged_df['geometry'].apply(lambda geom: geom.y if geom is not None else None)
        
        # Drop any rows with None coordinates
        merged_df = merged_df.dropna(subset=['x', 'y'])
        
        if len(merged_df) == 0:
            logger.error("No valid coordinates found for plotting")
            raise ValueError("No valid coordinates found for plotting")
            
        # Create plot
        fig, ax = plt.subplots(figsize=(12, 8))
        scatter = ax.scatter(merged_df['x'], merged_df['y'], 
                           c=merged_df[variable_name], 
                           cmap=colormap, 
                           s=point_size)
        
        # Customize plot
        ax.set_title(f'{variable_name} per Cell')
        ax.set_xlabel('X Coordinate')
        ax.set_ylabel('Y Coordinate')
        plt.colorbar(scatter, label=variable_name)
        ax.grid(True, linestyle='--', alpha=0.7)
        plt.rcParams.update({'font.size': 12})
        plt.tight_layout()
        plt.show()

==================================================

File: c:\GH\ras-commander\ras_commander\HdfResultsXsec.py
==================================================
"""
Class: HdfResultsXsec

Contains methods for extracting 1D results data from HDF files. 
This includes cross section timeseries, structures and reference line/point timeseries as these are all 1D elements.

-----

All of the methods in this class are static and are designed to be used without instantiation.

List of Functions in HdfResultsXsec:
- get_xsec_timeseries(): Extract cross-section timeseries data including water surface, velocity, and flow
- get_ref_lines_timeseries(): Get timeseries output for reference lines
- get_ref_points_timeseries(): Get timeseries output for reference points

TO BE IMPLEMENTED: 
DSS Hydrograph Extraction for 1D and 2D Structures. 

Planned functions:
- get_bridge_timeseries(): Extract timeseries data for bridge structures
- get_inline_structures_timeseries(): Extract timeseries data for inline structures

Notes:
- All functions use the get_ prefix to indicate they return data
- Results data functions use results_ prefix to indicate they handle results data
- All functions include proper error handling and logging
- Functions return xarray Datasets for efficient handling of multi-dimensional data
"""

from pathlib import Path
from typing import Union, Optional, List, Dict, Tuple

import h5py
import numpy as np
import pandas as pd
import xarray as xr

from .HdfBase import HdfBase
from .HdfUtils import HdfUtils
from .Decorators import standardize_input, log_call
from .LoggingConfig import get_logger

logger = get_logger(__name__)

class HdfResultsXsec:
    """
    A static class for extracting and processing 1D results data from HEC-RAS HDF files.

    This class provides methods to extract and process unsteady flow simulation results
    for cross-sections, reference lines, and reference points. All methods are static
    and designed to be used without class instantiation.

    The class handles:
    - Cross-section timeseries (water surface, velocity, flow)
    - Reference line timeseries
    - Reference point timeseries

    Dependencies:
        - HdfBase: Core HDF file operations
        - HdfUtils: Utility functions for HDF processing
    """


# Tested functions from AWS webinar where the code was developed
# Need to add examples


    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_xsec_timeseries(hdf_path: Path) -> xr.Dataset:
        """
        Extract Water Surface, Velocity Total, Velocity Channel, Flow Lateral, and Flow data from HEC-RAS HDF file.
        Includes Cross Section Only and Cross Section Attributes as coordinates in the xarray.Dataset.
        Also calculates maximum values for key parameters.

        Parameters:
        -----------
        hdf_path : Path
            Path to the HEC-RAS results HDF file

        Returns:
        --------
        xr.Dataset
            Xarray Dataset containing the extracted cross-section results with appropriate coordinates and attributes.
            Includes maximum values for Water Surface, Flow, Channel Velocity, Total Velocity, and Lateral Flow.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                # Define base paths
                base_output_path = "/Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Cross Sections/"
                time_stamp_path = "/Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Time Date Stamp (ms)"
                
                # Extract Cross Section Attributes
                attrs_dataset = hdf_file[f"{base_output_path}Cross Section Attributes"][:]
                rivers = [attr['River'].decode('utf-8').strip() for attr in attrs_dataset]
                reaches = [attr['Reach'].decode('utf-8').strip() for attr in attrs_dataset]
                stations = [attr['Station'].decode('utf-8').strip() for attr in attrs_dataset]
                names = [attr['Name'].decode('utf-8').strip() for attr in attrs_dataset]
                
                # Extract Cross Section Only (Unique Names)
                cross_section_only_dataset = hdf_file[f"{base_output_path}Cross Section Only"][:]
                cross_section_names = [cs.decode('utf-8').strip() for cs in cross_section_only_dataset]
                
                # Extract Time Stamps and convert to datetime
                time_stamps = hdf_file[time_stamp_path][:]
                if any(isinstance(ts, bytes) for ts in time_stamps):
                    time_stamps = [ts.decode('utf-8') for ts in time_stamps]
                # Convert RAS format timestamps to datetime
                times = pd.to_datetime(time_stamps, format='%d%b%Y %H:%M:%S:%f')
                
                # Extract Required Datasets
                water_surface = hdf_file[f"{base_output_path}Water Surface"][:]
                velocity_total = hdf_file[f"{base_output_path}Velocity Total"][:]
                velocity_channel = hdf_file[f"{base_output_path}Velocity Channel"][:]
                flow_lateral = hdf_file[f"{base_output_path}Flow Lateral"][:]
                flow = hdf_file[f"{base_output_path}Flow"][:]
                
                # Calculate maximum values along time axis
                max_water_surface = np.max(water_surface, axis=0)
                max_flow = np.max(flow, axis=0)
                max_velocity_channel = np.max(velocity_channel, axis=0)
                max_velocity_total = np.max(velocity_total, axis=0)
                max_flow_lateral = np.max(flow_lateral, axis=0)
                
                # Create Xarray Dataset
                ds = xr.Dataset(
                    {
                        'Water_Surface': (['time', 'cross_section'], water_surface),
                        'Velocity_Total': (['time', 'cross_section'], velocity_total),
                        'Velocity_Channel': (['time', 'cross_section'], velocity_channel),
                        'Flow_Lateral': (['time', 'cross_section'], flow_lateral),
                        'Flow': (['time', 'cross_section'], flow),
                    },
                    coords={
                        'time': times,
                        'cross_section': cross_section_names,
                        'River': ('cross_section', rivers),
                        'Reach': ('cross_section', reaches),
                        'Station': ('cross_section', stations),
                        'Name': ('cross_section', names),
                        'Maximum_Water_Surface': ('cross_section', max_water_surface),
                        'Maximum_Flow': ('cross_section', max_flow),
                        'Maximum_Channel_Velocity': ('cross_section', max_velocity_channel),
                        'Maximum_Velocity_Total': ('cross_section', max_velocity_total),
                        'Maximum_Flow_Lateral': ('cross_section', max_flow_lateral)
                    },
                    attrs={
                        'description': 'Cross-section results extracted from HEC-RAS HDF file',
                        'source_file': str(hdf_path)
                    }
                )
                
                return ds

        except KeyError as e:
            logger.error(f"Required dataset not found in HDF file: {e}")
            raise
        except Exception as e:
            logger.error(f"Error extracting cross section results: {e}")
            raise



    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_ref_lines_timeseries(hdf_path: Path) -> xr.Dataset:
        """
        Extract timeseries output data for reference lines from HEC-RAS HDF file.

        Parameters:
        -----------
        hdf_path : Path
            Path to the HEC-RAS results HDF file

        Returns:
        --------
        xr.Dataset
            Dataset containing flow, velocity, and water surface data for reference lines.
            Returns empty dataset if reference line data not found.

        Raises:
        -------
        FileNotFoundError
            If the specified HDF file is not found
        KeyError
            If required datasets are missing from the HDF file
        """
        return HdfResultsXsec._reference_timeseries_output(hdf_path, reftype="lines")

    @staticmethod
    @log_call
    @standardize_input(file_type='plan_hdf')
    def get_ref_points_timeseries(hdf_path: Path) -> xr.Dataset:
        """
        Extract timeseries output data for reference points from HEC-RAS HDF file.

        This method extracts flow, velocity, and water surface elevation data for all
        reference points defined in the model. Reference points are user-defined locations
        where detailed output is desired.

        Parameters:
        -----------
        hdf_path : Path
            Path to the HEC-RAS results HDF file

        Returns:
        --------
        xr.Dataset
            Dataset containing the following variables for each reference point:
            - Flow [cfs or m³/s]
            - Velocity [ft/s or m/s]
            - Water Surface [ft or m]
            
            The dataset includes coordinates:
            - time: Simulation timesteps
            - refpt_id: Unique identifier for each reference point
            - refpt_name: Name of each reference point
            - mesh_name: Associated 2D mesh area name
            
            Returns empty dataset if reference point data not found.

        Raises:
        -------
        FileNotFoundError
            If the specified HDF file is not found
        KeyError
            If required datasets are missing from the HDF file

        Examples:
        --------
        >>> ds = HdfResultsXsec.get_ref_points_timeseries("path/to/plan.hdf")
        >>> # Get water surface timeseries for first reference point
        >>> ws = ds['Water Surface'].isel(refpt_id=0)
        >>> # Get all data for a specific reference point by name
        >>> point_data = ds.sel(refpt_name='Point1')
        """
        return HdfResultsXsec._reference_timeseries_output(hdf_path, reftype="points")
    

    @staticmethod
    def _reference_timeseries_output(hdf_file: h5py.File, reftype: str = "lines") -> xr.Dataset:
        """
        Internal method to return timeseries output data for reference lines or points from a HEC-RAS HDF plan file.

        Parameters
        ----------
        hdf_file : h5py.File
            Open HDF file object.
        reftype : str, optional
            The type of reference data to retrieve. Must be either "lines" or "points".
            (default: "lines")

        Returns
        -------
        xr.Dataset
            An xarray Dataset with reference line or point timeseries data.
            Returns an empty Dataset if the reference output data is not found.

        Raises
        ------
        ValueError
            If reftype is not "lines" or "points".
        """
        if reftype == "lines":
            output_path = "Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Reference Lines"
            abbrev = "refln"
        elif reftype == "points":
            output_path = "Results/Unsteady/Output/Output Blocks/Base Output/Unsteady Time Series/Reference Points"
            abbrev = "refpt"
        else:
            raise ValueError('reftype must be either "lines" or "points".')

        try:
            reference_group = hdf_file[output_path]
        except KeyError:
            logger.error(f"Could not find HDF group at path '{output_path}'. "
                         f"The Plan HDF file may not contain reference {reftype[:-1]} output data.")
            return xr.Dataset()

        reference_names = reference_group["Name"][:]
        names = []
        mesh_areas = []
        for s in reference_names:
            name, mesh_area = s.decode("utf-8").split("|")
            names.append(name)
            mesh_areas.append(mesh_area)

        times = HdfBase.get_unsteady_timestamps(hdf_file)

        das = {}
        for var in ["Flow", "Velocity", "Water Surface"]:
            group = reference_group.get(var)
            if group is None:
                continue
            values = group[:]
            units = group.attrs["Units"].decode("utf-8")
            da = xr.DataArray(
                values,
                name=var,
                dims=["time", f"{abbrev}_id"],
                coords={
                    "time": times,
                    f"{abbrev}_id": range(values.shape[1]),
                    f"{abbrev}_name": (f"{abbrev}_id", names),
                    "mesh_name": (f"{abbrev}_id", mesh_areas),
                },
                attrs={"units": units, "hdf_path": f"{output_path}/{var}"},
            )
            das[var] = da
        return xr.Dataset(das)

==================================================

File: c:\GH\ras-commander\ras_commander\HdfStruc.py
==================================================
"""
Class: HdfStruc

Attribution: A substantial amount of code in this file is sourced or derived 
from the https://github.com/fema-ffrd/rashdf library, 
released under MIT license and Copyright (c) 2024 fema-ffrd

The file has been forked and modified for use in RAS Commander.

-----

All of the methods in this class are static and are designed to be used without instantiation.

List of Functions in HdfStruc:
- get_structures()
- get_geom_structures_attrs()
"""
from typing import Dict, Any, List, Union
from pathlib import Path
import h5py
import numpy as np
import pandas as pd
from geopandas import GeoDataFrame
from shapely.geometry import LineString, MultiLineString, Polygon, MultiPolygon, Point, GeometryCollection
from .HdfUtils import HdfUtils
from .HdfXsec import HdfXsec
from .HdfBase import HdfBase
from .Decorators import standardize_input, log_call
from .LoggingConfig import setup_logging, get_logger

logger = get_logger(__name__)

class HdfStruc:
    """
    Handles 2D structure geometry data extraction from HEC-RAS HDF files.

    This class provides static methods for extracting and analyzing structure geometries
    and their attributes from HEC-RAS geometry HDF files. All methods are designed to work
    without class instantiation.

    Notes
    -----
    - 1D Structure data should be accessed via the HdfResultsXsec class
    - All methods use @standardize_input for consistent file handling
    - All methods use @log_call for operation logging
    - Returns GeoDataFrames with both geometric and attribute data
    """
    
    @staticmethod
    @log_call
    @standardize_input(file_type='geom_hdf')
    def get_structures(hdf_path: Path, datetime_to_str: bool = False) -> GeoDataFrame:
        """
        Extracts structure data from a HEC-RAS geometry HDF5 file.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF5 file
        datetime_to_str : bool, optional
            If True, converts datetime objects to ISO format strings, by default False

        Returns
        -------
        GeoDataFrame
            Structure data with columns:
            - Structure ID: unique identifier
            - Geometry: LineString of structure centerline
            - Various attribute columns from the HDF file
            - Profile_Data: list of station/elevation dictionaries
            - Bridge coefficient attributes (if present)
            - Table info attributes (if present)

        Notes
        -----
        - Group-level attributes are stored in GeoDataFrame.attrs['group_attributes']
        - Invalid geometries are dropped with warning
        - All byte strings are decoded to UTF-8
        - CRS is preserved from the source file
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf:
                if "Geometry/Structures" not in hdf:
                    logger.info(f"No structures found in: {hdf_path}")
                    return GeoDataFrame()
                
                def get_dataset_df(path: str) -> pd.DataFrame:
                    """
                    Converts an HDF5 dataset to a pandas DataFrame.

                    Parameters
                    ----------
                    path : str
                        Dataset path within the HDF5 file

                    Returns
                    -------
                    pd.DataFrame
                        DataFrame containing the dataset values.
                        - For compound datasets, column names match field names
                        - For simple datasets, generic column names (Value_0, Value_1, etc.)
                        - Empty DataFrame if dataset not found

                    Notes
                    -----
                    Automatically decodes byte strings to UTF-8 with error handling.
                    """
                    if path not in hdf:
                        logger.warning(f"Dataset not found: {path}")
                        return pd.DataFrame()
                    
                    data = hdf[path][()]
                    
                    if data.dtype.names:
                        df = pd.DataFrame(data)
                        # Decode byte strings to UTF-8
                        for col in df.columns:
                            if df[col].dtype.kind in {'S', 'a'}:  # Byte strings
                                df[col] = df[col].str.decode('utf-8', errors='ignore')
                        return df
                    else:
                        # If no named fields, assign generic column names
                        return pd.DataFrame(data, columns=[f'Value_{i}' for i in range(data.shape[1])])

                # Extract relevant datasets
                group_attrs = HdfBase.get_attrs(hdf, "Geometry/Structures")
                struct_attrs = get_dataset_df("Geometry/Structures/Attributes")
                bridge_coef = get_dataset_df("Geometry/Structures/Bridge Coefficient Attributes")
                table_info = get_dataset_df("Geometry/Structures/Table Info")
                profile_data = get_dataset_df("Geometry/Structures/Profile Data")

                # Assign 'Structure ID' based on index (starting from 1)
                struct_attrs.reset_index(drop=True, inplace=True)
                struct_attrs['Structure ID'] = range(1, len(struct_attrs) + 1)
                logger.debug(f"Assigned Structure IDs: {struct_attrs['Structure ID'].tolist()}")

                # Check if 'Structure ID' was successfully assigned
                if 'Structure ID' not in struct_attrs.columns:
                    logger.error("'Structure ID' column could not be assigned to Structures/Attributes.")
                    return GeoDataFrame()

                # Get centerline geometry
                centerline_info = hdf["Geometry/Structures/Centerline Info"][()]
                centerline_points = hdf["Geometry/Structures/Centerline Points"][()]
                
                # Create LineString geometries for each structure
                geoms = []
                for i in range(len(centerline_info)):
                    start_idx = centerline_info[i][0]  # Point Starting Index
                    point_count = centerline_info[i][1]  # Point Count
                    points = centerline_points[start_idx:start_idx + point_count]
                    if len(points) >= 2:
                        geoms.append(LineString(points))
                    else:
                        logger.warning(f"Insufficient points for LineString in structure index {i}.")
                        geoms.append(None)

                # Create base GeoDataFrame with Structures Attributes and geometries
                struct_gdf = GeoDataFrame(
                    struct_attrs,
                    geometry=geoms,
                    crs=HdfBase.get_projection(hdf_path)
                )

                # Drop entries with invalid geometries
                initial_count = len(struct_gdf)
                struct_gdf = struct_gdf.dropna(subset=['geometry']).reset_index(drop=True)
                final_count = len(struct_gdf)
                if final_count < initial_count:
                    logger.warning(f"Dropped {initial_count - final_count} structures due to invalid geometries.")

                # Merge Bridge Coefficient Attributes on 'Structure ID'
                if not bridge_coef.empty and 'Structure ID' in bridge_coef.columns:
                    struct_gdf = struct_gdf.merge(
                        bridge_coef,
                        on='Structure ID',
                        how='left',
                        suffixes=('', '_bridge_coef')
                    )
                    logger.debug("Merged Bridge Coefficient Attributes successfully.")
                else:
                    logger.warning("Bridge Coefficient Attributes missing or 'Structure ID' not present.")

                # Merge Table Info based on the DataFrame index (one-to-one correspondence)
                if not table_info.empty:
                    if len(table_info) != len(struct_gdf):
                        logger.warning("Table Info count does not match Structures count. Skipping merge.")
                    else:
                        struct_gdf = pd.concat([struct_gdf, table_info.reset_index(drop=True)], axis=1)
                        logger.debug("Merged Table Info successfully.")
                else:
                    logger.warning("Table Info dataset is empty or missing.")

                # Process Profile Data based on Table Info
                if not profile_data.empty and not table_info.empty:
                    # Assuming 'Centerline Profile (Index)' and 'Centerline Profile (Count)' are in 'Table Info'
                    if ('Centerline Profile (Index)' in table_info.columns and
                        'Centerline Profile (Count)' in table_info.columns):
                        struct_gdf['Profile_Data'] = struct_gdf.apply(
                            lambda row: [
                                {'Station': float(profile_data.iloc[i, 0]),
                                 'Elevation': float(profile_data.iloc[i, 1])}
                                for i in range(
                                    int(row['Centerline Profile (Index)']),
                                    int(row['Centerline Profile (Index)']) + int(row['Centerline Profile (Count)'])
                                )
                            ],
                            axis=1
                        )
                        logger.debug("Processed Profile Data successfully.")
                    else:
                        logger.warning("Required columns for Profile Data not found in Table Info.")
                else:
                    logger.warning("Profile Data dataset is empty or Table Info is missing.")

                # Convert datetime columns to string if requested
                if datetime_to_str:
                    datetime_cols = struct_gdf.select_dtypes(include=['datetime64']).columns
                    for col in datetime_cols:
                        struct_gdf[col] = struct_gdf[col].dt.isoformat()
                        logger.debug(f"Converted datetime column '{col}' to string.")

                # Ensure all byte strings are decoded (if any remain)
                for col in struct_gdf.columns:
                    if struct_gdf[col].dtype == object:
                        struct_gdf[col] = struct_gdf[col].apply(
                            lambda x: x.decode('utf-8', errors='ignore') if isinstance(x, bytes) else x
                        )

                # Final GeoDataFrame
                logger.info("Successfully extracted structures GeoDataFrame.")
                
                # Add group attributes to the GeoDataFrame's attrs['group_attributes']
                struct_gdf.attrs['group_attributes'] = group_attrs
                
                logger.info("Successfully extracted structures GeoDataFrame with attributes.")
                
                return struct_gdf

        except Exception as e:
            logger.error(f"Error reading structures from {hdf_path}: {str(e)}")
            raise

    @staticmethod
    @log_call
    @standardize_input(file_type='geom_hdf')
    def get_geom_structures_attrs(hdf_path: Path) -> Dict[str, Any]:
        """
        Extracts structure attributes from a HEC-RAS geometry HDF file.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file

        Returns
        -------
        Dict[str, Any]
            Dictionary of structure attributes from the Geometry/Structures group.
            Returns empty dict if no structures are found.

        Notes
        -----
        Attributes are extracted from the HDF5 group 'Geometry/Structures'.
        All byte strings in attributes are automatically decoded to UTF-8.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                if "Geometry/Structures" not in hdf_file:
                    logger.info(f"No structures found in the geometry file: {hdf_path}")
                    return {}
                return HdfUtils.hdf5_attrs_to_dict(hdf_file["Geometry/Structures"].attrs)
        except Exception as e:
            logger.error(f"Error reading geometry structures attributes: {str(e)}")
            return {}

==================================================

File: c:\GH\ras-commander\ras_commander\HdfUtils.py
==================================================
"""
HdfUtils Class
-------------

A utility class providing static methods for working with HEC-RAS HDF files.

Attribution:
    A substantial amount of code in this file is sourced or derived from the 
    https://github.com/fema-ffrd/rashdf library, released under MIT license 
    and Copyright (c) 2024 fema-ffrd. The file has been forked and modified 
    for use in RAS Commander.

Key Features:
- HDF file data conversion and parsing
- DateTime handling for RAS-specific formats
- Spatial operations using KDTree
- HDF attribute management

Main Method Categories:

1. Data Conversion
    - convert_ras_string: Convert RAS HDF strings to Python objects
    - convert_ras_hdf_value: Convert general HDF values to Python objects
    - convert_df_datetimes_to_str: Convert DataFrame datetime columns to strings
    - convert_hdf5_attrs_to_dict: Convert HDF5 attributes to dictionary
    - convert_timesteps_to_datetimes: Convert timesteps to datetime objects

2. Spatial Operations
    - perform_kdtree_query: KDTree search between datasets
    - find_nearest_neighbors: Find nearest neighbors within dataset

3. DateTime Parsing
    - parse_ras_datetime: Parse standard RAS datetime format (ddMMMYYYY HH:MM:SS)
    - parse_ras_window_datetime: Parse simulation window datetime (ddMMMYYYY HHMM)
    - parse_duration: Parse duration strings (HH:MM:SS)
    - parse_ras_datetime_ms: Parse datetime with milliseconds
    - parse_run_time_window: Parse time window strings

Usage Notes:
- All methods are static and can be called without class instantiation
- Methods handle both raw HDF data and converted Python objects
- Includes comprehensive error handling for RAS-specific data formats
- Supports various RAS datetime formats and conversions
"""
import logging
from pathlib import Path
import h5py
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from typing import Union, Optional, Dict, List, Tuple, Any
from scipy.spatial import KDTree
import re
from shapely.geometry import LineString  # Import LineString to avoid NameError

from .Decorators import standardize_input, log_call 
from .LoggingConfig import setup_logging, get_logger

logger = get_logger(__name__)

class HdfUtils:
    """
    Utility class for working with HEC-RAS HDF files.

    This class provides general utility functions for HDF file operations,
    including attribute extraction, data conversion, and common HDF queries.
    It also includes spatial operations and helper methods for working with
    HEC-RAS specific data structures.

    Note:
    - Use this class for general HDF utility functions that are not specific to plan or geometry files.
    - All methods in this class are static and can be called without instantiating the class.
    """




# RENAME TO convert_ras_string and make public

    @staticmethod
    def convert_ras_string(value: Union[str, bytes]) -> Union[bool, datetime, List[datetime], timedelta, str]:
        """
        Convert a string value from an HEC-RAS HDF file into a Python object.

        Args:
            value (Union[str, bytes]): The value to convert.

        Returns:
            Union[bool, datetime, List[datetime], timedelta, str]: The converted value.
        """
        if isinstance(value, bytes):
            s = value.decode("utf-8")
        else:
            s = value

        if s == "True":
            return True
        elif s == "False":
            return False
        
        ras_datetime_format1_re = r"\d{2}\w{3}\d{4} \d{2}:\d{2}:\d{2}"
        ras_datetime_format2_re = r"\d{2}\w{3}\d{4} \d{2}\d{2}"
        ras_duration_format_re = r"\d{2}:\d{2}:\d{2}"

        if re.match(rf"^{ras_datetime_format1_re}", s):
            if re.match(rf"^{ras_datetime_format1_re} to {ras_datetime_format1_re}$", s):
                split = s.split(" to ")
                return [
                    HdfUtils.parse_ras_datetime(split[0]),
                    HdfUtils.parse_ras_datetime(split[1]),
                ]
            return HdfUtils.parse_ras_datetime(s)
        elif re.match(rf"^{ras_datetime_format2_re}", s):
            if re.match(rf"^{ras_datetime_format2_re} to {ras_datetime_format2_re}$", s):
                split = s.split(" to ")
                return [
                    HdfUtils.parse_ras_window_datetime(split[0]),
                    HdfUtils.parse_ras_window_datetime(split[1]),
                ]
            return HdfUtils.parse_ras_window_datetime(s)
        elif re.match(rf"^{ras_duration_format_re}$", s):
            return HdfUtils.parse_ras_duration(s)
        return s





    @staticmethod
    def convert_ras_hdf_value(value: Any) -> Union[None, bool, str, List[str], int, float, List[int], List[float]]:
        """
        Convert a value from a HEC-RAS HDF file into a Python object.

        Args:
            value (Any): The value to convert.

        Returns:
            Union[None, bool, str, List[str], int, float, List[int], List[float]]: The converted value.
        """
        if isinstance(value, np.floating) and np.isnan(value):
            return None
        elif isinstance(value, (bytes, np.bytes_)):
            return value.decode('utf-8')
        elif isinstance(value, np.integer):
            return int(value)
        elif isinstance(value, np.floating):
            return float(value)
        elif isinstance(value, (int, float)):
            return value
        elif isinstance(value, (list, tuple, np.ndarray)):
            if len(value) > 1:
                return [HdfUtils.convert_ras_hdf_value(v) for v in value]
            else:
                return HdfUtils.convert_ras_hdf_value(value[0])
        else:
            return str(value)










# RENAME TO convert_df_datetimes_to_str 

    @staticmethod
    def convert_df_datetimes_to_str(df: pd.DataFrame) -> pd.DataFrame:
        """
        Convert any datetime64 columns in a DataFrame to strings.

        Args:
            df (pd.DataFrame): The DataFrame to convert.

        Returns:
            pd.DataFrame: The DataFrame with datetime columns converted to strings.
        """
        for col in df.select_dtypes(include=['datetime64']).columns:
            df[col] = df[col].dt.strftime('%Y-%m-%d %H:%M:%S')
        return df


# KDTree Methods: 


    @staticmethod
    def perform_kdtree_query(
        reference_points: np.ndarray,
        query_points: np.ndarray,
        max_distance: float = 2.0
    ) -> np.ndarray:
        """
        Performs a KDTree query between two datasets and returns indices with distances exceeding max_distance set to -1.

        Args:
            reference_points (np.ndarray): The reference dataset for KDTree.
            query_points (np.ndarray): The query dataset to search against KDTree of reference_points.
            max_distance (float, optional): The maximum distance threshold. Indices with distances greater than this are set to -1. Defaults to 2.0.

        Returns:
            np.ndarray: Array of indices from reference_points that are nearest to each point in query_points. 
                        Indices with distances > max_distance are set to -1.

        Example:
            >>> ref_points = np.array([[0, 0], [1, 1], [2, 2]])
            >>> query_points = np.array([[0.5, 0.5], [3, 3]])
            >>> result = HdfUtils.perform_kdtree_query(ref_points, query_points)
            >>> print(result)
            array([ 0, -1])
        """
        dist, snap = KDTree(reference_points).query(query_points, distance_upper_bound=max_distance)
        snap[dist > max_distance] = -1
        return snap

    @staticmethod
    def find_nearest_neighbors(points: np.ndarray, max_distance: float = 2.0) -> np.ndarray:
        """
        Creates a self KDTree for dataset points and finds nearest neighbors excluding self, 
        with distances above max_distance set to -1.

        Args:
            points (np.ndarray): The dataset to build the KDTree from and query against itself.
            max_distance (float, optional): The maximum distance threshold. Indices with distances 
                                            greater than max_distance are set to -1. Defaults to 2.0.

        Returns:
            np.ndarray: Array of indices representing the nearest neighbor in points for each point in points. 
                        Indices with distances > max_distance or self-matches are set to -1.

        Example:
            >>> points = np.array([[0, 0], [1, 1], [2, 2], [10, 10]])
            >>> result = HdfUtils.find_nearest_neighbors(points)
            >>> print(result)
            array([1, 0, 1, -1])
        """
        dist, snap = KDTree(points).query(points, k=2, distance_upper_bound=max_distance)
        snap[dist > max_distance] = -1
        
        snp = pd.DataFrame(snap, index=np.arange(len(snap)))
        snp = snp.replace(-1, np.nan)
        snp.loc[snp[0] == snp.index, 0] = np.nan
        snp.loc[snp[1] == snp.index, 1] = np.nan
        filled = snp[0].fillna(snp[1])
        snapped = filled.fillna(-1).astype(np.int64).to_numpy()
        return snapped




# Datetime Parsing Methods: 

    @staticmethod
    @log_call
    def parse_ras_datetime_ms(datetime_str: str) -> datetime:
        """
        Public method to parse a datetime string with milliseconds from a RAS file.

        Args:
            datetime_str (str): The datetime string to parse.

        Returns:
            datetime: The parsed datetime object.
        """
        milliseconds = int(datetime_str[-3:])
        microseconds = milliseconds * 1000
        parsed_dt = HdfUtils.parse_ras_datetime(datetime_str[:-4]).replace(microsecond=microseconds)
        return parsed_dt
    
# Rename to convert_timesteps_to_datetimes and make public
    @staticmethod
    def convert_timesteps_to_datetimes(timesteps: np.ndarray, start_time: datetime, time_unit: str = "days", round_to: str = "100ms") -> pd.DatetimeIndex:
        """
        Convert RAS timesteps to datetime objects.

        Args:
            timesteps (np.ndarray): Array of timesteps.
            start_time (datetime): Start time of the simulation.
            time_unit (str): Unit of the timesteps. Default is "days".
            round_to (str): Frequency string to round the times to. Default is "100ms" (100 milliseconds).

        Returns:
            pd.DatetimeIndex: DatetimeIndex of converted and rounded datetimes.
        """
        if time_unit == "days":
            datetimes = start_time + pd.to_timedelta(timesteps, unit='D')
        elif time_unit == "hours":
            datetimes = start_time + pd.to_timedelta(timesteps, unit='H')
        else:
            raise ValueError(f"Unsupported time unit: {time_unit}")

        return pd.DatetimeIndex(datetimes).round(round_to)
    
# rename to convert_hdf5_attrs_to_dict and make public

    @staticmethod
    def convert_hdf5_attrs_to_dict(attrs: Union[h5py.AttributeManager, Dict], prefix: Optional[str] = None) -> Dict:
        """
        Convert HDF5 attributes to a Python dictionary.

        Args:
            attrs (Union[h5py.AttributeManager, Dict]): The attributes to convert.
            prefix (Optional[str]): A prefix to add to the attribute keys.

        Returns:
            Dict: A dictionary of converted attributes.
        """
        result = {}
        for key, value in attrs.items():
            if prefix:
                key = f"{prefix}/{key}"
            if isinstance(value, (np.ndarray, list)):
                result[key] = [HdfUtils.convert_ras_hdf_value(v) for v in value]
            else:
                result[key] = HdfUtils.convert_ras_hdf_value(value)
        return result
    
    

    @staticmethod
    def parse_run_time_window(window: str) -> Tuple[datetime, datetime]:
        """
        Parse a run time window string into a tuple of datetime objects.

        Args:
            window (str): The run time window string to be parsed.

        Returns:
            Tuple[datetime, datetime]: A tuple containing two datetime objects representing the start and end of the run
            time window.
        """
        split = window.split(" to ")
        begin = HdfUtils._parse_ras_datetime(split[0])
        end = HdfUtils._parse_ras_datetime(split[1])
        return begin, end

    


                
                
                
                
                
                
                
                
                
                
                
                
## MOVED FROM HdfBase to HdfUtils:
# _parse_ras_datetime   
# _parse_ras_simulation_window_datetime
# _parse_duration
# _parse_ras_datetime_ms
# _convert_ras_hdf_string

# Which were renamed and made public as: 
# parse_ras_datetime
# parse_ras_window_datetime
# parse_ras_datetime_ms
# parse_ras_duration
# parse_ras_time_window


# Rename to parse_ras_datetime and make public

    @staticmethod
    def parse_ras_datetime(datetime_str: str) -> datetime:
        """
        Parse a RAS datetime string into a datetime object.

        Args:
            datetime_str (str): The datetime string in format "ddMMMYYYY HH:MM:SS"

        Returns:
            datetime: The parsed datetime object.
        """
        return datetime.strptime(datetime_str, "%d%b%Y %H:%M:%S")

# Rename to parse_ras_window_datetime and make public

    @staticmethod
    def parse_ras_window_datetime(datetime_str: str) -> datetime:
        """
        Parse a datetime string from a RAS simulation window into a datetime object.

        Args:
            datetime_str (str): The datetime string to parse.

        Returns:
            datetime: The parsed datetime object.
        """
        return datetime.strptime(datetime_str, "%d%b%Y %H%M")


# Rename to parse_duration and make public


    @staticmethod
    def parse_duration(duration_str: str) -> timedelta:
        """
        Parse a duration string into a timedelta object.

        Args:
            duration_str (str): The duration string to parse.

        Returns:
            timedelta: The parsed duration as a timedelta object.
        """
        hours, minutes, seconds = map(int, duration_str.split(':'))
        return timedelta(hours=hours, minutes=minutes, seconds=seconds)
    
    
# Rename to parse_ras_datetime_ms and make public
    
    @staticmethod
    def parse_ras_datetime_ms(datetime_str: str) -> datetime:
        """
        Parse a datetime string with milliseconds from a RAS file.

        Args:
            datetime_str (str): The datetime string to parse.

        Returns:
            datetime: The parsed datetime object.
        """
        milliseconds = int(datetime_str[-3:])
        microseconds = milliseconds * 1000
        parsed_dt = HdfUtils.parse_ras_datetime(datetime_str[:-4]).replace(microsecond=microseconds)
        return parsed_dt
    
    
==================================================

File: c:\GH\ras-commander\ras_commander\HdfXsec.py
==================================================
"""
Class: HdfXsec

Attribution: A substantial amount of code in this file is sourced or derived 
from the https://github.com/fema-ffrd/rashdf library, 
released under MIT license and Copyright (c) 2024 fema-ffrd

The file has been forked and modified for use in RAS Commander.

-----

All of the methods in this class are static and are designed to be used without instantiation.

Available Functions:
- get_cross_sections(): Extract cross sections from HDF geometry file
- get_river_centerlines(): Extract river centerlines from HDF geometry file
- get_river_stationing(): Calculate river stationing along centerlines
- get_river_reaches(): Return the model 1D river reach lines
- get_river_edge_lines(): Return the model river edge lines
- get_river_bank_lines(): Extract river bank lines from HDF geometry file
- _interpolate_station(): Private helper method for station interpolation

All functions follow the get_ prefix convention for methods that return data.
Private helper methods use the underscore prefix convention.

Each function returns a GeoDataFrame containing geometries and associated attributes
specific to the requested feature type. All functions include proper error handling
and logging.
"""

from pathlib import Path
import h5py
import numpy as np
import pandas as pd
from geopandas import GeoDataFrame
import geopandas as gpd
from shapely.geometry import LineString, MultiLineString
from typing import List  # Import List to avoid NameError
from .Decorators import standardize_input, log_call
from .HdfBase import HdfBase
from .HdfUtils import HdfUtils
from .LoggingConfig import get_logger
import logging



logger = get_logger(__name__)

class HdfXsec:
    """
    Handles cross-section and river geometry data extraction from HEC-RAS HDF files.

    This class provides static methods to extract and process:
    - Cross-section geometries and attributes
    - River centerlines and reaches
    - River edge and bank lines
    - Station-elevation profiles

    All methods are designed to return GeoDataFrames with standardized geometries 
    and attributes following the HEC-RAS data structure.

    Note:
        Requires HEC-RAS geometry HDF files with standard structure and naming conventions.
        All methods use proper error handling and logging.
    """
    @staticmethod
    @log_call
    def get_cross_sections(hdf_path: str, datetime_to_str: bool = True, ras_object=None) -> gpd.GeoDataFrame:
        """
        Extracts cross-section geometries and attributes from a HEC-RAS geometry HDF file.

        Parameters
        ----------
        hdf_path : str
            Path to the HEC-RAS geometry HDF file
        datetime_to_str : bool, optional
            Convert datetime objects to strings, defaults to True
        ras_object : RasPrj, optional
            RAS project object for additional context, defaults to None

        Returns
        -------
        gpd.GeoDataFrame
            Cross-section data with columns:
            - geometry: LineString of cross-section path
            - station_elevation: Station-elevation profile points
            - mannings_n: Dictionary of Manning's n values and stations
            - ineffective_blocks: List of ineffective flow area blocks
            - River, Reach, RS: River system identifiers
            - Name, Description: Cross-section labels
            - Len Left/Channel/Right: Flow path lengths
            - Left/Right Bank: Bank station locations
            - Additional hydraulic parameters and attributes

        Notes
        -----
        The returned GeoDataFrame includes the coordinate system from the HDF file
        when available. All byte strings are converted to regular strings.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf:
                # Extract datasets
                poly_info = hdf['/Geometry/Cross Sections/Polyline Info'][:]
                poly_parts = hdf['/Geometry/Cross Sections/Polyline Parts'][:]
                poly_points = hdf['/Geometry/Cross Sections/Polyline Points'][:]
                
                station_info = hdf['/Geometry/Cross Sections/Station Elevation Info'][:]
                station_values = hdf['/Geometry/Cross Sections/Station Elevation Values'][:]
                
                # Get attributes for cross sections
                xs_attrs = hdf['/Geometry/Cross Sections/Attributes'][:]
                
                # Get Manning's n data
                mann_info = hdf["/Geometry/Cross Sections/Manning's n Info"][:]
                mann_values = hdf["/Geometry/Cross Sections/Manning's n Values"][:]
                
                # Get ineffective blocks data
                ineff_blocks = hdf['/Geometry/Cross Sections/Ineffective Blocks'][:]
                ineff_info = hdf['/Geometry/Cross Sections/Ineffective Info'][:]
                
                # Initialize lists to store data
                geometries = []
                station_elevations = []
                mannings_n = []
                ineffective_blocks = []
                
                # Process each cross section
                for i in range(len(poly_info)):
                    # Extract polyline info
                    point_start_idx = poly_info[i][0]
                    point_count = poly_info[i][1]
                    part_start_idx = poly_info[i][2]
                    part_count = poly_info[i][3]
                    
                    # Extract parts for current polyline
                    parts = poly_parts[part_start_idx:part_start_idx + part_count]
                    
                    # Collect all points for this cross section
                    xs_points = []
                    for part in parts:
                        part_point_start = point_start_idx + part[0]
                        part_point_count = part[1]
                        points = poly_points[part_point_start:part_point_start + part_point_count]
                        xs_points.extend(points)
                    
                    # Create LineString geometry
                    if len(xs_points) >= 2:
                        geometry = LineString(xs_points)
                        geometries.append(geometry)
                        
                        # Extract station-elevation data
                        start_idx = station_info[i][0]
                        count = station_info[i][1]
                        station_elev = station_values[start_idx:start_idx + count]
                        station_elevations.append(station_elev)
                        
                        # Extract Manning's n data
                        mann_start_idx = mann_info[i][0]
                        mann_count = mann_info[i][1]
                        mann_n_section = mann_values[mann_start_idx:mann_start_idx + mann_count]
                        mann_n_dict = {
                            'Station': mann_n_section[:, 0].tolist(),
                            'Mann n': mann_n_section[:, 1].tolist()
                        }
                        mannings_n.append(mann_n_dict)
                        
                        # Extract ineffective blocks data
                        ineff_start_idx = ineff_info[i][0]
                        ineff_count = ineff_info[i][1]
                        if ineff_count > 0:
                            blocks = ineff_blocks[ineff_start_idx:ineff_start_idx + ineff_count]
                            blocks_list = []
                            for block in blocks:
                                block_dict = {
                                    'Left Sta': float(block['Left Sta']),
                                    'Right Sta': float(block['Right Sta']), 
                                    'Elevation': float(block['Elevation']),
                                    'Permanent': bool(block['Permanent'])
                                }
                                blocks_list.append(block_dict)
                            ineffective_blocks.append(blocks_list)
                        else:
                            ineffective_blocks.append([])
                
                # Create GeoDataFrame
                if geometries:
                    # Create DataFrame from attributes
                    data = {
                        'geometry': geometries,
                        'station_elevation': station_elevations,
                        'mannings_n': mannings_n,
                        'ineffective_blocks': ineffective_blocks,
                        'River': [x['River'].decode('utf-8').strip() for x in xs_attrs],
                        'Reach': [x['Reach'].decode('utf-8').strip() for x in xs_attrs],
                        'RS': [x['RS'].decode('utf-8').strip() for x in xs_attrs],
                        'Name': [x['Name'].decode('utf-8').strip() for x in xs_attrs],
                        'Description': [x['Description'].decode('utf-8').strip() for x in xs_attrs],
                        'Len Left': xs_attrs['Len Left'],
                        'Len Channel': xs_attrs['Len Channel'],
                        'Len Right': xs_attrs['Len Right'], 
                        'Left Bank': xs_attrs['Left Bank'],
                        'Right Bank': xs_attrs['Right Bank'],
                        'Friction Mode': [x['Friction Mode'].decode('utf-8').strip() for x in xs_attrs],
                        'Contr': xs_attrs['Contr'],
                        'Expan': xs_attrs['Expan'],
                        'Left Levee Sta': xs_attrs['Left Levee Sta'],
                        'Left Levee Elev': xs_attrs['Left Levee Elev'],
                        'Right Levee Sta': xs_attrs['Right Levee Sta'],
                        'Right Levee Elev': xs_attrs['Right Levee Elev'],
                        'HP Count': xs_attrs['HP Count'],
                        'HP Start Elev': xs_attrs['HP Start Elev'],
                        'HP Vert Incr': xs_attrs['HP Vert Incr'],
                        'HP LOB Slices': xs_attrs['HP LOB Slices'],
                        'HP Chan Slices': xs_attrs['HP Chan Slices'],
                        'HP ROB Slices': xs_attrs['HP ROB Slices'],
                        'Ineff Block Mode': xs_attrs['Ineff Block Mode'],
                        'Obstr Block Mode': xs_attrs['Obstr Block Mode'],
                        'Default Centerline': xs_attrs['Default Centerline'],
                        'Last Edited': [x['Last Edited'].decode('utf-8').strip() for x in xs_attrs]
                    }
                
                    gdf = gpd.GeoDataFrame(data)
                    
                    # Set CRS if available
                    if 'Projection' in hdf['/Geometry'].attrs:
                        proj = hdf['/Geometry'].attrs['Projection']
                        if isinstance(proj, bytes):
                            proj = proj.decode('utf-8')
                        gdf.set_crs(proj, allow_override=True)
                    
                    return gdf
                
                return gpd.GeoDataFrame()
                
        except Exception as e:
            logging.error(f"Error processing cross-section data: {str(e)}")
            return gpd.GeoDataFrame()

    @staticmethod
    @log_call
    @standardize_input(file_type='geom_hdf')
    def get_river_centerlines(hdf_path: Path, datetime_to_str: bool = False) -> GeoDataFrame:
        """
        Extracts river centerline geometries and attributes from HDF geometry file.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file
        datetime_to_str : bool, optional
            Convert datetime objects to strings, defaults to False

        Returns
        -------
        GeoDataFrame
            River centerline data with columns:
            - geometry: LineString of river centerline
            - River Name, Reach Name: River system identifiers
            - US/DS Type, Name: Upstream/downstream connection info
            - length: Centerline length in project units
            Additional attributes from the HDF file are included

        Notes
        -----
        Returns an empty GeoDataFrame if no centerlines are found.
        All string attributes are stripped of whitespace.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                if "Geometry/River Centerlines" not in hdf_file:
                    logger.warning("No river centerlines found in geometry file")
                    return GeoDataFrame()

                centerline_data = hdf_file["Geometry/River Centerlines"]
                
                # Get attributes directly from HDF dataset
                attrs = centerline_data["Attributes"][()]
                
                # Create initial dictionary for DataFrame
                centerline_dict = {}
                
                # Process each attribute field
                for name in attrs.dtype.names:
                    values = attrs[name]
                    if values.dtype.kind == 'S':
                        # Convert byte strings to regular strings
                        centerline_dict[name] = [val.decode('utf-8').strip() for val in values]
                    else:
                        centerline_dict[name] = values.tolist()  # Convert numpy array to list

                # Get polylines using utility function
                geoms = HdfBase.get_polylines_from_parts(
                    hdf_path, 
                    "Geometry/River Centerlines",
                    info_name="Polyline Info",
                    parts_name="Polyline Parts",
                    points_name="Polyline Points"
                )

                # Create GeoDataFrame
                centerline_gdf = GeoDataFrame(
                    centerline_dict,
                    geometry=geoms,
                    crs=HdfBase.get_projection(hdf_path)
                )

                # Clean up string columns
                str_columns = ['River Name', 'Reach Name', 'US Type', 
                            'US Name', 'DS Type', 'DS Name']
                for col in str_columns:
                    if col in centerline_gdf.columns:
                        centerline_gdf[col] = centerline_gdf[col].str.strip()

                # Add length calculation in project units
                if not centerline_gdf.empty:
                    centerline_gdf['length'] = centerline_gdf.geometry.length
                    
                    # Convert datetime columns if requested
                    if datetime_to_str:
                        datetime_cols = centerline_gdf.select_dtypes(
                            include=['datetime64']).columns
                        for col in datetime_cols:
                            centerline_gdf[col] = centerline_gdf[col].dt.strftime(
                                '%Y-%m-%d %H:%M:%S')

                logger.info(f"Extracted {len(centerline_gdf)} river centerlines")
                return centerline_gdf

        except Exception as e:
            logger.error(f"Error reading river centerlines: {str(e)}")
            return GeoDataFrame()



    @staticmethod
    @log_call
    def get_river_stationing(centerlines_gdf: GeoDataFrame) -> GeoDataFrame:
        """
        Calculates stationing along river centerlines with interpolated points.

        Parameters
        ----------
        centerlines_gdf : GeoDataFrame
            River centerline geometries from get_river_centerlines()

        Returns
        -------
        GeoDataFrame
            Original centerlines with additional columns:
            - station_start: Starting station value (0 or length)
            - station_end: Ending station value (length or 0)
            - stations: Array of station values along centerline
            - points: Array of interpolated point geometries

        Notes
        -----
        Station direction (increasing/decreasing) is determined by
        upstream/downstream junction connections. Stations are calculated
        at 100 evenly spaced points along each centerline.
        """
        if centerlines_gdf.empty:
            logger.warning("Empty centerlines GeoDataFrame provided")
            return centerlines_gdf

        try:
            # Create copy to avoid modifying original
            result_gdf = centerlines_gdf.copy()
            
            # Initialize new columns
            result_gdf['station_start'] = 0.0
            result_gdf['station_end'] = 0.0
            result_gdf['stations'] = None
            result_gdf['points'] = None
            
            # Process each centerline
            for idx, row in result_gdf.iterrows():
                # Get line geometry
                line = row.geometry
                
                # Calculate length
                total_length = line.length
                
                # Generate points along the line
                distances = np.linspace(0, total_length, num=100)  # Adjust num for desired density
                points = [line.interpolate(distance) for distance in distances]
                
                # Store results
                result_gdf.at[idx, 'station_start'] = 0.0
                result_gdf.at[idx, 'station_end'] = total_length
                result_gdf.at[idx, 'stations'] = distances
                result_gdf.at[idx, 'points'] = points
                
                # Add stationing direction based on upstream/downstream info
                if row['upstream_type'] == 'Junction' and row['downstream_type'] != 'Junction':
                    # Reverse stationing if upstream is junction
                    result_gdf.at[idx, 'station_start'] = total_length
                    result_gdf.at[idx, 'station_end'] = 0.0
                    result_gdf.at[idx, 'stations'] = total_length - distances
            
            return result_gdf

        except Exception as e:
            logger.error(f"Error calculating river stationing: {str(e)}")
            return centerlines_gdf

    @staticmethod
    def _interpolate_station(line, distance):
        """
        Interpolates a point along a line at a given distance.

        Parameters
        ----------
        line : LineString
            Shapely LineString geometry
        distance : float
            Distance along the line to interpolate

        Returns
        -------
        tuple
            (x, y) coordinates of interpolated point
        """
        if distance <= 0:
            return line.coords[0]
        elif distance >= line.length:
            return line.coords[-1]
        return line.interpolate(distance).coords[0]



    @staticmethod
    @log_call
    @standardize_input(file_type='geom_hdf')
    def get_river_reaches(hdf_path: Path, datetime_to_str: bool = False) -> GeoDataFrame:
        """
        Return the model 1D river reach lines.

        This method extracts river reach data from the HEC-RAS geometry HDF file,
        including attributes and geometry information.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.
        datetime_to_str : bool, optional
            If True, convert datetime objects to strings. Default is False.

        Returns
        -------
        GeoDataFrame
            A GeoDataFrame containing the river reaches with their attributes and geometries.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                if "Geometry/River Centerlines" not in hdf_file:
                    return GeoDataFrame()

                river_data = hdf_file["Geometry/River Centerlines"]
                v_conv_val = np.vectorize(HdfUtils.convert_ras_string)
                river_attrs = river_data["Attributes"][()]
                river_dict = {"river_id": range(river_attrs.shape[0])}
                river_dict.update(
                    {name: v_conv_val(river_attrs[name]) for name in river_attrs.dtype.names}
                )
                
                # Get polylines for river reaches
                geoms = HdfBase.get_polylines_from_parts(
                    hdf_path, "Geometry/River Centerlines"
                )

                river_gdf = GeoDataFrame(
                    river_dict,
                    geometry=geoms,
                    crs=HdfBase.get_projection(hdf_path),
                )
                if datetime_to_str:
                    river_gdf["Last Edited"] = river_gdf["Last Edited"].apply(
                        lambda x: pd.Timestamp.isoformat(x)
                    )
                return river_gdf
        except Exception as e:
            logger.error(f"Error reading river reaches: {str(e)}")
            return GeoDataFrame()


    @staticmethod
    @log_call
    @standardize_input(file_type='geom_hdf')
    def get_river_edge_lines(hdf_path: Path, datetime_to_str: bool = False) -> GeoDataFrame:
        """
        Return the model river edge lines.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file.
        datetime_to_str : bool, optional
            If True, convert datetime objects to strings. Default is False.

        Returns
        -------
        GeoDataFrame
            A GeoDataFrame containing river edge lines with their attributes and geometries.
            Each row represents a river bank (left or right) with associated attributes.
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                if "Geometry/River Edge Lines" not in hdf_file:
                    logger.warning("No river edge lines found in geometry file")
                    return GeoDataFrame()

                edge_data = hdf_file["Geometry/River Edge Lines"]
                
                # Get attributes if they exist
                if "Attributes" in edge_data:
                    attrs = edge_data["Attributes"][()]
                    v_conv_val = np.vectorize(HdfUtils.convert_ras_string)
                    
                    # Create dictionary of attributes
                    edge_dict = {"edge_id": range(attrs.shape[0])}
                    edge_dict.update(
                        {name: v_conv_val(attrs[name]) for name in attrs.dtype.names}
                    )
                    
                    # Add bank side indicator
                    if edge_dict["edge_id"].size % 2 == 0:  # Ensure even number of edges
                        edge_dict["bank_side"] = ["Left", "Right"] * (edge_dict["edge_id"].size // 2)
                else:
                    edge_dict = {"edge_id": [], "bank_side": []}

                # Get polyline geometries
                geoms = HdfBase.get_polylines_from_parts(
                    hdf_path, 
                    "Geometry/River Edge Lines",
                    info_name="Polyline Info",
                    parts_name="Polyline Parts",
                    points_name="Polyline Points"
                )

                # Create GeoDataFrame
                edge_gdf = GeoDataFrame(
                    edge_dict,
                    geometry=geoms,
                    crs=HdfBase.get_projection(hdf_path)
                )

                # Convert datetime objects to strings if requested
                if datetime_to_str and 'Last Edited' in edge_gdf.columns:
                    edge_gdf["Last Edited"] = edge_gdf["Last Edited"].apply(
                        lambda x: pd.Timestamp.isoformat(x) if pd.notnull(x) else None
                    )

                # Add length calculation in project units
                if not edge_gdf.empty:
                    edge_gdf['length'] = edge_gdf.geometry.length

                return edge_gdf

        except Exception as e:
            logger.error(f"Error reading river edge lines: {str(e)}")
            return GeoDataFrame()

    @staticmethod
    @log_call
    @standardize_input(file_type='geom_hdf')
    def get_river_bank_lines(hdf_path: Path, datetime_to_str: bool = False) -> GeoDataFrame:
        """
        Extract river bank lines from HDF geometry file.

        Parameters
        ----------
        hdf_path : Path
            Path to the HEC-RAS geometry HDF file
        datetime_to_str : bool, optional
            Convert datetime objects to strings, by default False

        Returns
        -------
        GeoDataFrame
            GeoDataFrame containing river bank line geometries with attributes:
            - bank_id: Unique identifier for each bank line
            - bank_side: Left or Right bank indicator
            - geometry: LineString geometry of the bank
            - length: Length of the bank line in project units
        """
        try:
            with h5py.File(hdf_path, 'r') as hdf_file:
                if "Geometry/River Bank Lines" not in hdf_file:
                    logger.warning("No river bank lines found in geometry file")
                    return GeoDataFrame()

                # Get polyline geometries using existing helper method
                geoms = HdfBase.get_polylines_from_parts(
                    hdf_path, 
                    "Geometry/River Bank Lines",
                    info_name="Polyline Info",
                    parts_name="Polyline Parts",
                    points_name="Polyline Points"
                )

                # Create basic attributes
                bank_dict = {
                    "bank_id": range(len(geoms)),
                    "bank_side": ["Left", "Right"] * (len(geoms) // 2)  # Assuming pairs of left/right banks
                }

                # Create GeoDataFrame
                bank_gdf = GeoDataFrame(
                    bank_dict,
                    geometry=geoms,
                    crs=HdfBase.get_projection(hdf_path)
                )

                # Add length calculation in project units
                if not bank_gdf.empty:
                    bank_gdf['length'] = bank_gdf.geometry.length

                return bank_gdf

        except Exception as e:
            logger.error(f"Error reading river bank lines: {str(e)}")
            return GeoDataFrame()


==================================================

File: c:\GH\ras-commander\ras_commander\LoggingConfig.py
==================================================
# logging_config.py

import logging
import logging.handlers
from pathlib import Path
import functools

# Define log levels
DEBUG = logging.DEBUG
INFO = logging.INFO
WARNING = logging.WARNING
ERROR = logging.ERROR
CRITICAL = logging.CRITICAL


_logging_setup_done = False

def setup_logging(log_file=None, log_level=logging.INFO):
    """Set up logging configuration for the ras-commander library."""
    global _logging_setup_done
    if _logging_setup_done:
        return
    
    # Define log format
    log_format = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    # Configure console handler
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(log_format)

    # Set up root logger
    root_logger = logging.getLogger()
    root_logger.setLevel(log_level)
    root_logger.addHandler(console_handler)

    # Configure file handler if log_file is provided
    if log_file:
        log_dir = Path('logs')
        log_dir.mkdir(exist_ok=True)
        log_file_path = log_dir / log_file

        file_handler = logging.handlers.RotatingFileHandler(
            log_file_path, maxBytes=10*1024*1024, backupCount=5
        )
        file_handler.setFormatter(log_format)
        root_logger.addHandler(file_handler)
    
    _logging_setup_done = True

def get_logger(name: str) -> logging.Logger:
    """Get a logger instance with the specified name.
    
    Args:
        name: The name for the logger, typically __name__ or module path
        
    Returns:
        logging.Logger: Configured logger instance
    """
    logger = logging.getLogger(name)
    if not logger.handlers:  # Only add handler if none exists
        setup_logging()  # Ensure logging is configured
    return logger

def log_call(logger=None):
    """Decorator to log function calls."""
    def get_logger():
        # Check if logger is None or doesn't have a debug method
        if logger is None or not hasattr(logger, 'debug'):
            return logging.getLogger(__name__)
        return logger

    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            log = get_logger()
            log.debug(f"Calling {func.__name__}")
            result = func(*args, **kwargs)
            log.debug(f"Finished {func.__name__}")
            return result
        return wrapper
    
    # Check if we're being called as @log_call or @log_call()
    if callable(logger):
        return decorator(logger)
    return decorator

# Set up logging when this module is imported
setup_logging()
==================================================

File: c:\GH\ras-commander\ras_commander\RasCmdr.py
==================================================
"""
RasCmdr - Execution operations for running HEC-RAS simulations

This module is part of the ras-commander library and uses a centralized logging configuration.

Logging Configuration:
- The logging is set up in the logging_config.py file.
- A @log_call decorator is available to automatically log function calls.
- Log levels: DEBUG, INFO, WARNING, ERROR, CRITICAL
- Logs are written to both console and a rotating file handler.
- The default log file is 'ras_commander.log' in the 'logs' directory.
- The default log level is INFO.

To use logging in this module:
1. Use the @log_call decorator for automatic function call logging.
2. For additional logging, use logger.[level]() calls (e.g., logger.info(), logger.debug()).

Example:
    @log_call
    def my_function():
        
        logger.debug("Additional debug information")
        # Function logic here
        
        
-----

All of the methods in this class are static and are designed to be used without instantiation.

List of Functions in RasCmdr:
- compute_plan()
- compute_parallel()
- compute_test_mode()
        
        
        
"""
import os
import subprocess
import shutil
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor, as_completed
from .RasPrj import ras, RasPrj, init_ras_project, get_ras_exe
from .RasPlan import RasPlan
from .RasGeo import RasGeo
from .RasUtils import RasUtils
import logging
import time
import queue
from threading import Thread, Lock
from typing import Union, List, Optional, Dict
from pathlib import Path
import shutil
import logging
from concurrent.futures import ThreadPoolExecutor, as_completed
from threading import Lock, Thread
from itertools import cycle
from ras_commander.RasPrj import RasPrj  # Ensure RasPrj is imported
from threading import Lock, Thread, current_thread
from concurrent.futures import ThreadPoolExecutor, as_completed
from itertools import cycle
from typing import Union, List, Optional, Dict
from .LoggingConfig import get_logger
from .Decorators import log_call

logger = get_logger(__name__)

# Module code starts here

# TODO: Future Enhancements
# 1. Alternate Run Mode for compute_plan and compute_parallel:
#    - Use Powershell to execute HEC-RAS command
#    - Hide RAS window and all child windows
#    - Note: This mode may prevent execution if the plan has a popup
#    - Intended for background runs or popup-free scenarios
#    - Limit to non-commercial use
#
# 2. Implement compute_plan_remote:
#    - Execute compute_plan on a remote machine via psexec
#    - Use keyring package for secure credential storage
#    - Implement psexec command for remote HEC-RAS execution
#    - Create remote_worker objects to store machine details:
#      (machine name, username, password, ras_exe_path, local folder path, etc.)
#    - Develop RasRemote class for remote_worker management and abstractions
#    - Implement compute_plan_remote in RasCmdr as a thin wrapper around RasRemote
#      (similar to existing compute_plan functions but for remote execution)


class RasCmdr:
    
    @staticmethod
    @log_call
    def compute_plan(
        plan_number,
        dest_folder=None, 
        ras_object=None,
        clear_geompre=False,
        num_cores=None,
        overwrite_dest=False
    ):
        """
        Execute a HEC-RAS plan.

        Args:
            plan_number (str, Path): The plan number to execute (e.g., "01", "02") or the full path to the plan file.
            dest_folder (str, Path, optional): Name of the folder or full path for computation.
                If a string is provided, it will be created in the same parent directory as the project folder.
                If a full path is provided, it will be used as is.
            ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.
            clear_geompre (bool, optional): Whether to clear geometry preprocessor files. Defaults to False.
            num_cores (int, optional): Number of cores to use for the plan execution. If None, the current setting is not changed.
            overwrite_dest (bool, optional): If True, overwrite the destination folder if it exists. Defaults to False.

        Returns:
            bool: True if the execution was successful, False otherwise.

        Raises:
            ValueError: If the specified dest_folder already exists and is not empty, and overwrite_dest is False.
        """
        try:
            ras_obj = ras_object if ras_object is not None else ras
            logger.info(f"Using ras_object with project folder: {ras_obj.project_folder}")
            ras_obj.check_initialized()
            
            if dest_folder is not None:
                dest_folder = Path(ras_obj.project_folder).parent / dest_folder if isinstance(dest_folder, str) else Path(dest_folder)
                
                if dest_folder.exists():
                    if overwrite_dest:
                        shutil.rmtree(dest_folder)
                        logger.info(f"Destination folder '{dest_folder}' exists. Overwriting as per overwrite_dest=True.")
                    elif any(dest_folder.iterdir()):
                        error_msg = f"Destination folder '{dest_folder}' exists and is not empty. Use overwrite_dest=True to overwrite."
                        logger.error(error_msg)
                        raise ValueError(error_msg)
                
                dest_folder.mkdir(parents=True, exist_ok=True)
                shutil.copytree(ras_obj.project_folder, dest_folder, dirs_exist_ok=True)
                logger.info(f"Copied project folder to destination: {dest_folder}")
                
                compute_ras = RasPrj()
                compute_ras.initialize(dest_folder, ras_obj.ras_exe_path)
                compute_prj_path = compute_ras.prj_file
            else:
                compute_ras = ras_obj
                compute_prj_path = ras_obj.prj_file

            # Determine the plan path
            compute_plan_path = Path(plan_number) if isinstance(plan_number, (str, Path)) and Path(plan_number).is_file() else RasPlan.get_plan_path(plan_number, compute_ras)

            if not compute_prj_path or not compute_plan_path:
                logger.error(f"Could not find project file or plan file for plan {plan_number}")
                return False

            # Clear geometry preprocessor files if requested
            if clear_geompre:
                try:
                    RasGeo.clear_geompre_files(compute_plan_path, ras_object=compute_ras)
                    logger.info(f"Cleared geometry preprocessor files for plan: {plan_number}")
                except Exception as e:
                    logger.error(f"Error clearing geometry preprocessor files for plan {plan_number}: {str(e)}")

            # Set the number of cores if specified
            if num_cores is not None:
                try:
                    RasPlan.set_num_cores(compute_plan_path, num_cores=num_cores, ras_object=compute_ras)
                    logger.info(f"Set number of cores to {num_cores} for plan: {plan_number}")
                except Exception as e:
                    logger.error(f"Error setting number of cores for plan {plan_number}: {str(e)}")

            # Prepare the command for HEC-RAS execution
            cmd = f'"{compute_ras.ras_exe_path}" -c "{compute_prj_path}" "{compute_plan_path}"'
            logger.info("Running HEC-RAS from the Command Line:")
            logger.info(f"Running command: {cmd}")

            # Execute the HEC-RAS command
            start_time = time.time()
            try:
                subprocess.run(cmd, check=True, shell=True, capture_output=True, text=True)
                end_time = time.time()
                run_time = end_time - start_time
                logger.info(f"HEC-RAS execution completed for plan: {plan_number}")
                logger.info(f"Total run time for plan {plan_number}: {run_time:.2f} seconds")
                return True
            except subprocess.CalledProcessError as e:
                end_time = time.time()
                run_time = end_time - start_time
                logger.error(f"Error running plan: {plan_number}")
                logger.error(f"Error message: {e.output}")
                logger.info(f"Total run time for plan {plan_number}: {run_time:.2f} seconds")
                return False
        except Exception as e:
            logger.critical(f"Error in compute_plan: {str(e)}")
            return False
        finally:
            # Update the RAS object's dataframes
            if ras_obj:
                ras_obj.plan_df = ras_obj.get_plan_entries()
                ras_obj.geom_df = ras_obj.get_geom_entries()
                ras_obj.flow_df = ras_obj.get_flow_entries()
                ras_obj.unsteady_df = ras_obj.get_unsteady_entries()
    


    @staticmethod
    @log_call
    @staticmethod
    @log_call
    def compute_parallel(
        plan_number: Union[str, List[str], None] = None,
        max_workers: int = 2,
        num_cores: int = 2,
        clear_geompre: bool = False,
        ras_object: Optional['RasPrj'] = None,
        dest_folder: Union[str, Path, None] = None,
        overwrite_dest: bool = False
    ) -> Dict[str, bool]:
        """
        Compute multiple HEC-RAS plans in parallel.

        Args:
            plan_number (Union[str, List[str], None]): Plan number(s) to compute. If None, all plans are computed.
            max_workers (int): Maximum number of parallel workers.
            num_cores (int): Number of cores to use per plan computation.
            clear_geompre (bool): Whether to clear geometry preprocessor files.
            ras_object (Optional[RasPrj]): RAS project object. If None, uses global instance.
            dest_folder (Union[str, Path, None]): Destination folder for computed results.
            overwrite_dest (bool): Whether to overwrite existing destination folder.

        Returns:
            Dict[str, bool]: Dictionary of plan numbers and their execution success status.
        """
        try:
            ras_obj = ras_object or ras
            ras_obj.check_initialized()

            project_folder = Path(ras_obj.project_folder)

            if dest_folder is not None:
                dest_folder_path = Path(dest_folder)
                if dest_folder_path.exists():
                    if overwrite_dest:
                        shutil.rmtree(dest_folder_path)
                        logger.info(f"Destination folder '{dest_folder_path}' exists. Overwriting as per overwrite_dest=True.")
                    elif any(dest_folder_path.iterdir()):
                        error_msg = f"Destination folder '{dest_folder_path}' exists and is not empty. Use overwrite_dest=True to overwrite."
                        logger.error(error_msg)
                        raise ValueError(error_msg)
                dest_folder_path.mkdir(parents=True, exist_ok=True)
                shutil.copytree(project_folder, dest_folder_path, dirs_exist_ok=True)
                logger.info(f"Copied project folder to destination: {dest_folder_path}")
                project_folder = dest_folder_path

            if plan_number:
                if isinstance(plan_number, str):
                    plan_number = [plan_number]
                ras_obj.plan_df = ras_obj.plan_df[ras_obj.plan_df['plan_number'].isin(plan_number)]
                logger.info(f"Filtered plans to execute: {plan_number}")

            num_plans = len(ras_obj.plan_df)
            max_workers = min(max_workers, num_plans) if num_plans > 0 else 1
            logger.info(f"Adjusted max_workers to {max_workers} based on the number of plans: {num_plans}")

            worker_ras_objects = {}
            for worker_id in range(1, max_workers + 1):
                worker_folder = project_folder.parent / f"{project_folder.name} [Worker {worker_id}]"
                if worker_folder.exists():
                    shutil.rmtree(worker_folder)
                    logger.info(f"Removed existing worker folder: {worker_folder}")
                shutil.copytree(project_folder, worker_folder)
                logger.info(f"Created worker folder: {worker_folder}")

                try:
                    ras_instance = RasPrj()
                    worker_ras_instance = init_ras_project(
                        ras_project_folder=worker_folder,
                        ras_version=ras_obj.ras_exe_path,
                        ras_instance=ras_instance
                    )
                    worker_ras_objects[worker_id] = worker_ras_instance
                except Exception as e:
                    logger.critical(f"Failed to initialize RAS project for worker {worker_id}: {str(e)}")
                    worker_ras_objects[worker_id] = None

            worker_cycle = cycle(range(1, max_workers + 1))
            plan_assignments = [(next(worker_cycle), plan_num) for plan_num in ras_obj.plan_df['plan_number']]

            execution_results: Dict[str, bool] = {}

            with ThreadPoolExecutor(max_workers=max_workers) as executor:
                futures = [
                    executor.submit(
                        RasCmdr.compute_plan,
                        plan_num, 
                        ras_object=worker_ras_objects[worker_id], 
                        clear_geompre=clear_geompre,
                        num_cores=num_cores
                    )
                    for worker_id, plan_num in plan_assignments
                ]

                for future, (worker_id, plan_num) in zip(as_completed(futures), plan_assignments):
                    try:
                        success = future.result()
                        execution_results[plan_num] = success
                        logger.info(f"Plan {plan_num} executed in worker {worker_id}: {'Successful' if success else 'Failed'}")
                    except Exception as e:
                        execution_results[plan_num] = False
                        logger.error(f"Plan {plan_num} failed in worker {worker_id}: {str(e)}")

            final_dest_folder = dest_folder_path if dest_folder is not None else project_folder.parent / f"{project_folder.name} [Computed]"
            final_dest_folder.mkdir(parents=True, exist_ok=True)
            logger.info(f"Final destination for computed results: {final_dest_folder}")

            for worker_ras in worker_ras_objects.values():
                if worker_ras is None:
                    continue
                worker_folder = Path(worker_ras.project_folder)
                try:
                    for item in worker_folder.iterdir():
                        dest_path = final_dest_folder / item.name
                        if dest_path.exists():
                            if dest_path.is_dir():
                                shutil.rmtree(dest_path)
                                logger.debug(f"Removed existing directory at {dest_path}")
                            else:
                                dest_path.unlink()
                                logger.debug(f"Removed existing file at {dest_path}")
                        shutil.move(str(item), final_dest_folder)
                        logger.debug(f"Moved {item} to {final_dest_folder}")
                    shutil.rmtree(worker_folder)
                    logger.info(f"Removed worker folder: {worker_folder}")
                except Exception as e:
                    logger.error(f"Error moving results from {worker_folder} to {final_dest_folder}: {str(e)}")

            try:
                final_dest_folder_ras_obj = RasPrj()
                final_dest_folder_ras_obj = init_ras_project(
                    ras_project_folder=final_dest_folder, 
                    ras_version=ras_obj.ras_exe_path,
                    ras_instance=final_dest_folder_ras_obj
                )
                final_dest_folder_ras_obj.check_initialized()
            except Exception as e:
                logger.critical(f"Failed to initialize RasPrj for final destination: {str(e)}")

            logger.info("\nExecution Results:")
            for plan_num, success in execution_results.items():
                status = 'Successful' if success else 'Failed'
                logger.info(f"Plan {plan_num}: {status}")

            ras_obj = ras_object or ras
            ras_obj.plan_df = ras_obj.get_plan_entries()
            ras_obj.geom_df = ras_obj.get_geom_entries()
            ras_obj.flow_df = ras_obj.get_flow_entries()
            ras_obj.unsteady_df = ras_obj.get_unsteady_entries()

            return execution_results

        except Exception as e:
            logger.critical(f"Error in compute_parallel: {str(e)}")
            return {}

    @staticmethod
    @log_call
    def compute_test_mode(
        plan_number=None, 
        dest_folder_suffix="[Test]", 
        clear_geompre=False, 
        num_cores=None, 
        ras_object=None,
        overwrite_dest=False
    ):
        """
        Execute HEC-RAS plans in test mode. This is a re-creation of the HEC-RAS command line -test flag, 
        which does not work in recent versions of HEC-RAS.
        
        As a special-purpose function that emulates the original -test flag, it operates differently than the 
        other two compute_ functions. Per the original HEC-RAS test flag, it creates a separate test folder,
        copies the project there, and executes the specified plans in sequential order.
        
        For most purposes, just copying a the project folder, initing that new folder, then running each plan 
        with compute_plan is a simpler and more flexible approach.  This is shown in the examples provided
        in the ras-commander library.

        Args:
            plan_number (str, list[str], optional): Plan number or list of plan numbers to execute. 
                If None, all plans will be executed. Default is None.
            dest_folder_suffix (str, optional): Suffix to append to the test folder name to create dest_folder. 
                Defaults to "[Test]".
                dest_folder is always created in the project folder's parent directory.
            clear_geompre (bool, optional): Whether to clear geometry preprocessor files.
                Defaults to False.
            num_cores (int, optional): Maximum number of cores to use for each plan.
                If None, the current setting is not changed. Default is None.
            ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.
            overwrite_dest (bool, optional): If True, overwrite the destination folder if it exists. Defaults to False.

        Returns:
            Dict[str, bool]: Dictionary of plan numbers and their execution success status.

        Example:
            Run all plans: RasCommander.compute_test_mode()
            Run a specific plan: RasCommander.compute_test_mode(plan_number="01")
            Run multiple plans: RasCommander.compute_test_mode(plan_number=["01", "03", "05"])
            Run plans with a custom folder suffix: RasCommander.compute_test_mode(dest_folder_suffix="[TestRun]")
            Run plans and clear geometry preprocessor files: RasCommander.compute_test_mode(clear_geompre=True)
            Run plans with a specific number of cores: RasCommander.compute_test_mode(num_cores=4)
            
        Notes:
            - This function executes plans in a separate folder for isolated testing.
            - If plan_number is not provided, all plans in the project will be executed.
            - The function does not change the geometry preprocessor and IB tables settings.  
                - To force recomputing of geometry preprocessor and IB tables, use the clear_geompre=True option.
            - Plans are executed sequentially.
            - Because copying the project is implicit, only a dest_folder_suffix option is provided.
            - For more flexible run management, use the compute_parallel or compute_sequential functions.
        """
        try:
            ras_obj = ras_object or ras
            ras_obj.check_initialized()
            
            logger.info("Starting the compute_test_mode...")
               
            project_folder = Path(ras_obj.project_folder)

            if not project_folder.exists():
                logger.error(f"Project folder '{project_folder}' does not exist.")
                return {}

            compute_folder = project_folder.parent / f"{project_folder.name} {dest_folder_suffix}"
            logger.info(f"Creating the test folder: {compute_folder}...")

            if compute_folder.exists():
                if overwrite_dest:
                    shutil.rmtree(compute_folder)
                    logger.info(f"Compute folder '{compute_folder}' exists. Overwriting as per overwrite_dest=True.")
                elif any(compute_folder.iterdir()):
                    error_msg = (
                        f"Compute folder '{compute_folder}' exists and is not empty. "
                        "Use overwrite_dest=True to overwrite."
                    )
                    logger.error(error_msg)
                    raise ValueError(error_msg)

            try:
                shutil.copytree(project_folder, compute_folder)
                logger.info(f"Copied project folder to compute folder: {compute_folder}")
            except Exception as e:
                logger.critical(f"Error occurred while copying project folder: {str(e)}")
                return {}

            try:
                compute_ras = RasPrj()
                compute_ras.initialize(compute_folder, ras_obj.ras_exe_path)
                compute_prj_path = compute_ras.prj_file
                logger.info(f"Initialized RAS project in compute folder: {compute_prj_path}")
            except Exception as e:
                logger.critical(f"Error initializing RAS project in compute folder: {str(e)}")
                return {}

            if not compute_prj_path:
                logger.error("Project file not found.")
                return {}

            logger.info("Getting plan entries...")
            try:
                ras_compute_plan_entries = compute_ras.plan_df
                logger.info("Retrieved plan entries successfully.")
            except Exception as e:
                logger.critical(f"Error retrieving plan entries: {str(e)}")
                return {}

            if plan_number:
                if isinstance(plan_number, str):
                    plan_number = [plan_number]
                ras_compute_plan_entries = ras_compute_plan_entries[
                    ras_compute_plan_entries['plan_number'].isin(plan_number)
                ]
                logger.info(f"Filtered plans to execute: {plan_number}")

            execution_results = {}
            logger.info("Running selected plans sequentially...")
            for _, plan in ras_compute_plan_entries.iterrows():
                plan_number = plan["plan_number"]
                start_time = time.time()
                try:
                    success = RasCmdr.compute_plan(
                        plan_number,
                        ras_object=compute_ras,
                        clear_geompre=clear_geompre,
                        num_cores=num_cores
                    )
                    execution_results[plan_number] = success
                    if success:
                        logger.info(f"Successfully computed plan {plan_number}")
                    else:
                        logger.error(f"Failed to compute plan {plan_number}")
                except Exception as e:
                    execution_results[plan_number] = False
                    logger.error(f"Error computing plan {plan_number}: {str(e)}")
                finally:
                    end_time = time.time()
                    run_time = end_time - start_time
                    logger.info(f"Total run time for plan {plan_number}: {run_time:.2f} seconds")

            logger.info("All selected plans have been executed.")
            logger.info("compute_test_mode completed.")

            logger.info("\nExecution Results:")
            for plan_num, success in execution_results.items():
                status = 'Successful' if success else 'Failed'
                logger.info(f"Plan {plan_num}: {status}")

            ras_obj.plan_df = ras_obj.get_plan_entries()
            ras_obj.geom_df = ras_obj.get_geom_entries()
            ras_obj.flow_df = ras_obj.get_flow_entries()
            ras_obj.unsteady_df = ras_obj.get_unsteady_entries()

            return execution_results

        except Exception as e:
            logger.critical(f"Error in compute_test_mode: {str(e)}")
            return {}
==================================================

File: c:\GH\ras-commander\ras_commander\RasExamples.py
==================================================
"""
RasExamples - Manage and load HEC-RAS example projects for testing and development

This module is part of the ras-commander library and uses a centralized logging configuration.

Logging Configuration:
- The logging is set up in the logging_config.py file.
- A @log_call decorator is available to automatically log function calls.
- Log levels: DEBUG, INFO, WARNING, ERROR, CRITICAL
- Logs are written to both console and a rotating file handler.
- The default log file is 'ras_commander.log' in the 'logs' directory.
- The default log level is INFO.

To use logging in this module:
1. Use the @log_call decorator for automatic function call logging.
2. For additional logging, use logger.[level]() calls (e.g., logger.info(), logger.debug()).
3. Obtain the logger using: logger = logging.getLogger(__name__)

Example:
    @log_call
    def my_function():
        logger = logging.getLogger(__name__)
        logger.debug("Additional debug information")
        # Function logic here
        
        
-----

All of the methods in this class are static and are designed to be used without instantiation.

List of Functions in RasExamples:   
- get_example_projects()
- list_categories()
- list_projects()
- extract_project()
- is_project_extracted()
- clean_projects_directory()
        
"""
import os
import requests
import zipfile
import pandas as pd
from pathlib import Path
import shutil
from typing import Union, List
import csv
from datetime import datetime
import logging
import re
from tqdm import tqdm
from ras_commander import get_logger
from ras_commander.LoggingConfig import log_call

logger = get_logger(__name__)

class RasExamples:
    """
    A class for quickly loading HEC-RAS example projects for testing and development of ras-commander.

    This class provides functionality to download, extract, and manage HEC-RAS example projects.
    It supports both default HEC-RAS example projects and custom projects from user-provided URLs.
    Additionally, it includes functionality to download FEMA's Base Level Engineering (BLE) models
    from CSV files provided by the FEMA Estimated Base Flood Elevation (BFE) Viewer.
    """
    @log_call
    def __init__(self):
        """
        Initialize the RasExamples class.
        """
        self.base_url = 'https://github.com/HydrologicEngineeringCenter/hec-downloads/releases/download/'
        self.valid_versions = [
            "6.6", "6.5", "6.4.1", "6.3.1", "6.3", "6.2", "6.1", "6.0",
            "5.0.7", "5.0.6", "5.0.5", "5.0.4", "5.0.3", "5.0.1", "5.0",
            "4.1", "4.0", "3.1.3", "3.1.2", "3.1.1", "3.0", "2.2"
        ]
        self.base_dir = Path.cwd()
        self.examples_dir = self.base_dir
        self.projects_dir = self.examples_dir / 'example_projects'
        self.zip_file_path = None
        self.folder_df = None
        self.csv_file_path = self.examples_dir / 'example_projects.csv'

        self.projects_dir.mkdir(parents=True, exist_ok=True)
        logger.info(f"Example projects folder: {self.projects_dir}")
        self._load_project_data()

    @log_call
    def get_example_projects(self, version_number='6.6'):
        """
        Download and extract HEC-RAS example projects for a specified version.
        """
        logger.info(f"Getting example projects for version {version_number}")
        if version_number not in self.valid_versions:
            error_msg = f"Invalid version number. Valid versions are: {', '.join(self.valid_versions)}"
            logger.error(error_msg)
            raise ValueError(error_msg)

        zip_url = f"{self.base_url}1.0.33/Example_Projects_{version_number.replace('.', '_')}.zip"
        
        self.examples_dir.mkdir(parents=True, exist_ok=True)
        
        self.zip_file_path = self.examples_dir / f"Example_Projects_{version_number.replace('.', '_')}.zip"

        if not self.zip_file_path.exists():
            logger.info(f"Downloading HEC-RAS Example Projects from {zip_url}. \nThe file is over 400 MB, so it may take a few minutes to download....")
            try:
                response = requests.get(zip_url, stream=True)
                response.raise_for_status()
                with open(self.zip_file_path, 'wb') as file:
                    shutil.copyfileobj(response.raw, file)
                logger.info(f"Downloaded to {self.zip_file_path}")
            except requests.exceptions.RequestException as e:
                logger.error(f"Failed to download the zip file: {e}")
                raise
        else:
            logger.info("HEC-RAS Example Projects zip file already exists. Skipping download.")

        self._load_project_data()
        return self.projects_dir


    @log_call
    def _load_project_data(self):
        """
        Load project data from CSV if up-to-date, otherwise extract from zip.
        """
        self._find_zip_file()
        
        if not self.zip_file_path:
            logger.info("No example projects zip file found. Downloading...")
            self.get_example_projects()
        
        try:
            zip_modified_time = os.path.getmtime(self.zip_file_path)
        except FileNotFoundError:
            logger.error(f"Zip file not found at {self.zip_file_path}.")
            return
        
        if self.csv_file_path.exists():
            csv_modified_time = os.path.getmtime(self.csv_file_path)
            
            if csv_modified_time >= zip_modified_time:
                logger.info("Loading project data from CSV...")
                try:
                    self.folder_df = pd.read_csv(self.csv_file_path)
                    logger.info(f"Loaded {len(self.folder_df)} projects from CSV. Use list_categories() and list_projects() to explore them.")
                except Exception as e:
                    logger.error(f"Failed to read CSV file: {e}")
                    self.folder_df = None
                return

        logger.info("Extracting folder structure from zip file...")
        self._extract_folder_structure()
        self._save_to_csv()

    @log_call
    def _find_zip_file(self):
        """Locate the example projects zip file in the examples directory."""
        for version in self.valid_versions:
            potential_zip = self.examples_dir / f"Example_Projects_{version.replace('.', '_')}.zip"
            if potential_zip.exists():
                self.zip_file_path = potential_zip
                logger.info(f"Found zip file: {self.zip_file_path}")
                break
        else:
            logger.warning("No existing example projects zip file found.")

    @log_call
    def _extract_folder_structure(self):
        """
        Extract folder structure from the zip file.

        Populates folder_df with category and project information.
        """
        folder_data = []
        try:
            with zipfile.ZipFile(self.zip_file_path, 'r') as zip_ref:
                for file in zip_ref.namelist():
                    parts = Path(file).parts
                    if len(parts) > 1:
                        folder_data.append({
                            'Category': parts[0],
                            'Project': parts[1]
                        })
        
            self.folder_df = pd.DataFrame(folder_data).drop_duplicates()
            logger.info(f"Extracted {len(self.folder_df)} projects.")
            logger.debug(f"folder_df:\n{self.folder_df}")
        except zipfile.BadZipFile:
            logger.error(f"The file {self.zip_file_path} is not a valid zip file.")
            self.folder_df = pd.DataFrame(columns=['Category', 'Project'])
        except Exception as e:
            logger.error(f"An error occurred while extracting the folder structure: {str(e)}")
            self.folder_df = pd.DataFrame(columns=['Category', 'Project'])

    @log_call
    def _save_to_csv(self):
        """Save the extracted folder structure to CSV file."""
        if self.folder_df is not None and not self.folder_df.empty:
            try:
                self.folder_df.to_csv(self.csv_file_path, index=False)
                logger.info(f"Saved project data to {self.csv_file_path}")
            except Exception as e:
                logger.error(f"Failed to save project data to CSV: {e}")
        else:
            logger.warning("No folder data to save to CSV.")


    @log_call
    def list_categories(self):
        """
        List all categories of example projects.
        """
        if self.folder_df is None or 'Category' not in self.folder_df.columns:
            logger.warning("No categories available. Make sure the zip file is properly loaded.")
            return []
        categories = self.folder_df['Category'].unique()
        logger.info(f"Available categories: {', '.join(categories)}")
        return categories.tolist()

    @log_call
    def list_projects(self, category=None):
        """
        List all projects or projects in a specific category.
        """
        if self.folder_df is None:
            logger.warning("No projects available. Make sure the zip file is properly loaded.")
            return []
        if category:
            projects = self.folder_df[self.folder_df['Category'] == category]['Project'].unique()
            logger.info(f"Projects in category '{category}': {', '.join(projects)}")
        else:
            projects = self.folder_df['Project'].unique()
            logger.info(f"All available projects: {', '.join(projects)}")
        return projects.tolist()

    @log_call
    def extract_project(self, project_names: Union[str, List[str]]):
        """
        Extract one or more specific HEC-RAS projects from the zip file.
        """
        if isinstance(project_names, str):
            project_names = [project_names]

        extracted_paths = []

        for project_name in project_names:
            logger.info("----- RasExamples Extracting Project -----")
            logger.info(f"Extracting project '{project_name}'")
            project_path = self.projects_dir

            if (project_path / project_name).exists():
                logger.info(f"Project '{project_name}' already exists. Deleting existing folder...")
                try:
                    shutil.rmtree(project_path / project_name)
                    logger.info(f"Existing folder for project '{project_name}' has been deleted.")
                except Exception as e:
                    logger.error(f"Failed to delete existing project folder '{project_name}': {e}")
                    continue

            if self.folder_df is None or self.folder_df.empty:
                error_msg = "No project information available. Make sure the zip file is properly loaded."
                logger.error(error_msg)
                raise ValueError(error_msg)

            project_info = self.folder_df[self.folder_df['Project'] == project_name]
            if project_info.empty:
                error_msg = f"Project '{project_name}' not found in the zip file."
                logger.error(error_msg)
                raise ValueError(error_msg)

            category = project_info['Category'].iloc[0]
            
            # Ensure the project directory exists
            project_path.mkdir(parents=True, exist_ok=True)

            try:
                with zipfile.ZipFile(self.zip_file_path, 'r') as zip_ref:
                    for file in zip_ref.namelist():
                        parts = Path(file).parts
                        if len(parts) > 1 and parts[1] == project_name:
                            # Remove the first level (category)
                            relative_path = Path(*parts[1:])
                            extract_path = project_path / relative_path
                            if file.endswith('/'):
                                extract_path.mkdir(parents=True, exist_ok=True)
                            else:
                                extract_path.parent.mkdir(parents=True, exist_ok=True)
                                with zip_ref.open(file) as source, open(extract_path, "wb") as target:
                                    shutil.copyfileobj(source, target)

                logger.info(f"Successfully extracted project '{project_name}' to {project_path / project_name}")
                extracted_paths.append(project_path / project_name)
            except zipfile.BadZipFile:
                logger.error(f"Error: The file {self.zip_file_path} is not a valid zip file.")
            except FileNotFoundError:
                logger.error(f"Error: The file {self.zip_file_path} was not found.")
            except Exception as e:
                logger.error(f"An unexpected error occurred while extracting the project: {str(e)}")
            logger.info("----- RasExamples Extraction Complete -----")
        return extracted_paths

    @log_call
    def is_project_extracted(self, project_name):
        """
        Check if a specific project is already extracted.
        """
        project_path = self.projects_dir / project_name
        is_extracted = project_path.exists()
        logger.info(f"Project '{project_name}' extracted: {is_extracted}")
        return is_extracted

    @log_call
    def clean_projects_directory(self):
        """Remove all extracted projects from the example_projects directory."""
        logger.info(f"Cleaning projects directory: {self.projects_dir}")
        if self.projects_dir.exists():
            try:
                shutil.rmtree(self.projects_dir)
                logger.info("All projects have been removed.")
            except Exception as e:
                logger.error(f"Failed to remove projects directory: {e}")
        else:
            logger.warning("Projects directory does not exist.")
        self.projects_dir.mkdir(parents=True, exist_ok=True)
        logger.info("Projects directory cleaned and recreated.")


    @log_call
    def download_fema_ble_model(self, huc8, output_dir=None):
        """
        Download a FEMA Base Level Engineering (BLE) model for a given HUC8.

        Args:
            huc8 (str): The 8-digit Hydrologic Unit Code (HUC) for the desired watershed.
            output_dir (str, optional): The directory to save the downloaded files. If None, uses the current working directory.

        Returns:
            str: The path to the downloaded and extracted model directory.

        Note:
            This method downloads the BLE model from the FEMA website and extracts it to the specified directory.
        """
        # Method implementation...

    @log_call
    def _make_safe_folder_name(self, name: str) -> str:
        """
        Convert a string to a safe folder name by replacing unsafe characters with underscores.
        """
        safe_name = re.sub(r'[^a-zA-Z0-9_\-]', '_', name)
        logger.debug(f"Converted '{name}' to safe folder name '{safe_name}'")
        return safe_name

    @log_call
    def _download_file_with_progress(self, url: str, dest_folder: Path, file_size: int) -> Path:
        """
        Download a file from a URL to a specified destination folder with progress bar.
        """
        local_filename = dest_folder / url.split('/')[-1]
        try:
            with requests.get(url, stream=True) as r:
                r.raise_for_status()
                with open(local_filename, 'wb') as f, tqdm(
                    desc=local_filename.name,
                    total=file_size,
                    unit='iB',
                    unit_scale=True,
                    unit_divisor=1024,
                ) as progress_bar:
                    for chunk in r.iter_content(chunk_size=8192):
                        size = f.write(chunk)
                        progress_bar.update(size)
            logger.info(f"Successfully downloaded {url} to {local_filename}")
            return local_filename
        except requests.exceptions.RequestException as e:
            logger.error(f"Request failed for {url}: {e}")
            raise
        except Exception as e:
            logger.error(f"Failed to write file {local_filename}: {e}")
            raise

    @log_call
    def _convert_size_to_bytes(self, size_str: str) -> int:
        """
        Convert a human-readable file size to bytes.
        """
        units = {'B': 1, 'KB': 1024, 'MB': 1024**2, 'GB': 1024**3, 'TB': 1024**4}
        size_str = size_str.upper().replace(' ', '')
        if not re.match(r'^\d+(\.\d+)?[BKMGT]B?$', size_str):
            raise ValueError(f"Invalid size string: {size_str}")
        
        number, unit = float(re.findall(r'[\d\.]+', size_str)[0]), re.findall(r'[BKMGT]B?', size_str)[0]
        return int(number * units[unit])
==================================================

File: c:\GH\ras-commander\ras_commander\RasGeo.py
==================================================
"""
RasGeo - Operations for handling geometry files in HEC-RAS projects

This module is part of the ras-commander library and uses a centralized logging configuration.

Logging Configuration:
- The logging is set up in the logging_config.py file.
- A @log_call decorator is available to automatically log function calls.
- Log levels: DEBUG, INFO, WARNING, ERROR, CRITICAL
- Logs are written to both console and a rotating file handler.
- The default log file is 'ras_commander.log' in the 'logs' directory.
- The default log level is INFO.

To use logging in this module:
1. Use the @log_call decorator for automatic function call logging.
2. For additional logging, use logger.[level]() calls (e.g., logger.info(), logger.debug()).
3. Obtain the logger using: logger = logging.getLogger(__name__)

Example:
    @log_call
    def my_function():
        logger = logging.getLogger(__name__)
        logger.debug("Additional debug information")
        # Function logic here
        
        
        
-----

All of the methods in this class are static and are designed to be used without instantiation.

List of Functions in RasGeo:
- clear_geompre_files()
        
        
"""
import os
from pathlib import Path
from typing import List, Union
from .RasPlan import RasPlan
from .RasPrj import ras
from .LoggingConfig import get_logger
from .Decorators import log_call

logger = get_logger(__name__)

class RasGeo:
    """
    A class for operations on HEC-RAS geometry files.
    """
    
    @staticmethod
    @log_call
    def clear_geompre_files(
        plan_files: Union[str, Path, List[Union[str, Path]]] = None,
        ras_object = None
    ) -> None:
        """
        Clear HEC-RAS geometry preprocessor files for specified plan files or all plan files in the project directory.
        
        Limitations/Future Work:
        - This function only deletes the geometry preprocessor file.
        - It does not clear the IB tables.
        - It also does not clear geometry preprocessor tables from the geometry HDF.
        - All of these features will need to be added to reliably remove geometry preprocessor files for 1D and 2D projects.
        
        Parameters:
            plan_files (Union[str, Path, List[Union[str, Path]]], optional): 
                Full path(s) to the HEC-RAS plan file(s) (.p*).
                If None, clears all plan files in the project directory.
            ras_object: An optional RAS object instance.
        
        Returns:
            None
        
        Examples:
            # Clear all geometry preprocessor files in the project directory
            RasGeo.clear_geompre_files()
            
            # Clear a single plan file
            RasGeo.clear_geompre_files(r'path/to/plan.p01')
            
            # Clear multiple plan files
            RasGeo.clear_geompre_files([r'path/to/plan1.p01', r'path/to/plan2.p02'])

        Note:
            This function updates the ras object's geometry dataframe after clearing the preprocessor files.
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        def clear_single_file(plan_file: Union[str, Path], ras_obj) -> None:
            plan_path = Path(plan_file)
            geom_preprocessor_suffix = '.c' + ''.join(plan_path.suffixes[1:]) if plan_path.suffixes else '.c'
            geom_preprocessor_file = plan_path.with_suffix(geom_preprocessor_suffix)
            if geom_preprocessor_file.exists():
                try:
                    geom_preprocessor_file.unlink()
                    logger.info(f"Deleted geometry preprocessor file: {geom_preprocessor_file}")
                except PermissionError:
                    logger.error(f"Permission denied: Unable to delete geometry preprocessor file: {geom_preprocessor_file}")
                    raise PermissionError(f"Unable to delete geometry preprocessor file: {geom_preprocessor_file}. Permission denied.")
                except OSError as e:
                    logger.error(f"Error deleting geometry preprocessor file: {geom_preprocessor_file}. {str(e)}")
                    raise OSError(f"Error deleting geometry preprocessor file: {geom_preprocessor_file}. {str(e)}")
            else:
                logger.warning(f"No geometry preprocessor file found for: {plan_file}")
        
        if plan_files is None:
            logger.info("Clearing all geometry preprocessor files in the project directory.")
            plan_files_to_clear = list(ras_obj.project_folder.glob(r'*.p*'))
        elif isinstance(plan_files, (str, Path)):
            plan_files_to_clear = [plan_files]
            logger.info(f"Clearing geometry preprocessor file for single plan: {plan_files}")
        elif isinstance(plan_files, list):
            plan_files_to_clear = plan_files
            logger.info(f"Clearing geometry preprocessor files for multiple plans: {plan_files}")
        else:
            logger.error("Invalid input type for plan_files.")
            raise ValueError("Invalid input. Please provide a string, Path, list of paths, or None.")
        
        for plan_file in plan_files_to_clear:
            clear_single_file(plan_file, ras_obj)
        
        try:
            ras_obj.geom_df = ras_obj.get_geom_entries()
            logger.info("Geometry dataframe updated successfully.")
        except Exception as e:
            logger.error(f"Failed to update geometry dataframe: {str(e)}")
            raise









==================================================

File: c:\GH\ras-commander\ras_commander\RasGpt.py
==================================================
import os
from pathlib import Path
from typing import Optional
from ras_commander import get_logger, log_call

logger = get_logger(__name__)

class RasGpt:
    """
    A class containing helper functions for the RAS Commander GPT.
    """
    
# to be implemented later
# 
# This class will contain  methods to help LLM's extract useful information from HEC-RAS models in a structured format with token budget etc. 
# Templates will be used to help with this, based on the example projects (1D Steady, 1D Usteady, 1D Sediment Transport, 1D Water Quality, 2D Unsteady, 2D Steady, 2D Sediment Transport, 2D Water Quality, 2D Geospatial, 3D Unsteady, 3D Steady, 3D Sediment Transport, 3D Water Quality, 3D Geospatial).
# These will simply filter the data to only include the relevant information for the area of focus. 

#
# IDEAS
# 1. Package up a standard set of information for LLM analysis
#       - General project information
#       - Cross section information (for specific cross sections)
#       - Structure information (for specific structures)
#       - Include time series results and relevant HEC Guidance for LLM to reference

# 2. Use Library Assistant to call LLM 

==================================================

File: c:\GH\ras-commander\ras_commander\RasMapper.py
==================================================
"""
Class: RasMapper

List of Functions:
    get_raster_map(hdf_path: Path) 
    clip_raster_with_boundary(raster_path: Path, boundary_path: Path) 
    calculate_zonal_stats(boundary_path: Path, raster_data, transform, nodata) 

"""



from pathlib import Path
import pandas as pd
import geopandas as gpd
import rasterio
from rasterio.mask import mask
import h5py
from .Decorators import log_call, standardize_input
from .HdfInfiltration import HdfInfiltration

class RasMapper:
    """Class for handling RAS Mapper operations and data extraction"""

    @staticmethod
    @log_call
    def get_raster_map(hdf_path: Path) -> dict:
        """Read the raster map from HDF file and create value mapping
        
        Args:
            hdf_path: Path to the HDF file
            
        Returns:
            Dictionary mapping raster values to mukeys
        """
        with h5py.File(hdf_path, 'r') as hdf:
            raster_map_data = hdf['Raster Map'][:]
            return {int(item[0]): item[1].decode('utf-8') for item in raster_map_data}

    @staticmethod
    @log_call 
    def clip_raster_with_boundary(raster_path: Path, boundary_path: Path):
        """Clip a raster using a boundary polygon
        
        Args:
            raster_path: Path to the raster file
            boundary_path: Path to the boundary shapefile
            
        Returns:
            Tuple of (clipped_image, transform, nodata_value)
        """
        watershed = gpd.read_file(boundary_path)
        raster = rasterio.open(raster_path)
        
        out_image, out_transform = mask(raster, watershed.geometry, crop=True)
        nodata = raster.nodatavals[0]
        
        return out_image[0], out_transform, nodata

    @staticmethod
    @log_call
    def calculate_zonal_stats(boundary_path: Path, raster_data, transform, nodata):
        """Calculate zonal statistics for a boundary
        
        Args:
            boundary_path: Path to boundary shapefile
            raster_data: Numpy array of raster values
            transform: Raster transform
            nodata: Nodata value
            
        Returns:
            List of statistics by zone
        """
        watershed = gpd.read_file(boundary_path)
        return zonal_stats(watershed, raster_data, 
                         affine=transform, 
                         nodata=nodata,
                         categorical=True)

# Example usage:
"""
# Initialize paths
raster_path = Path('input_files/gSSURGO_InfiltrationDC.tif')
boundary_path = Path('input_files/WF_Boundary_Simple.shp')
hdf_path = raster_path.with_suffix('.hdf')

# Get raster mapping
raster_map = RasMapper.get_raster_map(hdf_path)

# Clip raster with boundary
clipped_data, transform, nodata = RasMapper.clip_raster_with_boundary(
    raster_path, boundary_path)

# Calculate zonal statistics
stats = RasMapper.calculate_zonal_stats(
    boundary_path, clipped_data, transform, nodata)

# Calculate soil statistics
soil_stats = HdfInfiltration.calculate_soil_statistics(
    stats, raster_map)

# Get significant mukeys (>1%)
significant_mukeys = HdfInfiltration.get_significant_mukeys(
    soil_stats, threshold=1.0)
"""
==================================================

File: c:\GH\ras-commander\ras_commander\RasPlan.py
==================================================
"""
RasPlan - Operations for handling plan files in HEC-RAS projects

This module is part of the ras-commander library and uses a centralized logging configuration.

Logging Configuration:
- The logging is set up in the logging_config.py file.
- A @log_call decorator is available to automatically log function calls.
- Log levels: DEBUG, INFO, WARNING, ERROR, CRITICAL
- Logs are written to both console and a rotating file handler.
- The default log file is 'ras_commander.log' in the 'logs' directory.
- The default log level is INFO.

To use logging in this module:
1. Use the @log_call decorator for automatic function call logging.
2. For additional logging, use logger.[level]() calls (e.g., logger.info(), logger.debug()).
3. Obtain the logger using: logger = logging.getLogger(__name__)

Example:
    @log_call
    def my_function():
        logger = logging.getLogger(__name__)
        logger.debug("Additional debug information")
        # Function logic here
        
        
-----

All of the methods in this class are static and are designed to be used without instantiation.

List of Functions in RasPlan:
- set_geom(): Set the geometry for a specified plan
- set_steady(): Apply a steady flow file to a plan file
- set_unsteady(): Apply an unsteady flow file to a plan file
- set_num_cores(): Update the maximum number of cores to use
- set_geom_preprocessor(): Update geometry preprocessor settings
- clone_plan(): Create a new plan file based on a template
- clone_unsteady(): Copy unsteady flow files from a template
- clone_steady(): Copy steady flow files from a template
- clone_geom(): Copy geometry files from a template
- get_next_number(): Determine the next available number from a list
- get_plan_value(): Retrieve a specific value from a plan file
- get_results_path(): Get the results file path for a plan
- get_plan_path(): Get the full path for a plan number
- get_flow_path(): Get the full path for a flow number
- get_unsteady_path(): Get the full path for an unsteady number
- get_geom_path(): Get the full path for a geometry number
- update_run_flags(): Update various run flags in a plan file
- update_plan_intervals(): Update computation and output intervals
- update_plan_description(): Update the description in a plan file
- read_plan_description(): Read the description from a plan file
- update_simulation_date(): Update simulation start and end dates

        
"""
import os
import re
import logging
from pathlib import Path
import shutil
from typing import Union, Optional
import pandas as pd
from .RasPrj import RasPrj, ras
from .RasUtils import RasUtils
from pathlib import Path
from typing import Union, Any
from datetime import datetime

import logging
import re
from .LoggingConfig import get_logger
from .Decorators import log_call

logger = get_logger(__name__)

class RasPlan:
    """
    A class for operations on HEC-RAS plan files.
    """
    
    @staticmethod
    @log_call
    def set_geom(plan_number: Union[str, int], new_geom: Union[str, int], ras_object=None) -> pd.DataFrame:
        """
        Set the geometry for the specified plan.

        Parameters:
            plan_number (Union[str, int]): The plan number to update.
            new_geom (Union[str, int]): The new geometry number to set.
            ras_object: An optional RAS object instance.

        Returns:
            pd.DataFrame: The updated geometry DataFrame.

        Example:
            updated_geom_df = RasPlan.set_geom('02', '03')

        Note:
            This function updates the ras object's dataframes after modifying the project structure.
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        # Ensure plan_number and new_geom are strings
        plan_number = str(plan_number).zfill(2)
        new_geom = str(new_geom).zfill(2)

        # Before doing anything, make sure the plan, geom, flow, and unsteady dataframes are current
        ras_obj.plan_df = ras_obj.get_plan_entries()
        ras_obj.geom_df = ras_obj.get_geom_entries()
        ras_obj.flow_df = ras_obj.get_flow_entries()
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()
        
        if new_geom not in ras_obj.geom_df['geom_number'].values:
            logger.error(f"Geometry {new_geom} not found in project.")
            raise ValueError(f"Geometry {new_geom} not found in project.")

        # Update the geometry for the specified plan
        ras_obj.plan_df.loc[ras_obj.plan_df['plan_number'] == plan_number, 'geom_number'] = new_geom

        logger.info(f"Geometry for plan {plan_number} set to {new_geom}")
        logger.debug("Updated plan DataFrame:")
        logger.debug(ras_obj.plan_df)

        # Update the project file
        prj_file_path = ras_obj.prj_file
        RasUtils.update_file(prj_file_path, RasPlan._update_geom_in_file, plan_number, new_geom)

        # Re-initialize the ras object to reflect changes
        ras_obj.initialize(ras_obj.project_folder, ras_obj.ras_exe_path)

        return ras_obj.plan_df

    @staticmethod
    def _update_geom_in_file(lines, plan_number, new_geom):
        plan_pattern = re.compile(rf"^Plan File=p{plan_number}", re.IGNORECASE)
        geom_pattern = re.compile(r"^Geom File=g\d+", re.IGNORECASE)
        
        for i, line in enumerate(lines):
            if plan_pattern.match(line):
                for j in range(i+1, len(lines)):
                    if geom_pattern.match(lines[j]):
                        lines[j] = f"Geom File=g{new_geom}\n"
                        logger.info(f"Updated Geom File in project file to g{new_geom} for plan {plan_number}")
                        break
                break
        return lines

    @staticmethod
    @log_call
    def set_steady(plan_number: str, new_steady_flow_number: str, ras_object=None):
        """
        Apply a steady flow file to a plan file.
        
        Parameters:
        plan_number (str): Plan number (e.g., '02')
        new_steady_flow_number (str): Steady flow number to apply (e.g., '01')
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.
        
        Returns:
        None

        Raises:
        ValueError: If the specified steady flow number is not found in the project file
        FileNotFoundError: If the specified plan file is not found

        Example:
        >>> RasPlan.set_steady('02', '01')

        Note:
            This function updates the ras object's dataframes after modifying the project structure.
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
                        
        # Update the flow dataframe in the ras instance to ensure it is current
        ras_obj.flow_df = ras_obj.get_flow_entries()
        
        if new_steady_flow_number not in ras_obj.flow_df['flow_number'].values:
            raise ValueError(f"Steady flow number {new_steady_flow_number} not found in project file.")
        
        # Resolve the full path of the plan file
        plan_file_path = RasPlan.get_plan_path(plan_number, ras_obj)
        if not plan_file_path:
            raise FileNotFoundError(f"Plan file not found: {plan_number}")
        
        RasUtils.update_file(plan_file_path, RasPlan._update_steady_in_file, new_steady_flow_number)

        # Update the ras object's dataframes
        ras_obj.plan_df = ras_obj.get_plan_entries()
        ras_obj.geom_df = ras_obj.get_geom_entries()
        ras_obj.flow_df = ras_obj.get_flow_entries()
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()

    @staticmethod
    def _update_steady_in_file(lines, new_steady_flow_number):
        return [f"Flow File=f{new_steady_flow_number}\n" if line.startswith("Flow File=f") else line for line in lines]

    @staticmethod
    @log_call
    def set_unsteady(plan_number: str, new_unsteady_flow_number: str, ras_object=None):
        """
        Apply an unsteady flow file to a plan file.
        
        Parameters:
        plan_number (str): Plan number (e.g., '04')
        new_unsteady_flow_number (str): Unsteady flow number to apply (e.g., '01')
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.
        
        Returns:
        None

        Raises:
        ValueError: If the specified unsteady number is not found in the project file
        FileNotFoundError: If the specified plan file is not found

        Example:
        >>> RasPlan.set_unsteady('04', '01')

        Note:
            This function updates the ras object's dataframes after modifying the project structure.
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        # Update the unsteady dataframe in the ras instance to ensure it is current
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()
        
        if new_unsteady_flow_number not in ras_obj.unsteady_df['unsteady_number'].values:
            raise ValueError(f"Unsteady number {new_unsteady_flow_number} not found in project file.")
        
        # Get the full path of the plan file
        plan_file_path = RasPlan.get_plan_path(plan_number, ras_obj)
        if not plan_file_path:
            raise FileNotFoundError(f"Plan file not found: {plan_number}")
        
        try:
            RasUtils.update_file(plan_file_path, RasPlan._update_unsteady_in_file, new_unsteady_flow_number)
        except Exception as e:
            raise Exception(f"Failed to update unsteady flow file: {e}")

        # Update the ras object's dataframes
        ras_obj.plan_df = ras_obj.get_plan_entries()
        ras_obj.geom_df = ras_obj.get_geom_entries()
        ras_obj.flow_df = ras_obj.get_flow_entries()
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()

    @staticmethod
    def _update_unsteady_in_file(lines, new_unsteady_flow_number):
        return [f"Unsteady File=u{new_unsteady_flow_number}\n" if line.startswith("Unsteady File=u") else line for line in lines]
    
    
    @staticmethod
    @log_call
    def set_num_cores(plan_number, num_cores, ras_object=None):
        """
        Update the maximum number of cores to use in the HEC-RAS plan file.
        
        Parameters:
        plan_number (str): Plan number (e.g., '02') or full path to the plan file
        num_cores (int): Maximum number of cores to use
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.
        
        Returns:
        None

        Notes on setting num_cores in HEC-RAS:
        The recommended setting for num_cores is 2 (most efficient) to 8 (most performant)
        More details in the HEC-Commander Repository Blog "Benchmarking is All You Need"
        https://github.com/billk-FM/HEC-Commander/blob/main/Blog/7._Benchmarking_Is_All_You_Need.md
        
        Microsoft Windows has a maximum of 64 cores that can be allocated to a single Ras.exe process. 

        Example:
        >>> # Using plan number
        >>> RasPlan.set_num_cores('02', 4)
        >>> # Using full path to plan file
        >>> RasPlan.set_num_cores('/path/to/project.p02', 4)

        Note:
            This function updates the ras object's dataframes after modifying the project structure.
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        plan_file_path = RasUtils.get_plan_path(plan_number, ras_obj)
        if not plan_file_path:
            raise FileNotFoundError(f"Plan file not found: {plan_number}. Please provide a valid plan number or path.")
        
        def update_num_cores(lines):
            updated_lines = []
            for line in lines:
                if "UNET D1 Cores=" in line:
                    parts = line.split("=")
                    updated_lines.append(f"{parts[0]}= {num_cores}\n")
                else:
                    updated_lines.append(line)
            return updated_lines
        
        try:
            RasUtils.update_file(plan_file_path, update_num_cores)
        except Exception as e:
            raise IOError(f"Failed to update number of cores in plan file: {e}")
        
        # Update the ras object's dataframes
        ras_obj.plan_df = ras_obj.get_plan_entries()
        ras_obj.geom_df = ras_obj.get_geom_entries()
        ras_obj.flow_df = ras_obj.get_flow_entries()
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()

    @staticmethod
    @log_call
    def set_geom_preprocessor(file_path, run_htab, use_ib_tables, ras_object=None):
        """
        Update the simulation plan file to modify the `Run HTab` and `UNET Use Existing IB Tables` settings.
        
        Parameters:
        file_path (str): Path to the simulation plan file (.p06 or similar) that you want to modify.
        run_htab (int): Value for the `Run HTab` setting:
            - `0` : Do not run the geometry preprocessor, use existing geometry tables.
            - `-1` : Run the geometry preprocessor, forcing a recomputation of the geometry tables.
        use_ib_tables (int): Value for the `UNET Use Existing IB Tables` setting:
            - `0` : Use existing interpolation/boundary (IB) tables without recomputing them.
            - `-1` : Do not use existing IB tables, force a recomputation.
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.
        
        Returns:
        None

        Raises:
        ValueError: If `run_htab` or `use_ib_tables` are not integers or not within the accepted values (`0` or `-1`).
        FileNotFoundError: If the specified file does not exist.
        IOError: If there is an error reading or writing the file.

        Example:
        >>> RasPlan.set_geom_preprocessor('/path/to/project.p06', run_htab=-1, use_ib_tables=0)

        Note:
            This function updates the ras object's dataframes after modifying the project structure.
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        if run_htab not in [-1, 0]:
            raise ValueError("Invalid value for `Run HTab`. Expected `0` or `-1`.")
        if use_ib_tables not in [-1, 0]:
            raise ValueError("Invalid value for `UNET Use Existing IB Tables`. Expected `0` or `-1`.")
        
        def update_geom_preprocessor(lines, run_htab, use_ib_tables):
            updated_lines = []
            for line in lines:
                if line.lstrip().startswith("Run HTab="):
                    updated_lines.append(f"Run HTab= {run_htab} \n")
                elif line.lstrip().startswith("UNET Use Existing IB Tables="):
                    updated_lines.append(f"UNET Use Existing IB Tables= {use_ib_tables} \n")
                else:
                    updated_lines.append(line)
            return updated_lines
        
        try:
            RasUtils.update_file(file_path, update_geom_preprocessor, run_htab, use_ib_tables)
        except FileNotFoundError:
            raise FileNotFoundError(f"The file '{file_path}' does not exist.")
        except IOError as e:
            raise IOError(f"An error occurred while reading or writing the file: {e}")

        # Update the ras object's dataframes
        ras_obj.plan_df = ras_obj.get_plan_entries()
        ras_obj.geom_df = ras_obj.get_geom_entries()
        ras_obj.flow_df = ras_obj.get_flow_entries()
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()

    @staticmethod
    @log_call
    def get_results_path(plan_number: str, ras_object=None) -> Optional[str]:
        """
        Retrieve the results file path for a given HEC-RAS plan number.

        Args:
            plan_number (str): The HEC-RAS plan number for which to find the results path.
            ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.

        Returns:
            Optional[str]: The full path to the results file if found and the file exists, or None if not found.

        Raises:
            RuntimeError: If the project is not initialized.

        Example:
            >>> ras_plan = RasPlan()
            >>> results_path = ras_plan.get_results_path('01')
            >>> if results_path:
            ...     print(f"Results file found at: {results_path}")
            ... else:
            ...     print("Results file not found.")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        # Update the plan dataframe in the ras instance to ensure it is current
        ras_obj.plan_df = ras_obj.get_plan_entries()
        
        # Ensure plan_number is a string
        plan_number = str(plan_number).zfill(2)
        
        plan_entry = ras_obj.plan_df[ras_obj.plan_df['plan_number'] == plan_number]
        if not plan_entry.empty:
            results_path = plan_entry['HDF_Results_Path'].iloc[0]
            if results_path and Path(results_path).exists():
                return results_path
            else:
                return None
        else:
            return None

    @staticmethod
    @log_call
    def get_plan_path(plan_number: str, ras_object=None) -> Optional[str]:
        """
        Return the full path for a given plan number.
        
        This method ensures that the latest plan entries are included by refreshing
        the plan dataframe before searching for the requested plan number.
        
        Args:
        plan_number (str): The plan number to search for.
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.
        
        Returns:
        Optional[str]: The full path of the plan file if found, None otherwise.
        
        Raises:
        RuntimeError: If the project is not initialized.

        Example:
        >>> ras_plan = RasPlan()
        >>> plan_path = ras_plan.get_plan_path('01')
        >>> if plan_path:
        ...     print(f"Plan file found at: {plan_path}")
        ... else:
        ...     print("Plan file not found.")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        # Use updated plan dataframe
        plan_df = ras_obj.get_plan_entries()
        
        plan_path = plan_df[plan_df['plan_number'] == plan_number]
        
        if not plan_path.empty:
            full_path = plan_path['full_path'].iloc[0]
            return full_path
        else:
            return None

    @staticmethod
    @log_call
    def get_flow_path(flow_number: str, ras_object=None) -> Optional[str]:
        """
        Return the full path for a given flow number.

        Args:
        flow_number (str): The flow number to search for.
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.

        Returns:
        Optional[str]: The full path of the flow file if found, None otherwise.

        Raises:
        RuntimeError: If the project is not initialized.

        Example:
        >>> ras_plan = RasPlan()
        >>> flow_path = ras_plan.get_flow_path('01')
        >>> if flow_path:
        ...     print(f"Flow file found at: {flow_path}")
        ... else:
        ...     print("Flow file not found.")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        # Use updated flow dataframe
        ras_obj.flow_df = ras_obj.get_prj_entries('Flow')
        
        flow_path = ras_obj.flow_df[ras_obj.flow_df['flow_number'] == flow_number]
        if not flow_path.empty:
            full_path = flow_path['full_path'].iloc[0]
            return full_path
        else:
            return None

    @staticmethod
    @log_call
    def get_unsteady_path(unsteady_number: str, ras_object=None) -> Optional[str]:
        """
        Return the full path for a given unsteady number.

        Args:
        unsteady_number (str): The unsteady number to search for.
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.

        Returns:
        Optional[str]: The full path of the unsteady file if found, None otherwise.

        Raises:
        RuntimeError: If the project is not initialized.

        Example:
        >>> ras_plan = RasPlan()
        >>> unsteady_path = ras_plan.get_unsteady_path('01')
        >>> if unsteady_path:
        ...     print(f"Unsteady file found at: {unsteady_path}")
        ... else:
        ...     print("Unsteady file not found.")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        # Use updated unsteady dataframe
        ras_obj.unsteady_df = ras_obj.get_prj_entries('Unsteady')
        
        unsteady_path = ras_obj.unsteady_df[ras_obj.unsteady_df['unsteady_number'] == unsteady_number]
        if not unsteady_path.empty:
            full_path = unsteady_path['full_path'].iloc[0]
            return full_path
        else:
            return None

    @staticmethod
    @log_call
    def get_geom_path(geom_number: str, ras_object=None) -> Optional[str]:
        """
        Return the full path for a given geometry number.

        Args:
        geom_number (str): The geometry number to search for.
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.

        Returns:
        Optional[str]: The full path of the geometry file if found, None otherwise.

        Raises:
        RuntimeError: If the project is not initialized.

        Example:
        >>> ras_plan = RasPlan()
        >>> geom_path = ras_plan.get_geom_path('01')
        >>> if geom_path:
        ...     print(f"Geometry file found at: {geom_path}")
        ... else:
        ...     print("Geometry file not found.")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        # Use updated geom dataframe
        ras_obj.geom_df = ras_obj.get_prj_entries('Geom')
        
        geom_path = ras_obj.geom_df[ras_obj.geom_df['geom_number'] == geom_number]
        if not geom_path.empty:
            full_path = geom_path['full_path'].iloc[0]
            return full_path
        else:
            return None

    # Clone Functions to copy unsteady, flow, and geometry files from templates

    @staticmethod
    @log_call
    def clone_plan(template_plan, new_plan_shortid=None, ras_object=None):
        """
        Create a new plan file based on a template and update the project file.
        
        Parameters:
        template_plan (str): Plan number to use as template (e.g., '01')
        new_plan_shortid (str, optional): New short identifier for the plan file
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.
        
        Returns:
        str: New plan number
        
        Example:
        >>> ras_plan = RasPlan()
        >>> new_plan_number = ras_plan.clone_plan('01', new_plan_shortid='New Plan')
        >>> print(f"New plan created with number: {new_plan_number}")

        Note:
            This function updates the ras object's dataframes after modifying the project structure.
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        # Update plan entries without reinitializing the entire project
        ras_obj.plan_df = ras_obj.get_prj_entries('Plan')

        new_plan_num = RasPlan.get_next_number(ras_obj.plan_df['plan_number'])
        template_plan_path = ras_obj.project_folder / f"{ras_obj.project_name}.p{template_plan}"
        new_plan_path = ras_obj.project_folder / f"{ras_obj.project_name}.p{new_plan_num}"

        def update_shortid(lines):
            shortid_pattern = re.compile(r'^Short Identifier=(.*)$', re.IGNORECASE)
            for i, line in enumerate(lines):
                match = shortid_pattern.match(line.strip())
                if match:
                    current_shortid = match.group(1)
                    if new_plan_shortid is None:
                        new_shortid = (current_shortid + "_copy")[:24]
                    else:
                        new_shortid = new_plan_shortid[:24]
                    lines[i] = f"Short Identifier={new_shortid}\n"
                    break
            return lines

        # Use RasUtils to clone the file and update the short identifier
        RasUtils.clone_file(template_plan_path, new_plan_path, update_shortid)

        # Use RasUtils to update the project file
        RasUtils.update_project_file(ras_obj.prj_file, 'Plan', new_plan_num, ras_object=ras_obj)

        # Re-initialize the ras global object
        ras_obj.initialize(ras_obj.project_folder, ras_obj.ras_exe_path)

        ras_obj.plan_df = ras_obj.get_plan_entries()
        ras_obj.geom_df = ras_obj.get_geom_entries()
        ras_obj.flow_df = ras_obj.get_flow_entries()
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()

        return new_plan_num

    @staticmethod
    @log_call
    def clone_unsteady(template_unsteady, ras_object=None):
        """
        Copy unsteady flow files from a template, find the next unsteady number,
        and update the project file accordingly.

        Parameters:
        template_unsteady (str): Unsteady flow number to be used as a template (e.g., '01')
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.

        Returns:
        str: New unsteady flow number (e.g., '03')

        Example:
        >>> ras_plan = RasPlan()
        >>> new_unsteady_num = ras_plan.clone_unsteady('01')
        >>> print(f"New unsteady flow file created: u{new_unsteady_num}")

        Note:
            This function updates the ras object's dataframes after modifying the project structure.
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        # Update unsteady entries without reinitializing the entire project
        ras_obj.unsteady_df = ras_obj.get_prj_entries('Unsteady')

        new_unsteady_num = RasPlan.get_next_number(ras_obj.unsteady_df['unsteady_number'])
        template_unsteady_path = ras_obj.project_folder / f"{ras_obj.project_name}.u{template_unsteady}"
        new_unsteady_path = ras_obj.project_folder / f"{ras_obj.project_name}.u{new_unsteady_num}"

        # Use RasUtils to clone the file
        RasUtils.clone_file(template_unsteady_path, new_unsteady_path)

        # Copy the corresponding .hdf file if it exists
        template_hdf_path = ras_obj.project_folder / f"{ras_obj.project_name}.u{template_unsteady}.hdf"
        new_hdf_path = ras_obj.project_folder / f"{ras_obj.project_name}.u{new_unsteady_num}.hdf"
        if template_hdf_path.exists():
            shutil.copy(template_hdf_path, new_hdf_path)

        # Use RasUtils to update the project file
        RasUtils.update_project_file(ras_obj.prj_file, 'Unsteady', new_unsteady_num, ras_object=ras_obj)

        # Re-initialize the ras global object
        ras_obj.initialize(ras_obj.project_folder, ras_obj.ras_exe_path)

        ras_obj.plan_df = ras_obj.get_plan_entries()
        ras_obj.geom_df = ras_obj.get_geom_entries()
        ras_obj.flow_df = ras_obj.get_flow_entries()
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()

        return new_unsteady_num


    @staticmethod
    @log_call
    def clone_steady(template_flow, ras_object=None):
        """
        Copy steady flow files from a template, find the next flow number,
        and update the project file accordingly.
        
        Parameters:
        template_flow (str): Flow number to be used as a template (e.g., '01')
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.
        
        Returns:
        str: New flow number (e.g., '03')

        Example:
        >>> ras_plan = RasPlan()
        >>> new_flow_num = ras_plan.clone_steady('01')
        >>> print(f"New steady flow file created: f{new_flow_num}")

        Note:
            This function updates the ras object's dataframes after modifying the project structure.
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        # Update flow entries without reinitializing the entire project
        ras_obj.flow_df = ras_obj.get_prj_entries('Flow')

        new_flow_num = RasPlan.get_next_number(ras_obj.flow_df['flow_number'])
        template_flow_path = ras_obj.project_folder / f"{ras_obj.project_name}.f{template_flow}"
        new_flow_path = ras_obj.project_folder / f"{ras_obj.project_name}.f{new_flow_num}"

        # Use RasUtils to clone the file
        RasUtils.clone_file(template_flow_path, new_flow_path)

        # Use RasUtils to update the project file
        RasUtils.update_project_file(ras_obj.prj_file, 'Flow', new_flow_num, ras_object=ras_obj)

        # Re-initialize the ras global object
        ras_obj.initialize(ras_obj.project_folder, ras_obj.ras_exe_path)
        
        ras_obj.plan_df = ras_obj.get_plan_entries()
        ras_obj.geom_df = ras_obj.get_geom_entries()
        ras_obj.flow_df = ras_obj.get_flow_entries()
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()
        
        return new_flow_num

    @staticmethod
    @log_call
    def clone_geom(template_geom, ras_object=None):
        """
        Copy geometry files from a template, find the next geometry number,
        and update the project file accordingly.
        
        Parameters:
        template_geom (str): Geometry number to be used as a template (e.g., '01')
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.
        
        Returns:
        str: New geometry number (e.g., '03')

        Note:
            This function updates the ras object's dataframes after modifying the project structure.
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        # Update geometry entries without reinitializing the entire project
        ras_obj.geom_df = ras_obj.get_prj_entries('Geom')

        new_geom_num = RasPlan.get_next_number(ras_obj.geom_df['geom_number'])
        template_geom_path = ras_obj.project_folder / f"{ras_obj.project_name}.g{template_geom}"
        new_geom_path = ras_obj.project_folder / f"{ras_obj.project_name}.g{new_geom_num}"

        # Use RasUtils to clone the file
        RasUtils.clone_file(template_geom_path, new_geom_path)

        # Handle HDF file copy
        template_hdf_path = ras_obj.project_folder / f"{ras_obj.project_name}.g{template_geom}.hdf"
        new_hdf_path = ras_obj.project_folder / f"{ras_obj.project_name}.g{new_geom_num}.hdf"
        if template_hdf_path.is_file():
            RasUtils.clone_file(template_hdf_path, new_hdf_path)

        # Use RasUtils to update the project file
        RasUtils.update_project_file(ras_obj.prj_file, 'Geom', new_geom_num, ras_object=ras_obj)

        # Update all dataframes in the ras object
        ras_obj.plan_df = ras_obj.get_plan_entries()
        ras_obj.geom_df = ras_obj.get_geom_entries()
        ras_obj.flow_df = ras_obj.get_flow_entries()
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()

        return new_geom_num

    @staticmethod
    @log_call
    def get_next_number(existing_numbers):
        """
        Determine the next available number from a list of existing numbers.
        
        Parameters:
        existing_numbers (list): List of existing numbers as strings
        
        Returns:
        str: Next available number as a zero-padded string
        
        Example:
        >>> existing_numbers = ['01', '02', '04']
        >>> RasPlan.get_next_number(existing_numbers)
        '03'
        >>> existing_numbers = ['01', '02', '03']
        >>> RasPlan.get_next_number(existing_numbers)
        '04'
        """
        existing_numbers = sorted(int(num) for num in existing_numbers)
        next_number = 1
        for num in existing_numbers:
            if num == next_number:
                next_number += 1
            else:
                break
        return f"{next_number:02d}"

    @staticmethod
    @log_call
    def get_plan_value(
        plan_number_or_path: Union[str, Path],
        key: str,
        ras_object=None
    ) -> Any:
        """
        Retrieve a specific value from a HEC-RAS plan file.

        Parameters:
        plan_number_or_path (Union[str, Path]): The plan number (1 to 99) or full path to the plan file
        key (str): The key to retrieve from the plan file
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.

        Returns:
        Any: The value associated with the specified key

        Raises:
        ValueError: If the plan file is not found
        IOError: If there's an error reading the plan file

        Available keys and their expected types:
        - 'Computation Interval' (str): Time value for computational time step (e.g., '5SEC', '2MIN')
        - 'DSS File' (str): Name of the DSS file used
        - 'Flow File' (str): Name of the flow input file
        - 'Friction Slope Method' (int): Method selection for friction slope (e.g., 1, 2)
        - 'Geom File' (str): Name of the geometry input file
        - 'Mapping Interval' (str): Time interval for mapping output
        - 'Plan File' (str): Name of the plan file
        - 'Plan Title' (str): Title of the simulation plan
        - 'Program Version' (str): Version number of HEC-RAS
        - 'Run HTAB' (int): Flag to run HTab module (-1 or 1)
        - 'Run Post Process' (int): Flag to run post-processing (-1 or 1)
        - 'Run Sediment' (int): Flag to run sediment transport module (0 or 1)
        - 'Run UNET' (int): Flag to run unsteady network module (-1 or 1)
        - 'Run WQNET' (int): Flag to run water quality module (0 or 1)
        - 'Short Identifier' (str): Short name or ID for the plan
        - 'Simulation Date' (str): Start and end dates/times for simulation
        - 'UNET D1 Cores' (int): Number of cores used in 1D calculations
        - 'UNET Use Existing IB Tables' (int): Flag for using existing internal boundary tables (-1, 0, or 1)
        - 'UNET 1D Methodology' (str): 1D calculation methodology
        - 'UNET D2 Solver Type' (str): 2D solver type
        - 'UNET D2 Name' (str): Name of the 2D area
        - 'Run RASMapper' (int): Flag to run RASMapper for floodplain mapping (-1 for off, 0 for on)
        
        
        Note: 
        Writing Multi line keys like 'Description' are not supported by this function.

        Example:
        >>> computation_interval = RasPlan.get_plan_value("01", "Computation Interval")
        >>> print(f"Computation interval: {computation_interval}")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        supported_plan_keys = {
            'Description', 'Computation Interval', 'DSS File', 'Flow File', 'Friction Slope Method',
            'Geom File', 'Mapping Interval', 'Plan File', 'Plan Title', 'Program Version',
            'Run HTAB', 'Run Post Process', 'Run Sediment', 'Run UNET', 'Run WQNET',
            'Short Identifier', 'Simulation Date', 'UNET D1 Cores', 'UNET Use Existing IB Tables',
            'UNET 1D Methodology', 'UNET D2 Solver Type', 'UNET D2 Name', 'Run RASMapper'
        }

        if key not in supported_plan_keys:
            logger = logging.getLogger(__name__)
            logger.warning(f"Unknown key: {key}. Valid keys are: {', '.join(supported_plan_keys)}\n Add more keys and explanations in get_plan_value() as needed.")

        plan_file_path = Path(plan_number_or_path)
        if not plan_file_path.is_file():
            plan_file_path = RasPlan.get_plan_path(plan_number_or_path, ras_object=ras_obj)
            if plan_file_path is None or not Path(plan_file_path).exists():
                raise ValueError(f"Plan file not found: {plan_file_path}")

        try:
            with open(plan_file_path, 'r') as file:
                content = file.read()
        except IOError as e:
            logger = logging.getLogger(__name__)
            logger.error(f"Error reading plan file {plan_file_path}: {e}")
            raise

        if key == 'Description':
            match = re.search(r'Begin DESCRIPTION(.*?)END DESCRIPTION', content, re.DOTALL)
            return match.group(1).strip() if match else None
        else:
            pattern = f"{key}=(.*)"
            match = re.search(pattern, content)
            if match:
                return match.group(1).strip()
            else:
                logger = logging.getLogger(__name__)
                logger.error(f"Key '{key}' not found in the plan file.")
                return None


#  NEW FUNCTIONS THAT NEED TESTING AND EXAMPLES


    @staticmethod
    @log_call
    def update_run_flags(
        plan_number_or_path: Union[str, Path],
        geometry_preprocessor: bool = None,
        unsteady_flow_simulation: bool = None,
        run_sediment: bool = None,
        post_processor: bool = None,
        floodplain_mapping: bool = None,
        ras_object=None
    ) -> None:
        """
        Update the run flags in a HEC-RAS plan file.

        Parameters:
        plan_number_or_path (Union[str, Path]): The plan number (1 to 99) or full path to the plan file
        geometry_preprocessor (bool, optional): Flag for Geometry Preprocessor
        unsteady_flow_simulation (bool, optional): Flag for Unsteady Flow Simulation
        run_sediment (bool, optional): Flag for run_sediment
        post_processor (bool, optional): Flag for Post Processor
        floodplain_mapping (bool, optional): Flag for Floodplain Mapping
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.

        Raises:
        ValueError: If the plan file is not found
        IOError: If there's an error reading or writing the plan file

        Example:
        >>> RasPlan.update_run_flags("01", geometry_preprocessor=True, unsteady_flow_simulation=True, run_sediment=False, post_processor=True, floodplain_mapping=False)
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        plan_file_path = Path(plan_number_or_path)
        if not plan_file_path.is_file():
            plan_file_path = RasPlan.get_plan_path(plan_number_or_path, ras_object=ras_obj)
            if plan_file_path is None or not Path(plan_file_path).exists():
                raise ValueError(f"Plan file not found: {plan_file_path}")

        flag_mapping = {
            'geometry_preprocessor': ('Run HTab', geometry_preprocessor),
            'unsteady_flow_simulation': ('Run UNet', unsteady_flow_simulation),
            'run_sediment': ('Run run_sediment', run_sediment),
            'post_processor': ('Run PostProcess', post_processor),
            'floodplain_mapping': ('Run RASMapper', floodplain_mapping)
        }

        try:
            with open(plan_file_path, 'r') as file:
                lines = file.readlines()

            for i, line in enumerate(lines):
                for key, (file_key, value) in flag_mapping.items():
                    if value is not None and line.strip().startswith(file_key):
                        lines[i] = f"{file_key}= {1 if value else 0}\n"

            with open(plan_file_path, 'w') as file:
                file.writelines(lines)

            logger = logging.getLogger(__name__)
            logger.info(f"Successfully updated run flags in plan file: {plan_file_path}")

        except IOError as e:
            logger = logging.getLogger(__name__)
            logger.error(f"Error updating run flags in plan file {plan_file_path}: {e}")
            raise



    @staticmethod
    @log_call
    def update_plan_intervals(
        plan_number_or_path: Union[str, Path],
        computation_interval: Optional[str] = None,
        output_interval: Optional[str] = None,
        instantaneous_interval: Optional[str] = None,
        mapping_interval: Optional[str] = None,
        ras_object=None
    ) -> None:
        """
        Update the computation and output intervals in a HEC-RAS plan file.

        Parameters:
        plan_number_or_path (Union[str, Path]): The plan number (1 to 99) or full path to the plan file
        computation_interval (Optional[str]): The new computation interval. Valid entries include:
            '1SEC', '2SEC', '3SEC', '4SEC', '5SEC', '6SEC', '10SEC', '15SEC', '20SEC', '30SEC',
            '1MIN', '2MIN', '3MIN', '4MIN', '5MIN', '6MIN', '10MIN', '15MIN', '20MIN', '30MIN',
            '1HOUR', '2HOUR', '3HOUR', '4HOUR', '6HOUR', '8HOUR', '12HOUR', '1DAY'
        output_interval (Optional[str]): The new output interval. Valid entries are the same as computation_interval.
        instantaneous_interval (Optional[str]): The new instantaneous interval. Valid entries are the same as computation_interval.
        mapping_interval (Optional[str]): The new mapping interval. Valid entries are the same as computation_interval.
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.

        Raises:
        ValueError: If the plan file is not found or if an invalid interval is provided
        IOError: If there's an error reading or writing the plan file

        Note: This function does not check if the intervals are equal divisors. Ensure you use valid values from HEC-RAS.

        Example:
        >>> RasPlan.update_plan_intervals("01", computation_interval="5SEC", output_interval="1MIN", instantaneous_interval="1HOUR", mapping_interval="5MIN")
        >>> RasPlan.update_plan_intervals("/path/to/plan.p01", computation_interval="10SEC", output_interval="30SEC")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        plan_file_path = Path(plan_number_or_path)
        if not plan_file_path.is_file():
            plan_file_path = RasPlan.get_plan_path(plan_number_or_path, ras_object=ras_obj)
            if plan_file_path is None or not Path(plan_file_path).exists():
                raise ValueError(f"Plan file not found: {plan_file_path}")

        valid_intervals = [
            '1SEC', '2SEC', '3SEC', '4SEC', '5SEC', '6SEC', '10SEC', '15SEC', '20SEC', '30SEC',
            '1MIN', '2MIN', '3MIN', '4MIN', '5MIN', '6MIN', '10MIN', '15MIN', '20MIN', '30MIN',
            '1HOUR', '2HOUR', '3HOUR', '4HOUR', '6HOUR', '8HOUR', '12HOUR', '1DAY'
        ]

        interval_mapping = {
            'Computation Interval': computation_interval,
            'Output Interval': output_interval,
            'Instantaneous Interval': instantaneous_interval,
            'Mapping Interval': mapping_interval
        }

        try:
            with open(plan_file_path, 'r') as file:
                lines = file.readlines()

            for i, line in enumerate(lines):
                for key, value in interval_mapping.items():
                    if value is not None:
                        if value.upper() not in valid_intervals:
                            raise ValueError(f"Invalid {key}: {value}. Must be one of {valid_intervals}")
                        if line.strip().startswith(key):
                            lines[i] = f"{key}={value.upper()}\n"

            with open(plan_file_path, 'w') as file:
                file.writelines(lines)

            logger = logging.getLogger(__name__)
            logger.info(f"Successfully updated intervals in plan file: {plan_file_path}")

        except IOError as e:
            logger = logging.getLogger(__name__)
            logger.error(f"Error updating intervals in plan file {plan_file_path}: {e}")
            raise


    @log_call
    def update_plan_description(plan_number_or_path: Union[str, Path], description: str, ras_object: Optional['RasPrj'] = None) -> None:
        """
        Update the description in the plan file.

        Args:
            plan_number_or_path (Union[str, Path]): The plan number or path to the plan file.
            description (str): The new description to be written to the plan file.
            ras_object (Optional[RasPrj]): The RAS project object. If None, uses the global 'ras' object.

        Raises:
            ValueError: If the plan file is not found.
            IOError: If there's an error reading from or writing to the plan file.
        """
        logger = logging.getLogger(__name__)

        plan_file_path = Path(plan_number_or_path)
        if not plan_file_path.is_file():
            plan_file_path = RasPlan.get_plan_path(plan_number_or_path, ras_object)
            if plan_file_path is None or not Path(plan_file_path).exists():
                raise ValueError(f"Plan file not found: {plan_file_path}")

        try:
            with open(plan_file_path, 'r') as file:
                lines = file.readlines()
        except IOError as e:
            logger.error(f"Error reading plan file {plan_file_path}: {e}")
            raise

        start_index = None
        end_index = None
        comp_interval_index = None
        for i, line in enumerate(lines):
            if line.strip() == "BEGIN DESCRIPTION:":
                start_index = i
            elif line.strip() == "END DESCRIPTION:":
                end_index = i
            elif line.strip().startswith("Computation Interval="):
                comp_interval_index = i

        if start_index is not None and end_index is not None:
            # Description exists, update it
            new_lines = lines[:start_index + 1]
            if description:
                new_lines.extend(description.split('\n'))
            else:
                new_lines.append('\n')
            new_lines.extend(lines[end_index:])
        else:
            # Description doesn't exist, insert before Computation Interval
            if comp_interval_index is None:
                logger.warning("Neither description tags nor Computation Interval found in plan file. Appending to end of file.")
                comp_interval_index = len(lines)
            
            new_lines = lines[:comp_interval_index]
            new_lines.append("BEGIN DESCRIPTION:\n")
            if description:
                new_lines.extend(f"{line}\n" for line in description.split('\n'))
            else:
                new_lines.append('\n')
            new_lines.append("END DESCRIPTION:\n")
            new_lines.extend(lines[comp_interval_index:])

        try:
            with open(plan_file_path, 'w') as file:
                file.writelines(new_lines)
            logger.info(f"Updated description in plan file: {plan_file_path}")
        except IOError as e:
            logger.error(f"Error writing to plan file {plan_file_path}: {e}")
            raise

        # Refresh RasPrj dataframes
        if ras_object:
            ras_object.plan_df = ras_object.get_plan_entries()
            ras_object.geom_df = ras_object.get_geom_entries()
            ras_object.flow_df = ras_object.get_flow_entries()
            ras_object.unsteady_df = ras_object.get_unsteady_entries()
            
    @staticmethod
    @log_call
    def read_plan_description(plan_number_or_path: Union[str, Path], ras_object: Optional['RasPrj'] = None) -> str:
        """
        Read the description from the plan file.

        Args:
            plan_number_or_path (Union[str, Path]): The plan number or path to the plan file.
            ras_object (Optional[RasPrj]): The RAS project object. If None, uses the global 'ras' object.

        Returns:
            str: The description from the plan file.

        Raises:
            ValueError: If the plan file is not found.
            IOError: If there's an error reading from the plan file.
        """
        logger = logging.getLogger(__name__)

        plan_file_path = Path(plan_number_or_path)
        if not plan_file_path.is_file():
            plan_file_path = RasPlan.get_plan_path(plan_number_or_path, ras_object)
            if plan_file_path is None or not Path(plan_file_path).exists():
                raise ValueError(f"Plan file not found: {plan_file_path}")

        try:
            with open(plan_file_path, 'r') as file:
                lines = file.readlines()
        except IOError as e:
            logger.error(f"Error reading plan file {plan_file_path}: {e}")
            raise

        description_lines = []
        in_description = False
        description_found = False
        for line in lines:
            if line.strip() == "BEGIN DESCRIPTION:":
                in_description = True
                description_found = True
            elif line.strip() == "END DESCRIPTION:":
                break
            elif in_description:
                description_lines.append(line.strip())

        if not description_found:
            logger.warning(f"No description found in plan file: {plan_file_path}")
            return ""

        description = '\n'.join(description_lines)
        logger.info(f"Read description from plan file: {plan_file_path}")
        return description




    @staticmethod
    @log_call
    def update_simulation_date(plan_number_or_path: Union[str, Path], start_date: datetime, end_date: datetime, ras_object: Optional['RasPrj'] = None) -> None:
        """
        Update the simulation date for a given plan.

        Args:
            plan_number_or_path (Union[str, Path]): The plan number or path to the plan file.
            start_date (datetime): The start date and time for the simulation.
            end_date (datetime): The end date and time for the simulation.
            ras_object (Optional['RasPrj']): The RAS project object. Defaults to None.

        Raises:
            ValueError: If the plan file is not found or if there's an error updating the file.
        """

        # Get the plan file path
        plan_file_path = Path(plan_number_or_path)
        if not plan_file_path.is_file():
            plan_file_path = RasPlan.get_plan_path(plan_number_or_path, ras_object)
            if plan_file_path is None or not Path(plan_file_path).exists():
                raise ValueError(f"Plan file not found: {plan_file_path}")

        # Format the dates
        formatted_date = f"{start_date.strftime('%d%b%Y').upper()},{start_date.strftime('%H%M')},{end_date.strftime('%d%b%Y').upper()},{end_date.strftime('%H%M')}"

        try:
            # Read the file
            with open(plan_file_path, 'r') as file:
                lines = file.readlines()

            # Update the Simulation Date line
            updated = False
            for i, line in enumerate(lines):
                if line.startswith("Simulation Date="):
                    lines[i] = f"Simulation Date={formatted_date}\n"
                    updated = True
                    break

            # If Simulation Date line not found, add it at the end
            if not updated:
                lines.append(f"Simulation Date={formatted_date}\n")

            # Write the updated content back to the file
            with open(plan_file_path, 'w') as file:
                file.writelines(lines)

            logger.info(f"Updated simulation date in plan file: {plan_file_path}")

        except IOError as e:
            logger.error(f"Error updating simulation date in plan file {plan_file_path}: {e}")
            raise ValueError(f"Error updating simulation date: {e}")

        # Refresh RasPrj dataframes
        if ras_object:
            ras_object.plan_df = ras_object.get_plan_entries()
            ras_object.unsteady_df = ras_object.get_unsteady_entries()


==================================================

File: c:\GH\ras-commander\ras_commander\RasPrj.py
==================================================
"""
RasPrj.py - Manages HEC-RAS projects within the ras-commander library

This module provides a class for managing HEC-RAS projects.

Classes:
    RasPrj: A class for managing HEC-RAS projects.

Functions:
    init_ras_project: Initialize a RAS project.
    get_ras_exe: Determine the HEC-RAS executable path based on the input.

DEVELOPER NOTE:
This class is used to initialize a RAS project and is used in conjunction with the RasCmdr class to manage the execution of RAS plans.
By default, the RasPrj class is initialized with the global 'ras' object.
However, you can create multiple RasPrj instances to manage multiple projects.
Do not mix and match global 'ras' object instances and custom instances of RasPrj - it will cause errors.

This module is part of the ras-commander library and uses a centralized logging configuration.

Logging Configuration:
- The logging is set up in the logging_config.py file.
- A @log_call decorator is available to automatically log function calls.
- Log levels: DEBUG, INFO, WARNING, ERROR, CRITICAL
- Logs are written to both console and a rotating file handler.
- The default log file is 'ras_commander.log' in the 'logs' directory.
- The default log level is INFO.

To use logging in this module:
1. Use the @log_call decorator for automatic function call logging.
2. For additional logging, use logger.[level]() calls (e.g., logger.info(), logger.debug()).


Example:
    @log_call
    def my_function():
        
        logger.debug("Additional debug information")
        # Function logic here
        
-----

All of the methods in this class are class methods and are designed to be used with instances of the class.

List of Functions in RasPrj:    
- initialize()
- _load_project_data()
- _get_geom_file_for_plan()
- _parse_plan_file()
- _parse_unsteady_file()
- _get_prj_entries()
- _parse_boundary_condition()
- is_initialized (property)
- check_initialized()
- find_ras_prj()
- get_project_name()
- get_prj_entries()
- get_plan_entries()
- get_flow_entries()
- get_unsteady_entries()
- get_geom_entries()
- get_hdf_entries()
- print_data()
- get_plan_value()
- get_boundary_conditions()
        
Functions in RasPrj that are not part of the class:        
- init_ras_project()
- get_ras_exe()

        
        
        
"""
import os
import re
from pathlib import Path
import pandas as pd
from typing import Union, Any, List, Dict, Tuple
import logging
from ras_commander.LoggingConfig import get_logger
from ras_commander.Decorators import log_call

logger = get_logger(__name__)

class RasPrj:
    
    def __init__(self):
        self.initialized = False
        self.boundaries_df = None  # New attribute to store boundary conditions

    @log_call
    def initialize(self, project_folder, ras_exe_path):
        """
        Initialize a RasPrj instance.

        This method sets up the RasPrj instance with the given project folder and RAS executable path.
        It finds the project file, loads project data, sets the initialization flag, and now also
        extracts boundary conditions.

        Args:
            project_folder (str or Path): Path to the HEC-RAS project folder.
            ras_exe_path (str or Path): Path to the HEC-RAS executable.

        Raises:
            ValueError: If no HEC-RAS project file is found in the specified folder.

        Note:
            This method is intended for internal use. External users should use the init_ras_project function instead.
        """
        self.project_folder = Path(project_folder)
        self.prj_file = self.find_ras_prj(self.project_folder)
        if self.prj_file is None:
            logger.error(f"No HEC-RAS project file found in {self.project_folder}")
            raise ValueError(f"No HEC-RAS project file found in {self.project_folder}")
        self.project_name = Path(self.prj_file).stem
        self.ras_exe_path = ras_exe_path
        self._load_project_data()
        self.boundaries_df = self.get_boundary_conditions()  # Extract boundary conditions
        self.initialized = True
        logger.info(f"Initialization complete for project: {self.project_name}")
        logger.info(f"Plan entries: {len(self.plan_df)}, Flow entries: {len(self.flow_df)}, "
                     f"Unsteady entries: {len(self.unsteady_df)}, Geometry entries: {len(self.geom_df)}, "
                     f"Boundary conditions: {len(self.boundaries_df)}")
        logger.info(f"Geometry HDF files found: {self.plan_df['Geom_File'].notna().sum()}")

    @log_call
    def _load_project_data(self):
        """
        Load project data from the HEC-RAS project file.

        This method initializes DataFrames for plan, flow, unsteady, and geometry entries
        by calling the _get_prj_entries method for each entry type.
        """
        # Initialize DataFrames
        self.plan_df = self._get_prj_entries('Plan')
        self.flow_df = self._get_prj_entries('Flow')
        self.unsteady_df = self._get_prj_entries('Unsteady')
        self.geom_df = self.get_geom_entries()  # Use get_geom_entries instead of _get_prj_entries
        
        # Add Geom_File to plan_df
        self.plan_df['Geom_File'] = self.plan_df.apply(lambda row: self._get_geom_file_for_plan(row['plan_number']), axis=1)

    
    def _get_geom_file_for_plan(self, plan_number):
        """
        Get the geometry file path for a given plan number.
        
        Args:
            plan_number (str): The plan number to find the geometry file for.
        
        Returns:
            str: The full path to the geometry HDF file, or None if not found.
        """
        plan_file_path = self.project_folder / f"{self.project_name}.p{plan_number}"
        try:
            with open(plan_file_path, 'r') as plan_file:
                for line in plan_file:
                    if line.startswith("Geom File="):
                        geom_file = line.strip().split('=')[1]
                        geom_hdf_path = self.project_folder / f"{self.project_name}.{geom_file}.hdf"
                        if geom_hdf_path.exists():
                            return str(geom_hdf_path)
                        else:
                            return None
        except Exception as e:
            logger.error(f"Error reading plan file for geometry: {e}")
        return None


    def _parse_plan_file(self, plan_file_path):
        """
        Parse a plan file and extract critical information.
        
        Args:
            plan_file_path (Path): Path to the plan file.
        
        Returns:
            dict: Dictionary containing extracted plan information.
        """
        plan_info = {}
        try:
            with open(plan_file_path, 'r') as file:
                content = file.read()
                
                # Extract description
                description_match = re.search(r'Begin DESCRIPTION(.*?)END DESCRIPTION', content, re.DOTALL)
                if description_match:
                    plan_info['description'] = description_match.group(1).strip()
                
                # BEGIN Exception to Style Guide, this is needed to keep the key names consistent with the plan file keys.
                
                # Extract other critical information
                supported_plan_keys = {
                    'Computation Interval': r'Computation Interval=(.+)',
                    'DSS File': r'DSS File=(.+)',
                    'Flow File': r'Flow File=(.+)',
                    'Friction Slope Method': r'Friction Slope Method=(.+)',
                    'Geom File': r'Geom File=(.+)',
                    'Mapping Interval': r'Mapping Interval=(.+)',
                    'Plan Title': r'Plan Title=(.+)',
                    'Program Version': r'Program Version=(.+)',
                    'Run HTab': r'Run HTab=(.+)',
                    'Run PostProcess': r'Run PostProcess=(.+)',
                    'Run Sediment': r'Run Sediment=(.+)',
                    'Run UNet': r'Run UNet=(.+)',
                    'Run WQNet': r'Run WQNet=(.+)',
                    'Short Identifier': r'Short Identifier=(.+)',
                    'Simulation Date': r'Simulation Date=(.+)',
                    'UNET D1 Cores': r'UNET D1 Cores=(.+)',
                    'UNET Use Existing IB Tables': r'UNET Use Existing IB Tables=(.+)',
                    'UNET 1D Methodology': r'UNET 1D Methodology=(.+)',
                    'UNET D2 SolverType': r'UNET D2 SolverType=(.+)',
                    'UNET D2 Name': r'UNET D2 Name=(.+)'
                }
                
                # END Exception to Style Guide
                
                for key, pattern in supported_plan_keys.items():
                    match = re.search(pattern, content)
                    if match:
                        plan_info[key] = match.group(1).strip()
            
            logger.debug(f"Parsed plan file: {plan_file_path}")
        except Exception as e:
            logger.exception(f"Error parsing plan file {plan_file_path}: {e}")
        
        return plan_info
    
    def _get_prj_entries(self, entry_type):
        """
        Extract entries of a specific type from the HEC-RAS project file.

        Args:
            entry_type (str): The type of entry to extract (e.g., 'Plan', 'Flow', 'Unsteady', 'Geom').

        Returns:
            pd.DataFrame: A DataFrame containing the extracted entries.

        Note:
            This method reads the project file and extracts entries matching the specified type.
            For 'Unsteady' entries, it parses additional information from the unsteady file.
        """
        entries = []
        pattern = re.compile(rf"{entry_type} File=(\w+)")

        try:
            with open(self.prj_file, 'r') as file:
                for line in file:
                    match = pattern.match(line.strip())
                    if match:
                        file_name = match.group(1)
                        full_path = str(self.project_folder / f"{self.project_name}.{file_name}")
                        entry = {
                            f'{entry_type.lower()}_number': file_name[1:],
                            'full_path': full_path
                        }

                        if entry_type == 'Plan':
                            plan_info = self._parse_plan_file(Path(full_path))
                            entry.update(plan_info)
                            
                            hdf_results_path = self.project_folder / f"{self.project_name}.p{file_name[1:]}.hdf"
                            entry['HDF_Results_Path'] = str(hdf_results_path) if hdf_results_path.exists() else None

                        if entry_type == 'Unsteady':
                            unsteady_info = self._parse_unsteady_file(Path(full_path))
                            entry.update(unsteady_info)

                        entries.append(entry)
        except Exception as e:
            raise

        return pd.DataFrame(entries)

    def _parse_unsteady_file(self, unsteady_file_path):
        """
        Parse an unsteady flow file and extract critical information.
        
        Args:
            unsteady_file_path (Path): Path to the unsteady flow file.
        
        Returns:
            dict: Dictionary containing extracted unsteady flow information.
        """
        unsteady_info = {}
        with open(unsteady_file_path, 'r') as file:
            content = file.read()
            
            # BEGIN Exception to Style Guide, this is needed to keep the key names consistent with the unsteady file keys.
                
            supported_unsteady_keys = {
                'Flow Title': r'Flow Title=(.+)',
                'Program Version': r'Program Version=(.+)',
                'Use Restart': r'Use Restart=(.+)',
                'Precipitation Mode': r'Precipitation Mode=(.+)',
                'Wind Mode': r'Wind Mode=(.+)',
                'Met BC=Precipitation|Mode': r'Met BC=Precipitation\|Mode=(.+)',
                'Met BC=Evapotranspiration|Mode': r'Met BC=Evapotranspiration\|Mode=(.+)',
                'Met BC=Precipitation|Expanded View': r'Met BC=Precipitation\|Expanded View=(.+)',
                'Met BC=Precipitation|Constant Units': r'Met BC=Precipitation\|Constant Units=(.+)',
                'Met BC=Precipitation|Gridded Source': r'Met BC=Precipitation\|Gridded Source=(.+)'
            }
            
            # END Exception to Style Guide
            
            for key, pattern in supported_unsteady_keys.items():
                match = re.search(pattern, content)
                if match:
                    unsteady_info[key] = match.group(1).strip()
        
        return unsteady_info

    @property
    def is_initialized(self):
        """
        Check if the RasPrj instance has been initialized.

        Returns:
            bool: True if the instance has been initialized, False otherwise.
        """
        return self.initialized

    @log_call
    def check_initialized(self):
        """
        Ensure that the RasPrj instance has been initialized.

        Raises:
            RuntimeError: If the project has not been initialized.
        """
        if not self.initialized:
            raise RuntimeError("Project not initialized. Call init_ras_project() first.")

    @staticmethod
    @log_call
    def find_ras_prj(folder_path):
        """
        Find the appropriate HEC-RAS project file (.prj) in the given folder.
        
        Parameters:
        folder_path (str or Path): Path to the folder containing HEC-RAS files.
        
        Returns:
        Path: The full path of the selected .prj file or None if no suitable file is found.
        """
        folder_path = Path(folder_path)
        prj_files = list(folder_path.glob("*.prj"))
        rasmap_files = list(folder_path.glob("*.rasmap"))
        if len(prj_files) == 1:
            return prj_files[0].resolve()
        if len(prj_files) > 1:
            if len(rasmap_files) == 1:
                base_filename = rasmap_files[0].stem
                prj_file = folder_path / f"{base_filename}.prj"
                if prj_file.exists():
                    return prj_file.resolve()
            for prj_file in prj_files:
                try:
                    with open(prj_file, 'r') as file:
                        content = file.read()
                        if "Proj Title=" in content:
                            return prj_file.resolve()
                except Exception:
                    continue
        return None


    @log_call
    def get_project_name(self):
        """
        Get the name of the HEC-RAS project.

        Returns:
            str: The name of the project.

        Raises:
            RuntimeError: If the project has not been initialized.
        """
        self.check_initialized()
        return self.project_name

    @log_call
    def get_prj_entries(self, entry_type):
        """
        Get entries of a specific type from the HEC-RAS project.

        Args:
            entry_type (str): The type of entry to retrieve (e.g., 'Plan', 'Flow', 'Unsteady', 'Geom').

        Returns:
            pd.DataFrame: A DataFrame containing the requested entries.

        Raises:
            RuntimeError: If the project has not been initialized.
        """
        self.check_initialized()
        return self._get_prj_entries(entry_type)

    @log_call
    def get_plan_entries(self):
        """
        Get all plan entries from the HEC-RAS project.

        Returns:
            pd.DataFrame: A DataFrame containing all plan entries.

        Raises:
            RuntimeError: If the project has not been initialized.
        """
        self.check_initialized()
        return self._get_prj_entries('Plan')

    @log_call
    def get_flow_entries(self):
        """
        Get all flow entries from the HEC-RAS project.

        Returns:
            pd.DataFrame: A DataFrame containing all flow entries.

        Raises:
            RuntimeError: If the project has not been initialized.
        """
        self.check_initialized()
        return self._get_prj_entries('Flow')

    @log_call
    def get_unsteady_entries(self):
        """
        Get all unsteady flow entries from the HEC-RAS project.

        Returns:
            pd.DataFrame: A DataFrame containing all unsteady flow entries.

        Raises:
            RuntimeError: If the project has not been initialized.
        """
        self.check_initialized()
        return self._get_prj_entries('Unsteady')

    @log_call
    def get_geom_entries(self):
        """
        Get geometry entries from the project file.

        Returns:
            pd.DataFrame: DataFrame containing geometry entries.
        """
        geom_pattern = re.compile(r'Geom File=(\w+)')
        geom_entries = []

        try:
            with open(self.prj_file, 'r') as f:
                for line in f:
                    match = geom_pattern.search(line)
                    if match:
                        geom_entries.append(match.group(1))
        
            geom_df = pd.DataFrame({'geom_file': geom_entries})
            geom_df['geom_number'] = geom_df['geom_file'].str.extract(r'(\d+)$')
            geom_df['full_path'] = geom_df['geom_file'].apply(lambda x: str(self.project_folder / f"{self.project_name}.{x}"))
            geom_df['hdf_path'] = geom_df['full_path'] + ".hdf"
            
            logger.info(f"Found {len(geom_df)} geometry entries")
            return geom_df
        except Exception as e:
            logger.error(f"Error reading geometry entries from project file: {e}")
            raise
    
    @log_call
    def get_hdf_entries(self):
        """
        Get HDF entries for plans that have results.
        
        Returns:
            pd.DataFrame: A DataFrame containing plan entries with HDF results.
                      Returns an empty DataFrame if no HDF entries are found.
        """
        self.check_initialized()
        
        hdf_entries = self.plan_df[self.plan_df['HDF_Results_Path'].notna()].copy()
        
        if hdf_entries.empty:
            return pd.DataFrame(columns=self.plan_df.columns)
        
        return hdf_entries
    
    
    @log_call
    def print_data(self):
        """Print all RAS Object data for this instance."""
        self.check_initialized()
        logger.info(f"--- Data for {self.project_name} ---")
        logger.info(f"Project folder: {self.project_folder}")
        logger.info(f"PRJ file: {self.prj_file}")
        logger.info(f"HEC-RAS executable: {self.ras_exe_path}")
        logger.info("Plan files:")
        logger.info(f"\n{self.plan_df}")
        logger.info("Flow files:")
        logger.info(f"\n{self.flow_df}")
        logger.info("Unsteady flow files:")
        logger.info(f"\n{self.unsteady_df}")
        logger.info("Geometry files:")
        logger.info(f"\n{self.geom_df}")
        logger.info("HDF entries:")
        logger.info(f"\n{self.get_hdf_entries()}")
        logger.info("Boundary conditions:")
        logger.info(f"\n{self.boundaries_df}")
        logger.info("----------------------------")

    @staticmethod
    @log_call
    def get_plan_value(
        plan_number_or_path: Union[str, Path],
        key: str,
        ras_object=None
    ) -> Any:
        """
        Retrieve a specific value from a HEC-RAS plan file.

        Parameters:
        plan_number_or_path (Union[str, Path]): The plan number (1 to 99) or full path to the plan file
        key (str): The key to retrieve from the plan file
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.

        Returns:
        Any: The value associated with the specified key

        Raises:
        ValueError: If an invalid key is provided or if the plan file is not found
        IOError: If there's an error reading the plan file

        Note: See the docstring of update_plan_file for a full list of available keys and their types.

        Example:
        >>> computation_interval = RasUtils.get_plan_value("01", "computation_interval")
        >>> print(f"Computation interval: {computation_interval}")
        """
        logger = getLogger(__name__)
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        valid_keys = {
            'description', 'computation_interval', 'dss_file', 'flow_file', 'friction_slope_method',
            'geom_file', 'mapping_interval', 'plan_file', 'plan_title', 'program_version',
            'run_htab', 'run_post_process', 'run_sediment', 'run_unet', 'run_wqnet',
            'short_identifier', 'simulation_date', 'unet_d1_cores', 'unet_use_existing_ib_tables',
            'unet_1d_methodology', 'unet_d2_solver_type', 'unet_d2_name'
        }

        if key not in valid_keys:
            logger.error(f"Invalid key: {key}")
            raise ValueError(f"Invalid key: {key}. Valid keys are: {', '.join(valid_keys)}")

        plan_file_path = Path(plan_number_or_path)
        if not plan_file_path.is_file():
            plan_file_path = RasUtils.get_plan_path(plan_number_or_path, ras_object)
            if not plan_file_path.exists():
                logger.error(f"Plan file not found: {plan_file_path}")
                raise ValueError(f"Plan file not found: {plan_file_path}")

        try:
            with open(plan_file_path, 'r') as file:
                content = file.read()
        except IOError as e:
            logger.error(f"Error reading plan file {plan_file_path}: {e}")
            raise

        if key == 'description':
            import re
            match = re.search(r'Begin DESCRIPTION(.*?)END DESCRIPTION', content, re.DOTALL)
            return match.group(1).strip() if match else None
        else:
            pattern = f"{key.replace('_', ' ').title()}=(.*)"
            import re
            match = re.search(pattern, content)
            return match.group(1).strip() if match else None

    @log_call
    def get_boundary_conditions(self) -> pd.DataFrame:
        """
        Extract boundary conditions from unsteady flow files and create a DataFrame.

        This method parses unsteady flow files to extract boundary condition information.
        It creates a DataFrame with structured data for known boundary condition types
        and parameters, and associates this information with the corresponding unsteady flow file.

        Note:
        Any lines in the boundary condition blocks that are not explicitly parsed and
        incorporated into the DataFrame are captured in a multi-line string. This string
        is logged at the DEBUG level for each boundary condition. This feature is crucial
        for developers incorporating new boundary condition types or parameters, as it
        allows them to see what information might be missing from the current parsing logic.
        If no unsteady flow files are present, it returns an empty DataFrame.

        Returns:
            pd.DataFrame: A DataFrame containing detailed boundary condition information,
                                      linked to the unsteady flow files.

        Usage:
            To see the unparsed lines, set the logging level to DEBUG before calling this method:
            
            import logging
            getLogger().setLevel(logging.DEBUG)
            
            boundaries_df = ras_project.get_boundary_conditions()
                          linked to the unsteady flow files. Returns an empty DataFrame if
                          no unsteady flow files are present.
        """
        boundary_data = []
        
        # Check if unsteady_df is empty
        if self.unsteady_df.empty:
            logger.info("No unsteady flow files found in the project.")
            return pd.DataFrame()  # Return an empty DataFrame
        
        for _, row in self.unsteady_df.iterrows():
            unsteady_file_path = row['full_path']
            unsteady_number = row['unsteady_number']
            
            try:
                with open(unsteady_file_path, 'r') as file:
                    content = file.read()
            except IOError as e:
                logger.error(f"Error reading unsteady file {unsteady_file_path}: {e}")
                continue
                
            bc_blocks = re.split(r'(?=Boundary Location=)', content)[1:]
            
            for i, block in enumerate(bc_blocks, 1):
                bc_info, unparsed_lines = self._parse_boundary_condition(block, unsteady_number, i)
                boundary_data.append(bc_info)
                
                if unparsed_lines:
                    logger.debug(f"Unparsed lines for boundary condition {i} in unsteady file {unsteady_number}:\n{unparsed_lines}")
        
        if not boundary_data:
            logger.info("No boundary conditions found in unsteady flow files.")
            return pd.DataFrame()  # Return an empty DataFrame if no boundary conditions were found
        
        boundaries_df = pd.DataFrame(boundary_data)
        
        # Merge with unsteady_df to get relevant unsteady flow file information
        merged_df = pd.merge(boundaries_df, self.unsteady_df, 
                             left_on='unsteady_number', right_on='unsteady_number', how='left')
        
        return merged_df

    def _parse_boundary_condition(self, block: str, unsteady_number: str, bc_number: int) -> Tuple[Dict, str]:
        lines = block.split('\n')
        bc_info = {
            'unsteady_number': unsteady_number,
            'boundary_condition_number': bc_number
        }
        
        parsed_lines = set()
        
        # Parse Boundary Location
        boundary_location = lines[0].split('=')[1].strip()
        fields = [field.strip() for field in boundary_location.split(',')]
        bc_info.update({
            'river_reach_name': fields[0] if len(fields) > 0 else '',
            'river_station': fields[1] if len(fields) > 1 else '',
            'storage_area_name': fields[2] if len(fields) > 2 else '',
            'pump_station_name': fields[3] if len(fields) > 3 else ''
        })
        parsed_lines.add(0)
        
        # Determine BC Type
        bc_types = {
            'Flow Hydrograph=': 'Flow Hydrograph',
            'Lateral Inflow Hydrograph=': 'Lateral Inflow Hydrograph',
            'Uniform Lateral Inflow Hydrograph=': 'Uniform Lateral Inflow Hydrograph',
            'Stage Hydrograph=': 'Stage Hydrograph',
            'Friction Slope=': 'Normal Depth',
            'Gate Name=': 'Gate Opening'
        }
        
        bc_info['bc_type'] = 'Unknown'
        bc_info['hydrograph_type'] = None
        for i, line in enumerate(lines[1:], 1):
            for key, bc_type in bc_types.items():
                if line.startswith(key):
                    bc_info['bc_type'] = bc_type
                    if 'Hydrograph' in bc_type:
                        bc_info['hydrograph_type'] = bc_type
                    parsed_lines.add(i)
                    break
            if bc_info['bc_type'] != 'Unknown':
                break
        
        # Parse other fields
        known_fields = ['Interval', 'DSS Path', 'Use DSS', 'Use Fixed Start Time', 'Fixed Start Date/Time',
                        'Is Critical Boundary', 'Critical Boundary Flow', 'DSS File']
        for i, line in enumerate(lines):
            if '=' in line:
                key, value = line.split('=', 1)
                key = key.strip()
                if key in known_fields:
                    bc_info[key] = value.strip()
                    parsed_lines.add(i)
        
        # Handle hydrograph values
        bc_info['hydrograph_num_values'] = 0
        if bc_info['hydrograph_type']:
            hydrograph_key = f"{bc_info['hydrograph_type']}="
            hydrograph_line = next((line for i, line in enumerate(lines) if line.startswith(hydrograph_key)), None)
            if hydrograph_line:
                hydrograph_index = lines.index(hydrograph_line)
                values_count = int(hydrograph_line.split('=')[1].strip())
                bc_info['hydrograph_num_values'] = values_count
                if values_count > 0:
                    values = ' '.join(lines[hydrograph_index + 1:]).split()[:values_count]
                    bc_info['hydrograph_values'] = values
                    parsed_lines.update(range(hydrograph_index, hydrograph_index + (values_count // 5) + 2))
        
        # Collect unparsed lines
        unparsed_lines = '\n'.join(line for i, line in enumerate(lines) if i not in parsed_lines and line.strip())
        
        if unparsed_lines:
            logger.debug(f"Unparsed lines for boundary condition {bc_number} in unsteady file {unsteady_number}:\n{unparsed_lines}")
        
        return bc_info, unparsed_lines


# Create a global instance named 'ras'
# Defining the global instance allows the init_ras_project function to initialize the project.
# This only happens on the library initialization, not when the user calls init_ras_project.
ras = RasPrj()

# END OF CLASS DEFINITION


# START OF FUNCTION DEFINITIONS


@log_call
def init_ras_project(ras_project_folder, ras_version=None, ras_instance=None):
    """
    Initialize a RAS project.

    USE THIS FUNCTION TO INITIALIZE A RAS PROJECT, NOT THE INITIALIZE METHOD OF THE RasPrj CLASS.
    The initialize method of the RasPrj class only modifies the global 'ras' object.

    This function creates or initializes a RasPrj instance, providing a safer and more
    flexible interface than directly using the 'initialize' method.

    Parameters:
    -----------
    ras_project_folder : str
        The path to the RAS project folder.
    ras_version : str, optional
        The version of RAS to use (e.g., "6.6").
        The version can also be a full path to the Ras.exe file. (Useful when calling ras objects for folder copies.)
        If None, the function will attempt to use the version from the global 'ras' object or a default path.
        You MUST specify a version number via init at some point or ras will not run.  
        Once the ras_version is specified once it should auto-fill from the global 'ras' object.
        The RAS Commander Library Assistant can ignore this argument since it does not have Ras.exe present, but all of other operations are fully working.
    ras_instance : RasPrj, optional
        An instance of RasPrj to initialize. If None, the global 'ras' instance is used.

    Returns:
    --------
    RasPrj
        An initialized RasPrj instance.

    Usage:
    ------
    1. For general use with a single project:
        init_ras_project("/path/to/project")
        # Use the global 'ras' object after initialization

    2. For managing multiple projects:
        project1 = init_ras_project("/path/to/project1", "6.6", ras_instance=RasPrj())
        project2 = init_ras_project("/path/to/project2", ras_instance=RasPrj())

    Notes:
    ------
    - This function is preferred over directly calling the 'initialize' method.
    - It supports both the global 'ras' object and custom instances.
    - Be consistent in your approach: stick to either the global 'ras' object
      or custom instances throughout your script or application.
    - Document your choice of approach clearly in your code.
    - If ras_version is not provided, the function will attempt to use the version
      from the global 'ras' object or a default path.

    Warnings:
    ---------
    Avoid mixing use of the global 'ras' object and custom instances to prevent
    confusion and potential bugs.
    """
    if not Path(ras_project_folder).exists():
        logger.error(f"The specified RAS project folder does not exist: {ras_project_folder}")
        raise FileNotFoundError(f"The specified RAS project folder does not exist: {ras_project_folder}. Please check the path and try again.")

    ras_exe_path = get_ras_exe(ras_version)

    if ras_instance is None:
        logger.info("Initializing global 'ras' object via init_ras_project function.")
        ras_instance = ras
    elif not isinstance(ras_instance, RasPrj):
        logger.error("Provided ras_instance is not an instance of RasPrj.")
        raise TypeError("ras_instance must be an instance of RasPrj or None.")

    # Initialize the RasPrj instance
    ras_instance.initialize(ras_project_folder, ras_exe_path)
    
    logger.info(f"Project initialized. ras_instance project folder: {ras_instance.project_folder}")
    return ras_instance

@log_call
def get_ras_exe(ras_version=None):
    """
    Determine the HEC-RAS executable path based on the input.
    
    Args:
        ras_version (str, optional): Either a version number or a full path to the HEC-RAS executable.
                                     If None, the function will attempt to use the version from the global 'ras' object
                                     or a default path.
    
    Returns:
        str: The full path to the HEC-RAS executable.
    
    Raises:
        ValueError: If the input is neither a valid version number nor a valid file path.
    
    Notes:
        - If ras_version is not provided, the function will first check the global 'ras' object for a path.
        - If the global 'ras' object is not initialized or doesn't have a path, a default path will be used.
        - The default path allows the library to function in environments without HEC-RAS installed.
        - This enables the HEC-Commander GPT to operate without stopping, even if HEC-RAS is not present.
        - End users MUST use logging to check for operational errors, as full code stops prevent the GPT from running.
    """
    if ras_version is None:
        if hasattr(ras, 'ras_exe_path') and ras.ras_exe_path:
            logger.info(f"Using HEC-RAS executable from global 'ras' object: {ras.ras_exe_path}")
            return ras.ras_exe_path
        else:
            default_path = Path("Ras.exe")
            logger.warning(f"No HEC-RAS version specified and global 'ras' object not initialized or missing ras_exe_path. Using default path: {default_path}. The RAS Commander (ras-commander) Library Assistant can ignore this error since it does not have HEC-RAS installed.")
            return str(default_path)
    
    ras_version_numbers = [
        "6.6", "6.5", "6.4.1", "6.3.1", "6.3", "6.2", "6.1", "6.0",
        "5.0.7", "5.0.6", "5.0.5", "5.0.4", "5.0.3", "5.0.1", "5.0",
        "4.1", "4.0", "3.1.3", "3.1.2", "3.1.1", "3.0", "2.2"
    ]
    
    hecras_path = Path(ras_version)
    
    if hecras_path.is_file() and hecras_path.suffix.lower() == '.exe':
        logger.info(f"HEC-RAS executable found at specified path: {hecras_path}")
        return str(hecras_path)
    
    if ras_version in ras_version_numbers:
        default_path = Path(f"C:/Program Files (x86)/HEC/HEC-RAS/{ras_version}/Ras.exe")
        if default_path.is_file():
            logger.info(f"HEC-RAS executable found at default path: {default_path}")
            return str(default_path)
        else:
            logger.critical(f"HEC-RAS executable not found at the expected path: {default_path}")
    
    try:
        version_float = float(ras_version)
        if version_float > max(float(v) for v in ras_version_numbers):
            newer_version_path = Path(f"C:/Program Files (x86)/HEC/HEC-RAS/{ras_version}/Ras.exe")
            if newer_version_path.is_file():
                logger.info(f"Newer version of HEC-RAS executable found at: {newer_version_path}")
                return str(newer_version_path)
            else:
                logger.critical("Newer version of HEC-RAS was specified, but the executable was not found.")
    except ValueError:
        pass
    
    logger.error(f"Invalid HEC-RAS version or path: {ras_version}, returning default path: {default_path}")
    #raise ValueError(f"Invalid HEC-RAS version or path: {ras_version}") # don't raise an error here, just return the default path
    return str(default_path)
    

==================================================

File: c:\GH\ras-commander\ras_commander\RasToGo.py
==================================================
"""
RasToGo module provides functions to interface HEC-RAS with go-consequences.
This module helps prepare and format RAS data for use with go-consequences.


-----

All of the methods in this class are static and are designed to be used without instantiation.

List of Functions in RasToGo:

TO BE IMPLEMENTED: 
- Adding stored maps in rasmaapper for a results file
- Editing the terrain name for stored maps, so that a reduced resolution terrain can be used for mapping
- Re-computing specific plans using the floodplain mapping option to generate stored maps
- Using the stored map output to call go-consequences and compute damages
- Comparisons of go-consequences outputs based on RAS plan number
    - include optional argument with polygons defining areas of interest

"""

import logging
from pathlib import Path
from typing import Dict, List, Optional, Any, Tuple, Union
import pandas as pd
import numpy as np

from .Decorators import log_call, standardize_input
from .LoggingConfig import setup_logging, get_logger

logger = get_logger(__name__)

class RasToGo:
    """Class containing functions to interface HEC-RAS with go-consequences."""

    #@staticmethod
    #@log_call 
==================================================

File: c:\GH\ras-commander\ras_commander\RasUnsteady.py
==================================================
"""
RasUnsteady - Operations for handling unsteady flow files in HEC-RAS projects.

This module is part of the ras-commander library and uses a centralized logging configuration.

Logging Configuration:
- The logging is set up in the logging_config.py file.
- A @log_call decorator is available to automatically log function calls.
- Log levels: DEBUG, INFO, WARNING, ERROR, CRITICAL
- Logs are written to both console and a rotating file handler.
- The default log file is 'ras_commander.log' in the 'logs' directory.
- The default log level is INFO.

To use logging in this module:
1. Use the @log_call decorator for automatic function call logging.
2. For additional logging, use logger.[level]() calls (e.g., logger.info(), logger.debug()).


Example:
    @log_call
    def my_function():
        logger.debug("Additional debug information")
        # Function logic here
        
-----

All of the methods in this class are static and are designed to be used without instantiation.

List of Functions in RasUnsteady:
- update_flow_title()
- update_restart_settings()
- extract_boundary_and_tables()
- print_boundaries_and_tables()
- identify_tables()
- parse_fixed_width_table()
- extract_tables()
- write_table_to_file()
        
"""
import os
from pathlib import Path
from .RasPrj import ras
from .LoggingConfig import get_logger
from .Decorators import log_call
import pandas as pd
import numpy as np
import re
from typing import Union, Optional, Any, Tuple, Dict, List



logger = get_logger(__name__)

# Module code starts here

class RasUnsteady:
    """
    Class for all operations related to HEC-RAS unsteady flow files.
    """
    @staticmethod
    @log_call
    def update_flow_title(unsteady_file: str, new_title: str, ras_object: Optional[Any] = None) -> None:
        """
        Update the Flow Title in an unsteady flow file.
        
        Parameters:
        unsteady_file (str): Full path to the unsteady flow file
        new_title (str): New flow title (max 24 characters)
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.
        
        Returns:
        None

        Note:
            This function updates the ras object's unsteady dataframe after modifying the unsteady flow file.
        
        Example:
            from ras_commander import RasCmdr
            
            # Initialize RAS project
            ras_cmdr = RasCmdr()
            ras_cmdr.init_ras_project(project_folder, ras_version)
            
            # Update flow title
            unsteady_file = r"path/to/unsteady_file.u01"
            new_title = "New Flow Title"
            RasUnsteady.update_flow_title(unsteady_file, new_title, ras_object=ras_cmdr.ras)
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()
        
        unsteady_path = Path(unsteady_file)
        new_title = new_title[:24]  # Truncate to 24 characters if longer
        
        try:
            with open(unsteady_path, 'r') as f:
                lines = f.readlines()
            logger.debug(f"Successfully read unsteady flow file: {unsteady_path}")
        except FileNotFoundError:
            logger.error(f"Unsteady flow file not found: {unsteady_path}")
            raise FileNotFoundError(f"Unsteady flow file not found: {unsteady_path}")
        except PermissionError:
            logger.error(f"Permission denied when reading unsteady flow file: {unsteady_path}")
            raise PermissionError(f"Permission denied when reading unsteady flow file: {unsteady_path}")
        
        updated = False
        for i, line in enumerate(lines):
            if line.startswith("Flow Title="):
                old_title = line.strip().split('=')[1]
                lines[i] = f"Flow Title={new_title}\n"
                updated = True
                logger.info(f"Updated Flow Title from '{old_title}' to '{new_title}'")
                break
        
        if updated:
            try:
                with open(unsteady_path, 'w') as f:
                    f.writelines(lines)
                logger.debug(f"Successfully wrote modifications to unsteady flow file: {unsteady_path}")
            except PermissionError:
                logger.error(f"Permission denied when writing to unsteady flow file: {unsteady_path}")
                raise PermissionError(f"Permission denied when writing to unsteady flow file: {unsteady_path}")
            except IOError as e:
                logger.error(f"Error writing to unsteady flow file: {unsteady_path}. {str(e)}")
                raise IOError(f"Error writing to unsteady flow file: {unsteady_path}. {str(e)}")
            logger.info(f"Applied Flow Title modification to {unsteady_file}")
        else:
            logger.warning(f"Flow Title not found in {unsteady_file}")
    
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()

    @staticmethod
    @log_call
    def update_restart_settings(unsteady_file: str, use_restart: bool, restart_filename: Optional[str] = None, ras_object: Optional[Any] = None) -> None:
        """
        Update the Use Restart settings in an unsteady flow file.
        
        Parameters:
        unsteady_file (str): Full path to the unsteady flow file
        use_restart (bool): Whether to use restart (True) or not (False)
        restart_filename (str, optional): Name of the restart file (required if use_restart is True)
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.
        
        Returns:
        None

        Note:
            This function updates the ras object's unsteady dataframe after modifying the unsteady flow file.
        
        Example:
            from ras_commander import RasCmdr
            
            # Initialize RAS project
            ras_cmdr = RasCmdr()
            ras_cmdr.init_ras_project(project_folder, ras_version)
            
            # Update restart settings
            unsteady_file = r"path/to/unsteady_file.u01"
            RasUnsteady.update_restart_settings(unsteady_file, True, "restartfile.rst", ras_object=ras_cmdr.ras)
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()
        
        unsteady_path = Path(unsteady_file)
        
        try:
            with open(unsteady_path, 'r') as f:
                lines = f.readlines()
            logger.debug(f"Successfully read unsteady flow file: {unsteady_path}")
        except FileNotFoundError:
            logger.error(f"Unsteady flow file not found: {unsteady_path}")
            raise FileNotFoundError(f"Unsteady flow file not found: {unsteady_path}")
        except PermissionError:
            logger.error(f"Permission denied when reading unsteady flow file: {unsteady_path}")
            raise PermissionError(f"Permission denied when reading unsteady flow file: {unsteady_path}")
        
        updated = False
        restart_line_index = None
        for i, line in enumerate(lines):
            if line.startswith("Use Restart="):
                restart_line_index = i
                old_value = line.strip().split('=')[1]
                new_value = "-1" if use_restart else "0"
                lines[i] = f"Use Restart={new_value}\n"
                updated = True
                logger.info(f"Updated Use Restart from {old_value} to {new_value}")
                break
        
        if use_restart:
            if not restart_filename:
                logger.error("Restart filename must be specified when enabling restart.")
                raise ValueError("Restart filename must be specified when enabling restart.")
            if restart_line_index is not None:
                lines.insert(restart_line_index + 1, f"Restart Filename={restart_filename}\n")
                logger.info(f"Added Restart Filename: {restart_filename}")
            else:
                logger.warning("Could not find 'Use Restart' line to insert 'Restart Filename'")
        
        if updated:
            try:
                with open(unsteady_path, 'w') as f:
                    f.writelines(lines)
                logger.debug(f"Successfully wrote modifications to unsteady flow file: {unsteady_path}")
            except PermissionError:
                logger.error(f"Permission denied when writing to unsteady flow file: {unsteady_path}")
                raise PermissionError(f"Permission denied when writing to unsteady flow file: {unsteady_path}")
            except IOError as e:
                logger.error(f"Error writing to unsteady flow file: {unsteady_path}. {str(e)}")
                raise IOError(f"Error writing to unsteady flow file: {unsteady_path}. {str(e)}")
            logger.info(f"Applied restart settings modification to {unsteady_file}")
        else:
            logger.warning(f"Use Restart setting not found in {unsteady_file}")
    
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()

    @staticmethod
    @log_call
    def extract_boundary_and_tables(unsteady_file: str, ras_object: Optional[Any] = None) -> pd.DataFrame:
        """
        Extracts Boundary Location blocks, DSS File entries, and their associated 
        fixed-width tables from the specified unsteady file.
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        unsteady_path = Path(unsteady_file)
        table_types = [
            'Flow Hydrograph=', 
            'Gate Openings=', 
            'Stage Hydrograph=',
            'Uniform Lateral Inflow=', 
            'Lateral Inflow Hydrograph='
        ]
        
        try:
            with open(unsteady_path, 'r') as file:
                lines = file.readlines()
            logger.debug(f"Successfully read unsteady flow file: {unsteady_path}")
        except FileNotFoundError:
            logger.error(f"Unsteady flow file not found: {unsteady_path}")
            raise
        except PermissionError:
            logger.error(f"Permission denied when reading unsteady flow file: {unsteady_path}")
            raise
        
        # Initialize variables
        boundary_data = []
        current_boundary = None
        current_tables = {}
        current_table = None
        table_values = []
        
        i = 0
        while i < len(lines):
            line = lines[i].strip()
            
            # Check for Boundary Location line
            if line.startswith("Boundary Location="):
                # Save previous boundary if it exists
                if current_boundary is not None:
                    if current_table and table_values:
                        # Process any remaining table
                        try:
                            df = pd.DataFrame({'Value': table_values})
                            current_tables[current_table_name] = df
                        except Exception as e:
                            logger.warning(f"Error processing table {current_table_name}: {e}")
                    current_boundary['Tables'] = current_tables
                    boundary_data.append(current_boundary)
                
                # Start new boundary
                current_boundary = {
                    'Boundary Location': line.split('=', 1)[1].strip(),
                    'DSS File': '',
                    'Tables': {}
                }
                current_tables = {}
                current_table = None
                table_values = []
                
            # Check for DSS File line
            elif line.startswith("DSS File=") and current_boundary is not None:
                current_boundary['DSS File'] = line.split('=', 1)[1].strip()
                
            # Check for table headers
            elif any(line.startswith(t) for t in table_types) and current_boundary is not None:
                # If we were processing a table, save it
                if current_table and table_values:
                    try:
                        df = pd.DataFrame({'Value': table_values})
                        current_tables[current_table_name] = df
                    except Exception as e:
                        logger.warning(f"Error processing previous table: {e}")
                
                # Start new table
                try:
                    current_table = line.split('=')
                    current_table_name = current_table[0].strip()
                    num_values = int(current_table[1])
                    table_values = []
                    
                    # Read the table values
                    rows_needed = (num_values + 9) // 10  # Round up division
                    for _ in range(rows_needed):
                        i += 1
                        if i >= len(lines):
                            break
                        row = lines[i].strip()
                        # Parse fixed-width values (8 characters each)
                        j = 0
                        while j < len(row):
                            value_str = row[j:j+8].strip()
                            if value_str:
                                try:
                                    value = float(value_str)
                                    table_values.append(value)
                                except ValueError:
                                    # Try splitting merged values
                                    parts = re.findall(r'-?\d+\.?\d*', value_str)
                                    table_values.extend([float(p) for p in parts])
                            j += 8
                
                except (ValueError, IndexError) as e:
                    logger.error(f"Error processing table at line {i}: {e}")
                    current_table = None
                    
            i += 1
        
        # Add the last boundary if it exists
        if current_boundary is not None:
            if current_table and table_values:
                try:
                    df = pd.DataFrame({'Value': table_values})
                    current_tables[current_table_name] = df
                except Exception as e:
                    logger.warning(f"Error processing final table: {e}")
            current_boundary['Tables'] = current_tables
            boundary_data.append(current_boundary)
        
        # Create DataFrame
        boundaries_df = pd.DataFrame(boundary_data)
        if not boundaries_df.empty:
            # Split boundary location into components
            location_columns = ['River Name', 'Reach Name', 'River Station', 
                              'Downstream River Station', 'Storage Area Connection',
                              'Storage Area Name', 'Pump Station Name', 
                              'Blank 1', 'Blank 2']
            split_locations = boundaries_df['Boundary Location'].str.split(',', expand=True)
            # Ensure we have the right number of columns
            for i, col in enumerate(location_columns):
                if i < split_locations.shape[1]:
                    boundaries_df[col] = split_locations[i].str.strip()
                else:
                    boundaries_df[col] = ''
            boundaries_df = boundaries_df.drop(columns=['Boundary Location'])
        
        logger.info(f"Successfully extracted boundaries and tables from {unsteady_path}")
        return boundaries_df

    @staticmethod
    @log_call
    def print_boundaries_and_tables(boundaries_df: pd.DataFrame) -> None:
        """
        Prints the boundaries and their associated tables from the extracted DataFrame.
        
        Parameters:
        - boundaries_df: DataFrame containing boundary information and nested tables data
        """
        pd.set_option('display.max_columns', None)
        pd.set_option('display.max_rows', None)
        print("\nBoundaries and Tablesin boundaries_df:")
        for idx, row in boundaries_df.iterrows():
            print(f"\nBoundary {idx+1}:")
            print(f"River Name: {row['River Name']}")
            print(f"Reach Name: {row['Reach Name']}")
            print(f"River Station: {row['River Station']}")
            print(f"DSS File: {row['DSS File']}")
            
            if row['Tables']:
                print("\nTables for this boundary:")
                for table_name, table_df in row['Tables'].items():
                    print(f"\n{table_name}:")
                    print(table_df.to_string())
            print("-" * 80)





# Additional functions from the AWS webinar where the code was developed
# Need to add examples

    @staticmethod
    @log_call
    def identify_tables(lines: List[str]) -> List[Tuple[str, int, int]]:
        """
        Identify the start and end of each table in the unsteady flow file.
        
        Parameters:
        lines (List[str]): List of file lines
        
        Returns:
        List[Tuple[str, int, int]]: List of tuples containing (table_name, start_line, end_line)
        """
        table_types = [
            'Flow Hydrograph=', 
            'Gate Openings=', 
            'Stage Hydrograph=',
            'Uniform Lateral Inflow=', 
            'Lateral Inflow Hydrograph='
        ]
        tables = []
        current_table = None
        
        for i, line in enumerate(lines):
            if any(table_type in line for table_type in table_types):
                if current_table:
                    tables.append((current_table[0], current_table[1], i-1))
                table_name = line.strip().split('=')[0] + '='
                try:
                    num_values = int(line.strip().split('=')[1])
                    current_table = (table_name, i+1, num_values)
                except (ValueError, IndexError) as e:
                    logger.error(f"Error parsing table header at line {i}: {e}")
                    continue
        
        if current_table:
            tables.append((current_table[0], current_table[1], 
                          current_table[1] + (current_table[2] + 9) // 10))
        
        logger.debug(f"Identified {len(tables)} tables in the file")
        return tables

    @staticmethod
    @log_call
    def parse_fixed_width_table(lines: List[str], start: int, end: int) -> pd.DataFrame:
        """
        Parse a fixed-width table into a pandas DataFrame.
        
        Parameters:
        lines (List[str]): List of file lines
        start (int): Starting line number for table
        end (int): Ending line number for table
        
        Returns:
        pd.DataFrame: DataFrame containing parsed table values
        """
        data = []
        for line in lines[start:end]:
            # Split the line into 8-character columns
            values = [line[i:i+8].strip() for i in range(0, len(line), 8)]
            # Convert to float and handle cases where values are run together
            parsed_values = []
            for value in values:
                try:
                    if len(value) > 8:  # If values are run together
                        parts = re.findall(r'-?\d+\.?\d*', value)
                        parsed_values.extend([float(p) for p in parts])
                    elif value:  # Only add non-empty values
                        parsed_values.append(float(value))
                except ValueError as e:
                    logger.warning(f"Could not parse value '{value}': {e}")
                    continue
            data.extend(parsed_values)
        
        return pd.DataFrame(data, columns=['Value'])

    @staticmethod
    @log_call
    def extract_tables(unsteady_file: str, ras_object: Optional[Any] = None) -> Dict[str, pd.DataFrame]:
        """
        Extract all tables from the unsteady file and return them as DataFrames.
        
        Parameters:
        unsteady_file (str): Path to the unsteady flow file
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.
        
        Returns:
        Dict[str, pd.DataFrame]: Dictionary of table names to DataFrames
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        unsteady_path = Path(unsteady_file)
        try:
            with open(unsteady_path, 'r') as file:
                lines = file.readlines()
            logger.debug(f"Successfully read unsteady flow file: {unsteady_path}")
        except FileNotFoundError:
            logger.error(f"Unsteady flow file not found: {unsteady_path}")
            raise
        except PermissionError:
            logger.error(f"Permission denied when reading unsteady flow file: {unsteady_path}")
            raise
        
        tables = RasBndry.identify_tables(lines)
        extracted_tables = {}
        
        for table_name, start, end in tables:
            df = RasBndry.parse_fixed_width_table(lines, start, end)
            extracted_tables[table_name] = df
            logger.debug(f"Extracted table '{table_name}' with {len(df)} values")
        
        return extracted_tables

    @staticmethod
    @log_call
    def write_table_to_file(unsteady_file: str, table_name: str, df: pd.DataFrame, 
                           start_line: int, ras_object: Optional[Any] = None) -> None:
        """
        Write updated table back to file in fixed-width format.
        
        Parameters:
        unsteady_file (str): Path to the unsteady flow file
        table_name (str): Name of the table to update
        df (pd.DataFrame): DataFrame containing the updated values
        start_line (int): Line number where the table starts
        ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        unsteady_path = Path(unsteady_file)
        try:
            with open(unsteady_path, 'r') as file:
                lines = file.readlines()
            logger.debug(f"Successfully read unsteady flow file: {unsteady_path}")
        except FileNotFoundError:
            logger.error(f"Unsteady flow file not found: {unsteady_path}")
            raise
        except PermissionError:
            logger.error(f"Permission denied when reading unsteady flow file: {unsteady_path}")
            raise
        
        # Format values into fixed-width strings
        formatted_values = []
        for i in range(0, len(df), 10):
            row = df['Value'].iloc[i:i+10]
            formatted_row = ''.join(f'{value:8.0f}' for value in row)
            formatted_values.append(formatted_row + '\n')
        
        # Replace old table with new formatted values
        lines[start_line:start_line+len(formatted_values)] = formatted_values
        
        try:
            with open(unsteady_path, 'w') as file:
                file.writelines(lines)
            logger.info(f"Successfully updated table '{table_name}' in {unsteady_path}")
        except PermissionError:
            logger.error(f"Permission denied when writing to unsteady flow file: {unsteady_path}")
            raise
        except IOError as e:
            logger.error(f"Error writing to unsteady flow file: {unsteady_path}. {str(e)}")
            raise








'''



Flow Title=Single 2D Area with Bridges
Program Version=6.60
Use Restart= 0 
Boundary Location=                ,                ,        ,        ,                ,BaldEagleCr     ,                ,DSNormalDepth                   ,                                
Friction Slope=0.0003,0
Boundary Location=                ,                ,        ,        ,                ,BaldEagleCr     ,                ,DS2NormalD                      ,                                
Friction Slope=0.0003,0
Boundary Location=                ,                ,        ,        ,                ,BaldEagleCr     ,                ,Upstream Inflow                 ,                                
Interval=1HOUR
Flow Hydrograph= 200 
    1000    3000    6500    8000    9500   11000   12500   14000   15500   17000
   18500   20000   22000   24000   26000   28000   30000   34000   38000   42000
   46000   50000   54000   58000   62000   66000   70000   73000   76000   79000
   82000   85000   87200   89400   91600   93800   96000   96800   97600   98400
   99200  100000   99600   99200   98800   98400   98000   96400   94800   93200
   91600   90000   88500   87000   85500   84000   82500   81000   79500   78000
   76500   75000   73500   7200070666.6669333.34   6800066666.6665333.33   64000
62666.6761333.33   6000058666.6757333.33   5600054666.6753333.33   5200050666.67
49333.33   4800046666.6745333.33   4400042666.6741333.33   4000039166.6738333.33
   3750036666.6735833.33   3500034166.6733333.33   3250031666.6730833.33   30000
29166.6728333.33   2750026666.6725833.33   2500024166.6723333.33   2250021666.67
20833.33   2000019655.1719310.3518965.5218620.6918275.8617931.0417586.2117241.38
16896.5516551.72 16206.915862.0715517.2415172.4114827.5914482.7614137.93 13793.1
13448.2813103.4512758.6212413.7912068.9711724.1411379.3111034.4810689.6610344.83
   10000 9915.25 9830.51 9745.76 9661.02 9576.27 9491.53 9406.78 9322.03 9237.29
 9152.54  9067.8 8983.05 8898.31 8813.56 8728.81 8644.07 8559.32 8474.58 8389.83
 8305.09 8220.34 8135.59 8050.85  7966.1 7881.36 7796.61 7711.86 7627.12 7542.37
 7457.63 7372.88 7288.14 7203.39 7118.64  7033.9 6949.15 6864.41 6779.66 6694.92
 6610.17 6525.42 6440.68 6355.93 6271.19 6186.44  6101.7 6016.95  5932.2 5847.46
 5762.71 5677.97 5593.22 5508.48 5423.73 5338.98 5254.24 5169.49 5084.75    5000
Stage Hydrograph TW Check=0
Flow Hydrograph QMult= 0.5 
Flow Hydrograph Slope= 0.0005 
DSS Path=
Use DSS=False
Use Fixed Start Time=False
Fixed Start Date/Time=,
Is Critical Boundary=False
Critical Boundary Flow=
Boundary Location=                ,                ,        ,        ,Sayers Dam      ,                ,                ,                                ,                                
Gate Name=Gate #1     
Gate DSS Path=
Gate Use DSS=False
Gate Time Interval=1HOUR
Gate Use Fixed Start Time=False
Gate Fixed Start Date/Time=,
Gate Openings= 100 
       2       2       2       2       2       2       2       2       2       2
       2       2       2       2       2       2       2       2       2       2
       2       2       2       2       2       2       2       2       2       2
       2       2       2       2       2       2       2       2       2       2
       2       2       2       2       2       2       2       2       2       2
       2       2       2       2       2       2       2       2       2       2
       2       2       2       2       2       2       2       2       2       2
       2       2       2       2       2       2       2       2       2       2
       2       2       2       2       2       2       2       2       2       2
       2       2       2       2       2       2       2       2       2       2
Boundary Location=                ,                ,        ,        ,                ,BaldEagleCr     ,                ,DS2NormalDepth                  ,                                
Friction Slope=0.0003,0
Met Point Raster Parameters=,,,,
Precipitation Mode=Disable
Wind Mode=No Wind Forces
Air Density Mode=
Wave Mode=No Wave Forcing
Met BC=Precipitation|Expanded View=0
Met BC=Precipitation|Point Interpolation=Nearest
Met BC=Precipitation|Gridded Source=DSS
Met BC=Precipitation|Gridded Interpolation=
Met BC=Evapotranspiration|Expanded View=0
Met BC=Evapotranspiration|Point Interpolation=Nearest
Met BC=Evapotranspiration|Gridded Source=DSS
Met BC=Evapotranspiration|Gridded Interpolation=
Met BC=Wind Speed|Expanded View=0
Met BC=Wind Speed|Constant Units=ft/s
Met BC=Wind Speed|Point Interpolation=Nearest
Met BC=Wind Speed|Gridded Source=DSS
Met BC=Wind Speed|Gridded Interpolation=
Met BC=Wind Direction|Expanded View=0
Met BC=Wind Direction|Point Interpolation=Nearest
Met BC=Wind Direction|Gridded Source=DSS
Met BC=Wind Direction|Gridded Interpolation=
Met BC=Wind Velocity X|Expanded View=0
Met BC=Wind Velocity X|Constant Units=ft/s
Met BC=Wind Velocity X|Point Interpolation=Nearest
Met BC=Wind Velocity X|Gridded Source=DSS
Met BC=Wind Velocity X|Gridded Interpolation=
Met BC=Wind Velocity Y|Expanded View=0
Met BC=Wind Velocity Y|Constant Units=ft/s
Met BC=Wind Velocity Y|Point Interpolation=Nearest
Met BC=Wind Velocity Y|Gridded Source=DSS
Met BC=Wind Velocity Y|Gridded Interpolation=
Met BC=Wave Forcing X|Expanded View=0
Met BC=Wave Forcing X|Point Interpolation=Nearest
Met BC=Wave Forcing X|Gridded Source=DSS
Met BC=Wave Forcing X|Gridded Interpolation=
Met BC=Wave Forcing Y|Expanded View=0
Met BC=Wave Forcing Y|Point Interpolation=Nearest
Met BC=Wave Forcing Y|Gridded Source=DSS
Met BC=Wave Forcing Y|Gridded Interpolation=
Met BC=Air Density|Mode=Constant
Met BC=Air Density|Expanded View=0
Met BC=Air Density|Constant Value=1.225
Met BC=Air Density|Constant Units=kg/m3
Met BC=Air Density|Point Interpolation=Nearest
Met BC=Air Density|Gridded Source=DSS
Met BC=Air Density|Gridded Interpolation=
Met BC=Air Temperature|Expanded View=0
Met BC=Air Temperature|Point Interpolation=Nearest
Met BC=Air Temperature|Gridded Source=DSS
Met BC=Air Temperature|Gridded Interpolation=
Met BC=Humidity|Expanded View=0
Met BC=Humidity|Point Interpolation=Nearest
Met BC=Humidity|Gridded Source=DSS
Met BC=Humidity|Gridded Interpolation=
Met BC=Air Pressure|Mode=Constant
Met BC=Air Pressure|Expanded View=0
Met BC=Air Pressure|Constant Value=1013.2
Met BC=Air Pressure|Constant Units=mb
Met BC=Air Pressure|Point Interpolation=Nearest
Met BC=Air Pressure|Gridded Source=DSS
Met BC=Air Pressure|Gridded Interpolation=
Non-Newtonian Method= 0 , 
Non-Newtonian Constant Vol Conc=0
Non-Newtonian Yield Method= 0 , 
Non-Newtonian Yield Coef=0, 0
User Yeild=   0
Non-Newtonian Sed Visc= 0 , 
Non-Newtonian Obrian B=0
User Viscosity=0
User Viscosity Ratio=0
Herschel-Bulkley Coef=0, 0
Clastic Method= 0 , 
Coulomb Phi=0
Voellmy X=0
Non-Newtonian Hindered FV= 0 
Non-Newtonian FV K=0
Non-Newtonian ds=0
Non-Newtonian Max Cv=0
Non-Newtonian Bulking Method= 0 , 
Non-Newtonian High C Transport= 0 , 
Lava Activation= 0 
Temperature=1300,15,,15,14,980
Heat Ballance=1,1200,0.5,1,70,0.95
Viscosity=1000,,,
Yield Strength=,,,
Consistency Factor=,,,
Profile Coefficient=4,1.3,
Lava Param=,2500,




'''





==================================================

File: c:\GH\ras-commander\ras_commander\RasUtils.py
==================================================
"""
RasUtils - Utility functions for the ras-commander library

This module is part of the ras-commander library and uses a centralized logging configuration.

Logging Configuration:
- The logging is set up in the logging_config.py file.
- A @log_call decorator is available to automatically log function calls.
- Log levels: DEBUG, INFO, WARNING, ERROR, CRITICAL
- Logs are written to both console and a rotating file handler.
- The default log file is 'ras_commander.log' in the 'logs' directory.
- The default log level is INFO.

To use logging in this module:
1. Use the @log_call decorator for automatic function call logging.
2. For additional logging, use logger.[level]() calls (e.g., logger.info(), logger.debug()).

Example:
    @log_call
    def my_function():
        logger.debug("Additional debug information")
        # Function logic here
        
-----

All of the methods in this class are static and are designed to be used without instantiation.

List of Functions in RasUtils:
- create_directory()
- find_files_by_extension()
- get_file_size()
- get_file_modification_time()
- get_plan_path()
- remove_with_retry()
- update_plan_file()
- check_file_access()
- convert_to_dataframe()
- save_to_excel()
- calculate_rmse()
- calculate_percent_bias()
- calculate_error_metrics()
- update_file()
- get_next_number()
- clone_file()
- update_project_file()
- decode_byte_strings()
- perform_kdtree_query()
- find_nearest_neighbors()
- consolidate_dataframe()
- find_nearest_value()
- horizontal_distance()
    
        
"""
import os
from pathlib import Path
from .RasPrj import ras
from typing import Union, Optional, Dict, Callable, List, Tuple, Any
import pandas as pd
import numpy as np
import shutil
import re
from scipy.spatial import KDTree
import datetime
import time
import h5py
from datetime import timedelta
from .LoggingConfig import get_logger
from .Decorators import log_call


logger = get_logger(__name__)
# Module code starts here

class RasUtils:
    """
    A class containing utility functions for the ras-commander library.
    When integrating new functions that do not clearly fit into other classes, add them here.
    """

    @staticmethod
    @log_call
    def create_directory(directory_path: Path, ras_object=None) -> Path:
        """
        Ensure that a directory exists, creating it if necessary.

        Parameters:
        directory_path (Path): Path to the directory
        ras_object (RasPrj, optional): RAS object to use. If None, uses the default ras object.

        Returns:
        Path: Path to the ensured directory

        Example:
        >>> ensured_dir = RasUtils.create_directory(Path("output"))
        >>> print(f"Directory ensured: {ensured_dir}")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        path = Path(directory_path)
        try:
            path.mkdir(parents=True, exist_ok=True)
            logger.info(f"Directory ensured: {path}")
        except Exception as e:
            logger.error(f"Failed to create directory {path}: {e}")
            raise
        return path

    @staticmethod
    @log_call
    def find_files_by_extension(extension: str, ras_object=None) -> list:
        """
        List all files in the project directory with a specific extension.

        Parameters:
        extension (str): File extension to filter (e.g., '.prj')
        ras_object (RasPrj, optional): RAS object to use. If None, uses the default ras object.

        Returns:
        list: List of file paths matching the extension

        Example:
        >>> prj_files = RasUtils.find_files_by_extension('.prj')
        >>> print(f"Found {len(prj_files)} .prj files")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        try:
            files = list(ras_obj.project_folder.glob(f"*{extension}"))
            file_list = [str(file) for file in files]
            logger.info(f"Found {len(file_list)} files with extension '{extension}' in {ras_obj.project_folder}")
            return file_list
        except Exception as e:
            logger.error(f"Failed to find files with extension '{extension}': {e}")
            raise

    @staticmethod
    @log_call
    def get_file_size(file_path: Path, ras_object=None) -> Optional[int]:
        """
        Get the size of a file in bytes.

        Parameters:
        file_path (Path): Path to the file
        ras_object (RasPrj, optional): RAS object to use. If None, uses the default ras object.

        Returns:
        Optional[int]: Size of the file in bytes, or None if the file does not exist

        Example:
        >>> size = RasUtils.get_file_size(Path("project.prj"))
        >>> print(f"File size: {size} bytes")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        path = Path(file_path)
        if path.exists():
            try:
                size = path.stat().st_size
                logger.info(f"Size of {path}: {size} bytes")
                return size
            except Exception as e:
                logger.error(f"Failed to get size for {path}: {e}")
                raise
        else:
            logger.warning(f"File not found: {path}")
            return None

    @staticmethod
    @log_call
    def get_file_modification_time(file_path: Path, ras_object=None) -> Optional[float]:
        """
        Get the last modification time of a file.

        Parameters:
        file_path (Path): Path to the file
        ras_object (RasPrj, optional): RAS object to use. If None, uses the default ras object.

        Returns:
        Optional[float]: Last modification time as a timestamp, or None if the file does not exist

        Example:
        >>> mtime = RasUtils.get_file_modification_time(Path("project.prj"))
        >>> print(f"Last modified: {mtime}")
        """
        
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        path = Path(file_path)
        if path.exists():
            try:
                mtime = path.stat().st_mtime
                logger.info(f"Last modification time of {path}: {mtime}")
                return mtime
            except Exception as e:
                logger.exception(f"Failed to get modification time for {path}")
                raise
        else:
            logger.warning(f"File not found: {path}")
            return None

    @staticmethod
    @log_call
    def get_plan_path(current_plan_number_or_path: Union[str, Path], ras_object=None) -> Path:
        """
        Get the path for a plan file with a given plan number or path.

        Parameters:
        current_plan_number_or_path (Union[str, Path]): The plan number (1 to 99) or full path to the plan file
        ras_object (RasPrj, optional): RAS object to use. If None, uses the default ras object.

        Returns:
        Path: Full path to the plan file

        Example:
        >>> plan_path = RasUtils.get_plan_path(1)
        >>> print(f"Plan file path: {plan_path}")
        >>> plan_path = RasUtils.get_plan_path("path/to/plan.p01")
        >>> print(f"Plan file path: {plan_path}")
        """
        
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        plan_path = Path(current_plan_number_or_path)
        if plan_path.is_file():
            logger.info(f"Using provided plan file path: {plan_path}")
            return plan_path
        
        try:
            current_plan_number = f"{int(current_plan_number_or_path):02d}"  # Ensure two-digit format
            logger.debug(f"Converted plan number to two-digit format: {current_plan_number}")
        except ValueError:
            logger.error(f"Invalid plan number: {current_plan_number_or_path}. Expected a number from 1 to 99.")
            raise ValueError(f"Invalid plan number: {current_plan_number_or_path}. Expected a number from 1 to 99.")
        
        plan_name = f"{ras_obj.project_name}.p{current_plan_number}"
        full_plan_path = ras_obj.project_folder / plan_name
        logger.info(f"Constructed plan file path: {full_plan_path}")
        return full_plan_path

    @staticmethod
    @log_call
    def remove_with_retry(
        path: Path,
        max_attempts: int = 5,
        initial_delay: float = 1.0,
        is_folder: bool = True,
        ras_object=None
    ) -> bool:
        """
        Attempts to remove a file or folder with retry logic and exponential backoff.

        Parameters:
        path (Path): Path to the file or folder to be removed.
        max_attempts (int): Maximum number of removal attempts.
        initial_delay (float): Initial delay between attempts in seconds.
        is_folder (bool): If True, the path is treated as a folder; if False, it's treated as a file.
        ras_object (RasPrj, optional): RAS object to use. If None, uses the default ras object.

        Returns:
        bool: True if the file or folder was successfully removed, False otherwise.

        Example:
        >>> success = RasUtils.remove_with_retry(Path("temp_folder"), is_folder=True)
        >>> print(f"Removal successful: {success}")
        """
        
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        path = Path(path)
        for attempt in range(1, max_attempts + 1):
            try:
                if path.exists():
                    if is_folder:
                        shutil.rmtree(path)
                        logger.info(f"Folder removed: {path}")
                    else:
                        path.unlink()
                        logger.info(f"File removed: {path}")
                else:
                    logger.info(f"Path does not exist, nothing to remove: {path}")
                return True
            except PermissionError as pe:
                if attempt < max_attempts:
                    delay = initial_delay * (2 ** (attempt - 1))  # Exponential backoff
                    logger.warning(
                        f"PermissionError on attempt {attempt} to remove {path}: {pe}. "
                        f"Retrying in {delay} seconds..."
                    )
                    time.sleep(delay)
                else:
                    logger.error(
                        f"Failed to remove {path} after {max_attempts} attempts due to PermissionError: {pe}. Skipping."
                    )
                    return False
            except Exception as e:
                logger.exception(f"Failed to remove {path} on attempt {attempt}")
                return False
        return False

    @staticmethod
    @log_call
    def update_plan_file(
        plan_number_or_path: Union[str, Path],
        file_type: str,
        entry_number: int,
        ras_object=None
    ) -> None:
        """
        Update a plan file with a new file reference.

        Parameters:
        plan_number_or_path (Union[str, Path]): The plan number (1 to 99) or full path to the plan file
        file_type (str): Type of file to update ('Geom', 'Flow', or 'Unsteady')
        entry_number (int): Number (from 1 to 99) to set
        ras_object (RasPrj, optional): RAS object to use. If None, uses the default ras object.

        Raises:
        ValueError: If an invalid file_type is provided
        FileNotFoundError: If the plan file doesn't exist

        Example:
        >>> RasUtils.update_plan_file(1, "Geom", 2)
        >>> RasUtils.update_plan_file("path/to/plan.p01", "Geom", 2)
        """
        
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        valid_file_types = {'Geom': 'g', 'Flow': 'f', 'Unsteady': 'u'}
        if file_type not in valid_file_types:
            logger.error(
                f"Invalid file_type '{file_type}'. Expected one of: {', '.join(valid_file_types.keys())}"
            )
            raise ValueError(
                f"Invalid file_type. Expected one of: {', '.join(valid_file_types.keys())}"
            )

        plan_file_path = Path(plan_number_or_path)
        if not plan_file_path.is_file():
            plan_file_path = RasUtils.get_plan_path(plan_number_or_path, ras_object)
            if not plan_file_path.exists():
                logger.error(f"Plan file not found: {plan_file_path}")
                raise FileNotFoundError(f"Plan file not found: {plan_file_path}")
        
        file_prefix = valid_file_types[file_type]
        search_pattern = f"{file_type} File="
        formatted_entry_number = f"{int(entry_number):02d}"  # Ensure two-digit format

        try:
            RasUtils.check_file_access(plan_file_path, 'r')
            with plan_file_path.open('r') as file:
                lines = file.readlines()
        except Exception as e:
            logger.exception(f"Failed to read plan file {plan_file_path}")
            raise

        updated = False
        for i, line in enumerate(lines):
            if line.startswith(search_pattern):
                lines[i] = f"{search_pattern}{file_prefix}{formatted_entry_number}\n"
                logger.info(
                    f"Updated {file_type} File in {plan_file_path} to {file_prefix}{formatted_entry_number}"
                )
                updated = True
                break

        if not updated:
            logger.warning(
                f"Search pattern '{search_pattern}' not found in {plan_file_path}. No update performed."
            )

        try:
            with plan_file_path.open('w') as file:
                file.writelines(lines)
            logger.info(f"Successfully updated plan file: {plan_file_path}")
        except Exception as e:
            logger.exception(f"Failed to write updates to plan file {plan_file_path}")
            raise

        # Refresh RasPrj dataframes
        try:
            ras_obj.plan_df = ras_obj.get_plan_entries()
            ras_obj.geom_df = ras_obj.get_geom_entries()
            ras_obj.flow_df = ras_obj.get_flow_entries()
            ras_obj.unsteady_df = ras_obj.get_unsteady_entries()
            logger.info("RAS object dataframes have been refreshed.")
        except Exception as e:
            logger.exception("Failed to refresh RasPrj dataframes")
            raise

    @staticmethod
    @log_call
    def check_file_access(file_path: Path, mode: str = 'r') -> None:
        """
        Check if the file can be accessed with the specified mode.

        Parameters:
        file_path (Path): Path to the file
        mode (str): Mode to check ('r' for read, 'w' for write, etc.)

        Raises:
        FileNotFoundError: If the file does not exist
        PermissionError: If the required permissions are not met
        """
        
        path = Path(file_path)
        if not path.exists():
            logger.error(f"File not found: {file_path}")
            raise FileNotFoundError(f"File not found: {file_path}")
        
        if mode in ('r', 'rb'):
            if not os.access(path, os.R_OK):
                logger.error(f"Read permission denied for file: {file_path}")
                raise PermissionError(f"Read permission denied for file: {file_path}")
            else:
                logger.debug(f"Read access granted for file: {file_path}")
        
        if mode in ('w', 'wb', 'a', 'ab'):
            parent_dir = path.parent
            if not os.access(parent_dir, os.W_OK):
                logger.error(f"Write permission denied for directory: {parent_dir}")
                raise PermissionError(f"Write permission denied for directory: {parent_dir}")
            else:
                logger.debug(f"Write access granted for directory: {parent_dir}")


    @staticmethod
    @log_call
    def convert_to_dataframe(data_source: Union[pd.DataFrame, Path], **kwargs) -> pd.DataFrame:
        """
        Converts input to a pandas DataFrame. Supports existing DataFrames or file paths (CSV, Excel, TSV, Parquet).

        Args:
            data_source (Union[pd.DataFrame, Path]): The input to convert to a DataFrame. Can be a file path or an existing DataFrame.
            **kwargs: Additional keyword arguments to pass to pandas read functions.

        Returns:
            pd.DataFrame: The resulting DataFrame.

        Raises:
            NotImplementedError: If the file type is unsupported or input type is invalid.

        Example:
            >>> df = RasUtils.convert_to_dataframe(Path("data.csv"))
            >>> print(type(df))
            <class 'pandas.core.frame.DataFrame'>
        """
        if isinstance(data_source, pd.DataFrame):
            logger.debug("Input is already a DataFrame, returning a copy.")
            return data_source.copy()
        elif isinstance(data_source, Path):
            ext = data_source.suffix.replace('.', '', 1)
            logger.info(f"Converting file with extension '{ext}' to DataFrame.")
            if ext == 'csv':
                return pd.read_csv(data_source, **kwargs)
            elif ext.startswith('x'):
                return pd.read_excel(data_source, **kwargs)
            elif ext == "tsv":
                return pd.read_csv(data_source, sep="\t", **kwargs)
            elif ext in ["parquet", "pq", "parq"]:
                return pd.read_parquet(data_source, **kwargs)
            else:
                logger.error(f"Unsupported file type: {ext}")
                raise NotImplementedError(f"Unsupported file type {ext}. Should be one of csv, tsv, parquet, or xlsx.")
        else:
            logger.error(f"Unsupported input type: {type(data_source)}")
            raise NotImplementedError(f"Unsupported type {type(data_source)}. Only file path / existing DataFrame supported at this time")

    @staticmethod
    @log_call
    def save_to_excel(dataframe: pd.DataFrame, excel_path: Path, **kwargs) -> None:
        """
        Saves a pandas DataFrame to an Excel file with retry functionality.

        Args:
            dataframe (pd.DataFrame): The DataFrame to save.
            excel_path (Path): The path to the Excel file where the DataFrame will be saved.
            **kwargs: Additional keyword arguments passed to `DataFrame.to_excel()`.

        Raises:
            IOError: If the file cannot be saved after multiple attempts.

        Example:
            >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
            >>> RasUtils.save_to_excel(df, Path('output.xlsx'))
        """
        saved = False
        max_attempts = 3
        attempt = 0

        while not saved and attempt < max_attempts:
            try:
                dataframe.to_excel(excel_path, **kwargs)
                logger.info(f'DataFrame successfully saved to {excel_path}')
                saved = True
            except IOError as e:
                attempt += 1
                if attempt < max_attempts:
                    logger.warning(f"Error saving file. Attempt {attempt} of {max_attempts}. Please close the Excel document if it's open.")
                else:
                    logger.error(f"Failed to save {excel_path} after {max_attempts} attempts.")
                    raise IOError(f"Failed to save {excel_path} after {max_attempts} attempts. Last error: {str(e)}")

    @staticmethod
    @log_call
    def calculate_rmse(observed_values: np.ndarray, predicted_values: np.ndarray, normalized: bool = True) -> float:
        """
        Calculate the Root Mean Squared Error (RMSE) between observed and predicted values.

        Args:
            observed_values (np.ndarray): Actual observations time series.
            predicted_values (np.ndarray): Estimated/predicted time series.
            normalized (bool, optional): Whether to normalize RMSE to a percentage of observed_values. Defaults to True.

        Returns:
            float: The calculated RMSE value.

        Example:
            >>> observed = np.array([1, 2, 3])
            >>> predicted = np.array([1.1, 2.2, 2.9])
            >>> RasUtils.calculate_rmse(observed, predicted)
            0.06396394
        """
        rmse = np.sqrt(np.mean((predicted_values - observed_values) ** 2))
        
        if normalized:
            rmse = rmse / np.abs(np.mean(observed_values))
        
        logger.debug(f"Calculated RMSE: {rmse}")
        return rmse

    @staticmethod
    @log_call
    def calculate_percent_bias(observed_values: np.ndarray, predicted_values: np.ndarray, as_percentage: bool = False) -> float:
        """
        Calculate the Percent Bias between observed and predicted values.

        Args:
            observed_values (np.ndarray): Actual observations time series.
            predicted_values (np.ndarray): Estimated/predicted time series.
            as_percentage (bool, optional): If True, return bias as a percentage. Defaults to False.

        Returns:
            float: The calculated Percent Bias.

        Example:
            >>> observed = np.array([1, 2, 3])
            >>> predicted = np.array([1.1, 2.2, 2.9])
            >>> RasUtils.calculate_percent_bias(observed, predicted, as_percentage=True)
            3.33333333
        """
        multiplier = 100 if as_percentage else 1
        
        percent_bias = multiplier * (np.mean(predicted_values) - np.mean(observed_values)) / np.mean(observed_values)
        
        logger.debug(f"Calculated Percent Bias: {percent_bias}")
        return percent_bias

    @staticmethod
    @log_call
    def calculate_error_metrics(observed_values: np.ndarray, predicted_values: np.ndarray) -> Dict[str, float]:
        """
        Compute a trio of error metrics: correlation, RMSE, and Percent Bias.

        Args:
            observed_values (np.ndarray): Actual observations time series.
            predicted_values (np.ndarray): Estimated/predicted time series.

        Returns:
            Dict[str, float]: A dictionary containing correlation ('cor'), RMSE ('rmse'), and Percent Bias ('pb').

        Example:
            >>> observed = np.array([1, 2, 3])
            >>> predicted = np.array([1.1, 2.2, 2.9])
            >>> RasUtils.calculate_error_metrics(observed, predicted)
            {'cor': 0.9993, 'rmse': 0.06396, 'pb': 0.03333}
        """
        correlation = np.corrcoef(observed_values, predicted_values)[0, 1]
        rmse = RasUtils.calculate_rmse(observed_values, predicted_values)
        percent_bias = RasUtils.calculate_percent_bias(observed_values, predicted_values)
        
        metrics = {'cor': correlation, 'rmse': rmse, 'pb': percent_bias}
        logger.info(f"Calculated error metrics: {metrics}")
        return metrics

    
    @staticmethod
    @log_call
    def update_file(file_path: Path, update_function: Callable, *args) -> None:
        """
        Generic method to update a file.

        Parameters:
        file_path (Path): Path to the file to be updated
        update_function (Callable): Function to update the file contents
        *args: Additional arguments to pass to the update_function

        Raises:
        Exception: If there's an error updating the file

        Example:
        >>> def update_content(lines, new_value):
        ...     lines[0] = f"New value: {new_value}\\n"
        ...     return lines
        >>> RasUtils.update_file(Path("example.txt"), update_content, "Hello")
        """
        try:
            with open(file_path, 'r') as f:
                lines = f.readlines()
            
            updated_lines = update_function(lines, *args) if args else update_function(lines)
            
            with open(file_path, 'w') as f:
                f.writelines(updated_lines)
            logger.info(f"Successfully updated file: {file_path}")
        except Exception as e:
            logger.exception(f"Failed to update file {file_path}")
            raise

    @staticmethod
    @log_call
    def get_next_number(existing_numbers: list) -> str:
        """
        Determine the next available number from a list of existing numbers.

        Parameters:
        existing_numbers (list): List of existing numbers as strings

        Returns:
        str: Next available number as a zero-padded string

        Example:
        >>> RasUtils.get_next_number(["01", "02", "04"])
        "05"
        """
        existing_numbers = sorted(int(num) for num in existing_numbers)
        next_number = max(existing_numbers, default=0) + 1
        return f"{next_number:02d}"

    @staticmethod
    @log_call
    def clone_file(template_path: Path, new_path: Path, update_function: Optional[Callable] = None, *args) -> None:
        """
        Generic method to clone a file and optionally update it.

        Parameters:
        template_path (Path): Path to the template file
        new_path (Path): Path where the new file will be created
        update_function (Optional[Callable]): Function to update the cloned file
        *args: Additional arguments to pass to the update_function

        Raises:
        FileNotFoundError: If the template file doesn't exist

        Example:
        >>> def update_content(lines, new_value):
        ...     lines[0] = f"New value: {new_value}\\n"
        ...     return lines
        >>> RasUtils.clone_file(Path("template.txt"), Path("new.txt"), update_content, "Hello")
        """
        if not template_path.exists():
            logger.error(f"Template file '{template_path}' does not exist.")
            raise FileNotFoundError(f"Template file '{template_path}' does not exist.")

        shutil.copy(template_path, new_path)
        logger.info(f"File cloned from {template_path} to {new_path}")

        if update_function:
            RasUtils.update_file(new_path, update_function, *args)
    @staticmethod
    @log_call
    def update_project_file(prj_file: Path, file_type: str, new_num: str, ras_object=None) -> None:
        """
        Update the project file with a new entry.

        Parameters:
        prj_file (Path): Path to the project file
        file_type (str): Type of file being added (e.g., 'Plan', 'Geom')
        new_num (str): Number of the new file entry
        ras_object (RasPrj, optional): RAS object to use. If None, uses the default ras object.

        Example:
        >>> RasUtils.update_project_file(Path("project.prj"), "Plan", "02")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        try:
            with open(prj_file, 'r') as f:
                lines = f.readlines()
            
            new_line = f"{file_type} File={file_type[0].lower()}{new_num}\n"
            lines.append(new_line)
            
            with open(prj_file, 'w') as f:
                f.writelines(lines)
            logger.info(f"Project file updated with new {file_type} entry: {new_num}")
        except Exception as e:
            logger.exception(f"Failed to update project file {prj_file}")
            raise
        
  
        
        
    # From FunkShuns
        
    @staticmethod
    @log_call
    def decode_byte_strings(dataframe: pd.DataFrame) -> pd.DataFrame:
        """
        Decodes byte strings in a DataFrame to regular string objects.

        This function converts columns with byte-encoded strings (e.g., b'string') into UTF-8 decoded strings.

        Args:
            dataframe (pd.DataFrame): The DataFrame containing byte-encoded string columns.

        Returns:
            pd.DataFrame: The DataFrame with byte strings decoded to regular strings.

        Example:
            >>> df = pd.DataFrame({'A': [b'hello', b'world'], 'B': [1, 2]})
            >>> decoded_df = RasUtils.decode_byte_strings(df)
            >>> print(decoded_df)
                A  B
            0  hello  1
            1  world  2
        """
        str_df = dataframe.select_dtypes(['object'])
        str_df = str_df.stack().str.decode('utf-8').unstack()
        for col in str_df:
            dataframe[col] = str_df[col]
        return dataframe

    @staticmethod
    @log_call
    def perform_kdtree_query(
        reference_points: np.ndarray,
        query_points: np.ndarray,
        max_distance: float = 2.0
    ) -> np.ndarray:
        """
        Performs a KDTree query between two datasets and returns indices with distances exceeding max_distance set to -1.

        Args:
            reference_points (np.ndarray): The reference dataset for KDTree.
            query_points (np.ndarray): The query dataset to search against KDTree of reference_points.
            max_distance (float, optional): The maximum distance threshold. Indices with distances greater than this are set to -1. Defaults to 2.0.

        Returns:
            np.ndarray: Array of indices from reference_points that are nearest to each point in query_points. 
                        Indices with distances > max_distance are set to -1.

        Example:
            >>> ref_points = np.array([[0, 0], [1, 1], [2, 2]])
            >>> query_points = np.array([[0.5, 0.5], [3, 3]])
            >>> result = RasUtils.perform_kdtree_query(ref_points, query_points)
            >>> print(result)
            array([ 0, -1])
        """
        dist, snap = KDTree(reference_points).query(query_points, distance_upper_bound=max_distance)
        snap[dist > max_distance] = -1
        return snap

    @staticmethod
    @log_call
    def find_nearest_neighbors(points: np.ndarray, max_distance: float = 2.0) -> np.ndarray:
        """
        Creates a self KDTree for dataset points and finds nearest neighbors excluding self, 
        with distances above max_distance set to -1.

        Args:
            points (np.ndarray): The dataset to build the KDTree from and query against itself.
            max_distance (float, optional): The maximum distance threshold. Indices with distances 
                                            greater than max_distance are set to -1. Defaults to 2.0.

        Returns:
            np.ndarray: Array of indices representing the nearest neighbor in points for each point in points. 
                        Indices with distances > max_distance or self-matches are set to -1.

        Example:
            >>> points = np.array([[0, 0], [1, 1], [2, 2], [10, 10]])
            >>> result = RasUtils.find_nearest_neighbors(points)
            >>> print(result)
            array([1, 0, 1, -1])
        """
        dist, snap = KDTree(points).query(points, k=2, distance_upper_bound=max_distance)
        snap[dist > max_distance] = -1
        
        snp = pd.DataFrame(snap, index=np.arange(len(snap)))
        snp = snp.replace(-1, np.nan)
        snp.loc[snp[0] == snp.index, 0] = np.nan
        snp.loc[snp[1] == snp.index, 1] = np.nan
        filled = snp[0].fillna(snp[1])
        snapped = filled.fillna(-1).astype(np.int64).to_numpy()
        return snapped

    @staticmethod
    @log_call
    def consolidate_dataframe(
        dataframe: pd.DataFrame,
        group_by: Optional[Union[str, List[str]]] = None,
        pivot_columns: Optional[Union[str, List[str]]] = None,
        level: Optional[int] = None,
        n_dimensional: bool = False,
        aggregation_method: Union[str, Callable] = 'list'
    ) -> pd.DataFrame:
        """
        Consolidate rows in a DataFrame by merging duplicate values into lists or using a specified aggregation function.

        Args:
            dataframe (pd.DataFrame): The DataFrame to consolidate.
            group_by (Optional[Union[str, List[str]]]): Columns or indices to group by.
            pivot_columns (Optional[Union[str, List[str]]]): Columns to pivot.
            level (Optional[int]): Level of multi-index to group by.
            n_dimensional (bool): If True, use a pivot table for N-Dimensional consolidation.
            aggregation_method (Union[str, Callable]): Aggregation method, e.g., 'list' to aggregate into lists.

        Returns:
            pd.DataFrame: The consolidated DataFrame.

        Example:
            >>> df = pd.DataFrame({'A': [1, 1, 2], 'B': [4, 5, 6], 'C': [7, 8, 9]})
            >>> result = RasUtils.consolidate_dataframe(df, group_by='A')
            >>> print(result)
            B         C
            A            
            1  [4, 5]  [7, 8]
            2  [6]     [9]
        """
        if aggregation_method == 'list':
            agg_func = lambda x: tuple(x)
        else:
            agg_func = aggregation_method

        if n_dimensional:
            result = dataframe.pivot_table(group_by, pivot_columns, aggfunc=agg_func)
        else:
            result = dataframe.groupby(group_by, level=level).agg(agg_func).applymap(list)

        return result

    @staticmethod
    @log_call
    def find_nearest_value(array: Union[list, np.ndarray], target_value: Union[int, float]) -> Union[int, float]:
        """
        Finds the nearest value in a NumPy array to the specified target value.

        Args:
            array (Union[list, np.ndarray]): The array to search within.
            target_value (Union[int, float]): The value to find the nearest neighbor to.

        Returns:
            Union[int, float]: The nearest value in the array to the specified target value.

        Example:
            >>> arr = np.array([1, 3, 5, 7, 9])
            >>> result = RasUtils.find_nearest_value(arr, 6)
            >>> print(result)
            5
        """
        array = np.asarray(array)
        idx = (np.abs(array - target_value)).argmin()
        return array[idx]
    
    @classmethod
    @log_call
    def horizontal_distance(cls, coord1: np.ndarray, coord2: np.ndarray) -> float:
        """
        Calculate the horizontal distance between two coordinate points.
        
        Args:
            coord1 (np.ndarray): First coordinate point [X, Y].
            coord2 (np.ndarray): Second coordinate point [X, Y].
        
        Returns:
            float: Horizontal distance.
        
        Example:
            >>> distance = RasUtils.horizontal_distance(np.array([0, 0]), np.array([3, 4]))
            >>> print(distance)
            5.0
        """
        return np.linalg.norm(coord2 - coord1)
    
    
    
    
    
==================================================

File: c:\GH\ras-commander\ras_commander\__init__.py
==================================================
from importlib.metadata import version, PackageNotFoundError
from .LoggingConfig import setup_logging, get_logger
from .Decorators import log_call, standardize_input

try:
    __version__ = version("ras-commander")
except PackageNotFoundError:
    # package is not installed
    __version__ = "unknown"

# Set up logging
setup_logging()

# Import all necessary functions and classes directly
from .RasPrj import RasPrj, init_ras_project, get_ras_exe, ras
from .RasPlan import RasPlan
from .RasGeo import RasGeo
from .RasUnsteady import RasUnsteady
from .RasUtils import RasUtils
from .RasExamples import RasExamples
from .RasCmdr import RasCmdr
from .RasGpt import RasGpt  
from .RasToGo import RasToGo
from .HdfFluvialPluvial import HdfFluvialPluvial

# Import the Hdf* classes
from .HdfBase import HdfBase
from .HdfBndry import HdfBndry
from .HdfMesh import HdfMesh
from .HdfPlan import HdfPlan
from .HdfResultsMesh import HdfResultsMesh
from .HdfResultsPlan import HdfResultsPlan
from .HdfResultsXsec import HdfResultsXsec
from .HdfStruc import HdfStruc
from .HdfUtils import HdfUtils
from .HdfXsec import HdfXsec
from .HdfPump import HdfPump
from .HdfPipe import HdfPipe
from .HdfInfiltration import HdfInfiltration
from .RasMapper import RasMapper

# Import plotting classes
from .HdfPlot import HdfPlot
from .HdfResultsPlot import HdfResultsPlot

# Define __all__ to specify what should be imported when using "from ras_commander import *"
__all__ = [
    "HdfBase",
    "HdfBndry",
    "HdfMesh",
    "HdfPlan",
    "HdfResultsMesh",
    "HdfResultsPlan",
    "HdfResultsXsec",
    "HdfStruc",
    "HdfUtils",
    "HdfXsec",
    "HdfPump",
    "HdfPipe",
    "HdfPlot",
    "HdfResultsPlot",
    "HdfInfiltration",
    "RasMapper",
    "standardize_input",
    "ras",
    "init_ras_project",
    "get_ras_exe",
    "RasPrj",
    "RasPlan",
    "RasGeo",
    "RasUnsteady",
    "RasCmdr",
    "RasUtils",
    "RasExamples",
    "get_logger",
    "log_call",
]

__version__ = "0.1.0"

==================================================

File: c:\GH\ras-commander\tools\machine_availability_dashboard.py
==================================================
import subprocess
import platform
import pandas as pd
import socket
import streamlit as st
from datetime import datetime
from streamlit import st_autorefresh

def ping_host(host):
    """
    Pings a host and returns True if reachable, False otherwise.
    """
    # Determine the parameter based on the OS
    param = '-n' if platform.system().lower() == 'windows' else '-c'
    # Build the ping command
    command = ['ping', param, '1', host]
    
    try:
        # Suppress the output
        result = subprocess.run(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        return result.returncode == 0
    except Exception:
        # In case of any exception, consider the host unreachable
        return False

def get_ip_address(host):
    """
    Retrieves the IP address of a host.
    """
    try:
        return socket.gethostbyname(host)
    except socket.gaierror:
        return "N/A"

@st.cache_data  # Replaces st.experimental_memo
def generate_machine_status(prefix, start_num, end_num):
    """
    Generate status for machines with configurable prefix and number range.
    """
    # Generate the list of machine names based on prefix and range
    machine_names = [f'{prefix}-{i:02d}' for i in range(start_num, end_num + 1)]
    
    # Ping each machine and collect results
    results = []
    for machine in machine_names:
        reachable = ping_host(machine)
        status = 'Reachable' if reachable else 'Unreachable'
        ip_address = get_ip_address(machine)
        results.append({'Machine': machine, 'Status': status, 'IP Address': ip_address})
    
    # Create a DataFrame for a nicely formatted report
    df = pd.DataFrame(results)
    return df

# Streamlit App Configuration
st.set_page_config(page_title="Machine Availability Dashboard", layout="centered")

st.title("🖥️ Machine Availability Dashboard")

# Add configuration inputs in a sidebar
st.sidebar.header("Configuration")
prefix = st.sidebar.text_input("Machine Name Prefix", value="HEC")
start_num = st.sidebar.number_input("Starting Number", value=1, min_value=1)
end_num = st.sidebar.number_input("Ending Number", value=18, min_value=1)

if end_num < start_num:
    st.error("Ending number must be greater than or equal to starting number!")
else:
    # Auto-refresh every 60 seconds (60000 milliseconds)
    count = st_autorefresh(interval=60 * 1000, key="refresh")

    # Display the last updated time
    st.write(f"**Last Updated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    # Generate and display the machine status
    df = generate_machine_status(prefix, start_num, end_num)

    # Function to apply color styling
    def color_status(val):
        color = 'green' if val == 'Reachable' else 'red'
        return f'color: {color}'

    # Apply styling to the DataFrame
    styled_df = df.style.applymap(color_status, subset=['Status']) \
                            .set_table_styles(
                                [{'selector': 'th', 'props': [('background-color', '#f2f2f2')]}]
                            ) \
                            .set_properties(**{
                                'text-align': 'center',
                                'font-family': 'Arial',
                                'font-size': '12px'
                            })

    st.dataframe(styled_df)

==================================================

Folder: c:\GH\ras-commander\tools\stored_map_assistant
==================================================

File: c:\GH\ras-commander\tools\stored_map_assistant\rasmapper_stored_map_assistant.py
==================================================
# rasmapper_layer_inserter.py

import subprocess
import sys
import os
import queue
import time
from pathlib import Path
import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext
import xml.etree.ElementTree as ET
import shutil
import logging
import threading
import psutil  # Lightweight library for process management
import h5py  # For HDF file manipulation

# Setup logging
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# Formatter for logging
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')

def update_hdf_terrain_reference(hdf_path, terrain_name):
    """
    Updates the terrain reference in an HDF file's Geometry group.
    
    Parameters:
        hdf_path (Path): Path to the HDF file
        terrain_name (str): Name of the selected terrain
    """
    try:
        with h5py.File(hdf_path, 'r+') as f:
            if 'Geometry' in f:
                geom = f['Geometry']
                # Update terrain attributes if they exist
                if 'Terrain Filename' in geom.attrs:
                    terrain_path = f".\\Terrain\\{terrain_name}.hdf"
                    geom.attrs.modify('Terrain Filename', terrain_path.encode())
                if 'Terrain Layername' in geom.attrs:
                    geom.attrs.modify('Terrain Layername', terrain_name.encode())
                logger.info(f"Updated terrain references in HDF file: {hdf_path}")
    except Exception as e:
        logger.error(f"Failed to update terrain reference in HDF file {hdf_path}: {e}")
        raise

def update_terrain_section(rasmap_file, terrain_name):
    """
    Updates the Terrains section in the RASMAP file to ensure the selected terrain is checked.
    
    Parameters:
        rasmap_file (Path): Path to the RASMAP file
        terrain_name (str): Name of the selected terrain
    """
    tree = ET.parse(rasmap_file)
    root = tree.getroot()
    
    terrains = root.find('Terrains')
    if terrains is not None:
        # Find the selected terrain layer
        for layer in terrains.findall('Layer'):
            if layer.get('Name') == terrain_name:
                layer.set('Checked', 'True')
            else:
                layer.set('Checked', 'False')
        
        # Ensure Terrains element is checked and expanded
        terrains.set('Checked', 'True')
        terrains.set('Expanded', 'True')
        
        tree.write(rasmap_file, encoding='utf-8', xml_declaration=True)
        logger.info(f"Updated terrain section in RASMAP file for terrain: {terrain_name}")

def backup_and_filter_terrains(rasmap_file, selected_terrain):
    """
    Creates a backup of the original RASMAP file and removes all terrains except the selected one.
    
    Parameters:
        rasmap_file (Path): Path to the RASMAP file
        selected_terrain (str): Name of the terrain to keep
        
    Returns:
        Path: Path to the backup file
        list: List of XML elements representing removed terrains
    """
    backup_file = rasmap_file.with_suffix('.rasmap.backup')
    shutil.copy2(rasmap_file, backup_file)
    
    tree = ET.parse(rasmap_file)
    root = tree.getroot()
    
    terrains_elem = root.find('Terrains')
    if terrains_elem is None:
        return backup_file, []
    
    removed_terrains = []
    for terrain in terrains_elem.findall('Layer'):
        if terrain.get('Name') != selected_terrain:
            removed_terrains.append(terrain)
            terrains_elem.remove(terrain)
    
    tree.write(rasmap_file, encoding='utf-8', xml_declaration=True)
    logger.info(f"Temporarily removed {len(removed_terrains)} terrain(s) from RASMAP file")
    
    return backup_file, removed_terrains

def restore_terrains_from_backup(rasmap_file, backup_file):
    """
    Restores the original RASMAP file from backup.
    
    Parameters:
        rasmap_file (Path): Path to the RASMAP file
        backup_file (Path): Path to the backup file
    """
    try:
        shutil.copy2(backup_file, rasmap_file)
        backup_file.unlink()  # Remove backup file
        logger.info("Restored original RASMAP file with all terrains")
    except Exception as e:
        logger.error(f"Failed to restore RASMAP file from backup: {e}")
        raise

class QueueProcessor:
    def __init__(self, message_queue, text_widget, root):
        self.message_queue = message_queue
        self.text_widget = text_widget
        self.root = root
        self.running = True

    def process_queue(self):
        """Process messages from the queue and update the text widget"""
        if not self.running:
            return

        try:
            while True:  # Process all available messages
                message = self.message_queue.get_nowait()
                self.text_widget.configure(state='normal')
                self.text_widget.insert(tk.END, message + '\n')
                self.text_widget.configure(state='disabled')
                self.text_widget.see(tk.END)
                self.text_widget.update_idletasks()  # Force update
                self.message_queue.task_done()
        except queue.Empty:
            pass

        if self.running:
            self.root.after(100, self.process_queue)

    def stop(self):
        """Stop the queue processor"""
        self.running = False

# Stream handler for logging to terminal box
class GuiHandler(logging.Handler):
    def __init__(self, text_widget):
        super().__init__()
        self.text_widget = text_widget
        self.setFormatter(formatter)  # Use the formatter defined at module level

    def emit(self, record):
        msg = self.format(record)
        # Update the text widget directly from the main thread
        self.text_widget.configure(state='normal')
        self.text_widget.insert(tk.END, msg + '\n')
        self.text_widget.configure(state='disabled')
        self.text_widget.see(tk.END)
        self.text_widget.update_idletasks()  # Force update

# Utility Functions

def extract_terrain_names(rasmap_file):
    """
    Extracts terrain names from the Terrains section of a RASMAP file.

    Parameters:
        rasmap_file (str): Path to the RASMAP file.

    Returns:
        list of str: List of terrain names.
    """
    if not os.path.isfile(rasmap_file):
        raise FileNotFoundError(f"The file '{rasmap_file}' does not exist.")

    try:
        tree = ET.parse(rasmap_file)
        root = tree.getroot()
    except ET.ParseError as e:
        raise ValueError(f"Failed to parse the RASMAP file. Ensure it is a valid XML file. Error: {e}")

    terrains = root.find('Terrains')
    if terrains is None:
        raise ValueError("The RASMAP file does not contain a 'Terrains' section.")

    terrain_names = [layer.get('Name') for layer in terrains.findall('Layer') if layer.get('Name')]
    logger.info(f"Extracted terrain names: {terrain_names}")
    return terrain_names

def create_map_definition(name, map_type, filename, profile_name, terrain=None, additional_params=None):
    """
    Creates a dictionary representing a stored map definition.

    Parameters:
        name (str): Name of the map.
        map_type (str): Type of the map (e.g., "elevation", "velocity").
        filename (str): Path to the map file.
        profile_name (str): Profile name associated with the map.
        terrain (str, optional): Terrain name. If provided, overrides StoredFilename with terrain-specific path.
        additional_params (dict, optional): Any additional map parameters.

    Returns:
        dict: Stored map definition.
    """
    map_params = {
        "MapType": map_type,
        "OutputMode": "Stored Current Terrain",
        "StoredFilename": filename,
        "ProfileIndex": "2147483647",
        "ProfileName": profile_name
    }

    # If terrain is specified, adjust the StoredFilename accordingly
    if terrain:
        base, ext = os.path.splitext(filename)
        filename = os.path.join(os.path.dirname(filename), f"{base}_{terrain}{ext}")
        map_params["StoredFilename"] = filename

    # Include any additional parameters
    if additional_params:
        map_params.update(additional_params)

    return {
        "name": name,
        "type": "RASResultsMap",
        "checked": True,
        "filename": filename,
        "map_parameters": map_params
    }

def insert_stored_maps(rasmap_file, stored_maps, terrain=None):
    """
    Inserts stored map definitions into each RASResults Layer within the Results section of a RASMAP file.
    Also updates terrain references in associated HDF files.
    """
    rasmap_file = Path(rasmap_file)
    if not rasmap_file.is_file():
        raise FileNotFoundError(f"The file '{rasmap_file}' does not exist.")

    # Create a backup of the original file
    backup_file = rasmap_file.with_suffix(rasmap_file.suffix + '.bak')
    shutil.copyfile(rasmap_file, backup_file)
    logger.info(f"Backup of the original file created at '{backup_file}'.")

    try:
        tree = ET.parse(rasmap_file)
        root = tree.getroot()
    except ET.ParseError as e:
        raise ValueError(f"Failed to parse the RASMAP file. Ensure it is a valid XML file. Error: {e}")

    results = root.find('Results')
    if results is None:
        raise ValueError("The RASMAP file does not contain a 'Results' section.")

    rasresults_layers = results.findall("Layer[@Type='RASResults']")
    if not rasresults_layers:
        logger.warning("No RASResults Layers found in the Results section. No maps were inserted.")
        return

    for rasresults_layer in rasresults_layers:
        rasresults_name = rasresults_layer.get('Name', 'Unnamed RASResults')
        logger.info(f"Processing RASResults Layer: '{rasresults_name}'")

        # Update HDF terrain reference if needed
        hdf_filename = rasresults_layer.get('Filename')
        if hdf_filename and hdf_filename.lower().endswith('.hdf'):
            hdf_path = Path(rasmap_file).parent / hdf_filename
            if hdf_path.exists() and terrain:
                try:
                    update_hdf_terrain_reference(hdf_path, terrain)
                except Exception as e:
                    logger.warning(f"Could not update terrain reference in HDF file {hdf_path}: {e}")

        for stored_map in stored_maps:
            map_name = stored_map['name']
            
            # Find existing map layers with matching name
            existing_layers = rasresults_layer.findall(f".//Layer[@Name='{map_name}']")
            
            # Check if any of the existing layers are stored maps (have Filename attribute and StoredFilename in MapParameters)
            stored_layer_exists = False
            for existing_layer in existing_layers:
                map_params = existing_layer.find('MapParameters')
                if (map_params is not None and 
                    existing_layer.get('Filename') and 
                    map_params.get('OutputMode') == 'Stored Current Terrain' and
                    map_params.get('StoredFilename')):
                    stored_layer_exists = True
                    # Update terrain if specified
                    if terrain:
                        map_params.set('Terrain', terrain)
                        logger.info(f"  - Updated existing stored map '{map_name}' with terrain '{terrain}' under RASResults Layer '{rasresults_name}'")
                    break

            # Only create new stored map if no stored version exists
            if not stored_layer_exists:
                # Create new stored map layer
                map_parameters = stored_map['map_parameters'].copy()
                if terrain:
                    map_parameters['Terrain'] = terrain
                    logger.info(f"  - Terrain '{terrain}' specified. Updating map parameters for '{map_name}'.")

                # Create a new Layer element for stored map
                layer_elem = ET.Element('Layer')
                layer_elem.set('Name', map_name)
                layer_elem.set('Type', stored_map['type'])
                layer_elem.set('Checked', 'True')
                
                # Set the Filename attribute based on the RASResults folder name
                results_folder = rasresults_name.replace(" ", "_")
                filename = f".\\{results_folder}\\{map_name} (Max).vrt"
                layer_elem.set('Filename', filename)
                map_parameters['StoredFilename'] = filename

                # Create MapParameters sub-element
                map_params_elem = ET.SubElement(layer_elem, 'MapParameters')
                for param_key, param_value in map_parameters.items():
                    map_params_elem.set(param_key, str(param_value))

                # Append the new Layer to the RASResults Layer
                rasresults_layer.append(layer_elem)
                logger.info(f"  - Inserted new stored map '{map_name}' under RASResults Layer '{rasresults_name}'.")

    try:
        tree.write(rasmap_file, encoding='utf-8', xml_declaration=True)
        logger.info(f"RASMAP file '{rasmap_file}' has been updated successfully.")
    except Exception as e:
        raise IOError(f"Failed to write changes to the RASMAP file. Error: {e}")

def define_default_stored_maps(terrain=None):
    """
    Defines default stored maps (WSEL, Velocity, Depth).

    Parameters:
        terrain (str, optional): Terrain name to specify in map parameters.

    Returns:
        list of dict: List of stored map definitions.
    """
    stored_maps = [
        create_map_definition(
            name="WSEL",
            map_type="elevation",
            filename="./Grid Precip Infiltration/WSEL.vrt",
            profile_name="Max",
            terrain=terrain,
            additional_params={"LayerName": "Water Surface Elevation"}
        ),
        create_map_definition(
            name="Velocity",
            map_type="velocity",
            filename="./Grid Precip Infiltration/Velocity.vrt",
            profile_name="Max",
            terrain=terrain
        ),
        create_map_definition(
            name="Depth",
            map_type="depth",
            filename="./Grid Precip Infiltration/Depth.vrt",
            profile_name="Max",
            terrain=terrain
        )
    ]
    return stored_maps

def parse_rasmap_results(rasmap_file):
    """
    Parses the Results section of the RASMAP file to extract plan file names.
    Only includes plans where the HDF file exists on disk.

    Parameters:
        rasmap_file (str or Path): Path to the RASMAP file.

    Returns:
        list of str: List of plan file names without the .hdf extension.
    """
    rasmap_file = Path(rasmap_file)
    if not rasmap_file.is_file():
        raise FileNotFoundError(f"The file '{rasmap_file}' does not exist.")

    try:
        tree = ET.parse(rasmap_file)
        root = tree.getroot()
    except ET.ParseError as e:
        raise ValueError(f"Failed to parse the RASMAP file. Ensure it is a valid XML file. Error: {e}")

    results = root.find('Results')
    if results is None:
        raise ValueError("The RASMAP file does not contain a 'Results' section.")

    plan_files = []
    for layer in results.findall(".//Layer[@Type='RASResults']"):
        filename = layer.get('Filename')
        if filename and filename.lower().endswith('.hdf'):
            # Convert the HDF path to absolute path relative to the RASMAP file
            hdf_path = Path(rasmap_file.parent / filename)
            if hdf_path.is_file():
                plan_name = Path(filename).stem  # Remove .hdf extension
                plan_files.append(plan_name)
            else:
                logger.warning(f"Skipping non-existent HDF file: {hdf_path}")

    logger.info(f"Found {len(plan_files)} existing plan files: {plan_files}")
    return plan_files

def update_run_flags(plan_file_path, flags, terminal_box=None):
    """Updates the run flags in a HEC-RAS plan file."""
    plan_file_path = Path(plan_file_path)
    if not plan_file_path.is_file():
        raise FileNotFoundError(f"The plan file '{plan_file_path}' does not exist.")

    flag_mapping = {
        'geometry_preprocessor': 'Run HTab',
        'unsteady_flow_simulation': 'Run UNet',
        'run_sediment': 'Run Sediment',
        'floodplain_mapping': 'Run RASMapper'
    }

    original_flags = {}
    changes_made = False

    try:
        # Read the file content
        with open(plan_file_path, 'r') as file:
            lines = file.readlines()

        # Process each line
        for i, line in enumerate(lines):
            for key, file_key in flag_mapping.items():
                if key in flags and flags[key] is not None and line.strip().startswith(file_key):
                    original_value = line.strip().split('=')[-1].strip()
                    original_flags[key] = original_value
                    new_value = '1' if flags[key] else '0'
                    
                    if original_value != new_value:
                        lines[i] = f"{file_key}= {new_value}\n"
                        changes_made = True
                        if terminal_box:
                            terminal_box.insert(tk.END, f"Updated {file_key} from {original_value} to {new_value} in {plan_file_path.name}\n")
                            terminal_box.see(tk.END)

        # Only write if changes were made
        if changes_made:
            with open(plan_file_path, 'w') as file:
                file.writelines(lines)
            logger.info(f"Successfully updated run flags in plan file: {plan_file_path}")
        else:
            logger.info(f"No changes needed for plan file: {plan_file_path}")

        return original_flags

    except IOError as e:
        logger.error(f"Error updating run flags in plan file {plan_file_path}: {e}")
        raise

def restore_run_flags(plan_file_path, original_flags, terminal_box=None):
    """
    Restores the original run flags in a HEC-RAS plan file.

    Parameters:
        plan_file_path (str or Path): Full path to the plan file.
        original_flags (dict): Original flag settings to restore.
        terminal_box (scrolledtext.ScrolledText, optional): Terminal box to display messages.

    Returns:
        None
    """
    plan_file_path = Path(plan_file_path)
    if not plan_file_path.is_file():
        raise FileNotFoundError(f"The plan file '{plan_file_path}' does not exist.")

    flag_mapping = {
        'geometry_preprocessor': 'Run HTab',
        'unsteady_flow_simulation': 'Run UNet',
        'run_sediment': 'Run Sediment',
        'floodplain_mapping': 'Run RASMapper'
    }

    try:
        with open(plan_file_path, 'r') as file:
            lines = file.readlines()

        for i, line in enumerate(lines):
            for key, file_key in flag_mapping.items():
                if key in original_flags and line.strip().startswith(file_key):
                    original_value = original_flags[key]
                    lines[i] = f"{file_key}= {original_value}\n"
                    if terminal_box:
                        terminal_box.insert(tk.END, f"Restored {file_key} to {original_value} in {plan_file_path.name}\n")
                        terminal_box.see(tk.END)

        with open(plan_file_path, 'w') as file:
            file.writelines(lines)

        logger.info(f"Successfully restored run flags in plan file: {plan_file_path}")

    except IOError as e:
        logger.error(f"Error restoring run flags in plan file {plan_file_path}: {e}")
        raise

def open_hec_ras_project(ras_exe_path, project_prj_path, rasmap_file, terminal_box=None):
    """
    Opens the HEC-RAS project in Ras.exe, adjusts run flags, and provides user prompts.

    Parameters:
        ras_exe_path (str or Path): Path to Ras.exe.
        project_prj_path (str or Path): Path to the .prj file.
        rasmap_file (str or Path): Path to the .rasmap file.
        terminal_box (scrolledtext.ScrolledText, optional): Terminal box to display messages.

    Returns:
        None
    """
    ras_exe_path = Path(ras_exe_path)
    project_prj_path = Path(project_prj_path)
    rasmap_file = Path(rasmap_file)

    if not ras_exe_path.is_file():
        messagebox.showerror("Error", f"Ras.exe not found at {ras_exe_path}")
        return

    if not project_prj_path.is_file():
        messagebox.showerror("Error", f"Project .prj file not found at {project_prj_path}")
        return

    selected_terrain = self.selected_terrain.get()
    if not selected_terrain:
        messagebox.showerror("Error", "Please select a terrain.")
        return

    # Backup RASMAP and remove other terrains
    try:
        self.backup_file, removed_terrains = backup_and_filter_terrains(self.rasmap_file, selected_terrain)
    except Exception as e:
        messagebox.showerror("Error", f"Failed to modify RASMAP file: {e}")
        return

    # Parse rasmap to get plan file names
    try:
        plan_names = parse_rasmap_results(rasmap_file)
    except Exception as e:
        messagebox.showerror("Error", str(e))
        return

    # Define flags to set
    flags_to_set = {
        'geometry_preprocessor': False,
        'unsteady_flow_simulation': False,
        'run_sediment': False,
        'floodplain_mapping': True
    }

    # Define flags to restore after RAS is closed
    original_flags_dict = {}

    # Update run flags
    for plan_name in plan_names:
        plan_file_path = project_prj_path.parent / f"{plan_name}"
        try:
            original_flags = update_run_flags(plan_file_path, flags_to_set, terminal_box)
            original_flags_dict[plan_file_path] = original_flags
        except Exception as e:
            messagebox.showerror("Error", f"Failed to update run flags for {plan_file_path.name}: {e}")
            return

    # Launch HEC-RAS
    try:
        subprocess.Popen([str(ras_exe_path), str(project_prj_path)])
        logger.info(f"Opened HEC-RAS project: {project_prj_path}")
    except Exception as e:
        messagebox.showerror("Error", f"Failed to open HEC-RAS: {e}")
        return

    # Prompt user to run Unsteady Calculations
    messagebox.showinfo("HEC-RAS Opened", "HEC-RAS has been opened. Please run the Unsteady Calculations (Run Multiple) to create floodplain mapping results.\n\nAfter closing HEC-RAS, the script will restore the original run flags.")

    # Wait for Ras.exe to close
    def wait_for_ras():
        # Wait until Ras.exe is closed
        ras_process = None
        while True:
            time.sleep(1)
            for proc in psutil.process_iter(['exe']):
                if proc.info['exe'] and Path(proc.info['exe']).resolve() == ras_exe_path.resolve():
                    ras_process = proc
                    break
            else:
                break  # Ras.exe not found, exit loop

        # Restore terrains first
        if hasattr(self, 'backup_file'):
            try:
                restore_terrains_from_backup(self.rasmap_file, self.backup_file)
            except Exception as e:
                logger.error(f"Failed to restore terrains: {e}")

        # Restore run flags
        for plan_file, original_flags in original_flags_dict.items():
            try:
                restore_run_flags(plan_file, original_flags, terminal_box)
            except Exception as e:
                logger.error(f"Failed to restore run flags for {plan_file.name}: {e}")
        # Notify user
        if terminal_box:
            terminal_box.insert(tk.END, "Run flags and terrains have been restored.\n")
            terminal_box.see(tk.END)
        messagebox.showinfo("HEC-RAS Closed", "HEC-RAS has been closed. Run flags and terrains have been restored.\n\nYou can now open the project folder to check the results.")
        # Open project folder in Explorer
        subprocess.Popen(['explorer', str(project_prj_path.parent)])

    # Run the wait in a separate thread to prevent GUI freezing
    threading.Thread(target=wait_for_ras, daemon=True).start()

# GUI Application

class RASMapperLayerInserter(tk.Tk):
    def __init__(self):
        super().__init__()
        self.is_closing = False
        self.after_ids = []  # Keep track of all after callbacks
        
        self.title("RASMapper Stored Map Production Assistant")
        self.geometry("700x600")
        self.resizable(False, False)

        # Initialize variables
        self.rasmap_file = None
        self.project_prj_path = None
        self.terrain_names = []
        self.selected_terrain = tk.StringVar()
        self.maps_to_add = {
            "WSEL": tk.BooleanVar(value=True),
            "Velocity": tk.BooleanVar(value=True),
            "Depth": tk.BooleanVar(value=True)
        }
        self.ras_exe_path = tk.StringVar(value=r"C:\Program Files (x86)\HEC\HEC-RAS\6.6\Ras.exe")

        # Add tracking for RAS process and monitoring thread
        self.ras_process = None
        self.monitor_thread = None
        
        # Create UI components first
        self.create_widgets()
        
        # Initialize message queue and queue processor after terminal_box is created
        self.message_queue = queue.Queue()
        self.queue_processor = QueueProcessor(self.message_queue, self.terminal_box, self)
        self.queue_processor.process_queue()
        
        # Bind the window close event
        self.protocol("WM_DELETE_WINDOW", self.on_closing)

        # Setup logging to terminal box
        gui_handler = GuiHandler(self.terminal_box)
        logger.addHandler(gui_handler)
        
        # Log initial message to verify logging is working
        logger.info("Application started. Ready for input.")

    def create_widgets(self):
        padding = {'padx': 10, 'pady': 10}

        # RAS Project Folder Selection
        folder_frame = ttk.LabelFrame(self, text="HEC-RAS Project Folder")
        folder_frame.pack(fill="x", **padding)

        self.folder_path = tk.StringVar()
        folder_entry = ttk.Entry(folder_frame, textvariable=self.folder_path, width=60)
        folder_entry.pack(side="left", padx=(10, 5), pady=5)

        browse_button = ttk.Button(folder_frame, text="Browse", command=self.browse_folder)
        browse_button.pack(side="left", padx=5, pady=5)

        # Terrain Selection
        terrain_frame = ttk.LabelFrame(self, text="Select Terrain")
        terrain_frame.pack(fill="x", **padding)

        self.terrain_dropdown = ttk.Combobox(terrain_frame, textvariable=self.selected_terrain, state="readonly")
        self.terrain_dropdown.pack(fill="x", padx=10, pady=5)

        # Stored Map Layers to Add
        maps_frame = ttk.LabelFrame(self, text="Stored Map Layers to Add")
        maps_frame.pack(fill="x", **padding)

        for map_name, var in self.maps_to_add.items():
            cb = ttk.Checkbutton(maps_frame, text=map_name, variable=var)
            cb.pack(anchor='w', padx=20, pady=2)

        # Settings Frame
        settings_frame = ttk.LabelFrame(self, text="Settings")
        settings_frame.pack(fill="x", **padding)

        ras_exe_label = ttk.Label(settings_frame, text="Ras.exe Path:")
        ras_exe_label.pack(side="left", padx=(10, 5), pady=5)

        ras_exe_entry = ttk.Entry(settings_frame, textvariable=self.ras_exe_path, width=50)
        ras_exe_entry.pack(side="left", padx=5, pady=5)

        browse_ras_button = ttk.Button(settings_frame, text="Browse", command=self.browse_ras_exe)
        browse_ras_button.pack(side="left", padx=5, pady=5)

        # Action Buttons
        action_frame = ttk.Frame(self)
        action_frame.pack(fill="x", **padding)

        add_button = ttk.Button(action_frame, text="Step 1:\nAdd Selected Maps", command=self.add_maps)
        add_button.pack(side="left", expand=True, fill="x", padx=10)

        open_ras_button = ttk.Button(action_frame, text="Step 2:\nOpen Project in HEC-RAS for Floodplain Mapping", command=self.open_project_in_ras)
        open_ras_button.pack(side="left", expand=True, fill="x", padx=10)

        exit_button = ttk.Button(action_frame, text="Close HEC-RAS and Exit", command=self.on_closing)
        exit_button.pack(side="left", expand=True, fill="x", padx=10)

        # Terminal Box
        terminal_frame = ttk.LabelFrame(self, text="Program Terminal")
        terminal_frame.pack(fill="both", expand=True, padx=10, pady=10)

        self.terminal_box = scrolledtext.ScrolledText(
            terminal_frame,
            wrap=tk.WORD,
            height=10,
            font=('Consolas', 9)
        )
        self.terminal_box.pack(fill="both", expand=True, padx=5, pady=5)
        self.terminal_box.configure(state='disabled')

    def browse_folder(self):
        folder_selected = filedialog.askdirectory()
        if folder_selected:
            self.folder_path.set(folder_selected)
            self.project_prj_path = self.find_prj_file(folder_selected)
            self.load_rasmap()

    def find_prj_file(self, project_folder):
        prj_candidates = list(Path(project_folder).glob("*.prj"))
        if not prj_candidates:
            logger.error("No .prj file found in the selected folder.")
            messagebox.showerror("Error", "No .prj file found in the selected folder.")
            return None
        
        # If we have multiple .prj files, try to match with .rasmap name
        if len(prj_candidates) > 1:
            # Find the .rasmap file first
            rasmap_candidates = list(Path(project_folder).glob("*.rasmap"))
            if rasmap_candidates:
                rasmap_name = rasmap_candidates[0].stem  # Get name without extension
                # Look for matching .prj file
                for prj_file in prj_candidates:
                    if prj_file.stem == rasmap_name:
                        logger.info(f"Found matching .prj file: {prj_file.name}")
                        return prj_file
                
            logger.warning("Multiple .prj files found, none matching .rasmap name. Using the first one.")
            messagebox.showwarning("Warning", "Multiple .prj files found, none matching .rasmap name. Using the first one.")
        
        return prj_candidates[0]

    def browse_ras_exe(self):
        ras_exe_selected = filedialog.askopenfilename(
            title="Select Ras.exe",
            filetypes=[("Executable Files", "*.exe")],
            initialdir=r"C:\Program Files (x86)\HEC\HEC-RAS\6.6"
        )
        if ras_exe_selected:
            self.ras_exe_path.set(ras_exe_selected)

    def load_rasmap(self):
        project_folder = Path(self.folder_path.get())
        rasmap_candidates = list(project_folder.glob("*.rasmap"))
        if not rasmap_candidates:
            messagebox.showerror("Error", "No RASMAP file found in the selected folder.")
            self.terrain_dropdown['values'] = []
            self.rasmap_file = None
            return
        elif len(rasmap_candidates) > 1:
            messagebox.showwarning("Warning", "Multiple RASMAP files found. Using the first one.")
        self.rasmap_file = rasmap_candidates[0]
        try:
            self.terrain_names = extract_terrain_names(self.rasmap_file)
            self.terrain_dropdown['values'] = self.terrain_names
            if self.terrain_names:
                self.terrain_dropdown.current(0)
        except Exception as e:
            messagebox.showerror("Error", str(e))
            self.terrain_dropdown['values'] = []
            self.terrain_names = []

    def add_maps(self):
        if not self.rasmap_file:
            messagebox.showerror("Error", "Please select a valid HEC-RAS project folder containing a RASMAP file.")
            return

        terrain = self.selected_terrain.get()
        if not terrain:
            messagebox.showerror("Error", "Please select a terrain.")
            return

        # Define which maps to add based on user selection
        selected_maps = []
        if self.maps_to_add["WSEL"].get():
            selected_maps.append("WSEL")
        if self.maps_to_add["Velocity"].get():
            selected_maps.append("Velocity")
        if self.maps_to_add["Depth"].get():
            selected_maps.append("Depth")

        if not selected_maps:
            messagebox.showinfo("Info", "No maps selected to add.")
            return

        # Define stored maps to insert
        stored_maps = define_default_stored_maps(terrain=terrain)
        # Filter maps based on user selection
        maps_to_insert = [m for m in stored_maps if m['name'] in selected_maps]

        try:
            insert_stored_maps(self.rasmap_file, maps_to_insert, terrain=terrain)
            messagebox.showinfo("Success", f"Selected maps have been added to '{self.rasmap_file.name}'.")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to insert maps: {e}")

    def create_plans_table(self, plan_names):
        """
        Creates a formatted table showing plan numbers and their associated results layer names.
        
        Parameters:
            plan_names (list): List of plan names from the RASMAP file
            
        Returns:
            str: Formatted table as string
        """
        # Get results layer names for each plan
        table_rows = []
        tree = ET.parse(self.rasmap_file)
        root = tree.getroot()
        results = root.find('Results')
        
        if results is not None:
            for layer in results.findall(".//Layer[@Type='RASResults']"):
                plan_name = Path(layer.get('Filename', '')).stem
                if plan_name in plan_names:
                    layer_name = layer.get('Name', 'Unnamed')
                    table_rows.append(f"{plan_name}\t{layer_name}")
        
        if table_rows:
            header = "Plan Number\tResults Layer Name\n" + "-" * 50 + "\n"
            return header + "\n".join(table_rows)
        return "No plans with results found."

    def create_info_window(self, table_text):
        """
        Creates a non-blocking info window with plan information and close button.
        """
        info_window = tk.Toplevel(self)
        info_window.title("Plans Ready for Floodplain Mapping")
        info_window.geometry("500x400")
        
        # Make window stay on top
        info_window.transient(self)
        info_window.attributes('-topmost', True)
        
        # Add message and table
        message_label = ttk.Label(
            info_window, 
            text="The following plans have results files and are prepared for floodplain mapping.\n"
                 "Run or Run Multiple to Compute Stored Maps:",
            wraplength=450
        )
        message_label.pack(padx=10, pady=10)
        
        # Add table in a scrolled text widget
        table_text_widget = scrolledtext.ScrolledText(
            info_window, 
            wrap=tk.WORD, 
            width=60, 
            height=15,
            font=('Courier', 9)
        )
        table_text_widget.insert(tk.END, table_text)
        table_text_widget.configure(state='disabled')
        table_text_widget.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)
        
        # Add close button
        close_button = ttk.Button(
            info_window,
            text="Close HEC-RAS and Return to Main Window",
            command=lambda: self.close_ras_and_info(info_window)
        )
        close_button.pack(padx=10, pady=10)
        
        return info_window

    def close_ras_and_info(self, info_window):
        """
        Closes HEC-RAS and the info window.
        """
        # Close the info window
        info_window.destroy()
        
        # Terminate RAS process
        if self.ras_process:
            try:
                pid = self.ras_process.pid
                parent = psutil.Process(pid)
                for child in parent.children(recursive=True):
                    child.kill()
                parent.kill()
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.TimeoutExpired):
                pass

    def open_project_in_ras(self):
        if not self.rasmap_file:
            messagebox.showerror("Error", "Please select a valid HEC-RAS project folder containing a RASMAP file.")
            return

        if not self.project_prj_path or not self.project_prj_path.is_file():
            messagebox.showerror("Error", "Project .prj file not found. Ensure it exists in the project folder.")
            return

        selected_terrain = self.selected_terrain.get()
        if not selected_terrain:
            messagebox.showerror("Error", "Please select a terrain.")
            return

        # Create mapping backup after any stored maps are added but before terrain modifications
        try:
            self.mapping_backup = self.create_mapping_backup(self.rasmap_file)
        except Exception as e:
            messagebox.showerror("Error", f"Failed to create mapping backup: {e}")
            return

        # Backup RASMAP and remove other terrains
        try:
            self.backup_file, removed_terrains = backup_and_filter_terrains(self.rasmap_file, selected_terrain)
        except Exception as e:
            messagebox.showerror("Error", f"Failed to modify RASMAP file: {e}")
            return

        # Parse rasmap to get plan file names
        try:
            plan_names = parse_rasmap_results(self.rasmap_file)
            if not plan_names:
                messagebox.showerror("Error", "No plan files found in the RASMAP file.")
                return
            
            # Create and show non-blocking info window
            table_text = self.create_plans_table(plan_names)
            self.info_window = self.create_info_window(table_text)
            
        except Exception as e:
            messagebox.showerror("Error", f"Failed to parse RASMAP file: {e}")
            return

        # Define flags to set
        flags_to_set = {
            'geometry_preprocessor': False,
            'unsteady_flow_simulation': False,
            'run_sediment': False,
            'floodplain_mapping': True
        }

        # Store original flags for each plan file
        self.original_flags_dict = {}

        # Update run flags for all plan files
        for plan_name in plan_names:
            # Construct the exact plan file path
            plan_file = self.project_prj_path.parent / plan_name
            
            if not plan_file.exists():
                logger.error(f"Plan file not found: {plan_file}")
                continue

            logger.info(f"Processing plan file: {plan_file}")
            
            try:
                # Try to open the file first to verify we have write access
                with open(plan_file, 'r+') as f:
                    pass
                
                original_flags = update_run_flags(plan_file, flags_to_set, self.terminal_box)
                self.original_flags_dict[plan_file] = original_flags
                logger.info(f"Successfully updated run flags for plan: {plan_file.name}")
                
                # Verify the file was actually modified
                modified_time = plan_file.stat().st_mtime
                logger.info(f"Plan file {plan_file.name} modified time: {time.ctime(modified_time)}")
                
            except PermissionError:
                logger.error(f"Permission denied accessing plan file: {plan_file}")
                messagebox.showerror("Error", f"Permission denied accessing plan file: {plan_file}")
                self.restore_all_flags()
                return
            except Exception as e:
                logger.error(f"Failed to update run flags for {plan_file.name}: {e}")
                messagebox.showerror("Error", f"Failed to update run flags for {plan_file.name}: {e}")
                self.restore_all_flags()
                return

        try:
            # Launch RAS with quotes around paths
            cmd = [f'"{self.ras_exe_path.get()}"', f'"{str(self.project_prj_path)}"']
            self.ras_process = subprocess.Popen(" ".join(cmd), shell=True)
            
            # Start monitoring thread
            self.monitor_thread = threading.Thread(target=self.monitor_ras_process, daemon=True)
            self.monitor_thread.start()
            
            logger.info("HEC-RAS process started successfully")
            
            if self.terminal_box:
                self.terminal_box.insert(tk.END, f"Opening project in HEC-RAS...\n")
                self.terminal_box.see(tk.END)

        except Exception as e:
            logger.error(f"Failed to open project in HEC-RAS: {e}")
            messagebox.showerror("Error", f"Failed to open project in HEC-RAS: {e}")
            self.restore_all_flags()

    def monitor_ras_process(self):
        """Monitor RAS process and handle cleanup when it closes"""
        if self.ras_process:
            self.ras_process.wait()
            
            # Close the info window if it exists
            if hasattr(self, 'info_window') and self.info_window:
                self.info_window.destroy()
            
            # Restore from mapping backup
            if hasattr(self, 'mapping_backup'):
                try:
                    shutil.copy2(self.mapping_backup, self.rasmap_file)
                    self.mapping_backup.unlink()  # Remove the backup file
                    logger.info("Restored RASMAP file from mapping backup")
                except Exception as e:
                    logger.error(f"Failed to restore from mapping backup: {e}")

            # Restore run flags and show completion message
            if hasattr(self, 'original_flags_dict'):
                for plan_file, original_flags in self.original_flags_dict.items():
                    try:
                        restore_run_flags(plan_file, original_flags, self.terminal_box)
                    except Exception as e:
                        logger.error(f"Failed to restore run flags for {plan_file.name}: {e}")

            if not self.is_closing:  # Only show messages if not in process of closing
                self.terminal_box.insert(tk.END, "Run flags and RASMAP file have been restored.\n")
                self.terminal_box.see(tk.END)
                messagebox.showinfo("HEC-RAS Closed", "HEC-RAS has been closed. Run flags and RASMAP file have been restored.\n\nYou can now open the project folder to check the results.")
                subprocess.Popen(['explorer', str(self.project_prj_path.parent)])

    def on_closing(self):
        """Handle application closing"""
        self.is_closing = True
        
        # Force terminate RAS process if it exists
        if self.ras_process:
            try:
                # Get the process ID
                pid = self.ras_process.pid
                
                # Kill the process and all its children using psutil
                parent = psutil.Process(pid)
                for child in parent.children(recursive=True):
                    child.kill()
                parent.kill()
                
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.TimeoutExpired):
                pass  # Process already terminated or access denied
            
        # Destroy the window and exit immediately
        self.destroy()
        sys.exit(0)

    def create_mapping_backup(self, rasmap_file):
        """
        Creates a backup of the RASMAP file specifically for mapping operations.
        
        Parameters:
            rasmap_file (Path): Path to the RASMAP file
            
        Returns:
            Path: Path to the mapping backup file
        """
        mapping_backup = rasmap_file.with_suffix('.mapping.bak')
        shutil.copy2(rasmap_file, mapping_backup)
        logger.info(f"Created mapping backup at {mapping_backup}")
        return mapping_backup

# Main Execution

def main():
    app = RASMapperLayerInserter()
    app.mainloop()

if __name__ == "__main__":
    main()

==================================================

