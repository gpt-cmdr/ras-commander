File: c:\GH\ras-commander\.cursorrules
==================================================
# RAS Commander (ras-commander) Coding Assistant

## Overview

This Coding Assistant helps you write efficient and well-structured Python code for working with HEC-RAS projects using the RAS Commander (ras-commander) library.

**Key Features:**

* **Automates HEC-RAS tasks:** Streamlines project setup, plan execution, data management, and more.
* **Pythonic interface:** Leverages familiar Python libraries like pandas and pathlib for intuitive coding.
* **Flexible execution:** Supports single plan, sequential, and parallel execution modes.
* **Built-in examples:** Provides access to HEC-RAS example projects for learning and testing.

**Core Concepts:**

* **RAS Objects:** Represent HEC-RAS projects and their components (plans, geometry, flow files).
* **Project Initialization:** Use `init_ras_project()` to set up a project, choosing between global and custom instances.
* **File Handling:** pathlib.Path ensures consistent file path management across operating systems.
* **Data Management:** Pandas DataFrames organize project data for efficient manipulation.
* **Execution Modes:** Choose from single, sequential, or parallel execution based on project needs.
* **Utility Functions:** RasUtils provides common file operations and project management tasks.

## Classes, Functions and Arguments for ras_commander

Class/Function | Required Arguments | Optional Arguments
---------------|--------------------|--------------------|
RasPrj | | |
init_ras_project | ras_project_folder, ras_version | ras_instance
get_ras_exe | ras_version | - |
RasPlan | | |
set_geom | plan_number, new_geom | ras_object |
set_steady | plan_number, new_steady_flow_number | ras_object |
set_unsteady | plan_number, new_unsteady_flow_number | ras_object |
set_num_cores | plan_number, num_cores | ras_object |
clone_plan | template_plan | new_plan_shortid, ras_object |
RasGeo | | |
clear_geompre_files | | plan_files, ras_object |
RasUnsteady | | |
update_unsteady_parameters | unsteady_file, modifications | ras_object |
RasCmdr | | |
compute_plan | plan_number | dest_folder, ras_object, clear_geompre, num_cores, overwrite_dest |
compute_parallel | | plan_number, max_workers, num_cores, ras_object, dest_folder, overwrite_dest |
compute_test_mode | | plan_number, dest_folder_suffix, clear_geompre, num_cores, ras_object, overwrite_dest |
RasUtils | | |
create_backup | file_path | backup_suffix, ras_object |
restore_from_backup | backup_path | remove_backup, ras_object |
update_plan_file | plan_number_or_path, file_type, entry_number | ras_object |
RasExamples | | |
extract_project | project_names | - |

## Coding Assistance Rules:

Your role is building, refactoring and debugging Python scripts using Python 3.9+, focusing on automation tasks for HEC-RAS projects.

1. Prefer default libraries where possible, especially pathlib for file operations.
2. Use r-strings for file and directory path inputs.
3. Use f-strings for string formatting and concatenation.
4. Always use pathlib over os for manipulation of file and directory paths.
5. Print DataFrame names and variable names before displaying DataFrames.
6. Prefer pandas for data manipulation and analysis tasks.
7. Use matplotlib or bokeh for visualization when needed.
8. Always include comments for code readability and explain complex operations.
9. Use logging for informative output and debugging information.
10. Follow PEP 8 conventions for code style.
11. Provide clear error handling and user feedback.
12. When using RAS Commander functions, explain their purpose and key arguments.
13. Encourage consistent use of either global 'ras' object or custom instances throughout scripts.
14. Highlight best practices for parallel execution and performance optimization.
15. Suggest using RasExamples for testing and learning purposes when appropriate.

When revising code, write planning steps as comments before implementation, labeled as:
## Explicit Planning and Reasoning for Revisions

For geodataframes, use the 'union_all()' method instead of the deprecated 'unary_union' attribute.

Note for pandas >= 2.0: Use pd.concat instead of the removed append method.

Always provide full code segments with no elides.

==================================================

Folder: c:\GH\ras-commander\.gitignore
==================================================

Folder: c:\GH\ras-commander\ai_tools
==================================================

File: c:\GH\ras-commander\Comprehensive_Library_Guide.md
==================================================
# Comprehensive RAS-Commander Library Guide

## Introduction

RAS-Commander (`ras_commander`) is a Python library designed to automate and streamline operations with HEC-RAS projects. It provides a suite of tools for managing projects, executing simulations, and handling results. This guide offers a comprehensive overview of the library's key concepts, modules, best practices, and advanced usage patterns.

---

## Table of Contents

- [Key Concepts](#key-concepts)
- [Module Overview](#module-overview)
- [Best Practices](#best-practices)
- [Usage Patterns](#usage-patterns)
  - [Initializing a Project](#initializing-a-project)
  - [Cloning a Plan](#cloning-a-plan)
  - [Executing Plans](#executing-plans)
  - [Working with Multiple Projects](#working-with-multiple-projects)
  - [Performance Optimization](#performance-optimization)
- [Advanced Usage](#advanced-usage)
  - [RasExamples](#rasexamples)
  - [RasUtils](#rasutils)
  - [Artifact System](#artifact-system)
  - [AI-Driven Coding Tools](#ai-driven-coding-tools)
- [Troubleshooting](#troubleshooting)
- [Conclusion](#conclusion)

---

## Key Concepts

1. **RAS Objects**:
   - Represent HEC-RAS projects containing information about plans, geometries, and flow files.
   - Support both a global `ras` object and custom `RasPrj` instances for different projects.

2. **Project Initialization**:
   - Use `init_ras_project()` to initialize projects and set up RAS objects.
   - Handles project file discovery and data structure setup.

3. **File Handling**:
   - Utilizes `pathlib.Path` for consistent, platform-independent file paths.
   - Adheres to HEC-RAS file naming conventions (`.prj`, `.p01`, `.g01`, `.f01`, `.u01`).

4. **Data Management**:
   - Employs Pandas DataFrames to manage structured data about plans, geometries, and flow files.
   - Provides methods for accessing and updating these DataFrames.

5. **Execution Modes**:
   - **Single Plan Execution**: Run individual plans.
   - **Sequential Execution**: Run multiple plans in sequence.
   - **Parallel Execution**: Run multiple plans concurrently for improved performance.

6. **Example Projects**:
   - The `RasExamples` class offers functionality to download and manage HEC-RAS example projects for testing and learning.

7. **Utility Functions**:
   - `RasUtils` provides common utility functions for file operations, backups, and error handling.

8. **Artifact System**:
   - Handles substantial, self-contained content that users might modify or reuse, displayed in a separate UI window.

9. **AI-Driven Coding Tools**:
   - Integrates AI-powered tools like ChatGPT Assistant, LLM Summaries, Cursor IDE Integration, and Jupyter Notebook Assistant.

---

## Module Overview

1. **RasPrj**: Manages HEC-RAS project initialization and data.
2. **RasCmdr**: Handles execution of HEC-RAS simulations.
3. **RasPlan**: Provides functions for plan file operations.
4. **RasGeo**: Manages geometry file operations.
5. **RasUnsteady**: Handles unsteady flow file operations.
6. **RasUtils**: Offers utility functions for common tasks.
7. **RasExamples**: Manages example HEC-RAS projects.

---

## Best Practices

### 1. RAS Object Usage

- **Single Project Scripts**:
  - Use the global `ras` object for simplicity.
    ```python
    from ras_commander import ras, init_ras_project

    init_ras_project("/path/to/project", "6.5")
    # Use ras object for operations
    ```

- **Multiple Projects**:
  - Create separate `RasPrj` instances for each project.
    ```python
    from ras_commander import RasPrj, init_ras_project

    project1 = init_ras_project("/path/to/project1", "6.5", ras_instance=RasPrj())
    project2 = init_ras_project("/path/to/project2", "6.5", ras_instance=RasPrj())
    ```

- **Consistency**:
  - Avoid mixing global and custom RAS objects in the same script.

### 2. Plan Specification

- Use plan numbers as strings (e.g., `"01"`, `"02"`) for consistency.
  ```python
  RasCmdr.compute_plan("01")
  ```

- Check available plans before specifying plan numbers.
  ```python
  print(ras.plan_df)  # Displays available plans
  ```

### 3. Geometry Preprocessor Files

- Clear geometry preprocessor files before significant changes.
  ```python
  RasGeo.clear_geompre_files()
  ```

- Use `clear_geompre=True` for a clean computation environment.
  ```python
  RasCmdr.compute_plan("01", clear_geompre=True)
  ```

### 4. Parallel Execution

- Adjust `max_workers` and `num_cores` based on system capabilities.
  ```python
  RasCmdr.compute_parallel(max_workers=4, num_cores=2)
  ```

- Use `dest_folder` to organize outputs and prevent conflicts.
  ```python
  RasCmdr.compute_parallel(dest_folder="/path/to/results")
  ```

### 5. Error Handling

- Implement try-except blocks to handle potential errors.
  ```python
  try:
      RasCmdr.compute_plan("01")
  except FileNotFoundError:
      print("Plan file not found")
  ```

- Utilize logging for informative output.
  ```python
  import logging
  logging.basicConfig(level=logging.INFO)
  ```

### 6. File Path Handling

- Use `pathlib.Path` for robust file and directory operations.
  ```python
  from pathlib import Path
  project_path = Path("/path/to/project")
  ```

### 7. Type Hinting

- Apply type hints to improve code readability and IDE support.
  ```python
  def compute_plan(plan_number: str, clear_geompre: bool = False) -> bool:
      ...
  ```

---

## Usage Patterns

### Initializing a Project

```python
from ras_commander import init_ras_project, ras

init_ras_project("/path/to/project", "6.5")
print(f"Working with project: {ras.project_name}")
```

### Cloning a Plan

```python
from ras_commander import RasPlan

new_plan_number = RasPlan.clone_plan("01")
print(f"Created new plan: {new_plan_number}")
```

### Executing Plans

- **Single Plan Execution**:
  ```python
  from ras_commander import RasCmdr

  success = RasCmdr.compute_plan("01", num_cores=2)
  print(f"Plan execution {'successful' if success else 'failed'}")
  ```

- **Parallel Execution of Multiple Plans**:
  ```python
  from ras_commander import RasCmdr

  results = RasCmdr.compute_parallel(
      plan_numbers=["01", "02", "03"],
      max_workers=3,
      num_cores=4,
      dest_folder="/path/to/results",
      clear_geompre=True
  )

  for plan, success in results.items():
      print(f"Plan {plan}: {'Successful' if success else 'Failed'}")
  ```

### Working with Multiple Projects

```python
from ras_commander import RasPrj, init_ras_project, RasCmdr

# Initialize two separate projects
project1 = init_ras_project("/path/to/project1", "6.5", ras_instance=RasPrj())
project2 = init_ras_project("/path/to/project2", "6.5", ras_instance=RasPrj())

# Perform operations on each project
RasCmdr.compute_plan("01", ras_object=project1)
RasCmdr.compute_plan("02", ras_object=project2)

# Compare results
results1 = project1.get_hdf_entries()
results2 = project2.get_hdf_entries()
```

### Performance Optimization

```python
from ras_commander import RasCmdr

results = RasCmdr.compute_parallel(
    plan_numbers=["01", "02", "03"],
    max_workers=3,
    num_cores=4,
    dest_folder="/path/to/results",
    clear_geompre=True
)

for plan, success in results.items():
    print(f"Plan {plan}: {'Successful' if success else 'Failed'}")
```

- **Best Practices**:
  - Use `compute_parallel()` for concurrent plan execution.
  - Adjust `max_workers` and `num_cores` based on system capabilities.
  - Organize outputs with `dest_folder`.
  - Use `clear_geompre=True` for clean computations.

---

## Advanced Usage

### RasExamples

The `RasExamples` class provides functionality for managing HEC-RAS example projects. This is particularly useful for testing, learning, and development purposes.

#### Key Concepts

- **Example Project Management**: Access and manipulate example projects.
- **Automatic Downloading and Extraction**: Fetches projects from official sources.
- **Project Categorization**: Organizes projects into categories for easy navigation.

#### Usage Patterns

```python
from ras_commander import RasExamples

# Initialize RasExamples
ras_examples = RasExamples()

# Download example projects (if not already present)
ras_examples.get_example_projects()

# List available categories
categories = ras_examples.list_categories()
print(f"Available categories: {categories}")

# List projects in a specific category
steady_flow_projects = ras_examples.list_projects("Steady Flow")
print(f"Steady Flow projects: {steady_flow_projects}")

# Extract specific projects
extracted_paths = ras_examples.extract_project(["Bald Eagle Creek", "Muncie"])
for path in extracted_paths:
    print(f"Extracted project to: {path}")

# Clean up extracted projects when done
ras_examples.clean_projects_directory()
```

### RasUtils

The `RasUtils` class provides utility functions for common tasks in the `ras_commander` library.

#### Key Concepts

- **File and Directory Operations**: Create, delete, and manage files and directories.
- **Backup and Restoration**: Safeguard original files with backups.
- **Error Handling and Retries**: Robust methods to handle common file system errors.

#### Usage Patterns

```python
from ras_commander import RasUtils
from pathlib import Path

# Create a backup of a file
original_file = Path("project.prj")
backup_file = RasUtils.create_backup(original_file)

# Ensure a directory exists
output_dir = RasUtils.create_directory(Path("output"))

# Find files by extension
prj_files = RasUtils.find_files_by_extension(".prj")

# Get file information
file_size = RasUtils.get_file_size(original_file)
mod_time = RasUtils.get_file_modification_time(original_file)

# Update a plan file
RasUtils.update_plan_file("01", "Geom", 2)

# Remove a file or folder with retry logic
RasUtils.remove_with_retry(Path("temp_folder"), is_folder=True)
```

### Artifact System

The artifact system in `ras_commander` is designed to handle substantial, self-contained content that users might modify or reuse. Artifacts are displayed in a separate UI window for clarity.

#### When to Use Artifacts

- **Code Snippets**: Longer than 15 lines.
- **Complex Diagrams or Charts**: Visual representations that require focus.
- **Detailed Reports or Documentation**: Extensive text content.

#### Example of Creating an Artifact

```python
# Example Function Artifact

<ANTARTIFACTLINK identifier="example-function" type="application/vnd.ant.code" language="python" title="Example Function" isClosed="true" />
```

### AI-Driven Coding Tools

`ras_commander` integrates several AI-powered tools to enhance the coding experience.

#### Tools and Features

1. **ChatGPT Assistant**:
   - Use for general questions about the library and its usage.
   - Provides code suggestions and explanations.

2. **LLM Summaries**:
   - Utilize large language models for up-to-date context on the codebase.
   - Available in two versions: full codebase and examples/docstrings only.

3. **Cursor IDE Integration**:
   - Offers context-aware suggestions and documentation.
   - Automatically includes a `.cursorrules` file when opening the `ras_commander` folder.

4. **Jupyter Notebook Assistant**:
   - Dynamic code summarization and API interaction.
   - Allows for real-time querying and exploration of the library.

#### Best Practices

- **Documentation First**: Start with the provided documentation and examples.
- **Specific Queries**: Use the ChatGPT Assistant for specific questions or clarifications.
- **LLM Summaries**: Leverage when working with external AI models.
- **IDE Integration**: Use Cursor IDE for the most integrated coding experience.
- **Interactive Learning**: Explore the Jupyter Notebook Assistant for experimentation.

---

## Troubleshooting

### 1. Project Initialization Issues

- **Ensure Correct Paths**: Verify that the project path is accurate and the `.prj` file exists.
- **HEC-RAS Version**: Confirm that the specified HEC-RAS version is installed on your system.

### 2. Execution Failures

- **File Existence**: Check that all referenced plan, geometry, and flow files exist.
- **Executable Path**: Ensure the HEC-RAS executable path is correctly set.
- **Log Files**: Review HEC-RAS log files for specific error messages.

### 3. Parallel Execution Problems

- **Resource Allocation**: Reduce `max_workers` if encountering memory issues.
- **System Capabilities**: Adjust `num_cores` based on your system's capacity.
- **Clean Environment**: Use `clear_geompre=True` to prevent conflicts.

### 4. File Access Errors

- **Permissions**: Verify read/write permissions for the project directory.
- **File Locks**: Close any open HEC-RAS instances that might lock files.

### 5. Inconsistent Results

- **Geometry Files**: Clear geometry preprocessor files when making changes.
- **Plan Parameters**: Ensure all plan parameters are correctly set before execution.

---

## Conclusion

The RAS-Commander (`ras_commander`) library provides a powerful set of tools for automating HEC-RAS operations. By following the best practices outlined in this guide and leveraging the library's features, you can efficiently manage and execute complex HEC-RAS projects programmatically.

Remember to refer to the latest documentation and the library's source code for up-to-date information. As you become more familiar with `ras_commander`, you'll discover more ways to optimize your HEC-RAS workflows and increase productivity.

For further assistance, bug reports, or feature requests, please refer to the library's [GitHub repository](https://github.com/billk-FM/ras-commander) and issue tracker.

---

**Happy Modeling!**
==================================================

Folder: c:\GH\ras-commander\examples
==================================================

File: c:\GH\ras-commander\future_dev_roadmap.ipynb
==================================================
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Future Development Roadmap: \n",
    "    \n",
    "    1. Load critical keys and values from the project files into the project config\n",
    "        Implemented:\n",
    "        - Project Name\n",
    "        - Project Folder\n",
    "        - Lists of plan, flow, unsteady, and geometry files\n",
    "        - HEC-RAS Executable Path\n",
    "        \n",
    "        Not Implemented:\n",
    "        - Units \n",
    "        - Coordinate System \n",
    "        - rasmap file path (replace prj file path extension with \".rasmap\" and add it to the project config)\n",
    "        - Current Plan\n",
    "        - Description (including checks to see if it is a valid string and within the default max length)\n",
    "        - DSS Start Date=01JAN1999 (note format is MMDDYYY)\n",
    "        - DSS Start Time=1200 (note format is HHMM)\n",
    "        - DSS End Date=04JAN1999 (note format is MMDDYYY)\n",
    "        - DSS End Time=1200 (note format is HHMM)\n",
    "        - DSS File=dss\n",
    "        - DSS File=Bald_Eagle_Creek.dss \n",
    "              \n",
    "    Other not implemented:\n",
    "    \n",
    "    2. Load critical keys and lists of string values from the plan files into the project config\n",
    "        - Plan Title\n",
    "        - Plan Shortid\n",
    "        - Simulation Date\n",
    "        - Geometry File\n",
    "        - Flow File (may not be present) - if present, the plan is a 1D steady plan\n",
    "        - Unsteady File (may not be present) - if present, the plan is a 1D or 2D unsteady plan\n",
    "        - UNET D2 Name (may not be present) - if present, the plan is a 2D plan\n",
    "        - Type (1D Steady, 1D Unsteady, 1D/2D, or 2D)\n",
    "        - UNET 1D Methodology\n",
    "       \n",
    "    3. Load critical keys and strings from the unsteady flow files into the project config\n",
    "        - Flow Title\n",
    "        - Pandas Dataframe for any Boundary Conditions present and whether they are defined in the file or whether they use a DSS file input\n",
    "           - One dataframe for all unsteady flow files, with each Boundary Location in each file having its own row\n",
    "           - For each unsteady flow filereturn an appended dataframe with each boundary condition and it's \"Boundary Name\", \"Interval\", \"DSS Path\", \"Flow Hydrograph Slope\", and whether Use DSS is True or False\n",
    "           - Need to incorporate knowledge from the excel methods we used for setting boundary conditions\n",
    "           \n",
    "    4. Load critical keys and strings from the steady flow files into the project config\n",
    "        - Flow Title\n",
    "        - Since steady models are not as commonly used, this is a low priority integration (external contributions are welcome)\n",
    "               \n",
    "    \n",
    "    5. Load critical keys and values from the rasmap file into the project config\n",
    "        - rasmap_projection_string\n",
    "        - Version   #Ex: <Version>2.0.0</Version> \n",
    "        - RASProjectionFilename Filename=\".\\Terrain\\Projection.prj\"\n",
    "        \n",
    "        - List of ras terrains as pandas dataframes\n",
    "            - for each, list of tiff files and order\n",
    "            - flag whether terrain mods exist \n",
    "            \n",
    "        - List of Infiltration hdf files as pandas dataframes\n",
    "            - Mapping of infiltration layers to geometries\n",
    "            \n",
    "        - List of land cover hdf files as pandas dataframes\n",
    "            - Mapping of land cover to geometries\n",
    "        \n",
    "        - List of all Mannings N layers, hdf files and mapping to geometries as pandas dataframes\n",
    "            \n",
    "    6. Create a list of all valid hdf plan files are present in the project folder, and flag whether they contain a completed simulation\n",
    "    \n",
    "    This roadmap for the project_init function will provide the basic information needed to support most basic hec-ras automation workflows.  \n",
    "    \n",
    "    Remember, this project init might be called multiple times.  Every time, it should clear any previously created datafrarmes and variables and replace them.  It is important that revisions can be made, init be re-run, and information is current and reflects the current state of the project. \n",
    "\n",
    "       \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "NOTE: We will NOT need to extract all keys from the HEC-RAS plan files.  We only need to toggle relevant settings, and provide a low-level function that can handle setting a single key by passing a full path.  We will build on top of that function to make specialized functions for each key that is important enough to warrant automation.  Each should have a docstring explaining the keys and how to set them, so the end user does not need to determine those details.   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# HEC-RAS Plan File Extraction Strategy (Version 6.5)\n",
    "\n",
    "## Key Changes Observed:\n",
    "\n",
    "1. The Program Version has been updated to 6.50.\n",
    "2. Several new keys have been added.\n",
    "3. Some keys have been removed.\n",
    "4. The order of some keys has changed.\n",
    "\n",
    "## Observed Keys in Version 6.5 (1D Unsteady Plan File)\n",
    "\n",
    "| Key | Example Value | Extraction Strategy |\n",
    "|-----|---------------|---------------------|\n",
    "| Plan Title | Unsteady with Bridges and Dam | Split by '=' and take second part |\n",
    "| Program Version | 6.50 | Split by '=' and take second part |\n",
    "| Short Identifier | UnsteadyFlow | Split by '=' and take second part |\n",
    "| Simulation Date | 18FEB1999,0000,24FEB1999,0500 | Split by '=' and ',' to extract start and end dates/times |\n",
    "| Geom File | g01 | Split by '=' and take second part |\n",
    "| Flow File | u02 | Find all occurrences, split by '=' and take second part |\n",
    "| Subcritical Flow | (No value, presence indicates subcritical flow) | Check for presence of line |\n",
    "| K Sum by GR | 0 | Split by '=' and take second part |\n",
    "| Std Step Tol | 0.01 | Split by '=' and take second part |\n",
    "| Critical Tol | 0.01 | Split by '=' and take second part |\n",
    "| Num of Std Step Trials | 20 | Split by '=' and take second part |\n",
    "| Max Error Tol | 0.3 | Split by '=' and take second part |\n",
    "| Flow Tol Ratio | 0.001 | Split by '=' and take second part |\n",
    "| Split Flow NTrial | 30 | Split by '=' and take second part |\n",
    "| Split Flow Tol | 0.02 | Split by '=' and take second part |\n",
    "| Split Flow Ratio | 0.02 | Split by '=' and take second part |\n",
    "| Log Output Level | 0 | Split by '=' and take second part |\n",
    "| Friction Slope Method | 2 | Split by '=' and take second part |\n",
    "| Unsteady Friction Slope Method | 2 | Split by '=' and take second part |\n",
    "| Unsteady Bridges Friction Slope Method | 1 | Split by '=' and take second part |\n",
    "| Parabolic Critical Depth | (No value, presence indicates use) | Check for presence of line |\n",
    "| Global Vel Dist | 0 , 0 , 0 | Split by '=' and then by ',' |\n",
    "| Global Log Level | 0 | Split by '=' and take second part |\n",
    "| CheckData | True | Split by '=' and take second part |\n",
    "| Encroach Param | -1 ,0,0, 0 | Split by '=' and then by ',' |\n",
    "| Flow Ratio Target | (Empty in example) | Split by '=' and take second part if present |\n",
    "| Flow Ratio Tolerance | 0.1 | Split by '=' and take second part |\n",
    "| Flow Ratio Initial Ratio | (Empty in example) | Split by '=' and take second part if present |\n",
    "| Flow Ratio Min Ratio | 0.5 | Split by '=' and take second part |\n",
    "| Flow Ratio Max Ratio | 4 | Split by '=' and take second part |\n",
    "| Flow Ratio Max Iterations | 10 | Split by '=' and take second part |\n",
    "| Flow Ratio Reference | (Empty in example) | Split by '=' and take second part if present |\n",
    "| Computation Interval | 2MIN | Split by '=' and parse value and unit |\n",
    "| Output Interval | 1HOUR | Split by '=' and parse value and unit |\n",
    "| Instantaneous Interval | 2HOUR | Split by '=' and parse value and unit |\n",
    "| Mapping Interval | 1HOUR | Split by '=' and parse value and unit |\n",
    "| Computation Time Step Use Courant | 0 | Split by '=' and take second part |\n",
    "| Computation Time Step Use Time Series | 0 | Split by '=' and take second part |\n",
    "| Computation Time Step Max Courant | (Empty in example) | Split by '=' and take second part if present |\n",
    "| Computation Time Step Min Courant | (Empty in example) | Split by '=' and take second part if present |\n",
    "| Computation Time Step Count To Double | 0 | Split by '=' and take second part |\n",
    "| Computation Time Step Max Doubling | 0 | Split by '=' and take second part |\n",
    "| Computation Time Step Max Halving | 0 | Split by '=' and take second part |\n",
    "| Computation Time Step Residence Courant | 0 | Split by '=' and take second part |\n",
    "| Run HTab | 1 | Split by '=' and take second part |\n",
    "| Run UNet | 1 | Split by '=' and take second part |\n",
    "| Run Sediment | 0 | Split by '=' and take second part |\n",
    "| Run PostProcess | 1 | Split by '=' and take second part |\n",
    "| Run WQNet | 0 | Split by '=' and take second part |\n",
    "| Run RASMapper | 0 | Split by '=' and take second part |\n",
    "| UNET Theta | 1 | Split by '=' and take second part |\n",
    "| UNET Theta Warmup | 1 | Split by '=' and take second part |\n",
    "| UNET ZTol | 0.01 | Split by '=' and take second part |\n",
    "| UNET ZSATol | 0.1 | Split by '=' and take second part |\n",
    "| UNET QTol | (Empty in example) | Split by '=' and take second part if present |\n",
    "| UNET MxIter | 20 | Split by '=' and take second part |\n",
    "| UNET Max Iter WO Improvement | 0 | Split by '=' and take second part |\n",
    "| UNET MaxInSteps | 0 | Split by '=' and take second part |\n",
    "| UNET DtIC | 0 | Split by '=' and take second part |\n",
    "| UNET DtMin | 0 | Split by '=' and take second part |\n",
    "| UNET MaxCRTS | 20 | Split by '=' and take second part |\n",
    "| UNET WFStab | 2 | Split by '=' and take second part |\n",
    "| UNET SFStab | 1 | Split by '=' and take second part |\n",
    "| UNET WFX | 1 | Split by '=' and take second part |\n",
    "| UNET SFX | 1 | Split by '=' and take second part |\n",
    "| UNET Gravity | 32.17405 | Split by '=' and take second part |\n",
    "| UNET 1D Methodology | Finite Difference | Split by '=' and take second part |\n",
    "| UNET DSS MLevel | 4 | Split by '=' and take second part |\n",
    "| UNET Pardiso | 0 | Split by '=' and take second part |\n",
    "| UNET DZMax Abort | 100 | Split by '=' and take second part |\n",
    "| UNET Use Existing IB Tables | -1 | Split by '=' and take second part |\n",
    "| UNET Froude Reduction | False | Split by '=' and take second part |\n",
    "| UNET Froude Limit | 0.8 | Split by '=' and take second part |\n",
    "| UNET Froude Power | 4 | Split by '=' and take second part |\n",
    "| UNET D1 Cores | 0 | Split by '=' and take second part |\n",
    "| UNET WindReference | Eulerian | Split by '=' and take second part |\n",
    "| UNET WindDragFormulation | Hsu (1988) | Split by '=' and take second part |\n",
    "| UNET D2 Coriolis | 0 | Split by '=' and take second part |\n",
    "| UNET D2 Cores | 0 | Split by '=' and take second part |\n",
    "| UNET D2 Theta | 1 | Split by '=' and take second part |\n",
    "| UNET D2 Theta Warmup | 1 | Split by '=' and take second part |\n",
    "| UNET D2 Z Tol | 0.01 | Split by '=' and take second part |\n",
    "| UNET D2 Volume Tol | 0.01 | Split by '=' and take second part |\n",
    "| UNET D2 Max Iterations | 20 | Split by '=' and take second part |\n",
    "| UNET D2 Equation | 0 | Split by '=' and take second part |\n",
    "| UNET D2 TotalICTime | (Empty in example) | Split by '=' and take second part if present |\n",
    "| UNET D2 RampUpFraction | 0.5 | Split by '=' and take second part |\n",
    "| UNET D2 TimeSlices | 1 | Split by '=' and take second part |\n",
    "| UNET D2 Turbulence Formulation | Non-Conservative (original) | Split by '=' and take second part |\n",
    "| UNET D2 Eddy Viscosity | (Empty in example) | Split by '=' and take second part if present |\n",
    "| UNET D2 Transverse Eddy Viscosity | (Empty in example) | Split by '=' and take second part if present |\n",
    "| UNET D2 Smagorinsky Mixing | 0 | Split by '=' and take second part |\n",
    "| UNET D2 BCVolumeCheck | 0 | Split by '=' and take second part |\n",
    "| UNET D2 Latitude | (Empty in example) | Split by '=' and take second part if present |\n",
    "| UNET D2 Cores | 0 | Split by '=' and take second part |\n",
    "| UNET D2 SolverType | PARDISO (Direct) | Split by '=' and take second part |\n",
    "| UNET D2 Minimum Iterations | 3 | Split by '=' and take second part |\n",
    "| UNET D2 Maximum Iterations | 30 | Split by '=' and take second part |\n",
    "| UNET D2 Restart Number | 10 | Split by '=' and take second part |\n",
    "| UNET D2 Relaxation Coeff | 1.3 | Split by '=' and take second part |\n",
    "| UNET D2 SOR Precondition Iterations | 10 | Split by '=' and take second part |\n",
    "| UNET D2 ILUT Maximum Fill | 8 | Split by '=' and take second part |\n",
    "| UNET D2 ILUT Tolerance | 1E-08 | Split by '=' and take second part |\n",
    "| UNET D2 Convergence Tolerance | 0.00001 | Split by '=' and take second part |\n",
    "| PS Theta | 1 | Split by '=' and take second part |\n",
    "| PS WS Tol | 0.01 | Split by '=' and take second part |\n",
    "| PS Volume Tol | 0.01 | Split by '=' and take second part |\n",
    "| PS Max Iterations | 20 | Split by '=' and take second part |\n",
    "| PS Time Slices | 1 | Split by '=' and take second part |\n",
    "| PS Iterate With 2D | 0 | Split by '=' and take second part |\n",
    "| PS Cores | 0 | Split by '=' and take second part |\n",
    "| UNET D1D2 MaxIter | 0 | Split by '=' and take second part |\n",
    "| UNET D1D2 ZTol | 0.01 | Split by '=' and take second part |\n",
    "| UNET D1D2 QTol | 0.1 | Split by '=' and take second part |\n",
    "| UNET D1D2 MinQTol | 1 | Split by '=' and take second part |\n",
    "| DSS File | dss | Split by '=' and take second part |\n",
    "| Write IC File | 0 | Split by '=' and take second part |\n",
    "| Write IC File at Fixed DateTime | 0 | Split by '=' and take second part |\n",
    "| IC Time | ,, | Split by '=' and then by ',' |\n",
    "| Write IC File Reoccurance | (Empty in example) | Split by '=' and take second part if present |\n",
    "| Write IC File at Sim End | 0 | Split by '=' and take second part |\n",
    "| Echo Input | False | Split by '=' and take second part |\n",
    "| Echo Parameters | False | Split by '=' and take second part |\n",
    "| Echo Output | False | Split by '=' and take second part |\n",
    "| Write Detailed | 0 | Split by '=' and take second part |\n",
    "| HDF Write Warmup | 0 | Split by '=' and take second part |\n",
    "| HDF Write Time Slices | 0 | Split by '=' and take second part |\n",
    "| HDF Flush | 0 | Split by '=' and take second part |\n",
    "| HDF Compression | 1 | Split by '=' and take second part |\n",
    "| HDF Chunk Size | 1 | Split by '=' and take second part |\n",
    "| HDF Spatial Parts | 1 | Split by '=' and take second part |\n",
    "| HDF Use Max Rows | 0 | Split by '=' and take second part |\n",
    "| HDF Fixed Rows | 1 | Split by '=' and take second part |\n",
    "| Stage Flow Hydrograph | Bald Eagle      ,Loc Hav         ,138154.4 | Find all occurrences, split by '=' and ',' |\n",
    "| Calibration Method | 0 | Split by '=' and take second part |\n",
    "| Calibration Iterations | 20 | Split by '=' and take second part |\n",
    "| Calibration Max Change | 0.05 | Split by '=' and take second part |\n",
    "| Calibration Tolerance | 0.2 | Split by '=' and take second part |\n",
    "| Calibration Maximum | 1.5 | Split by '=' and take second part |\n",
    "| Calibration Minimum | 0.5 | Split by '=' and take second part |\n",
    "| Calibration Optimization Method | 1 | Split by '=' and take second part |\n",
    "| Calibration Window | ,,, | Split by '=' and then by ',' |\n",
    "| WQ AD Non Conservative | (No value, presence indicates use) | Check for presence of line |\n",
    "| WQ ULTIMATE | -1 | Split by '=' and take second part |\n",
    "| WQ Max Comp Step | 1HOUR | Split by '=' and parse value and unit |\n",
    "| WQ Output Interval | 15MIN | Split by '=' and parse value and unit |\n",
    "| WQ Output Selected Increments | 0 | Split by '=' and take second part |\n",
    "| WQ Create Restart | 0 | Split by '=' and take second part |\n",
    "| WQ Fixed Restart | 0 | Split by '=' and take second part |\n",
    "| WQ Restart Simtime | (Empty in example) | Split by '=' and take second part if present |\n",
    "| WQ Restart Date | (Empty in example) | Split by '=' and take second part if present |\n",
    "| WQ Restart Hour | (Empty in example) | Split by '=' and take second part if present |\n",
    "| WQ System Summary | 0 | Split by '=' and take second part |\n",
    "| WQ Write To DSS | 0 | Split by '=' and take second part |\n",
    "| Sorting and Armoring Iterations | 10 | Split by '=' and take second part |\n",
    "| XS Update Threshold | 0.02 | Split by '=' and take second part |\n",
    "| Bed Roughness Predictor | 0 | Split by '=' and take second part |\n",
    "| Hydraulics Update Threshold | 0.02 | Split by '=' and take second part |\n",
    "| Energy Slope Method | 0 | Split by '=' and take second part |\n",
    "| Volume Change Method | 1 | Split by '=' and take second part |\n",
    "| Sediment Retention Method | 0 | Split by '=' and take second part |\n",
    "| Sediment TS Multiplier | 1 | Split by '=' and take second part |\n",
    "| Warm Up Method | 0 | Split by '=' and take second part |\n",
    "| Warm Up Duration | (Empty in example) | Split by '=' and take second part if present |\n",
    "| Warm Up Duration - Concentration | (Empty in example) | Split by '=' and take second part if present |\n",
    "| Warm Up Duration - Gradation | (Empty in example) | Split by '=' and take second part if present |\n",
    "| Warm Up Duration - Bathymetry | (Empty in example) | Split by '=' and take second part if present |\n",
    "| XS Weighting Method | 0 | Split by '=' and take second part |\n",
    "| Number of US Weighted Cross Sections | 1 | Split by '=' and take second part |\n",
    "| Number of DS Weighted Cross Sections | 1 | Split by '=' and take second part |\n",
    "| Upstream XS Weight | 0 | Split by '=' and take second part |\n",
    "| Main XS Weight | 1 | Split by '=' and take second part |\n",
    "| Downstream XS Weight | 0 | Split by '=' and take second part |\n",
    "| Number of DS XS's Weighted with US Boundary | 1 | Split by '=' and take second part |\n",
    "| Upstream Boundary Weight | 1 | Split by '=' and take second part |\n",
    "| Weight of XSs Associated with US Boundary | 0 | Split by '=' and take second part |\n",
    "| Number of US XS's Weighted with DS Boundary | 1 | Split by '=' and take second part |\n",
    "| Downstream Boundary Weight | 0.5 | Split by '=' and take second part |\n",
    "| Weight of XSs Associated with DS Boundary | 0.5 | Split by '=' and take second part |\n",
    "| Percentile Method | 0 | Split by '=' and take second part |\n",
    "| Sediment Output Level | 4 | Split by '=' and take second part |\n",
    "| Mass or Volume Output | 0 | Split by '=' and take second part |\n",
    "| Output Increment Type | 1 | Split by '=' and take second part |\n",
    "| Profile and TS Output Increment | 10 | Split by '=' and take second part |\n",
    "| Transport Output Increment | 1 | Split by '=' and take second part |\n",
    "| XS Output Flag | 0 | Split by '=' and take second part |\n",
    "| XS Output Increment | 10 | Split by '=' and take second part |\n",
    "| Read HDF5 Sediment Hotstart | 0 | Split by '=' and take second part |\n",
    "| Sediment Hotstart Type | 0 | Split by '=' and take second part |\n",
    "| Sediment Hotstart File | (Empty in example) | Split by '=' and take second part if present |\n",
    "| Sediment Hotstart Date | (Empty in example) | Split by '=' and take second part if present |\n",
    "| Sediment Hotstart Time | (Empty in example) | Split by '=' and take second part if present |\n",
    "| Write Gradation File | 0 | Split by '=' and take second part |\n",
    "| Read Gradation Hotstart | 0 | Split by '=' and take second part |\n",
    "| Gradation File Name | (Empty in example) | Split by '=' and take second part if present |\n",
    "| Write HDF5 File | 0 | Split by '=' and take second part |\n",
    "| Write Binary Output | 1 | Split by '=' and take second part |\n",
    "| Write DSS Sediment File | 0 | Split by '=' and take second part |\n",
    "| DSS Sediment Output Type | 1 | Split by '=' and take second part |\n",
    "| DSS Location | (Empty in example) | Split by '=' and take second part if present |\n",
    "| Summary Reach | (Empty in example) | Split by '=' and take second part if present |\n",
    "| SV Curve | 0 | Split by '=' and take second part |\n",
    "| Specific Gage Flag | 0 | Split by '=' and take second part |\n",
    "| Subcell Erosion Methods | 0 | Split by '=' and take second part |\n",
    "| Subcell Deposition Methods | 0 | Split by '=' and take second part |\n",
    "| Advection Scheme | 1 | Split by '=' and take second part |\n",
    "| Matrix Solver | 0 | Split by '=' and take second part |\n",
    "| Implicit Weighting Factor | 1 | Split by '=' and take second part |\n",
    "| Maximum Outer Loop Convergence Iterations | 5 | Split by '=' and take second part |\n",
    "| Convergence Maximum Absolute | 0.001 | Split by '=' and take second part |\n",
    "| Convergence RMSE | 0.0001 | Split by '=' and take second part |\n",
    "| Grain Fractions Max Abs Error | 0.001 | Split by '=' and take second part |\n",
    "| Max Subgrid Regions | 1 | Split by '=' and take second part |\n",
    "| Max Subgrid Length Scale | 3.402823E+38 | Split by '=' and take second part |\n",
    "| Initial Layer Thickness | 3 | Split by '=' and take second part |\n",
    "| Min Layer Thickness | 0.1 | Split by '=' and take second part |\n",
    "| Max Layer Thickness | 6 | Split by '=' and take second part |\n",
    "| Number of Layers | 5 | Split by '=' and take second part |\n",
    "\n",
    "## Key Changes and Implications:\n",
    "\n",
    "1. New sediment-related parameters: The updated file includes many new parameters related to sediment transport and modeling. This suggests that the sediment modeling capabilities have been expanded in Version 6.5.\n",
    "\n",
    "2. Computational parameters: New parameters for time step control and computational methods have been added, indicating more fine-grained control over the simulation process.\n",
    "\n",
    "3. 2D modeling parameters: Additional parameters for 2D modeling (e.g., UNET D2 parameters) suggest enhanced 2D modeling capabilities.\n",
    "\n",
    "4. Water quality parameters: Some water quality (WQ) parameters have been removed, while others remain. This might indicate a change in how water quality modeling is handled.\n",
    "\n",
    "5. Output control: New parameters for controlling output formats and intervals have been added, suggesting more flexible output options.\n",
    "\n",
    "## Revised Extraction Strategy:\n",
    "\n",
    "1. Maintain a dictionary of all of the relevant keys, including those from both versions.\n",
    "    - Have a separate function specifically to lookup keys in the plan file from a dictionary or by passing the key name. \n",
    "2. When parsing the file, check for the presence of each key and extract its value if present.\n",
    "3. For keys that may appear multiple times (e.g., 'Stage Flow Hydrograph'), collect all occurrences in a list.\n",
    "4. Use regular expressions for more complex parsing tasks, especially for keys with multiple values or specific formats.\n",
    "5. Implement version-specific parsing logic where necessary, based on the 'Program Version' value.\n",
    "6. Handle empty values consistently, either storing them as None or an empty string.\n",
    "7. For boolean flags (keys without values), store their presence as True in the dictionary.\n",
    "8. Implement error handling for unexpected formats or missing required keys.\n",
    "\n",
    "## Similarities Across Plan Types\n",
    "\n",
    "1. Basic Structure: All plan types (steady, unsteady, 1D, and 2D) maintain a similar overall structure with key-value pairs.\n",
    "2. Common Keys: Many keys are shared across all plan types, including basic project information, computational parameters, and output settings.\n",
    "3. Version Consistency: The key structure remains consistent across different HEC-RAS versions, with differences primarily in values rather than key names.\n",
    "\n",
    "## Key Differences in 2D Plans\n",
    "\n",
    "While 2D plans share many keys with 1D plans, they introduce several new keys and sections:\n",
    "\n",
    "1. 2D Specific Keys:\n",
    "   - UNET D2 Name\n",
    "   - UNET D2 Cores\n",
    "   - UNET D2 SolverType\n",
    "   - UNET D2 Turbulence Formulation\n",
    "   - UNET D2 Smagorinsky Mixing\n",
    "\n",
    "2. Breach Modeling Keys:\n",
    "   - Breach Loc (multiple entries)\n",
    "   - Breach Method\n",
    "   - Breach Geom\n",
    "   - Breach Start\n",
    "   - Breach Progression\n",
    "   - Simplified Physical Breach Downcutting\n",
    "   - Simplified Physical Breach Widening\n",
    "   - Mass Wasting Options\n",
    "   - Various DLBreach keys\n",
    "\n",
    "3. Adaptive Hydraulics (ADH) Keys:\n",
    "   - ADH Filename\n",
    "   - ADH Link\n",
    "\n",
    "## Updated Extraction Strategy\n",
    "\n",
    "1. Single Key-Value Pairs:\n",
    "   - Create a dictionary to store all single key-value pairs.\n",
    "   - Populate this dictionary for all plan types (steady, unsteady, 1D, 2D).\n",
    "   - Handle empty values consistently, storing them as None or an empty string.\n",
    "\n",
    "2. Multi-Key Pairs (e.g., Boundary Conditions, Breach Locations):\n",
    "   - Use pandas DataFrames to store multi-key pairs.\n",
    "   - Create separate DataFrames for different types of multi-key data (e.g., one for boundary conditions, another for breach locations).\n",
    "   - Ensure the DataFrame structure can accommodate data from all plan types.\n",
    "\n",
    "3. Plan Type Detection:\n",
    "   - Implement logic to detect the plan type (steady/unsteady, 1D/2D) based on the presence of specific keys.\n",
    "   - Use this detection to guide the extraction process, especially for 2D-specific keys.\n",
    "\n",
    "4. Consistent Extraction Process:\n",
    "   - Use a single extraction function that can handle all plan types.\n",
    "   - Within this function, use conditional logic to handle plan-type-specific keys and sections.\n",
    "\n",
    "5. Version Agnostic Approach:\n",
    "   - Design the extraction process to be version-agnostic, focusing on key names rather than specific values.\n",
    "   - Maintain a comprehensive list of all possible keys across versions and plan types.\n",
    "\n",
    "6. Handling 2D-Specific Data:\n",
    "   - For 2D-specific sections (like breach data), create dedicated DataFrames or nested dictionaries to capture the hierarchical structure.\n",
    "   - Ensure that the extraction process can handle the repetitive nature of certain 2D-specific sections (e.g., multiple breach locations).\n",
    "\n",
    "7. Error Handling and Logging:\n",
    "   - Implement robust error handling to manage unexpected key names or structures.\n",
    "   - Log any inconsistencies or unrecognized keys for further analysis.\n",
    "\n",
    "By following this updated strategy, we can create a flexible and comprehensive extraction process that handles all types of HEC-RAS plan files consistently, regardless of the simulation type or software version. The resulting data structure will provide easy access to both common and plan-specific parameters, facilitating further analysis and processing of HEC-RAS simulation data.\n",
    "\n",
    "\n",
    "\n",
    "This revised strategy accounts for the changes in Version 6.5 while maintaining backward compatibility with earlier versions. It allows for flexible parsing of the plan file, accommodating both existing and potential future changes in the file structure."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

==================================================

File: c:\GH\ras-commander\LICENSE
==================================================
MIT License

Copyright (c) 2024 William M. Katzenmeyer

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so.

==================================================

File: c:\GH\ras-commander\pyproject.toml
==================================================
[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta:__legacy__"

==================================================

Folder: c:\GH\ras-commander\ras_commander
==================================================

File: c:\GH\ras-commander\README.md
==================================================
# RAS Commander (ras-commander)

RAS Commander is a Python library for automating HEC-RAS operations, providing a set of tools to interact with HEC-RAS project files, execute simulations, and manage project data. This library is an evolution of the RASCommander 1.0 Python Notebook Application previously released under HEC-Commander tools.

Contributors:
William Katzenmeyer, P.E., C.F.M. - billk@fenstermaker.com
Sean Micek, P.E., C.F.M. - smicek@fenstermaker.com
Aaron Nichols, P.E., C.F.M. - anichols@fenstermaker.com

## Features

- Automate HEC-RAS project management and simulations
- Support for both single and multiple project instances
- Parallel execution of HEC-RAS plans
- Utilities for managing geometry, plan, and unsteady flow files
- Example project management for testing and development
- Two primary operation modes: "Run Missing" and "Build from DSS"

## Installation

Install ras-commander using pip:

pip install pandas requests pathlib
pip install ras-commander

## Requirements

- Python 3.9+
- HEC-RAS 6.2 or later (other versions may work, all testing was done with version 6.2 and above)

For a full list of dependencies, see the `requirements.txt` file.

## Quick Start

from ras_commander import init_ras_project, RasCmdr, RasPlan

# Initialize a project
init_ras_project(r"/path/to/project", "6.5")

# Execute a single plan
RasCmdr.compute_plan("01", dest_folder=r"/path/to/results", overwrite_dest=True)

# Execute plans in parallel
results = RasCmdr.compute_parallel(
    plan_numbers=["01", "02"],
    max_workers=2,
    cores_per_run=2,
    dest_folder=r"/path/to/results",
    overwrite_dest=True
)

# Modify a plan
RasPlan.set_geom("01", "02")

## Key Components

- `RasPrj`: Manages HEC-RAS projects
- `RasCmdr`: Handles execution of HEC-RAS simulations
- `RasPlan`: Provides functions for modifying and updating plan files
- `RasGeo`: Handles operations related to geometry files
- `RasUnsteady`: Manages unsteady flow file operations
- `RasUtils`: Contains utility functions for file operations and data management
- `RasExamples`: Manages and loads HEC-RAS example projects

## RasExamples

The `RasExamples` class provides functionality for quickly loading and managing HEC-RAS example projects. This is particularly useful for testing and development purposes.

Key features:
- Download and extract HEC-RAS example projects
- List available project categories and projects
- Extract specific projects for use
- Manage example project data efficiently

Example usage:
from ras_commander import RasExamples

ras_examples = RasExamples()
ras_examples.get_example_projects()  # Downloads example projects if not already present
categories = ras_examples.list_categories()
projects = ras_examples.list_projects("Steady Flow")
extracted_paths = ras_examples.extract_project(["Bald Eagle Creek", "Muncie"])

## RasPrj

The `RasPrj` class is central to managing HEC-RAS projects within the ras-commander library. It handles project initialization, data loading, and provides access to project components.

Key features:
- Initialize HEC-RAS projects
- Load and manage project data (plans, geometries, flows, etc.)
- Provide easy access to project files and information

Note: While a global `ras` object is available for convenience, you can create multiple `RasPrj` instances to manage several projects simultaneously.

Example usage:
from ras_commander import RasPrj, init_ras_project

# Using the global ras object
init_ras_project("/path/to/project", "6.5")

# Creating a custom RasPrj instance
custom_project = RasPrj()
init_ras_project("/path/to/another_project", "6.5", ras_instance=custom_project)


## AI-Driven Coding Experience

ras-commander provides several AI-powered tools to enhance the coding experience:

1. ChatGPT Assistant: A specialized GPT model trained on the ras-commander codebase, available for answering queries and providing code suggestions.

2. LLM Summaries: Up-to-date summaries of the codebase for use with large language models like Claude or GPT-4.

3. Cursor IDE Integration: Custom rules for the Cursor IDE to provide context-aware suggestions and documentation.

4. Jupyter Notebook Assistant: A notebook for dynamic code summarization and API interaction.

These tools aim to streamline development and provide intelligent assistance when working with the ras-commander library.

## Documentation

For detailed usage instructions and API documentation, please refer to the [Comprehensive Library Guide](Comprehensive_Library_Guide.md).

## Examples

Check out the `examples/` directory for sample scripts demonstrating various features of ras-commander.

## Project Organization Diagram

ras_commander
├── .github
│   └── workflows
│       └── python-package.yml
├── ras_commander
│   ├── __init__.py
│   ├── RasCmdr.py
│   ├── RasExamples.py
│   ├── RasGeo.py
│   ├── RasPlan.py
│   ├── RasPrj.py
│   ├── RasUnsteady.py
│   └── RasUtils.py
├── examples
│   ├── 01_project_initialization.py
│   ├── 02_plan_operations.py
│   ├── 03_geometry_operations.py
│   ├── 04_unsteady_flow_operations.py
│   ├── 05_utility_functions.py
│   ├── 06_single_plan_execution.py
│   ├── 07_sequential_plan_execution.py
│   ├── 08_parallel_execution.py
│   ├── 09_specifying_plans.py
│   ├── 10_arguments_for_compute.py
│   ├── 11_Using_RasExamples.ipynb
│   ├── 12_plan_set_execution.py
│   └── 13_multiple_project_operations.py
├── tests
│   └── ... (test files)
├── .gitignore
├── LICENSE
├── README.md
├── STYLE_GUIDE.md
├── Comprehensive_Library_Guide.md
├── pyproject.toml
├── setup.cfg
├── setup.py
└── requirements.txt

## Inclusion of .cursorrules and ai_tools for AI-driven Coding Experience

Open the ras_commander folder in the Cursor IDE, and it will automatically include the .cursorrules file in your instructions. Additionally, two other provided methods for interacting with the library through your current AI subscriptions:

- ChatGPT: ras_commander GPT Assistant (LINK HERE)
- Latest LLM summaries of the code base:
   - Entire code base: LINK HERE (TOKEN COUNT) (for Claude or Gemini)
   - Examples and Function Docstrings Only: LINK HERE (TOKEN COUNT) (for GPT-4o, o1 or Llama 3.1 405b)
- Cursor IDE through .cursorrules file
- 'rascommander_code_assistant.ipynb' notebook in the ras_commander folder, which allows for dynamic summarization of the code base and API chatting directly through the notebook.

There are a series of scripts provided in the "llm_summaries" folder that provide summaries of the code base, and the docstrings of the functions. They can be run in your local environment, or provided to ChatGPT's code interpreter for execution.

## RAS-Cmdr GPT Assistant

The RAS Commander GPT assistant has access to the entire code base, and can be a helpful tool for understanding the library and its capabilities.  However, it is subject to the same context window limitations and file retrieval limitations as I have covered in ADD BLOG LINK HERE.  For best results, use the llm summaries above to provide robust context to the model before asking to generate complex workflows. 

## Current Uses and Roadmap Items

### Potential Uses (Roadmap Items) of HEC-RAS Automation Functions

This set of functions provides a powerful foundation for automating various aspects of HEC-RAS modeling workflows. Here are some potential applications:

1. **Calibration and Sensitivity Analysis:**
    - **Automated Parameter Variation:** Users can create multiple simulation scenarios with varying parameters (e.g., Manning's n values, boundary conditions, initial conditions) to calibrate their model against observed data.
    - **Sensitivity Testing:** Evaluate the impact of different input parameters on model outputs by generating a range of scenarios and analyzing the results. This helps identify critical parameters that require more attention during calibration.

2. **Real-time Forecasting:**
    - **Dynamic Model Updates:** Integrate with external data sources (e.g., weather forecasts, streamflow observations) to automatically update boundary conditions and initial conditions in unsteady flow files before running the simulation.
    - **Ensemble Forecasting:** Generate multiple forecasts by incorporating uncertainty in input data and model parameters. This provides a more comprehensive understanding of potential future flow conditions.

3. **Scenario Analysis:**
    - **Land Use Change Impacts:** Evaluate the effects of land use changes on flood risk by modifying Manning's n values using `extract_2d_mannings_tables`, `modify_2d_mannings_table`, and `write_2d_mannings_tables` and running simulations with updated geometry files.
    - **Climate Change Impacts:** Analyze the potential impacts of projected climate changes on flood risk by adjusting precipitation patterns and other relevant parameters in unsteady flow files.

4. **Batch Processing and High-Performance Computing:**
    - **Large-scale Model Runs:** Utilize `run_plans_parallel` to execute multiple simulations concurrently on a multi-core system, significantly reducing processing time for large-scale models or complex scenarios.
    - **Automated Report Generation:** Integrate with Python libraries like matplotlib and bokeh to automatically generate customized reports summarizing simulation results, including tables, figures, and maps.

5. **Model Development and Testing:**
    - **Rapid Prototyping:** Quickly set up and run new model configurations using template files and automated workflows, facilitating rapid model development and testing.
    - **Regression Testing:** Ensure model integrity and consistency after code changes or updates by automatically running a predefined set of simulations and comparing results with expected outputs.

6. **User-Friendly Interfaces:**
    - **GUI Development:** Integrate with Python GUI libraries like Tkinter or PyQt to create user-friendly interfaces for automating HEC-RAS workflows, allowing non-programmers to access the power of automation.

## Contributing

We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details on how to submit pull requests, report issues, and suggest improvements.

## Style Guide

This project follows a specific style guide to maintain consistency across the codebase. Please refer to the [Style Guide](STYLE_GUIDE.md) for details on coding conventions, documentation standards, and best practices.

## License

ras-commander is released under the MIT License. See the license file for details.

## Acknowledgments

RAS Commander is based on the HEC-Commander project's "Command Line is All You Need" approach, leveraging the HEC-RAS command-line interface for automation. The initial development of this library was presented in the HEC-Commander Tools repository.  In a 2024 Australian Water School webinar, Bill demonstrated the derivation of basic HEC-RAS automation functions from plain language instructions. Leveraging the previously developed code and AI tools, the library was created. The primary tools used for this initial development were Anthropic's Claude, GPT-4o, Google's Gemini Experimental models, and the Cursor AI Coding IDE.

## Contact

For questions, suggestions, or support, please contact:
William Katzenmeyer, P.E., C.F.M. - billk@fenstermaker.com

==================================================

File: c:\GH\ras-commander\requirements.txt
==================================================
# Core dependencies
pandas>=1.0.0
numpy>=1.18.0
pathlib>=1.0.1
requests>=2.25.0

# Data handling and analysis
h5py>=3.1.0

# Plotting (if needed)
matplotlib>=3.3.0

# Development and testing
pytest>=6.2.0
flake8>=3.9.0
black>=21.5b1

# Documentation
sphinx>=3.5.0
sphinx-rtd-theme>=0.5.0

# Packaging and distribution
setuptools>=50.3.2
wheel>=0.35.1
twine>=3.3.0
==================================================

File: c:\GH\ras-commander\setup.py
==================================================
from setuptools import setup, find_packages

setup(
    name="ras-commander",
    version="0.33.0",
    packages=["ras_commander"],
    include_package_data=True,
)
==================================================

File: c:\GH\ras-commander\STYLE_GUIDE.md
==================================================
# RAS Commander (ras-commander) Style Guide

## Table of Contents
1. [Naming Conventions](#1-naming-conventions)
2. [Code Structure and Organization](#2-code-structure-and-organization)
3. [Documentation and Comments](#3-documentation-and-comments)
4. [Code Style](#4-code-style)
5. [Error Handling](#5-error-handling)
6. [Testing](#6-testing)
7. [Version Control](#7-version-control)
8. [Type Hinting](#8-type-hinting)
9. [Project-Specific Conventions](#9-project-specific-conventions)
10. [Inheritance](#10-inheritance)
11. [RasUtils Usage](#11-rasutils-usage)
12. [Working with RasExamples](#12-working-with-rasexamples)

## 1. Naming Conventions

### 1.1 General Rules
- Use `snake_case` for all function and variable names
- Use `PascalCase` for class names
- Use `UPPER_CASE` for constants

### 1.2 Library-Specific Naming
- Informal Name: RAS Commander
- Package Name and GitHub Library Name: ras-commander (with a hyphen)
- Import Name: ras_commander (with an underscore)
- Main Class of functions for HEC-RAS Automation: RasCmdr

### 1.3 Function Naming
- Start function names with a verb describing the action
- Use clear, descriptive names
- Common verbs and their uses:
  - `get_`: retrieve data
  - `set_`: set values or properties
  - `compute_`: execute or calculate
  - `clone_`: copy
  - `clear_`: remove or reset data
  - `find_`: search
  - `update_`: modify existing data

### 1.4 Abbreviations
Use the following abbreviations consistently throughout the codebase:

- ras: HEC-RAS
- prj: Project
- geom: Geometry
- pre: Preprocessor
- geompre: Geometry Preprocessor
- num: Number
- init: Initialize
- XS: Cross Section
- DSS: Data Storage System
- GIS: Geographic Information System
- BC: Boundary Condition
- IC: Initial Condition
- TW: Tailwater

Use these abbreviations in lowercase for function and variable names (e.g., `geom`, not `Geom` or `GEOM`).

### 1.5 Class Naming
- Use `PascalCase` for class names (e.g., `FileOperations`, `PlanOperations`, `RasCmdr`)
- Class names should be nouns or noun phrases

### 1.6 Variable Naming
- Use descriptive names indicating purpose or content
- Prefix boolean variables with `is_`, `has_`, or similar

## 2. Code Structure and Organization

### 2.1 File Organization
- Group related functions into appropriate classes
- Keep each class in its own file, named after the class

### 2.2 Function Organization
- Order functions logically within a class
- Place common or important functions at the top of the class

### 2.3 Module Structure
- Use the following order for module contents:
  1. Module-level docstring
  2. Imports (grouped and ordered)
  3. Constants
  4. Classes
  5. Functions

## 3. Documentation and Comments

### 3.1 Docstrings
- Use docstrings for all modules, classes, methods, and functions
- Follow Google Python Style Guide format
- Include parameters, return values, and a brief description
- For complex functions, include examples in the docstring

### 3.2 Comments
- Use inline comments sparingly, only for complex logic
- Keep comments up-to-date with code changes
- Use TODO comments for future work, formatted as: `# TODO: description`

## 4. Code Style

### 4.1 Imports
- Order imports as follows:
  1. Standard library imports
  2. Third-party library imports
  3. Local application imports
- Use absolute imports
- Use `import ras_commander as ras` for shortening the library name in examples

### 4.2 Whitespace
- Follow PEP 8 guidelines
- Use 4 spaces for indentation (no tabs)
- Use blank lines to separate logical sections of code

### 4.3 Line Length
- Limit lines to 79 characters for code, 72 for comments and docstrings
- Use parentheses for line continuation in long expressions

## 5. Error Handling

- Use explicit exception handling with try/except blocks
- Raise custom exceptions when appropriate, with descriptive messages
- Use logging for error reporting and debugging information
- Use specific exception types when raising errors (e.g., `ValueError`, `FileNotFoundError`)
- Provide informative error messages that include relevant details
- Implement proper cleanup in finally blocks when necessary
- For user-facing functions, consider wrapping internal exceptions in custom exceptions specific to ras-commander

Example:
```python
try:
    result = compute_plan(plan_number)
except FileNotFoundError as e:
    raise RasCommanderError(f"Plan file not found: {e}")
except ValueError as e:
    raise RasCommanderError(f"Invalid plan parameter: {e}")
except Exception as e:
    raise RasCommanderError(f"Unexpected error during plan computation: {e}")
```

## 6. Testing

- Write unit tests for all functions and methods
- Use the `unittest` framework
- Aim for high test coverage, especially for critical functionality
- Include tests for both single-project and multi-project scenarios
- Write clear and descriptive test names
- Use setUp and tearDown methods for common test preparations and cleanups
- Use mock objects when appropriate to isolate units under test

## 7. Version Control

- Use meaningful commit messages that clearly describe the changes made
- Create feature branches for new features or significant changes
- Submit pull requests for code review before merging into the main branch
- Keep commits focused and atomic (one logical change per commit)
- Use git tags for marking releases
- Follow semantic versioning for release numbering

## 8. Type Hinting

- Use type hints for all function parameters and return values
- Use the `typing` module for complex types (e.g., `List`, `Dict`, `Optional`)
- Include type hints in function signatures and docstrings
- Use `Union` for parameters that can accept multiple types
- For methods that don't return a value, use `-> None`

Example:
```python
from typing import List, Optional

def process_plans(plan_numbers: List[str], max_workers: Optional[int] = None) -> bool:
    # Function implementation
    return True
```

## 9. Project-Specific Conventions

### 9.1 RAS Instance Handling
- Design functions to accept an optional `ras_object` parameter:
  ```python
  def some_function(param1, param2, ras_object=None):
      ras_obj = ras_object or ras
      ras_obj.check_initialized()
      # Function implementation
  ```

### 9.2 File Path Handling
- Use `pathlib.Path` for file and directory path manipulations
- Convert string paths to Path objects at the beginning of functions

### 9.3 DataFrame Handling
- Use pandas for data manipulation and storage where appropriate
- Prefer method chaining for pandas operations to improve readability

### 9.4 Parallel Execution
- Follow the guidelines in the "Benchmarking is All You Need" blog post for optimal core usage in parallel plan execution

### 9.5 Function Return Values
- Prefer returning meaningful values over modifying global state
- Use tuple returns for multiple values instead of modifying input parameters

## 10. Inheritance

### 10.1 General Principles

- Prioritize composition over inheritance when appropriate
- Design base classes for extension
- Clearly document the public API and subclass API using docstrings

### 10.2 Naming Conventions

- Public API: No leading underscores
- Subclass API: Single leading underscore (e.g., `_prepare_for_execution`)
- Internal attributes and methods: Single leading underscore
- Name mangling (double leading underscores): Use sparingly and document the decision clearly

### 10.3 Template Method Pattern

Consider using the template method pattern in base classes to define a high-level algorithm structure. Subclasses can then override specific steps to customize behavior.

### 10.4 Dataframe Access Control

Use properties to control access and modification of dataframes, providing a controlled interface for subclasses.

## 11. RasUtils Usage

- Use RasUtils for general-purpose utility functions that don't fit into other specific classes
- When adding new utility functions, ensure they are static methods of the RasUtils class
- Keep utility functions focused and single-purpose
- Document utility functions thoroughly, including examples of usage

Example:
```python
class RasUtils:
    @staticmethod
    def create_backup(file_path: Path, backup_suffix: str = "_backup") -> Path:
        """
        Create a backup of the specified file.

        Args:
            file_path (Path): Path to the file to be backed up
            backup_suffix (str): Suffix to append to the backup file name

        Returns:
            Path: Path to the created backup file

        Example:
            >>> backup_path = RasUtils.create_backup(Path("project.prj"))
            >>> print(f"Backup created at: {backup_path}")
        """
        # Function implementation
```

## 12. Working with RasExamples

- Use RasExamples for managing and loading example HEC-RAS projects
- Always check if example projects are already downloaded before attempting to download them again
- Use the `list_categories()` and `list_projects()` methods to explore available examples
- When extracting projects, use meaningful names and keep track of extracted paths
- Clean up extracted projects when they are no longer needed using `clean_projects_directory()`

Example:
```python
ras_examples = RasExamples()
if not ras_examples.is_project_extracted("Bald Eagle Creek"):
    extracted_path = ras_examples.extract_project("Bald Eagle Creek")[0]
    # Use the extracted project
    # ...
    # Clean up when done
    RasUtils.remove_with_retry(extracted_path, is_folder=True)
```

Remember, consistency is key. When in doubt, prioritize readability and clarity in your code. Always consider the maintainability and extensibility of the codebase when making design decisions.
==================================================

File: c:\GH\ras-commander\.gitignore\.gitignore
==================================================
# Ignore the example_projects folder and all its subfolders
examples/example_projects/

# 
workspace/
projects/
my_projects/


ignore egg info
*.egg-info/

.eggs/

# Ignore the Example_Projects_6_5.zip file
Example_Projects_6_5.zip

# Ignore the misc folder and all its subfolders
misc/
ras_commander/__pycache__/
__pycache__/
*.py[cod]
*.so
*.egg-info/
dist/
build/
.pytest_cache/
.venv/
venv/
==================================================

File: c:\GH\ras-commander\ai_tools\ras-commander_gpt_instructions.txt
==================================================
# RAS Commander (ras-commander) Coding Assistant

## Overview

This Coding Assistant helps you write efficient and well-structured Python code for working with HEC-RAS projects using the RAS Commander (ras-commander) library.

**Key Features:**

* **Automates HEC-RAS tasks:** Streamlines project setup, plan execution, data management, and more.
* **Pythonic interface:** Leverages familiar Python libraries like pandas and pathlib for intuitive coding.
* **Flexible execution:** Supports single plan, sequential, and parallel execution modes.
* **Built-in examples:** Provides access to HEC-RAS example projects for learning and testing.

**Core Concepts:**

* **RAS Objects:** Represent HEC-RAS projects and their components (plans, geometry, flow files).
* **Project Initialization:** Use `init_ras_project()` to set up a project, choosing between global and custom instances.
* **File Handling:** pathlib.Path ensures consistent file path management across operating systems.
* **Data Management:** Pandas DataFrames organize project data for efficient manipulation.
* **Execution Modes:** Choose from single, sequential, or parallel execution based on project needs.
* **Utility Functions:** RasUtils provides common file operations and project management tasks.

## Classes, Functions and Arguments for ras_commander

Class/Function | Required Arguments | Optional Arguments
---------------|--------------------|--------------------|
RasPrj | | |
init_ras_project | ras_project_folder, ras_version | ras_instance
get_ras_exe | ras_version | - |
RasPlan | | |
set_geom | plan_number, new_geom | ras_object |
set_steady | plan_number, new_steady_flow_number | ras_object |
set_unsteady | plan_number, new_unsteady_flow_number | ras_object |
set_num_cores | plan_number, num_cores | ras_object |
clone_plan | template_plan | new_plan_shortid, ras_object |
RasGeo | | |
clear_geompre_files | | plan_files, ras_object |
RasUnsteady | | |
update_unsteady_parameters | unsteady_file, modifications | ras_object |
RasCmdr | | |
compute_plan | plan_number | dest_folder, ras_object, clear_geompre, num_cores, overwrite_dest |
compute_parallel | | plan_number, max_workers, num_cores, ras_object, dest_folder, overwrite_dest |
compute_test_mode | | plan_number, dest_folder_suffix, clear_geompre, num_cores, ras_object, overwrite_dest |
RasUtils | | |
create_backup | file_path | backup_suffix, ras_object |
restore_from_backup | backup_path | remove_backup, ras_object |
update_plan_file | plan_number_or_path, file_type, entry_number | ras_object |
RasExamples | | |
extract_project | project_names | - |

## Coding Assistance Rules:

Your role is building, refactoring and debugging Python scripts using Python 3.9+, focusing on automation tasks for HEC-RAS projects.

1. Prefer default libraries where possible, especially pathlib for file operations.
2. Use r-strings for file and directory path inputs.
3. Use f-strings for string formatting and concatenation.
4. Always use pathlib over os for manipulation of file and directory paths.
5. Print DataFrame names and variable names before displaying DataFrames.
6. Prefer pandas for data manipulation and analysis tasks.
7. Use matplotlib or bokeh for visualization when needed.
8. Always include comments for code readability and explain complex operations.
9. Use logging for informative output and debugging information.
10. Follow PEP 8 conventions for code style.
11. Provide clear error handling and user feedback.
12. When using RAS Commander functions, explain their purpose and key arguments.
13. Encourage consistent use of either global 'ras' object or custom instances throughout scripts.
14. Highlight best practices for parallel execution and performance optimization.
15. Suggest using RasExamples for testing and learning purposes when appropriate.

When revising code, write planning steps as comments before implementation, labeled as:
## Explicit Planning and Reasoning for Revisions

For geodataframes, use the 'union_all()' method instead of the deprecated 'unary_union' attribute.

Note for pandas >= 2.0: Use pd.concat instead of the removed append method.

Always provide full code segments with no elides.

## Knowledge Files

When coding new RAS workflows, always refer to the Comprehensive Library Guide via retrieval: Comprehensive_Library_Guide.md

When coding new library functions, always refer to the Style Guide  via retrieval: 
STYLE_GUIDE.md

You have a text file with the entire repository's contents, that can be used for file search and retrieval. 

You also have a .zip file with the entire RAS-Commander library from github, containing full copies of all files.  Use your code interpreter to extract and read existing files in their entirety whenever your chunked retrieval is incomplete.  You can read up to 20,000 characters at a time (usually enough for the whole file). 

# Now, Analyze and Respond to the User's Query

When revising code, always provide full code segments without elisions.

-----
==================================================

File: c:\GH\ras-commander\ai_tools\rascommander_code_assistant.ipynb
==================================================
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# RAS-Commander Code Assistant\n",
    "\n",
    "Alpha, this only works with Claude 3.5 Sonnet for now\n",
    "\n",
    "Future devlopement will include multi-turn support and ability to select between different models\n",
    "\n",
    "Provide your own API key to make this work.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# User query\n",
    "user_query = \"\"\"   Make a table for each class file in the library with all functions, their arguments (with typing/expected input), and a short summary of the function's purpose.\n",
    "\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define files, folders and extensions to omit\n",
    "omit_folders = [\n",
    "    \"Bald Eagle Creek\", \n",
    "    \"__pycache__\", \n",
    "    \".git\", \n",
    "    \".github\", \n",
    "    \"tests\", \n",
    "    \"build\", \n",
    "    \"dist\", \n",
    "    \"ras_commander.egg-info\", \n",
    "    \"venv\", \n",
    "    \"example_projects\", \n",
    "    \"llm_summary\", \"misc\", \"future\", \"ai_tools\"\n",
    "]\n",
    "\n",
    "# Define file extensions to omit\n",
    "omit_extensions = [\n",
    "    # Common image file extensions\n",
    "    '.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.webp', '.svg', '.ico',\n",
    "    # Other binary file extensions\n",
    "    '.pdf', '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx',\n",
    "    '.zip', '.rar', '.7z', '.tar', '.gz',\n",
    "    '.exe', '.dll', '.so', '.dylib',\n",
    "    '.pyc', '.pyo', '.pyd',  # Python bytecode and compiled files\n",
    "    '.class',  # Java bytecode\n",
    "    '.log', '.tmp', '.bak', '.swp',  # Temporary and backup files\n",
    "    '.bat', '.sh',  # Script files\n",
    "]\n",
    "\n",
    "# Define files to omit based on keywords\n",
    "omit_files = [\n",
    "    'FunctionList.md',\n",
    "    'DS_Store',\n",
    "    'Thumbs.db',\n",
    "    'llmsummarize'\n",
    "    'example_projects.zip',\n",
    "    '11_accessing_example_projects.ipynb',\n",
    "    'Example_Projects_6_5.zip'\n",
    "    'github_code_assistant.ipynb',\n",
    "    'example_projects.ipynb',\n",
    "    '11_Using_RasExamples.ipynb',\n",
    "    'example_projects.csv',\n",
    "    'rascommander_code_assistant.ipynb',\n",
    "    'RasExamples.py'\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Successfully imported pandas\n",
      "Successfully imported anthropic\n",
      "Successfully imported tiktoken\n",
      "Successfully imported IPython.display\n",
      "Successfully imported astor\n",
      "All required packages have been installed and imported successfully.\n"
     ]
    }
   ],
   "source": [
    "# Install necessary packages\n",
    "def install_and_import(package_name, import_name=None):\n",
    "    import subprocess\n",
    "    import sys\n",
    "    if import_name is None:\n",
    "        import_name = package_name\n",
    "    try:\n",
    "        __import__(import_name)\n",
    "    except ImportError:\n",
    "        subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package_name])\n",
    "        __import__(import_name)\n",
    "    print(f\"Successfully imported {import_name}\")\n",
    "\n",
    "install_and_import(\"pandas\")\n",
    "install_and_import(\"anthropic\")\n",
    "install_and_import(\"tiktoken\")\n",
    "install_and_import(\"IPython\", \"IPython.display\")\n",
    "install_and_import(\"astor\")\n",
    "\n",
    "import os\n",
    "from pathlib import Path\n",
    "import pandas as pd\n",
    "import anthropic\n",
    "import tiktoken\n",
    "import astor\n",
    "from IPython.display import display, clear_output\n",
    "\n",
    "print(\"All required packages have been installed and imported successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set API Key\n",
    "#os.environ[\"ANTHROPIC_API_KEY\"] = 'YOUR KEY HERE'\n",
    "\n",
    "\n",
    "# Alternately, you can set the key from the file Anthropic_API_Key.txt\n",
    "with open('C:\\SCRATCH\\Anthropic_API_Key.txt', 'r') as file:\n",
    "    os.environ[\"ANTHROPIC_API_KEY\"] = file.read().strip()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "System message loaded successfully.\n"
     ]
    }
   ],
   "source": [
    "# Define system message from the ras_commander .cursorrules file\n",
    "from pathlib import Path\n",
    "\n",
    "def read_system_message():\n",
    "    # Get the current notebook's directory\n",
    "    current_dir = Path.cwd()\n",
    "    \n",
    "    # Path to the .cursorrules file (assuming it's in the parent directory)\n",
    "    cursor_rules_path = current_dir.parent / '.cursorrules'\n",
    "\n",
    "    # Check if .cursorrules exists\n",
    "    if not cursor_rules_path.exists():\n",
    "        raise FileNotFoundError(\"This notebook expects to be in a directory within the ras_commander repo which has a .cursorrules file in its parent directory.\")\n",
    "\n",
    "    # Read the .cursorrules file as plain text\n",
    "    with open(cursor_rules_path, 'r') as f:\n",
    "        system_message = f.read().strip()\n",
    "\n",
    "    if not system_message:\n",
    "        raise ValueError(\"No system message found in .cursorrules file.\")\n",
    "\n",
    "    return system_message\n",
    "\n",
    "# Read the system message from .cursorrules\n",
    "system_message = read_system_message()\n",
    "\n",
    "print(\"System message loaded successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Context folder set to: c:\\GH\\ras_commander\n"
     ]
    }
   ],
   "source": [
    "# Define folder as the parent folder (since this notebook lives in the ai_tools folder)\n",
    "# Get the current notebook's directory\n",
    "current_dir = Path.cwd()\n",
    "\n",
    "# Set the context folder to the parent of the current directory\n",
    "context_folder = current_dir.parent\n",
    "\n",
    "print(f\"Context folder set to: {context_folder}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Notebook name: ai_tools\n",
      "Subfolder to summarize: c:\\GH\\ras_commander\n",
      "Output file path: c:\\GH\\ras_commander\\llm_summary\\ras_commander_code_only.txt\n",
      "Output directory ensured to exist: c:\\GH\\ras_commander\\llm_summary\n",
      "Opened output file: c:\\GH\\ras_commander\\llm_summary\\ras_commander_code_only.txt\n",
      "All files and folders have been combined into 'c:\\GH\\ras_commander\\llm_summary\\ras_commander_code_only.txt'\n",
      "Notebook name: ai_tools\n",
      "Subfolder to summarize: c:\\GH\\ras_commander\n",
      "Output file path: c:\\GH\\ras_commander\\llm_summary\\ras_commander_code_only_stripped.txt\n",
      "Output directory ensured to exist: c:\\GH\\ras_commander\\llm_summary\n",
      "Opened output file: c:\\GH\\ras_commander\\llm_summary\\ras_commander_code_only_stripped.txt\n",
      "All files and folders have been combined into 'c:\\GH\\ras_commander\\llm_summary\\ras_commander_code_only_stripped.txt'\n"
     ]
    }
   ],
   "source": [
    "# Function to compile codebase, omitting specified folders, extensions, and files\n",
    "\n",
    "import tiktoken\n",
    "from pathlib import Path\n",
    "\n",
    "def strip_code_from_functions(content):\n",
    "    \"\"\"\n",
    "    Strip the code from functions, leaving only function signatures and docstrings.\n",
    "    \n",
    "    Args:\n",
    "    content (str): The content of a Python file.\n",
    "    \n",
    "    Returns:\n",
    "    str: The content with function bodies removed.\n",
    "    \"\"\"\n",
    "    import ast\n",
    "    import astor\n",
    "\n",
    "    class FunctionStripper(ast.NodeTransformer):\n",
    "        def visit_FunctionDef(self, node):\n",
    "            # Keep the function signature and docstring (if present)\n",
    "            new_node = ast.FunctionDef(\n",
    "                name=node.name,\n",
    "                args=node.args,\n",
    "                body=[ast.Pass()],  # Replace the body with a pass statement\n",
    "                decorator_list=node.decorator_list,\n",
    "                returns=node.returns\n",
    "            )\n",
    "            # If there's a docstring, keep it\n",
    "            if (len(node.body) > 0 and isinstance(node.body[0], ast.Expr) and\n",
    "                isinstance(node.body[0].value, ast.Str)):\n",
    "                new_node.body = [node.body[0], ast.Pass()]\n",
    "            return new_node\n",
    "\n",
    "    try:\n",
    "        tree = ast.parse(content)\n",
    "        stripped_tree = FunctionStripper().visit(tree)\n",
    "        return astor.to_source(stripped_tree)\n",
    "    except SyntaxError:\n",
    "        # If parsing fails, return the original content\n",
    "        return content\n",
    "\n",
    "def combine_files(summarize_subfolder, omit_folders, omit_extensions, omit_files, strip_code=False):\n",
    "    combined_text = \"\"\n",
    "    file_token_counts = {}\n",
    "    \n",
    "    # Get the name of this notebook\n",
    "    this_notebook = Path.cwd().name\n",
    "    print(f\"Notebook name: {this_notebook}\")\n",
    "\n",
    "    # Ensure summarize_subfolder is a Path object\n",
    "    summarize_subfolder = Path(summarize_subfolder)\n",
    "    print(f\"Subfolder to summarize: {summarize_subfolder}\")\n",
    "\n",
    "    # Define the output file name based on the folder name\n",
    "    output_file_name = f\"{summarize_subfolder.name}_code_only{'_stripped' if strip_code else ''}.txt\"\n",
    "    output_file_path = Path.cwd().parent / \"llm_summary\" / output_file_name\n",
    "    print(f\"Output file path: {output_file_path}\")\n",
    "\n",
    "    # Ensure the output directory exists\n",
    "    output_file_path.parent.mkdir(parents=True, exist_ok=True)\n",
    "    print(f\"Output directory ensured to exist: {output_file_path.parent}\")\n",
    "\n",
    "    # Initialize tokenizer\n",
    "    enc = tiktoken.encoding_for_model(\"gpt-3.5-turbo\")\n",
    "\n",
    "    # Open the output file\n",
    "    with open(output_file_path, 'w', encoding='utf-8') as outfile:\n",
    "        print(f\"Opened output file: {output_file_path}\")\n",
    "        # Iterate over all files and subfolders in the summarize_subfolder directory\n",
    "        for filepath in summarize_subfolder.rglob('*'):\n",
    "            # Check if the file is not this notebook, not in the omit_folders, not in omit_extensions, and not in omit_files\n",
    "            if (filepath.name != this_notebook and \n",
    "                not any(omit_folder in filepath.parts for omit_folder in omit_folders) and\n",
    "                filepath.suffix.lower() not in omit_extensions and\n",
    "                not any(omit_file in filepath.name for omit_file in omit_files)):\n",
    "                # Write the filename or folder name\n",
    "                if filepath.is_file():\n",
    "                    outfile.write(f\"File: {filepath}\\n\")\n",
    "                else:\n",
    "                    outfile.write(f\"Folder: {filepath}\\n\")\n",
    "                outfile.write(\"=\"*50 + \"\\n\")  # Separator\n",
    "                \n",
    "                # If it's a file, open and read the contents of the file\n",
    "                if filepath.is_file():\n",
    "                    try:\n",
    "                        with open(filepath, 'r', encoding='utf-8') as infile:\n",
    "                            content = infile.read()\n",
    "                    except UnicodeDecodeError:\n",
    "                        with open(filepath, 'rb') as infile:\n",
    "                            content = infile.read()\n",
    "                            content = content.decode('utf-8', errors='ignore')\n",
    "                    \n",
    "                    # Strip code if the option is enabled and it's a Python file\n",
    "                    if strip_code and filepath.suffix.lower() == '.py':\n",
    "                        content = strip_code_from_functions(content)\n",
    "                    \n",
    "                    # Write the contents to the output file\n",
    "                    outfile.write(content)\n",
    "                    \n",
    "                    # Count tokens for this file\n",
    "                    file_tokens = len(enc.encode(content))\n",
    "                    file_token_counts[str(filepath)] = file_tokens\n",
    "                \n",
    "                # Write a separator after the file contents or folder name\n",
    "                outfile.write(\"\\n\" + \"=\"*50 + \"\\n\\n\")\n",
    "            else:\n",
    "                dummy = 0\n",
    "\n",
    "    print(f\"All files and folders have been combined into '{output_file_path}'\")\n",
    "\n",
    "    # Count total tokens\n",
    "    with open(output_file_path, 'r', encoding='utf-8') as f:\n",
    "        combined_text = f.read()\n",
    "    token_count = len(enc.encode(combined_text))\n",
    "    \n",
    "    return combined_text, token_count, file_token_counts\n",
    "\n",
    "\n",
    "# Combine files while keeping code\n",
    "combined_text, token_count, file_token_counts = combine_files(context_folder, omit_folders, omit_extensions, omit_files)\n",
    "\n",
    "# Combine files while stripping code\n",
    "combined_text, token_count, file_token_counts = combine_files(context_folder, omit_folders, omit_extensions, omit_files, strip_code=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Top 20 files by token count:\n",
      "c:\\GH\\ras_commander\\future_dev_roadmap.ipynb: 7807 tokens\n",
      "c:\\GH\\ras_commander\\ras_commander\\RasPlan.py: 3796 tokens\n",
      "c:\\GH\\ras_commander\\Comprehensive_Library_Guide.md: 2391 tokens\n",
      "c:\\GH\\ras_commander\\README.md: 2071 tokens\n",
      "c:\\GH\\ras_commander\\ras_commander\\RasPrj.py: 1711 tokens\n",
      "c:\\GH\\ras_commander\\ras_commander\\RasUtils.py: 1507 tokens\n",
      "c:\\GH\\ras_commander\\STYLE_GUIDE.md: 1461 tokens\n",
      "c:\\GH\\ras_commander\\ras_commander\\RasCommander.py: 1392 tokens\n",
      "c:\\GH\\ras_commander\\ras_commander\\README.md: 1250 tokens\n",
      "c:\\GH\\ras_commander\\examples\\14_Core_Sensitivity.ipynb: 1174 tokens\n",
      "c:\\GH\\ras_commander\\.cursorrules: 1107 tokens\n",
      "c:\\GH\\ras_commander\\examples\\02_plan_operations.py: 484 tokens\n",
      "c:\\GH\\ras_commander\\ras_commander\\RasGeo.py: 387 tokens\n",
      "c:\\GH\\ras_commander\\ras_commander\\__init__.py: 241 tokens\n",
      "c:\\GH\\ras_commander\\pyproject.toml: 239 tokens\n",
      "c:\\GH\\ras_commander\\examples\\07_sequential_plan_execution.py: 239 tokens\n",
      "c:\\GH\\ras_commander\\examples\\09_specifying_plans.py: 239 tokens\n",
      "c:\\GH\\ras_commander\\updated_pyproject.toml: 198 tokens\n",
      "c:\\GH\\ras_commander\\ras_commander\\RasUnsteady.py: 196 tokens\n",
      "c:\\GH\\ras_commander\\examples\\13_multiple_project_operations.py: 194 tokens\n"
     ]
    }
   ],
   "source": [
    "# Sort files by token count and get top 20\n",
    "top_20_files = sorted(file_token_counts.items(), key=lambda x: x[1], reverse=True)[:20]\n",
    "\n",
    "print(\"\\nTop 20 files by token count:\")\n",
    "for file, count in top_20_files:\n",
    "    print(f\"{file}: {count} tokens\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Combined text token count: 30526\n"
     ]
    }
   ],
   "source": [
    "# Check the total token count\n",
    "print(f\"Combined text token count: {token_count}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pricing DataFrame:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>Input ($/MTok)</th>\n",
       "      <th>Output ($/MTok)</th>\n",
       "      <th>Prompt Caching Write ($/MTok)</th>\n",
       "      <th>Prompt Caching Read ($/MTok)</th>\n",
       "      <th>Context Window</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Claude 3.5 Sonnet</td>\n",
       "      <td>3</td>\n",
       "      <td>15</td>\n",
       "      <td>3.75</td>\n",
       "      <td>0.3</td>\n",
       "      <td>200000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Model  Input ($/MTok)  Output ($/MTok)  \\\n",
       "0  Claude 3.5 Sonnet               3               15   \n",
       "\n",
       "   Prompt Caching Write ($/MTok)  Prompt Caching Read ($/MTok)  Context Window  \n",
       "0                           3.75                           0.3          200000  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Estimated cost: $0.2146\n"
     ]
    }
   ],
   "source": [
    "# Set up Anthropic client\n",
    "def stream_response(client, full_prompt, max_tokens=4096):\n",
    "    response_text = \"\"\n",
    "    with client.messages.stream(\n",
    "        max_tokens=max_tokens,\n",
    "        messages=[\n",
    "            {\"role\": \"user\", \"content\": full_prompt}\n",
    "        ],\n",
    "        model=\"claude-3-sonnet-20240229\"\n",
    "    ) as stream:\n",
    "        for text in stream.text_stream:\n",
    "            response_text += text\n",
    "            clear_output(wait=True)\n",
    "            print(\"Claude's response:\")\n",
    "            print(response_text)\n",
    "            \n",
    "    return response_text\n",
    "\n",
    "def estimate_cost(input_tokens, output_tokens, pricing_df):\n",
    "    model = \"Claude 3.5 Sonnet\"\n",
    "    input_cost = (input_tokens / 1e6) * pricing_df.loc[pricing_df['Model'] == model, 'Input ($/MTok)'].values[0]\n",
    "    output_cost = (output_tokens / 1e6) * pricing_df.loc[pricing_df['Model'] == model, 'Output ($/MTok)'].values[0]\n",
    "    return input_cost + output_cost\n",
    "\n",
    "\n",
    "# Set up Anthropic client\n",
    "client = anthropic.Anthropic(api_key=os.environ.get(\"ANTHROPIC_API_KEY\"))\n",
    "\n",
    "# Create pricing dataframe\n",
    "pricing_data = {\n",
    "    \"Model\": [\"Claude 3.5 Sonnet\"],\n",
    "    \"Input ($/MTok)\": [3],\n",
    "    \"Output ($/MTok)\": [15],\n",
    "    \"Prompt Caching Write ($/MTok)\": [3.75],\n",
    "    \"Prompt Caching Read ($/MTok)\": [0.30],\n",
    "    \"Context Window\": [200000]\n",
    "}\n",
    "\n",
    "pricing_df = pd.DataFrame(pricing_data)\n",
    "print(\"Pricing DataFrame:\")\n",
    "display(pricing_df)\n",
    "\n",
    "# Combine system message, context, and user query\n",
    "full_prompt = f\"{system_message}\\n\\nContext:\\n{combined_text}\\n\\n\\n\\n\\nUser Query: {user_query}\"\n",
    "\n",
    "# Estimate cost\n",
    "enc = tiktoken.encoding_for_model(\"gpt-3.5-turbo\")\n",
    "input_tokens = token_count + len(enc.encode(user_query))\n",
    "output_tokens = 8192 # assuming full response\n",
    "estimated_cost = estimate_cost(input_tokens, output_tokens, pricing_df)\n",
    "\n",
    "print(f\"\\nEstimated cost: ${estimated_cost:.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### See the cost per message above, and add additional file/folder filters if desired"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "This is a test error to prevent automatically querying model and incurring costs",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[11], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# raise error to prevent automatically querying model and incurring costs\u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mThis is a test error to prevent automatically querying model and incurring costs\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[1;31mValueError\u001b[0m: This is a test error to prevent automatically querying model and incurring costs"
     ]
    }
   ],
   "source": [
    "# raise error to prevent automatically querying model and incurring costs\n",
    "raise ValueError(\"This is a test error to prevent automatically querying model and incurring costs\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Claude's response:\n",
      "Sure, here's a table for each class file in the ras_commander library, with all functions, their arguments (with typing/expected input), and a short summary of the function's purpose.\n",
      "\n",
      "1. `RasCommander.py`\n",
      "\n",
      "| Function | Arguments | Summary |\n",
      "|----------|-----------|---------|\n",
      "| `compute_plan` | `plan_number: str`, `compute_folder: Optional[Union[str, Path]] = None`, `ras_object: Optional[RasPrj] = None` | Execute a HEC-RAS plan. |\n",
      "| `compute_test_mode` | `plan_numbers: Optional[List[str]] = None`, `folder_suffix: str = '[Test]'`, `clear_geompre: bool = False`, `max_cores: Optional[int] = None`, `ras_object: Optional[RasPrj] = None` | Execute HEC-RAS plans in test mode. |\n",
      "| `compute_parallel` | `plan_numbers: Optional[List[str]] = None`, `max_workers: int = 2`, `cores_per_run: int = 2`, `ras_object: Optional[RasPrj] = None`, `dest_folder: Optional[Union[str, Path]] = None` | Execute HEC-RAS plans in parallel using multiple worker threads. |\n",
      "| `worker_thread` | `worker_id: int` | A worker thread function for parallel execution. |\n",
      "\n",
      "2. `RasGeo.py`\n",
      "\n",
      "| Function | Arguments | Summary |\n",
      "|----------|-----------|---------|\n",
      "| `clear_geompre_files` | `plan_files: Optional[Union[str, Path, List[Union[str, Path]]]] = None`, `ras_object: Optional[RasPrj] = None` | Clear HEC-RAS geometry preprocessor files. |\n",
      "\n",
      "3. `RasPlan.py`\n",
      "\n",
      "| Function | Arguments | Summary |\n",
      "|----------|-----------|---------|\n",
      "| `set_geom` | `plan_number: Union[str, int]`, `new_geom: Union[str, int]`, `ras_object: Optional[RasPrj] = None` | Set the geometry for the specified plan. |\n",
      "| `set_steady` | `plan_number: str`, `new_steady_flow_number: str`, `ras_object: Optional[RasPrj] = None` | Apply a steady flow file to a plan file. |\n",
      "| `set_unsteady` | `plan_number: str`, `new_unsteady_flow_number: str`, `ras_object: Optional[RasPrj] = None` | Apply an unsteady flow file to a plan file. |\n",
      "| `set_num_cores` | `plan_number: Union[str, Path]`, `num_cores: int`, `ras_object: Optional[RasPrj] = None` | Update the maximum number of cores to use in the HEC-RAS plan file. |\n",
      "| `set_geom_preprocessor` | `file_path: Union[str, Path]`, `run_htab: int`, `use_ib_tables: int`, `ras_object: Optional[RasPrj] = None` | Update the simulation plan file to modify the 'Run HTab' and 'UNET Use Existing IB Tables' settings. |\n",
      "| `get_results_path` | `plan_number: str`, `ras_object: Optional[RasPrj] = None` | Retrieve the results file path for a given HEC-RAS plan number. |\n",
      "| `get_plan_path` | `plan_number: str`, `ras_object: Optional[RasPrj] = None` | Return the full path for a given plan number. |\n",
      "| `get_flow_path` | `flow_number: str`, `ras_object: Optional[RasPrj] = None` | Return the full path for a given flow number. |\n",
      "| `get_unsteady_path` | `unsteady_number: str`, `ras_object: Optional[RasPrj] = None` | Return the full path for a given unsteady number. |\n",
      "| `get_geom_path` | `geom_number: str`, `ras_object: Optional[RasPrj] = None` | Return the full path for a given geometry number. |\n",
      "| `clone_plan` | `template_plan: str`, `new_plan_shortid: Optional[str] = None`, `ras_object: Optional[RasPrj] = None` | Create a new plan file based on a template and update the project file. |\n",
      "| `clone_unsteady` | `template_unsteady: str`, `ras_object: Optional[RasPrj] = None` | Copy unsteady flow files from a template, find the next unsteady number, and update the project file accordingly. |\n",
      "| `clone_steady` | `template_flow: str`, `ras_object: Optional[RasPrj] = None` | Copy steady flow files from a template, find the next flow number, and update the project file accordingly. |\n",
      "| `clone_geom` | `template_geom: str`, `ras_object: Optional[RasPrj] = None` | Copy geometry files from a template, find the next geometry number, and update the project file accordingly. |\n",
      "| `get_next_number` | `existing_numbers: List[str]` | Determine the next available number from a list of existing numbers. |\n",
      "\n",
      "4. `RasPrj.py`\n",
      "\n",
      "| Function | Arguments | Summary |\n",
      "|----------|-----------|---------|\n",
      "| `__init__` | - | Initialize a RasPrj instance. |\n",
      "| `initialize` | `project_folder: Union[str, Path]`, `ras_exe_path: Union[str, Path]` | Initialize a RasPrj instance with the given project folder and RAS executable path. |\n",
      "| `_load_project_data` | - | Load project data from the HEC-RAS project file. |\n",
      "| `_get_prj_entries` | `entry_type: str` | Extract entries of a specific type from the HEC-RAS project file. |\n",
      "| `is_initialized` | - | Check if the RasPrj instance has been initialized. |\n",
      "| `check_initialized` | - | Ensure that the RasPrj instance has been initialized. |\n",
      "| `find_ras_prj` | `folder_path: Union[str, Path]` | Find the appropriate HEC-RAS project file (.prj) in the given folder. |\n",
      "| `get_project_name` | - | Get the name of the HEC-RAS project. |\n",
      "| `get_prj_entries` | `entry_type: str` | Get entries of a specific type from the HEC-RAS project. |\n",
      "| `get_plan_entries` | - | Get all plan entries from the HEC-RAS project. |\n",
      "| `get_flow_entries` | - | Get all flow entries from the HEC-RAS project. |\n",
      "| `get_unsteady_entries` | - | Get all unsteady flow entries from the HEC-RAS project. |\n",
      "| `get_geom_entries` | - | Get all geometry entries from the HEC-RAS project. |\n",
      "| `get_hdf_entries` | - | Get HDF entries for plans that have results. |\n",
      "| `print_data` | - | Print all RAS Object data for this instance. |\n",
      "| `init_ras_project` | `ras_project_folder: str`, `ras_version: str`, `ras_instance: Optional[RasPrj] = None` | Initialize a RAS project. |\n",
      "| `get_ras_exe` | `ras_version: str` | Determine the HEC-RAS executable path based on the input. |\n",
      "\n",
      "5. `RasUnsteady.py`\n",
      "\n",
      "| Function | Arguments | Summary |\n",
      "|----------|-----------|---------|\n",
      "| `update_unsteady_parameters` | `unsteady_file: Union[str, Path]`, `modifications: Dict[str, Any]`, `ras_object: Optional[RasPrj] = None` | Modify parameters in an unsteady flow file. |\n",
      "\n",
      "6. `RasUtils.py`\n",
      "\n",
      "| Function | Arguments | Summary |\n",
      "|----------|-----------|---------|\n",
      "| `create_backup` | `file_path: Path`, `backup_suffix: str = '_backup'`, `ras_object: Optional[RasPrj] = None` | Create a backup of the specified file. |\n",
      "| `restore_from_backup` | `backup_path: Path`, `remove_backup: bool = True`, `ras_object: Optional[RasPrj] = None` | Restore a file from its backup. |\n",
      "| `create_directory` | `directory_path: Path`, `ras_object: Optional[RasPrj] = None` | Ensure that a directory exists, creating it if necessary. |\n",
      "| `find_files_by_extension` | `extension: str`, `ras_object: Optional[RasPrj] = None` | List all files in the project directory with a specific extension. |\n",
      "| `get_file_size` | `file_path: Path`, `ras_object: Optional[RasPrj] = None` | Get the size of a file in bytes. |\n",
      "| `get_file_modification_time` | `file_path: Path`, `ras_object: Optional[RasPrj] = None` | Get the last modification time of a file. |\n",
      "| `get_plan_path` | `current_plan_number_or_path: Union[str, Path]`, `ras_object: Optional[RasPrj] = None` | Get the path for a plan file with a given plan number or path. |\n",
      "| `remove_with_retry` | `path: Path`, `max_attempts: int = 5`, `initial_delay: float = 1.0`, `is_folder: bool = True`, `ras_object: Optional[RasPrj] = None` | Attempts to remove a file or folder with retry logic and exponential backoff. |\n",
      "| `update_plan_file` | `plan_number_or_path: Union[str, Path]`, `file_type: str`, `entry_number: int`, `ras_object: Optional[RasPrj] = None` | Update a plan file with a new file reference. |\n",
      "| `check_file_access` | `file_path: Union[str, Path]`, `mode: str = 'r'` | Check if a file can be accessed with the specified mode. |\n",
      "\n",
      "7. `RasExamples.py`\n",
      "\n",
      "| Function | Arguments | Summary |\n",
      "|----------|-----------|---------|\n",
      "| `__init__` | - | Initialize the RasExamples class. |\n",
      "| `get_example_projects` | `version_number: Optional[str] = None` | Get the available example projects for the specified version. |\n",
      "| `list_categories` | - | List the available categories of example projects. |\n",
      "| `list_projects` | `category: Optional[str] = None` | List the available example projects in a given category. |\n",
      "| `extract_project` | `project_names: Union[str, List[str]]` | Extract the specified example project(s) to the local file system. |\n",
      "| `clean_projects_directory` | - | Clean the directory where example projects are extracted. |\n",
      "\n",
      "Please note that these tables are based on the code provided, and the actual implementation details may vary.\n"
     ]
    }
   ],
   "source": [
    "# Stream Claude's response\n",
    "response_text = stream_response(client, full_prompt)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-----"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Example Response"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Claude's response:\n",
    "Sure, I'll review the code and identify any duplicate or redundant sections that can be removed or consolidated to reduce the overall size of the library.\n",
    "\n",
    "1. `RasFolderInit.py`:\n",
    "   - The `get_plan_entries`, `get_flow_entries`, `get_unsteady_entries`, and `get_geom_entries` functions follow a similar pattern. They can be consolidated into a single function that takes a file type as an argument.\n",
    "   - The `find_ras_prj` function could potentially be merged with the `get_project_name` function, as they both operate on project file paths.\n",
    "\n",
    "2. `RasPlan.py`:\n",
    "   - The `get_plan_path`, `get_flow_path`, `get_unsteady_path`, and `get_geom_path` functions are very similar and could be combined into a single function that takes a file type and number as arguments.\n",
    "   - The `set_geom`, `set_flow`, and `set_unsteady` functions have a lot of overlapping code, particularly for updating plan files. These could be consolidated into a single function that takes the file type and number as arguments.\n",
    "\n",
    "3. `RasUtils.py`:\n",
    "   - The `create_backup` and `restore_from_backup` functions have some overlap in their logic and could potentially be combined into a single function with an additional argument to specify whether to create or restore a backup.\n",
    "   - The `remove_file` function could be merged with `remove_folder_with_retry` by adding an optional argument to handle file removal.\n",
    "\n",
    "4. `RasCommander.py`:\n",
    "   - The `compute_plan` and `compute_plan_from_folder` functions have a lot of overlapping code. These could be combined into a single function with an optional argument to specify the folder path.\n",
    "\n",
    "5. `RasPrj.py`:\n",
    "   - The `find_ras_prj` function is already present in `RasFolderInit.py`, so it could be removed from this module.\n",
    "   - The `load_project_data` function is not used anywhere else in the codebase, so it could be removed unless it has a planned future use.\n",
    "\n",
    "After consolidating these functions and removing any redundant code, the overall size of the library should be reduced. However, it's important to ensure that the functionality remains intact and that any changes are thoroughly tested.\n",
    "\n",
    "Estimated cost: $0.2435\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "freshcmdr_311",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

==================================================

File: c:\GH\ras-commander\ai_tools\README.md
==================================================
# AI Tools and Scripts for the RAS Commander Repository

This folder contains AI tools and scripts for the RAS Commander repository.

==================================================

File: c:\GH\ras-commander\examples\01_project_initialization.py
==================================================
# 01_project_initialization.py

#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
from pathlib import Path

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras

# Extract specific projects
ras_examples = RasExamples()
ras_examples.extract_project(["Balde Eagle Creek", "BaldEagleCrkMulti2D", "Muncie"])

#### --- START OF SCRIPT --- ####

# RAS Commander Library Notes:
# 1. This example demonstrates both the default global 'ras' object and custom ras objects.
# 2. The global 'ras' object is suitable for simple scripts working with a single project.
# 3. Custom ras objects are recommended for complex scripts or when working with multiple projects.
# 4. The init_ras_project function initializes a project and sets up the ras object.
# 5. Each ras object contains information about its project, including plan, geometry, and flow files.

# Best Practices:
# 1. For simple scripts working with a single project, using the global 'ras' object is fine.
# 2. For complex scripts or when working with multiple projects, create and use separate ras objects.
# 3. Be consistent in your approach: don't mix global and non-global ras object usage in the same script.
# 4. Use descriptive names for custom ras objects to clearly identify different projects.

def main:
    """Docs only, see 'main.py' for full function code"""
    main()
==================================================

File: c:\GH\ras-commander\examples\02_plan_operations.py
==================================================
# 02_plan_operations.py

#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
from pathlib import Path

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras

# Extract specific projects
ras_examples = RasExamples()
ras_examples.extract_project(["Balde Eagle Creek"])

#### --- START OF SCRIPT --- ####

"""
This script demonstrates the process of initializing a HEC-RAS project and performing various operations on plans, geometries, and unsteady flows using the functions within the RasPlan Class.

Process Flow:
1. Project Initialization: Initialize a HEC-RAS project by specifying the project path and version.
2. Plan Cloning: Clone an existing plan, creating a new plan entry.
3. Geometry Cloning: Clone a geometry associated with the original plan, generating a new geometry entry.
4. Unsteady Flow Cloning: Clone an unsteady flow, creating a new unsteady flow entry.
5. Plan Configuration:
   a. Set the cloned geometry for the new plan.
   b. Set the cloned unsteady flow for the new plan.
   c. Update the number of cores to be used for the new plan.
   d. Configure geometry preprocessor options for the new plan.
6. Plan Computation: Compute the new plan and verify successful execution.
7. Results Verification: Check the HDF entries to confirm that results were written.

Additional operations that could be demonstrated:
8. Plan Modification: Update specific parameters in the plan file (e.g., simulation time, output intervals).
9. Geometry Editing: Modify cross-sections, manning's n values, or other geometry data.
10. Unsteady Flow Modification: Adjust boundary conditions or initial conditions.
11. Batch Operations: Perform operations on multiple plans simultaneously.
12. Error Handling: Demonstrate how to handle and report errors during plan operations.
13. Results Analysis: Extract and analyze key output values from the computed plan.
"""

# RAS Commander Library Notes:
# 1. This example uses the default global 'ras' object for simplicity.
# 2. If you need to work with multiple projects, use separate ras objects for each project.
# 3. Once you start using non-global ras objects, stick with that approach throughout your script.

# Best Practices:
# 1. For simple scripts working with a single project, using the global 'ras' object is fine.
# 2. For complex scripts or when working with multiple projects, create and use separate ras objects.
# 3. Be consistent in your approach: don't mix global and non-global ras object usage in the same script.

def main:
    """Docs only, see 'main.py' for full function code"""
    main()
==================================================

File: c:\GH\ras-commander\examples\03_geometry_operations.py
==================================================
# 03_geometry_operations.py

#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
from pathlib import Path

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras

# Extract specific projects
ras_examples = RasExamples()
ras_examples.extract_project(["Muncie"])

#### --- START OF SCRIPT --- ####

# RAS Commander Library Notes:
# 1. This example uses the default global 'ras' object for simplicity.
# 2. If you need to work with multiple projects, use separate ras objects for each project.
# 3. Once you start using non-global ras objects, stick with that approach throughout your script.
# 4. The RasGeo class provides methods for working with geometry files and preprocessor operations.

# Best Practices:
# 1. For simple scripts working with a single project, using the global 'ras' object is fine.
# 2. For complex scripts or when working with multiple projects, create and use separate ras objects.
# 3. Be consistent in your approach: don't mix global and non-global ras object usage in the same script.
# 4. Always clear geometry preprocessor files before making significant changes to ensure clean results.

def main:
    """Docs only, see 'main.py' for full function code"""
    main()
==================================================

File: c:\GH\ras-commander\examples\04_unsteady_flow_operations.py
==================================================
# 04_unsteady_flow_operations.py

#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
from pathlib import Path

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras

# Extract specific projects
ras_examples = RasExamples()
ras_examples.extract_project(["Balde Eagle Creek"])

#### --- START OF SCRIPT --- ####

"""
This script demonstrates the process of initializing a HEC-RAS project and performing various operations on unsteady flow plans using the ras-commander library.

Process Flow:
1. Project Initialization: Initialize a HEC-RAS project by specifying the project path and version.
2. Plan Cloning: Clone an existing plan, creating a new plan entry.
3. Unsteady Flow Parameter Updates: Modify various unsteady flow parameters in the new plan.
4. Plan Computation: Compute the new plan and verify successful execution.

Note: This example uses the default global 'ras' object for simplicity. For complex scripts or when working with
multiple projects, it's recommended to create and use separate ras objects.
"""

def main:
    """Docs only, see 'main.py' for full function code"""
    main()
==================================================

File: c:\GH\ras-commander\examples\05_utility_functions.py
==================================================
# 05_utility_functions.py

#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
from pathlib import Path

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras

# Extract specific projects
ras_examples = RasExamples()
ras_examples.extract_project(["Balde Eagle Creek"])

#### --- START OF SCRIPT --- ####

# RAS Commander (ras-commander) Library Notes:
# 1. This example uses the default global 'ras' object for simplicity.
# 2. If you need to work with multiple projects, use separate ras objects for each project.
# 3. Once you start using non-global ras objects, stick with that approach throughout your script.
# 4. The RasUtils class provides various utility functions for working with HEC-RAS projects.

# Best Practices:
# 1. For simple scripts working with a single project, using the global 'ras' object is fine.
# 2. For complex scripts or when working with multiple projects, create and use separate ras objects.
# 3. Be consistent in your approach: don't mix global and non-global ras object usage in the same script.

def main:
    """Docs only, see 'main.py' for full function code"""
    main()
==================================================

File: c:\GH\ras-commander\examples\06_single_plan_execution.py
==================================================
#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
from pathlib import Path

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras

# Define the "example_projects" folder in the same directory as the script
examples_path = Path(__file__).parent / "example_projects"

# Delete the project if it exists
if examples_path.exists():
    import shutil
    shutil.rmtree(examples_path)

# Extract specific projects
ras_examples = RasExamples()
ras_examples.extract_project(["Balde Eagle Creek"])

#### --- START OF SCRIPT --- ####

# ras-commander Library Notes:
# 1. This example uses the default global 'ras' object for simplicity.
# 2. If you need to work with multiple projects, use separate ras objects for each project.
# 3. Once you start using non-global ras objects, stick with that approach throughout your script.

# Best Practices:
# 1. For simple scripts working with a single project, using the global 'ras' object is fine.
# 2. For complex scripts or when working with multiple projects, create and use separate ras objects.
# 3. Be consistent in your approach: don't mix global and non-global ras object usage in the same script.

def main:
    """Docs only, see 'main.py' for full function code"""
    main()
==================================================

File: c:\GH\ras-commander\examples\07_sequential_plan_execution.py
==================================================
#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
from pathlib import Path

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras

# Housekeeping Note: 
# For all of the functions that do batched execution (sequential or parallel), they are careful not to overwrite existing folders
# So if you want your script to be repeatable, you need to make sure you delete the folders before running again.
# Otherwise an error will be raised to prevent overwriting any results from your previous runs.
# This will not be done by the example projects routines, which only overwrite the source folder for repeatability. 
    
import shutil
from pathlib import Path
# Define the keys to search for in folder names
# Delete example projects folder
current_file = Path(__file__).resolve()
current_dir = current_file.parent
delete_folder_path = current_dir / "example_projects"

if delete_folder_path.exists():
    print(f"Removing existing folder: {delete_folder_path}")
    shutil.rmtree(delete_folder_path)
else:
    print(f"Folder not found: {delete_folder_path}")

# Extract specific projects
ras_examples = RasExamples()
ras_examples.extract_project(["Balde Eagle Creek"])

#### --- START OF SCRIPT --- ####

# ras-commander Library Notes:
# 1. This example uses the default global 'ras' object for simplicity.
# 2. If you need to work with multiple projects, use separate ras objects for each project.
# 3. Once you start using non-global ras objects, stick with that approach throughout your script.

# Best Practices:
# 1. For simple scripts working with a single project, using the global 'ras' object is fine.
# 2. For complex scripts or when working with multiple projects, create and use separate ras objects.
# 3. Be consistent in your approach: don't mix global and non-global ras object usage in the same script.
# 4. For functions that do batched execution (sequential or parallel), they are careful not to overwrite existing folders.
# 5. If you want your script to be repeatable, make sure to delete the folders before running again.

def main:
    """Docs only, see 'main.py' for full function code"""
    main()
==================================================

File: c:\GH\ras-commander\examples\08_parallel_execution.py
==================================================
#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
from pathlib import Path
import shutil

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras

# Extract specific projects
ras_examples = RasExamples()
ras_examples.extract_project(["Balde Eagle Creek"])

#### --- START OF SCRIPT --- ####

# ras-commander Library Notes:
# 1. This example uses the default global 'ras' object for simplicity.
# 2. If you need to work with multiple projects, use separate ras objects for each project.
# 3. Once you start using non-global ras objects, stick with that approach throughout your script.
# 4. For functions that do batched execution (sequential or parallel), they are careful not to overwrite existing folders.
# 5. If you want your script to be repeatable, make sure to delete the folders before running again.

# Best Practices:
# 1. For simple scripts working with a single project, using the global 'ras' object is fine.
# 2. For complex scripts or when working with multiple projects, create and use separate ras objects.
# 3. Be consistent in your approach: don't mix global and non-global ras object usage in the same script.
# 4. When using parallel execution, consider the number of cores available on your machine.
# 5. Use the dest_folder argument to keep your project folder clean and organized.

def main:
    """Docs only, see 'main.py' for full function code"""
    main()
==================================================

File: c:\GH\ras-commander\examples\09_specifying_plans.py
==================================================
#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
from pathlib import Path

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras

# Housekeeping Note: 
# For all of the functions that do batched execution (sequential or parallel), they are careful not to overwrite existing folders
# So if you want your script to be repeatable, you need to make sure you delete the folders before running again.
# Otherwise an error will be raised to prevent overwriting any results from your previous runs.
# This will not be done by the example projects routines, which only overwrite the source folder for repeatability. 
    
import shutil
from pathlib import Path

# Delete example projects folder
current_file = Path(__file__).resolve()
current_dir = current_file.parent
delete_folder_path = current_dir / "example_projects"

if delete_folder_path.exists():
    print(f"Removing existing folder: {delete_folder_path}")
    shutil.rmtree(delete_folder_path)
else:
    print(f"Folder not found: {delete_folder_path}")

# Extract specific projects
ras_examples = RasExamples()
ras_examples.extract_project(["Balde Eagle Creek"])

#### --- START OF SCRIPT --- ####

# RAS Commander (ras-commander) Library Notes:
# 1. This example uses the default global 'ras' object for simplicity.
# 2. If you need to work with multiple projects, use separate ras objects for each project.
# 3. Once you start using non-global ras objects, stick with that approach throughout your script.
# 4. The RasCmdr class provides methods for executing plans in various ways.
# 5. You can specify individual plans or lists of plans for batch operations.

# Best Practices:
# 1. For simple scripts working with a single project, using the global 'ras' object is fine.
# 2. For complex scripts or when working with multiple projects, create and use separate ras objects.
# 3. Be consistent in your approach: don't mix global and non-global ras object usage in the same script.
# 4. When specifying plans, use plan numbers as strings (e.g., "01", "02") for consistency.
# 5. Always check the available plans in the project before specifying plan numbers for execution.

def main:
    """Docs only, see 'main.py' for full function code"""

==================================================

File: c:\GH\ras-commander\examples\10_arguments_for_compute.py
==================================================
#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
from pathlib import Path

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras

# Extract specific projects
ras_examples = RasExamples()
ras_examples.extract_project(["Balde Eagle Creek"])

#### --- START OF SCRIPT --- ####

# RAS Commander Library Notes:
# 1. This example uses the default global 'ras' object for simplicity.
# 2. If you need to work with multiple projects, use separate ras objects for each project.
# 3. Once you start using non-global ras objects, stick with that approach throughout your script.
# 4. The RasCmdr class provides various arguments for fine-tuning plan computation:
#    - plan_number: String representing the plan number to compute (e.g., "01")
#    - dest_folder: Path object specifying the destination folder for computation results
#    - clear_geompre: Boolean to clear geometry preprocessor files before computation
#    - num_cores: Integer specifying the number of cores to use
#    - overwrite_dest: Boolean to determine if existing destination folders should be overwritten

# Best Practices:
# 1. For simple scripts working with a single project, using the global 'ras' object is fine.
# 2. For complex scripts or when working with multiple projects, create and use separate ras objects.
# 3. Be consistent in your approach: don't mix global and non-global ras object usage in the same script.
# 4. Utilize the various arguments in compute functions to customize plan execution.
# 5. Always consider your system's capabilities when setting num_cores.
# 6. Use clear_geompre=True when you want to ensure a clean computation environment.
# 7. Specify dest_folder to keep your project folder organized and prevent overwriting previous results.

def main:
    """Docs only, see 'main.py' for full function code"""

==================================================

File: c:\GH\ras-commander\examples\11_Using_RasExamples.ipynb
==================================================
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ras_commander imported successfully\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "from pathlib import Path\n",
    "\n",
    "# Flexible imports to allow for development without installation\n",
    "try:\n",
    "    # Try to import from the installed package\n",
    "    from ras_commander import init_ras_project, RasExamples, RasCommander, RasPlan, RasGeo, RasUnsteady, RasUtils, ras\n",
    "except ImportError:\n",
    "    # If the import fails, add the parent directory to the Python path\n",
    "    import os\n",
    "    current_file = Path(os.getcwd()).resolve()\n",
    "    parent_directory = current_file.parent\n",
    "    sys.path.append(str(parent_directory))\n",
    "    \n",
    "    # Now try to import again\n",
    "    from ras_commander import init_ras_project, RasExamples, RasCommander, RasPlan, RasGeo, RasUnsteady, RasUtils, ras\n",
    "\n",
    "print(\"ras_commander imported successfully\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Example projects folder: c:\\Users\\billk\\Desktop\\AWS Webinar AI for HEC-RAS\\ras_commander\\ras_commander workspace6\\examples\\example_projects\n",
      "Found zip file: c:\\Users\\billk\\Desktop\\AWS Webinar AI for HEC-RAS\\ras_commander\\ras_commander workspace6\\examples\\Example_Projects_6_5.zip\n",
      "Loading project data from CSV...\n",
      "Loaded 66 projects from CSV, use list_categories() and list_projects() to explore them\n",
      "----- RasExamples Extracting Project -----\n",
      "Extracting project 'Balde Eagle Creek'\n",
      "Project 'Balde Eagle Creek' already exists. Deleting existing folder...\n",
      "Existing folder for project 'Balde Eagle Creek' has been deleted.\n",
      "Successfully extracted project 'Balde Eagle Creek' to c:\\Users\\billk\\Desktop\\AWS Webinar AI for HEC-RAS\\ras_commander\\ras_commander workspace6\\examples\\example_projects\\Balde Eagle Creek\n",
      "----- RasExamples Extracting Project -----\n",
      "Extracting project 'BaldEagleCrkMulti2D'\n",
      "Project 'BaldEagleCrkMulti2D' already exists. Deleting existing folder...\n",
      "Existing folder for project 'BaldEagleCrkMulti2D' has been deleted.\n",
      "Successfully extracted project 'BaldEagleCrkMulti2D' to c:\\Users\\billk\\Desktop\\AWS Webinar AI for HEC-RAS\\ras_commander\\ras_commander workspace6\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
      "----- RasExamples Extracting Project -----\n",
      "Extracting project 'Muncie'\n",
      "Project 'Muncie' already exists. Deleting existing folder...\n",
      "Existing folder for project 'Muncie' has been deleted.\n",
      "Successfully extracted project 'Muncie' to c:\\Users\\billk\\Desktop\\AWS Webinar AI for HEC-RAS\\ras_commander\\ras_commander workspace6\\examples\\example_projects\\Muncie\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[WindowsPath('c:/Users/billk/Desktop/AWS Webinar AI for HEC-RAS/ras_commander/ras_commander workspace6/examples/example_projects/Balde Eagle Creek'),\n",
       " WindowsPath('c:/Users/billk/Desktop/AWS Webinar AI for HEC-RAS/ras_commander/ras_commander workspace6/examples/example_projects/BaldEagleCrkMulti2D'),\n",
       " WindowsPath('c:/Users/billk/Desktop/AWS Webinar AI for HEC-RAS/ras_commander/ras_commander workspace6/examples/example_projects/Muncie')]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The First Code Cell is All You Need\n",
    "\n",
    "# This is what this Class was intended to do: Help me make repeatable workflows around HEC-RAS Example Projects for testing and demonstration purposes. \n",
    "# Replace the Example_Projects_6_5.zip with your own zip file in the same format and you will be able to load them by folder name for repeatable workflows.\n",
    "# Just make sure all project folders have unique folder names. \n",
    "\n",
    "# Extract specific projects\n",
    "ras_examples = RasExamples()\n",
    "ras_examples.extract_project([\"Balde Eagle Creek\", \"BaldEagleCrkMulti2D\", \"Muncie\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Example projects folder: c:\\Users\\billk\\Desktop\\AWS Webinar AI for HEC-RAS\\ras_commander\\ras_commander workspace6\\examples\\example_projects\n",
      "Found zip file: c:\\Users\\billk\\Desktop\\AWS Webinar AI for HEC-RAS\\ras_commander\\ras_commander workspace6\\examples\\Example_Projects_6_5.zip\n",
      "Loading project data from CSV...\n",
      "Loaded 66 projects from CSV, use list_categories() and list_projects() to explore them\n",
      "Example projects are already downloaded.\n",
      "ras_examples.folder_df:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Category</th>\n",
       "      <th>Project</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1D Sediment Transport</td>\n",
       "      <td>BSTEM - Simple Example</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1D Sediment Transport</td>\n",
       "      <td>Dredging Example</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1D Sediment Transport</td>\n",
       "      <td>Reservoir Video Tutorial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1D Sediment Transport</td>\n",
       "      <td>SIAM Example</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1D Sediment Transport</td>\n",
       "      <td>Simple Sediment Transport Example</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>Applications Guide</td>\n",
       "      <td>Example 6 - Floodway Determination</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>Applications Guide</td>\n",
       "      <td>Example 7 - Multiple Plans</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>Applications Guide</td>\n",
       "      <td>Example 8 - Looped Network</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>Applications Guide</td>\n",
       "      <td>Example 9 - Mixed Flow Analysis</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>Water Quality</td>\n",
       "      <td>Nutrient Example</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>66 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Category                             Project\n",
       "0   1D Sediment Transport              BSTEM - Simple Example\n",
       "1   1D Sediment Transport                    Dredging Example\n",
       "2   1D Sediment Transport            Reservoir Video Tutorial\n",
       "3   1D Sediment Transport                        SIAM Example\n",
       "4   1D Sediment Transport   Simple Sediment Transport Example\n",
       "..                    ...                                 ...\n",
       "61     Applications Guide  Example 6 - Floodway Determination\n",
       "62     Applications Guide          Example 7 - Multiple Plans\n",
       "63     Applications Guide          Example 8 - Looped Network\n",
       "64     Applications Guide     Example 9 - Mixed Flow Analysis\n",
       "65          Water Quality                    Nutrient Example\n",
       "\n",
       "[66 rows x 2 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Initialize RasExamples (it will use the current working directory by default)\n",
    "ras_examples = RasExamples()\n",
    "\n",
    "# Check if example projects are already downloaded\n",
    "if ras_examples.projects_dir.exists():\n",
    "    print(\"Example projects are already downloaded.\")\n",
    "    print(\"ras_examples.folder_df:\")\n",
    "    display(ras_examples.folder_df)\n",
    "else:\n",
    "    print(\"Downloading example projects...\")\n",
    "    ras_examples.get_example_projects()\n",
    "    print(\"ras_examples.folder_df:\")\n",
    "    display(ras_examples.folder_df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Available categories: 1D Sediment Transport, 1D Steady Flow Hydraulics, 1D Unsteady Flow Hydraulics, 2D Sediment Transport, 2D Unsteady Flow Hydraulics, Applications Guide, Water Quality\n",
      "\n",
      "Available categories:\n",
      "- 1D Sediment Transport\n",
      "- 1D Steady Flow Hydraulics\n",
      "- 1D Unsteady Flow Hydraulics\n",
      "- 2D Sediment Transport\n",
      "- 2D Unsteady Flow Hydraulics\n",
      "- Applications Guide\n",
      "- Water Quality\n"
     ]
    }
   ],
   "source": [
    "# List all categories\n",
    "categories = ras_examples.list_categories()\n",
    "print(\"\\nAvailable categories:\")\n",
    "for category in categories:\n",
    "    print(f\"- {category}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Projects in '1D Unsteady Flow Hydraulics':\n",
      "- Balde Eagle Creek\n",
      "- Bridge Hydraulics\n",
      "- ContractionExpansionMinorLosses\n",
      "- Culvert Hydraulics\n",
      "- Culverts with Flap Gates\n",
      "- Dam Breaching\n",
      "- Elevation Controled Gates\n",
      "- Inline Structure with Gated Spillways\n",
      "- Internal Stage and Flow Boundary Condition\n",
      "- JunctionHydraulics\n",
      "- Lateral Strcuture with Gates\n",
      "- Lateral Structure connected to a River Reach\n",
      "- Lateral Structure Overflow Weir\n",
      "- Lateral Structure with Culverts\n",
      "- Lateral Structure with Culverts and Gates\n",
      "- Levee Breaching\n",
      "- Mixed Flow Regime\n",
      "- Multiple Reaches with Hydraulic Structures\n",
      "- NavigationDam\n",
      "- Pumping Station\n",
      "- Pumping Station with Rules\n",
      "- Rule Operations\n",
      "- Simplified Physical Breaching\n",
      "- Storage Area Hydraulic Connection\n",
      "- UngagedAreaInflows\n",
      "- Unsteady Flow Encroachment Analysis\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# List projects in a specific category\n",
    "category = \"1D Unsteady Flow Hydraulics\"\n",
    "projects = ras_examples.list_projects(category)\n",
    "print(f\"\\nProjects in '{category}':\")\n",
    "for project in projects:\n",
    "    print(f\"- {project}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "All available projects:\n",
      "- BSTEM - Simple Example\n",
      "- Dredging Example\n",
      "- Reservoir Video Tutorial\n",
      "- SIAM Example\n",
      "- Simple Sediment Transport Example\n",
      "- Unsteady Sediment with Concentration Rules\n",
      "- Video Tutorial (Sediment Intro)\n",
      "- Baxter RAS Mapper\n",
      "- Chapter 4 Example Data\n",
      "- ConSpan Culvert\n",
      "- Mixed Flow Regime Channel\n",
      "- Wailupe GeoRAS\n",
      "- Balde Eagle Creek\n",
      "- Bridge Hydraulics\n",
      "- ContractionExpansionMinorLosses\n",
      "- Culvert Hydraulics\n",
      "- Culverts with Flap Gates\n",
      "- Dam Breaching\n",
      "- Elevation Controled Gates\n",
      "- Inline Structure with Gated Spillways\n",
      "- Internal Stage and Flow Boundary Condition\n",
      "- JunctionHydraulics\n",
      "- Lateral Strcuture with Gates\n",
      "- Lateral Structure connected to a River Reach\n",
      "- Lateral Structure Overflow Weir\n",
      "- Lateral Structure with Culverts\n",
      "- Lateral Structure with Culverts and Gates\n",
      "- Levee Breaching\n",
      "- Mixed Flow Regime\n",
      "- Multiple Reaches with Hydraulic Structures\n",
      "- NavigationDam\n",
      "- Pumping Station\n",
      "- Pumping Station with Rules\n",
      "- Rule Operations\n",
      "- Simplified Physical Breaching\n",
      "- Storage Area Hydraulic Connection\n",
      "- UngagedAreaInflows\n",
      "- Unsteady Flow Encroachment Analysis\n",
      "- Chippewa_2D\n",
      "- BaldEagleCrkMulti2D\n",
      "- Muncie\n",
      "- Example 1 - Critical Creek\n",
      "- Example 10 - Stream Junction\n",
      "- Example 11 - Bridge Scour\n",
      "- Example 12 - Inline Structure\n",
      "- Example 13 - Singler Bridge (WSPRO)\n",
      "- Example 14 - Ice Covered River\n",
      "- Example 15 - Split Flow Junction with Lateral Weir\n",
      "- Example 16 - Channel Modification\n",
      "- Example 17 - Unsteady Flow Application\n",
      "- Example 18 - Advanced Inline Structure\n",
      "- Example 19 - Hydrologic Routing - ModPuls\n",
      "- Example 2 - Beaver Creek\n",
      "- Example 20 - HagerLatWeir\n",
      "- Example 21 - Overflow Gates\n",
      "- Example 22 - Groundwater Interflow\n",
      "- Example 23 - Urban Modeling\n",
      "- Example 24 - Mannings-n-Calibration\n",
      "- Example 3 - Single Culvert\n",
      "- Example 4 - Multiple Culverts\n",
      "- Example 5 - Multiple Openings\n",
      "- Example 6 - Floodway Determination\n",
      "- Example 7 - Multiple Plans\n",
      "- Example 8 - Looped Network\n",
      "- Example 9 - Mixed Flow Analysis\n",
      "- Nutrient Example\n"
     ]
    }
   ],
   "source": [
    "# List all projects\n",
    "all_projects = ras_examples.list_projects()\n",
    "print(\"\\nAll available projects:\")\n",
    "for project in all_projects:\n",
    "    print(f\"- {project}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----- RasExamples Extracting Project -----\n",
      "Extracting project 'Balde Eagle Creek'\n",
      "Project 'Balde Eagle Creek' already exists. Deleting existing folder...\n",
      "Existing folder for project 'Balde Eagle Creek' has been deleted.\n",
      "Successfully extracted project 'Balde Eagle Creek' to c:\\Users\\billk\\Desktop\\AWS Webinar AI for HEC-RAS\\ras_commander\\ras_commander workspace6\\examples\\example_projects\\Balde Eagle Creek\n",
      "----- RasExamples Extracting Project -----\n",
      "Extracting project 'BaldEagleCrkMulti2D'\n",
      "Project 'BaldEagleCrkMulti2D' already exists. Deleting existing folder...\n",
      "Existing folder for project 'BaldEagleCrkMulti2D' has been deleted.\n",
      "Successfully extracted project 'BaldEagleCrkMulti2D' to c:\\Users\\billk\\Desktop\\AWS Webinar AI for HEC-RAS\\ras_commander\\ras_commander workspace6\\examples\\example_projects\\BaldEagleCrkMulti2D\n",
      "----- RasExamples Extracting Project -----\n",
      "Extracting project 'Muncie'\n",
      "Project 'Muncie' already exists. Deleting existing folder...\n",
      "Existing folder for project 'Muncie' has been deleted.\n",
      "Successfully extracted project 'Muncie' to c:\\Users\\billk\\Desktop\\AWS Webinar AI for HEC-RAS\\ras_commander\\ras_commander workspace6\\examples\\example_projects\\Muncie\n"
     ]
    }
   ],
   "source": [
    "# Extract specific projects\n",
    "projects_to_extract = [\"Balde Eagle Creek\", \"BaldEagleCrkMulti2D\", \"Muncie\"]\n",
    "extracted_paths = ras_examples.extract_project(projects_to_extract)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "cmdr_workspace",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

==================================================

File: c:\GH\ras-commander\examples\12_plan_set_execution.py
==================================================
#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
from pathlib import Path

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras

# Extract specific projects
ras_examples = RasExamples()
ras_examples.extract_project(["Balde Eagle Creek"])

#### --- START OF SCRIPT --- ####

import pandas as pd


def create_plan_set:
    """Docs only, see 'create_plan_set.py' for full function code"""
    main()
==================================================

File: c:\GH\ras-commander\examples\13_multiple_project_operations.py
==================================================
#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
import shutil
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras

# Extract specific projects
ras_examples = RasExamples()
ras_examples.extract_project(["Balde Eagle Creek", "Muncie"])

#### --- START OF SCRIPT --- ####

def execute_plan:
    """Docs only, see 'execute_plan.py' for full function code"""
    main()
==================================================

File: c:\GH\ras-commander\examples\14_Core_Sensitivity.ipynb
==================================================
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#%pip install ras-commander pandas requests pathlib matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from pathlib import Path\n",
    "from ras_commander import RasExamples, init_ras_project, RasCommander, RasPlan, RasGeo\n",
    "\n",
    "# Step 1: Initialize RasExamples and extract the Muncie project\n",
    "ras_examples = RasExamples()\n",
    "ras_examples.extract_project([\"Muncie\"])\n",
    "\n",
    "# Use Path.cwd() to get the current working directory in a Jupyter Notebook\n",
    "current_directory = Path.cwd()\n",
    "project_path = current_directory / \"example_projects\" / \"Muncie\"\n",
    "\n",
    "# Step 2: Initialize the Muncie Project using init_ras_project (from ras_commander)\n",
    "muncie_project = init_ras_project(project_path, \"6.5\")\n",
    "\n",
    "# Step 3: Initialize a DataFrame to store execution results\n",
    "results = []\n",
    "\n",
    "# Step 4: Iterate over each plan and core count\n",
    "for plan_number in muncie_project.plan_df['plan_number'].unique():\n",
    "    print(f\"Running sensitivity analysis for Plan {plan_number}\")\n",
    "    \n",
    "    # Clear geompre files before running the plan\n",
    "    plan_path = RasPlan.get_plan_path(plan_number)\n",
    "    RasGeo.clear_geompre_files(plan_path)\n",
    "    \n",
    "    for cores in range(1, 9):\n",
    "        # Set core count for this plan\n",
    "        RasPlan.set_num_cores(plan_number, cores)\n",
    "        \n",
    "        # Time the execution of the plan\n",
    "        start_time = time.time()\n",
    "        RasCommander.compute_plan(plan_number)\n",
    "        execution_time = time.time() - start_time\n",
    "        \n",
    "        # Store the results\n",
    "        results.append({\n",
    "            \"plan_number\": plan_number,\n",
    "            \"cores\": cores,\n",
    "            \"execution_time\": execution_time\n",
    "        })\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 5: Convert results into a DataFrame\n",
    "results_df = pd.DataFrame(results)\n",
    "\n",
    "# Step 6: Extract plan title, shortid, and description\n",
    "plan_info_df = muncie_project.plan_df[['plan_number', 'title', 'shortid', 'description']]\n",
    "\n",
    "# Merge the execution results with the plan information\n",
    "merged_df = pd.merge(results_df, plan_info_df, on='plan_number')\n",
    "\n",
    "# Step 7: Calculate unit runtime (based on 1 core execution time)\n",
    "merged_df['unit_runtime'] = merged_df.groupby('plan_number')['execution_time'].transform(lambda x: x / x.iloc[0])\n",
    "\n",
    "# Display the results dataframe for verification\n",
    "print(\"merged_df DataFrame:\")\n",
    "print(merged_df)\n",
    "\n",
    "# Step 8: Plot a line chart for unit runtime vs. cores for each plan\n",
    "plt.figure(figsize=(10, 6))\n",
    "for plan in merged_df['plan_number'].unique():\n",
    "    plan_data = merged_df[merged_df['plan_number'] == plan]\n",
    "    plt.plot(plan_data['cores'], plan_data['unit_runtime'], label=f\"Plan {plan}\")\n",
    "\n",
    "plt.xlabel(\"Number of Cores\")\n",
    "plt.ylabel(\"Unit Runtime (Relative to 1 Core)\")\n",
    "plt.title(\"Core Count Sensitivity Analysis\")\n",
    "plt.legend(title=\"Plan Title\")\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "releasecmdr311",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

==================================================

File: c:\GH\ras-commander\examples\xx_edge_cases.py
==================================================
#### --- IMPORTS AND EXAMPLE PROJECT SETUP --- ####

import sys
from pathlib import Path
import shutil

# Add the parent directory to the Python path
current_file = Path(__file__).resolve()
parent_directory = current_file.parent.parent
sys.path.append(str(parent_directory))

# Flexible imports to allow for development without installation
try:
    # Try to import from the installed package
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras
except ImportError:
    # If the import fails, add the parent directory to the Python path
    current_file = Path(__file__).resolve()
    parent_directory = current_file.parent.parent
    sys.path.append(str(parent_directory))
    
    # Now try to import again
    from ras_commander import init_ras_project, RasExamples, RasCmdr, RasPlan, RasGeo, RasUnsteady, RasUtils, ras

example_projects_folder = Path(__file__).parent.parent / "example_projects"

# delete the folder if it exists
if example_projects_folder.exists():
    shutil.rmtree(example_projects_folder)


# Extract specific projects
ras_examples = RasExamples()
ras_examples.extract_project(["Balde Eagle Creek"])

#### --- START OF SCRIPT --- ####

def main:
    """Docs only, see 'main.py' for full function code"""
    main()
==================================================

File: c:\GH\ras-commander\ras_commander\RasCmdr.py
==================================================
"""
Execution operations for running HEC-RAS simulations using subprocess.
Based on the HEC-Commander project's "Command Line is All You Need" approach, leveraging the -c compute flag to run HEC-RAS and orchestrating changes directly in the RAS input files to achieve automation outcomes. 
"""

import os
import subprocess
import shutil
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor, as_completed
from .RasPrj import ras, RasPrj, init_ras_project, get_ras_exe
from .RasPlan import RasPlan
from .RasGeo import RasGeo
from .RasUtils import RasUtils
import subprocess
import os
import logging
import time
import pandas as pd
from threading import Thread, Lock
import queue
from pathlib import Path
import shutil
import queue
from threading import Thread, Lock
import time

# TO DO: 
# 1. Alternate Run Mode for compute_plan and compute_parallel:  Using Powershell to execute the HEC-RAS command and hide the RAS window and all child windows.
#    If this is implemented, and the plan has a popup, then the plan will not execute.  This is a deal breaker for many scenarios, and should only be used
#    as a special option for those who don't want to deal with the popups, or want to run in the background.  This option should be limited to non-commercial use.
# 2. Implment compute_plan_remote to go along with compute_plan.  This will be a compute_plan that is run on a remote machine via a psexec command.
#    First, we will use the keyring package to securely store the remote machine username and password.
#    Second, we will implement the psexec command to execute the HEC-RAS command on the remote machine.
#    Each machine will need to be initialized as a remote_worker object, which will store the machine name, username, password, ras_exe_path, local folder path and other relevant info.
#    A separate RasRemote class will be created to handle the creation of the remote_worker objects and the necessary abstractions. 
#    The compute_plan_remote function will live in RasCmdr, and will be a thin abstraction above the RasRemote class, since the functions will be simliar to the existing compute_plan functions, but specific to remote execution.  


class RasCmdr:
    @staticmethod
    def compute_plan(
        plan_number,
        dest_folder=None, 
        ras_object=None,
        clear_geompre=False,
        num_cores=None,
        overwrite_dest=False
    ):
        """
        Execute a HEC-RAS plan.

        Args:
            plan_number (str, Path): The plan number to execute (e.g., "01", "02") or the full path to the plan file.
            dest_folder (str, Path, optional): Name of the folder or full path for computation.
                If a string is provided, it will be created in the same parent directory as the project folder.
                If a full path is provided, it will be used as is.
            ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.
            clear_geompre (bool, optional): Whether to clear geometry preprocessor files. Defaults to False.
            num_cores (int, optional): Number of cores to use for the plan execution. If None, the current setting is not changed.
            overwrite_dest (bool, optional): If True, overwrite the destination folder if it exists. Defaults to False.

        Returns:
            bool: True if the execution was successful, False otherwise.

        Raises:
            ValueError: If the specified dest_folder already exists and is not empty, and overwrite_dest is False.
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        if dest_folder is not None:
            dest_folder = Path(ras_obj.project_folder).parent / dest_folder if isinstance(dest_folder, str) else Path(dest_folder)
            
            if dest_folder.exists():
                if overwrite_dest:
                    shutil.rmtree(dest_folder)
                elif any(dest_folder.iterdir()):
                    raise ValueError(f"Destination folder '{dest_folder}' exists and is not empty. Use overwrite_dest=True to overwrite.")
            
            dest_folder.mkdir(parents=True, exist_ok=True)
            shutil.copytree(ras_obj.project_folder, dest_folder, dirs_exist_ok=True)
            
            compute_ras = RasPrj()
            compute_ras.initialize(dest_folder, ras_obj.ras_exe_path)
            compute_prj_path = compute_ras.prj_file
        else:
            compute_ras = ras_obj
            compute_prj_path = ras_obj.prj_file

        # Determine the plan path
        compute_plan_path = Path(plan_number) if isinstance(plan_number, (str, Path)) and Path(plan_number).is_file() else RasPlan.get_plan_path(plan_number, compute_ras)

        if not compute_prj_path or not compute_plan_path:
            print(f"Error: Could not find project file or plan file for plan {plan_number}")
            return False

        # Clear geometry preprocessor files if requested
        if clear_geompre:
            try:
                RasGeo.clear_geompre_files(compute_plan_path, ras_object=compute_ras)
                print(f"Cleared geometry preprocessor files for plan: {plan_number}")
            except Exception as e:
                print(f"Error clearing geometry preprocessor files for plan {plan_number}: {str(e)}")

        # Set the number of cores if specified
        if num_cores is not None:
            try:
                RasPlan.set_num_cores(compute_plan_path, num_cores=num_cores, ras_object=compute_ras)
                print(f"Set number of cores to {num_cores} for plan: {plan_number}")
            except Exception as e:
                print(f"Error setting number of cores for plan {plan_number}: {str(e)}")

        # Prepare the command for HEC-RAS execution
        cmd = f'"{compute_ras.ras_exe_path}" -c "{compute_prj_path}" "{compute_plan_path}"'
        print("Running HEC-RAS from the Command Line:")
        print(f"Running command: {cmd}")

        # Execute the HEC-RAS command
        start_time = time.time()
        try:
            subprocess.run(cmd, check=True, shell=True, capture_output=True, text=True)
            end_time = time.time()
            run_time = end_time - start_time
            print(f"HEC-RAS execution completed for plan: {plan_number}")
            print(f"Total run time for plan {plan_number}: {run_time:.2f} seconds")
            return True
        except subprocess.CalledProcessError as e:
            end_time = time.time()
            run_time = end_time - start_time
            print(f"Error running plan: {plan_number}")
            print(f"Error message: {e.output}")
            print(f"Total run time for plan {plan_number}: {run_time:.2f} seconds")
            return False

        ras_obj = ras_object or ras
        ras_obj.plan_df = ras_obj.get_plan_entries()
        ras_obj.geom_df = ras_obj.get_geom_entries()
        ras_obj.flow_df = ras_obj.get_flow_entries()
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()



    @staticmethod
    def compute_parallel(
        plan_number: str | list[str] | None = None,
        max_workers: int = 2,
        num_cores: int = 2,
        clear_geompre: bool = False,
        ras_object: RasPrj | None = None,
        dest_folder: str | Path | None = None,
        overwrite_dest: bool = False
    ) -> dict[str, bool]:
        """
        Execute HEC-RAS plans in parallel using multiple worker threads.

        This function creates separate worker folders, copies the project to each, and executes the specified plans
        in parallel. It allows for isolated and concurrent execution of multiple plans.

        Args:
            plan_number (str | list[str] | None): Plan number, list of plan numbers, or None to execute all plans.
            max_workers (int, optional): Maximum number of worker threads to use. Default is 2.
            num_cores (int, optional): Number of cores to use for each plan execution. Default is 2.
            clear_geompre (bool, optional): Whether to clear geometry preprocessor files. Defaults to False.
            ras_object (RasPrj, optional): Specific RAS object to use. If None, uses the global ras instance.
            dest_folder (str | Path, optional): Destination folder for the final computed results.
                If None, results will be stored in a "[Computed]" folder next to the original project.
            overwrite_dest (bool, optional): If True, overwrite the destination folder if it exists. Defaults to False.

        Returns:
            dict[str, bool]: A dictionary with plan numbers as keys and boolean values indicating success (True) or failure (False).

        Raises:
            ValueError: If the destination folder exists and is not empty, and overwrite_dest is False.
            FileNotFoundError: If a plan file is not found.

        Notes:
            - This function creates separate folders for each worker to ensure isolated execution.
            - Each worker uses its own RAS object to prevent conflicts.
            - Plans are distributed among workers using a queue to ensure efficient parallel processing.
            - The function automatically handles cleanup and consolidation of results after execution.
        
        Revision Notes:
            - Added support for clear_geompre flag as a pass-through to compute_plan.
            - Simplified worker thread logic by removing redundant operations.
            - Removed duplicate RAS object initialization in worker threads.
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        project_folder = ras_obj.project_folder

        if dest_folder is not None:
            dest_folder_path = Path(dest_folder)
            if dest_folder_path.exists():
                if overwrite_dest:
                    shutil.rmtree(dest_folder_path)
                elif any(dest_folder_path.iterdir()):
                    raise ValueError(f"Destination folder '{dest_folder_path}' exists and is not empty. Use overwrite_dest=True to overwrite.")
            dest_folder_path.mkdir(parents=True, exist_ok=True)
            shutil.copytree(project_folder, dest_folder_path, dirs_exist_ok=True)
            project_folder = dest_folder_path

        if plan_number:
            if isinstance(plan_number, str):
                plan_number = [plan_number]
            ras_obj.plan_df = ras_obj.plan_df[ras_obj.plan_df['plan_number'].isin(plan_number)]

        num_plans = len(ras_obj.plan_df)
        max_workers = min(max_workers, num_plans) if num_plans > 0 else 1
        print(f"Adjusted max_workers to {max_workers} based on the number of plans: {num_plans}")

        # Clean up existing worker folders and create new ones
        worker_ras_objects = {}
        for worker_id in range(1, max_workers + 1):
            worker_folder = project_folder.parent / f"{project_folder.name} [Worker {worker_id}]"
            if worker_folder.exists():
                shutil.rmtree(worker_folder)
            shutil.copytree(project_folder, worker_folder)
            
            worker_ras_instance = init_ras_project(
                ras_project_folder=worker_folder,
                ras_version=ras_obj.ras_exe_path,
                ras_instance=RasPrj()
            )
            worker_ras_objects[worker_id] = worker_ras_instance

        plan_queue = queue.Queue()
        for plan_number in ras_obj.plan_df['plan_number']:
            plan_queue.put(plan_number)

        execution_results: dict[str, bool] = {}
        results_lock = Lock()
        queue_lock = Lock()

        def worker_thread:
    """Docs only, see 'worker_thread.py' for full function code"""
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()
==================================================

File: c:\GH\ras-commander\ras_commander\RasExamples.py
==================================================
import os
import requests
import zipfile
import pandas as pd
from pathlib import Path
import shutil
from typing import Union, List
import csv
from datetime import datetime

class RasExamples:
    """
    A class for quickly loading HEC-RAS example projects for testing and development of ras-commander.

    This class provides functionality to download, extract, and manage HEC-RAS example projects.
    It supports both default HEC-RAS example projects and custom projects from user-provided URLs.

    Expected folder structure:              Notes:
    ras-commander/
    ├── examples/                           # This is examples_dir
    │   ├── example_projects/               # This is projects_dir
    │   │   ├── Balde Eagle Creek/          # Individual Projects from Zip file
    │   │   ├── Muncie/                 
    │   │   └── ...
    │   ├── Example_Projects_6_5.zip        # HEC-RAS Example Projects zip file will be downloaded here
    │   ├── example_projects.csv            # CSV file containing cached project metadata
    │   └── 01_project_initialization.py    # ras-commander library examples are also at this level
    │   └── ...
    └── ras_commander/                      # Code for the ras-commander library

    Attributes:
        base_url (str): Base URL for downloading HEC-RAS example projects.
        valid_versions (list): List of valid HEC-RAS versions for example projects.
        base_dir (Path): Base directory for storing example projects.
        examples_dir (Path): Directory for example projects and related files. (assumed to be parent )
        projects_dir (Path): Directory where example projects are extracted.
        zip_file_path (Path): Path to the downloaded zip file.
        folder_df (pd.DataFrame): DataFrame containing folder structure information.
        csv_file_path (Path): Path to the CSV file for caching project metadata.

    
    Future Improvements:
    - Implement the ability for user-provided example projects (provided as a zip file) for their own repeatable examples. 
    - If the zip file is in the same folder structure as the HEC-RAS example projects, simple replace Example_Projects_6_5.zip and the folder structure will be automatically extracted from the zip file.
    - The actual RAS example projects haven't been updated much, but there is the structure here to handle future versions. Although this version of the code is probably fine for a few years, until HEC-RAS 2025 comes out. 
       
    """

    def __init__:
    """Docs only, see '__init__.py' for full function code"""
# ras_examples = RasExamples()
# extracted_paths = ras_examples.extract_project(["Bald Eagle Creek", "BaldEagleCrkMulti2D", "Muncie"])
# for path in extracted_paths:
#     print(f"Extracted to: {path}")

==================================================

File: c:\GH\ras-commander\ras_commander\RasGeo.py
==================================================
"""
Operations for handling geometry files in HEC-RAS projects.
"""
from pathlib import Path
from typing import List, Union
from .RasPlan import RasPlan
from .RasPrj import ras
import re

class RasGeo:
    """
    A class for operations on HEC-RAS geometry files.
    """
    
    @staticmethod
    def clear_geompre_files(
        plan_files: Union[str, Path, List[Union[str, Path]]] = None,
        ras_object = None
    ) -> None:
        """
        Clear HEC-RAS geometry preprocessor files for specified plan files or all plan files in the project directory.
        
        Limitations/Future Work:
        - This function only deletes the geometry preprocessor file.
        - It does not clear the IB tables.
        - It also does not clear geometry preprocessor tables from the geometry HDF.
        - All of these features will need to be added to reliably remove geometry preprocessor files for 1D and 2D projects.
        
        Parameters:
            plan_files (Union[str, Path, List[Union[str, Path]]], optional): 
                Full path(s) to the HEC-RAS plan file(s) (.p*).
                If None, clears all plan files in the project directory.
            ras_object: An optional RAS object instance.
        
        Returns:
            None
        
        Examples:
            # Clear all geometry preprocessor files in the project directory
            RasGeo.clear_geompre_files()
            
            # Clear a single plan file
            RasGeo.clear_geompre_files(r'path/to/plan.p01')
            
            # Clear multiple plan files
            RasGeo.clear_geompre_files([r'path/to/plan1.p01', r'path/to/plan2.p02'])

        Note:
            This function updates the ras object's geometry dataframe after clearing the preprocessor files.
        """
        ## Explicit Function Steps
        # 1. Initialize the ras_object, defaulting to the global ras if not provided.
        # 2. Define a helper function to clear a single geometry preprocessor file.
        # 3. Determine the list of plan files to process based on the input.
        # 4. Iterate over each plan file and clear its geometry preprocessor file.
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        def clear_single_file(plan_file: Union[str, Path], ras_obj) -> None:
            plan_path = Path(plan_file)
            geom_preprocessor_suffix = '.c' + ''.join(plan_path.suffixes[1:]) if plan_path.suffixes else '.c'
            geom_preprocessor_file = plan_path.with_suffix(geom_preprocessor_suffix)
            if geom_preprocessor_file.exists():
                try:
                    print(f"Deleting geometry preprocessor file: {geom_preprocessor_file}")
                    geom_preprocessor_file.unlink()
                    print("File deletion completed successfully.")
                except PermissionError:
                    raise PermissionError(f"Unable to delete geometry preprocessor file: {geom_preprocessor_file}. Permission denied.")
                except OSError as e:
                    raise OSError(f"Error deleting geometry preprocessor file: {geom_preprocessor_file}. {str(e)}")
            else:
                print(f"No geometry preprocessor file found for: {plan_file}")
        
        if plan_files is None:
            print("Clearing all geometry preprocessor files in the project directory.")
            plan_files_to_clear = list(ras_obj.project_folder.glob(r'*.p*'))
        elif isinstance(plan_files, (str, Path)):
            plan_files_to_clear = [plan_files]
        elif isinstance(plan_files, list):
            plan_files_to_clear = plan_files
        else:
            raise ValueError("Invalid input. Please provide a string, Path, list of paths, or None.")
        
        for plan_file in plan_files_to_clear:
            clear_single_file(plan_file, ras_obj)
        ras_obj.geom_df = ras_obj.get_geom_entries()


==================================================

File: c:\GH\ras-commander\ras_commander\RasPlan.py
==================================================
"""
Operations for modifying and updating HEC-RAS plan files.

"""
import re
from pathlib import Path
import shutil
from typing import Union, Optional
import pandas as pd
from .RasPrj import RasPrj, ras
from .RasUtils import RasUtils

class RasPlan:
    """
    A class for operations on HEC-RAS plan files.
    """
    
    @staticmethod
    def set_geom(plan_number: Union[str, int], new_geom: Union[str, int], ras_object=None) -> pd.DataFrame:
        """
        Set the geometry for the specified plan.

        Parameters:
            plan_number (Union[str, int]): The plan number to update.
            new_geom (Union[str, int]): The new geometry number to set.
            ras_object: An optional RAS object instance.

        Returns:
            pd.DataFrame: The updated geometry DataFrame.

        Example:
            updated_geom_df = RasPlan.set_geom('02', '03')

        Note:
            This function updates the ras object's dataframes after modifying the project structure.
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        # Ensure plan_number and new_geom are strings
        plan_number = str(plan_number).zfill(2)
        new_geom = str(new_geom).zfill(2)

        # Before doing anything, make sure the plan, geom, flow, and unsteady dataframes are current
        ras_obj.plan_df = ras_obj.get_plan_entries()
        ras_obj.geom_df = ras_obj.get_geom_entries()
        ras_obj.flow_df = ras_obj.get_flow_entries()
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()
        
        # List the geom_df for debugging
        print("Current geometry DataFrame within the function:")
        print(ras_obj.geom_df)
        
        if new_geom not in ras_obj.geom_df['geom_number'].values:
            raise ValueError(f"Geometry {new_geom} not found in project.")

        # Update the geometry for the specified plan
        ras_obj.plan_df.loc[ras_obj.plan_df['plan_number'] == plan_number, 'geom_number'] = new_geom

        print(f"Geometry for plan {plan_number} set to {new_geom}")
        print("Updated plan DataFrame:")
        display(ras_obj.plan_df)

        # Update the project file
        prj_file_path = ras_obj.prj_file
        with open(prj_file_path, 'r') as f:
            lines = f.readlines()

        plan_pattern = re.compile(rf"^Plan File=p{plan_number}", re.IGNORECASE)
        geom_pattern = re.compile(r"^Geom File=g\d+", re.IGNORECASE)
        
        for i, line in enumerate(lines):
            if plan_pattern.match(line):
                for j in range(i+1, len(lines)):
                    if geom_pattern.match(lines[j]):
                        lines[j] = f"Geom File=g{new_geom}\n"
                        break
                break

        with open(prj_file_path, 'w') as f:
            f.writelines(lines)

        print(f"Updated project file with new geometry for plan {plan_number}")

        # Re-initialize the ras object to reflect changes
        ras_obj.initialize(ras_obj.project_folder, ras_obj.ras_exe_path)

        return ras_obj.plan_df

    @staticmethod
    def set_steady:
    """Docs only, see 'set_steady.py' for full function code"""
#  Clone Functions to copy unsteady, flow, and geometry files from templates
     
    @staticmethod
    def clone_plan:
    """Docs only, see 'clone_plan.py' for full function code"""

==================================================

File: c:\GH\ras-commander\ras_commander\RasPrj.py
==================================================
"""RasPrj.py

This module provides a class for managing HEC-RAS projects.

Classes:
    RasPrj: A class for managing HEC-RAS projects.

Functions:
    init_ras_project: Initialize a RAS project.
    get_ras_exe: Determine the HEC-RAS executable path based on the input.

DEVELOPER NOTE:
This class is used to initialize a RAS project and is used in conjunction with the RasCmdr class to manage the execution of RAS plans.
By default, the RasPrj class is initialized with the global 'ras' object.
However, you can create multiple RasPrj instances to manage multiple projects.
Do not mix and match global 'ras' object instances and custom instances of RasPrj - it will cause errors.
"""
# Example Terminal Output for RasPrj Functions:
# print(f"\n----- INSERT TEXT HERE -----\n")

from pathlib import Path
import pandas as pd
import re

class RasPrj:
    def __init__:
    """Docs only, see '__init__.py' for full function code"""
ras = RasPrj()

def init_ras_project:
    """Docs only, see 'init_ras_project.py' for full function code"""
                     "or a full path to the HEC-RAS executable.")
==================================================

File: c:\GH\ras-commander\ras_commander\RasUnsteady.py
==================================================
"""
Operations for handling unsteady flow files in HEC-RAS projects.
"""
from pathlib import Path
from .RasPrj import ras
import re

class RasUnsteady:
    """
    Class for all operations related to HEC-RAS unsteady flow files.
    """
    
    @staticmethod
    def update_unsteady_parameters:
    """Docs only, see 'update_unsteady_parameters.py' for full function code"""

==================================================

File: c:\GH\ras-commander\ras_commander\RasUtils.py
==================================================
"""
Utility functions for the ras-commander library.
"""
import os
import shutil
import logging
import time
from pathlib import Path
from .RasPrj import ras
from typing import Union

class RasUtils:
    """
    A class containing utility functions for the ras-commander library.
    When integrating new functions that do not clearly fit into other classes, add them here.
    """

    @staticmethod
    def create_backup(file_path: Path, backup_suffix: str = "_backup", ras_object=None) -> Path:
        """
        Create a backup of the specified file.

        Parameters:
        file_path (Path): Path to the file to be backed up
        backup_suffix (str): Suffix to append to the backup file name
        ras_object (RasPrj, optional): RAS object to use. If None, uses the default ras object.

        Returns:
        Path: Path to the created backup file

        Example:
        >>> backup_path = RasUtils.create_backup(Path("project.prj"))
        >>> print(f"Backup created at: {backup_path}")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        original_path = Path(file_path)
        backup_path = original_path.with_name(f"{original_path.stem}{backup_suffix}{original_path.suffix}")
        shutil.copy2(original_path, backup_path)
        logging.info(f"Backup created: {backup_path}")
        return backup_path

    @staticmethod
    def restore_from_backup(backup_path: Path, remove_backup: bool = True, ras_object=None) -> Path:
        """
        Restore a file from its backup.

        Parameters:
        backup_path (Path): Path to the backup file
        remove_backup (bool): Whether to remove the backup file after restoration
        ras_object (RasPrj, optional): RAS object to use. If None, uses the default ras object.

        Returns:
        Path: Path to the restored file

        Example:
        >>> restored_path = RasUtils.restore_from_backup(Path("project_backup.prj"))
        >>> print(f"File restored to: {restored_path}")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        backup_path = Path(backup_path)
        original_path = backup_path.with_name(backup_path.stem.rsplit('_backup', 1)[0] + backup_path.suffix)
        shutil.copy2(backup_path, original_path)
        logging.info(f"File restored: {original_path}")
        if remove_backup:
            backup_path.unlink()
            logging.info(f"Backup removed: {backup_path}")
        return original_path

    @staticmethod
    def create_directory(directory_path: Path, ras_object=None) -> Path:
        """
        Ensure that a directory exists, creating it if necessary.

        Parameters:
        directory_path (Path): Path to the directory
        ras_object (RasPrj, optional): RAS object to use. If None, uses the default ras object.

        Returns:
        Path: Path to the ensured directory

        Example:
        >>> ensured_dir = RasUtils.create_directory(Path("output"))
        >>> print(f"Directory ensured: {ensured_dir}")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        path = Path(directory_path)
        path.mkdir(parents=True, exist_ok=True)
        logging.info(f"Directory ensured: {path}")
        return path

    @staticmethod
    def find_files_by_extension(extension: str, ras_object=None) -> list:
        """
        List all files in the project directory with a specific extension.

        Parameters:
        extension (str): File extension to filter (e.g., '.prj')
        ras_object (RasPrj, optional): RAS object to use. If None, uses the default ras object.

        Returns:
        list: List of file paths matching the extension

        Example:
        >>> prj_files = RasUtils.find_files_by_extension('.prj')
        >>> print(f"Found {len(prj_files)} .prj files")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        files = list(ras_obj.project_folder.glob(f"*{extension}"))
        return [str(file) for file in files]

    @staticmethod
    def get_file_size(file_path: Path, ras_object=None) -> int:
        """
        Get the size of a file in bytes.

        Parameters:
        file_path (Path): Path to the file
        ras_object (RasPrj, optional): RAS object to use. If None, uses the default ras object.

        Returns:
        int: Size of the file in bytes

        Example:
        >>> size = RasUtils.get_file_size(Path("project.prj"))
        >>> print(f"File size: {size} bytes")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        path = Path(file_path)
        if path.exists():
            return path.stat().st_size
        else:
            logging.warning(f"File not found: {path}")
            return None

    @staticmethod
    def get_file_modification_time(file_path: Path, ras_object=None) -> float:
        """
        Get the last modification time of a file.

        Parameters:
        file_path (Path): Path to the file
        ras_object (RasPrj, optional): RAS object to use. If None, uses the default ras object.

        Returns:
        float: Last modification time as a timestamp

        Example:
        >>> mtime = RasUtils.get_file_modification_time(Path("project.prj"))
        >>> print(f"Last modified: {mtime}")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        path = Path(file_path)
        if path.exists():
            return path.stat().st_mtime
        else:
            logging.warning(f"File not found: {path}")
            return None

    @staticmethod
    def get_plan_path(current_plan_number_or_path: Union[str, Path], ras_object=None) -> Path:
        """
        Get the path for a plan file with a given plan number or path.

        Parameters:
        current_plan_number_or_path (Union[str, Path]): The plan number (1 to 99) or full path to the plan file
        ras_object (RasPrj, optional): RAS object to use. If None, uses the default ras object.

        Returns:
        Path: Full path to the plan file

        Example:
        >>> plan_path = RasUtils.get_plan_path(1)
        >>> print(f"Plan file path: {plan_path}")
        >>> plan_path = RasUtils.get_plan_path("path/to/plan.p01")
        >>> print(f"Plan file path: {plan_path}")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        plan_path = Path(current_plan_number_or_path)
        if plan_path.is_file():
            return plan_path
        
        try:
            current_plan_number = f"{int(current_plan_number_or_path):02d}"  # Ensure two-digit format
        except ValueError:
            raise ValueError(f"Invalid plan number: {current_plan_number_or_path}. Expected a number from 1 to 99.")
        
        plan_name = f"{ras_obj.project_name}.p{current_plan_number}"
        return ras_obj.project_folder / plan_name

    @staticmethod
    def remove_with_retry(path: Path, max_attempts: int = 5, initial_delay: float = 1.0, is_folder: bool = True, ras_object=None) -> bool:
        """
        Attempts to remove a file or folder with retry logic and exponential backoff.

        Parameters:
        path (Path): Path to the file or folder to be removed.
        max_attempts (int): Maximum number of removal attempts.
        initial_delay (float): Initial delay between attempts in seconds.
        is_folder (bool): If True, the path is treated as a folder; if False, it's treated as a file.
        ras_object (RasPrj, optional): RAS object to use. If None, uses the default ras object.

        Returns:
        bool: True if the file or folder was successfully removed, False otherwise.

        Example:
        >>> success = RasUtils.remove_with_retry(Path("temp_folder"), is_folder=True)
        >>> print(f"Removal successful: {success}")
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()

        path = Path(path)
        for attempt in range(max_attempts):
            try:
                if path.exists():
                    if is_folder:
                        shutil.rmtree(path)
                    else:
                        path.unlink()
                return True
            except PermissionError:
                if attempt < max_attempts - 1:
                    delay = initial_delay * (2 ** attempt)  # Exponential backoff
                    logging.warning(f"Failed to remove {path}. Retrying in {delay} seconds...")
                    time.sleep(delay)
                else:
                    logging.error(f"Failed to remove {path} after {max_attempts} attempts. Skipping.")
                    return False
        return False

    @staticmethod
    def update_plan_file(plan_number_or_path: Union[str, Path], file_type: str, entry_number: int, ras_object=None) -> None:
        """
        Update a plan file with a new file reference.

        Parameters:
        plan_number_or_path (Union[str, Path]): The plan number (1 to 99) or full path to the plan file
        file_type (str): Type of file to update ('Geom', 'Flow', or 'Unsteady')
        entry_number (int): Number (from 1 to 99) to set
        ras_object (RasPrj, optional): RAS object to use. If None, uses the default ras object.

        Raises:
        ValueError: If an invalid file_type is provided
        FileNotFoundError: If the plan file doesn't exist

        Example:
        >>> RasUtils.update_plan_file(1, "Geom", 2)
        >>> RasUtils.update_plan_file("path/to/plan.p01", "Geom", 2)
        """
        ras_obj = ras_object or ras
        ras_obj.check_initialized()
        
        valid_file_types = {'Geom': 'g', 'Flow': 'f', 'Unsteady': 'u'}
        if file_type not in valid_file_types:
            raise ValueError(f"Invalid file_type. Expected one of: {', '.join(valid_file_types.keys())}")

        plan_file_path = Path(plan_number_or_path)
        if not plan_file_path.is_file():
            plan_file_path = RasUtils.get_plan_path(plan_number_or_path, ras_object)
        
        if not plan_file_path.exists():
            raise FileNotFoundError(f"Plan file not found: {plan_file_path}")

        file_prefix = valid_file_types[file_type]
        search_pattern = f"{file_type} File="
        entry_number = f"{int(entry_number):02d}"  # Ensure two-digit format

        RasUtils.check_file_access(plan_file_path, 'r')
        with open(plan_file_path, 'r') as file:
            lines = file.readlines()

        for i, line in enumerate(lines):
            if line.startswith(search_pattern):
                lines[i] = f"{search_pattern}{file_prefix}{entry_number}\n"
                logging.info(f"Updated {file_type} File in {plan_file_path} to {file_prefix}{entry_number}")
                break

        with plan_file_path.open('w') as file:
            file.writelines(lines)

        logging.info(f"Successfully updated plan file: {plan_file_path}")
        ras_obj.plan_df = ras_obj.get_plan_entries()
        ras_obj.geom_df = ras_obj.get_geom_entries()
        ras_obj.flow_df = ras_obj.get_flow_entries()
        ras_obj.unsteady_df = ras_obj.get_unsteady_entries()

    @staticmethod
    def check_file_access:
    """Docs only, see 'check_file_access.py' for full function code"""


==================================================

File: c:\GH\ras-commander\ras_commander\RasUtils.zip
==================================================
PK    |2YlG       __init__.py}SN@zQR OZcL<CЮ.dw
4rb{3{k0uYVF1D^T6NB!M҄Bw&OQ⢀۩"*^4}'-H0'0.ܗ}9sYYKQ֕x(#h$ۥIէpKKߊ&O/a{*Y$ɥ`+oT	ZK9r@_~WucQJ&_(uK>#Bu{Pϥ" ?>?9?6?c3ceE=&,MnַV6Ԍ60?5NCo}_Ȗ:ؐ鯒5g();YI`ʈwHPK    2Y?_       _version.pymQK0P04e#tmZmRloVy	{2BTJ.N-aJUh3%{eu}p%!SjUa|cxO>H0D;V5S#d	nlvKeŒ9v`@a]]4S/Y0_I5cmZ #ti^@hHr~ޔ|FrYNCo?9N_>x!]cPK    D2Y|  V  
   RasCmdr.py<koɑ?4"q$`p^g loN F3Mq3=#J_U1ۋxəzwU&y1U۰v˻	j;MS57ޝ~|j3 ][p!/~/ל朷Mޔc0/&!SpV	ځy9azj~ wZlUó3!Ķ+\TVV`X%	Uت= |`cз\rb{bLzlۮg0_5p~bյu]]3~7ECVC?t@yhZ,K\{{^* \\t_.s&auU'K9:o4 yoyQ8o>8LWn~lA^iOAz?ŭ|$=$W_؏9cujA=?Z-9yJj]^׼>c2v;`ύ)rFwUS;z0AT._1|Xp0V$Cln6ծMk2rVf[u\6DZ!u;98Tf-/* n Jnguʶ9.ozdUZgP~7];4X!P %u8iSd3&ci3OˎoZRn-ȑriA@Jѯ4Y9S07EU9D ߵ
h:8Kk֞yq "Gx`23>qXdTHJ# ׈OC9.ECbHKn M0qsعY)D-@VmM .rNjUj5ohrQ|SYK)ŜQiѱ˯13 )i;&z);iV?Q4.x)w/m9ASW]/uw^+!Cfڜ]CP&7
2c,	]/p)z`c5J+T>6׼ۧ%K)maߡzHaWMQ[p[@"|8X:<KD+ɷ3;29dt8keSB쌔d^:;M6g߿o&3F%PbR\*:tΕk g7JHb1J 5=;pwAdkTD,L[&!#S&EBKNnFl6#p83"D-~IjoT0 lzy5'8h(áxšH0U؏|uOI3k:VMZXɴJi)cf!e1~Ub s7 h3UAXPFoQ7!3BԛHMri.aB9<	5Lw\{O=r|B	{H1[{\D2ؗK'|Ogv,rV4+wG-ȭL5*e,S;2Vh:oKf$nI$n5gub~N%6}:k
);,,E~:T*Gɏ<:@NƔ(mc)>yMr%sK񉅴X½log IhıB]sCJ&.~{:YL榜#`z\:{\ 8Ny^jq[`G1P ɔ4dX)ʌ,U(*KUŋa]A$dx2﹆Vx`7Ӗ'*EdhE&SG*B(0R8?qa ZKo^F,`%|,dD⿘F;`3=yGko5_g!MEp.jϡ' mJ{&{@&Hjhr7*RHJJ4v+bh`>}_q,0X	]t_W{pU@zke25ǷmJfɣ]/4J}
<wj<MN,pǠj-3b`@ow;r/	dbUtzL7]LTڦ^[z/ۡ=S17^R3YFmG&Ouq'64D2jBϲ7',˵M)F?¾P+%#aAߏ},9qsx&7nVrK&YaYtϬUYtϬ+3g?THSt17P^wd@AP)HFIR/v0"Y)\}';+st|(f􏰽(spu4Uu3}ڰX	R@S핥/aKj\x[qU@bQ@TB!5czB;+T}/t\.p0{l=3n3)?GD[PvHNgqm}6NFTT		37ߤtjg{@ǍΰଌÙ(p$l rs%D	kK%mjw`9\+HWGWۮ!coAOװ0	F382fɦQ?S쉟?{#[|WWiv	iݧܴƵCOCdFp5evAʟ+ֲ^5Hvr2BDC'_W3G`|G4q
:R3lu<6TjW=	>fwyi	-KXtcy)$y^"\};PSE+sD b^?P		\VwX lAg+]Se7.a~ի//} 8^-AӤZOvKjG^u>"kK{Ju^i[#3wiX{D2.إ<TO.'	*W0[y39s PG{Yx횹ܩ-Xs`cyĮݣ6m&gHߣ9%aG#SHv;.K]Z~|ͫA%rr&v!WCzbe<OWE[?i&YfNcb
:OO{ջsʰ#S4]ltAJ[.t`i{MCeXu!KҸ}
Kؐrx.%$BK 9}`jزn[x'`]	cҾrbL4oT1u|0w7F;Pu|4*~p>6O-h{
-_U_ZstQaVx_&G_	S;}V*G)yq_͠TĜ<rJm.)t?f}Sю*v#}Ky|
{w7ba|6;";.HhgV,fTk5NP02guAu={4 rJcl`t*k~)J{j@Dhdi+
^hNK *|㐠8b#LSX#$t-C;J,?ȶYbhꪹM_(XE1ǬJL~\G4HuH$扶V;Py&5^HA;7EUvk^{0`5'I:C9$XFiK|F\)ժ_L.?ë;,u{yms_HQWpޅVk>5<X*u)tʖˠM#ԾN `4Y};/1]t_U5L%U)ZqSN	3^{ws;fMs[­n3}YMOһ`'ĜaQ?j~|%B^/rXc/z0OΤ#jT&A:Zצ:k5v0U~T{R#HNs{8<eGJWd-g}i%i&Y]OfnU>Z\^C8G(37JWKJ1w/
v"9߳iG^rw5×^hӷ-ZRjNz`^6VGε?KLwAn s0GAWU0xLP*KqhRRK(*"SD'ZP`QٴEtM69;&ՓEĝ^J{{hHUxM&)~FRd(?>y)jUXlFx蹹_y=)9bщ˿J/S1WU>hE[n~ZAK48klbdv6~{%r25Up{OeЁR	D9c7hI>
sH6O(C>RQC",lKEIma~j'%^s6Dj[)W.|'AĺxkiQ6Q^>pob3<=.ĕ*nX銳fTj/C}dS@}c|9YJ}ٕJ<?9p$s,4ηēu'JR~Ba|0/K4>Ow|TI[LzAlI p:{,:p,G^ۂ_/_egsPMgMٱit_Gn$?>5>[YJMR21q>n+ޟx/?b}6 Ō21@MPӁ`៸+=Ο%xuC#lq=weǆ:烺J3VSUčHPkPmJ[\JRIJ~٣|u9qMeoNq$G͉{%zdGVu\4^$b]kj_zqv͹)[MsEڴt̿pkPK    Ƴ1YIH}  6     RasExamples.py]o6=@~a-$8 I$m3DUl}__r3)Q0l-弬Y#ϟ걡nⷼ^NΞ?[5).%+>G[zyukX嬚w9vy,T%5Ϟ?Ks)W_.(?L&Ⴈ%+֐_<+6`Iؿ<tPB-pv\$KZVIQMd 9 }Q V%E.6D0
hT% Q"-0,X]-AvrC6ǦR:]GhT='eǑc5!q?fu十eVaK*]69 *ˁQmRkLb{PEQZcCFM*4@*iZC^dI*״:tOq@.?বI^ͤIz)Hh9ɩnDF𴋀ifc$%II(5ᬙq$8D5dB&_qX&mS9(hv6uCY|OLdV=;ɯ-m*	+!3tچBu4H0ZP=(A'">4Gd^-3LPDv jt ~f`1b1~Yp	@;bٯ<eȬ΢נoHyvͣXI^cJT0TYC!YǮ~i%ʷ%z!NrJBO[܏WX!A5"_IOG1	@Z$)ixʤ 
It
bKsd@urO "mI/t='9f# Oo鑳 5PBW4BY{V^PϣK@0):0 k^)IȊ>M`Z[Afzvr
veY+.,K=B*Bbxi:tp5NJMeOV_q
N'>ZnhJ9XX+<L^ D!7\R>p~IZ%uHB0( !ꨍ]iZ5+C(G_#Ix&XHY0ÅST:#DXL#A9׈kxeܗn*SԖm.2;~5`yzU<)@t	鑕1D
:P\w$qD&s2:U/sɓɼUtćo+<0a I"C3p3@܄!s!H>d//}^^i?KÏ(+*[҅~ܓ5udp3{MKbv'?zl5
[9y96.ǿirU¬I[	vg\CmzVl<Wr	vgR\6N/NJ\{,9DSN yR0&G/HzЇ*j*=!t&JGX[ey%PhRu1LҤHX?)D(%N͆ԏuh*!`;	v1<dZ tT qh}Jb̇z 9sL	f1 UNK]FF2t=T%jh	ƂQFm=G[!!FËl]ohwsN/\r8O6:@4.*BGBu]eEvMLG+W7d,LH=g		mT[ɕ	AMAݶnv(cڍUK(0h99h6=#9-mXRtCWѡeի
*S砬q@4\g[3YGr*4	\qH%g#Pq8\U6{_cz>=Wt]wl&aw݌oxBvGfi#H8kG]e
^owڥY7}"% ?@qPyQ4;,Mۦjya-tݡhfp`-+=x;o׭L3|mym_%c=+5)GG)Tpa/Mf_vIDZM!s0̌~Y*$;N657(rI5	<I^C%4Ay׋|Lǹ&[YL%O2c@ow";	4Xp	}h?%EKFα	`l,Vݽ}Ʊ`*DU><KuC:r"i{4k:t4F"6YMN)6NG}IN4ȟHA_$fKՌ̘U)L "JL	yݜp}2Qz-J.(P@]]`9fi̽2a	taJ;qHo0@#հJ]M)p3)(5|m<DT	q
aȍjnk,/㒢 lnwA_h}8WF]}]Z9.",=Pb{fުֻÁִo],ՒnXsҚr0W6
ݴ`ij&* S,ӻ$}ixZ⽭0'"A6_yZ$MX|ꍪ=K0 B(ٸΑ.]ƭB*iJzH+wRh=k%(V|YkQb*gPm-$u[z@m?`!Gҽ2I+Abzh$?nm
GuM$yERA1cNd]rMܸꘪ9}|܍אi["+ۦ4>í[77t#3. 8a[KqATDXZ5hh'++!kRF9E8A]oo]yXnm(hA7?FoOe£Kl'=O䪲|5BP:nR{masO5Yq|]Ǡ٪_QmξmA bPtl7m#MDrV7 w{["MfnkץVI*(xMfq[2Q0.URRP9koq?'DI!#e/3C'lS4_juW7H\9l	gIn|wIÖ*>	L跰<_  Q~`Bޞ)Cy#X(/*VԼsUȺd8%0sFOnsIhe!#A

npuvwߍED@MOÒ|	yн?3ޗv|>~~2$-hR.H	T:Tab1v+o4Ipr|gL~.Kź:5@[imz`{-On,#JDJ5wGԯ'*?~8'.m!8dr#.X$`w*HƂPK    ų1Ysx    	   RasGeo.pyVKo68[[GiҞhG7"$C`DLdR lE{gDId95Royh4>g\3+4(+&TGxjͭ@"Rn@Hxy~xwvVO<&FhU* ֙ngyb7S"Q`y1s2Y(6OSuo>QʌGr5 W>b멼.m-{wcaV*v[1O3 LE~Nieۜ9m.|p$zTwdp[s֤im%(:/ƠA_4&H4m`OMOb-UnsJ \Ftnа)(6Q'RY`R%Uc8$ܖj,98vߚ7V/os|pr̼Je!צadZ>ao(N1_+,fІuShՉ	H%2O]I}mąsyG13YSQ2&*ٵϳW(l#r.h}%hV۔{k#m|<K:OȚ"2BShxP0oGIŬ$'e<rXiBZsSׁjڃ,{˳8k)`WR?adE1UKdb.T!%$lp!QX{ "Eث/Y.IHPkd(dr-dگ΢G*J)ُai9l׊s)V<z^q3VE|NҹıB1-1UI"^8rRC7ǳy@}<vD%i⻰dH8=X:桅٥a"I2y5n~Kg K|eZlUL)b`1MVq	p02_j5]4I3	%e8/Vn{߅sm-/RX"F!NU(ǖUeUپMo8Z{-x@xRUd4:=N\㠁fAȗ!3I]ςn~xDny.ؾ4.FK{\E<ë~Iϒonfkȯa]"P{ݧ<p҂KTPK    |2Yk2y  ?  
   RasPlan.py=oǎ0PtQI^;Ź:?^ZZٛHZ*k?r>9_+ɲ"!9$gjZjiA>',l:gǇGl:J'l*k!|<-ʚb̦i}9ϙFGa}5EWS$&.S $d0^TOʴ"N QEHtV;~f10)&aX}SЩ?b n!"+6ϳrS'dy#Yq.[$?KNtɡX$uլoTӬl'Ty":++/B=8$v71MBP`0c0๡&:S6LHÙ,ȤY<Y9FG	1nS:2Gz6-%ugk?GK2M8B	<cmWnCTfH4N˂3>XR#43dNߟ哼QW6XN*eI-)<JTw_γ+mJ9Mؠ=6N1Hn-ǧǆcOF,\YYYfs"B2ϪNewz!~/~S?	5A0hhK^^T}q.8,%񛭮R|hbR1p{T$,sCUv˲(;/k30,f  GZr"&9*Fɨ:ND;oU 10aٔ:X28$k3bfNݍY-yO:PS_9C׃oZ`>X};e>ЙQ>bälI`j':Kx
;'{߶[=lG'| [x5@1pJe[u`xA_舒qZ/ySN"䏞"` !qA7^x68!-#LZ0"R1,%cי1Vi R,YNX\3r=6np87E6';uf,2JFIhpŊb;	ę_syK\`6%5<}̧k@
ɒݸgmڌr5q:2Q/kGWYoi'g(# ˕Ƶ60&"׵67a=fg~\s)9zߜQ]*Pav"<:,ѯFF!Y=`1s5$P	e"kߨl>I1(I%ǀGg*U

׆}\F<'Êh\
EzPJtֶkHY1p[=͸pOd/- 0V(0| u8:=}[1G :&*Dα0k{QۢBQFuapO h,7x@S0W&&[9B]G(4Ģr[OHK)NTp=r;Bs{d?~Rq5h9'}:Au_!.QxΖw~ !c;xuɎ__{{c?.y%Z}pN}}u<~NvN["LnW{p/~^[89Sӎ/_nN&`6".,.vumg֖ۋ0:Ox6VtÒ.6  oP1#zĬ k71ͻ՞oWr59kW/l2Zg3.eCU;J1Nᶁ߻oRVxEEy~~&qZ*3bl@isLo{mX6΁4l J(P3D!ˢ*5=ZAH~|2Y<chT|h$'?J|L:vvٱ00K= wmņAjL(/4Ood<esMݘ'(Q΄+Tx uI^EZx~n@~<x]2w3 oБ:EԆ1W}^8Oe|^ߋ"/^7PC7Mhlsr{vjuqϕY {Ťc[=$[-M|10mqD5{1GKaCuOszgrF03V&guz}>nFWSF$A-?k	.e\fǜʥyQ^6qu棴
?
\	gy}ΆQф퓷l 4J=z:U|ZXۈYJ<"f@iKtVHGbHdh!'t <+s4)+	z"nqSl\iӼ[%oQZs,	: e6KlYXgAWho䍹L$,~%.fxrSqQNg"<n=~Xȭ',f<-mdZ9ͼkk"<ØHLYVrl[7Y(F$c9\I㶸yZ̧K*+XƋc`zAM,u\:}c?_fzǭnB7oE)	8XӅ]+)̢$X<Лp?l+mlk]17Hlh®--;@MђA2)~'+*Pb{P1^&iQVO\%%QIq%XN|7`(=VVMv JݡlVKt癇x(Vlɒ=
T-> '҇sU53.9MFjΖ	${ȑRrX<EZ8TC.!Jd<wȜ7rٶˋj0_f!H\GzXD)W~ܓ(9̇X<͇rO:wE:do4F	lRcr8ssiq4|ztTx+"R*hIs8GGה4s 5.ac6VXl6h|
[Sv<% JLK[6ǫq5Ԉ~CH(R>݊s4	!<ϼd}\L\iNvcGMM˝3)ggkIr,{͚WDKKkܮo%KvvCz*uIjDGPǑYP2Nzh(ŧǁI
defxZE+ܻF#̱V)|V/AK
(᭲_dXoH\RZ(hBvr^]M
L}7$rqPn9`-GbTqG+Z38 eu`_P|*ۡn?ԁms4n?	T]t]4
ɣoϧm};*JۙX,^h]s%_8p{93sdRFU>S-.15r6y13'142U
h8ieY! Ov"Lr%4蹆R+CGJ1:ȅܩYsT4M4j8(_4.jkDmRM1=D`IjUBq-+BhC3 ?:7}kk|we+#Ycs!o)s#wlaB5 |]Xk|L~`tBCi2M[F֝ljoP5T+CgURBx*#TFk_L&ؔGK+Q]xU"vȸ:uT?MWFuYu>51p,ǝ:GvVb>ZoeE}O=Ո/p΁Y OpC`V@ezs_ `aKMf81D~']m$F\&%k I'AhyBM3<%)Er[wTTXgbH=3h}D۪NLrbma}xt$W.8#cRi>)2	"wz/)aey0*&$&:$n6V7<ouG;.4=WZfDEuV|Ɓ<מ-2(ٴȇW |˞4kϞa4AtE⭟]6EIfuz^ Nb1u0F}tWuMS2\H+adnX8kiO 6M\Q~PG*0QAu5bO >^qV{$ފ^kVn;;)^Ǻ|227Hu;\@3}ֳœp%X}q-]4QZqË y_YE/'++z$LlN?XM.GixEd|\qa%ӈ%\%
5E|~Blwp@$]i@pT
/K8.jw9~{ Eb+6EO'EH֨yGac~E4޷IppNB11锞9xa}3.XjZX22͹k;3gt	*yb5$MfhvY%Bg@J|IQMf~`4]g2B8|8'}Ҽ9ISƛg;f07rH|atK+l8bIXnZ |>يXl*tžr䜯:8ńW%;=r/"VH_Z#1+A#N=Z}NjofL߱*;LEtF)qqM|:ŎmGBkLGQ蔄Iįf jdy
/ztf/o$'2\9ڎωqѤH'6bkFd9\zaj3GAD$vPCmMCʟ΁6^mF`HMDuX(q"L|)uH@ĕ	(YzOIO&Li'G֐/4%S$Rh$H<˦#po#5Bk.VIK"tvpN*DpbB)>VnYSCcZ!{ڇlݳٲH`f7n2㯬tG|`:IX-Scq4-!,U30X-+/iu!V+6â*;Z:Drt RBWz+ZoSpV	mmIZ4qRibM1-k1⁦SWHnAWp:4sV㛎hd0/Z	EmݖLdt,ǵZ^0W(hY(L	q0Q*e(1 "{	?BEF1A)_*m5me٘ݸeqQf0/`zԛʳ|L{ۭbE=v:.8k]u\Q.]:+x]%=oEo/ax,N^Ųy䅤b]ǵ};u\ºi]tw@?עt5NKgmllw9ƼFbe)D4.Ǔ,Lg&~2:]
Qq4^\#U	<rIw@ssIӺkI$
:溲k]ٵZWvZ"F5f.2L"H=`й{YKWdN4e˺kἇK5L_mH:tZWvK[k]ﴮwݔ:KMi箒$w@iͼSj p[
)
OX-T_Wck]uO-+/ips!XWcX5J`]PZW(͋lPX2h\pqmAl^FfhI^73,uA>/!o}y秾sIpp8}FlLx*e,kvU/1;{2GD꬚N;hc[GrY	T@O,01aNMvmہm[2cl[L&5KU\?DT%>8by?%N-2E(pcj
7\t@}DՂ 9VhDM(2G⽊zQՕF9ċY6^H:
GĪg=hHM :K}v.OS2ex7ܴZTW!g<F9/}8W.R<
^!=uMc[:bO$qs GA~c4;:O?(=+ $lZ<wb	ШJh&UI44廄pnx7֣,(:o?y~cwDn/9kH(A	:3(|kW!`<5;V}ܢ	EWd~uMq=y6(PK    ĳ1Ye  <  	   RasPrj.pyksgv:)rhF(2+JN;u<o<xC/}ESIA bht%C{*)ZGU&7I
!"E!b2ɖA-"DçO\8e3!ɒrbnG3x4|h ʌWPTIDR |ZTr%e"3d$V^N^ЊLn**5qǏY%X생 Y:YG
H:]&ױAT,8$ 嚳LLfOk+WQDJ,$p+Y*&(ePG?).:eXfqܢ*Jf/qƆs04@BΑh4z䙘521#EYܦIV9^j&fB^hq|ɵH>_,
\!Q]:Aob>'J>\yGTrg8cFHks#'qj8t2@+{%X󆛜afܨ/gᅌ!dQA8<tH]$K9!ĎYv2Kec`)4e.^.If&:.]rh0z%u'VjF/e	Ą>UFIHs\=ץj&R,"r\ZBXpS^b4E|ڊ]$[z9"ͷ̇9<Y>=X|Pu֖Mza q>.{&Ͷ8[Ps;jX_kSNfofy-Wy\hTd#><w&@|%42O}2;{x?Dcߐ!oa7;ޡKFÜGN_wK~JP&I:ok%9A&BM`"W\fXy!+sL@G+	Q߉n3Gj6ngnV6Ka(4S0aH4mǘLh.!k/H0W@	"03
De/{3fReg0Ǌ1a
2՞V[xR"ֱex)8	fiX/f? W/Or(vZ5֛N
ypH{Qt]饺Ŭ
I1f]\0Bzǣ~)<
~qd{(qTFGH;x1&59ŽӞφT	rMi]H9@xy	.Pq=̯i$MHq/cY4^6ACx1ʴ$(ٙsФQ}?cG3^3<ʃ<*;y~wp~2g/Ҕ 9gb_uSiQzɯg.HZW`QB<LbHk @,%iNm'1fs;y澡1}۠i-$[dddۃί,FLn<@{ehc`L|d3(܀Sj6KTA$kb(XQ㰯x8,O;PI{bβfw+pJe"C:=CT)G*E>+Saw4+7r_UY٦5D%,&1oOw	KK9!qi|g$NHL&]e ?Zt
 $X,`yw`du*&ݥ%kqb K(Gk#Fch2Z8'3=ѩ(Բ!;Ӳ;}.zˍ0CÇXJFBF<Eupf\&{`Ovam֓Ax
ʎ+4&DYhG*B\+H]/Sp#&	N@X,)!\8|;@LkYޔk[7,X;}BzY<.1[:PukB	9^'Oߍc]uҶE]+j
S9oU'S<bVѸ1l5 \MAm}	)sA>J1V!2?3nS澂(;?^?3MxST&D?3cٔ?VDv?!Qa+yK;;v~#P*\zP]]Mէ%_=26fj{(E; һ\D;zR5>_3X5z`!XW&p7wCc,Gcyj1m-BZ}+./{`0Zm%~~R=|
$';jd&+UT	׮@5"a$hSvCܮFByOs=v80!
3JٻvsV`wZ@b=V$[jM<yr؇ml{/Z)E[5u]`otݨHtf#ܱMJ@T^oOfgbv!fgǯ9PW?NOflS>o٫>b7oX;rQ6]u:s\sbyu"BPkSc鄣溛$4C2lkۓ8qM,\P-:Q8
5ݫIىy:uPf2EWNjCC5f}8's
ذnG߄_a?15ZP]OuI5Zm`RKAcwN]n0NkZ9:ϴ8TO1TjtM^fԓ!njX
T ~Tn:Lxkyխ,nv\h_}fX=*E@?r0NS0O)ͫph];x_ŧ}Ry˛$؜7D^ߪgTD7lJ{,Sj^PO
aOwnlbK=YB=?`B6!
Ze\W˕JXɦġ@&MdzQaVe.V:1+ѱ\x]^91:.<$>s/$vv "?7҉BztcrͬDebIщ=I]-"̎BV%K&PInl0)KسD~61fn8nP(*O+7,WE㬁 MVI>|Z;i9G3mQn5#Ta%B֧+o<X<mOLcDML\-"ocWv~֡g;)}czuS>T3GWF[	9B͔щAqW;/5}[tVoL܊Ֆmo5<mUh/gû}ňuw|nM%#ows`nhxms큗~ztT5Qܼ]U"l+ Pߢ5[F'^Ɔ_M[޿gxQ#gΨ&3L@=۞!t}H;9ƩTG/shfL{e)0
?וKfPkx1u![{tH(x)#3g
m]ɶw2w󶙕`72_tɥM!z8ZbdӼHiۅגA~,3I)wQeRb αu4PK    |2Y.@N       RasUnsteady.pyVo6~7=D4u+ m#b)T];J%Y)l|EwErF#BKQ֡Pz,тTՏ>@mg̜Ma
+ەdUkI |:1.g\.I},AaN؞Nߟ#By*:'	f[#Hw@sYȬ5%aiΉf^\Vp)<
FAlY!8,Lጆ0r\f ~?z!t1!PQ!<X{(lm͖UdƇ3N7S-NxgO~%cd31jH#qB1;I(K,Zvat.
Dx\drj/.f.UE$zWVDUx*(KytB	3^K඼[Lk+-e<P*cqoDo~3:I.q&oeu!Qm<h"=0 lK:q=TIc'BiVaχ<	E@MgP9#ot"x6~}\s0齤[U<J\*\E39EjonH7nT~m6$#sNaU
J;G$\=JZNNdHkxCsIIrg3"s3'nDi#L<<P5Z=i!i	w|mЩtXQ0f&)m帓Gn!hހ?U41x48/SǻyTY|byfz9/g7"M6ci^m+ڄXuka3,	)4pWg6UحXivlS.lPK    |2YM
  /     RasUtils.pyZoۺ,w͖bv{Qv}
D$
$U3CJ"e)v{!(9<LNO>,̆u2,5KbF0,
^&B<[*6ɲ0[}S1Yy>'v̽G&R}kހTT''k̀WOO\޼aJg%2ZdF,+V R=HVJW9RH&=g<IP\`TĞڀU!̍LP"RRXm]Eil7gv|4Ι6]>rM{Y{(WǸcdJ&ҕXei&čx]rAiǳՓE(mfe`o~)Hp6X`I@>*Q&+&q,9Yæ[9ll͙m<Wo>0XZ]Fs|뜢M~%LJݗk_Qŏwrxuc2Eq(%TJ^6B68_FnxtA485!k(;{ՍX. L?"<ݝTϛ2xHB#d:377nFmD;/BXU̞xL垍1@ %J,{(QMp9Qʊ"ΌvJNuC $CC,E   &J;a/y
ҝвm``rd7(p[YE0i1ևo(AtU?:LlW18fC= 28 L^YyV<͎kFLD]EK]+a)ZLe@Db	4hRֶG; D~XN $Ño5dmڌ":GXL
!BIqq+Q}a EBxx,oH4+b^,7qg+QQ>/9(</?;ꉆ^ .BB}Z4h((:)oH"Lm{~ҬfuB,pBt+kضlsQF-َ!㣦S&4X6]D*s	׹\϶
wVDBvdtI@\CXhPuw;`ͱI[f*Gm7.}pk3YƋ*$4@ H
<jahED^cxC\YS1\Rc< J1Ç*'؜(dM{ i.9@/N麤?kJ;pBQΜRgM瑧5$_,
{Lz<r^҂U!#e],ZH咉NP/v-LWdM,$Ϯξ[udv,kUEgY?0Cic%kg,GCY] e.ۖ$#L#_P\<0>xk<0=th(L"bD3qHQՀ[:٢d7awZ>OENkRR5kpػ;1v>`t$$'S-~ovq5$yǊp^tRBOlba{uƈ2TsnomE7gKxGU1}z'ĮG$ &NVLUDMa {ɇiu-wwX6wYQmQp,"wv0k;-VLVvp넶e`vLo9Tu$"8htDWs.v:OxTO	Y}20嗈+fE@32kQ/@ׁ.ӛ* .E_chLT>ua+.|ʥPEdil_^gv3*7r.[Wʮ0,d[k%zsv ֹUD4qEp%xD9%pqa(pU[Q-?	 	FH٩R'tn]fS	w >SE\ 
E+Hm%Sauf%sxߜb늦?	YLl6)~cO6'7eSp߻'	?-1Fqm7;@I.{#{i萹)t95cֲ>	2gfEݑ==lom4uRCT0POw,}o'Zo ɬ[r9>	]Smp!nOFx@fd l:8U
f;XR_ۯ\n`fij)vEtGv=fCH󍗢$sjpBFQǡWf;lNS1%J(q<;TFRQhѡV8}ɾZw[ωoݿ -	;^ #nXn}szNnG@_kkYkoQNVVhXG8%I;,2W8S]S=T]S=T}Gm~鲗M^2%~l;u ]'${aOT#50CeBR22jϿۻ6C̴`~jr3`lAz~~1/Fm>/8
PK     |2YlG                    __init__.pyPK     2Y?_                  _version.pyPK     D2Y|  V  
              RasCmdr.pyPK     Ƴ1YIH}  6                RasExamples.pyPK     ų1Ysx    	            |&  RasGeo.pyPK     |2Yk2y  ?  
            +  RasPlan.pyPK     ĳ1Ye  <  	            EG  RasPrj.pyPK     |2Y.@N                W  RasUnsteady.pyPK     |2YM
  /              [  RasUtils.pyPK    	 	   2f    
==================================================

File: c:\GH\ras-commander\ras_commander\_version.py
==================================================
# file generated by setuptools_scm
# don't change, don't track in version control
TYPE_CHECKING = False
if TYPE_CHECKING:
    from typing import Tuple, Union
    VERSION_TUPLE = Tuple[Union[int, str], ...]
else:
    VERSION_TUPLE = object

version: str
__version__: str
__version_tuple__: VERSION_TUPLE
version_tuple: VERSION_TUPLE

__version__ = version = '0.29.dev1+g22e75d4.d20240919'
__version_tuple__ = version_tuple = (0, 29, 'dev1', 'g22e75d4.d20240919')

==================================================

File: c:\GH\ras-commander\ras_commander\__init__.py
==================================================
from importlib.metadata import version, PackageNotFoundError

try:
    __version__ = version("ras-commander")
except PackageNotFoundError:
    # package is not installed
    __version__ = "unknown"

# Import all necessary functions and classes directly
from .RasPrj import ras, init_ras_project, get_ras_exe
from .RasPrj import RasPrj
from .RasPlan import RasPlan
from .RasGeo import RasGeo
from .RasUnsteady import RasUnsteady
from .RasCmdr import RasCmdr
from .RasUtils import RasUtils
from .RasExamples import RasExamples

# Import all attributes from these modules
from .RasPrj import *
from .RasPlan import *
from .RasGeo import *
from .RasUnsteady import *
from .RasCmdr import *
from .RasUtils import *
from .RasExamples import *

# Define __all__ to specify what should be imported when using "from ras_commander import *"
__all__ = [
    "ras",
    "init_ras_project",
    "get_ras_exe",
    "RasPrj",
    "RasPlan",
    "RasGeo",
    "RasUnsteady",
    "RasCmdr",
    "RasUtils",
    "RasExamples"
]

==================================================

